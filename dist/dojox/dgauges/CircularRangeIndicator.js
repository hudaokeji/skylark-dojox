/**
 * dojox - A version of dojox.js framework that ported to running on skylarkjs.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/dojox/
 * @license MIT
 */
define(["dojo/_base/declare","./ScaleIndicatorBase","./_circularUtils","dojo/_base/event"],function(t,a,i,s){return t("dojox.dgauges.CircularRangeIndicator",a,{start:0,radius:NaN,startThickness:6,endThickness:6,fill:null,stroke:null,constructor:function(){this.indicatorShapeFunc=null,this.fill=[255,120,0],this.stroke={color:"black",width:.2},this.interactionMode="none",this.addInvalidatingProperties(["start","radius","startThickness","endThickness","fill","stroke"])},_interpolateColor:function(t,a,i){return((1-i)*(t>>16&255)+i*(a>>16&255)&255)<<16|((1-i)*(t>>8&255)+i*(a>>8&255)&255)<<8|(1-i)*(255&t)+i*(255&a)&255},_colorsInterpolation:function(t,a,i){for(var s=[],o=0,n=0;n<t.length-1;n++)o=(a[n+1]-a[n])*i,o=Math.round(o),s=s.concat(_colorInterpolation(t[n],t[n+1],o));return s},_alphasInterpolation:function(t,a,i){for(var s=[],o=0,n=0;n<t.length-1;n++)o=(a[n+1]-a[n])*i,o=Math.round(o),s=s.concat(_alphaInterpolation(t[n],t[n+1],o));return s},_alphaInterpolation:function(t,a,i){for(var s=(a-t)/(i-1),o=[],n=0;n<i;n++)o.push(t+n*s);return o},_colorInterpolation:function(t,a,i){for(var s=[],o=0;o<i;o++)s.push(_interpolateColor(t,a,o/(i-1)));return s},_getEntriesFor:function(t,a){for(var i,s,o=[],n=0;n<t.length;n++)s=null==(i=t[n])[a]||isNaN(i[a])?n/(t.length-1):i[a],o.push(s);return o},_drawColorTrack:function(t,a,s,o,n,e,r,h,l,c,u,g){var d,p=.05;if(d=6.28318530718-i.computeAngle(e,r,n),!isNaN(g)){var f=i.computeAngle(e,g,n);l*=f/d,d=f}var M,_=Math.max(2,Math.floor(d/p));p=d/_;var v,k,N,I,T;M=-h,v=(h-l)/_,"clockwise"==n&&(p=-p);var P=[];for(k=a+Math.cos(e)*(o+M),N=s-Math.sin(e)*(o+M),P.push(k,N),T=0;T<_;T++)I=e+T*p,k=a+Math.cos(I+p)*(o+M+T*v),N=s-Math.sin(I+p)*(o+M+T*v),P.push(k,N);for(isNaN(I)&&(I=e),k=a+Math.cos(I+p)*(o+0+0*(_-1)),N=s-Math.sin(I+p)*(o+0+0*(_-1)),P.push(k,N),T=_-1;T>=0;T--)I=e+T*p,k=a+Math.cos(I+p)*(o+0+0*T),N=s-Math.sin(I+p)*(o+0+0*T),P.push(k,N);k=a+Math.cos(e)*(o+0),N=s-Math.sin(e)*(o+0),P.push(k,N),k=a+Math.cos(e)*(o+M),N=s-Math.sin(e)*(o+M),P.push(k,N),t.createPolyline(P).setFill(c).setStroke(u)},refreshRendering:function(){this.inherited(arguments);var t=this._gfxGroup;t.clear();var a=this.scale.originX,s=this.scale.originY,o=isNaN(this.radius)?this.scale.radius:this.radius,n=this.scale.orientation,e=i.toRadians(360-this.scale.positionForValue(this.start)),r=isNaN(this._transitionValue)?this.value:this._transitionValue,h=i.toRadians(360-this.scale.positionForValue(r)),l=this.startThickness,c=this.endThickness;this._drawColorTrack(t,a,s,o,n,e,h,l,c,this.fill,this.stroke,NaN)},_onMouseDown:function(t){this.inherited(arguments);var a=this.scale._gauge._gaugeToPage(this.scale.originX,this.scale.originY),i=180*Math.atan2(t.pageY-a.y,t.pageX-a.x)/Math.PI;this.set("value",this.scale.valueForPosition(i)),s.stop(t)},_onMouseMove:function(t){this.inherited(arguments);var a=this.scale._gauge._gaugeToPage(this.scale.originX,this.scale.originY),i=180*Math.atan2(t.pageY-a.y,t.pageX-a.x)/Math.PI;this.set("value",this.scale.valueForPosition(i))}})});
//# sourceMappingURL=../sourcemaps/dgauges/CircularRangeIndicator.js.map
