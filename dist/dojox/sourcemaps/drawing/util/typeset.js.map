{"version":3,"sources":["drawing/util/typeset.js"],"names":["define","greeks","convertHTML","inText","replace","match","code","charAt","number","substr","isNaN","String","fromCharCode","console","warn","convertLaTeX","word","log"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,SAASC,GAWrC,OAECC,YAAa,SAASC,GACrB,OAAGA,EACKA,EAAOC,QAAQ,aAAa,SAASC,EAAMC,GACjD,GAAmB,KAAhBA,EAAKC,OAAO,GAAQ,CAEtB,IAAIC,GAAQF,EAAKG,OAAO,GACxB,IAAIC,MAAMF,GACT,OAAOG,OAAOC,aAAaJ,QAEvB,GAAGP,EAAOK,GACf,OAAOK,OAAOC,aAAaX,EAAOK,IAKnC,OADAO,QAAQC,KAAK,0BAA0BT,GAChCA,IAGFF,GAGRY,aAAc,SAASZ,GAEtB,OAAGA,EACKA,EAAOC,QAAQ,iBAAiB,SAASC,EAAMW,GACrD,OAAGf,EAAOe,GACFL,OAAOC,aAAaX,EAAOe,IACR,MAAlBA,EAAKP,OAAO,EAAE,GAGfE,OAAOC,aAAaX,EAAW,IAAGe,EAAKP,OAAO,GAC3B,SAAlBO,EAAKP,OAAO,EAAE,GAGfE,OAAOC,aAAaX,EAAc,OAAGe,EAAKP,OAAO,GAC9B,OAAlBO,EAAKP,OAAO,EAAE,GAGfE,OAAOC,aAAaX,EAAY,KAAGe,EAAKP,OAAO,IAEvDI,QAAQI,IAAI,gBAAgBZ,EAAM,OAAOF,QACzCU,QAAQI,IAAI,8CACVb,QAAQ,QAAQ,MAEbD","file":"../../../drawing/util/typeset.js","sourcesContent":["define([\"../library/greek\"], function(greeks){\r\n// summary:\r\n//\t\tSingleton used for converting characters and typsetting.  Required by _base.\r\n// description:\r\n//\t\tEventually, this is supposed to turn input strings of mathematical\r\n//\t\texpressions into typeset expressions that can be displayed on the\r\n//\t\tcanvas.  For now, we just generate Greek letters based on LaTeX style\r\n//\t\tentity codes.\r\n\r\n\t\r\n\t//dojox.drawing.util.typeset = \r\n\treturn {\r\n\r\n\t\tconvertHTML: function(inText){\r\n\t\t\tif(inText){\r\n\t\t\t\treturn inText.replace(/&([^;]+);/g,function(match,code){\r\n\t\t\t\t\tif(code.charAt(0)=='#'){\r\n\t\t\t\t\t\t//coerce remainder of string to int\r\n\t\t\t\t\t\tvar number=+code.substr(1);\r\n\t\t\t\t\t\tif(!isNaN(number)){\r\n\t\t\t\t\t\t\treturn String.fromCharCode(number);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(greeks[code]){\r\n\t\t\t\t\t\treturn String.fromCharCode(greeks[code]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// This is generally for server code, so there\r\n\t\t\t\t\t// is no point bothering the user in the case of an error.\r\n\t\t\t\t\tconsole.warn(\"no HTML conversion for \",match);\r\n\t\t\t\t\treturn match;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn inText;\r\n\t\t},\r\n\r\n\t\tconvertLaTeX: function(inText){\r\n\t\t\t// console.log(\"***** convertLaTeX for \",inText);\r\n\t\t\tif(inText){\r\n\t\t\t\treturn inText.replace(/\\\\([a-zA-Z]+)/g,function(match,word){\r\n\t\t\t\t\tif(greeks[word]){\r\n\t\t\t\t\t\treturn String.fromCharCode(greeks[word]);\r\n\t\t\t\t\t}else if(word.substr(0,2)==\"mu\"){\r\n\t\t\t\t\t\t// special handling for \\mu since it is\r\n\t\t\t\t\t\t// a unit prefix for micro.\r\n\t\t\t\t\t\treturn String.fromCharCode(greeks[\"mu\"])+word.substr(2);\r\n\t\t\t\t\t}else if(word.substr(0,5)==\"theta\"){\r\n\t\t\t\t\t\t// special handling for \\theta since it is\r\n\t\t\t\t\t\t// a standard prefix for angle associated with a vector.\r\n\t\t\t\t\t\treturn String.fromCharCode(greeks[\"theta\"])+word.substr(5);\r\n\t\t\t\t\t}else if(word.substr(0,3)==\"phi\"){\r\n\t\t\t\t\t\t// special handling for \\phi since it is\r\n\t\t\t\t\t\t// a standard prefix for angle associated with a z-axis vector.\r\n\t\t\t\t\t\treturn String.fromCharCode(greeks[\"phi\"])+word.substr(3);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"no match for \",match,\" in \",inText);\r\n\t\t\t\t\tconsole.log(\"Need user-friendly error handling here!\");\r\n\t\t\t\t}).replace(/\\\\\\\\/g,'\\\\');\r\n\t\t\t}\r\n\t\t\treturn inText;\r\n\t\t}\r\n\r\n\t};\r\n\r\n});\r\n"]}