{"version":3,"sources":["drawing/stencil/Line.js"],"names":["define","lang","oo","Base","registry","Line","declare","options","type","anchorType","baseRender","dataToPoints","o","this","data","radius","angle","pt","util","pointOnCircle","x","y","x1","y1","x2","y2","points","pointsToData","p","_create","shp","d","sty","remove","container","createLine","setStroke","_setNodeAtts","render","onBeforeRender","renderHit","style","currentHit","current","setObject","register","name"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,aAAc,UAAW,wBACpD,SAASC,EAAMC,EAAIC,EAAMC,GACzB,IAAIC,EAAOH,EAAGI,QACbH,EACA,SAASI,MAQRC,KAAK,6BACLC,WAAY,SACZC,YAAW,EAoCXC,aAAc,SAASC,GAItB,IADAA,EAAIA,GAAKC,KAAKC,MACTC,QAAUH,EAAEI,MAAM,CAItB,IAAIC,EAAKJ,KAAKK,KAAKC,cAAcP,EAAEQ,EAAER,EAAES,EAAET,EAAEG,OAAOH,EAAEI,OAEpDH,KAAKC,KAAOF,GACXU,GAAGV,EAAEQ,EACLG,GAAGX,EAAES,EACLG,GAAGP,EAAGG,EACNK,GAAGR,EAAGI,GAQR,OAJAR,KAAKa,SACHN,EAAER,EAAEU,GAAID,EAAET,EAAEW,KACZH,EAAER,EAAEY,GAAIH,EAAET,EAAEa,KAEPZ,KAAKa,QAEbC,aAAc,SAASC,GAUtB,OAPAA,EAAIA,GAAKf,KAAKa,OACdb,KAAKC,MACJQ,GAAIM,EAAE,GAAGR,EACTG,GAAIK,EAAE,GAAGP,EACTG,GAAII,EAAE,GAAGR,EACTK,GAAIG,EAAE,GAAGP,GAEHR,KAAKC,MAGbe,QAAS,SAAmBC,EAAoBC,EAAaC,GAM5DnB,KAAKoB,OAAOpB,KAAKiB,IACjBjB,KAAKiB,GAAOjB,KAAKqB,UAAUC,WAAWJ,GACpCK,UAAUJ,GACZnB,KAAKwB,aAAaxB,KAAKiB,KAGxBQ,OAAQ,WAMPzB,KAAK0B,eAAe1B,MACpBA,KAAK2B,WAAa3B,KAAKgB,QAAQ,MAAOhB,KAAKC,KAAMD,KAAK4B,MAAMC,YAC5D7B,KAAKgB,QAAQ,QAAShB,KAAKC,KAAMD,KAAK4B,MAAME,YAY/C,OALA1C,EAAK2C,UAAU,6BAA8BvC,GAC7CD,EAASyC,UACRC,KAAK,8BACH,WAEIzC","file":"../../../drawing/stencil/Line.js","sourcesContent":["define([\"dojo/_base/lang\", \"../util/oo\", \"./_Base\", \"../manager/_registry\"], \r\nfunction(lang, oo, Base, registry){\r\nvar Line = oo.declare(\r\n\tBase,\r\n\tfunction(options){\r\n\t\t// summary:\r\n\t\t//\t\tconstructor\r\n\t},\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tCreates a dojox.gfx Line based on data or points provided.\r\n\r\n\t\ttype:\"dojox.drawing.stencil.Line\",\r\n\t\tanchorType: \"single\",\r\n\t\tbaseRender:true,\r\n\t\t\r\n/*=====\r\nStencilData: {\r\n\t// summary:\r\n\t//\t\tThe data used to create the dojox.gfx Shape, specify\r\n\t//\t\tx1,y1,x2,y2, or x,y,angle,radius\r\n\r\n\t// x1: Number\r\n\t//\t\tFirst point x\r\n\t// y1: Number\r\n\t//\t\tFirst point y\r\n\t// x2: Number\r\n\t//\t\tSecond point x\r\n\t// y2: Number\r\n\t//\t\tSecond point y\r\n\t\r\n\t// ALTERNATIVE:\r\n\t\r\n\t// x: Number\r\n\t//\t\tFirst point x\r\n\t// y: Number\r\n\t//\t\tFirst point y\r\n\t// angle: Number\r\n\t//\t\tangle of line\r\n\t// radius: Number\r\n\t//\t\tlength of line\r\n},\r\n\r\nStencilPoints: [\r\n\t// summary:\r\n\t//\t\tAn Array of dojox.__StencilPoint objects that describe the Stencil\r\n\t//\t\t[First point, Second point]\r\n],\r\n=====*/\r\n\t\t\r\n\t\tdataToPoints: function(o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts data to points.\r\n\t\t\to = o || this.data;\r\n\t\t\tif(o.radius || o.angle){\r\n\t\t\t\t// instead of using x1,x2,y1,y1,\r\n\t\t\t\t// it's been set as x,y,angle,radius\r\n\t\t\t\t\r\n\t\t\t\tvar pt = this.util.pointOnCircle(o.x,o.y,o.radius,o.angle);\r\n\t\t\t\t//console.log(\" ---- pts:\", pt.x, pt.y);\r\n\t\t\t\tthis.data = o = {\r\n\t\t\t\t\tx1:o.x,\r\n\t\t\t\t\ty1:o.y,\r\n\t\t\t\t\tx2:pt.x,\r\n\t\t\t\t\ty2:pt.y\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.points = [\r\n\t\t\t\t{x:o.x1, y:o.y1},\r\n\t\t\t\t{x:o.x2, y:o.y2}\r\n\t\t\t];\r\n\t\t\treturn this.points;\r\n\t\t},\r\n\t\tpointsToData: function(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts points to data\r\n\t\t\tp = p || this.points;\r\n\t\t\tthis.data = {\r\n\t\t\t\tx1: p[0].x,\r\n\t\t\t\ty1: p[0].y,\r\n\t\t\t\tx2: p[1].x,\r\n\t\t\t\ty2: p[1].y\r\n\t\t\t};\r\n\t\t\treturn this.data;\r\n\t\t},\r\n\t\t\r\n\t\t_create: function(/*String*/shp, /*StencilData*/d, /*Object*/sty){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a dojox.gfx.shape based on passed arguments.\r\n\t\t\t//\t\tCan be called many times by implementation to create\r\n\t\t\t//\t\tmultiple shapes in one stencil.\r\n\r\n\t\t\tthis.remove(this[shp]);\r\n\t\t\tthis[shp] = this.container.createLine(d)\r\n\t\t\t\t.setStroke(sty);\r\n\t\t\tthis._setNodeAtts(this[shp]);\r\n\t\t},\r\n\t\t\r\n\t\trender: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders the 'hit' object (the shape used for an expanded\r\n\t\t\t//\t\thit area and for highlighting) and the'shape' (the actual\r\n\t\t\t//\t\tdisplay object).\r\n\r\n\t\t\tthis.onBeforeRender(this);\r\n\t\t\tthis.renderHit && this._create(\"hit\", this.data, this.style.currentHit);\r\n\t\t\tthis._create(\"shape\", this.data, this.style.current);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n);\r\n\r\nlang.setObject(\"dojox.drawing.stencil.Line\", Line);\r\nregistry.register({\r\n\tname:\"dojox.drawing.stencil.Line\"\r\n}, \"stencil\");\r\n\r\nreturn Line;\r\n});\r\n"]}