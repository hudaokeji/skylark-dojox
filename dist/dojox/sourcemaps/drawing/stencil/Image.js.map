{"version":3,"sources":["drawing/stencil/Image.js"],"names":["define","dojo","oo","Base","registry","Image","declare","options","type","anchorType","baseRender","dataToPoints","o","this","data","points","x","y","width","height","pointsToData","p","s","e","src","_createHilite","remove","hit","container","createRect","setStroke","style","current","setFill","fill","_setNodeAtts","_create","shp","d","sty","getParent","createImage","add","render","dbg","isNaN","getImageSize","console","warn","onBeforeRender","renderHit","_gettingSize","img","create","body","err","connect","disconnect","c","error","dim","marginBox","setData","w","h","destroy","setObject","register","name"],"mappings":";;;;;;;AAAAA,QAAQ,OAAQ,aAAc,UAAW,wBACzC,SAASC,EAAMC,EAAIC,EAAMC,GAEzB,IAAIC,EAAQH,EAAGI,QACdH,EACA,SAASI,MASRC,KAAK,8BACLC,WAAY,QACZC,YAAW,EAyBXC,aAAc,SAAmBC,GAUhC,OAPAA,EAAIA,GAAKC,KAAKC,KACdD,KAAKE,SACHC,EAAEJ,EAAEI,EAAGC,EAAEL,EAAEK,IACXD,EAAEJ,EAAEI,EAAIJ,EAAEM,MAAOD,EAAEL,EAAEK,IACrBD,EAAEJ,EAAEI,EAAIJ,EAAEM,MAAOD,EAAEL,EAAEK,EAAIL,EAAEO,SAC3BH,EAAEJ,EAAEI,EAAGC,EAAEL,EAAEK,EAAIL,EAAEO,SAEZN,KAAKE,QAGbK,aAAc,SAAkBC,GAI/B,IAAIC,GADJD,EAAIA,GAAKR,KAAKE,QACJ,GACNQ,EAAIF,EAAE,GAQV,OAPAR,KAAKC,MACJE,EAAGM,EAAEN,EACLC,EAAGK,EAAEL,EACLC,MAAOK,EAAEP,EAAEM,EAAEN,EACbG,OAAQI,EAAEN,EAAEK,EAAEL,EACdO,IAAKX,KAAKW,KAAOX,KAAKC,KAAKU,KAErBX,KAAKC,MAIbW,cAAe,WAIdZ,KAAKa,OAAOb,KAAKc,KACjBd,KAAKc,IAAMd,KAAKe,UAAUC,WAAWhB,KAAKC,MACxCgB,UAAUjB,KAAKkB,MAAMC,SACrBC,QAAQpB,KAAKkB,MAAMC,QAAQE,MAC7BrB,KAAKsB,aAAatB,KAAKc,MAExBS,QAAS,SAAmBC,EAAoBC,EAAaC,GAM5D1B,KAAKa,OAAOb,KAAKwB,IACjB,IAAIf,EAAIT,KAAKe,UAAUY,YACvB3B,KAAKwB,GAAOf,EAAEmB,YAAYH,GAC1BzB,KAAKe,UAAUc,IAAI7B,KAAKwB,IACxBxB,KAAKsB,aAAatB,KAAKwB,KAGxBM,OAAQ,SAASC,GAQhB,GAAsB,QAAnB/B,KAAKC,KAAKI,OAAmB2B,MAAMhC,KAAKC,KAAKI,OAG/C,OAFAL,KAAKiC,cAAa,QAClBC,QAAQC,KAAK,yCAGdnC,KAAKoC,eAAepC,MACpBA,KAAKqC,WAAarC,KAAKY,gBACvBZ,KAAKuB,QAAQ,QAASvB,KAAKC,KAAMD,KAAKkB,MAAMC,UAE7Cc,aAAc,SAASH,GAMtB,IAAG9B,KAAKsC,aAAR,CACAtC,KAAKsC,cAAe,EACpB,IAAIC,EAAMnD,EAAKoD,OAAO,OAAQ7B,IAAIX,KAAKC,KAAKU,KAAMvB,EAAKqD,QACnDC,EAAMtD,EAAKuD,QAAQJ,EAAK,QAASvC,KAAM,WAC1CZ,EAAKwD,WAAWC,GAChBzD,EAAKwD,WAAWF,GAChBR,QAAQY,MAAM,uBAAwB9C,KAAKC,KAAKU,KAChDuB,QAAQC,KAAK,eAAgBnC,KAAKC,QAG/B4C,EAAIzD,EAAKuD,QAAQJ,EAAK,OAAQvC,KAAM,WACvC,IAAI+C,EAAM3D,EAAK4D,UAAUT,GACzBvC,KAAKiD,SACJ9C,EAAEH,KAAKC,KAAKE,EACZC,EAAEJ,KAAKC,KAAKG,EACZO,IAAIX,KAAKC,KAAKU,IACdN,MAAM0C,EAAIG,EACV5C,OAAOyC,EAAII,IAEZ/D,EAAKwD,WAAWC,GAChBzD,EAAKgE,QAAQb,GACbT,GAAU9B,KAAK8B,QAAO,SAW1B,OALA1C,EAAKiE,UAAU,8BAA+B7D,GAC9CD,EAAS+D,UACRC,KAAK,+BACH,WAEI/D","file":"../../../drawing/stencil/Image.js","sourcesContent":["define([\"dojo\", \"../util/oo\", \"./_Base\", \"../manager/_registry\"], \r\nfunction(dojo, oo, Base, registry){\r\n\r\nvar Image = oo.declare(\r\n\tBase,\r\n\tfunction(options){\r\n\t\t// summary:\r\n\t\t//\t\tconstructor\r\n\t},\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tCreates an dojox.gfx Image based on the data\r\n\t\t//\t\tprovided.\r\n\r\n\t\ttype:\"dojox.drawing.stencil.Image\",\r\n\t\tanchorType: \"group\",\r\n\t\tbaseRender:true,\r\n\t\t\r\n\t\t/*=====\r\n\t\tStencilData: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe data used to create the dojox.gfx Shape\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tLeft point x\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tTop point y\r\n\t\t\t// width: Number?\r\n\t\t\t//\t\tOptional width of Image. If not provided, it is obtained\r\n\t\t\t// height: Number?\r\n\t\t\t//\t\tOptional height of Image. If not provided, it is obtained\r\n\t\t\t// src: String\r\n\t\t\t//\t\tThe location of the source image\r\n\t\t},\r\n\r\n\t\tStencilPoints: [\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn Array of dojox.__StencilPoint objects that describe the Stencil\r\n\t\t\t//\t\t[Top left point, Top right point, Bottom right point, Bottom left point]\r\n\t\t],\r\n\t\t=====*/\r\n\t\t\r\n\t\tdataToPoints: function(/*Object*/o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts data to points.\r\n\t\t\to = o || this.data;\r\n\t\t\tthis.points = [\r\n\t\t\t\t{x:o.x, y:o.y}, \t\t\t\t\t\t// TL\r\n\t\t\t\t{x:o.x + o.width, y:o.y},\t\t\t\t// TR\r\n\t\t\t\t{x:o.x + o.width, y:o.y + o.height},\t// BR\r\n\t\t\t\t{x:o.x, y:o.y + o.height}\t\t\t\t// BL\r\n\t\t\t];\r\n\t\t\treturn this.points;\r\n\t\t},\r\n\t\t\r\n\t\tpointsToData: function(/*Array*/p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts points to data\r\n\t\t\tp = p || this.points;\r\n\t\t\tvar s = p[0];\r\n\t\t\tvar e = p[2];\r\n\t\t\tthis.data = {\r\n\t\t\t\tx: s.x,\r\n\t\t\t\ty: s.y,\r\n\t\t\t\twidth: e.x-s.x,\r\n\t\t\t\theight: e.y-s.y,\r\n\t\t\t\tsrc: this.src || this.data.src\r\n\t\t\t};\r\n\t\t\treturn this.data;\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t_createHilite: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the hit and highlight area\r\n\t\t\t//\t\tfor the Image.\r\n\t\t\tthis.remove(this.hit);\r\n\t\t\tthis.hit = this.container.createRect(this.data)\r\n\t\t\t\t.setStroke(this.style.current)\r\n\t\t\t\t.setFill(this.style.current.fill);\r\n\t\t\tthis._setNodeAtts(this.hit);\r\n\t\t},\r\n\t\t_create: function(/*String*/shp, /*StencilData*/d, /*Object*/sty){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a dojox.gfx.shape based on passed arguments.\r\n\t\t\t//\t\tCan be called many times by implementation to create\r\n\t\t\t//\t\tmultiple shapes in one stencil.\r\n\r\n\t\t\tthis.remove(this[shp]);\r\n\t\t\tvar s = this.container.getParent();\r\n\t\t\tthis[shp] = s.createImage(d)\r\n\t\t\tthis.container.add(this[shp]);\r\n\t\t\tthis._setNodeAtts(this[shp]);\r\n\t\t},\r\n\t\t\r\n\t\trender: function(dbg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders the 'hit' object (the shape used for an expanded\r\n\t\t\t//\t\thit area and for highlighting) and the'shape' (the actual\r\n\t\t\t//\t\tdisplay object). Image is slightly different than other\r\n\t\t\t//\t\timplementations. Instead of calling render twice, it calls\r\n\t\t\t//\t\t_createHilite for the 'hit'\r\n\r\n\t\t\tif(this.data.width == \"auto\" || isNaN(this.data.width)){\r\n\t\t\t\tthis.getImageSize(true);\r\n\t\t\t\tconsole.warn(\"Image size not provided. Acquiring...\")\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.onBeforeRender(this);\r\n\t\t\tthis.renderHit && this._createHilite();\r\n\t\t\tthis._create(\"shape\", this.data, this.style.current);\r\n\t\t},\r\n\t\tgetImageSize: function(render){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal. If no image size is passed in with the data\r\n\t\t\t//\t\tcreate a dom node, insert and image, gets its dimensions\r\n\t\t\t//\t\trecord them - then destroy everything.\r\n\r\n\t\t\tif(this._gettingSize){ return; } // IE gets it twice (will need to mod if src changes)\r\n\t\t\tthis._gettingSize = true;\r\n\t\t\tvar img = dojo.create(\"img\", {src:this.data.src}, dojo.body());\r\n\t\t\tvar err = dojo.connect(img, \"error\", this, function(){\r\n\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\tdojo.disconnect(err);\r\n\t\t\t\tconsole.error(\"Error loading image:\", this.data.src)\r\n\t\t\t\tconsole.warn(\"Error image:\", this.data)\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tvar c = dojo.connect(img, \"load\", this, function(){\r\n\t\t\t\tvar dim = dojo.marginBox(img);\r\n\t\t\t\tthis.setData({\r\n\t\t\t\t\tx:this.data.x,\r\n\t\t\t\t\ty:this.data.y,\r\n\t\t\t\t\tsrc:this.data.src,\r\n\t\t\t\t\twidth:dim.w,\r\n\t\t\t\t\theight:dim.h\r\n\t\t\t\t});\r\n\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\tdojo.destroy(img);\r\n\t\t\t\trender && this.render(true);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n);\r\n\r\ndojo.setObject(\"dojox.drawing.stencil.Image\", Image);\r\nregistry.register({\r\n\tname:\"dojox.drawing.stencil.Image\"\r\n}, \"stencil\");\r\n\r\nreturn Image;\r\n});\r\n"]}