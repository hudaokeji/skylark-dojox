{"version":3,"sources":["drawing/stencil/Text.js"],"names":["define","dojo","oo","Base","registry","typeset","Text","declare","options","type","anchorType","baseRender","align","valign","_lineHeight","typesetter","text","this","_rawText","convertLaTeX","setText","enabled","_text","_textArray","created","render","getText","dataToPoints","o","w","data","width","h","height","points","x","y","pointsToData","p","s","e","remove","shape","hit","annotation","renderHit","_renderOutline","undefined","split","d","style","pad","textSize","container","createGroup","forEach","txt","i","tb","createText","unescape","setFont","currentText","setFill","color","_setNodeAtts","createRect","setStroke","currentHit","fill","moveToBack","makeFit","span","create","innerHTML","id","document","body","sz","cnt","marginBox","box","destroy","size","setObject","register","name"],"mappings":"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","file":"../../../drawing/stencil/Text.js","sourcesContent":["define([\"dojo\", \"../util/oo\", \"./_Base\", \"../manager/_registry\", \"../util/typeset\"],\r\nfunction(dojo, oo, Base, registry, typeset){\r\n\r\nvar Text = oo.declare(\r\n\tBase,\r\n\tfunction(options){\r\n\t\t// summary:\r\n\t\t//\t\tconstructor.\r\n\t},\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tCreates a dojox.gfx Text (SVG or VML) based on data provided.\r\n\t\t// description:\r\n\t\t//\t\tThere are two text classes. TextBlock extends this one and\r\n\t\t//\t\tadds editable functionality, discovers text width etc.\r\n\t\t//\t\tThis class displays text only. There is no line wrapping.\r\n\t\t//\t\tMultiple lines can be achieved by inserting \\n linebreaks\r\n\t\t//\t\tin the text.\r\n\r\n\t\ttype:\"dojox.drawing.stencil.Text\",\r\n\t\tanchorType:\"none\",\r\n\t\tbaseRender:true,\r\n\r\n\t\t// align: String\r\n\t\t//\t\tText horizontal alignment.\r\n\t\t//\t\tOptions: start, middle, end\r\n\t\talign:\"start\",\r\n\r\n\t\t// valign: String\r\n\t\t//\t\tText vertical alignment\r\n\t\t//\t\tOptions: top, middle, bottom (FIXME: bottom not supported)\r\n\t\tvalign:\"top\",\r\n\r\n\t\t// _lineHeight: [readonly] Number\r\n\t\t// \tThe height of each line of text. Based on style information\r\n\t\t//\t\tand font size.\r\n\t\t_lineHeight:1,\r\n\r\n\t\t/*=====\r\n\t\tStencilData: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe data used to create the dojox.gfx Text\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tLeft point x\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tTop point y\r\n\t\t\t// width: ? Number\r\n\t\t\t//\t\tOptional width of Text. Not required but reccommended.\r\n\t\t\t//\t\tfor auto-sizing, use TextBlock\r\n\t\t\t// height: ? Number\r\n\t\t\t//\t\tOptional height of Text. If not provided, _lineHeight is used.\r\n\t\t\t// text: String\r\n\t\t\t//\t\tThe string content. If not provided, may auto-delete depending on defaults.\r\n\t\t},\r\n\r\n\t\tStencilPoints: [\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn Array of dojox.__StencilPoint objects that describe the Stencil\r\n\t\t\t//\t\t[Top left point, Top right point, Bottom right point, Bottom left point]\r\n\t\t],\r\n\t\t=====*/\r\n\r\n\t\ttypesetter: function(text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister raw text, returning typeset form.\r\n\t\t\t//\t\tUses function dojox.drawing.stencil.Text.typeset\r\n\t\t\t//\t\tfor typesetting, if it exists.\r\n\r\n\t\t\t//if(dojox.drawing.util.typeset){\r\n\t\t\t\tthis._rawText = text;\r\n\t\t\t\treturn typeset.convertLaTeX(text);\r\n\t\t\t//}\r\n\t\t\t//return text;\r\n\t\t},\r\n\r\n\t\tsetText: function(text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetter for text.\r\n\r\n\t\t\t// Only apply typesetting to objects that the user can modify.\r\n\t\t\t// Else, it is assumed that typesetting is done elsewhere.\r\n\t\t\tif(this.enabled){\r\n\t\t\t\ttext = this.typesetter(text);\r\n\t\t\t}\r\n\t\t\t// This only has an effect if text is null or this.created is false.\r\n\t\t\tthis._text = text;\r\n\r\n\t\t\tthis._textArray = [];\r\n\t\t\tthis.created && this.render(text);\r\n\t\t},\r\n\r\n\t\tgetText: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGetter for text.\r\n\r\n\t\t\treturn this._rawText || this._text;\r\n\t\t},\r\n\r\n\t\tdataToPoints: function(/*Object*/o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts data to points.\r\n\t\t\to = o || this.data;\r\n\t\t\tvar w = o.width ==\"auto\" ? 1 : o.width;\r\n\t\t\tvar h = o.height || this._lineHeight;\r\n\t\t\tthis.points = [\r\n\t\t\t\t{x:o.x, y:o.y}, \t\t\t\t// TL\r\n\t\t\t\t{x:o.x + w, y:o.y},\t\t\t\t// TR\r\n\t\t\t\t{x:o.x + w, y:o.y + h},\t\t\t// BR\r\n\t\t\t\t{x:o.x, y:o.y + h}\t\t\t\t// BL\r\n\t\t\t];\r\n\t\t\treturn this.points;\r\n\t\t},\r\n\t\tpointsToData: function(/*Array*/p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts points to data\r\n\t\t\tp = p || this.points;\r\n\t\t\tvar s = p[0];\r\n\t\t\tvar e = p[2];\r\n\t\t\tthis.data = {\r\n\t\t\t\tx: s.x,\r\n\t\t\t\ty: s.y,\r\n\t\t\t\twidth: e.x-s.x,\r\n\t\t\t\theight: e.y-s.y\r\n\t\t\t};\r\n\t\t\treturn this.data;\r\n\t\t},\r\n\r\n\t\trender: function(/* String*/text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders the 'hit' object (the shape used for an expanded\r\n\t\t\t//\t\thit area and for highlighting) and the'shape' (the actual\r\n\t\t\t//\t\tdisplay object). Text is slightly different than other\r\n\t\t\t//\t\timplementations. Instead of calling render twice, it calls\r\n\t\t\t//\t\t_createHilite for the 'hit'\r\n\t\t\t// text: String\r\n\t\t\t//\t\tChanges text if sent. Be sure to use the setText and\r\n\t\t\t//\t\tnot to call this directly.\r\n\r\n\t\t\tthis.remove(this.shape, this.hit);\r\n\t\t\t//console.log(\"text render, outline:\", !this.annotation, this.renderHit, (!this.annotation && this.renderHit))\r\n\t\t\t!this.annotation && this.renderHit && this._renderOutline();\r\n\t\t\tif(text!=undefined){\r\n\t\t\t\tthis._text = text;\r\n\t\t\t\tthis._textArray = this._text.split(\"\\n\");\r\n\t\t\t}\r\n\r\n\t\t\tvar d = this.pointsToData();\r\n\t\t\tvar h = this._lineHeight;\r\n\t\t\tvar x = d.x + this.style.text.pad*2;\r\n\t\t\tvar y = d.y + this._lineHeight - (this.textSize*.4);\r\n\t\t\tif(this.valign==\"middle\"){\r\n\t\t\t\ty -= h/2;\r\n\t\t\t}\r\n\t\t\tthis.shape = this.container.createGroup();\r\n\r\n\t\t\t/*console.log(\"    render \", this.type, this.id)\r\n\t\t\tconsole.log(\"    render Y:\", d.y, \"textSize:\", this.textSize, \"LH:\", this._lineHeight)\r\n\t\t\tconsole.log(\"    render text:\", y, \" ... \", this._text, \"enabled:\", this.enabled);\r\n\t\t\tconsole.log(\"    render text:\", this.style.currentText);\r\n\t\t\t*/\r\n\t\t\tdojo.forEach(this._textArray, function(txt, i){\r\n\t\t\t\tvar tb = this.shape.createText({x: x, y: y+(h*i), text: unescape(txt), align: this.align})\r\n\t\t\t\t\t.setFont(this.style.currentText)\r\n\t\t\t\t\t.setFill(this.style.currentText.color);\r\n\r\n\t\t\t\tthis._setNodeAtts(tb);\r\n\r\n\t\t\t}, this);\r\n\r\n\t\t\tthis._setNodeAtts(this.shape);\r\n\r\n\t\t},\r\n\t\t_renderOutline: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the hit and highlight area\r\n\t\t\t//\t\tfor the Text.\r\n\r\n\t\t\tif(this.annotation){ return; }\r\n\t\t\tvar d = this.pointsToData();\r\n\r\n\t\t\tif(this.align==\"middle\"){\r\n\t\t\t\td.x -= d.width/2 - this.style.text.pad * 2;\r\n\t\t\t}else if(this.align==\"start\"){\r\n\t\t\t\td.x += this.style.text.pad;\r\n\t\t\t}else if(this.align==\"end\"){\r\n\t\t\t\td.x -= d.width - this.style.text.pad * 3;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.valign==\"middle\"){\r\n\t\t\t\td.y -= (this._lineHeight )/2 - this.style.text.pad;\r\n\t\t\t}\r\n\r\n\t\t\tthis.hit = this.container.createRect(d)\r\n\t\t\t\t.setStroke(this.style.currentHit)\r\n\t\t\t\t.setFill(this.style.currentHit.fill);\r\n\t\t\t\t//.setFill(\"#ffff00\");\r\n\r\n\t\t\tthis._setNodeAtts(this.hit);\r\n\t\t\tthis.hit.moveToBack();\r\n\t\t},\r\n\t\tmakeFit: function(text, w){\r\n\t\t\tvar span = dojo.create('span', {innerHTML:text, id:\"foo\"}, document.body);\r\n\t\t\tvar sz = 1;\r\n\t\t\tdojo.style(span, \"fontSize\", sz+\"px\");\r\n\t\t\tvar cnt = 30;\r\n\t\t\twhile(dojo.marginBox(span).w<w){\r\n\t\t\t\tsz++;\r\n\t\t\t\tdojo.style(span, \"fontSize\", sz+\"px\");\r\n\t\t\t\tif(cnt--<=0) break;\r\n\t\t\t}\r\n\t\t\tsz--;\r\n\t\t\tvar box = dojo.marginBox(span);\r\n\t\t\tdojo.destroy(span);\r\n\r\n\t\t\treturn {size:sz, box:box};\r\n\t\t}\r\n\t}\r\n);\r\n\r\ndojo.setObject(\"dojox.drawing.stencil.Text\", Text);\r\nregistry.register({\r\n\tname:\"dojox.drawing.stencil.Text\"\r\n}, \"stencil\");\r\nreturn Text;\r\n});\r\n"]}