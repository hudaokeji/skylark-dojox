{"version":3,"sources":["drawing/Drawing.js"],"names":["define","dojo","defaults","registry","keys","Mouse","Canvas","Undo","Anchors","Stencil","StencilUI","utilCommon","declare","ready","mode","width","height","constructor","props","node","def","attr","this","getObject","id","dijit","getUniqueId","register","toLowerCase","box","contentBox","w","h","mouse","util","setEventMode","tools","stencilTypes","stencilTypeMap","srcRefNode","domNode","plugins","eval","widgetId","add","console","log","objs","obj","byId","stencils","getRegistered","nm","registerTool","name","plugs","_createCanvas","info","canvas","callback","hitch","initPlugins","resize","style","startup","getShapeProps","data","surface","stencilType","ui","mixin","container","overlay","createGroup","drawing","drawingType","copy","addPlugin","plugin","push","surfaceReady","forEach","p","i","anchors","options","e","error","setCanvas","c","connect","disconnect","onSurfaceReady","init","undo","uiStencils","dojox","gfx","renderer","Silverlight","Error","addUI","type","points","warn","addStencil","s","currentStencil","moveToFront","removeStencil","stencil","unregister","destroy","removeAll","selectAll","toSelected","func","apply","arguments","exporter","importer","objects","m","changeDefaults","newStyle","value","undefined","n","created","clickMode","unSetTool","setTool","currentType","onRenderStencil","clickable","onDeleteStencil","constr","abbr","getConstructor","set","get"],"mappings":"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","file":"../../drawing/Drawing.js","sourcesContent":["define([\"dojo\", \"./defaults\", \"./manager/_registry\", \"./manager/keys\", \"./manager/Mouse\",\r\n\"./manager/Canvas\",\"./manager/Undo\",\"./manager/Anchors\",\"./manager/Stencil\",\"./manager/StencilUI\",\r\n  \"./util/common\"], \r\nfunction(dojo, defaults, registry, keys, Mouse, Canvas, Undo, Anchors, Stencil, StencilUI, utilCommon){\r\n\treturn dojo.declare(\"dojox.drawing.Drawing\", [], {\r\n\t\t// summary:\r\n\t\t//\t\tDrawing is a project that sits on top of DojoX GFX and uses SVG and\r\n\t\t//\t\tVML vector graphics to draw and display.\r\n\t\t// description:\r\n\t\t//\t\tDrawing is similar to DojoX Sketch, but is designed to be more versatile\r\n\t\t//\t\textendable and customizable.\r\n\t\t//\t\tDrawing currently only initiates from HTML although it's technically not\r\n\t\t//\t\ta Dijit to keep the file size light. But if Dijit is available, Drawing\r\n\t\t//\t\twill register itself with it and can be accessed with registry.byId('myDrawing')\r\n\t\t//\t\t(by requiring dijit/registry)\r\n\t\t//\r\n\t\t//\t\tNOTES:\r\n\t\t//\t\tAlthough not Drawing and Toolbar, all other objects are created with a custom\r\n\t\t//\t\tdeclare. See dojox.drawing.util.oo\r\n\t\t//\r\n\t\t//\t\tThe files are laid out as such:\r\n\t\t//\r\n\t\t//\t\t- Drawing: The master class. More than one instance of a Drawing can be placed\r\n\t\t//\t\t\ton a page at one time (although this has not yet been tested). Plugins\r\n\t\t//\t\t\tcan be added in markup.\r\n\t\t//\t\t- Toolbar: Like Drawing, Toolbar is a psudeo Dijit that does not need Dijit. It is\r\n\t\t//\t\t\toptional. It can be oriented horizontal or vertical by placing one of\r\n\t\t//\t\t\tthose params in the class (at least one is required).  Plugins\r\n\t\t//\t\t\tcan be added in markup. A drawingId is required to point toolbar to\r\n\t\t//\t\t\tthe drawing.\r\n\t\t//\t\t- defaults: Contains the default styles and dimensions for Stencils. An individual\r\n\t\t//\t\t\tStencil can be changed by calling stencil.att({color obj}); To change\r\n\t\t//\t\t\tall styles, a custom defaults file should be used.\r\n\t\t//\t\t- Stencils: Drawing uses a concept of 'Stencils' to avoid confusion between a\r\n\t\t//\t\t\tDojox Shape and a Drawing Shape. The classes in the 'stencils' package\r\n\t\t//\t\t\tare display only, they are not used for actually drawing (see 'tools').\r\n\t\t//\t\t\tThis package contains _Base from which stencils inherit most of their\r\n\t\t//\t\t\tmethods. (Path and Image are display only and not found in Tools)\r\n\t\t//\t\t- Tools: The Tools package contains Stencils that are attached to mouse events\r\n\t\t//\t\t\tand can be used for drawing. Items in this package can also be selected\r\n\t\t//\t\t\tand modified.\r\n\t\t//\t\t- Tools / Custom: Holds tools that do not directly extend Stencil base classes and often\r\n\t\t//\t\t\thave very custom code.\r\n\t\t//\t\t- Library (not implemented): The Library package, which is not yet implemented, will be the place to\r\n\t\t//\t\t\thold stencils that have very specific data points that result in a picture.\r\n\t\t//\t\t\tFlag-like-banners, fancy borders, or other complex shapes would go here.\r\n\t\t//\t\t- Annotations: Annotations 'decorate' and attach to other Stencils, such as a 'Label'\r\n\t\t//\t\t\tthat can show text on a stencil, or an 'Angle' that shows while dragging\r\n\t\t//\t\t\tor modifying a Vector, or an Arrow head that is attached to the beginning\r\n\t\t//\t\t\tor end of a line.\r\n\t\t//\t\t- Manager: Contains classes that control functionality of a Drawing.\r\n\t\t//\t\t- Plugins: Contains optional classes that are 'plugged into' a Drawing. There are two\r\n\t\t//\t\t\ttypes: 'drawing' plugins that modify the canvas, and 'tools' which would\r\n\t\t//\t\t\tshow in the toolbar.\r\n\t\t//\t\t- Util: A collection of common tasks.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\t|\t<div data-dojo-type=\"dojox.drawing.Drawing\" id=\"drawing\" defaults=\"myCustom.defaults\"\r\n\t\t//\t\t|\t\tplugins=\"[{'name':'dojox.drawing.plugins.drawing.Grid', 'options':{gap:100}}]\">\r\n\t\t//\t\t|   </div>\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\t|\t<div dojoType=\"dojox.drawing.Toolbar\" drawingId=\"drawing\" class=\"drawingToolbar vertical\">\r\n\t\t//\t\t|\t\t<div tool=\"dojox.drawing.tools.Line\" selected=\"false\">Line</div>\r\n\t\t//\t\t|\t\t<div tool=\"dojox.drawing.tools.Rect\" selected=\"false\">Rect</div>\r\n\t\t//\t\t|\t\t<div tool=\"dojox.drawing.tools.Ellipse\" selected=\"false\">Ellipse</div>\r\n\t\t//\t\t|\t\t<div tool=\"dojox.drawing.tools.TextBlock\" selected=\"false\">Statement</div>\r\n\t\t//\t\t|\t\t<div tool=\"dojox.drawing.tools.custom.Equation\" selected=\"false\">Equation</div>\r\n\t\t//\t\t|\t\t<div plugin=\"dojox.drawing.plugins.tools.Pan\" options=\"{}\">Pan</div>\r\n\t\t//\t\t|\t\t<div plugin=\"dojox.drawing.plugins.tools.Zoom\" options=\"{zoomInc:.1,minZoom:.5,maxZoom:2}\">Zoom</div>\r\n\t\t//\t\t|\t</div>\r\n\r\n\t\t// ready: Boolean\r\n\t\t//\t\tWhether or not the canvas has been created and Stencils can be added\r\n\t\tready:false,\r\n\r\n\t\t// mode: [optional] String\r\n\t\t//\t\tChanges the functionality of the drawing\r\n\t\tmode: \"\",\r\n\r\n\t\t// width: Number\r\n\t\t//\t\tWidth of the canvas\r\n\t\twidth:0,\r\n\r\n\t\t// height: Number\r\n\t\t//\t\tHeight of the canvas\r\n\t\theight:0,\r\n\r\n\t\t// defaults : Object\r\n\t\t//\t\tOptional replacements for native defaults.\r\n\r\n\t\t// plugins: Object\r\n\t\t//\t\tKey values of plugins that apply to canvas.\r\n\r\n\t\tconstructor: function(/* Object */props, /* HTMLNode */node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDrawing is not a Dijit. This is the master method.\r\n\t\t\t//\r\n\t\t\t//\t\tNOTE:\r\n\t\t\t//\t\tprops is always null since this is not a real widget\r\n\t\t\t//\t\tWill change when Drawing can be created programmatically.\r\n\r\n\t\t\tvar def = dojo.attr(node, \"defaults\");\r\n\t\t\tthis.defaults =  def ? (typeof def === 'string' ? dojo.getObject(def) : def) : defaults;\r\n\r\n\t\t\tthis.id = node.id || dijit.getUniqueId('dojox_drawing_Drawing');\r\n\t\t\tregistry.register(this, \"drawing\");\r\n\t\t\tthis.mode = (props.mode || dojo.attr(node, \"mode\") || \"\").toLowerCase();\r\n\t\t\tvar box = dojo.contentBox(node);\r\n\t\t\tthis.width = props.width || box.w;\r\n\t\t\tthis.height = props.height || box.h;\r\n\t\t\tutilCommon.register(this); // So Toolbar can find this Drawing DEPRECATED\r\n\t\t\tthis.mouse = new Mouse({util:utilCommon, keys:keys, id:this.mode==\"ui\"?\"MUI\":\"mse\"});\r\n\t\t\tthis.mouse.setEventMode(this.mode);\r\n\r\n\t\t\tthis.tools = {};\r\n\t\t\tthis.stencilTypes = {};\r\n\t\t\tthis.stencilTypeMap = {};\r\n\t\t\tthis.srcRefNode = node; // need this?\r\n\t\t\tthis.domNode = node;\r\n\t\t\tif(props.plugins){\r\n\t\t\t\tthis.plugins = eval(props.plugins);\r\n\t\t\t}else{\r\n\t\t\t\tthis.plugins = [];\r\n\t\t\t}\r\n\r\n\t\t\tthis.widgetId = this.id;\r\n\t\t\tdojo.attr(this.domNode, \"widgetId\", this.widgetId);\r\n\t\t\t// If Dijit is available in the page, register with it\r\n\t\t\tif(dijit && dijit.registry){\r\n\t\t\t\tdijit.registry.add(this);\r\n\t\t\t\tconsole.log(\"using dijit\")\r\n\t\t\t}else{\r\n\t\t\t\t// else fake dijit.byId\r\n\t\t\t\t// FIXME: This seems pretty hacky.\r\n\t\t\t\t// Maybe should just encourage jsId\r\n\t\t\t\tdijit.registry = {\r\n\t\t\t\t\tobjs:{},\r\n\t\t\t\t\tadd:function(obj){\r\n\t\t\t\t\t\tthis.objs[obj.id] = obj;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tdijit.byId = function(id){\r\n\t\t\t\t\treturn dijit.registry.objs[id];\r\n\t\t\t\t};\r\n\t\t\t\tdijit.registry.add(this);\r\n\t\t\t}\r\n\r\n\t\t\tvar stencils = registry.getRegistered(\"stencil\");\r\n\t\t\tfor(var nm in stencils){\r\n\t\t\t\tthis.registerTool(stencils[nm].name);\r\n\t\t\t}\r\n\t\t\tvar tools = registry.getRegistered(\"tool\");\r\n\t\t\tfor(nm in tools){\r\n\t\t\t\tthis.registerTool(tools[nm].name);\r\n\t\t\t}\r\n\t\t\tvar plugs = registry.getRegistered(\"plugin\");\r\n\t\t\tfor(nm in plugs){\r\n\t\t\t\tthis.registerTool(plugs[nm].name);\r\n\t\t\t}\r\n\t\t\tthis._createCanvas();\r\n\r\n\t\t},\r\n\r\n\t\t_createCanvas: function(){\r\n\t\t\tconsole.info(\"drawing create canvas...\");\r\n\t\t\tthis.canvas = new Canvas({\r\n\t\t\t\tsrcRefNode:this.domNode,\r\n\t\t\t\tutil:utilCommon,\r\n\t\t\t\tmouse:this.mouse,\r\n\t\t\t\twidth: this.width, height: this.height,\r\n\t\t\t\tcallback: dojo.hitch(this, \"onSurfaceReady\")\r\n\t\t\t});\r\n\t\t\tthis.initPlugins();\r\n\t\t},\r\n\r\n\t\tresize: function(/* Object */box){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResizes the canvas.\r\n\t\t\t//\t\tIf within a ContentPane this will get called automatically.\r\n\t\t\t//\t\tCan also be called directly.\r\n\r\n\t\t\tbox && dojo.style(this.domNode, {\r\n\t\t\t\twidth:box.w+\"px\",\r\n\t\t\t\theight:box.h+\"px\"\r\n\t\t\t});\r\n\t\t\tif(!this.canvas){\r\n\t\t\t\tthis._createCanvas();\r\n\t\t\t}else if(box){\r\n\t\t\t\tthis.canvas.resize(box.w, box.h);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\t//console.info(\"drawing startup\")\r\n\t\t},\r\n\r\n\t\tgetShapeProps: function(/* Object */data, mode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe common objects that are mixed into\r\n\t\t\t//\t\ta new Stencil. Mostly internal, but could be used.\r\n\r\n\t\t\tvar surface = data.stencilType;\r\n\t\t\tvar ui = this.mode==\"ui\" || mode==\"ui\";\r\n\t\t\treturn dojo.mixin({\r\n\t\t\t\tcontainer: ui && !surface ? this.canvas.overlay.createGroup() : this.canvas.surface.createGroup(),\r\n\t\t\t\tutil:utilCommon,\r\n\t\t\t\tkeys:keys,\r\n\t\t\t\tmouse:this.mouse,\r\n\t\t\t\tdrawing:this,\r\n\t\t\t\tdrawingType: ui && !surface ? \"ui\" : \"stencil\",\r\n\t\t\t\tstyle:this.defaults.copy()\r\n\t\t\t}, data || {});\r\n\t\t},\r\n\r\n\t\taddPlugin: function(/* Object */plugin){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a toolbar plugin object to plugins array\r\n\t\t\t//\t\tto be parsed\r\n\t\t\tthis.plugins.push(plugin);\r\n\t\t\tif(this.canvas.surfaceReady){\r\n\t\t\t\tthis.initPlugins();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tinitPlugins: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled from Toolbar after a plugin has been loaded\r\n\t\t\t//\t\tThe call to this coming from toolbar is a bit funky as the timing\r\n\t\t\t//\t\tof IE for canvas load is different than other browsers\r\n\t\t\tif(!this.canvas || !this.canvas.surfaceReady){\r\n\t\t\t\tvar c = dojo.connect(this, \"onSurfaceReady\", this, function(){\r\n\t\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\t\tthis.initPlugins();\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdojo.forEach(this.plugins, function(p, i){\r\n\t\t\t\tvar props = dojo.mixin({\r\n\t\t\t\t\tutil:utilCommon,\r\n\t\t\t\t\tkeys:keys,\r\n\t\t\t\t\tmouse:this.mouse,\r\n\t\t\t\t\tdrawing:this,\r\n\t\t\t\t\tstencils:this.stencils,\r\n\t\t\t\t\tanchors:this.anchors,\r\n\t\t\t\t\tcanvas:this.canvas\r\n\t\t\t\t}, p.options || {});\r\n\t\t\t\t//console.log('drawing.plugin:::', p.name, props)\r\n\t\t\t\tthis.registerTool(p.name, dojo.getObject(p.name));\r\n\t\t\t\ttry{\r\n\t\t\t\t\tthis.plugins[i] = new this.tools[p.name](props);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tconsole.error(\"Failed to initilaize plugin:\t\" +p.name + \". Did you require it?\");\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis.plugins = [];\r\n\t\t\t// In IE, because the timing is different we have to get the\r\n\t\t\t// canvas position after everything has drawn. *sigh*\r\n\t\t\tthis.mouse.setCanvas();\r\n\t\t},\r\n\r\n\t\tonSurfaceReady: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent that to which can be connected.\r\n\t\t\t//\t\tFired when the canvas is ready and can be drawn to.\r\n\r\n\t\t\tthis.ready = true;\r\n\t\t\t//console.info(\"Surface ready\")\r\n\t\t\tthis.mouse.init(this.canvas.domNode);\r\n\t\t\tthis.undo = new Undo({keys:keys});\r\n\t\t\tthis.anchors = new Anchors({drawing:this, mouse:this.mouse, undo:this.undo, util:utilCommon});\r\n\t\t\tif(this.mode == \"ui\"){\r\n\t\t\t\tthis.uiStencils = new StencilUI({canvas:this.canvas, surface:this.canvas.surface, mouse:this.mouse, keys:keys});\r\n\t\t\t}else{\r\n\t\t\t\tthis.stencils = new Stencil({canvas:this.canvas, surface:this.canvas.surface, mouse:this.mouse, undo:this.undo, keys:keys, anchors:this.anchors});\r\n\t\t\t\tthis.uiStencils = new StencilUI({canvas:this.canvas, surface:this.canvas.surface, mouse:this.mouse, keys:keys});\r\n\t\t\t}\r\n\t\t\tif(dojox.gfx.renderer==\"silverlight\"){\r\n\t\t\t\ttry{\r\n\t\t\t\tnew dojox.drawing.plugins.drawing.Silverlight({util:utilCommon, mouse:this.mouse, stencils:this.stencils, anchors:this.anchors, canvas:this.canvas});\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tthrow new Error(\"Attempted to install the Silverlight plugin, but it was not found.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdojo.forEach(this.plugins, function(p){\r\n\t\t\t\tp.onSurfaceReady && p.onSurfaceReady();\r\n\t\t\t});\r\n\r\n\t\t},\r\n\r\n\t\taddUI: function(/* String */type, /* Object */options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUse this method to programmatically add Stencils that display on\r\n\t\t\t//\t\tthe canvas.\r\n\t\t\t//\r\n\t\t\t//\t\tFIXME: Currently only supports Stencils that have been registered,\r\n\t\t\t//\t\twhich is items in the toolbar, and the additional Stencils at the\r\n\t\t\t//\t\tend of onSurfaceReady. This covers all Stencils, but you can't\r\n\t\t\t//\t\tuse 'display only' Stencils for Line, Rect, and Ellipse.\r\n\t\t\t// type: String\r\n\t\t\t//\t\tThe final name of the tool, lower case: 'image', 'line', 'textBlock'\r\n\t\t\t// options:\r\n\t\t\t//\t\t- type: Object\r\n\t\t\t//\r\n\t\t\t//\t\tThe parameters used to draw the object. See stencil._Base and each\r\n\t\t\t//\t\ttool for specific parameters of teh data or points objects.\r\n\r\n\t\t\tif(!this.ready){\r\n\t\t\t\tvar c = dojo.connect(this, \"onSurfaceReady\", this, function(){\r\n\t\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\t\tthis.addUI(type, options);\r\n\t\t\t\t});\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(options && !options.data && !options.points){\r\n\t\t\t\toptions = {data:options}\r\n\t\t\t}\r\n\t\t\tif(!this.stencilTypes[type]){\r\n\t\t\t\tif(type != \"tooltip\"){\r\n\t\t\t\t\tconsole.warn(\"Not registered:\", type);\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar s = this.uiStencils.register( new this.stencilTypes[type](this.getShapeProps(options, \"ui\")));\r\n\t\t\treturn s;\r\n\t\t},\r\n\r\n\r\n\t\taddStencil: function(/* String */type, /* Object */options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUse this method to programmatically add Stencils that display on\r\n\t\t\t//\t\tthe canvas.\r\n\t\t\t//\r\n\t\t\t//\t\tFIXME: Currently only supports Stencils that have been registered,\r\n\t\t\t//\t\twhich is items in the toolbar, and the additional Stencils at the\r\n\t\t\t//\t\tend of onSurfaceReady. This covers all Stencils, but you can't\r\n\t\t\t//\t\tuse 'display only' Stencils for Line, Rect, and Ellipse.\r\n\t\t\t// type: String\r\n\t\t\t//\t\tThe final name of the tool, lower case: 'image', 'line', 'textBlock'\r\n\t\t\t// options: Object\r\n\t\t\t//\t\tThe parameters used to draw the object. See stencil._Base and each\r\n\t\t\t//\t\ttool for specific parameters of teh data or points objects.\r\n\r\n\t\t\tif(!this.ready){\r\n\t\t\t\tvar c = dojo.connect(this, \"onSurfaceReady\", this, function(){\r\n\t\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\t\tthis.addStencil(type, options);\r\n\t\t\t\t});\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(options && !options.data && !options.points){\r\n\t\t\t\toptions = {data:options}\r\n\t\t\t}\r\n\t\t\tvar s = this.stencils.register( new this.stencilTypes[type](this.getShapeProps(options)));\r\n\t\t\t// need this or not?\r\n\t\t\t//s.connect(s, \"destroy\", this, \"onDeleteStencil\");\r\n\t\t\tthis.currentStencil && this.currentStencil.moveToFront();\r\n\t\t\treturn s;\r\n\t\t},\r\n\r\n\t\tremoveStencil: function(/* Object */stencil){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUse this method to programmatically remove Stencils from the canvas.\r\n\t\t\t// stencil: Object\r\n\t\t\t//\t\tThe Stencil to be removed\r\n\r\n\t\t\tthis.stencils.unregister(stencil);\r\n\t\t\tstencil.destroy();\r\n\t\t},\r\n\r\n\t\tremoveAll: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeletes all Stencils on the canvas.\r\n\t\t\tthis.stencils.removeAll();\r\n\t\t},\r\n\r\n\t\tselectAll: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelects all stencils\r\n\t\t\tthis.stencils.selectAll();\r\n\t\t},\r\n\r\n\t\ttoSelected: function(/*String*/func /*any...*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall a function within all selected Stencils\r\n\t\t\t//\t\tlike attr()\r\n\t\t\t// example:\r\n\t\t\t//\t\t|\tmyDrawing.toSelected('attr', {x:10})\r\n\r\n\t\t\tthis.stencils.toSelected.apply(this.stencils, arguments);\r\n\t\t},\r\n\r\n\t\texporter: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCollects all Stencil data and returns an\r\n\t\t\t//\t\tArray of objects.\r\n\t\t\tconsole.log(\"this.stencils\", this.stencils);\r\n\t\t\treturn this.stencils.exporter();  //Array\r\n\t\t},\r\n\r\n\t\timporter: function(/* Array */objects){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandles an Array of stencil data and imports the objects\r\n\t\t\t//\t\tto the drawing.\r\n\t\t\tdojo.forEach(objects, function(m){\r\n\t\t\t\tthis.addStencil(m.type, m);\r\n\t\t\t}, this);\r\n\t\t},\r\n\r\n\t\tchangeDefaults: function(/*Object*/newStyle,/*Boolean*/value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange the defaults so that all Stencils from this\r\n\t\t\t//\t\tpoint on will use the newly changed style.\r\n\t\t\t// newStyle: Object\r\n\t\t\t//\t\tAn object that represents one of the objects in\r\n\t\t\t//\t\tdrawing.style that will be mixed in. Not all\r\n\t\t\t//\t\tproperties are necessary. Only one object may\r\n\t\t\t//\t\tbe changed at a time. The object boolean parameter\r\n\t\t\t//\t\tis not required and if not set objects will automatically\r\n\t\t\t//\t\tbe changed.\r\n\t\t\t//\t\tChanging non-objects like angleSnap requires value\r\n\t\t\t//\t\tto be true.\r\n\t\t\t// example:\r\n\t\t\t//\t\t|\tmyDrawing.changeDefaults({\r\n\t\t\t//\t\t|\t\tnorm:{\r\n\t\t\t//\t\t|\t\t\tfill:\"#0000ff\",\r\n\t\t\t//\t\t|\t\t\twidth:5,\r\n\t\t\t//\t\t|\t\t\tcolor:\"#ffff00\"\r\n\t\t\t//\t\t|\t\t}\r\n\t\t\t//\t\t|\t});\r\n\r\n\t\t\t//console.log(\"----->>> changeDefault: \",newStyle, \" value?: \",value);\r\n\t\t\tif(value!=undefined && value){\r\n\t\t\t\tfor(var nm in newStyle){\r\n\t\t\t\t\tthis.defaults[nm] = newStyle[nm];\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(var nm in newStyle){\r\n\t\t\t\t\tfor(var n in newStyle[nm]){\r\n\t\t\t\t\t\t//console.log(\"  copy\", nm, n, \" to: \", newStyle[nm][n]);\r\n\t\t\t\t\t\tthis.defaults[nm][n] = newStyle[nm][n];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.currentStencil!=undefined && (!this.currentStencil.created || this.defaults.clickMode)){\r\n\t\t\t\tthis.unSetTool();\r\n\t\t\t\tthis.setTool(this.currentType);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonRenderStencil: function(/* Object */stencil){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent that fires when a stencil is drawn. Does not fire from\r\n\t\t\t//\t\t'addStencil'.\r\n\r\n\t\t\t//console.info(\"--------------------------------------dojox.drawing.onRenderStencil:\", stencil.id);\r\n\r\n\t\t\tthis.stencils.register(stencil);\r\n\t\t\tthis.unSetTool();\r\n\t\t\tif(!this.defaults.clickMode){\r\n\t\t\t\tthis.setTool(this.currentType);\r\n\t\t\t}else{\r\n\t\t\t\tthis.defaults.clickable = true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonDeleteStencil: function(/* Object */stencil){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent fired from a stencil that has destroyed itself\r\n\t\t\t//\t \twill also be called when it is removed by \"removeStencil\"\r\n\t\t\t//\t \tor stencils.onDelete.\r\n\r\n\t\t\tthis.stencils.unregister(stencil);\r\n\t\t},\r\n\r\n\t\tregisterTool: function(/* String */type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\t Registers a tool that can be accessed. Internal.\r\n\t\t\tif(this.tools[type]){ return; }\r\n\t\t\tvar constr = dojo.getObject(type);\r\n\t\t\t//console.log(\"constr:\", type)\r\n\t\t\tthis.tools[type] = constr;\r\n\t\t\tvar abbr = utilCommon.abbr(type);\r\n\t\t\tthis.stencilTypes[abbr] = constr;\r\n\t\t\tthis.stencilTypeMap[abbr] = type;\r\n\t\t},\r\n\r\n\t\tgetConstructor: function(/*String*/abbr){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a Stencil constructor base on\r\n\t\t\t//\t\tabbreviation\r\n\t\t\treturn this.stencilTypes[abbr];\r\n\t\t},\r\n\r\n\t\tsetTool: function(/* String */type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets up a new class to be used to draw. Called from Toolbar,\r\n\t\t\t//\t\tand this class... after a tool is used a new one of the same\r\n\t\t\t//\t\ttype is initialized. Could be called externally.\r\n\r\n\t\t\tif(this.mode==\"ui\"){ return; }\r\n\t\t\tif(!this.canvas || !this.canvas.surface){\r\n\t\t\t\tvar c = dojo.connect(this, \"onSurfaceReady\", this, function(){\r\n\t\t\t\t\tdojo.disconnect(c);\r\n\t\t\t\t\tthis.setTool(type);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(this.currentStencil){\r\n\t\t\t\tthis.unSetTool();\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentType = this.tools[type] ? type : this.stencilTypeMap[type];\r\n\t\t\t//console.log(\"new tool arg:\", type, \"curr:\", this.currentType, \"mode:\", this.mode, \"tools:\", this.tools)\r\n\r\n\t\t\ttry{\r\n\t\t\t\tthis.currentStencil = new this.tools[this.currentType]({container:this.canvas.surface.createGroup(), util:utilCommon, mouse:this.mouse, keys:keys});\r\n\t\t\t\tconsole.log(\"new tool is:\", this.currentStencil.id, this.currentStencil);\r\n\t\t\t\tif(this.defaults.clickMode){ this.defaults.clickable = false; }\r\n\t\t\t\tthis.currentStencil.connect(this.currentStencil, \"onRender\", this, \"onRenderStencil\");\r\n\t\t\t\tthis.currentStencil.connect(this.currentStencil, \"destroy\", this, \"onDeleteStencil\");\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.error(\"dojox.drawing.setTool Error:\", e);\r\n\t\t\t\tconsole.error(this.currentType + \" is not a constructor: \", this.tools[this.currentType]);\r\n\t\t\t\t//console.trace();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tset: function(name, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDrawing registers as a widget and needs to support\r\n\t\t\t//\t\twidget's api.\r\n\t\t\tconsole.info(\"Attempting to set \",name,\" to: \",value,\". Set currently not fully supported in Drawing\");\r\n\t\t},\r\n\r\n\t\tget: function(name){\r\n\t\t\treturn;\r\n\t\t},\r\n\r\n\t\tunSetTool: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroys current tool\r\n\t\t\tif(!this.currentStencil.created){\r\n\t\t\t\tthis.currentStencil.destroy();\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n\r\n});\r\n"]}