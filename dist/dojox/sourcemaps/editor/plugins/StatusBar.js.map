{"version":3,"sources":["editor/plugins/StatusBar.js"],"names":["define","dojo","dijit","dojox","_Widget","_TemplatedMixin","_Plugin","experimental","_StatusBar","declare","templateString","_getValueAttr","this","barContent","innerHTML","_setValueAttr","str","trim","StatusBar","statusBar","resizer","setEditor","editor","resizeHandle","layout","ResizeHandle","targetId","activeResize","handle","startup","style","parentNode","pos","footer","lastChild","place","domNode","_msgListener","subscribe","id","hitch","get","set","attr","val","fName","charAt","toUpperCase","substring","length","isFunction","f","destroy","unsubscribe","_scopeName","o","plugin","args","name","toLowerCase"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,gBACA,wBACA,wBACA,qBACA,qBACA,6BACE,SAASC,EAAMC,EAAOC,EAAOC,EAASC,EAAiBC,GAE1DL,EAAKM,aAAa,kCAElB,IAAIC,EAAaP,EAAKQ,QAAQ,mCAAoCL,EAASC,IAI1EK,eAAgB,wRAOhBC,cAAe,WAKd,OAAOC,KAAKC,WAAWC,WAGxBC,cAAe,SAASC,GAQpBA,IACFA,EAAMf,EAAKgB,KAAKD,MAKhBA,EAAM,UAEPJ,KAAKC,WAAWC,UAAYE,KAI1BE,EAAYjB,EAAKQ,QAAQ,iCAAkCH,GAS9Da,UAAW,KAMXC,SAAS,EAETC,UAAW,SAASC,GAKnBV,KAAKU,OAASA,EACdV,KAAKO,UAAY,IAAIX,EAClBI,KAAKQ,SACPR,KAAKW,aAAe,IAAIpB,EAAMqB,OAAOC,cAAcC,SAAUd,KAAKU,OAAQK,cAAc,GAAOf,KAAKO,UAAUS,QAC9GhB,KAAKW,aAAaM,WAElB5B,EAAK6B,MAAMlB,KAAKO,UAAUS,OAAOG,WAAY,UAAW,QAEzD,IAAIC,EAAM,KACPV,EAAOW,OAAOC,YAChBF,EAAM,SAEP/B,EAAKkC,MAAMvB,KAAKO,UAAUiB,QAASd,EAAOW,OAAOC,WAAaZ,EAAOW,OAAQD,GAC7EpB,KAAKO,UAAUU,UACfjB,KAAKU,OAAOH,UAAYP,KAIxBA,KAAKyB,aAAepC,EAAKqC,UAAU1B,KAAKU,OAAOiB,GAAK,aAActC,EAAKuC,MAAM5B,KAAMA,KAAKG,iBAGzFJ,cAAe,WAKd,OAAOC,KAAKO,UAAUsB,IAAI,UAG3B1B,cAAe,SAASC,GAQvBJ,KAAKO,UAAUuB,IAAI,QAAS1B,IAG7B0B,IAAK,SAASC,EAAMC,GAOnB,GAAGD,EAAK,CACP,IAAIE,EAAQ,OAASF,EAAKG,OAAO,GAAGC,cAAgBJ,EAAKK,UAAU,EAAGL,EAAKM,QAAU,OAClFhD,EAAKiD,WAAWtC,KAAKiC,IACvBjC,KAAKiC,GAAOD,GAEZhC,KAAK+B,GAAQC,IAKhBH,IAAK,SAASE,GAKb,GAAGA,EAAK,CACP,IAAIE,EAAQ,OAASF,EAAKG,OAAO,GAAGC,cAAgBJ,EAAKK,UAAU,EAAGL,EAAKM,QAAU,OACjFE,EAAIvC,KAAKiC,GACb,OAAG5C,EAAKiD,WAAWC,GACXvC,KAAKiC,KAELjC,KAAK+B,GAGd,OAAO,MAGRS,QAAS,WAGLxC,KAAKO,YACPP,KAAKO,UAAUiC,iBACRxC,KAAKO,WAEVP,KAAKW,eACPX,KAAKW,aAAa6B,iBACXxC,KAAKW,cAEVX,KAAKyB,eACPpC,EAAKoD,YAAYzC,KAAKyB,qBACfzB,KAAKyB,qBAENzB,KAAKU,OAAOH,aAiBrB,OAZAD,EAAUV,WAAaA,EAGvBP,EAAKqC,UAAUpC,EAAMoD,WAAa,oBAAoB,KAAK,SAASC,GACnE,IAAGA,EAAEC,QAEO,cADDD,EAAEE,KAAKC,KAAKC,cACC,CACvB,IAAIvC,IAAW,YAAamC,EAAEE,OAAMF,EAAEE,KAAKrC,QAC3CmC,EAAEC,OAAS,IAAItC,GAAWE,QAASA,OAI9BF","file":"../../../editor/plugins/StatusBar.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojox/layout/ResizeHandle\"\r\n], function(dojo, dijit, dojox, _Widget, _TemplatedMixin, _Plugin) {\r\n\r\ndojo.experimental(\"dojox.editor.plugins.StatusBar\");\r\n\r\nvar _StatusBar = dojo.declare(\"dojox.editor.plugins._StatusBar\", [_Widget, _TemplatedMixin],{\r\n\t// templateString: String\r\n\t//\t\tTemplate for the widget.  Currently using table to get the alignment behavior and\r\n\t//\t\tbordering I wanted.  Would prefer not to use table, though.\r\n\ttemplateString: '<div class=\"dojoxEditorStatusBar\">' +\r\n\t\t'<table><tbody><tr>'+\r\n\t\t'<td class=\"dojoxEditorStatusBarText\" tabindex=\"-1\" aria-role=\"presentation\" aria-live=\"aggressive\"><span dojoAttachPoint=\"barContent\">&nbsp;</span></td>' +\r\n\t\t'<td><span dojoAttachPoint=\"handle\"></span></td>' +\r\n\t\t'</tr></tbody><table>'+\r\n\t'</div>',\r\n\r\n\t_getValueAttr: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride to get the value of the status bar from the widget.\r\n\t\t// tags:\r\n\t\t//\t\tProtected\r\n\t\treturn this.barContent.innerHTML;\r\n\t},\r\n\r\n\t_setValueAttr: function(str){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride to set the value of the status bar from the widget.\r\n\t\t//\t\tIf no value is set, it is replaced with a non-blocking space.\r\n\t\t// str: String\r\n\t\t//\t\tThe string to set as the status bar content.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\tif(str){\r\n\t\t\tstr = dojo.trim(str);\r\n\t\t\tif(!str){\r\n\t\t\t\tstr = \"&nbsp;\";\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tstr = \"&nbsp;\";\r\n\t\t}\r\n\t\tthis.barContent.innerHTML = str;\r\n\t}\r\n});\r\n\r\nvar StatusBar = dojo.declare(\"dojox.editor.plugins.StatusBar\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides StatusBar capability to the editor.\r\n\t//\t\tBasically a footer bar where status can be published.  It also\r\n\t//\t\tputs a resize handle on the status bar, allowing you to resize the\r\n\t//\t\teditor via mouse.\r\n\r\n\t// statusBar: [protected]\r\n\t//\t\tThe status bar and resizer.\r\n\tstatusBar: null,\r\n\r\n\t// resizer: [public] Boolean\r\n\t//\t\tFlag indicating that a resizer should be shown or not.  Default is true.\r\n\t//\t\tThere are cases (such as using center pane border container to autoresize the editor\r\n\t//\t\tThat a resizer is not valued.\r\n\tresizer: true,\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis.statusBar = new _StatusBar();\r\n\t\tif(this.resizer){\r\n\t\t\tthis.resizeHandle = new dojox.layout.ResizeHandle({targetId: this.editor, activeResize: true}, this.statusBar.handle);\r\n\t\t\tthis.resizeHandle.startup();\r\n\t\t}else{\r\n\t\t\tdojo.style(this.statusBar.handle.parentNode, \"display\", \"none\");\r\n\t\t}\r\n\t\tvar pos = null;\r\n\t\tif(editor.footer.lastChild){\r\n\t\t\tpos = \"after\";\r\n\t\t}\r\n\t\tdojo.place(this.statusBar.domNode, editor.footer.lastChild || editor.footer, pos);\r\n\t\tthis.statusBar.startup();\r\n\t\tthis.editor.statusBar = this;\r\n\r\n\t\t// Register a pub-sub event to listen for status bar messages, in addition to being available off\r\n\t\t// the editor as a property 'statusBar'\r\n\t\tthis._msgListener = dojo.subscribe(this.editor.id + \"_statusBar\", dojo.hitch(this, this._setValueAttr));\r\n\t},\r\n\r\n\t_getValueAttr: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride to get the value of the status bar from the widget.\r\n\t\t// tags:\r\n\t\t//\tprotected\r\n\t\treturn this.statusBar.get(\"value\");\r\n\t},\r\n\r\n\t_setValueAttr: function(str){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride to set the value of the status bar from the widget.\r\n\t\t//\t\tIf no value is set, it is replaced with a non-blocking space.\r\n\t\t// str: String\r\n\t\t//\tThe String value to set in the bar.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\tthis.statusBar.set(\"value\", str);\r\n\t},\r\n\r\n\tset: function(attr, val){\r\n\t\t// summary:\r\n\t\t//\t\tQuick and dirty implementation of 'set' pattern\r\n\t\t// attr:\r\n\t\t//\t\tThe attribute to set.\r\n\t\t// val:\r\n\t\t//\t\tThe value to set it to.\r\n\t\tif(attr){\r\n\t\t\tvar fName = \"_set\" + attr.charAt(0).toUpperCase() + attr.substring(1, attr.length) + \"Attr\";\r\n\t\t\tif(dojo.isFunction(this[fName])){\r\n\t\t\t\tthis[fName](val);\r\n\t\t\t}else{\r\n\t\t\t\tthis[attr] = val;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tget: function(attr){\r\n\t\t// summary:\r\n\t\t//\t\tQuick and dirty implementation of 'get' pattern\r\n\t\t// attr:\r\n\t\t//\t\tThe attribute to get.\r\n\t\tif(attr){\r\n\t\t\tvar fName = \"_get\" + attr.charAt(0).toUpperCase() + attr.substring(1, attr.length) + \"Attr\";\r\n\t\t\tvar f = this[fName];\r\n\t\t\tif(dojo.isFunction(f)){\r\n\t\t\t\treturn this[fName]();\r\n\t\t\t}else{\r\n\t\t\t\treturn this[attr];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride to clean up the breadcrumb toolbar.\r\n\t\tif(this.statusBar){\r\n\t\t\tthis.statusBar.destroy();\r\n\t\t\tdelete this.statusBar;\r\n\t\t}\r\n\t\tif(this.resizeHandle){\r\n\t\t\tthis.resizeHandle.destroy();\r\n\t\t\tdelete this.resizeHandle;\r\n\t\t}\r\n\t\tif(this._msgListener){\r\n\t\t\tdojo.unsubscribe(this._msgListener);\r\n\t\t\tdelete this._msgListener;\r\n\t\t}\r\n\t\tdelete this.editor.statusBar;\r\n\t}\r\n});\r\n\r\n// For monkey patching\r\nStatusBar._StatusBar = _StatusBar;\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name === \"statusbar\"){\r\n\t\tvar resizer = (\"resizer\" in o.args)?o.args.resizer:true;\r\n\t\to.plugin = new StatusBar({resizer: resizer});\r\n\t}\r\n});\r\n\r\nreturn StatusBar;\r\n\r\n});\r\n"]}