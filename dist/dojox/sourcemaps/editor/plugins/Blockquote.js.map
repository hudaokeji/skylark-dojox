{"version":3,"sources":["editor/plugins/Blockquote.js"],"names":["define","dojo","dijit","dojox","_Plugin","Blockquote","declare","iconClassPrefix","_initButton","this","_nlsResources","i18n","getLocalization","button","form","ToggleButton","label","showLabel","iconClass","tabIndex","onClick","hitch","setEditor","editor","connect","customUndo","_toggleQuote","arg","ed","focus","range","elem","start","end","quoteIt","get","sel","getSelection","window","rangeCount","getRangeAt","beginEditing","bq","tag","startContainer","endContainer","_isRootInline","parentNode","editNode","previousSibling","_isTextElement","nodeType","_isInlineFormat","_getTagName","nextSibling","document","createElement","place","appendChild","node","body","ownerDocument","documentElement","_sCall","curNode","next","_isEmpty","removeChild","found","tagName","toLowerCase","lastChild","firstChild","selectedNodes","cNode","push","bnNodes","_findBlockQuotes","length","bn","pop","endEditing","onNormalizedDisplayChanged","e","updateState","disabled","isLoaded","set","nodeList","i","bnList","childNodes","concat","empty","n","trim","innerHTML","nv","nodeValue","subscribe","_scopeName","o","plugin","args","name"],"mappings":"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","file":"../../../editor/plugins/Blockquote.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/ToggleButton\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/Blockquote\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\nvar Blockquote = dojo.declare(\"dojox.editor.plugins.Blockquote\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides Blockquote capability to the editor.\r\n\t//\t\twindow/tab\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node icon.\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the preview button.\r\n\t\tthis._nlsResources = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"Blockquote\");\r\n\t\tthis.button = new dijit.form.ToggleButton({\r\n\t\t\tlabel: this._nlsResources[\"blockquote\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"Blockquote\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tonClick: dojo.hitch(this, \"_toggleQuote\")\r\n\t\t});\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t\tthis.connect(this.editor, \"onNormalizedDisplayChanged\", \"updateState\");\r\n\t\t// We need the custom undo code since we manipulate the dom\r\n\t\t// outside of the browser natives and only customUndo really handles\r\n\t\t// that.  It will incur a performance hit, but should hopefully be\r\n\t\t// relatively small.\r\n\t\teditor.customUndo = true;\r\n\t},\r\n\t\r\n\t_toggleQuote: function(arg){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to trigger previewing of the editor document\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\ttry{\r\n\t\t\tvar ed = this.editor;\r\n\t\t\ted.focus();\r\n\r\n\t\t\tvar quoteIt = this.button.get(\"checked\");\r\n\t\t\tvar sel = dijit.range.getSelection(ed.window);\r\n\t\t\tvar range, elem, start, end;\r\n\t\t\tif(sel && sel.rangeCount > 0){\r\n\t\t\t\trange = sel.getRangeAt(0);\r\n\t\t\t}\r\n\t\t\tif(range){\r\n\t\t\t\ted.beginEditing();\r\n\t\t\t\tif(quoteIt){\r\n\t\t\t\t\t// Lets see what we've got as a selection...\r\n\t\t\t\t\tvar bq, tag;\r\n\t\t\t\t\tif(range.startContainer === range.endContainer){\r\n\t\t\t\t\t\t// No selection, just cursor point, we need to see if we're\r\n\t\t\t\t\t\t// in an indentable block, or similar.\r\n\t\t\t\t\t\tif(this._isRootInline(range.startContainer)){\r\n\t\t\t\t\t\t\t// Text at the 'root' of the document, so we need to gather all of it.,\r\n\t\t\r\n\t\t\t\t\t\t\t// First, we need to find the toplevel inline element that is rooted\r\n\t\t\t\t\t\t\t// to the document 'editNode'\r\n\t\t\t\t\t\t\tstart = range.startContainer;\r\n\t\t\t\t\t\t\twhile(start && start.parentNode !== ed.editNode){\r\n\t\t\t\t\t\t\t\tstart = start.parentNode;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Now we need to walk up its siblings and look for the first one in the rooting\r\n\t\t\t\t\t\t\t// that isn't inline or text, as we want to grab all of that for indent.\r\n\t\t\t\t\t\t\twhile(start && start.previousSibling && (\r\n\t\t\t\t\t\t\t\t\tthis._isTextElement(start) ||\r\n\t\t\t\t\t\t\t\t\t(start.nodeType === 1 &&\r\n\t\t\t\t\t\t\t\t\t this._isInlineFormat(this._getTagName(start))\r\n\t\t\t\t\t\t\t\t))){\r\n\t\t\t\t\t\t\t\tstart = start.previousSibling;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(start && start.nodeType === 1 &&\r\n\t\t\t\t\t\t\t   !this._isInlineFormat(this._getTagName(start))){\r\n\t\t\t\t\t\t\t\t// Adjust slightly, we're one node too far back in this case.\r\n\t\t\t\t\t\t\t\tstart = start.nextSibling;\r\n\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t// Okay, we have a configured start, lets grab everything following it that's\r\n\t\t\t\t\t\t\t// inline and make it part of the blockquote!\r\n\t\t\t\t\t\t\tif(start){\r\n\t\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\t\tdojo.place(bq, start, \"after\");\r\n\t\t\t\t\t\t\t\tbq.appendChild(start);\r\n\t\t\t\t\t\t\t\tend = bq.nextSibling;\r\n\t\t\t\t\t\t\t\twhile(end && (\r\n\t\t\t\t\t\t\t\t\tthis._isTextElement(end) ||\r\n\t\t\t\t\t\t\t\t\t(end.nodeType === 1 &&\r\n\t\t\t\t\t\t\t\t\t\tthis._isInlineFormat(this._getTagName(end)))\r\n\t\t\t\t\t\t\t\t\t)){\r\n\t\t\t\t\t\t\t\t\t// Add it.\r\n\t\t\t\t\t\t\t\t\tbq.appendChild(end);\r\n\t\t\t\t\t\t\t\t\tend = bq.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// Figure out what to do when not root inline....\r\n\t\t\t\t\t\t\tvar node = range.startContainer;\r\n\t\t\t\t\t\t\twhile ((this._isTextElement(node) ||\r\n\t\t\t\t\t\t\t\t\tthis._isInlineFormat(this._getTagName(node))\r\n\t\t\t\t\t\t\t\t\t|| this._getTagName(node) === \"li\") &&\r\n\t\t\t\t\t\t\t\tnode !== ed.editNode && node !== ed.document.body){\r\n\t\t\t\t\t\t\t\tnode = node.parentNode;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(node !== ed.editNode && node !==\tnode.ownerDocument.documentElement){\r\n\t\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\t\tdojo.place(bq, node, \"after\");\r\n\t\t\t\t\t\t\t\tbq.appendChild(node);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(bq){\r\n\t\t\t\t\t\t\ted._sCall(\"selectElementChildren\", [bq]);\r\n\t\t\t\t\t\t\ted._sCall(\"collapse\", [true]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tvar curNode;\r\n\t\t\t\t\t\t// multi-node select.  We need to scan over them.\r\n\t\t\t\t\t\t// Find the two containing nodes at start and end.\r\n\t\t\t\t\t\t// then move the end one node past.  Then ... lets see\r\n\t\t\t\t\t\t// what we can blockquote!\r\n\t\t\t\t\t\tstart = range.startContainer;\r\n\t\t\t\t\t\tend = range.endContainer;\r\n\t\t\t\t\t\t// Find the non-text nodes.\r\n\r\n\t\t\t\t\t\twhile(start && this._isTextElement(start) && start.parentNode !== ed.editNode){\r\n\t\t\t\t\t\t\tstart = start.parentNode;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Try to find the end node.  We have to check the selection junk\r\n\t\t\t\t\t\tcurNode = start;\r\n\t\t\t\t\t\twhile(curNode.nextSibling && ed._sCall(\"inSelection\", [curNode])){\r\n\t\t\t\t\t\t\tcurNode = curNode.nextSibling;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tend = curNode;\r\n\t\t\t\t\t\tif(end === ed.editNode || end === ed.document.body){\r\n\t\t\t\t\t\t\t// Unable to determine real selection end, so just make it\r\n\t\t\t\t\t\t\t// a single node indent of start + all following inline styles, if\r\n\t\t\t\t\t\t\t// present, then just exit.\r\n\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\tdojo.place(bq, start, \"after\");\r\n\t\t\t\t\t\t\ttag = this._getTagName(start);\r\n\t\t\t\t\t\t\tif(this._isTextElement(start) || this._isInlineFormat(tag)){\r\n\t\t\t\t\t\t\t\t// inline element or textnode\r\n\t\t\t\t\t\t\t\t// Find and move all inline tags following the one we inserted also into the\r\n\t\t\t\t\t\t\t\t// blockquote so we don't split up content funny.\r\n\t\t\t\t\t\t\t\tvar next = start;\r\n\t\t\t\t\t\t\t\twhile(next && (\r\n\t\t\t\t\t\t\t\t\tthis._isTextElement(next) ||\r\n\t\t\t\t\t\t\t\t\t(next.nodeType === 1 &&\r\n\t\t\t\t\t\t\t\t\tthis._isInlineFormat(this._getTagName(next))))){\r\n\t\t\t\t\t\t\t\t\tbq.appendChild(next);\r\n\t\t\t\t\t\t\t\t\tnext = bq.nextSibling;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tbq.appendChild(start);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Has a definite end somewhere, so lets try to blockquote up to it.\r\n\t\t\t\t\t\t// requires looking at the selections and in some cases, moving nodes\r\n\t\t\t\t\t\t// into separate blockquotes.\r\n\t\t\t\t\t\tend = end.nextSibling;\r\n\t\t\t\t\t\tcurNode = start;\r\n\t\t\t\t\t\twhile(curNode && curNode !== end){\r\n\t\t\t\t\t\t\tif(curNode.nodeType === 1){\r\n\t\t\t\t\t\t\t\ttag = this._getTagName(curNode);\r\n\t\t\t\t\t\t\t\tif(tag !== \"br\"){\r\n\t\t\t\t\t\t\t\t\tif(!window.getSelection){\r\n\t\t\t\t\t\t\t\t\t\t// IE sometimes inserts blank P tags, which we want to skip\r\n\t\t\t\t\t\t\t\t\t\t// as they end up blockquoted, which messes up layout.\r\n\t\t\t\t\t\t\t\t\t\tif(tag === \"p\" && this._isEmpty(curNode)){\r\n\t\t\t\t\t\t\t\t\t\t\tcurNode = curNode.nextSibling;\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(this._isInlineFormat(tag)){\r\n\t\t\t\t\t\t\t\t\t\t// inline tag.\r\n\t\t\t\t\t\t\t\t\t\tif(!bq){\r\n\t\t\t\t\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\t\t\t\t\tdojo.place(bq, curNode, \"after\");\r\n\t\t\t\t\t\t\t\t\t\t\tbq.appendChild(curNode);\r\n\t\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\t\tbq.appendChild(curNode);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tcurNode = bq;\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\tif(bq){\r\n\t\t\t\t\t\t\t\t\t\t\tif(this._isEmpty(bq)){\r\n\t\t\t\t\t\t\t\t\t\t\t\tbq.parentNode.removeChild(bq);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\t\t\t\tdojo.place(bq, curNode, \"after\");\r\n\t\t\t\t\t\t\t\t\t\tbq.appendChild(curNode);\r\n\t\t\t\t\t\t\t\t\t\tcurNode = bq;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else if(this._isTextElement(curNode)){\r\n\t\t\t\t\t\t\t\tif(!bq){\r\n\t\t\t\t\t\t\t\t\tbq = ed.document.createElement(\"blockquote\");\r\n\t\t\t\t\t\t\t\t\tdojo.place(bq, curNode, \"after\");\r\n\t\t\t\t\t\t\t\t\tbq.appendChild(curNode);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tbq.appendChild(curNode);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcurNode = bq;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcurNode = curNode.nextSibling;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Okay, check the last bq, remove it if no content.\r\n\t\t\t\t\t\tif(bq){\r\n\t\t\t\t\t\t\tif(this._isEmpty(bq)){\r\n\t\t\t\t\t\t\t\tbq.parentNode.removeChild(bq);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\ted._sCall(\"selectElementChildren\", [bq]);\r\n\t\t\t\t\t\t\t\ted._sCall(\"collapse\", [true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbq = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar found = false;\r\n\t\t\t\t\tif(range.startContainer === range.endContainer){\r\n\t\t\t\t\t\telem = range.endContainer;\r\n\t\t\t\t\t\t// Okay, now see if we can find one of the formatting types we're in.\r\n\t\t\t\t\t\twhile(elem && elem !== ed.editNode && elem !== ed.document.body){\r\n\t\t\t\t\t\t\tvar tg = elem.tagName?elem.tagName.toLowerCase():\"\";\r\n\t\t\t\t\t\t\tif(tg === \"blockquote\"){\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telem = elem.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(found){\r\n\t\t\t\t\t\t\tvar lastChild;\r\n\t\t\t\t\t\t\twhile(elem.firstChild){\r\n\t\t\t\t\t\t\t\tlastChild = elem.firstChild;\r\n\t\t\t\t\t\t\t\tdojo.place(lastChild, elem, \"before\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telem.parentNode.removeChild(elem);\r\n\t\t\t\t\t\t\tif(lastChild){\r\n\t\t\t\t\t\t\t\ted._sCall(\"selectElementChildren\", [lastChild]);\r\n\t\t\t\t\t\t\t\ted._sCall(\"collapse\", [true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// Multi-select!  Gotta find all the blockquotes contained within the selection area.\r\n\t\t\t\t\t\tstart = range.startContainer;\r\n\t\t\t\t\t\tend = range.endContainer;\r\n\t\t\t\t\t\twhile(start && this._isTextElement(start) && start.parentNode !== ed.editNode){\r\n\t\t\t\t\t\t\tstart = start.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar selectedNodes = [];\r\n\t\t\t\t\t\tvar cNode = start;\r\n\t\t\t\t\t\twhile(cNode && cNode.nextSibling && ed._sCall(\"inSelection\", [cNode])){\r\n\t\t\t\t\t\t\tif(cNode.parentNode && this._getTagName(cNode.parentNode) === \"blockquote\"){\r\n\t\t\t\t\t\t\t\tcNode = cNode.parentNode;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tselectedNodes.push(cNode);\r\n\t\t\t\t\t\t\tcNode = cNode.nextSibling;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Find all the blocknodes now that we know the selection area.\r\n\t\t\t\t\t\tvar bnNodes = this._findBlockQuotes(selectedNodes);\r\n\t\t\t\t\t\twhile(bnNodes.length){\r\n\t\t\t\t\t\t\tvar bn = bnNodes.pop();\r\n\t\t\t\t\t\t\tif(bn.parentNode){\r\n\t\t\t\t\t\t\t\t// Make sure we haven't seen this before and removed it.\r\n\t\t\t\t\t\t\t\twhile(bn.firstChild){\r\n\t\t\t\t\t\t\t\t\tdojo.place(bn.firstChild, bn, \"before\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbn.parentNode.removeChild(bn);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ted.endEditing();\r\n\t\t\t}\r\n\t\t\ted.onNormalizedDisplayChanged();\r\n\t\t}catch(e){ /* Squelch */ }\r\n\t},\r\n\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrides _Plugin.updateState().  This controls whether or not the current\r\n\t\t//\t\tcursor position should toggle on the quote button or not.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\tvar ed = this.editor;\r\n\t\tvar disabled = this.get(\"disabled\");\r\n\t\t\r\n\t\tif(!ed || !ed.isLoaded){ return; }\r\n\t\tif(this.button){\r\n\t\t\tthis.button.set(\"disabled\", disabled);\r\n\t\t\tif(disabled){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Some browsers (WebKit) doesn't actually get the tag info right.\r\n\t\t\t// So ... lets check it manually.\r\n\t\t\tvar elem;\r\n\t\t\tvar found = false;\r\n\t\t\t\r\n\t\t\t// Try to find the ansestor element (and see if it is blockquote)\r\n\t\t\tvar sel = dijit.range.getSelection(ed.window);\r\n\t\t\tif(sel && sel.rangeCount > 0){\r\n\t\t\t\tvar range = sel.getRangeAt(0);\r\n\t\t\t\tif(range){\r\n\t\t\t\t\telem = range.endContainer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Okay, now see if we can find one of the formatting types we're in.\r\n\t\t\twhile(elem && elem !== ed.editNode && elem !== ed.document){\r\n\t\t\t\tvar tg = elem.tagName?elem.tagName.toLowerCase():\"\";\r\n\t\t\t\tif(tg === \"blockquote\"){\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telem = elem.parentNode;\r\n\t\t\t}\r\n\t\t\t// toggle whether or not the current selection is blockquoted.\r\n\t\t\tthis.button.set(\"checked\", found);\r\n\t\t}\r\n\t},\r\n\r\n\t_findBlockQuotes: function(nodeList){\r\n\t\t// summary:\r\n\t\t//\t\tfunction to find all the blocknode elements in a collection of\r\n\t\t//\t\tnodes\r\n\t\t// nodeList:\r\n\t\t//\t\tThe list of nodes.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar bnList = [];\r\n\t\tif(nodeList){\r\n\t\t\tvar i;\r\n\t\t\tfor(i = 0; i < nodeList.length; i++){\r\n\t\t\t\tvar node = nodeList[i];\r\n\t\t\t\tif(node.nodeType === 1){\r\n\t\t\t\t\tif(this._getTagName(node) === \"blockquote\"){\r\n\t\t\t\t\t\tbnList.push(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(node.childNodes && node.childNodes.length > 0){\r\n\t\t\t\t\t\tbnList = bnList.concat(this._findBlockQuotes(node.childNodes));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bnList;\r\n\t},\r\n\r\n\t/*****************************************************************/\r\n\t/* Functions borrowed from NormalizeIndentOutdent                */\r\n\t/*****************************************************************/\r\n\r\n\t_getTagName: function(node){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function to get the tag name of an element\r\n\t\t//\t\tif any.\r\n\t\t// node:\r\n\t\t//\t\tThe node to look at.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar tag = \"\";\r\n\t\tif(node && node.nodeType === 1){\r\n\t\t\ttag = node.tagName?node.tagName.toLowerCase():\"\";\r\n\t\t}\r\n\t\treturn tag;\r\n\t},\r\n\r\n\t_isRootInline: function(node){\r\n\t\t// summary:\r\n\t\t//\t\tThis functions tests whether an indicated node is in root as inline\r\n\t\t//\t\tor rooted inline elements in the page.\r\n\t\t// node:\r\n\t\t//\t\tThe node to start at.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar ed = this.editor;\r\n\t\tif(this._isTextElement(node) && node.parentNode === ed.editNode){\r\n\t\t\treturn true;\r\n\t\t}else if(node.nodeType === 1 && this._isInlineFormat(node) && node.parentNode === ed.editNode){\r\n\t\t\treturn true;\r\n\t\t}else if(this._isTextElement(node) && this._isInlineFormat(this._getTagName(node.parentNode))){\r\n\t\t\tnode = node.parentNode;\r\n\t\t\twhile(node && node !== ed.editNode && this._isInlineFormat(this._getTagName(node))){\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t}\r\n\t\t\tif(node === ed.editNode){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\t_isTextElement: function(node){\r\n\t\t// summary:\r\n\t\t//\t\tHelper function to check for text nodes.\r\n\t\t// node:\r\n\t\t//\t\tThe node to check.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tif(node && node.nodeType === 3 || node.nodeType === 4){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\t_isEmpty: function(node){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function to determine if a node is 'empty'\r\n\t\t//\t\tEg, contains only blank text.  Used to determine if\r\n\t\t//\t\tan empty list element should be removed or not.\r\n\t\t// node:\r\n\t\t//\t\tThe node to check.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tif(node.childNodes){\r\n\t\t\tvar empty = true;\r\n\t\t\tvar i;\r\n\t\t\tfor(i = 0; i < node.childNodes.length; i++){\r\n\t\t\t\tvar n = node.childNodes[i];\r\n\t\t\t\tif(n.nodeType === 1){\r\n\t\t\t\t\tif(this._getTagName(n) === \"p\"){\r\n\t\t\t\t\t\tif(!dojo.trim(n.innerHTML)){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tempty = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}else if(this._isTextElement(n)){\r\n\t\t\t\t\t// Check for empty text.\r\n\t\t\t\t\tvar nv = dojo.trim(n.nodeValue);\r\n\t\t\t\t\tif(nv && nv !==\"&nbsp;\" && nv !== \"\\u00A0\"){\r\n\t\t\t\t\t\tempty = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tempty = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn empty;\r\n\t\t}else{\r\n\t\t\treturn true;\r\n\t\t}\r\n\t},\r\n\r\n\t_isInlineFormat: function(tag){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to determine if the current tag is an inline\r\n\t\t//\t\telement that does formatting, as we don't want to\r\n\t\t//\t\tbreak/indent around it, as it can screw up text.\r\n\t\t// tag:\r\n\t\t//\t\tThe tag to examine\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tswitch(tag){\r\n\t\t\tcase \"a\":\r\n\t\t\tcase \"b\":\r\n\t\t\tcase \"strong\":\r\n\t\t\tcase \"s\":\r\n\t\t\tcase \"strike\":\r\n\t\t\tcase \"i\":\r\n\t\t\tcase \"u\":\r\n\t\t\tcase \"em\":\r\n\t\t\tcase \"sup\":\r\n\t\t\tcase \"sub\":\r\n\t\t\tcase \"span\":\r\n\t\t\tcase \"font\":\r\n\t\t\tcase \"big\":\r\n\t\t\tcase \"cite\":\r\n\t\t\tcase \"q\":\r\n\t\t\tcase \"img\":\r\n\t\t\tcase \"small\":\r\n\t\t\t\treturn true;\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name === \"blockquote\"){\r\n\t\to.plugin = new Blockquote({});\r\n\t}\r\n});\r\n\r\nreturn Blockquote;\r\n\r\n});\r\n"]}