{"version":3,"sources":["editor/plugins/FindReplace.js"],"names":["define","dojo","dijit","dojox","manager","popup","_Widget","_TemplatedMixin","_KeyNavContainer","_WidgetsInTemplateMixin","TooltipDialog","Toolbar","CheckBox","_TextBoxMixin","TextBox","_Plugin","experimental","FindReplaceCloseBox","declare","btnId","widget","widgetsInTemplate","templateString","postMixInProperties","this","id","getUniqueId","declaredClass","replace","inherited","arguments","startup","connect","button","onClick","FindReplaceTextBox","textId","label","toolTip","postCreate","textBox","set","disabled","get","attr","textbox","_setValueAttr","value","focus","_setDisabledAttr","onChange","val","_onKeyPress","evt","start","end","target","ctrlKey","altKey","shiftKey","keyCode","keys","LEFT_ARROW","selectionStart","selectionEnd","selectInputText","stopEvent","RIGHT_ARROW","FindReplaceCheckBox","checkId","tooltip","checkBox","isFocusable","_getValueAttr","FindReplaceToolbar","connectKeyNavHandlers","containerNode","addClass","domNode","addChild","insertIndex","superclass","apply","_onToolbarEvent","stopPropagation","FindReplace","buttonClass","form","ToggleButton","iconClassPrefix","editor","_frToolbar","_closeBox","_findField","_replaceField","_findButton","_replaceButton","_replaceAllButton","_caseSensitive","_backwards","_promDialog","_promDialogTimeout","_strings","_initButton","i18n","getLocalization","showLabel","iconClass","tabIndex","hitch","isOpera","_toggleFindReplace","_displayed","setEditor","toggle","show","ignoreState","buttonDisabled","size","marginBox","style","_populateFindField","resize","h","ed","selectedTxt","window","_sCall","focusNode","setToolbar","toolbar","_tb","place","plugins","ToolbarLineBreak","Button","titleNode","title","_checkButtons","_onFindKeyDown","ENTER","_find","_onReplaceKeyDown","_replace","showMessage","txt","caseSensitive","backwards","isFound","_findText","string","substitute","0","open","around","setTimeout","clearTimeout","close","isReplaced","repTxt","selected","isMoz","trim","regExp","_filterRegexp","test","execCommand","_replaceAll","replaced","placeCursorAtEnd","placeCursorAtStart","loopBody","select","win","found","find","doc","document","selection","txtRg","body","createTextRange","curPos","createRange","setEndPoint","flags","findText","text","length","pattern","ignoreCase","rxp","c","i","charAt","RegExp","updateState","destroy","destroyRecursive","_FindReplaceCloseBox","_FindReplaceTextBox","_FindReplaceCheckBox","_FindReplaceToolbar","subscribe","_scopeName","o","plugin","args","name","toLowerCase"],"mappings":"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","file":"../../../editor/plugins/FindReplace.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_base/manager\",\t// getUniqueId\r\n\t\"dijit/_base/popup\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"dijit/_KeyNavContainer\",\r\n\t\"dijit/_WidgetsInTemplateMixin\",\r\n\t\"dijit/TooltipDialog\",\r\n\t\"dijit/Toolbar\",\r\n\t\"dijit/form/CheckBox\",\r\n\t\"dijit/form/_TextBoxMixin\",\t// selectInputText\r\n\t\"dijit/form/TextBox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/Button\",\r\n\t\"dijit/form/DropDownButton\",\r\n\t\"dijit/form/ToggleButton\",\r\n\t\"./ToolbarLineBreak\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/string\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/FindReplace\"\r\n], function(dojo, dijit, dojox, manager, popup,\r\n\t\t\t_Widget, _TemplatedMixin, _KeyNavContainer, _WidgetsInTemplateMixin, TooltipDialog,\r\n\t\t\tToolbar, CheckBox, _TextBoxMixin, TextBox, _Plugin) {\r\n\r\ndojo.experimental(\"dojox.editor.plugins.FindReplace\");\r\n\r\nvar FindReplaceCloseBox = dojo.declare(\"dojox.editor.plugins._FindReplaceCloseBox\",\r\n\t[_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n\t// summary:\r\n\t//\t\tBase class for widgets that contains a button labeled X\r\n\t//\t\tto close the tool bar.\r\n\t\r\n\tbtnId: \"\",\r\n\twidget: null,\r\n\twidgetsInTemplate: true,\r\n\t\r\n\ttemplateString:\r\n\t\t\"<span style='float: right' class='dijitInline' tabindex='-1'>\" +\r\n\t\t\t\"<button class='dijit dijitReset dijitInline' \" +\r\n\t\t\t\t\"id='${btnId}' dojoAttachPoint='button' dojoType='dijit.form.Button' tabindex='-1' iconClass='dijitEditorIconsFindReplaceClose' showLabel='false'>X</button>\" +\r\n\t\t\"</span>\",\r\n\t\r\n\tpostMixInProperties: function(){\r\n\t\t// Set some substitution variables used in the template\r\n\t\tthis.id = dijit.getUniqueId(this.declaredClass.replace(/\\./g,\"_\"));\r\n\t\tthis.btnId = this.id + \"_close\";\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tstartup: function(){\r\n\t\tthis.connect(this.button, \"onClick\", \"onClick\");\r\n\t},\r\n\tonClick: function(){\r\n\t}\r\n});\r\n\r\n\r\nvar FindReplaceTextBox = dojo.declare(\"dojox.editor.plugins._FindReplaceTextBox\",\r\n\t[_Widget, _TemplatedMixin, _WidgetsInTemplateMixin],{\r\n\t// summary:\r\n\t//\t\tBase class for widgets that contains a label (like \"Font:\")\r\n\t//\t\tand a TextBox to pick a value.\r\n\t//\t\tUsed as Toolbar entry.\r\n\r\n\t// textId: [public] String\r\n\t//\t\tThe id of the enhanced textbox\r\n\ttextId: \"\",\r\n\t\r\n\t// label: [public] String\r\n\t//\t\tThe label of the enhanced textbox\r\n\tlabel: \"\",\r\n\t\r\n\t// tooltip: [public] String\r\n\t//\t\tThe tooltip of the enhanced textbox when the mouse is hovering on it\r\n\ttoolTip: \"\",\r\n\twidget: null,\r\n\twidgetsInTemplate: true,\r\n\r\n\ttemplateString:\r\n\t\t\"<span style='white-space: nowrap' class='dijit dijitReset dijitInline dijitEditorFindReplaceTextBox' \" +\r\n\t\t\t\"title='${tooltip}' tabindex='-1'>\" +\r\n\t\t\t\"<label class='dijitLeft dijitInline' for='${textId}' tabindex='-1'>${label}</label>\" +\r\n\t\t\t\"<input dojoType='dijit.form.TextBox' intermediateChanges='true' class='focusTextBox' \" +\r\n\t\t\t\t\t\"tabIndex='0' id='${textId}' dojoAttachPoint='textBox, focusNode' value='' dojoAttachEvent='onKeyPress: _onKeyPress'/>\" +\r\n\t\t\"</span>\",\r\n\r\n\tpostMixInProperties: function(){\r\n\t\t// Set some substitution variables used in the template\r\n\t\tthis.id = dijit.getUniqueId(this.declaredClass.replace(/\\./g,\"_\"));\r\n\t\tthis.textId = this.id + \"_text\";\r\n\t\t\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.textBox.set(\"value\", \"\");\r\n\t\tthis.disabled =  this.textBox.get(\"disabled\");\r\n\t\tthis.connect(this.textBox, \"onChange\", \"onChange\");\r\n\t\tdojo.attr(this.textBox.textbox, \"formnovalidate\", \"true\");\r\n\t},\r\n\r\n\t_setValueAttr: function(/*String*/ value){\r\n\t\t//If the value is not a permitted value, just set empty string to prevent showing the warning icon\r\n\t\tthis.value = value;\r\n\t\tthis.textBox.set(\"value\", value);\r\n\t},\r\n\r\n\tfocus: function(){\r\n\t\tthis.textBox.focus();\r\n\t},\r\n\r\n\t_setDisabledAttr: function(/*Boolean*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the textbox's 'disabled' attribute so that it can be\r\n\t\t//\t\tdisabled programmatically.\r\n\t\t// value:\r\n\t\t//\t\tThe boolean value to indicate if the textbox should be disabled or not\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tthis.disabled = value;\r\n\t\tthis.textBox.set(\"disabled\", value);\r\n\t},\r\n\r\n\tonChange: function(/*String*/ val){\r\n\t\t// summary:\r\n\t\t//\t\tStub function for change events on the box.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\tthis.value= val;\r\n\t},\r\n\t\r\n\t_onKeyPress: function(/*Event*/ evt){\r\n\t\t// summary:\r\n\t\t//\t\tHandle the arrow key events\r\n\t\t// evt:\r\n\t\t//\t\tEvent object passed to this handler\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar start = 0;\r\n\t\tvar end = 0;\r\n\t\t\r\n\t\t// If CTRL, ALT or SHIFT is not held on\r\n\t\tif(evt.target && !evt.ctrlKey && !evt.altKey && !evt.shiftKey){\r\n\t\t\tif(evt.keyCode == dojo.keys.LEFT_ARROW){\r\n\t\t\t\tstart = evt.target.selectionStart;\r\n\t\t\t\tend = evt.target.selectionEnd;\r\n\t\t\t\tif(start < end){\r\n\t\t\t\t\tdijit.selectInputText(evt.target, start, start);\r\n\t\t\t\t\tdojo.stopEvent(evt);\r\n\t\t\t\t}\r\n\t\t\t}else if(evt.keyCode == dojo.keys.RIGHT_ARROW){\r\n\t\t\t\tstart = evt.target.selectionStart;\r\n\t\t\t\tend = evt.target.selectionEnd;\r\n\t\t\t\tif(start < end){\r\n\t\t\t\t\tdijit.selectInputText(evt.target, end, end);\r\n\t\t\t\t\tdojo.stopEvent(evt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\n\r\nvar FindReplaceCheckBox = dojo.declare(\"dojox.editor.plugins._FindReplaceCheckBox\",\r\n\t[_Widget, _TemplatedMixin, _WidgetsInTemplateMixin],{\r\n\t// summary:\r\n\t//\t\tBase class for widgets that contains a label (like \"Match case: \")\r\n\t//\t\tand a checkbox to indicate if it is checked or not.\r\n\t//\t\tUsed as Toolbar entry.\r\n\r\n\t// checkId: [public] String\r\n\t//\t\tThe id of the enhanced checkbox\r\n\tcheckId: \"\",\r\n\t\r\n\t// label: [public] String\r\n\t//\t\tThe label of the enhanced checkbox\r\n\tlabel: \"\",\r\n\t\r\n\t// tooltip: [public] String\r\n\t//\t\tThe tooltip of the enhanced checkbox when the mouse is hovering it\r\n\ttooltip: \"\",\r\n\t\r\n\twidget: null,\r\n\twidgetsInTemplate: true,\r\n\r\n\ttemplateString:\r\n\t\t\"<span style='white-space: nowrap' tabindex='-1' \" +\r\n\t\t\t\"class='dijit dijitReset dijitInline dijitEditorFindReplaceCheckBox' title='${tooltip}' >\" +\r\n\t\t\t\"<input dojoType='dijit.form.CheckBox' \" +\r\n\t\t\t\t\t\"tabIndex='0' id='${checkId}' dojoAttachPoint='checkBox, focusNode' value=''/>\" +\r\n\t\t\t\"<label tabindex='-1' class='dijitLeft dijitInline' for='${checkId}'>${label}</label>\" +\r\n\t\t\"</span>\",\r\n\r\n\tpostMixInProperties: function(){\r\n\t\t// Set some substitution variables used in the template\r\n\t\tthis.id = dijit.getUniqueId(this.declaredClass.replace(/\\./g,\"_\"));\r\n\t\tthis.checkId = this.id + \"_check\";\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.checkBox.set(\"checked\", false);\r\n\t\tthis.disabled =  this.checkBox.get(\"disabled\");\r\n\t\tthis.checkBox.isFocusable = function(){ return false; };\r\n\t},\r\n\r\n\t_setValueAttr: function(/*Boolean*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tPassthrough for checkbox.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tthis.checkBox.set('value', value);\r\n\t},\r\n\r\n\t_getValueAttr: function(){\r\n\t\t// summary:\r\n\t\t//\t\tPassthrough for checkbox.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\treturn this.checkBox.get('value');\r\n\t},\r\n\r\n\tfocus: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHandle the focus event when this widget gets focused\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tthis.checkBox.focus();\r\n\t},\r\n\r\n\t_setDisabledAttr: function(/*Boolean*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the button's 'disabled' attribute so that it can be\r\n\t\t//\t\tdisabled programmatically.\r\n\t\t// value:\r\n\t\t//\t\tThe flag that indicates if the checkbox is disabled or not.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tthis.disabled = value;\r\n\t\tthis.checkBox.set(\"disabled\", value);\r\n\t}\r\n});\r\n\r\n\r\nvar FindReplaceToolbar = dojo.declare(\"dojox.editor.plugins._FindReplaceToolbar\", Toolbar, {\r\n\t// summary:\r\n\t//\t\tA toolbar that derived from dijit.Toolbar, which\r\n\t//\t\teliminates some unnecessary event response such as LEFT_ARROW pressing\r\n\t//\t\tand click bubbling.\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.connectKeyNavHandlers([], []); // Prevent arrow key navigation\r\n\t\tthis.connect(this.containerNode, \"onclick\", \"_onToolbarEvent\");\r\n\t\tthis.connect(this.containerNode, \"onkeydown\", \"_onToolbarEvent\");\r\n\t\tdojo.addClass(this.domNode, \"dijitToolbar\");\r\n\t},\r\n\t\r\n\taddChild: function(/*dijit._Widget*/ widget, /*int?*/ insertIndex){\r\n\t\t// summary:\r\n\t\t//\t\tAdd a child to our _Container and prevent the default\r\n\t\t//\t\tarrow key navigation function. This function may bring in\r\n\t\t//\t\tside effect\r\n\t\tdijit._KeyNavContainer.superclass.addChild.apply(this, arguments);\r\n\t},\r\n\t\r\n\t_onToolbarEvent: function(/*Event*/ evt){\r\n\t\t// Editor may have special treatment to some events, so stop the bubbling.\r\n\t\t// evt:\r\n\t\t//\t\tThe Event object\r\n\t\t// tages:\r\n\t\t//\t\tprivate\r\n\t\tevt.stopPropagation();\r\n\t}\r\n});\r\n\r\nvar FindReplace = dojo.declare(\"dojox.editor.plugins.FindReplace\",[_Plugin],{\r\n\t// summary:\r\n\t//\t\tThis plugin provides a Find/Replace capability for the editor.\r\n\t//\t\tNote that this plugin is NOT supported on Opera currently, as opera\r\n\t//\t\tdoes not implement a window.find or equiv function.\r\n\r\n\t// buttonClass: [protected]\r\n\t//\t\tDefine the class of button the editor uses.\r\n\tbuttonClass: dijit.form.ToggleButton,\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix` and `command`\r\n\ticonClassPrefix: \"dijitEditorIconsFindReplace\",\r\n\r\n\t// editor: [protected]\r\n\t//\t\tThe editor this plugin belongs to\r\n\teditor: null,\r\n\t\r\n\t// button: [protected]\r\n\t//\t\tThe toggle button\r\n\tbutton: null,\r\n\t\r\n\t// _frToolbar: [private]\r\n\t//\t\tThe toolbar that contain all the entries and buttons\r\n\t_frToolbar: null,\r\n\t\r\n\t// _closeBox: [private]\r\n\t//\t\tThe close button of the F/R toolbar\r\n\t_closeBox: null,\r\n\t\r\n\t// _findField: [private]\r\n\t//\t\tThe Find field of the F/R toolbar\r\n\t_findField: null,\r\n\t\r\n\t// _replaceField: [private]\r\n\t//\t\tThe Replace field of the F/R toolbar\r\n\t_replaceField: null,\r\n\t\r\n\t// _findButton: [private]\r\n\t//\t\tThe Find button of the F/R toolbar\r\n\t_findButton: null,\r\n\t\r\n\t// _replaceButton: [private]\r\n\t//\t\tThe Replace button of the F/R toolbar\r\n\t_replaceButton: null,\r\n\t\r\n\t// _replaceAllButton: [private]\r\n\t//\t\tThe ReplaceAll button of the F/R toolbar\r\n\t_replaceAllButton: null,\r\n\t\r\n\t// _caseSensitive: [private]\r\n\t//\t\tThe case sensitive checkbox\r\n\t_caseSensitive: null,\r\n\t\r\n\t// _backwards: [private]\r\n\t//\t\tThe backwards checkbox\r\n\t_backwards: null,\r\n\t\r\n\t// _promDialog: [private]\r\n\t//\t\tThe prompt message box that shows the user some messages\r\n\t//\t\tsuch as the end of a search, the end of a replacement, etc.\r\n\t_promDialog: null,\r\n\t_promDialogTimeout: null,\r\n\r\n\t// _strings: [private]\r\n\t//\t\tThe array that contains globalized strings\r\n\t_strings: null,\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the resize button.\r\n\t\tthis._strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"FindReplace\");\r\n\t\tthis.button = new dijit.form.ToggleButton({\r\n\t\t\tlabel: this._strings[\"findReplace\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" dijitEditorIconFindString\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tonChange: dojo.hitch(this, \"_toggleFindReplace\")\r\n\t\t});\r\n\t\tif(dojo.isOpera){\r\n\t\t\t// Not currently supported on Opera!\r\n\t\t\tthis.button.set(\"disabled\", true);\r\n\t\t}\r\n\t\t//Link up so that if the toggle is disabled, then the view of Find/Replace is closed.\r\n\t\tthis.connect(this.button, \"set\", dojo.hitch(this, function(attr, val){\r\n\t\t\tif(attr === \"disabled\"){\r\n\t\t\t\tthis._toggleFindReplace((!val && this._displayed), true, true);\r\n\t\t\t}\r\n\t\t}));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tThis is a callback handler that set a reference to the editor this plugin\r\n\t\t//\t\thosts in\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t},\r\n\r\n\ttoggle: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to allow programmatic toggling of the find toolbar.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\tthis.button.set(\"checked\", !this.button.get(\"checked\"));\r\n\t},\r\n\r\n\t_toggleFindReplace: function(/*Boolean*/ show, /*Boolean?*/ ignoreState, /*Boolean?*/ buttonDisabled){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to toggle whether or not find/replace is displayed.\r\n\t\t// show:\r\n\t\t//\t\tIndicate if the toolbar is shown or not\r\n\t\t// ignoreState:\r\n\t\t//\t\tIndicate if the status should be ignored or not\r\n\t\t// blurEditor:\r\n\t\t//\t\tIndicate if the focus should be removed from the editor or not\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar size = dojo.marginBox(this.editor.domNode);\r\n\t\tif(show && !dojo.isOpera){\r\n\t\t\tdojo.style(this._frToolbar.domNode, \"display\", \"block\");\r\n\t\t\t// Auto populate the Find field\r\n\t\t\tthis._populateFindField();\r\n\t\t\tif(!ignoreState){\r\n\t\t\t\tthis._displayed = true;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tdojo.style(this._frToolbar.domNode, \"display\", \"none\");\r\n\t\t\tif(!ignoreState){\r\n\t\t\t\tthis._displayed = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// If the toggle button is disabled, it is most likely that\r\n\t\t\t// another plugin such as ViewSource disables it.\r\n\t\t\t// So we do not need to focus the text area of the editor to\r\n\t\t\t// prevent the editor from an invalid status.\r\n\t\t\t// Please refer to dijit._editor.plugins.ViewSource for more details.\r\n\t\t\tif(!buttonDisabled){\r\n\t\t\t\tthis.editor.focus();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Resize the editor.\r\n\t\tthis.editor.resize({h: size.h});\r\n\t},\r\n\r\n\t_populateFindField: function(){\r\n\t\t// summary:\r\n\t\t//\t\tPopulate the Find field with selected text when dialog initially displayed.\r\n\t\t//\t\tAuto-select text in Find field after it is populated.\r\n\t\t//\t\tIf nothing selected, restore previous entry from the same session.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar ed = this.editor;\r\n\t\tvar win = ed.window;\r\n\t\tvar selectedTxt = ed._sCall(\"getSelectedText\", [null]);\r\n\t\tif(this._findField && this._findField.textBox){\r\n\t\t\tif(selectedTxt){\r\n\t\t\t\tthis._findField.textBox.set(\"value\", selectedTxt);\r\n\t\t\t}\r\n\t\t\tthis._findField.textBox.focus();\r\n\t\t\tdijit.selectInputText(this._findField.textBox.focusNode);\r\n\t\t}\r\n\t},\r\n\r\n\tsetToolbar: function(/*dijit.Toolbar*/ toolbar){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride so that find/replace toolbar is appended after the current toolbar.\r\n\t\t// toolbar:\r\n\t\t//\t\tThe current toolbar of the editor\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\tthis.inherited(arguments);\r\n\t\tif(!dojo.isOpera){\r\n\t\t\tvar _tb = (this._frToolbar = new FindReplaceToolbar());\r\n\t\t\tdojo.style(_tb.domNode, \"display\", \"none\");\r\n\t\t\tdojo.place(_tb.domNode, toolbar.domNode, \"after\");\r\n\t\t\t_tb.startup();\r\n\r\n\t\t\t// IE6 will put the close box in a new line when its style is \"float: right\".\r\n\t\t\t// So place the close box ahead of the other fields, which makes it align with\r\n\t\t\t// the other components.\r\n\t\t\tthis._closeBox = new FindReplaceCloseBox();\r\n\t\t\t_tb.addChild(this._closeBox);\r\n\t\t\t\r\n\t\t\t// Define the search/replace fields.\r\n\t\t\tthis._findField = new FindReplaceTextBox(\r\n\t\t\t\t{label: this._strings[\"findLabel\"], tooltip: this._strings[\"findTooltip\"]});\r\n\t\t\t_tb.addChild(this._findField);\r\n\t\t\t\r\n\t\t\tthis._replaceField = new FindReplaceTextBox(\r\n\t\t\t\t{label: this._strings[\"replaceLabel\"], tooltip: this._strings[\"replaceTooltip\"]});\r\n\t\t\t_tb.addChild(this._replaceField);\r\n\r\n\t\t\t// Define the Find/Replace/ReplaceAll buttons.\r\n\t\t\t_tb.addChild(new dojox.editor.plugins.ToolbarLineBreak());\r\n\t\t\t\r\n\t\t\tthis._findButton = new dijit.form.Button({label: this._strings[\"findButton\"], showLabel: true,\r\n\t\t\t\ticonClass: this.iconClassPrefix + \" dijitEditorIconFind\"});\r\n\t\t\tthis._findButton.titleNode.title = this._strings[\"findButtonTooltip\"];\r\n\t\t\t_tb.addChild(this._findButton);\r\n\t\t\t\r\n\t\t\tthis._replaceButton = new dijit.form.Button({label: this._strings[\"replaceButton\"], showLabel: true,\r\n\t\t\t\ticonClass: this.iconClassPrefix + \" dijitEditorIconReplace\"});\r\n\t\t\tthis._replaceButton.titleNode.title = this._strings[\"replaceButtonTooltip\"];\r\n\t\t\t_tb.addChild(this._replaceButton);\r\n\t\t\t\r\n\t\t\tthis._replaceAllButton = new dijit.form.Button({label: this._strings[\"replaceAllButton\"], showLabel: true,\r\n\t\t\t\ticonClass: this.iconClassPrefix + \" dijitEditorIconReplaceAll\"});\r\n\t\t\tthis._replaceAllButton.titleNode.title = this._strings[\"replaceAllButtonTooltip\"];\r\n\t\t\t_tb.addChild(this._replaceAllButton);\r\n\t\t\t\r\n\t\t\t// Define the option checkboxes.\r\n\t\t\tthis._caseSensitive = new FindReplaceCheckBox(\r\n\t\t\t\t{label: this._strings[\"matchCase\"], tooltip: this._strings[\"matchCaseTooltip\"]});\r\n\t\t\t_tb.addChild(this._caseSensitive);\r\n\t\t\t\r\n\t\t\tthis._backwards = new FindReplaceCheckBox(\r\n\t\t\t\t{label: this._strings[\"backwards\"], tooltip: this._strings[\"backwardsTooltip\"]});\r\n\t\t\t_tb.addChild(this._backwards);\r\n\r\n\t\t\t// Set initial states, buttons should be disabled unless content is\r\n\t\t\t// present in the fields.\r\n\t\t\tthis._findButton.set(\"disabled\", true);\r\n\t\t\tthis._replaceButton.set(\"disabled\", true);\r\n\t\t\tthis._replaceAllButton.set(\"disabled\", true);\r\n\r\n\t\t\t// Connect the event to the status of the items\r\n\t\t\tthis.connect(this._findField, \"onChange\", \"_checkButtons\");\r\n\t\t\tthis.connect(this._findField, \"onKeyDown\", \"_onFindKeyDown\");\r\n\t\t\tthis.connect(this._replaceField, \"onKeyDown\", \"_onReplaceKeyDown\");\r\n\r\n\t\t\t// Connect up the actual search events.\r\n\t\t\tthis.connect(this._findButton, \"onClick\", \"_find\");\r\n\t\t\tthis.connect(this._replaceButton, \"onClick\", \"_replace\");\r\n\t\t\tthis.connect(this._replaceAllButton, \"onClick\", \"_replaceAll\");\r\n\t\t\t\r\n\t\t\t// Connect up the close event\r\n\t\t\tthis.connect(this._closeBox, \"onClick\", \"toggle\");\r\n\t\t\t\r\n\t\t\t// Prompt for the message\r\n\t\t\tthis._promDialog = new dijit.TooltipDialog();\r\n\t\t\tthis._promDialog.startup();\r\n\t\t\tthis._promDialog.set(\"content\", \"\");\r\n\t\t}\r\n\t},\r\n\r\n\t_checkButtons: function(){\r\n\t\t// summary:\r\n\t\t//\t\tEnsure that all the buttons are in a correct status\r\n\t\t//\t\twhen certain events are fired.\r\n\t\tvar fText = this._findField.get(\"value\");\r\n\r\n\t\tif(fText){\r\n\t\t\t// Only enable if find text is not empty or just blank/spaces.\r\n\t\t\tthis._findButton.set(\"disabled\", false);\r\n\t\t\tthis._replaceButton.set(\"disabled\", false);\r\n\t\t\tthis._replaceAllButton.set(\"disabled\", false);\r\n\t\t}else{\r\n\t\t\tthis._findButton.set(\"disabled\", true);\r\n\t\t\tthis._replaceButton.set(\"disabled\", true);\r\n\t\t\tthis._replaceAllButton.set(\"disabled\", true);\r\n\t\t}\r\n\t},\r\n\t\r\n\t_onFindKeyDown: function(evt){\r\n\t\tif(evt.keyCode == dojo.keys.ENTER){\r\n\t\t\t// Perform the default search action\r\n\t\t\tthis._find();\r\n\t\t\tdojo.stopEvent(evt);\r\n\t\t}\r\n\t},\r\n\t\r\n\t_onReplaceKeyDown: function(evt){\r\n\t\tif(evt.keyCode == dojo.keys.ENTER){\r\n\t\t\t// Perform the default replace action\r\n\t\t\tif(!this._replace()) this._replace();\r\n\t\t\tdojo.stopEvent(evt);\r\n\t\t}\r\n\t},\r\n\r\n\t_find: function(/*Boolean?*/ showMessage){\r\n\t\t// summary:\r\n\t\t//\t\tThis function invokes a find on the editor document with the noted options for\r\n\t\t//\t\tfind.\r\n\t\t// showMessage:\r\n\t\t//\t\tIndicated whether the tooltip is shown or not when the search reaches the end\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\t\t// returns:\r\n\t\t//\t\tBoolean indicating if the content was found or not.\r\n\t\tvar txt = this._findField.get(\"value\") || \"\";\r\n\t\tif(txt){\r\n\t\t\tvar caseSensitive = this._caseSensitive.get(\"value\");\r\n\t\t\tvar backwards = this._backwards.get(\"value\");\r\n\t\t\tvar isFound = this._findText(txt, caseSensitive, backwards);\r\n\t\t\tif(!isFound && showMessage){\r\n\t\t\t\tthis._promDialog.set(\"content\", dojo.string.substitute(\r\n\t\t\t\t\tthis._strings[\"eofDialogText\"], {\"0\": this._strings[\"eofDialogTextFind\"]}));\r\n\t\t\t\tdijit.popup.open({popup: this._promDialog, around: this._findButton.domNode});\r\n\t\t\t\tthis._promDialogTimeout = setTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\tclearTimeout(this._promDialogTimeout);\r\n\t\t\t\t\tthis._promDialogTimeout = null;\r\n\t\t\t\t\tdijit.popup.close(this._promDialog);\r\n\t\t\t\t}), 3000);\r\n\t\t\t\tsetTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\tthis.editor.focus();\r\n\t\t\t\t}), 0);\r\n\t\t\t}\r\n\t\t\treturn isFound;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t},\r\n\r\n\t_replace: function(/*Boolean?*/ showMessage){\r\n\t\t// summary:\r\n\t\t//\t\tThis function invokes a replace on the editor document with the noted options for replace\r\n\t\t// showMessage:\r\n\t\t//\t\tIndicate if the prompt message is shown or not when the replacement\r\n\t\t//\t\treaches the end\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// returns:\r\n\t\t//\t\tBoolean indicating if the content was replaced or not.\r\n\t\tvar isReplaced = false;\r\n\t\tvar ed = this.editor;\r\n\t\ted.focus();\r\n\t\tvar txt = this._findField.get(\"value\") || \"\";\r\n\t\tvar repTxt = this._replaceField.get(\"value\") || \"\";\r\n\t\t \r\n\t\tif(txt){\r\n\t\t\tvar caseSensitive = this._caseSensitive.get(\"value\");\r\n\t\t\t// Check if it is forced to be forwards or backwards\r\n\t\t\tvar backwards = this._backwards.get(\"value\");\r\n\t\t\t\r\n\t\t\t//Replace the current selected text if it matches the pattern\r\n\t\t\tvar selected = ed._sCall(\"getSelectedText\", [null]);\r\n\t\t\t// Handle checking/replacing current selection.  For some reason on Moz\r\n\t\t\t// leading whitespace is trimmed, so we have to trim it down on this check\r\n\t\t\t// or we don't always replace.  Moz bug!\r\n\t\t\tif(dojo.isMoz){\r\n\t\t\t\ttxt = dojo.trim(txt);\r\n\t\t\t\tselected = dojo.trim(selected);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar regExp = this._filterRegexp(txt, !caseSensitive);\r\n\t\t\tif(selected && regExp.test(selected)){\r\n\t\t\t\ted.execCommand(\"inserthtml\", repTxt);\r\n\t\t\t\tisReplaced = true;\r\n\t\t\t\r\n\t\t\t\tif(backwards){\r\n\t\t\t\t\t// Move to the beginning of the replaced text\r\n\t\t\t\t\t// to avoid the infinite recursive replace\r\n\t\t\t\t\tthis._findText(repTxt, caseSensitive, backwards);\r\n\t\t\t\t\ted._sCall(\"collapse\", [true]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!this._find(false) && showMessage){\t// Find the next\r\n\t\t\t\tthis._promDialog.set(\"content\", dojo.string.substitute(\r\n\t\t\t\t\tthis._strings[\"eofDialogText\"], {\"0\": this._strings[\"eofDialogTextReplace\"]}));\r\n\t\t\t\tdijit.popup.open({popup: this._promDialog, around: this._replaceButton.domNode});\r\n\t\t\t\tthis._promDialogTimeout = setTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\tclearTimeout(this._promDialogTimeout);\r\n\t\t\t\t\tthis._promDialogTimeout = null;\r\n\t\t\t\t\tdijit.popup.close(this._promDialog);\r\n\t\t\t\t}), 3000);\r\n\t\t\t\tsetTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\tthis.editor.focus();\r\n\t\t\t\t}), 0);\r\n\t\t\t}\r\n\t\t\treturn isReplaced;\r\n\t\t }\r\n\t\t return null;\r\n\t},\r\n\t\r\n\t_replaceAll: function(/*Boolean?*/ showMessage){\r\n\t\t// summary:\r\n\t\t//\t\tThis function replaces all the matched content on the editor document\r\n\t\t//\t\twith the noted options for replace\r\n\t\t// showMessage:\r\n\t\t//\t\tIndicate if the prompt message is shown or not when the action is done.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar replaced = 0;\r\n\t\tvar backwards = this._backwards.get(\"value\");\r\n\t\t\r\n\t\tif(backwards){\r\n\t\t\tthis.editor.placeCursorAtEnd();\r\n\t\t}else{\r\n\t\t\tthis.editor.placeCursorAtStart();\r\n\t\t}\r\n\t\t\r\n\t\t// The _replace will return false if the current selection deos not match\r\n\t\t// the searched text. So try the first attempt so that the selection\r\n\t\t// is always the searched text if there is one that matches\r\n\t\tif(this._replace(false)) { replaced++; }\r\n\t\t// Do the replace via timeouts to avoid locking the browser up for a lot of replaces.\r\n\t\tvar loopBody = dojo.hitch(this, function(){\r\n\t\t\tif(this._replace(false)){\r\n\t\t\t\treplaced++;\r\n\t\t\t\tsetTimeout(loopBody, 10);\r\n\t\t\t}else{\r\n\t\t\t\tif(showMessage){\r\n\t\t\t\t\tthis._promDialog.set(\"content\", dojo.string.substitute(\r\n\t\t\t\t\t\tthis._strings[\"replaceDialogText\"], {\"0\": \"\" + replaced}));\r\n\t\t\t\t\tdijit.popup.open({\r\n\t\t\t\t\t\tpopup: this._promDialog,\r\n\t\t\t\t\t\taround: this._replaceAllButton.domNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis._promDialogTimeout = setTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\t\tclearTimeout(this._promDialogTimeout);\r\n\t\t\t\t\t\tthis._promDialogTimeout = null;\r\n\t\t\t\t\t\tdijit.popup.close(this._promDialog);\r\n\t\t\t\t\t}), 3000);\r\n\t\t\t\t\tsetTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\t\tthis._findField.focus();\r\n\t\t\t\t\t\tthis._findField.textBox.focusNode.select();\r\n\t\t\t\t\t}), 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tloopBody();\r\n\t},\r\n\r\n\t_findText: function(/*String*/ txt, /*Boolean*/ caseSensitive, /*Boolean*/ backwards){\r\n\t\t// summary:\r\n\t\t//\t\tThis function invokes a find with specific options\r\n\t\t// txt: String\r\n\t\t//\t\tThe text to locate in the document.\r\n\t\t// caseSensitive: Boolean\r\n\t\t//\t\tWhether or ot to search case-sensitively.\r\n\t\t// backwards: Boolean\r\n\t\t//\t\tWhether or not to search backwards in the document.\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\t\t// returns:\r\n\t\t//\t\tBoolean indicating if the content was found or not.\r\n\t\tvar ed = this.editor;\r\n\t\tvar win = ed.window;\r\n\t\tvar found = false;\r\n\t\tif(txt){\r\n\t\t\tif(win.find){\r\n\t\t\t\tfound = win.find(txt, caseSensitive, backwards, false, false, false, false);\r\n\t\t\t}else{\r\n\t\t\t\tvar doc = ed.document;\r\n\t\t\t\tif(doc.selection){\r\n\t\t\t\t\t/* IE */\r\n\t\t\t\t\t// Focus to restore position/selection,\r\n\t\t\t\t\t// then shift to search from current position.\r\n\t\t\t\t\tthis.editor.focus();\r\n\t\t\t\t\tvar txtRg = doc.body.createTextRange();\r\n\t\t\t\t\tvar curPos = doc.selection?doc.selection.createRange():null;\r\n\t\t\t\t\tif(curPos){\r\n\t\t\t\t\t\tif(backwards){\r\n\t\t\t\t\t\t\ttxtRg.setEndPoint(\"EndToStart\", curPos);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\ttxtRg.setEndPoint(\"StartToEnd\", curPos);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar flags = caseSensitive?4:0;\r\n\t\t\t\t\tif(backwards){\r\n\t\t\t\t\t\tflags = flags | 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//flags = flags |\r\n\t\t\t\t\tfound = txtRg.findText(txt,txtRg.text.length,flags);\r\n\t\t\t\t\tif(found){\r\n\t\t\t\t\t\ttxtRg.select();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn found;\r\n\t},\r\n\r\n\t_filterRegexp: function(/*String*/ pattern, /*Boolean*/ ignoreCase){\r\n\t\t// summary:\r\n\t\t//\t\tHelper function to convert a simple pattern to a regular expression for matching.\r\n\t\t// description:\r\n\t\t//\t\tReturns a regular expression object that conforms to the defined conversion rules.\r\n\t\t//\t\tFor example:\r\n\t\t//\r\n\t\t//\t\t- ca*   -> /^ca.*$/\r\n\t\t//\t\t- *ca*  -> /^.*ca.*$/\r\n\t\t//\t\t- *c\\*a*  -> /^.*c\\*a.*$/\r\n\t\t//\t\t- *c\\*a?*  -> /^.*c\\*a..*$/\r\n\t\t//\r\n\t\t//\t\tand so on.\r\n\t\t// pattern: string\r\n\t\t//\t\tA simple matching pattern to convert that follows basic rules:\r\n\t\t//\r\n\t\t//\t\t- * Means match anything, so ca* means match anything starting with ca\r\n\t\t//\t\t- ? Means match single character.  So, b?b will match to bob and bab, and so on.\r\n\t\t//\t\t- \\ is an escape character.  So for example, \\* means do not treat * as a match, but literal character *.\r\n\t\t//\t\t  To use a \\ as a character in the string, it must be escaped.  So in the pattern it should be\r\n\t\t//\t\t  represented by \\\\ to be treated as an ordinary \\ character instead of an escape.\r\n\t\t// ignoreCase:\r\n\t\t//\t\tAn optional flag to indicate if the pattern matching should be treated as case-sensitive or not when comparing\r\n\t\t//\t\tBy default, it is assumed case sensitive.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\r\n\t\tvar rxp = \"\";\r\n\t\tvar c = null;\r\n\t\tfor(var i = 0; i < pattern.length; i++){\r\n\t\t\tc = pattern.charAt(i);\r\n\t\t\tswitch(c){\r\n\t\t\t\tcase '\\\\':\r\n\t\t\t\t\trxp += c;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\trxp += pattern.charAt(i);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase '$':\r\n\t\t\t\tcase '^':\r\n\t\t\t\tcase '/':\r\n\t\t\t\tcase '+':\r\n\t\t\t\tcase '.':\r\n\t\t\t\tcase '|':\r\n\t\t\t\tcase '(':\r\n\t\t\t\tcase ')':\r\n\t\t\t\tcase '{':\r\n\t\t\t\tcase '}':\r\n\t\t\t\tcase '[':\r\n\t\t\t\tcase ']':\r\n\t\t\t\t\trxp += \"\\\\\"; //fallthrough\r\n\t\t\t\tdefault:\r\n\t\t\t\t\trxp += c;\r\n\t\t\t}\r\n\t\t}\r\n\t\trxp = \"^\" + rxp + \"$\";\r\n\t\tif(ignoreCase){\r\n\t\t\treturn new RegExp(rxp,\"mi\"); //RegExp\r\n\t\t}else{\r\n\t\t\treturn new RegExp(rxp,\"m\"); //RegExp\r\n\t\t}\r\n\t\t\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCleanup of our custom toolbar.\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this._promDialogTimeout){\r\n\t\t\tclearTimeout(this._promDialogTimeout);\r\n\t\t\tthis._promDialogTimeout = null;\r\n\t\t\tdijit.popup.close(this._promDialog);\r\n\t\t}\r\n\t\tif(this._frToolbar){\r\n\t\t\tthis._frToolbar.destroyRecursive();\r\n\t\t\tthis._frToolbar = null;\r\n\t\t}\r\n\t\tif(this._promDialog){\r\n\t\t\tthis._promDialog.destroyRecursive();\r\n\t\t\tthis._promDialog = null;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// For monkey patching\r\nFindReplace._FindReplaceCloseBox = FindReplaceCloseBox;\r\nFindReplace._FindReplaceTextBox = FindReplaceTextBox;\r\nFindReplace._FindReplaceCheckBox = FindReplaceCheckBox;\r\nFindReplace._FindReplaceToolbar = FindReplaceToolbar;\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name ===  \"findreplace\"){\r\n\t\to.plugin = new FindReplace({});\r\n\t}\r\n});\r\n\r\nreturn FindReplace;\r\n\r\n});\r\n"]}