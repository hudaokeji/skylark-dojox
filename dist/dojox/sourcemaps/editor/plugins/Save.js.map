{"version":3,"sources":["editor/plugins/Save.js"],"names":["define","dojo","dijit","dojox","_Plugin","Save","declare","iconClassPrefix","url","logResults","_initButton","strings","i18n","getLocalization","this","button","form","Button","label","showLabel","iconClass","tabIndex","onClick","hitch","updateState","set","get","setEditor","editor","_save","content","save","postArgs","postData","headers","Content-Type","handleAs","deferred","xhrPost","addCallback","onSuccess","addErrback","onError","console","log","resp","ioargs","error","subscribe","_scopeName","o","plugin","args","name","toLowerCase"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,wBACA,oBACA,qBACA,qBACA,YACA,2CACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhC,IAAIC,EAAOJ,EAAKK,QAAQ,4BAA6BF,GAWpDG,gBAAiB,4BAIjBC,IAAK,GAKLC,YAAY,EAEZC,YAAa,WAGZ,IAAIC,EAAUV,EAAKW,KAAKC,gBAAgB,uBAAwB,QAChEC,KAAKC,OAAS,IAAIb,EAAMc,KAAKC,QAC5BC,MAAOP,EAAc,KACrBQ,WAAW,EACXC,UAAWN,KAAKP,gBAAkB,IAAMO,KAAKP,gBAAkB,OAC/Dc,SAAU,KACVC,QAASrB,EAAKsB,MAAMT,KAAM,YAI5BU,YAAa,WAGZV,KAAKC,OAAOU,IAAI,WAAYX,KAAKY,IAAI,cAGtCC,UAAW,SAASC,GAKnBd,KAAKc,OAASA,EACdd,KAAKJ,eAGNmB,MAAO,WAKN,IAAIC,EAAUhB,KAAKc,OAAOF,IAAI,SAC9BZ,KAAKiB,KAAKD,IAGXC,KAAM,SAASD,GAad,GAAGhB,KAAKN,IAAI,CACX,IAAIwB,GACHxB,IAAKM,KAAKN,IACVyB,SAAUH,EACVI,SANDC,eAAgB,aAOfC,SAAU,QAEXtB,KAAKC,OAAOU,IAAI,YAAY,GAC5B,IAAIY,EAAWpC,EAAKqC,QAAQN,GAC5BK,EAASE,YAAYtC,EAAKsB,MAAMT,KAAMA,KAAK0B,YAC3CH,EAASI,WAAWxC,EAAKsB,MAAMT,KAAMA,KAAK4B,eAE1CC,QAAQC,IAAI,6CAA+Cd,IAI7DU,UAAW,SAASK,EAAMC,GAQzBhC,KAAKC,OAAOU,IAAI,YAAY,GACzBX,KAAKL,YACPkC,QAAQC,IAAIC,IAIdH,QAAS,SAASK,EAAOD,GAQxBhC,KAAKC,OAAOU,IAAI,YAAY,GACzBX,KAAKL,YACPkC,QAAQC,IAAIG,MAiBf,OAXA9C,EAAK+C,UAAU9C,EAAM+C,WAAa,oBAAoB,KAAK,SAASC,GAChEA,EAAEC,QAEO,SADDD,EAAEE,KAAKC,KAAKC,gBAEtBJ,EAAEC,OAAS,IAAI9C,GACdG,IAAM,QAAS0C,EAAEE,KAAMF,EAAEE,KAAK5C,IAAI,GAClCC,aAAa,eAAgByC,EAAEE,OAAMF,EAAEE,KAAK3C,gBAKxCJ","file":"../../../editor/plugins/Save.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/Button\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/Save\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\nvar Save = dojo.declare(\"dojox.editor.plugins.Save\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides Save capability to the editor.  When\r\n\t//\t\tclicked, the document in the editor frame will be posted to the URL\r\n\t//\t\tprovided, or none, if none provided.  Users who desire a different save\r\n\t//\t\tfunction can extend this plugin (via dojo.extend) and over-ride the\r\n\t//\t\tsave method\twhile save is in process, the save button is disabled.\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix`\r\n\t//\t\tand `command`\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t// url: [public] String\r\n\t//\t\tThe URL to POST the content back to.  Used by the save function.\r\n\turl: \"\",\r\n\r\n\t// logResults: [public] boolean\r\n\t//\t\tBoolean flag to indicate that the default action for save and\r\n\t//\t\terror handlers is to just log to console.  Default is true.\r\n\tlogResults: true,\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the save button.\r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"Save\");\r\n\t\tthis.button = new dijit.form.Button({\r\n\t\t\tlabel: strings[\"save\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"Save\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tonClick: dojo.hitch(this, \"_save\")\r\n\t\t});\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t},\r\n\r\n\t_save: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to trigger saving of the editor document\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar content = this.editor.get(\"value\");\r\n\t\tthis.save(content);\r\n\t},\r\n\r\n\tsave: function(content){\r\n\t\t// summary:\r\n\t\t//\t\tUser over-ridable save function for the editor content.\r\n\t\t//\t\tPlease note that the service URL provided should do content\r\n\t\t//\t\tfiltering of the posted content to avoid XSS injection via\r\n\t\t//\t\tthe data from the editor.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\r\n\t\t// Set the default header to post as a body of text/html.\r\n\t\tvar headers = {\r\n\t\t\t\"Content-Type\": \"text/html\"\r\n\t\t};\r\n\t\tif(this.url){\r\n\t\t\tvar postArgs = {\r\n\t\t\t\turl: this.url,\r\n\t\t\t\tpostData: content,\r\n\t\t\t\theaders: headers,\r\n\t\t\t\thandleAs: \"text\"\r\n\t\t\t};\r\n\t\t\tthis.button.set(\"disabled\", true);\r\n\t\t\tvar deferred = dojo.xhrPost(postArgs);\r\n\t\t\tdeferred.addCallback(dojo.hitch(this, this.onSuccess));\r\n\t\t\tdeferred.addErrback(dojo.hitch(this, this.onError));\r\n\t\t}else{\r\n\t\t\tconsole.log(\"No URL provided, no post-back of content: \" + content);\r\n\t\t}\r\n\t},\r\n\r\n\tonSuccess: function(resp, ioargs){\r\n\t\t// summary:\r\n\t\t//\t\tUser over-ridable save success function for editor content.\r\n\t\t//\t\tBe sure to call this.inherited(arguments) if over-riding this method.\r\n\t\t// resp:\r\n\t\t//\t\tThe response from the server, if any, in text format.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\tthis.button.set(\"disabled\", false);\r\n\t\tif(this.logResults){\r\n\t\t\tconsole.log(resp);\r\n\t\t}\r\n\t},\r\n\r\n\tonError: function(error, ioargs){\r\n\t\t// summary:\r\n\t\t//\t\tUser over-ridable save success function for editor content.\r\n\t\t//\t\tBe sure to call this.inherited(arguments) if over-riding this method.\r\n\t\t// resp:\r\n\t\t//\t\tThe response from the server, if any, in text format.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\tthis.button.set(\"disabled\", false);\r\n\t\tif(this.logResults){\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name === \"save\"){\r\n\t\to.plugin = new Save({\r\n\t\t\turl: (\"url\" in o.args)?o.args.url:\"\",\r\n\t\t\tlogResults: (\"logResults\" in o.args)?o.args.logResults:true\r\n\t\t});\r\n\t}\r\n});\r\n\r\nreturn Save;\r\n\r\n});\r\n"]}