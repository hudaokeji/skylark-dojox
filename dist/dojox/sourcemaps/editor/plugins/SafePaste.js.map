{"version":3,"sources":["editor/plugins/SafePaste.js"],"names":["define","dojo","dijit","dojox","PasteFromWord","SafePaste","declare","_initButton","this","_filters","slice","strings","i18n","getLocalization","mixin","_uId","getUniqueId","editor","id","uId","width","height","_dialog","Dialog","title","placeAt","body","set","string","substitute","_template","style","byId","connect","forEach","stripTags","tag","tagName","rxStartTag","RegExp","rxEndTag","push","regexp","handler","updateState","setEditor","onLoadDeferred","addCallback","hitch","spFunc","e","stopEvent","_openDialog","editNode","_pasteImpl","subscribe","_scopeName","o","plugin","args","name","toLowerCase","hasOwnProperty"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,qCACA,eACA,qBACA,qBACA,YACA,cACA,+CACA,6BACA,wCACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhC,IAAIC,EAAYJ,EAAKK,QAAQ,kCAAmCF,IAQ/DG,YAAa,WAKZC,KAAKC,SAAWD,KAAKC,SAASC,MAAM,GACpC,IAAIC,EAAUV,EAAKW,KAAKC,gBAAgB,uBAAwB,aAChEZ,EAAKa,MAAMH,EAASV,EAAKW,KAAKC,gBAAgB,QAAS,WACvDZ,EAAKa,MAAMH,EAASV,EAAKW,KAAKC,gBAAgB,gBAAiB,aAE/DL,KAAKO,KAAOb,EAAMc,YAAYR,KAAKS,OAAOC,IAE1CP,EAAQQ,IAAMX,KAAKO,KACnBJ,EAAQS,MAAQZ,KAAKY,OAAS,QAC9BT,EAAQU,OAASb,KAAKa,QAAU,QAEhCb,KAAKc,QAAU,IAAIpB,EAAMqB,QAAQC,MAAOb,EAAe,QAAIc,QAAQxB,EAAKyB,QACxElB,KAAKc,QAAQK,IAAI,UAAW1B,EAAK2B,OAAOC,WAAWrB,KAAKsB,UAAWnB,IAKnEV,EAAK8B,MAAM9B,EAAK+B,KAAKxB,KAAKO,KAAO,QAAS,UAAW,MAGrDP,KAAKyB,QAAQ/B,EAAM8B,KAAKxB,KAAKO,KAAO,UAAW,UAAW,UAC1DP,KAAKyB,QAAQ/B,EAAM8B,KAAKxB,KAAKO,KAAO,WAAY,UAAW,WAC3DP,KAAKyB,QAAQzB,KAAKc,QAAS,SAAU,gBAIrCrB,EAAKiC,QAAQ1B,KAAK2B,UAAW,SAASC,GACrC,IAAIC,EAAUD,EAAM,GAChBE,EAAa,IAAIC,OAAO,QAAUF,EAAU,SAAU,OACtDG,EAAW,IAAID,OAAO,gBAAkBF,EAAU,QAAS,OAC/D7B,KAAKC,SAASgC,MAAMC,OACnBJ,EACAK,QAAS,KAEVnC,KAAKC,SAASgC,MAAMC,OACnBF,EACAG,QAAS,MAERnC,OAGJoC,YAAa,aASbC,UAAW,SAAS5B,GAKnBT,KAAKS,OAASA,EACdT,KAAKD,cACLC,KAAKS,OAAO6B,eAAeC,YAAY9C,EAAK+C,MAAMxC,KAAM,WACvD,IAAIyC,EAAShD,EAAK+C,MAAMxC,KAAM,SAAS0C,GAKtC,OAJGA,GACFjD,EAAKkD,UAAUD,GAEhB1C,KAAK4C,eACE,IAER5C,KAAKyB,QAAQzB,KAAKS,OAAOoC,SAAU,UAAWJ,GAC9CzC,KAAKS,OAAOqC,WAAaL,QAkB5B,OAZAhD,EAAKsD,UAAUrD,EAAMsD,WAAa,oBAAoB,KAAK,SAASC,GAChEA,EAAEC,QAEO,cADDD,EAAEE,KAAKC,KAAKC,gBAEtBJ,EAAEC,OAAS,IAAIrD,GACde,MAAQqC,EAAEE,KAAKG,eAAe,SAAUL,EAAEE,KAAKvC,MAAM,QACrDC,OAASoC,EAAEE,KAAKG,eAAe,UAAWL,EAAEE,KAAKvC,MAAM,QACvDe,UAAYsB,EAAEE,KAAKG,eAAe,aAAcL,EAAEE,KAAKxB,UAAU,UAK7D9B","file":"../../../editor/plugins/SafePaste.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dojox/editor/plugins/PasteFromWord\",\r\n\t\"dijit/Dialog\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/string\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/SafePaste\",\r\n\t\"dojo/i18n!dijit/nls/common\",\r\n\t\"dojo/i18n!dijit/_editor/nls/commands\"\r\n], function(dojo, dijit, dojox, PasteFromWord) {\r\n\r\nvar SafePaste = dojo.declare(\"dojox.editor.plugins.SafePaste\", [PasteFromWord],{\r\n\t// summary:\r\n\t//\t\tThis plugin extends from the PasteFromWord plugin and provides\r\n\t//\t\t'safe pasting', meaning that it will not allow keyboard/menu pasting\r\n\t//\t\tinto the dijit editor.  It still runs all of the word cleanup code, \r\n\t//\t\tincluding script strippers.  If you use this plugin, you don't need to \r\n\t//\t\tuse the 'PasteFromWord Plugin'\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride the editor paste controls\r\n\r\n\t\t// Create instance local copy.\r\n\t\tthis._filters = this._filters.slice(0); \r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"SafePaste\");\r\n\t\tdojo.mixin(strings, dojo.i18n.getLocalization(\"dijit\", \"common\"));\r\n\t\tdojo.mixin(strings, dojo.i18n.getLocalization(\"dijit._editor\", \"commands\"));\r\n\r\n\t\tthis._uId = dijit.getUniqueId(this.editor.id);\r\n\r\n\t\tstrings.uId = this._uId;\r\n\t\tstrings.width = this.width || \"400px\";\r\n\t\tstrings.height = this.height || \"300px\";\r\n\r\n\t\tthis._dialog = new dijit.Dialog({title: strings[\"paste\"]}).placeAt(dojo.body());\r\n\t\tthis._dialog.set(\"content\", dojo.string.substitute(this._template, strings));\r\n\r\n\t\t// Make it translucent so we can fade in the window when the RTE is created.\r\n\t\t// the RTE has to be created 'visible, and this is a ncie trick to make the creation\r\n\t\t// 'pretty'.\r\n\t\tdojo.style(dojo.byId(this._uId + \"_rte\"), \"opacity\", 0.001);\r\n\r\n\t\t// Link up the action buttons to perform the insert or cleanup.\r\n\t\tthis.connect(dijit.byId(this._uId + \"_paste\"), \"onClick\", \"_paste\");\r\n\t\tthis.connect(dijit.byId(this._uId + \"_cancel\"), \"onClick\", \"_cancel\");\r\n\t\tthis.connect(this._dialog, \"onHide\", \"_clearDialog\");\r\n\t\t\r\n\t\t// Create regular expressions for sripping out user-specified tags and register \r\n\t\t// them with the filters.\r\n\t\tdojo.forEach(this.stripTags, function(tag){\r\n\t\t\tvar tagName = tag + \"\";\r\n\t\t\tvar rxStartTag = new RegExp(\"<\\\\s*\" + tagName + \"[^>]*>\", \"igm\");\r\n\t\t\tvar rxEndTag = new RegExp(\"<\\\\\\\\?\\\\/\\\\s*\" + tagName + \"\\\\s*>\", \"igm\");\r\n\t\t\tthis._filters.push({regexp: \r\n\t\t\t\trxStartTag, \r\n\t\t\t\thandler: \"\"\r\n\t\t\t});\r\n\t\t\tthis._filters.push({regexp: \r\n\t\t\t\trxEndTag, \r\n\t\t\t\thandler: \"\"\r\n\t\t\t});\r\n\t\t}, this);\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrides _Plugin.updateState(). \r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\t\r\n\t\t// Do nothing.\r\n\t},\r\n\t\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t\tthis.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){\r\n\t\t\tvar spFunc = dojo.hitch(this, function(e){\r\n\t\t\t\tif(e){\r\n\t\t\t\t\tdojo.stopEvent(e);\r\n\t\t\t\t}\r\n\t\t\t\tthis._openDialog();\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\tthis.connect(this.editor.editNode, \"onpaste\", spFunc);\r\n\t\t\tthis.editor._pasteImpl = spFunc;\r\n\t\t}));\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name === \"safepaste\"){\r\n\t\to.plugin = new SafePaste({\r\n\t\t\twidth: (o.args.hasOwnProperty(\"width\"))?o.args.width:\"400px\",\r\n\t\t\theight: (o.args.hasOwnProperty(\"height\"))?o.args.width:\"300px\",\r\n\t\t\tstripTags: (o.args.hasOwnProperty(\"stripTags\"))?o.args.stripTags:null \r\n\t\t});\r\n\t}\r\n});\r\n\r\nreturn SafePaste;\r\n\r\n});\r\n"]}