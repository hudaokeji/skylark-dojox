{"version":3,"sources":["editor/plugins/Smiley.js"],"names":["define","dojo","dijit","dojox","_Plugin","experimental","Smiley","declare","iconClassPrefix","emoticonMarker","emoticonImageClass","_initButton","this","dropDown","editor","plugins","_SmileyPalette","connect","ascii","button","closeDropDown","focus","charAt","execCommand","i18n","getLocalization","form","DropDownButton","label","smiley","showLabel","iconClass","tabIndex","emoticonImageRegexp","RegExp","updateState","set","get","setEditor","contentPreFilters","push","hitch","_preFilterEntities","contentPostFilters","_postFilterEntities","isFF","deleteHandler","setTimeout","editNode","style","onLoadDeferred","addCallback","addKeyHandler","keys","DELETE","BACKSPACE","value","replace","_decode","_encode","str","emoticon","Emoticon","fromAscii","imgHtml","search","subscribe","_scopeName","o","plugin","args","name"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,wBACA,4BACA,qBACA,qBACA,YACA,sCACA,oBACA,6CACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhCH,EAAKI,aAAa,+BAElB,IAAIC,EAASL,EAAKM,QAAQ,8BAA+BH,GAWxDI,gBAAiB,4BAOjBC,eAAgB,KAEhBC,mBAAoB,qBAEpBC,YAAa,WACZC,KAAKC,SAAW,IAAIV,EAAMW,OAAOC,QAAQC,eACzCJ,KAAKK,QAAQL,KAAKC,SAAU,WAAY,SAASK,GAChDN,KAAKO,OAAOC,gBACZR,KAAKE,OAAOO,QAEZH,EAAQN,KAAKH,eAAea,OAAO,GAAKJ,EAAQN,KAAKH,eAAea,OAAO,GAC3EV,KAAKE,OAAOS,YAAY,aAAcL,KAEvCN,KAAKY,KAAOvB,EAAKuB,KAAKC,gBAAgB,uBAAwB,UAC9Db,KAAKO,OAAS,IAAIjB,EAAMwB,KAAKC,gBAC5BC,MAAOhB,KAAKY,KAAKK,OACjBC,WAAW,EACXC,UAAWnB,KAAKJ,gBAAkB,IAAMI,KAAKJ,gBAAkB,SAC/DwB,SAAU,KACVnB,SAAUD,KAAKC,WAEhBD,KAAKqB,oBAAsB,IAAIC,OAAO,eAAkBtB,KAAKF,mBAAqB,WAGnFyB,YAAa,WAGZvB,KAAKO,OAAOiB,IAAI,WAAYxB,KAAKyB,IAAI,cAGtCC,UAAW,SAASxB,GAUnB,GALAF,KAAKE,OAASA,EACdF,KAAKD,cACLC,KAAKE,OAAOyB,kBAAkBC,KAAKvC,EAAKwC,MAAM7B,KAAMA,KAAK8B,qBACzD9B,KAAKE,OAAO6B,mBAAmBH,KAAKvC,EAAKwC,MAAM7B,KAAMA,KAAKgC,sBAEvD3C,EAAK4C,KAAK,CAIZ,IAAIC,EAAgB7C,EAAKwC,MAAM7B,KAAM,WACpC,IAAIE,EAASF,KAAKE,OAWlB,OARAiC,WAAW,WACPjC,EAAOkC,WACT/C,EAAKgD,MAAMnC,EAAOkC,SAAU,UAAW,QAGvCD,WAAW,WAAcjC,EAAOkC,UAAY/C,EAAKgD,MAAMnC,EAAOkC,SAAU,UAAW,KAAS,KAE3F,IACI,IAERpC,KAAKE,OAAOoC,eAAeC,YAAYlD,EAAKwC,MAAM7B,KAAM,WACvDA,KAAKE,OAAOsC,cAAcnD,EAAKoD,KAAKC,QAAQ,GAAO,EAAOR,GAC1DlC,KAAKE,OAAOsC,cAAcnD,EAAKoD,KAAKE,WAAW,GAAO,EAAOT,QAKhEJ,mBAAoB,SAAoBc,GAUvC,OAAOA,EAAMC,QAAQ,gBAAiBxD,EAAKwC,MAAM7B,KAAMA,KAAK8C,WAG7Dd,oBAAqB,SAAoBY,GASxC,OAAOA,EAAMC,QAAQ,gBAAiBxD,EAAKwC,MAAM7B,KAAMA,KAAK+C,WAG7DD,QAAS,SAASE,EAAK1C,GAGtB,IAAI2C,EAAW1D,EAAMW,OAAOC,QAAQ+C,SAASC,UAAU7C,GACvD,OAAO2C,EAAWA,EAASG,QAAQpD,KAAKF,oBAAsBkD,GAG/DD,QAAS,SAASC,GAMjB,OAAGA,EAAIK,OAAOrD,KAAKqB,sBAAwB,EACnCrB,KAAKH,eAAea,OAAO,GAAKsC,EAAIH,QAAQ,oCAAqC,MAAQ7C,KAAKH,eAAea,OAAO,GAGpHsC,KAaV,OAPA3D,EAAKiE,UAAUhE,EAAMiE,WAAa,oBAAoB,KAAK,SAASC,GAChEA,EAAEC,QACc,WAAhBD,EAAEE,KAAKC,OACTH,EAAEC,OAAS,IAAI/D,KAIVA","file":"../../../editor/plugins/Smiley.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/DropDownButton\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojox/editor/plugins/_SmileyPalette\",\r\n\t\"dojox/html/format\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/Smiley\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\ndojo.experimental(\"dojox.editor.plugins.Smiley\");\r\n\r\nvar Smiley = dojo.declare(\"dojox.editor.plugins.Smiley\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin allows the user to select from emoticons or \"smileys\"\r\n\t//\t\tto insert at the current cursor position.\r\n\t// description:\r\n\t//\t\tThe commands provided by this plugin are:\r\n\t//\r\n\t//\t\t- smiley - inserts the selected emoticon\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix` and `command`\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t// emoticonMarker:\r\n\t//\t\ta marker for emoticon wrap like [:-)] for regexp convienent\r\n\t//\t\twhen a message which contains an emoticon stored in a database or view source, this marker include also\r\n\t//\t\tbut when user enter an emoticon by key board, user don't need to enter this marker.\r\n\t//\t\talso emoticon definition character set can not contains this marker\r\n\temoticonMarker: '[]',\r\n\r\n\temoticonImageClass: 'dojoEditorEmoticon',\r\n\r\n\t_initButton: function(){\r\n\t\tthis.dropDown = new dojox.editor.plugins._SmileyPalette();\r\n\t\tthis.connect(this.dropDown, \"onChange\", function(ascii){\r\n\t\t\tthis.button.closeDropDown();\r\n\t\t\tthis.editor.focus();\r\n\t\t\t//\r\n\t\t\tascii = this.emoticonMarker.charAt(0) + ascii + this.emoticonMarker.charAt(1);\r\n\t\t\tthis.editor.execCommand(\"inserthtml\", ascii);\r\n\t\t});\r\n\t\tthis.i18n = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"Smiley\");\r\n\t\tthis.button = new dijit.form.DropDownButton({\r\n\t\t\tlabel: this.i18n.smiley,\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"Smiley\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tdropDown: this.dropDown\r\n\t\t});\r\n\t\tthis.emoticonImageRegexp = new RegExp(\"class=(\\\"|\\')\" + this.emoticonImageClass + \"(\\\"|\\')\");\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t\tthis.editor.contentPreFilters.push(dojo.hitch(this, this._preFilterEntities));\r\n\t\tthis.editor.contentPostFilters.push(dojo.hitch(this, this._postFilterEntities));\r\n\t\t\r\n\t\tif(dojo.isFF){\r\n\t\t\t// This is a workaround for a really odd Firefox bug with\r\n\t\t\t// leaving behind phantom cursors when deleting smiley images.\r\n\t\t\t// See: #13299\r\n\t\t\tvar deleteHandler = dojo.hitch(this, function(){\r\n\t\t\t\tvar editor = this.editor;\r\n\t\t\t\t// have to use timers here because the event has to happen\r\n\t\t\t\t// (bubble), then we can poke the dom.\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\tif(editor.editNode){\r\n\t\t\t\t\t\tdojo.style(editor.editNode, \"opacity\", \"0.99\");\r\n\t\t\t\t\t\t// Allow it to apply, then undo it to trigger cleanup of those\r\n\t\t\t\t\t\t// phantoms.\r\n\t\t\t\t\t\tsetTimeout(function(){if(editor.editNode) { dojo.style(editor.editNode, \"opacity\", \"\");} }, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 0);\r\n\t\t\t\treturn true;\r\n\t\t\t})\r\n\t\t\tthis.editor.onLoadDeferred.addCallback(dojo.hitch(this, function(){\r\n\t\t\t\tthis.editor.addKeyHandler(dojo.keys.DELETE, false, false, deleteHandler);\r\n\t\t\t\tthis.editor.addKeyHandler(dojo.keys.BACKSPACE, false, false, deleteHandler);\r\n\t\t\t}));\r\n\t\t}\r\n\t},\r\n\r\n\t_preFilterEntities: function(/*String*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tA function to filter out emoticons into their UTF-8 character form\r\n\t\t//\t\tdisplayed in the editor.  It gets registered with the preFilters\r\n\t\t//\t\tof the editor.\r\n\t\t// value: String\r\n\t\t//\t\tcontent passed in\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\r\n\t\treturn value.replace(/\\[([^\\]]*)\\]/g, dojo.hitch(this, this._decode));\r\n\t},\r\n\r\n\t_postFilterEntities: function(/*String*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tA function to filter out emoticons into encoded form so they\r\n\t\t//\t\tare properly displayed in the editor.  It gets registered with the\r\n\t\t//\t\tpostFilters of the editor.\r\n\t\t// value: String\r\n\t\t//\t\tcontent passed in\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\t\treturn value.replace(/<img [^>]*>/gi, dojo.hitch(this, this._encode));\r\n\t},\r\n\r\n\t_decode: function(str, ascii){\r\n\t\t// summary:\r\n\t\t//\t\tPre-filter for editor to convert strings like [:-)] into an `<img>` of the corresponding smiley\r\n\t\tvar emoticon = dojox.editor.plugins.Emoticon.fromAscii(ascii);\r\n\t\treturn emoticon ? emoticon.imgHtml(this.emoticonImageClass) : str;\r\n\t},\r\n\r\n\t_encode: function(str){\r\n\t\t// summary:\r\n\t\t//\t\tPost-filter for editor to convert `<img>` nodes of smileys into strings like [:-)]\r\n\t\t\r\n\t\t// Each <img> node has an alt tag with it's ascii representation, so just use that.\r\n\t\t// TODO: wouldn't this be easier as a postDomFilter ?\r\n\t\tif(str.search(this.emoticonImageRegexp) > -1){\r\n\t\t\treturn this.emoticonMarker.charAt(0) + str.replace(/(<img [^>]*)alt=\"([^\"]*)\"([^>]*>)/, \"$2\") + this.emoticonMarker.charAt(1);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn str;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tif(o.args.name === \"smiley\"){\r\n\t\to.plugin = new Smiley();\r\n\t}\r\n});\r\n\r\nreturn Smiley;\r\n\r\n});\r\n"]}