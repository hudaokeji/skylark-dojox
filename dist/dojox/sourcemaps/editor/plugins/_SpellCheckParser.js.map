{"version":3,"sources":["editor/plugins/_SpellCheckParser.js"],"names":["define","dojo","dojox","SpellCheckParser","declare","lang","parseIntoWords","text","isCharExt","c","ch","charCodeAt","words","this","indices","index","length","start","charAt","push","substring","getIndices","subscribe","dijit","_scopeName","sp","parser"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,qBACA,sBACE,SAASC,EAAMC,GAElB,IAAIC,EAAmBF,EAAKG,QAAQ,yCAA0C,MAC7EC,KAAM,UAENC,eAAgB,SAAoBC,GASnC,SAASC,EAAUC,GAClB,IAAIC,EAAKD,EAAEE,WAAW,GACtB,OAAO,IAAMD,GAAMA,GAAM,IAAM,IAAMA,GAAMA,GAAM,IAAM,IAAMA,GAAMA,GAAM,IAQ1E,IANA,IAAIE,EAAQC,KAAKD,SAChBE,EAAUD,KAAKC,WACfC,EAAQ,EACRC,EAAST,GAAQA,EAAKS,OACtBC,EAAQ,EAEHF,EAAQC,GAAO,CAGpB,IAFA,IAAIN,EAEEK,EAAQC,IAAWR,EAAUE,EAAKH,EAAKW,OAAOH,KAAiB,KAANL,GAAYK,IAC3E,GAAS,KAANL,EACF,OAAQK,EAAQC,GAAuC,MAA5BN,EAAKH,EAAKW,OAAOH,KAAkBP,EAAUE,SACpE,CAEJ,IADAO,EAAQF,IACAA,EAAQC,GAAUR,EAAUD,EAAKW,OAAOH,MAC7CE,EAAQD,IACVJ,EAAMO,KAAKZ,EAAKa,UAAUH,EAAOF,IACjCD,EAAQK,KAAKF,KAKhB,OAAOL,GAGRS,WAAY,WAOX,OAAOR,KAAKC,WAUd,OALAb,EAAKqB,UAAUC,MAAMC,WAAa,sCAAuC,KAAM,SAASC,GACpFA,EAAGC,SACND,EAAGC,OAAS,IAAIvB,KAGVA","file":"../../../editor/plugins/_SpellCheckParser.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dojox\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\"\r\n], function(dojo, dojox) {\r\n\r\nvar SpellCheckParser = dojo.declare(\"dojox.editor.plugins._SpellCheckParser\", null, {\r\n\tlang: \"english\",\r\n\t\r\n\tparseIntoWords: function(/*String*/ text){\r\n\t\t// summary:\r\n\t\t//\t\tParse the text into words\r\n\t\t// text:\r\n\t\t//\t\tPlain text without html tags\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// returns:\r\n\t\t//\t\tArray holding all the words\r\n\t\tfunction isCharExt(c){\r\n\t\t\tvar ch = c.charCodeAt(0);\r\n\t\t\treturn 48 <= ch && ch <= 57 || 65 <= ch && ch <= 90 || 97 <= ch && ch <= 122;\r\n\t\t}\r\n\t\tvar words = this.words = [],\r\n\t\t\tindices = this.indices = [],\r\n\t\t\tindex = 0,\r\n\t\t\tlength = text && text.length,\r\n\t\t\tstart = 0;\r\n\t\t\r\n\t\twhile(index < length){\r\n\t\t\tvar ch;\r\n\t\t\t// Skip the white character and need to treat HTML entity respectively\r\n\t\t\twhile(index < length && !isCharExt(ch = text.charAt(index)) && ch != \"&\"){ index++; }\r\n\t\t\tif(ch == \"&\"){ // An HTML entity, skip it\r\n\t\t\t\twhile(++index < length && (ch = text.charAt(index)) != \";\" && isCharExt(ch)){}\r\n\t\t\t}else{ // A word\r\n\t\t\t\tstart = index;\r\n\t\t\t\twhile(++index < length && isCharExt(text.charAt(index))){}\r\n\t\t\t\tif(start < length){\r\n\t\t\t\t\twords.push(text.substring(start, index));\r\n\t\t\t\t\tindices.push(start);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn words;\r\n\t},\r\n\t\r\n\tgetIndices: function(){\r\n\t\t// summary:\r\n\t\t//\t\tGet the indices of the words. They are in one-to-one correspondence\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// returns:\r\n\t\t//\t\tIndex array\r\n\t\treturn this.indices;\r\n\t}\r\n});\r\n\r\n// Register this parser in the SpellCheck plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.plugin.SpellCheck.getParser\", null, function(sp){\r\n\tif(sp.parser){ return; }\r\n\tsp.parser = new SpellCheckParser();\r\n});\r\n\r\nreturn SpellCheckParser;\r\n\r\n});"]}