{"version":3,"sources":["editor/plugins/TextColor.js"],"names":["define","dojo","dijit","dojox","popup","_Widget","_TemplatedMixin","_WidgetsInTemplateMixin","_Plugin","experimental","TextColorDropDown","declare","templateString","widgetsInTemplate","constructor","strings","i18n","getLocalization","mixin","this","startup","_started","inherited","arguments","connect","_setButton","hitch","onChange","get","_cancelButton","close","dialog","onCancel","style","domNode","_setValueAttr","value","priorityChange","_colorPicker","set","_getValueAttr","TextColor","buttonClass","form","DropDownButton","useDefaultCommand","_picker","body","appendChild","dropDown","color","editor","execCommand","command","focus","updateState","_e","_c","isLoaded","length","disabled","button","queryCommandValue","e","indexOf","colorFromRgb","toHex","toString","slice","destroy","destroyRecursive","_TextColorDropDown","subscribe","_scopeName","o","plugin","args","name"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,oBACA,gBACA,wBACA,gCACA,wBACA,sBACA,oBACA,4BACA,2BACA,qBACA,qBACA,YACA,gDACE,SAASC,EAAMC,EAAOC,EAAOC,EAAOC,EAASC,EAAiBC,EAAyBC,GAE1FP,EAAKQ,aAAa,kCAElB,IAAIC,EAAoBT,EAAKU,QAAQ,2CAA4CN,EAASC,EAAiBC,IAS1GK,eAAgB,yfAchBC,mBAAmB,EAEnBC,YAAa,WAIZ,IAAIC,EAAUd,EAAKe,KAAKC,gBAAgB,uBAAwB,aAChEhB,EAAKiB,MAAMC,KAAMJ,IAGlBK,QAAS,WAGJD,KAAKE,WACRF,KAAKG,UAAUC,WACfJ,KAAKK,QAAQL,KAAKM,WAAY,UAAWxB,EAAKyB,MAAMP,KAAM,WACzDA,KAAKQ,SAASR,KAAKS,IAAI,aAExBT,KAAKK,QAAQL,KAAKU,cAAe,UAAW5B,EAAKyB,MAAMP,KAAM,WAC5DjB,EAAME,MAAM0B,MAAMX,KAAKY,QACvBZ,KAAKa,cAGN/B,EAAKgC,MAAMd,KAAKe,QAAS,UAAW,WAItCC,cAAe,SAASC,EAAOC,GAO9BlB,KAAKmB,aAAaC,IAAI,QAASH,EAAOC,IAGvCG,cAAe,WAGd,OAAOrB,KAAKmB,aAAaV,IAAI,UAG9BD,SAAU,SAASS,KAOnBJ,SAAU,eAOPS,EAAYxC,EAAKU,QAAQ,iCAAkCH,GAY9DkC,YAAaxC,EAAMyC,KAAKC,eAGxBC,mBAAmB,EAEnB/B,YAAa,WACZK,KAAK2B,QAAU,IAAIpC,EACnBT,EAAK8C,OAAOC,YAAY7B,KAAK2B,QAAQZ,SACrCf,KAAK2B,QAAQ1B,UACbD,KAAK8B,SAAW9B,KAAK2B,QAAQf,OAC7BZ,KAAKK,QAAQL,KAAK2B,QAAS,WAAY,SAASI,GAC/C/B,KAAKgC,OAAOC,YAAYjC,KAAKkC,QAASH,KAEvC/B,KAAKK,QAAQL,KAAK2B,QAAS,WAAY,WACtC3B,KAAKgC,OAAOG,WAIdC,YAAa,WAMZ,IAAIC,EAAKrC,KAAKgC,OACVM,EAAKtC,KAAKkC,QACd,GAAIG,GAAOA,EAAGE,UAAaD,EAAGE,OAA9B,CAIA,IAEIvB,EAFAwB,EAAWzC,KAAKS,IAAI,YAGxB,GAAGT,KAAK0C,OAAO,CAEd,GADA1C,KAAK0C,OAAOtB,IAAI,WAAYqB,GACzBA,EACF,OAED,IACCxB,EAAQoB,EAAGM,kBAAkBL,IAAM,GACnC,MAAMM,GAEN3B,EAAQ,IAIE,IAATA,IACFA,EAAQ,WAEG,eAATA,IACFA,EAAQ,WAGU,iBAATA,EAENA,EAAM4B,QAAQ,QAAS,IACzB5B,EAAQnC,EAAKgE,aAAa7B,GAAO8B,UAIlC9B,GADAA,GAAiB,IAARA,IAAoB,GAAa,MAARA,GAA4B,SAARA,KAAqB,IAC7D+B,SAAS,IACvB/B,EAAQ,UAAUgC,MAAM,EAAG,EAAIhC,EAAMuB,QAASvB,GAI5CA,IAAUjB,KAAK2B,QAAQlB,IAAI,UAC7BT,KAAK2B,QAAQP,IAAI,QAASH,GAAO,KAInCiC,QAAS,WAGRlD,KAAKG,UAAUC,WACfJ,KAAK2B,QAAQwB,0BACNnD,KAAK2B,WAsBd,OAjBAL,EAAU8B,mBAAqB7D,EAI/BT,EAAKuE,UAAUtE,EAAMuE,WAAa,oBAAqB,KAAM,SAASC,GACrE,IAAGA,EAAEC,OAGL,OAAOD,EAAEE,KAAKC,MACb,IAAK,YACL,IAAK,cACJH,EAAEC,OAAS,IAAIlC,GACdY,QAASqB,EAAEE,KAAKC,UAKbpC","file":"../../../editor/plugins/TextColor.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_base/popup\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"dijit/_WidgetsInTemplateMixin\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/TooltipDialog\",\r\n\t\"dijit/form/Button\",\r\n\t\"dijit/form/DropDownButton\",\r\n\t\"dojox/widget/ColorPicker\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/TextColor\"\r\n], function(dojo, dijit, dojox, popup, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin, _Plugin) {\r\n\r\ndojo.experimental(\"dojox.editor.plugins.TextColor\");\r\n\r\nvar TextColorDropDown = dojo.declare(\"dojox.editor.plugins._TextColorDropDown\", [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n\t// summary:\r\n\t//\t\tA sample widget that uses/creates a dropdown with a dojox.widget.ColorPicker.  Also provides\r\n\t//\t\tpassthroughs to the value of the color picker and convenient hook points.\r\n\t// tags:\r\n\t//\t\tprivate\r\n\r\n\t// templateString: String\r\n\t//\t\tThe template used to create the ColorPicker.\r\n\ttemplateString: \"<div style='display: none; position: absolute; top: -10000; z-index: -10000'>\" +\r\n\t\t\"<div dojoType='dijit.TooltipDialog' dojoAttachPoint='dialog' class='dojoxEditorColorPicker'>\" +\r\n\t\t\t\"<div dojoType='dojox.widget.ColorPicker' dojoAttachPoint='_colorPicker'></div>\" +\r\n\t\t\t\"<br>\" +\r\n\t\t\t\"<center>\" +\r\n\t\t\t\t\"<button dojoType='dijit.form.Button' type='button' dojoAttachPoint='_setButton'>${setButtonText}</button>\" +\r\n\t\t\t\t\"&nbsp;\" +\r\n\t\t\t\t\"<button dojoType='dijit.form.Button' type='button' dojoAttachPoint='_cancelButton'>${cancelButtonText}</button>\" +\r\n\t\t\t\"</center>\" +\r\n\t\t\"</div>\" +\r\n\t\t\"</div>\",\r\n\r\n\t// widgetsInTemplate: Boolean\r\n\t//\t\tFlag denoting widgets are contained in the template.\r\n\twidgetsInTemplate: true,\r\n\r\n\tconstructor: function(){\r\n\t\t// summary:\r\n\t\t//\t\tConstructor over-ride so that the translated strings are mixsed in so\r\n\t\t//\t\tthe template fills out.\r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"TextColor\");\r\n\t\tdojo.mixin(this, strings);\r\n\t},\r\n\r\n\tstartup: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride of startup to do the basic connect setups and such.\r\n\t\tif(!this._started){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.connect(this._setButton, \"onClick\", dojo.hitch(this, function(){\r\n\t\t\t\tthis.onChange(this.get(\"value\"));\r\n\t\t\t}));\r\n\t\t\tthis.connect(this._cancelButton, \"onClick\", dojo.hitch(this, function(){\r\n\t\t\t\tdijit.popup.close(this.dialog);\r\n\t\t\t\tthis.onCancel();\r\n\t\t\t}));\r\n\t\t\t// Fully statred, so go ahead and remove the hide.\r\n\t\t\tdojo.style(this.domNode, \"display\", \"block\");\r\n\t\t}\r\n\t},\r\n\r\n\t_setValueAttr: function(value, priorityChange){\r\n\t\t// summary:\r\n\t\t//\t\tPassthrough function for the color picker value.\r\n\t\t// value: String\r\n\t\t//\t\tThe value to set in the color picker\r\n\t\t// priorityChange:\r\n\t\t//\t\tValue to indicate whether or not to trigger an onChange event.\r\n\t\tthis._colorPicker.set(\"value\", value, priorityChange);\r\n\t},\r\n\r\n\t_getValueAttr: function(){\r\n\t\t// summary:\r\n\t\t//\t\tPassthrough function for the color picker value.\r\n\t\treturn this._colorPicker.get(\"value\");\r\n\t},\r\n\r\n\tonChange: function(value){\r\n\t\t// summary:\r\n\t\t//\t\tHook point to get the value when the color picker value is selected.\r\n\t\t// value: String\r\n\t\t//\t\tThe value from the color picker.\r\n\t},\r\n\r\n\tonCancel: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHook point to get when the dialog is canceled.\r\n\t}\r\n});\r\n\r\n\r\nvar TextColor = dojo.declare(\"dojox.editor.plugins.TextColor\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides dropdown color pickers for setting text color and background color\r\n\t//\t\tand makes use of the nicer-looking (though not entirely accessible), dojox.widget.ColorPicker.\r\n\t//\r\n\t// description:\r\n\t//\t\tThe commands provided by this plugin are:\r\n\t//\r\n\t//\t\t- foreColor - sets the text color\r\n\t//\t\t- hiliteColor - sets the background color\r\n\t\r\n\t// Override _Plugin.buttonClass to use DropDownButton (with ColorPalette) to control this plugin\r\n\tbuttonClass: dijit.form.DropDownButton,\r\n\t\r\n\t// False as we do not use the default editor command/click behavior.\r\n\tuseDefaultCommand: false,\r\n\r\n\tconstructor: function(){\r\n\t\tthis._picker = new TextColorDropDown();\r\n\t\tdojo.body().appendChild(this._picker.domNode);\r\n\t\tthis._picker.startup();\r\n\t\tthis.dropDown = this._picker.dialog;\r\n\t\tthis.connect(this._picker, \"onChange\", function(color){\r\n\t\t\tthis.editor.execCommand(this.command, color);\r\n\t\t});\r\n\t\tthis.connect(this._picker, \"onCancel\", function(){\r\n\t\t\tthis.editor.focus();\r\n\t\t});\r\n\t},\r\n\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrides _Plugin.updateState().  This updates the ColorPalette\r\n\t\t//\t\tto show the color of the currently selected text.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\tvar _e = this.editor;\r\n\t\tvar _c = this.command;\r\n\t\tif(!_e || !_e.isLoaded || !_c.length){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar disabled = this.get(\"disabled\");\r\n\t\t\r\n\t\tvar value;\r\n\t\tif(this.button){\r\n\t\t\tthis.button.set(\"disabled\", disabled);\r\n\t\t\tif(disabled){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\ttry{\r\n\t\t\t\tvalue = _e.queryCommandValue(_c)|| \"\";\r\n\t\t\t}catch(e){\r\n\t\t\t\t//Firefox may throw error above if the editor is just loaded, ignore it\r\n\t\t\t\tvalue = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(value == \"\"){\r\n\t\t\tvalue = \"#000000\";\r\n\t\t}\r\n\t\tif(value == \"transparent\"){\r\n\t\t\tvalue = \"#ffffff\";\r\n\t\t}\r\n\r\n\t\tif(typeof value == \"string\"){\r\n\t\t\t//if RGB value, convert to hex value\r\n\t\t\tif(value.indexOf(\"rgb\")> -1){\r\n\t\t\t\tvalue = dojo.colorFromRgb(value).toHex();\r\n\t\t\t}\r\n\t\t}else{\t//it's an integer(IE returns an MS access #)\r\n\t\t\tvalue =((value & 0x0000ff)<< 16)|(value & 0x00ff00)|((value & 0xff0000)>>> 16);\r\n\t\t\tvalue = value.toString(16);\r\n\t\t\tvalue = \"#000000\".slice(0, 7 - value.length)+ value;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(value !== this._picker.get('value')){\r\n\t\t\tthis._picker.set('value', value, false);\r\n\t\t}\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride cleanup function.\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._picker.destroyRecursive();\r\n\t\tdelete this._picker;\r\n\t}\r\n});\r\n\r\n// For monkey-patching\r\nTextColor._TextColorDropDown = TextColorDropDown;\r\n\r\n// Register this plugin.  Uses the same name as the dijit one, so you\r\n// use one or the other, not both.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\", null, function(o){\r\n\tif(o.plugin){\r\n\t\treturn;\r\n\t}\r\n\tswitch(o.args.name){\r\n\t\tcase \"foreColor\":\r\n\t\tcase \"hiliteColor\":\r\n\t\t\to.plugin = new TextColor({\r\n\t\t\t\tcommand: o.args.name\r\n\t\t\t});\r\n\t}\r\n});\r\n\r\nreturn TextColor;\r\n\r\n});\r\n"]}