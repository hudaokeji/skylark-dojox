{"version":3,"sources":["editor/plugins/InsertEntity.js"],"names":["define","dojo","dijit","dojox","_Plugin","InsertEntity","declare","iconClassPrefix","_initButton","this","dropDown","editor","plugins","EntityPalette","showCode","showEntityName","connect","entity","button","closeDropDown","focus","execCommand","strings","i18n","getLocalization","form","DropDownButton","label","showLabel","iconClass","tabIndex","updateState","set","get","setEditor","addKeyHandler","hitch","openDropDown","contentPreFilters","push","_preFilterEntities","contentPostFilters","_postFilterEntities","s","html","entities","decode","latin","encode","subscribe","_scopeName","o","plugin","args","name","toLowerCase"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,wBACA,sBACA,4BACA,qBACA,qBACA,YACA,sBACA,qCACA,mDACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhC,IAAIC,EAAeJ,EAAKK,QAAQ,oCAAqCF,GAapEG,gBAAiB,4BAEjBC,YAAa,WAGZC,KAAKC,SAAW,IAAIP,EAAMQ,OAAOC,QAAQC,eAAeC,SAAUL,KAAKK,SAAUC,eAAgBN,KAAKM,iBACtGN,KAAKO,QAAQP,KAAKC,SAAU,WAAY,SAASO,GAChDR,KAAKS,OAAOC,gBACZV,KAAKE,OAAOS,QACZX,KAAKE,OAAOU,YAAY,aAAaJ,KAEtC,IAAIK,EAAUrB,EAAKsB,KAAKC,gBAAgB,uBAAwB,gBAChEf,KAAKS,OAAS,IAAIhB,EAAMuB,KAAKC,gBAC5BC,MAAOL,EAAsB,aAC7BM,WAAW,EACXC,UAAWpB,KAAKF,gBAAkB,IAAME,KAAKF,gBAAkB,eAC/DuB,SAAU,KACVpB,SAAUD,KAAKC,YAIjBqB,YAAa,WAGZtB,KAAKS,OAAOc,IAAI,WAAYvB,KAAKwB,IAAI,cAGtCC,UAAW,SAASvB,GAKnBF,KAAKE,OAASA,EACdF,KAAKD,cAELC,KAAKE,OAAOwB,cAAc,KAAK,GAAM,EAAMlC,EAAKmC,MAAM3B,KAAM,WAC3DA,KAAKS,OAAOmB,eACZ5B,KAAKC,SAASU,WAGfT,EAAO2B,kBAAkBC,KAAK9B,KAAK+B,oBACnC7B,EAAO8B,mBAAmBF,KAAK9B,KAAKiC,sBAGrCF,mBAAoB,SAASG,GAO5B,OAAOxC,EAAMyC,KAAKC,SAASC,OAAOH,EAAGxC,EAAMyC,KAAKC,SAASE,QAG1DL,oBAAqB,SAASC,GAO7B,OAAOxC,EAAMyC,KAAKC,SAASG,OAAOL,EAAGxC,EAAMyC,KAAKC,SAASE,UAgB3D,OAXA9C,EAAKgD,UAAU/C,EAAMgD,WAAa,oBAAoB,KAAK,SAASC,GAChEA,EAAEC,QAEO,kBADDD,EAAEE,KAAKC,KAAMH,EAAEE,KAAKC,KAAKC,cAAgB,MAEnDJ,EAAEC,OAAS,IAAI/C,GACdS,SAAW,aAAcqC,EAAEE,MAAMF,EAAEE,KAAKvC,SACxCC,eAAiB,mBAAoBoC,EAAEE,MAAMF,EAAEE,KAAKtC,oBAKhDV","file":"../../../editor/plugins/InsertEntity.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/TooltipDialog\",\r\n\t\"dijit/form/DropDownButton\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojox/html/entities\",\r\n\t\"dojox/editor/plugins/EntityPalette\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/InsertEntity\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\nvar InsertEntity = dojo.declare(\"dojox.editor.plugins.InsertEntity\", _Plugin,{\r\n\t// summary:\r\n\t//\t\tThis plugin allows the user to select from standard Symbols (HTML Entities)\r\n\t//\t\tto insert at the current cursor position.  It binds to the key pattern:\r\n\t//\t\tctrl-shift-s for opening the insert symbol dropdown.\r\n\t//\r\n\t// description:\r\n\t//\t\tThe commands provided by this plugin are:\r\n\t//\r\n\t//\t\t- insertEntity - inserts the selected HTML entity character\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix` and `command`\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the save button.\r\n\t\tthis.dropDown = new dojox.editor.plugins.EntityPalette({showCode: this.showCode, showEntityName: this.showEntityName});\r\n\t\tthis.connect(this.dropDown, \"onChange\", function(entity){\r\n\t\t\tthis.button.closeDropDown();\r\n\t\t\tthis.editor.focus();\r\n\t\t\tthis.editor.execCommand(\"inserthtml\",entity);\r\n\t\t});\r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"InsertEntity\");\r\n\t\tthis.button = new dijit.form.DropDownButton({\r\n\t\t\tlabel: strings[\"insertEntity\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"InsertEntity\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tdropDown: this.dropDown\r\n\t\t});\r\n\t},\r\n\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\r\n\t\tthis.editor.addKeyHandler(\"s\", true, true, dojo.hitch(this, function(){\r\n\t\t\tthis.button.openDropDown();\r\n\t\t\tthis.dropDown.focus();\r\n\t\t}));\r\n\r\n\t\teditor.contentPreFilters.push(this._preFilterEntities);\r\n\t\teditor.contentPostFilters.push(this._postFilterEntities);\r\n\t},\r\n\r\n\t_preFilterEntities: function(s/*String content passed in*/){\r\n\t\t// summary:\r\n\t\t//\t\tA function to filter out entity characters into their UTF-8 character form\r\n\t\t//\t\tdisplayed in the editor.  It gets registered with the preFilters\r\n\t\t//\t\tof the editor.\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\t\treturn dojox.html.entities.decode(s, dojox.html.entities.latin);\r\n\t},\r\n\r\n\t_postFilterEntities: function(s/*String content passed in*/){\r\n\t\t// summary:\r\n\t\t//\t\tA function to filter out entity characters into encoded form so they\r\n\t\t//\t\tare properly displayed in the editor.  It gets registered with the\r\n\t\t//\t\tpostFilters of the editor.\r\n\t\t// tags:\r\n\t\t//\t\tprivate.\r\n\t\treturn dojox.html.entities.encode(s, dojox.html.entities.latin);\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name? o.args.name.toLowerCase() : \"\";\r\n\tif(name === \"insertentity\"){\r\n\t\to.plugin = new InsertEntity({\r\n\t\t\tshowCode: (\"showCode\" in o.args)?o.args.showCode:false,\r\n\t\t\tshowEntityName: (\"showEntityName\" in o.args)?o.args.showEntityName:false\r\n\t\t});\r\n\t}\r\n});\r\n\r\nreturn InsertEntity;\r\n});\r\n"]}