{"version":3,"sources":["editor/plugins/_SmileyPalette.js"],"names":["define","dojo","dijit","dojox","_Widget","_TemplatedMixin","_PaletteMixin","experimental","Emoticon","declare","constructor","id","this","getValue","ascii","imgHtml","clazz","eId","substr","toUpperCase","src","moduleUrl","label","i18n","getLocalization","join","fillCell","cell","blankGif","place","smile","laughing","wink","grin","cool","angry","half","eyebrow","frown","shy","goofy","oops","tongue","idea","yes","no","angel","crying","happy","fromAscii","str","i","SmileyPalette","templateString","baseClass","_palette","dyeClass","buildRendering","inherited","arguments","emoticonI18n","name","toLowerCase","_preparePalette"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,gBACA,wBACA,sBACA,qBACA,qBACA,YACA,6CACE,SAASC,EAAMC,EAAOC,EAAOC,EAASC,EAAiBC,GAEzDL,EAAKM,aAAa,uCAElB,IAAIC,EAAWP,EAAKQ,QAAQ,gCAC3B,MAKCC,YAAa,SAAoBC,GAKhCC,KAAKD,GAAKA,GAGXE,SAAU,WAGT,OAAOL,EAASM,MAAMF,KAAKD,KAG5BI,QAAS,SAAoBC,GAG5B,IAAIC,EAAM,WAAaL,KAAKD,GAAGO,OAAO,EAAE,GAAGC,cAAgBP,KAAKD,GAAGO,OAAO,GACzEE,EAAMnB,EAAKoB,UAAU,uBAAwB,uBAAyBJ,EAAM,QAC5EK,EAAQrB,EAAKsB,KAAKC,gBAAgB,uBAAwB,UAAUP,GAUrE,OATU,aACRG,EACA,YACAJ,EACA,UACAJ,KAAKC,WACL,YACAS,EACA,MACUG,KAAK,KAGlBC,SAAU,SAAoBC,EAAiBC,GAC9C3B,EAAK4B,MAAMjB,KAAKG,QAAQ,mBAAoBY,MAI/CnB,EAASM,OACRgB,MAAO,MACPC,SAAU,MACVC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,MAAO,MACPC,KAAM,MACNC,QAAS,MACTC,MAAO,MACPC,IAAK,MACLC,MAAO,MACPC,KAAM,MACNC,OAAQ,MACRC,KAAM,MACNC,IAAK,MACLC,GAAI,MACJC,MAAO,OACPC,OAAQ,MACRC,MAAO,MAGRxC,EAASyC,UAAY,SAAmBC,GAGvC,IAAIpC,EAAQN,EAASM,MACrB,IAAI,IAAIqC,KAAKrC,EACZ,GAAGoC,GAAOpC,EAAMqC,GACf,OAAO,IAAI3C,EAAS2C,GAGtB,OAAO,MAGR,IAAIC,EAAgBnD,EAAKQ,QAAQ,uCAAwCL,EAASC,EAAiBC,IASlG+C,eACC,uJAGDC,UAAW,2BAEXC,WACE,QAAS,WAAY,OAAQ,SAC7B,OAAQ,QAAS,OAAQ,YACzB,QAAS,MAAO,QAAS,SACzB,SAAU,OAAQ,QAAS,UAC3B,MAAO,KAAM,SAAU,KAGzBC,SAAUhD,EAEViD,eAAgB,WAGf7C,KAAK8C,UAAUC,WAEf,IAAIpC,EAAOtB,EAAKsB,KAAKC,gBAAgB,uBAAwB,UAGzDoC,KACJ,IAAI,IAAIC,KAAQtC,EACQ,YAApBsC,EAAK3C,OAAO,EAAE,KAChB0C,EAAaC,EAAK3C,OAAO,GAAG4C,eAAiBvC,EAAKsC,IAGpDjD,KAAKmD,gBACJnD,KAAK2C,SACLK,MAQH,OAFAR,EAAc5C,SAAWA,EAElB4C","file":"../../../editor/plugins/_SmileyPalette.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"dijit/_PaletteMixin\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/Smiley\"\r\n], function(dojo, dijit, dojox, _Widget, _TemplatedMixin, _PaletteMixin) {\r\n\r\n\tdojo.experimental(\"dojox.editor.plugins._SmileyPalette\");\r\n\r\n\tvar Emoticon = dojo.declare(\"dojox.editor.plugins.Emoticon\",\r\n\t\tnull,\r\n\t\t{\r\n\t\t\t// summary:\r\n\t\t\t//\t\tJS Object representing an emoticon\r\n\r\n\t\t\tconstructor: function(/*String*/ id){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t Create emoticon object from an id (like \"smile\")\r\n\t\t\t\t// value: String\r\n\t\t\t\t//\t\talias name 'smile', 'cool' ..\r\n\t\t\t\tthis.id = id;\r\n\t\t\t},\r\n\r\n\t\t\tgetValue: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tReturns a emoticon string in ascii representation, ex: :-)\r\n\t\t\t\treturn Emoticon.ascii[this.id];\r\n\t\t\t},\r\n\r\n\t\t\timgHtml: function(/*String*/ clazz){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tReturn the HTML string for an `<img>` node that shows this smiley\r\n\t\t\t\tvar eId = \"emoticon\" + this.id.substr(0,1).toUpperCase() + this.id.substr(1),\r\n\t\t\t\t\tsrc = dojo.moduleUrl(\"dojox.editor.plugins\", \"resources/emoticons/\" + eId + \".gif\"),\r\n\t\t\t\t\tlabel = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"Smiley\")[eId],\r\n\t\t\t\t\t\thtml = ['<img src=\\\"',\r\n\t\t\t\t\t\tsrc,\r\n\t\t\t\t\t\t'\\\" class=\\\"',\r\n\t\t\t\t\t\tclazz,\r\n\t\t\t\t\t\t'\\\" alt=\\\"',\r\n\t\t\t\t\t\tthis.getValue(),\r\n\t\t\t\t\t\t'\\\" title=\\\"',\r\n\t\t\t\t\t\tlabel,\r\n\t\t\t\t\t\t'\\\">'];\r\n\t\t\t\treturn html.join(\"\");\r\n\t\t\t},\r\n\r\n\t\t\tfillCell: function(/*DOMNode*/cell, /*String*/ blankGif){\r\n\t\t\t\tdojo.place(this.imgHtml(\"dijitPaletteImg\"), cell);\r\n\t\t\t}\r\n\t});\r\n\r\n\tEmoticon.ascii = {\r\n\t\tsmile: \":-)\",\r\n\t\tlaughing: \"lol\",\r\n\t\twink: \";-)\",\r\n\t\tgrin: \":-D\",\r\n\t\tcool: \"8-)\",\r\n\t\tangry: \":-@\",\r\n\t\thalf: \":-/\",\r\n\t\teyebrow: \"/:)\",\r\n\t\tfrown: \":-(\",\r\n\t\tshy: \":-$\",\r\n\t\tgoofy: \":-S\",\r\n\t\toops: \":-O\",\r\n\t\ttongue: \":-P\",\r\n\t\tidea: \"(i)\",\r\n\t\tyes: \"(y)\",\r\n\t\tno: \"(n)\",\r\n\t\tangel: \"0:-)\",\r\n\t\tcrying: \":'(\",\r\n\t\thappy: \"=)\"\r\n\t};\r\n\r\n\tEmoticon.fromAscii = function(/*String*/str){\r\n\t\t// summary:\r\n\t\t//\t\tFactory to create Emoticon object based on string like \":-)\" rather than id like \"smile\"\r\n\t\tvar ascii = Emoticon.ascii;\r\n\t\tfor(var i in ascii){\r\n\t\t\tif(str == ascii[i]){\r\n\t\t\t\treturn new Emoticon(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tvar SmileyPalette = dojo.declare(\"dojox.editor.plugins._SmileyPalette\", [_Widget, _TemplatedMixin, _PaletteMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA keyboard accessible emoticon-picking widget (for inserting smiley characters)\r\n\t\t// description:\r\n\t\t//\t\tGrid showing various emoticons.\r\n\t\t//\t\tCan be used standalone, or as a popup.\r\n\r\n\t\t// templateString:\r\n\t\t//\t\tThe template of this widget.\r\n\t\ttemplateString:\r\n\t\t\t'<table class=\"dijitInline dijitEditorSmileyPalette dijitPaletteTable\"' +\r\n\t\t\t\t' cellSpacing=0 cellPadding=0><tbody dojoAttachPoint=\"gridNode\"></tbody></table>',\r\n\r\n\t\tbaseClass: \"dijitEditorSmileyPalette\",\r\n\r\n\t\t_palette: [\r\n\t\t\t[\"smile\", \"laughing\", \"wink\", \"grin\"],\r\n\t\t\t[\"cool\", \"angry\", \"half\", \"eyebrow\"],\r\n\t\t\t[\"frown\", \"shy\", \"goofy\", \"oops\"],\r\n\t\t\t[\"tongue\", \"idea\", \"angel\", \"happy\"],\r\n\t\t\t[\"yes\", \"no\", \"crying\", \"\"]\r\n\t\t],\r\n\r\n\t\tdyeClass: Emoticon,\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\t// Instantiate the template, which makes a skeleton into which we'll insert a bunch of\r\n\t\t\t// <img> nodes\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tvar i18n = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"Smiley\");\r\n\r\n\t\t\t// Generate hash from emoticon standard name (like \"smile\") to translation\r\n\t\t\tvar emoticonI18n = {};\r\n\t\t\tfor(var name in i18n){\r\n\t\t\t\tif(name.substr(0,8) == \"emoticon\"){\r\n\t\t\t\t\temoticonI18n[name.substr(8).toLowerCase()] = i18n[name];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._preparePalette(\r\n\t\t\t\tthis._palette,\r\n\t\t\t\temoticonI18n\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\t// For monkey-patching\r\n\tSmileyPalette.Emoticon = Emoticon;\r\n\r\n\treturn SmileyPalette;\r\n});\r\n"]}