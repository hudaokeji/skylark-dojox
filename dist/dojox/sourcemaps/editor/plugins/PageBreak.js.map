{"version":3,"sources":["editor/plugins/PageBreak.js"],"names":["define","dojo","dijit","dojox","_Plugin","PageBreak","declare","useDefaultCommand","iconClassPrefix","_unbreakableNodes","_pbContent","_initButton","ed","this","editor","strings","i18n","getLocalization","button","form","Button","label","showLabel","iconClass","tabIndex","onClick","hitch","onLoadDeferred","addCallback","addKeyHandler","keys","ENTER","_insertPageBreak","isWebKit","isOpera","connect","e","keyCode","ctrlKey","shiftKey","updateState","set","get","setEditor","_style","_styled","doc","document","style","isIE","createStyleSheet","cssText","sNode","createElement","appendChild","createTextNode","getElementsByTagName","_allowBreak","execCommand","console","warn","node","_sCall","body","html","parentNode","subscribe","_scopeName","o","plugin","args","name","toLowerCase"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,wBACA,oBACA,qBACA,qBACA,YACA,gDACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhC,IAAIC,EAAYJ,EAAKK,QAAQ,iCAAkCF,GAQ9DG,mBAAmB,EAKnBC,gBAAiB,4BAIjBC,mBAAoB,KAAM,KAAM,MAIhCC,WAAY,sEAEZC,YAAa,WAGZ,IAAIC,EAAKC,KAAKC,OACVC,EAAUd,EAAKe,KAAKC,gBAAgB,uBAAwB,aAChEJ,KAAKK,OAAS,IAAIhB,EAAMiB,KAAKC,QAC5BC,MAAON,EAAmB,UAC1BO,WAAW,EACXC,UAAWV,KAAKL,gBAAkB,IAAMK,KAAKL,gBAAkB,YAC/DgB,SAAU,KACVC,QAASxB,EAAKyB,MAAMb,KAAM,sBAE3BD,EAAGe,eAAeC,YACjB3B,EAAKyB,MAAMb,KAAM,WAEhBD,EAAGiB,cAAc5B,EAAK6B,KAAKC,OAAO,GAAM,EAAM9B,EAAKyB,MAAMb,KAAMA,KAAKmB,oBACjE/B,EAAKgC,UAAYhC,EAAKiC,UAGxBrB,KAAKsB,QAAQtB,KAAKC,OAAQ,YAAab,EAAKyB,MAAMb,KAAM,SAASuB,GAC5DA,EAAEC,UAAYpC,EAAK6B,KAAKC,OAAUK,EAAEE,SAAWF,EAAEG,UACpD1B,KAAKmB,0BAQXQ,YAAa,WAGZ3B,KAAKK,OAAOuB,IAAI,WAAY5B,KAAK6B,IAAI,cAGtCC,UAAW,SAAS7B,GAKnBD,KAAKC,OAASA,EACdD,KAAKF,eAGNiC,OAAQ,WAOP,IAAI/B,KAAKgC,QAAQ,CAChBhC,KAAKgC,SAAU,EACf,IAAIC,EAAMjC,KAAKC,OAAOiC,SAClBC,EAAQ,usBA0BZ,GAAI/C,EAAKgD,KAIJ,CACKH,EAAII,iBAAiB,IAC3BC,QAAUH,MANA,CACb,IAAII,EAAQN,EAAIO,cAAc,SAC9BD,EAAME,YAAYR,EAAIS,eAAeP,IACrCF,EAAIU,qBAAqB,QAAQ,GAAGF,YAAYF,MAQnDpB,iBAAkB,WAKjB,IACKnB,KAAKgC,SAAUhC,KAAK+B,SAErB/B,KAAK4C,eACP5C,KAAKC,OAAO4C,YAAY,aAAc7C,KAAKH,YAE5C,MAAM0B,GACNuB,QAAQC,KAAKxB,KAIfqB,YAAa,WASZ,IAHA,IAAI7C,EAAKC,KAAKC,OACVgC,EAAMlC,EAAGmC,SACTc,EAAOjD,EAAGkD,OAAO,0BAA6BlD,EAAGkD,OAAO,uBACtDD,GAAQA,IAASf,EAAIiB,MAAQF,IAASf,EAAIkB,MAAK,CACpD,GAAGpD,EAAGkD,OAAO,SAAUD,EAAMhD,KAAKJ,oBACjC,OAAO,EAERoD,EAAOA,EAAKI,WAEb,OAAO,KAaT,OARAhE,EAAKiE,UAAUhE,EAAMiE,WAAa,oBAAoB,KAAK,SAASC,GAChEA,EAAEC,QAEO,cADDD,EAAEE,KAAKC,KAAKC,gBAEtBJ,EAAEC,OAAS,IAAIhE,SAIVA","file":"../../../editor/plugins/PageBreak.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/Button\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/PageBreak\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\nvar PageBreak = dojo.declare(\"dojox.editor.plugins.PageBreak\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides a simple CSS page break plugin that\r\n\t//\t\tlets your insert browser print recognizable page breaks in\r\n\t//\t\tthe document.\r\n\t//\t\tThis plugin registers the hotkey command: CTRL-SHIFT-ENTER\r\n\r\n\t// Over-ride indicating that the command processing is done all by this plugin.\r\n\tuseDefaultCommand: false,\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from\r\n\t//\t\t`iconClassPrefix` and `command`\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t// _unbreakableNodes: [private] Array\r\n\t//\t\tThe nodes that should not allow page breaks to be inserted into them.\r\n\t_unbreakableNodes: [\"li\", \"ul\", \"ol\"],\r\n\r\n\t// _pbContent: [private] String\r\n\t//\t\tThe markup used for the pagebreak insert.\r\n\t_pbContent: \"<hr style='page-break-after: always;' class='dijitEditorPageBreak'>\",\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the resize button.\r\n\t\tvar ed = this.editor;\r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"PageBreak\");\r\n\t\tthis.button = new dijit.form.Button({\r\n\t\t\tlabel: strings[\"pageBreak\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"PageBreak\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tonClick: dojo.hitch(this, \"_insertPageBreak\")\r\n\t\t});\r\n\t\ted.onLoadDeferred.addCallback(\r\n\t\t\tdojo.hitch(this, function(){\r\n\t\t\t\t//Register our hotkey to CTRL-SHIFT-ENTER.\r\n\t\t\t\ted.addKeyHandler(dojo.keys.ENTER, true, true, dojo.hitch(this, this._insertPageBreak));\r\n\t\t\t\tif(dojo.isWebKit || dojo.isOpera){\r\n\t\t\t\t\t// Webkit and Opera based browsers don't generate keypress events when ctrl and shift are\r\n\t\t\t\t\t// held then enter is pressed.  Odd, that.\r\n\t\t\t\t\tthis.connect(this.editor, \"onKeyDown\", dojo.hitch(this, function(e){\r\n\t\t\t\t\t\tif((e.keyCode === dojo.keys.ENTER) && e.ctrlKey && e.shiftKey){\r\n\t\t\t\t\t\t\tthis._insertPageBreak();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t},\r\n\r\n\t_style: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for inserting dynamic css.  This was originally\r\n\t\t//\t\tin an editor.onLoadDeferred, but I ran into issues in Chrome with\r\n\t\t//\t\tthe tag being ignored.  Having it done at insert worked better.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tif(!this._styled){\r\n\t\t\tthis._styled = true;\r\n\t\t\tvar doc = this.editor.document;\r\n\t\t\tvar style = \".dijitEditorPageBreak {\\n\" +\r\n\t\t\t\t\"\\tborder-top-style: solid;\\n\" +\r\n\t\t\t\t\"\\tborder-top-width: 3px;\\n\" +\r\n\t\t\t\t\"\\tborder-top-color: #585858;\\n\" +\r\n\t\t\t\t\"\\tborder-bottom-style: solid;\\n\" +\r\n\t\t\t\t\"\\tborder-bottom-width: 1px;\\n\" +\r\n\t\t\t\t\"\\tborder-bottom-color: #585858;\\n\" +\r\n\t\t\t\t\"\\tborder-left-style: solid;\\n\" +\r\n\t\t\t\t\"\\tborder-left-width: 1px;\\n\" +\r\n\t\t\t\t\"\\tborder-left-color: #585858;\\n\" +\r\n\t\t\t\t\"\\tborder-right-style: solid;\\n\" +\r\n\t\t\t\t\"\\tborder-right-width: 1px;\\n\" +\r\n\t\t\t\t\"\\tborder-right-color: #585858;\\n\" +\r\n\t\t\t\t\"\\tcolor: #A4A4A4;\\n\" +\r\n\t\t\t\t\"\\tbackground-color: #A4A4A4;\\n\" +\r\n\t\t\t\t\"\\theight: 10px;\\n\"+\r\n\t\t\t\t\"\\tpage-break-after: always;\\n\" +\r\n\t\t\t\t\"\\tpadding: 0px 0px 0px 0px;\\n\" +\r\n\t\t\t\"}\\n\\n\" +\r\n\t\t\t\"@media print {\\n\" +\r\n\t\t\t\t\"\\t.dijitEditorPageBreak { page-break-after: always; \" +\r\n\t\t\t\t\"background-color: rgba(0,0,0,0); color: rgba(0,0,0,0); \" +\r\n\t\t\t\t\"border: 0px none rgba(0,0,0,0); display: hidden; \" +\r\n\t\t\t\t\"width: 0px; height: 0px;}\\n\" +\r\n\t\t\t\"}\";\r\n\r\n\t\t\tif(!dojo.isIE){\r\n\t\t\t\tvar sNode = doc.createElement(\"style\");\r\n\t\t\t\tsNode.appendChild(doc.createTextNode(style));\r\n\t\t\t\tdoc.getElementsByTagName(\"head\")[0].appendChild(sNode);\r\n\t\t\t}else{\r\n\t\t\t\tvar ss = doc.createStyleSheet(\"\");\r\n\t\t\t\tss.cssText = style;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_insertPageBreak: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to insert a CSS page break at the current point in the document\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\ttry{\r\n\t\t\tif(!this._styled){ this._style(); }\r\n\t\t\t//this.editor.focus();\r\n\t\t\tif(this._allowBreak()){\r\n\t\t\t\tthis.editor.execCommand(\"inserthtml\", this._pbContent);\r\n\t\t\t}\r\n\t\t}catch(e){\r\n\t\t\tconsole.warn(e);\r\n\t\t}\r\n\t},\r\n\r\n\t_allowBreak: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function to see if we should allow a page break at the document\r\n\t\t//\t\tlocation.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar ed = this.editor;\r\n\t\tvar doc = ed.document;\r\n\t\tvar node = ed._sCall(\"getSelectedElement\", []) || ed._sCall(\"getParentElement\", []);\r\n\t\twhile(node && node !== doc.body && node !== doc.html){\r\n\t\t\tif(ed._sCall(\"isTag\", [node, this._unbreakableNodes])){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnode = node.parentNode;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name === \"pagebreak\"){\r\n\t\to.plugin = new PageBreak({});\r\n\t}\r\n});\r\n\r\nreturn PageBreak;\r\n\r\n});\r\n"]}