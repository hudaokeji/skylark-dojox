{"version":3,"sources":["editor/plugins/ShowBlockNodes.js"],"names":["define","dojo","dijit","dojox","_Plugin","ShowBlockNodes","declare","useDefaultCommand","iconClassPrefix","_styled","_initButton","strings","i18n","getLocalization","this","button","form","ToggleButton","label","showLabel","iconClass","tabIndex","onChange","hitch","editor","addKeyHandler","keys","F9","toggle","updateState","set","get","setEditor","_showBlocks","show","doc","document","style","template","forEach","tag","replace","modurl","moduleUrl","_scopeName","toString","match","bUrl","charAt","location","protocol","host","_calcBaseUrl","global","href","length","isIE","createStyleSheet","cssText","sNode","createElement","appendChild","createTextNode","getElementsByTagName","e","console","warn","addClass","editNode","removeClass","fullUrl","baseUrl","index","indexOf","substring","lastIndexOf","subscribe","o","plugin","args","name","toLowerCase"],"mappings":";;;;;;;AAAAA,QACC,OACA,QACA,QACA,wBACA,oBACA,0BACA,qBACA,qBACA,YACA,qDACE,SAASC,EAAMC,EAAOC,EAAOC,GAEhC,IAAIC,EAAiBJ,EAAKK,QAAQ,sCAAuCF,GASxEG,mBAAmB,EAInBC,gBAAiB,4BAIjBC,SAAS,EAETC,YAAa,WAGZ,IAAIC,EAAUV,EAAKW,KAAKC,gBAAgB,uBAAwB,kBAChEC,KAAKC,OAAS,IAAIb,EAAMc,KAAKC,cAC5BC,MAAOP,EAAwB,eAC/BQ,WAAW,EACXC,UAAWN,KAAKN,gBAAkB,IAAMM,KAAKN,gBAAkB,iBAC/Da,SAAU,KACVC,SAAUrB,EAAKsB,MAAMT,KAAM,iBAE5BA,KAAKU,OAAOC,cAAcxB,EAAKyB,KAAKC,IAAI,GAAM,EAAM1B,EAAKsB,MAAMT,KAAMA,KAAKc,UAG3EC,YAAa,WAGZf,KAAKC,OAAOe,IAAI,WAAYhB,KAAKiB,IAAI,cAGtCC,UAAW,SAASR,GAKnBV,KAAKU,OAASA,EACdV,KAAKJ,eAGNkB,OAAQ,WAGPd,KAAKC,OAAOe,IAAI,WAAYhB,KAAKC,OAAOgB,IAAI,aAG7CE,YAAa,SAASC,GAKrB,IAAIC,EAAMrB,KAAKU,OAAOY,SACtB,IAAItB,KAAKL,QACR,IAECK,KAAKL,SAAU,EAEf,IAAI4B,EAAQ,GAORC,EAAW,kUAafrC,EAAKsC,SAnBS,MAAO,IAAK,KAAM,KAAM,QAAS,KAC9C,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,SAC5C,aAAc,OAAQ,WAAY,UAAW,SAC7C,MAAO,KAAM,MAAO,WAAY,KAAM,MAAO,SAC7C,KAAM,MAec,SAASC,GAC7BH,GAASC,EAASG,QAAQ,YAAaD,KAIxC,IAAIE,EAASzC,EAAK0C,UAAUxC,EAAMyC,WAAY,4BAA4BC,WAC1E,IAAKH,EAAOI,MAAM,mBACfJ,EAAOI,MAAM,eAAgB,CAG/B,IAAIC,EACJ,GAAwB,MAArBL,EAAOM,OAAO,GAIhBD,EAFY9C,EAAKkC,IAAIc,SAASC,SAEd,KADJjD,EAAKkC,IAAIc,SAASE,UAG9BJ,EAAOjC,KAAKsC,aAAanD,EAAKoD,OAAOJ,SAASK,MAElB,MAA1BP,EAAKA,EAAKQ,OAAS,IAAmC,MAArBb,EAAOM,OAAO,KACjDD,GAAQ,KAETL,EAASK,EAAOL,EAIjB,GADAL,EAAQA,EAAMI,QAAQ,eAAgBC,GAClCzC,EAAKuD,KAIJ,CACKrB,EAAIsB,iBAAiB,IAC3BC,QAAUrB,MANA,CACb,IAAIsB,EAAQxB,EAAIyB,cAAc,SAC9BD,EAAME,YAAY1B,EAAI2B,eAAezB,IACrCF,EAAI4B,qBAAqB,QAAQ,GAAGF,YAAYF,IAKjD,MAAMK,GACNC,QAAQC,KAAKF,GAKZ9B,EACFjC,EAAKkE,SAASrD,KAAKU,OAAO4C,SAAU,oBAEpCnE,EAAKoE,YAAYvD,KAAKU,OAAO4C,SAAU,qBAIzChB,aAAc,SAASkB,GAQtB,IAAIC,EAAU,KACd,GAAgB,OAAZD,EAAkB,CAErB,IAAIE,EAAQF,EAAQG,QAAQ,MACd,GAAVD,IACHF,EAAUA,EAAQI,UAAU,EAAEF,IAO9BD,GAFDC,EAAQF,EAAQK,YAAY,MAChB,GAAKH,EAAQF,EAAQf,OACtBe,EAAQI,UAAU,EAAEF,GAEpBF,EAGZ,OAAOC,KAaT,OARAtE,EAAK2E,UAAU1E,EAAM0C,WAAa,oBAAoB,KAAK,SAASiC,GAChEA,EAAEC,QAEQ,mBADFD,EAAEE,KAAKC,KAAKC,gBAEtBJ,EAAEC,OAAS,IAAIzE,KAIVA","file":"../../../editor/plugins/ShowBlockNodes.js","sourcesContent":["define([\r\n\t\"dojo\",\r\n\t\"dijit\",\r\n\t\"dojox\",\r\n\t\"dijit/_editor/_Plugin\",\r\n\t\"dijit/form/Button\",\r\n\t\"dijit/form/ToggleButton\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/i18n!dojox/editor/plugins/nls/ShowBlockNodes\"\r\n], function(dojo, dijit, dojox, _Plugin) {\r\n\r\nvar ShowBlockNodes = dojo.declare(\"dojox.editor.plugins.ShowBlockNodes\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tThis plugin provides ShowBlockNodes capability to the editor.  When\r\n\t//\t\tclicked, the document in the editor will apply a class to specific\r\n\t//\t\tblock nodes to make them visible in the layout.  This info is not\r\n\t//\t\texposed/extracted when the editor value is obtained, it is purely for help\r\n\t//\t\twhile working on the page.\r\n\r\n\t// Over-ride indicating that the command processing is done all by this plugin.\r\n\tuseDefaultCommand: false,\r\n\r\n\t// iconClassPrefix: [const] String\r\n\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix` and `command`\r\n\ticonClassPrefix: \"dijitAdditionalEditorIcon\",\r\n\r\n\t// _styled: [private] boolean\r\n\t//\t\tFlag indicating the document has had the style updates applied.\r\n\t_styled: false,\r\n\r\n\t_initButton: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for creation of the preview button.\r\n\t\tvar strings = dojo.i18n.getLocalization(\"dojox.editor.plugins\", \"ShowBlockNodes\");\r\n\t\tthis.button = new dijit.form.ToggleButton({\r\n\t\t\tlabel: strings[\"showBlockNodes\"],\r\n\t\t\tshowLabel: false,\r\n\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"ShowBlockNodes\",\r\n\t\t\ttabIndex: \"-1\",\r\n\t\t\tonChange: dojo.hitch(this, \"_showBlocks\")\r\n\t\t});\r\n\t\tthis.editor.addKeyHandler(dojo.keys.F9, true, true, dojo.hitch(this, this.toggle));\r\n\t},\r\n\t\r\n\tupdateState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t},\r\n\r\n\tsetEditor: function(editor){\r\n\t\t// summary:\r\n\t\t//\t\tOver-ride for the setting of the editor.\r\n\t\t// editor: Object\r\n\t\t//\t\tThe editor to configure for this plugin to use.\r\n\t\tthis.editor = editor;\r\n\t\tthis._initButton();\r\n\t},\r\n\r\n\ttoggle: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to allow programmatic toggling of the view.\r\n\t\tthis.button.set(\"checked\", !this.button.get(\"checked\"));\r\n\t},\r\n\r\n\t_showBlocks: function(show){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to trigger printing of the editor document\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar doc = this.editor.document;\r\n\t\tif(!this._styled){\r\n\t\t\ttry{\r\n\t\t\t\t//Attempt to inject our specialized style rules for doing this.\r\n\t\t\t\tthis._styled = true;\r\n\r\n\t\t\t\tvar style = \"\";\r\n\t\t\t\tvar blocks = [\"div\", \"p\", \"ul\", \"ol\", \"table\", \"h1\",\r\n\t\t\t\t\t\"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"dir\", \"center\",\r\n\t\t\t\t\t\"blockquote\", \"form\", \"fieldset\", \"address\", \"object\",\r\n\t\t\t\t\t\"pre\", \"hr\", \"ins\", \"noscript\", \"li\", \"map\", \"button\",\r\n\t\t\t\t\t\"dd\", \"dt\"];\r\n\r\n\t\t\t\tvar template = \"@media screen {\\n\" +\r\n\t\t\t\t\t\t\"\\t.editorShowBlocks {TAG} {\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tbackground-image: url({MODURL}/images/blockelems/{TAG}.gif);\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tbackground-repeat: no-repeat;\\n\"\t+\r\n\t\t\t\t\t\t\"\\t\\tbackground-position: top left;\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tborder-width: 1px;\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tborder-style: dashed;\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tborder-color: #D0D0D0;\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tpadding-top: 15px;\\n\" +\r\n\t\t\t\t\t\t\"\\t\\tpadding-left: 15px;\\n\" +\r\n\t\t\t\t\t\"\\t}\\n\" +\r\n\t\t\t\t\"}\\n\";\r\n\r\n\t\t\t\tdojo.forEach(blocks, function(tag){\r\n\t\t\t\t\tstyle += template.replace(/\\{TAG\\}/gi, tag);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//Finally associate in the image locations based off the module url.\r\n\t\t\t\tvar modurl = dojo.moduleUrl(dojox._scopeName, \"editor/plugins/resources\").toString();\r\n\t\t\t\tif(!(modurl.match(/^https?:\\/\\//i)) &&\r\n\t\t\t\t\t!(modurl.match(/^file:\\/\\//i))){\r\n\t\t\t\t\t// We have to root it to the page location on webkit for some nutball reason.\r\n\t\t\t\t\t// Probably has to do with how iframe was loaded.\r\n\t\t\t\t\tvar bUrl;\r\n\t\t\t\t\tif(modurl.charAt(0) === \"/\"){\r\n\t\t\t\t\t\t//Absolute path on the server, so lets handle...\r\n\t\t\t\t\t\tvar proto = dojo.doc.location.protocol;\r\n\t\t\t\t\t\tvar hostn = dojo.doc.location.host;\r\n\t\t\t\t\t\tbUrl = \tproto + \"//\" + hostn;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbUrl = this._calcBaseUrl(dojo.global.location.href);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(bUrl[bUrl.length - 1] !== \"/\" && modurl.charAt(0) !== \"/\"){\r\n\t\t\t\t\t\tbUrl += \"/\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmodurl = bUrl + modurl;\r\n\t\t\t\t}\r\n\t\t\t\t// Update all the urls.\r\n\t\t\t\tstyle = style.replace(/\\{MODURL\\}/gi, modurl);\r\n\t\t\t\tif(!dojo.isIE){\r\n\t\t\t\t\tvar sNode = doc.createElement(\"style\");\r\n\t\t\t\t\tsNode.appendChild(doc.createTextNode(style));\r\n\t\t\t\t\tdoc.getElementsByTagName(\"head\")[0].appendChild(sNode);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar ss = doc.createStyleSheet(\"\");\r\n\t\t\t\t\tss.cssText = style;\r\n\t\t\t\t}\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply/remove the classes based on state.\r\n\t\tif(show){\r\n\t\t\tdojo.addClass(this.editor.editNode, \"editorShowBlocks\");\r\n\t\t}else{\r\n\t\t\tdojo.removeClass(this.editor.editNode, \"editorShowBlocks\");\r\n\t\t}\r\n\t},\r\n\r\n\t_calcBaseUrl: function(fullUrl) {\r\n\t\t// summary:\r\n\t\t//\t\tInternal function used to figure out the full root url (no relatives)\r\n\t\t//\t\tfor loading images in the styles in the iframe.\r\n\t\t// fullUrl: String\r\n\t\t//\t\tThe full url to tear down to the base.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar baseUrl = null;\r\n\t\tif (fullUrl !== null) {\r\n\t\t\t// Check to see if we need to strip off any query parameters from the Url.\r\n\t\t\tvar index = fullUrl.indexOf(\"?\");\r\n\t\t\tif (index != -1) {\r\n\t\t\t\tfullUrl = fullUrl.substring(0,index);\r\n\t\t\t}\r\n\r\n\t\t\t// Now we need to trim if necessary.  If it ends in /, then we don't\r\n\t\t\t// have a filename to trim off so we can return.\r\n\t\t\tindex = fullUrl.lastIndexOf(\"/\");\r\n\t\t\tif (index > 0 && index < fullUrl.length) {\r\n\t\t\t\tbaseUrl = fullUrl.substring(0,index);\r\n\t\t\t}else{\r\n\t\t\t\tbaseUrl = fullUrl;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn baseUrl; //String\r\n\t}\r\n});\r\n\r\n// Register this plugin.\r\ndojo.subscribe(dijit._scopeName + \".Editor.getPlugin\",null,function(o){\r\n\tif(o.plugin){ return; }\r\n\tvar name = o.args.name.toLowerCase();\r\n\tif(name ===  \"showblocknodes\"){\r\n\t\to.plugin = new ShowBlockNodes();\r\n\t}\r\n});\r\n\r\nreturn ShowBlockNodes;\r\n\r\n});\r\n"]}