{"version":3,"sources":["grid/TreeGrid.js"],"names":["define","dojo","dojox","declare","array","lang","event","domAttr","domClass","query","keys","ForestStoreModel","DataGrid","_Layout","_FocusManager","_RowManager","_EditManager","TreeSelection","TreeCell","experimental","_TreeAggregator","cells","grid","childFields","constructor","kwArgs","this","store","_cacheValue","cache","id","value","clearSubtotalCache","_cachedAggregates","cnt","cell","level","item","total","children","getValues","index","length","forEach","c","getForCell","sum","getValue","field","type","isItem","storeCache","getIdentity","itemCache","getOpenState","getCell","layoutIndex","idx","idxCache","parentCell","aggregate","getLabelAttributes","typeCache","undefined","itemAggregates","idxInParent","hasAttribute","_TreeLayout","_isCollapsable","_getInternalStructure","inStructure","g","tree","cFields","maxLevels","getTreeCells","ret","push","isCollapsable","concat","originalCell","k","n","mixin","cloneTreeCell","Math","max","tCell","aggregator","scroller","defaultOpen","defaultRowHeight","_origDefaultRowHeight","setStructure","s","treeModel","every","i","arguments","expandoCell","filter","inherited","addCellDef","inRowIndex","inCellIndex","inDef","obj","TreePath","_str","_arr","path","isString","map","split","parseInt","isArray","join","slice","String","layout","_item","getItem","compare","l","isOpen","openStates","previous","new_path","last","pop","lastChild","next","alwaysReturn","items","model","mayHaveChildren","childrenAttrs","attr","sortChildItems","sortProps","getSortProps","attribute","desc","descending","sort","a","b","_childItemSorter","childPaths","childItems","parent","traverse","toString","_TreeFocusManager","setFocusCell","inCell","getNode","isLastFocusCell","cellCount","rowCount","rowIndex","col","cc","edit","isEditing","nextCell","editable","_focusifyCellNode","setFocusIndex","row","prevCell","isFirstFocusCell","move","inRowDelta","inColDelta","isNavHeader","sc","r","getLastPageRow","page","setScrollTop","scrollTop","findScrollTop","getPageRow","min","colDir","hidden","updateRow","TreeGrid","openAtLevels","_layoutClass","createSelection","selection","av","bv","_onNew","parentInfo","getItemIndex","_onSet","oldValue","newValue","_checkUpdateStatus","_onDelete","_cleanupExpandoCache","_getItemIndex","_clearData","_by_idty_paths","identity","_addItem","noUpdate","dontUpdateRoot","indexOf","root","prototype","call","cf","j","itm","il","jl","isDeleted","idty","postMixInProperties","params","def","toLowerCase","isNaN","postCreate","_setModel","setModel","_refresh","Error","toggle","domNode","_setQuery","_setStore","createScroller","createManagers","rows","focus","getDefaultOpenState","cellDef","dVal","onStyleRow","base","get","node","customClasses","tagName","odd","selected","over","styleRow","styleRowNode","inRowNode","rowNode","onCanSelect","nodes","contains","onKeyDown","e","altKey","metaKey","keyCode","UP_ARROW","stop","DOWN_ARROW","currPath","lastPath","canEdit","_canEdit","doApplyCellEdit","inValue","inAttrName","parseFloat","Date","asDate","getTime","setValue","onApplyCellEdit","markupFactory","props","ctor","cellFunc","cellsFromMarkup","table","nodeName","th","trim","getObject","w","subTable","name","has","v","SubtableCell","innerHTML","width","relWidth","window","cell_markupFactory","Cell","structure","__span","Infinity"],"mappings":"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","file":"../../grid/TreeGrid.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"../main\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/query\",\r\n\t\"dojo/keys\",\r\n\t\"dijit/tree/ForestStoreModel\",\r\n\t\"./DataGrid\",\r\n\t\"./_Layout\",\r\n\t\"./_FocusManager\",\r\n\t\"./_RowManager\",\r\n\t\"./_EditManager\",\r\n\t\"./TreeSelection\",\r\n\t\"./cells/tree\",\r\n\t\"./_TreeView\"\r\n], function(dojo, dojox, declare, array, lang, event, domAttr, domClass, query, keys, ForestStoreModel,\r\n\tDataGrid, _Layout, _FocusManager, _RowManager, _EditManager, TreeSelection, TreeCell){\r\n\r\ndojo.experimental(\"dojox.grid.TreeGrid\");\r\n\r\nvar _TreeAggregator = declare(\"dojox.grid._TreeAggregator\", null, {\r\n\tcells: [],\r\n\tgrid: null,\r\n\tchildFields: [],\r\n\r\n\tconstructor: function(kwArgs){\r\n\t\tthis.cells = kwArgs.cells || [];\r\n\t\tthis.childFields = kwArgs.childFields || [];\r\n\t\tthis.grid = kwArgs.grid;\r\n\t\tthis.store = this.grid.store;\r\n\t},\r\n\t_cacheValue: function(cache, id, value){\r\n\t\tcache[id] = value;\r\n\t\treturn value;\r\n\t},\r\n\tclearSubtotalCache: function(){\r\n\t\t// summary:\r\n\t\t//\t\tClears the subtotal cache so that we are forced to recalc it\r\n\t\t//\t\t(or reread it) again.  This is needed, for example, when\r\n\t\t//\t\tcolumn order is changed.\r\n\t\tif(this.store){\r\n\t\t\tdelete this.store._cachedAggregates;\r\n\t\t}\r\n\t},\r\n\r\n\tcnt: function(cell, level, item){\r\n\t\t// summary:\r\n\t\t//\t\tcalculates the count of the children of item at the given level\r\n\t\tvar total = 0;\r\n\t\tvar store = this.store;\r\n\t\tvar childFields = this.childFields;\r\n\t\tif(childFields[level]){\r\n\t\t\tvar children = store.getValues(item, childFields[level]);\r\n\t\t\tif (cell.index <= level + 1){\r\n\t\t\t\ttotal = children.length;\r\n\t\t\t}else{\r\n\t\t\t\tarray.forEach(children, function(c){\r\n\t\t\t\t\ttotal += this.getForCell(cell, level + 1, c, \"cnt\");\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\ttotal = 1;\r\n\t\t}\r\n\t\treturn total;\r\n\t},\r\n\tsum: function(cell, level, item){\r\n\t\t// summary:\r\n\t\t//\t\tcalculates the sum of the children of item at the given level\r\n\t\tvar total = 0;\r\n\t\tvar store = this.store;\r\n\t\tvar childFields = this.childFields;\r\n\t\tif(childFields[level]){\r\n\t\t\tarray.forEach(store.getValues(item, childFields[level]), function(c){\r\n\t\t\t\ttotal += this.getForCell(cell, level + 1, c, \"sum\");\r\n\t\t\t}, this);\r\n\t\t}else{\r\n\t\t\ttotal += store.getValue(item, cell.field);\r\n\t\t}\r\n\t\treturn total;\r\n\t},\r\n\tvalue: function(cell, level, item){\r\n\t\t// summary:\r\n\t\t//\t\tEmpty function so that we can set \"aggregate='value'\" to\r\n\t\t//\t\tforce loading from the data - and bypass calculating\r\n\t},\r\n\tgetForCell: function(cell, level, item, type){\r\n\t\t// summary:\r\n\t\t//\t\tGets the value of the given cell at the given level and type.\r\n\t\t//\t\ttype can be one of \"sum\", \"cnt\", or \"value\".  If itemAggregates\r\n\t\t//\t\tis set and can be used, it is used instead.  Values are also\r\n\t\t//\t\tcached to prevent calculating them too often.\r\n\t\tvar store = this.store;\r\n\t\tif(!store || !item || !store.isItem(item)){ return \"\"; }\r\n\t\tvar storeCache = store._cachedAggregates = store._cachedAggregates || {};\r\n\t\tvar id = store.getIdentity(item);\r\n\t\tvar itemCache = storeCache[id] = storeCache[id] || [];\r\n\t\tif(!cell.getOpenState){\r\n\t\t\tcell = this.grid.getCell(cell.layoutIndex + level + 1);\r\n\t\t}\r\n\t\tvar idx = cell.index;\r\n\t\tvar idxCache = itemCache[idx] = itemCache[idx] || {};\r\n\t\ttype = (type || (cell.parentCell ? cell.parentCell.aggregate : \"sum\"))||\"sum\";\r\n\t\tvar attr = cell.field;\r\n\t\tif(attr == store.getLabelAttributes()[0]){\r\n\t\t\t// If our attribute is one of the label attributes, we should\r\n\t\t\t// use cnt instead (since it makes no sense to do a sum of labels)\r\n\t\t\ttype = \"cnt\";\r\n\t\t}\r\n\t\tvar typeCache = idxCache[type] = idxCache[type] || [];\r\n\r\n\t\t// See if we have it in our cache immediately for easy returning\r\n\t\tif(typeCache[level] != undefined){\r\n\t\t\treturn typeCache[level];\r\n\t\t}\r\n\r\n\t\t// See if they have specified a valid field\r\n\t\tvar field = ((cell.parentCell && cell.parentCell.itemAggregates) ?\r\n\t\t\t\t\t\t\tcell.parentCell.itemAggregates[cell.idxInParent] : \"\")||\"\";\r\n\t\tif(field && store.hasAttribute(item, field)){\r\n\t\t\treturn this._cacheValue(typeCache, level, store.getValue(item, field));\r\n\t\t}else if(field){\r\n\t\t\treturn this._cacheValue(typeCache, level, 0);\r\n\t\t}\r\n\r\n\t\t// Calculate it\r\n\t\treturn this._cacheValue(typeCache, level, this[type](cell, level, item));\r\n\t}\r\n});\r\n\r\nvar _TreeLayout = declare(\"dojox.grid._TreeLayout\", _Layout, {\r\n\t// Whether or not we are collapsable - this is calculated when we\r\n\t// set our structure.\r\n\t_isCollapsable: false,\r\n\r\n\t_getInternalStructure: function(inStructure){\r\n\t\t//\tCreate a \"Tree View\" with 1 row containing references for\r\n\t\t//\t\teach column (recursively)\r\n\t\tvar g = this.grid;\r\n\r\n\t\tvar s = inStructure;\r\n\t\tvar cells = s[0].cells[0];\r\n\t\tvar tree = {\r\n\t\t\ttype: \"dojox.grid._TreeView\",\r\n\t\t\tcells: [[]]\r\n\t\t};\r\n\t\tvar cFields = [];\r\n\t\tvar maxLevels = 0;\r\n\t\tvar getTreeCells = function(parentCell, level){\r\n\t\t\tvar children = parentCell.children;\r\n\t\t\tvar cloneTreeCell = function(originalCell, idx){\r\n\t\t\t\tvar k, n = {};\r\n\t\t\t\tfor(k in originalCell){\r\n\t\t\t\t\tn[k] = originalCell[k];\r\n\t\t\t\t}\r\n\t\t\t\tn = lang.mixin(n, {\r\n\t\t\t\t\tlevel: level,\r\n\t\t\t\t\tidxInParent: level > 0 ? idx : -1,\r\n\t\t\t\t\tparentCell: level > 0 ? parentCell : null\r\n\t\t\t\t});\r\n\t\t\t\treturn n;\r\n\t\t\t};\r\n\t\t\tvar ret = [];\r\n\t\t\tarray.forEach(children, function(c, idx){\r\n\t\t\t\tif(\"children\" in c){\r\n\t\t\t\t\tcFields.push(c.field);\r\n\t\t\t\t\tvar last = ret[ret.length - 1];\r\n\t\t\t\t\tlast.isCollapsable = true;\r\n\t\t\t\t\tc.level = level;\r\n\t\t\t\t\tret = ret.concat(getTreeCells(c, level + 1));\r\n\t\t\t\t}else{\r\n\t\t\t\t\tret.push(cloneTreeCell(c, idx));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tmaxLevels = Math.max(maxLevels, level);\r\n\t\t\treturn ret;\r\n\t\t};\r\n\t\tvar tCell = {children: cells, itemAggregates: []};\r\n\t\ttree.cells[0] = getTreeCells(tCell, 0);\r\n\t\tg.aggregator = new _TreeAggregator({cells: tree.cells[0],\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid: g,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchildFields: cFields});\r\n\t\tif(g.scroller && g.defaultOpen){\r\n\t\t\tg.scroller.defaultRowHeight = g.scroller._origDefaultRowHeight * (2 * maxLevels + 1);\r\n\t\t}\r\n\t\treturn [ tree ];\r\n\t},\r\n\r\n\tsetStructure: function(inStructure){\r\n\t\t// Mangle the structure a bit and make it work as desired\r\n\t\tvar s = inStructure;\r\n\t\tvar g = this.grid;\r\n\t\t// Only supporting single-view, single row or else we\r\n\t\t// are not collapsable\r\n\t\tif(g && g.treeModel && !array.every(s, function(i){\r\n\t\t\treturn (\"cells\" in i);\r\n\t\t})){\r\n\t\t\ts = arguments[0] = [{cells:[s]}];\r\n\t\t}\r\n\t\tif(s.length == 1 && s[0].cells.length == 1){\r\n\t\t\tif(g && g.treeModel){\r\n\t\t\t\ts[0].type = \"dojox.grid._TreeView\";\r\n\t\t\t\tthis._isCollapsable = true;\r\n\t\t\t\ts[0].cells[0][(this.grid.treeModel?this.grid.expandoCell:0)].isCollapsable = true;\r\n\t\t\t}else{\r\n\t\t\t\tvar childCells = array.filter(s[0].cells[0], function(c){\r\n\t\t\t\t\treturn (\"children\" in c);\r\n\t\t\t\t});\r\n\t\t\t\tif(childCells.length === 1){\r\n\t\t\t\t\tthis._isCollapsable = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this._isCollapsable && (!g || !g.treeModel)){\r\n\t\t\targuments[0] = this._getInternalStructure(s);\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\taddCellDef: function(inRowIndex, inCellIndex, inDef){\r\n\t\tvar obj = this.inherited(arguments);\r\n\t\treturn lang.mixin(obj, TreeCell);\r\n\t}\r\n});\r\n\r\nvar TreePath = declare(\"dojox.grid.TreePath\", null, {\r\n\tlevel: 0,\r\n\t_str: \"\",\r\n\t_arr: null,\r\n\tgrid: null,\r\n\tstore: null,\r\n\tcell: null,\r\n\titem: null,\r\n\r\n\tconstructor: function(/*String|Integer[]|Integer|dojox.grid.TreePath*/ path, /*dojox.grid.TreeGrid*/ grid){\r\n\t\tif(lang.isString(path)){\r\n\t\t\tthis._str = path;\r\n\t\t\tthis._arr = array.map(path.split('/'), function(item){ return parseInt(item, 10); });\r\n\t\t}else if(lang.isArray(path)){\r\n\t\t\tthis._str = path.join('/');\r\n\t\t\tthis._arr = path.slice(0);\r\n\t\t}else if(typeof path == \"number\"){\r\n\t\t\tthis._str = String(path);\r\n\t\t\tthis._arr = [path];\r\n\t\t}else{\r\n\t\t\tthis._str = path._str;\r\n\t\t\tthis._arr = path._arr.slice(0);\r\n\t\t}\r\n\t\tthis.level = this._arr.length-1;\r\n\t\tthis.grid = grid;\r\n\t\tthis.store = this.grid.store;\r\n\t\tif(grid.treeModel){\r\n\t\t\tthis.cell = grid.layout.cells[grid.expandoCell];\r\n\t\t}else{\r\n\t\t\tthis.cell = grid.layout.cells[this.level];\r\n\t\t}\r\n\t},\r\n\titem: function(){\r\n\t\t// summary:\r\n\t\t//\tgets the dojo.data item associated with this path\r\n\t\tif(!this._item){\r\n\t\t\tthis._item = this.grid.getItem(this._arr);\r\n\t\t}\r\n\t\treturn this._item;\r\n\t},\r\n\tcompare: function(path /*dojox.grid.TreePath|String|Array*/){\r\n\t\t// summary:\r\n\t\t//\tcompares two paths\r\n\t\tif(lang.isString(path) || lang.isArray(path)){\r\n\t\t\tif(this._str == path){ return 0; }\r\n\t\t\tif(path.join && this._str == path.join('/')){ return 0; }\r\n\t\t\tpath = new TreePath(path, this.grid);\r\n\t\t}else if(path instanceof TreePath){\r\n\t\t\tif(this._str == path._str){ return 0; }\r\n\t\t}\r\n\t\tfor(var i=0, l=(this._arr.length < path._arr.length ? this._arr.length : path._arr.length); i<l; i++){\r\n\t\t\tif(this._arr[i]<path._arr[i]){ return -1; }\r\n\t\t\tif(this._arr[i]>path._arr[i]){ return 1; }\r\n\t\t}\r\n\t\tif(this._arr.length<path._arr.length){ return -1; }\r\n\t\tif(this._arr.length>path._arr.length){ return 1; }\r\n\t\treturn 0;\r\n\t},\r\n\tisOpen: function(){\r\n\t\t// summary:\r\n\t\t//\tReturns the open state of this cell.\r\n\t\treturn this.cell.openStates && this.cell.getOpenState(this.item());\r\n\t},\r\n\tprevious: function(){\r\n\t\t// summary:\r\n\t\t//\tReturns the path that is before this path in the\r\n\t\t//\tgrid. If no path is found, returns null.\r\n\t\tvar new_path = this._arr.slice(0);\r\n\r\n\t\tif(this._str == \"0\"){\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar last = new_path.length-1;\r\n\r\n\t\tif(new_path[last] === 0){\r\n\t\t\tnew_path.pop();\r\n\t\t\treturn new TreePath(new_path, this.grid);\r\n\t\t}\r\n\r\n\t\tnew_path[last]--;\r\n\t\tvar path = new TreePath(new_path, this.grid);\r\n\t\treturn path.lastChild(true);\r\n\t},\r\n\tnext: function(){\r\n\t\t// summary:\r\n\t\t//\tReturns the next path in the grid.  If no path\r\n\t\t//\tis found, returns null.\r\n\t\tvar new_path = this._arr.slice(0);\r\n\r\n\t\tif(this.isOpen()){\r\n\t\t\tnew_path.push(0);\r\n\t\t}else{\r\n\t\t\tnew_path[new_path.length-1]++;\r\n\t\t\tfor(var i=this.level; i>=0; i--){\r\n\t\t\t\tvar item = this.grid.getItem(new_path.slice(0, i+1));\r\n\t\t\t\tif(i>0){\r\n\t\t\t\t\tif(!item){\r\n\t\t\t\t\t\tnew_path.pop();\r\n\t\t\t\t\t\tnew_path[i-1]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(!item){\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new TreePath(new_path, this.grid);\r\n\t},\r\n\tchildren: function(alwaysReturn){\r\n\t\t// summary:\r\n\t\t//\tReturns the child data items of this row.  If this\r\n\t\t//\trow isn't open and alwaysReturn is falsey, returns null.\r\n\t\tif(!this.isOpen()&&!alwaysReturn){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar items = [];\r\n\t\tvar model = this.grid.treeModel;\r\n\t\tif(model){\r\n\t\t\tvar item = this.item();\r\n\t\t\tvar store = model.store;\r\n\t\t\tif(!model.mayHaveChildren(item)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tarray.forEach(model.childrenAttrs, function(attr){\r\n\t\t\t\titems = items.concat(store.getValues(item, attr));\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\titems = this.store.getValues(this.item(), this.grid.layout.cells[this.cell.level+1].parentCell.field);\r\n\t\t\tif(items.length>1&&this.grid.sortChildItems){\r\n\t\t\t\tvar sortProps = this.grid.getSortProps();\r\n\t\t\t\tif(sortProps&&sortProps.length){\r\n\t\t\t\t\tvar attr = sortProps[0].attribute,\r\n\t\t\t\t\t\tgrid = this.grid;\r\n\t\t\t\t\tif(attr&&items[0][attr]){\r\n\t\t\t\t\t\tvar desc = !!sortProps[0].descending;\r\n\t\t\t\t\t\titems = items.slice(0); // don't touch the array in the store, make a copy\r\n\t\t\t\t\t\titems.sort(function(a, b){\r\n\t\t\t\t\t\t\treturn grid._childItemSorter(a, b, attr, desc);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\tchildPaths: function(){\r\n\t\tvar childItems = this.children();\r\n\t\tif(!childItems){\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\treturn array.map(childItems, function(item, index){\r\n\t\t\treturn new TreePath(this._str + '/' + index, this.grid);\r\n\t\t}, this);\r\n\t},\r\n\tparent: function(){\r\n\t\t// summary:\r\n\t\t//\tReturns the parent path of this path.  If this is a\r\n\t\t//\ttop-level row, returns null.\r\n\t\tif(this.level === 0){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn new TreePath(this._arr.slice(0, this.level), this.grid);\r\n\t},\r\n\tlastChild: function(/*Boolean?*/ traverse){\r\n\t\t// summary:\r\n\t\t//\tReturns the last child row below this path.  If traverse\r\n\t\t//\tis true, will traverse down to find the last child row\r\n\t\t//\tof this branch.  If there are no children, returns itself.\r\n\t\tvar children = this.children();\r\n\t\tif(!children || !children.length){\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tvar path = new TreePath(this._str + \"/\" + String(children.length-1), this.grid);\r\n\t\tif(!traverse){\r\n\t\t\treturn path;\r\n\t\t}\r\n\t\treturn path.lastChild(true);\r\n\t},\r\n\ttoString: function(){\r\n\t\treturn this._str;\r\n\t}\r\n});\r\n\r\nvar _TreeFocusManager = declare(\"dojox.grid._TreeFocusManager\", _FocusManager, {\r\n\tsetFocusCell: function(inCell, inRowIndex){\r\n\t\tif(inCell && inCell.getNode(inRowIndex)){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t},\r\n\tisLastFocusCell: function(){\r\n\t\tif(this.cell && this.cell.index == this.grid.layout.cellCount-1){\r\n\t\t\tvar path = new TreePath(this.grid.rowCount-1, this.grid);\r\n\t\t\tpath = path.lastChild(true);\r\n\t\t\treturn this.rowIndex == path._str;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\tnext: function(){\r\n\t\t// summary:\r\n\t\t//\tfocus next grid cell\r\n\t\tif(this.cell){\r\n\t\t\tvar row=this.rowIndex, col=this.cell.index+1, cc=this.grid.layout.cellCount-1;\r\n\t\t\tvar path = new TreePath(this.rowIndex, this.grid);\r\n\t\t\tif(col > cc){\r\n\t\t\t\tvar new_path = path.next();\r\n\t\t\t\tif(!new_path){\r\n\t\t\t\t\tcol--;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcol = 0;\r\n\t\t\t\t\tpath = new_path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.grid.edit.isEditing()){ //when editing, only navigate to editable cells\r\n\t\t\t\tvar nextCell = this.grid.getCell(col);\r\n\t\t\t\tif (!this.isLastFocusCell() && !nextCell.editable){\r\n\t\t\t\t\tthis._focusifyCellNode(false);\r\n\t\t\t\t\tthis.cell=nextCell;\r\n\t\t\t\t\tthis.rowIndex=path._str;\r\n\t\t\t\t\tthis.next();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setFocusIndex(path._str, col);\r\n\t\t}\r\n\t},\r\n\tprevious: function(){\r\n\t\t// summary:\r\n\t\t//\tfocus previous grid cell\r\n\t\tif(this.cell){\r\n\t\t\tvar row=(this.rowIndex || 0), col=(this.cell.index || 0) - 1;\r\n\t\t\tvar path = new TreePath(row, this.grid);\r\n\t\t\tif(col < 0){\r\n\t\t\t\tvar new_path = path.previous();\r\n\t\t\t\tif(!new_path){\r\n\t\t\t\t\tcol = 0;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcol = this.grid.layout.cellCount-1;\r\n\t\t\t\t\tpath = new_path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.grid.edit.isEditing()){ //when editing, only navigate to editable cells\r\n\t\t\t\tvar prevCell = this.grid.getCell(col);\r\n\t\t\t\tif (!this.isFirstFocusCell() && !prevCell.editable){\r\n\t\t\t\t\tthis._focusifyCellNode(false);\r\n\t\t\t\t\tthis.cell=prevCell;\r\n\t\t\t\t\tthis.rowIndex=path._str;\r\n\t\t\t\t\tthis.previous();\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setFocusIndex(path._str, col);\r\n\t\t}\r\n\t},\r\n\tmove: function(inRowDelta, inColDelta){\r\n\t\tif(this.isNavHeader()){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!this.cell){ return; }\r\n\t\t// Handle grid proper.\r\n\t\tvar sc = this.grid.scroller,\r\n\t\t\tr = this.rowIndex,\r\n\t\t\trc = this.grid.rowCount-1,\r\n\t\t\tpath = new TreePath(this.rowIndex, this.grid);\r\n\t\tif(inRowDelta){\r\n\t\t\tvar row;\r\n\t\t\tif(inRowDelta>0){\r\n\t\t\t\tpath = path.next();\r\n\t\t\t\trow = path._arr[0];\r\n\t\t\t\tif(row > sc.getLastPageRow(sc.page)){\r\n\t\t\t\t\t//need to load additional data, let scroller do that\r\n\t\t\t\t\tthis.grid.setScrollTop(this.grid.scrollTop+sc.findScrollTop(row)-sc.findScrollTop(r));\r\n\t\t\t\t}\r\n\t\t\t}else if(inRowDelta<0){\r\n\t\t\t\tpath = path.previous();\r\n\t\t\t\trow = path._arr[0];\r\n\t\t\t\tif(row <= sc.getPageRow(sc.page)){\r\n\t\t\t\t\t//need to load additional data, let scroller do that\r\n\t\t\t\t\tthis.grid.setScrollTop(this.grid.scrollTop-sc.findScrollTop(r)-sc.findScrollTop(row));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar cc = this.grid.layout.cellCount-1,\r\n\t\ti = this.cell.index,\r\n\t\tcol = Math.min(cc, Math.max(0, i+inColDelta));\r\n\t\tvar cell = this.grid.getCell(col);\r\n\t\tvar colDir = inColDelta < 0 ? -1 : 1;\r\n\t\twhile(col>=0 && col < cc && cell && cell.hidden === true){\r\n\t\t\t// skip hidden cells\r\n\t\t\tcol += colDir;\r\n\t\t\tcell = this.grid.getCell(col);\r\n\t\t}\r\n\t\tif (!cell || cell.hidden === true){\r\n\t\t\t// don't change col if would move to hidden\r\n\t\t\tcol = i;\r\n\t\t}\r\n\t\tif(inRowDelta){\r\n\t\t\tthis.grid.updateRow(r);\r\n\t\t}\r\n\t\tthis.setFocusIndex(path._str, col);\r\n\t}\r\n});\r\n\r\nvar TreeGrid = declare(\"dojox.grid.TreeGrid\", DataGrid, {\r\n\t// summary:\r\n\t//\t\tA grid that supports nesting rows - it provides an expando function\r\n\t//\t\tsimilar to dijit.Tree.  It also provides mechanisms for aggregating\r\n\t//\t\tthe values of subrows\r\n\t// description:\r\n\t//\t\tTreeGrid currently only works on \"simple\" structures.  That is,\r\n\t//\t\tsingle-view structures with a single row in them.\r\n\t//\r\n\t//\t\tThe TreeGrid works using the concept of \"levels\" - level 0 are the\r\n\t//\t\ttop-level items.\r\n\r\n\t// defaultOpen: Boolean\r\n\t//\t\tWhether or not we default to open (all levels).  This defaults to\r\n\t//\t\tfalse for grids with a treeModel.\r\n\tdefaultOpen: true,\r\n\r\n\t// sortChildItems: Boolean\r\n\t//\t\tIf true, child items will be returned sorted according to the sorting\r\n\t//\t\tproperties of the grid.\r\n\tsortChildItems: false,\r\n\r\n\t// openAtLevels: Array\r\n\t//\t\tWhich levels we are open at (overrides defaultOpen for the values\r\n\t//\t\tthat exist here).  Its values can be a boolean (true/false) or an\r\n\t//\t\tinteger (for the # of children to be closed if there are more than\r\n\t//\t\tthat)\r\n\topenAtLevels: [],\r\n\r\n\t// treeModel: dijit.tree.ForestStoreModel\r\n\t//\t\tA dijit.Tree model that will be used instead of using aggregates.\r\n\t//\t\tSetting this value will make the TreeGrid behave like a columnar\r\n\t//\t\ttree.  When setting this value, defaultOpen will default to false,\r\n\t//\t\tand openAtLevels will be ignored.\r\n\ttreeModel: null,\r\n\r\n\t// expandoCell: Integer\r\n\t//\t\tWhen used in conjunction with a treeModel (see above), this is a 0-based\r\n\t//\t\tindex of the cell in which to place the actual expando\r\n\texpandoCell: 0,\r\n\r\n\t// aggregator: Object\r\n\t//\t\tThe aggregator class - it will be populated automatically if we\r\n\t//\t\tare a collapsible grid\r\n\taggregator: null,\r\n\r\n\r\n\t// Override this to get our \"magic\" layout\r\n\t_layoutClass: _TreeLayout,\r\n\r\n\tcreateSelection: function(){\r\n\t\tthis.selection = new TreeSelection(this);\r\n\t},\r\n\r\n\t_childItemSorter: function(a, b, attribute, descending){\r\n\t\tvar av = this.store.getValue(a, attribute);\r\n\t\tvar bv = this.store.getValue(b, attribute);\r\n\t\tif(av != bv){\r\n\t\t\treturn av < bv == descending ? 1 : -1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t_onNew: function(item, parentInfo){\r\n\t\tif(!parentInfo || !parentInfo.item){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}else{\r\n\t\t\tvar idx = this.getItemIndex(parentInfo.item);\r\n\t\t\tif(typeof idx == \"string\"){\r\n\t\t\t\tthis.updateRow(idx.split('/')[0]);\r\n\t\t\t}else if(idx > -1){\r\n\t\t\t\tthis.updateRow(idx);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_onSet: function(item, attribute, oldValue, newValue){\r\n\t\tthis._checkUpdateStatus();\r\n\t\tif(this.aggregator){\r\n\t\t\tthis.aggregator.clearSubtotalCache();\r\n\t\t}\r\n\t\tvar idx = this.getItemIndex(item);\r\n\t\tif(typeof idx == \"string\"){\r\n\t\t\tthis.updateRow(idx.split('/')[0]);\r\n\t\t}else if(idx > -1){\r\n\t\t\tthis.updateRow(idx);\r\n\t\t}\r\n\t},\r\n\r\n\t_onDelete: function(item){\r\n\t\tthis._cleanupExpandoCache(this._getItemIndex(item, true), this.store.getIdentity(item), item);\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\t_clearData: function() {\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._by_idty_paths = {};\r\n\t},\r\n\r\n\t_cleanupExpandoCache: function(index, identity, item){},\r\n\r\n\t_addItem: function(item, index, noUpdate, dontUpdateRoot){\r\n\t\t// add our root items to the root of the model's children\r\n\t\t// list since we don't query the model\r\n\t\tif(!dontUpdateRoot && this.model && array.indexOf(this.model.root.children, item) == -1){\r\n\t\t\tthis.model.root.children[index] = item;\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\tgetItem: function(/*integer|Array|String*/ idx){\r\n\t\t// summary:\r\n\t\t//\t\toverridden so that you can pass in a '/' delimited string of indexes to get the\r\n\t\t//\t\titem based off its path...that is, passing in \"1/3/2\" will get the\r\n\t\t//\t\t3rd (0-based) child from the 4th child of the 2nd top-level item.\r\n\t\tvar isArray = lang.isArray(idx);\r\n\t\tif(lang.isString(idx) && idx.indexOf('/')){\r\n\t\t\tidx = idx.split('/');\r\n\t\t\tisArray = true;\r\n\t\t}\r\n\t\tif(isArray && idx.length == 1){\r\n\t\t\tidx = idx[0];\r\n\t\t\tisArray = false;\r\n\t\t}\r\n\t\tif(!isArray){\r\n\t\t\treturn DataGrid.prototype.getItem.call(this, idx);\r\n\t\t}\r\n\t\tvar s = this.store;\r\n\t\tvar itm = DataGrid.prototype.getItem.call(this, idx[0]);\r\n\t\tvar cf, i, j;\r\n\t\tif(this.aggregator){\r\n\t\t\tcf = this.aggregator.childFields||[];\r\n\t\t\tif(cf){\r\n\t\t\t\tfor(i = 0; i < idx.length - 1 && itm; i++){\r\n\t\t\t\t\tif(cf[i]){\r\n\t\t\t\t\t\titm = (s.getValues(itm, cf[i])||[])[idx[i + 1]];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\titm = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else if(this.treeModel){\r\n\t\t\tcf = this.treeModel.childrenAttrs||[];\r\n\t\t\tif(cf&&itm){\r\n\t\t\t\tfor(i=1, il=idx.length; (i<il) && itm; i++) {\r\n\t\t\t\t\tfor(j=0, jl=cf.length; j<jl; j++) {\r\n\t\t\t\t\t\tif(cf[j]){\r\n\t\t\t\t\t\t\titm = (s.getValues(itm, cf[j])||[])[idx[i]];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\titm = null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(itm){ break; }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn itm || null;\r\n\t},\r\n\r\n\t_getItemIndex: function(item, isDeleted){\r\n\t\tif(!isDeleted && !this.store.isItem(item)){\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tvar idx = this.inherited(arguments);\r\n\t\tif(idx == -1){\r\n\t\t\tvar idty = this.store.getIdentity(item);\r\n\t\t\treturn this._by_idty_paths[idty] || -1;\r\n\t\t}\r\n\t\treturn idx;\r\n\t},\r\n\r\n\tpostMixInProperties: function(){\r\n\t\tif(this.treeModel && !(\"defaultOpen\" in this.params)){\r\n\t\t\t// Default open to false for tree models, true for other tree\r\n\t\t\t// grids.\r\n\t\t\tthis.defaultOpen = false;\r\n\t\t}\r\n\t\tvar def = this.defaultOpen;\r\n\t\tthis.openAtLevels = array.map(this.openAtLevels, function(l){\r\n\t\t\tif(typeof l == \"string\"){\r\n\t\t\t\tswitch(l.toLowerCase()){\r\n\t\t\t\t\tcase \"true\":\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"false\":\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tvar r = parseInt(l, 10);\r\n\t\t\t\t\t\tif(isNaN(r)){\r\n\t\t\t\t\t\t\treturn def;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn l;\r\n\t\t});\r\n\t\tthis._by_idty_paths = {};\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this.treeModel){\r\n\t\t\tthis._setModel(this.treeModel);\r\n\t\t}\r\n\t},\r\n\r\n\tsetModel: function(treeModel){\r\n\t\tthis._setModel(treeModel);\r\n\t\tthis._refresh(true);\r\n\t},\r\n\r\n\t_setModel: function(treeModel){\r\n\t\tif(treeModel && (!ForestStoreModel || !(treeModel instanceof ForestStoreModel))){\r\n\t\t\tthrow new Error(\"dojox.grid.TreeGrid: treeModel must be an instance of dijit.tree.ForestStoreModel\");\r\n\t\t}\r\n\t\tthis.treeModel = treeModel;\r\n\t\tdomClass.toggle(this.domNode, \"dojoxGridTreeModel\", this.treeModel ? true : false);\r\n\t\tthis._setQuery(treeModel ? treeModel.query : null);\r\n\t\tthis._setStore(treeModel ? treeModel.store : null);\r\n\t},\r\n\r\n\tcreateScroller: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.scroller._origDefaultRowHeight = this.scroller.defaultRowHeight;\r\n\t},\r\n\r\n\tcreateManagers: function(){\r\n\t\t// summary:\r\n\t\t//\t\tcreate grid managers for various tasks including rows, focus, selection, editing\r\n\r\n\t\t// row manager\r\n\t\tthis.rows = new _RowManager(this);\r\n\t\t// focus manager\r\n\t\tthis.focus = new _TreeFocusManager(this);\r\n\t\t// edit manager\r\n\t\tthis.edit = new _EditManager(this);\r\n\t},\r\n\r\n\t_setStore: function(store){\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this.treeModel&&!this.treeModel.root.children){\r\n\t\t\tthis.treeModel.root.children = [];\r\n\t\t}\r\n\t\tif(this.aggregator){\r\n\t\t\tthis.aggregator.store = store;\r\n\t\t}\r\n\t},\r\n\r\n\tgetDefaultOpenState: function(cellDef, item){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the default open state for the given definition and item\r\n\t\t//\t\tIt reads from the openAtLevels and defaultOpen values of the\r\n\t\t//\t\tgrid to calculate if the given item should default to open or\r\n\t\t//\t\tnot.\r\n\t\tvar cf;\r\n\t\tvar store = this.store;\r\n\t\tif(this.treeModel){ return this.defaultOpen; }\r\n\t\tif(!cellDef || !store || !store.isItem(item) ||\r\n\t\t\t\t!(cf = this.aggregator.childFields[cellDef.level])){\r\n\t\t\treturn this.defaultOpen;\r\n\t\t}\r\n\t\tif(this.openAtLevels.length > cellDef.level){\r\n\t\t\tvar dVal = this.openAtLevels[cellDef.level];\r\n\t\t\tif(typeof dVal == \"boolean\"){\r\n\t\t\t\treturn dVal;\r\n\t\t\t}else if(typeof dVal == \"number\"){\r\n\t\t\t\treturn (store.getValues(item, cf).length <= dVal);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.defaultOpen;\r\n\t},\r\n\tonStyleRow: function(row){\r\n\t\tif(!this.layout._isCollapsable){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar base = domAttr.get(row.node, 'dojoxTreeGridBaseClasses');\r\n\t\tif(base){\r\n\t\t\trow.customClasses = base;\r\n\t\t}\r\n\t\tvar i = row;\r\n\t\tvar tagName = i.node.tagName.toLowerCase();\r\n\t\ti.customClasses += (i.odd?\" dojoxGridRowOdd\":\"\") +\r\n\t\t\t\t\t\t   (i.selected&&tagName=='tr'?\" dojoxGridRowSelected\":\"\") +\r\n\t\t\t\t\t\t   (i.over&&tagName=='tr'?\" dojoxGridRowOver\":\"\");\r\n\t\tthis.focus.styleRow(i);\r\n\t\tthis.edit.styleRow(i);\r\n\t},\r\n\tstyleRowNode: function(inRowIndex, inRowNode){\r\n\t\tif(inRowNode){\r\n\t\t\tif(inRowNode.tagName.toLowerCase() == 'div' && this.aggregator){\r\n\t\t\t\tquery(\"tr[dojoxTreeGridPath]\", inRowNode).forEach(function(rowNode){\r\n\t\t\t\t\tthis.rows.styleRowNode(domAttr.get(rowNode, 'dojoxTreeGridPath'), rowNode);\r\n\t\t\t\t},this);\r\n\t\t\t}\r\n\t\t\tthis.rows.styleRowNode(inRowIndex, inRowNode);\r\n\t\t}\r\n\t},\r\n\tonCanSelect: function(inRowIndex){\r\n\t\tvar nodes = query(\"tr[dojoxTreeGridPath='\" + inRowIndex + \"']\", this.domNode);\r\n\t\tif(nodes.length){\r\n\t\t\tif(domClass.contains(nodes[0], 'dojoxGridSummaryRow')){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\tonKeyDown: function(e){\r\n\t\tif(e.altKey || e.metaKey){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tswitch(e.keyCode){\r\n\t\t\tcase keys.UP_ARROW:\r\n\t\t\t\tif(!this.edit.isEditing() && this.focus.rowIndex != \"0\"){\r\n\t\t\t\t\tevent.stop(e);\r\n\t\t\t\t\tthis.focus.move(-1, 0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase keys.DOWN_ARROW:\r\n\t\t\t\tvar currPath = new TreePath(this.focus.rowIndex, this);\r\n\t\t\t\tvar lastPath = new TreePath(this.rowCount-1, this);\r\n\t\t\t\tlastPath = lastPath.lastChild(true);\r\n\t\t\t\tif(!this.edit.isEditing() && currPath.toString() != lastPath.toString()){\r\n\t\t\t\t\tevent.stop(e);\r\n\t\t\t\t\tthis.focus.move(1, 0);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\tcanEdit: function(inCell, inRowIndex){\r\n\t\tvar node = inCell.getNode(inRowIndex);\r\n\t\treturn node && this._canEdit;\r\n\t},\r\n\tdoApplyCellEdit: function(inValue, inRowIndex, inAttrName){\r\n\t\tvar item = this.getItem(inRowIndex);\r\n\t\tvar oldValue = this.store.getValue(item, inAttrName);\r\n\t\tif(typeof oldValue == 'number'){\r\n\t\t\tinValue = isNaN(inValue) ? inValue : parseFloat(inValue);\r\n\t\t}else if(typeof oldValue == 'boolean'){\r\n\t\t\tinValue = inValue == 'true' ? true : inValue == 'false' ? false : inValue;\r\n\t\t}else if(oldValue instanceof Date){\r\n\t\t\tvar asDate = new Date(inValue);\r\n\t\t\tinValue = isNaN(asDate.getTime()) ? inValue : asDate;\r\n\t\t}\r\n\t\tthis.store.setValue(item, inAttrName, inValue);\r\n\t\tthis.onApplyCellEdit(inValue, inRowIndex, inAttrName);\r\n\t}\r\n});\r\nTreeGrid.markupFactory = function(props, node, ctor, cellFunc){\r\n\tvar widthFromAttr = function(n){\r\n\t\tvar w = domAttr.get(n, \"width\")||\"auto\";\r\n\t\tif((w != \"auto\")&&(w.slice(-2) != \"em\")&&(w.slice(-1) != \"%\")){\r\n\t\t\tw = parseInt(w, 10)+\"px\";\r\n\t\t}\r\n\t\treturn w;\r\n\t};\r\n\r\n\tvar cellsFromMarkup = function(table){\r\n\t\tvar rows;\r\n\t\t// Don't support colgroup on our grid - single view, single row only\r\n\t\tif(table.nodeName.toLowerCase() == \"table\" &&\r\n\t\t\t\t\tquery(\"> colgroup\", table).length === 0 &&\r\n\t\t\t\t\t(rows = query(\"> thead > tr\", table)).length == 1){\r\n\t\t\tvar tr = rows[0];\r\n\t\t\treturn query(\"> th\", rows[0]).map(function(th){\r\n\t\t\t\t// Grab type and field (the only ones that are shared\r\n\t\t\t\tvar cell = {\r\n\t\t\t\t\ttype: lang.trim(domAttr.get(th, \"cellType\")||\"\"),\r\n\t\t\t\t\tfield: lang.trim(domAttr.get(th, \"field\")||\"\")\r\n\t\t\t\t};\r\n\t\t\t\tif(cell.type){\r\n\t\t\t\t\tcell.type = lang.getObject(cell.type);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar subTable = query(\"> table\", th)[0];\r\n\t\t\t\tif(subTable){\r\n\t\t\t\t\t// If we have a subtable, we are an aggregate and a summary cell\r\n\t\t\t\t\tcell.name = \"\";\r\n\t\t\t\t\tcell.children = cellsFromMarkup(subTable);\r\n\t\t\t\t\tif(domAttr.has(th, \"itemAggregates\")){\r\n\t\t\t\t\t\tcell.itemAggregates = array.map(domAttr.get(th, \"itemAggregates\").split(\",\"), function(v){\r\n\t\t\t\t\t\t\treturn lang.trim(v);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tcell.itemAggregates = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(domAttr.has(th, \"aggregate\")){\r\n\t\t\t\t\t\tcell.aggregate = domAttr.get(th, \"aggregate\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcell.type = cell.type || dojox.grid.cells.SubtableCell;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// Grab our other stuff we need (mostly what's in the normal\r\n\t\t\t\t\t// Grid)\r\n\t\t\t\t\tcell.name = lang.trim(domAttr.get(th, \"name\")||th.innerHTML);\r\n\t\t\t\t\tif(domAttr.has(th, \"width\")){\r\n\t\t\t\t\t\tcell.width = widthFromAttr(th);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(domAttr.has(th, \"relWidth\")){\r\n\t\t\t\t\t\tcell.relWidth = window.parseInt(domAttr.get(th, \"relWidth\"), 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(domAttr.has(th, \"hidden\")){\r\n\t\t\t\t\t\tcell.hidden = domAttr.get(th, \"hidden\") == \"true\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcell.field = cell.field||cell.name;\r\n\t\t\t\t\tDataGrid.cell_markupFactory(cellFunc, th, cell);\r\n\t\t\t\t\tcell.type = cell.type || dojox.grid.cells.Cell;\r\n\t\t\t\t}\r\n\t\t\t\tif(cell.type && cell.type.markupFactory){\r\n\t\t\t\t\tcell.type.markupFactory(th, cell);\r\n\t\t\t\t}\r\n\t\t\t\treturn cell;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn [];\r\n\t};\r\n\r\n\tvar rows;\r\n\tif(\t!props.structure ){\r\n\t\tvar row = cellsFromMarkup(node);\r\n\t\tif(row.length){\r\n\t\t\t// Set our structure here - so that we don't try and set it in the\r\n\t\t\t// markup factory\r\n\t\t\tprops.structure = [{__span: Infinity, cells:[row]}];\r\n\t\t}\r\n\t}\r\n\treturn DataGrid.markupFactory(props, node, ctor, cellFunc);\r\n};\r\n\r\nreturn TreeGrid;\r\n\r\n});"]}