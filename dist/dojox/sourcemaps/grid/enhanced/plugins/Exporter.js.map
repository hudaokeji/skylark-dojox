{"version":3,"sources":["grid/enhanced/plugins/Exporter.js"],"names":["define","declare","array","lang","_Plugin","_RowSelector","EnhancedGrid","gridCells","getObject","Exporter","name","constructor","grid","args","this","formatter","isObject","exportFormatter","_mixinGrid","g","exportTo","hitch","exportGrid","exportSelected","setExportFormatter","type","onExported","isFunction","isString","_this","writer","_getExportWriter","writerArgs","fetchArgs","oldFunc","onComplete","store","items","request","_goThroughGridData","sort","getSortProps","_storeLayerFetch","start","count","i","rowCount","push","getItem","selection","getSelected","_buildRow","arg_obj","forEach","_views","view","vIdx","viewIdx","beforeView","structure","cells","subrow","srIdx","subrowIdx","beforeSubrow","cell","cIdx","isHeader","_isSpecialCol","spCols","index","cellIdx","handleCell","afterSubrow","afterView","views","filter","colOffset","length","beforeHeader","afterHeader","beforeContent","item","rIdx","row","rowIdx","beforeContentRow","afterContentRow","afterContent","toString","header_cell","isRowSelector","RowIndex","fileType","writerName","cls","expCls","writerNames","toLowerCase","Error","registerWriter","writerClsName","registerPlugin"],"mappings":"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","file":"../../../../grid/enhanced/plugins/Exporter.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"../_Plugin\",\r\n\t\"../../_RowSelector\",\r\n\t\"../../EnhancedGrid\",\r\n\t\"../../cells/_base\"\r\n], function(declare, array, lang, _Plugin, _RowSelector, EnhancedGrid){\r\n\r\nvar gridCells = lang.getObject(\"dojox.grid.cells\");\r\n\r\nvar Exporter = declare(\"dojox.grid.enhanced.plugins.Exporter\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tProvide functions to export the grid data into a given format.\r\n\t//\r\n\t//\t\tAcceptable plugin parameters:\r\n\t//\r\n\t//\t\t1. exportFormatter: function(data, cell, rowIndex, item)\r\n\t//\t\t\tProvide a way to customize how data should look in exported string.\r\n\t//\t\t\tNote that usually the formatter of grid cell should not be used here (it can return HTML or even widget).\r\n\t// example:\r\n\t//\t|\tfunction onExported(exported_text){\r\n\t//\t|\t\t//custom code here...\r\n\t//\t|\t}\r\n\t//\t|\tdijit.byId(\"my_grid_id\").exportTo(\"csv\",\t//registered export format, mandatory\r\n\t//\t|\t\t{\t\t\t\t\t\t\t\t\t\t//the whole object is optional.\r\n\t//\t|\t\t\tfetchArgs: {start:0,count:1000},\t//keywordArgs for fetch, optional\r\n\t//\t|\t\t\twriterArgs: {separator:';'},\t\t//export writer specific arguments, optional\r\n\t//\t|\t\t},\r\n\t//\t|\t\tfunction(str){\r\n\t//\t|\t\t\t//call back function, mandatory\r\n\t//\t|\t});\r\n\t//\t|\tvar result = dijit.byId(\"my_grid_id\").exportSelectedTo(\"table\",     //registered export format, mandatory\r\n\t//\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t{separator:'|'} //export writer specific arguments, optional\r\n\t//\t|\t);\r\n\t//\r\n\r\n\t// name: String\r\n\t//\t\tPlugin name.\r\n\tname: \"exporter\",\r\n\t\r\n\tconstructor: function(grid, args){\r\n\t\t// summary:\r\n\t\t//\t\tonly newed by _Plugin\r\n\t\t// grid: EnhancedGrid\r\n\t\t//\t\tThe grid to plug in to.\r\n\t\tthis.grid = grid;\r\n\t\tthis.formatter = (args && lang.isObject(args)) && args.exportFormatter;\r\n\t\tthis._mixinGrid();\r\n\t},\r\n\t_mixinGrid: function(){\r\n\t\tvar g = this.grid;\r\n\t\tg.exportTo = lang.hitch(this, this.exportTo);\r\n\t\tg.exportGrid = lang.hitch(this, this.exportGrid);\r\n\t\tg.exportSelected = lang.hitch(this, this.exportSelected);\r\n\t\tg.setExportFormatter = lang.hitch(this, this.setExportFormatter);\r\n\t},\r\n\tsetExportFormatter: function(formatter){\r\n\t\tthis.formatter = formatter;\r\n\t},\r\n\texportGrid: function(type, args, onExported){\r\n\t\t// summary:\r\n\t\t//\t\tExport required rows(fetchArgs) to a kind of format(type)\r\n\t\t//\t\tusing the corresponding writer with given arguments(writerArgs),\r\n\t\t//\t\tthen pass the exported text to a given function(onExported).\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// type: String\r\n\t\t//\t\tA registered export format name\r\n\t\t// args: Object?\r\n\t\t//\t\tincludes:\r\n\t\t// |\t{\r\n\t\t// |\t\tfetchArgs: object?\r\n\t\t// |\t\t\tAny arguments for store.fetch\r\n\t\t// |\t\twriterArgs: object?\r\n\t\t// |\t\t\tArguments for the given format writer\r\n\t\t// |\t}\r\n\t\t// onExported: Function(string)\r\n\t\t//\t\tCall back function when export result is ready\r\n\t\tif(lang.isFunction(args)){\r\n\t\t\tonExported = args;\r\n\t\t\targs = {};\r\n\t\t}\r\n\t\tif(!lang.isString(type) || !lang.isFunction(onExported)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\targs = args || {};\r\n\t\tvar g = this.grid, _this = this,\r\n\t\t\twriter = this._getExportWriter(type, args.writerArgs),\r\n\t\t\tfetchArgs = (args.fetchArgs && lang.isObject(args.fetchArgs)) ? args.fetchArgs : {},\r\n\t\t\toldFunc = fetchArgs.onComplete;\r\n\t\tif(g.store){\r\n\t\t\tfetchArgs.onComplete = function(items, request){\r\n\t\t\t\tif(oldFunc){\r\n\t\t\t\t\toldFunc(items, request);\r\n\t\t\t\t}\r\n\t\t\t\tonExported(_this._goThroughGridData(items, writer));\r\n\t\t\t};\r\n\t\t\tfetchArgs.sort = fetchArgs.sort || g.getSortProps();\r\n\t\t\tg._storeLayerFetch(fetchArgs);\r\n\t\t}else{\r\n\t\t\t//Data is defined directly in the structure;\r\n\t\t\tvar start = fetchArgs.start || 0,\r\n\t\t\t\tcount = fetchArgs.count || -1,\r\n\t\t\t\titems = [];\r\n\t\t\tfor(var i = start; i != start + count && i < g.rowCount; ++i){\r\n\t\t\t\titems.push(g.getItem(i));\r\n\t\t\t}\r\n\t\t\tonExported(this._goThroughGridData(items, writer));\r\n\t\t}\r\n\t},\r\n\texportSelected: function(type, writerArgs, onExported){\r\n\t\t// summary:\r\n\t\t//\t\tOnly export selected rows.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// type: string\r\n\t\t//\t\tA registered export format name\r\n\t\t// writerArgs: object?\r\n\t\t//\t\tArguments for the given format writer\r\n\t\t// returns: string\r\n\t\t//\t\tThe exported string\r\n\t\tif(!lang.isString(type)){\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tvar writer = this._getExportWriter(type, writerArgs);\r\n\t\treturn onExported(this._goThroughGridData(this.grid.selection.getSelected(), writer));\t//String\r\n\t},\r\n\t_buildRow: function(/* object */arg_obj,/* ExportWriter */writer){\r\n\t\t// summary:\r\n\t\t//\t\tUse the given export writer(writer) to go through a single row\r\n\t\t//\t\twhich is given in the context object(arg_obj).\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t\tvar _this = this;\r\n\t\tarray.forEach(arg_obj._views, function(view, vIdx){\r\n\t\t\targ_obj.view = view;\r\n\t\t\targ_obj.viewIdx = vIdx;\r\n\t\t\tif(writer.beforeView(arg_obj)){\r\n\t\t\t\tarray.forEach(view.structure.cells, function(subrow, srIdx){\r\n\t\t\t\t\targ_obj.subrow = subrow;\r\n\t\t\t\t\targ_obj.subrowIdx = srIdx;\r\n\t\t\t\t\tif(writer.beforeSubrow(arg_obj)){\r\n\t\t\t\t\t\tarray.forEach(subrow, function(cell, cIdx){\r\n\t\t\t\t\t\t\tif(arg_obj.isHeader && _this._isSpecialCol(cell)){\r\n\t\t\t\t\t\t\t\targ_obj.spCols.push(cell.index);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\targ_obj.cell = cell;\r\n\t\t\t\t\t\t\targ_obj.cellIdx = cIdx;\r\n\t\t\t\t\t\t\twriter.handleCell(arg_obj);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\twriter.afterSubrow(arg_obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\twriter.afterView(arg_obj);\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\t_goThroughGridData: function(/* Array */items,/* ExportWriter */writer){\r\n\t\t// summary:\r\n\t\t//\t\tUse the given export writer(writer) to go through the grid structure\r\n\t\t//\t\tand the given rows(items), then return the writer output.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar grid = this.grid,\r\n\t\t\tviews = array.filter(grid.views.views, function(view){\r\n\t\t\t\treturn !(view instanceof _RowSelector);\r\n\t\t\t}),\r\n\t\t\targ_obj = {\r\n\t\t\t\t'grid': grid,\r\n\t\t\t\t'isHeader': true,\r\n\t\t\t\t'spCols': [],\r\n\t\t\t\t'_views': views,\r\n\t\t\t\t'colOffset': (views.length < grid.views.views.length ? -1 : 0)\r\n\t\t\t};\r\n\t\t//go through header\r\n\t\tif(writer.beforeHeader(grid)){\r\n\t\t\tthis._buildRow(arg_obj,writer);\r\n\t\t\twriter.afterHeader();\r\n\t\t}\r\n\t\t//go through content\r\n\t\targ_obj.isHeader = false;\r\n\t\tif(writer.beforeContent(items)){\r\n\t\t\tarray.forEach(items, function(item, rIdx){\r\n\t\t\t\targ_obj.row = item;\r\n\t\t\t\targ_obj.rowIdx = rIdx;\r\n\t\t\t\tif(writer.beforeContentRow(arg_obj)){\r\n\t\t\t\t\tthis._buildRow(arg_obj, writer);\r\n\t\t\t\t\twriter.afterContentRow(arg_obj);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\twriter.afterContent();\r\n\t\t}\r\n\t\treturn writer.toString();\r\n\t},\r\n\t_isSpecialCol: function(/* dojox.grid.__CellDef */header_cell){\r\n\t\t// summary:\r\n\t\t//\t\tRow selectors and row indexes should be recognized and handled separately.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\treturn header_cell.isRowSelector || header_cell instanceof gridCells.RowIndex;\t//Boolean\r\n\t},\r\n\t_getExportWriter: function(/* string */ fileType, /* object? */ writerArgs){\r\n\t\t// summary:\r\n\t\t//\t\tUse the given export format type(fileType)\r\n\t\t//\t\tand writer arguments(writerArgs) to create\r\n\t\t//\t\ta ExportWriter and return it.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar writerName, cls,\r\n\t\t\texpCls = Exporter;\r\n\t\tif(expCls.writerNames){\r\n\t\t\twriterName = expCls.writerNames[fileType.toLowerCase()];\r\n\t\t\tcls = lang.getObject(writerName);\r\n\t\t\tif(cls){\r\n\t\t\t\tvar writer = new cls(writerArgs);\r\n\t\t\t\twriter.formatter = this.formatter;\r\n\t\t\t\treturn writer;\t//ExportWriter\r\n\t\t\t}else{\r\n\t\t\t\tthrow new Error('Please make sure class \"' + writerName + '\" is required.');\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error('The writer for \"' + fileType + '\" has not been registered.');\r\n\t}\r\n});\r\n\r\nExporter.registerWriter = function(/* string */fileType,/* string */writerClsName){\r\n\t// summary:\r\n\t//\t\tRegister a writer(writerClsName) to a export format type(fileType).\r\n\t//\t\tThis function separates the Exporter from all kinds of writers.\r\n\t// tags:\r\n\t//\t\tpublic\r\n\tExporter.writerNames = Exporter.writerNames || {};\r\n\tExporter.writerNames[fileType] = writerClsName;\r\n};\r\n\r\nEnhancedGrid.registerPlugin(Exporter/*name:'exporter'*/);\r\n\r\nreturn Exporter;\r\n});\r\n"]}