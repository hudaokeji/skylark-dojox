{"version":3,"sources":["grid/enhanced/plugins/filter/_FilterExpr.js"],"names":["define","declare","lang","date","exprs","LogicAND","_BiOpExpr","_name","_calculate","left_operand","right_operand","datarow","getter","res","applyRow","getValue","BooleanExpr","LogicOR","LogicXOR","left_res","right_res","LogicNOT","_UniOpExpr","operand","LogicALL","_OperatorExpr","i","this","_operands","_ConditionExpr","LogicANY","compareFunc","left","right","row","TimeExpr","compare","DateExpr","StringExpr","toLowerCase","String","EqualTo","LessThan","LessThanOrEqualTo","LargerThan","LargerThanOrEqualTo","Contains","indexOf","StartsWith","substring","length","EndsWith","Matches","RegExp","search","IsEmpty","mixin"],"mappings":"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","file":"../../../../../grid/enhanced/plugins/filter/_FilterExpr.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/date\",\r\n\t\"./_DataExprs\"\r\n], function(declare, lang, date, exprs){\r\n//This is the main file that should be 'required' if filter expression facility is necessary.\r\n\r\n\t/* Logic Operations */\r\n\tvar LogicAND = declare(\"dojox.grid.enhanced.plugins.filter.LogicAND\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic AND condition expression.\r\n\t\t_name: \"and\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = left_operand.applyRow(datarow, getter).getValue() &&\r\n\t\t\t\tright_operand.applyRow(datarow, getter).getValue();\r\n\t\t\treturn new exprs.BooleanExpr(res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LogicOR = declare(\"dojox.grid.enhanced.plugins.filter.LogicOR\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic OR condition expression.\r\n\t\t_name: \"or\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = left_operand.applyRow(datarow, getter).getValue() ||\r\n\t\t\t\tright_operand.applyRow(datarow, getter).getValue();\r\n\t\t\treturn new exprs.BooleanExpr(res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LogicXOR = declare(\"dojox.grid.enhanced.plugins.filter.LogicXOR\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic XOR condition expression.\r\n\t\t_name: \"xor\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar left_res = left_operand.applyRow(datarow, getter).getValue();\r\n\t\t\tvar right_res = right_operand.applyRow(datarow, getter).getValue();\r\n\t\t\treturn new exprs.BooleanExpr((!!left_res) != (!!right_res));\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LogicNOT = declare(\"dojox.grid.enhanced.plugins.filter.LogicNOT\", exprs._UniOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic NOT condition expression.\r\n\t\t_name: \"not\",\r\n\t\t_calculate: function(/* _ConditionExpr */operand,/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _UniOpExpr\r\n\t\t\treturn new exprs.BooleanExpr(!operand.applyRow(datarow, getter).getValue());\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LogicALL = declare(\"dojox.grid.enhanced.plugins.filter.LogicALL\", exprs._OperatorExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic ALL condition expression, equals a sequence of logic ANDs\r\n\t\t_name: \"all\",\r\n\t\tapplyRow: function(/* data item */datarow,/* function(row,colIdx) */ getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _ConditionExpr\r\n\t\t\tfor(var i = 0, res = true; res && (this._operands[i] instanceof exprs._ConditionExpr); ++i){\r\n\t\t\t\tres = this._operands[i].applyRow(datarow,getter).getValue();\r\n\t\t\t}\r\n\t\t\treturn new exprs.BooleanExpr(res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LogicANY = declare(\"dojox.grid.enhanced.plugins.filter.LogicANY\", exprs._OperatorExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA logic ANY condition expression, equals a sequence of logic ORs\r\n\t\t_name: \"any\",\r\n\t\tapplyRow: function(/* data item */datarow,/* function(row,colIdx) */ getter){\r\n\t\t\tfor(var i = 0,res = false; !res && (this._operands[i] instanceof exprs._ConditionExpr); ++i){\r\n\t\t\t\tres = this._operands[i].applyRow(datarow,getter).getValue();\r\n\t\t\t}\r\n\t\t\treturn new exprs.BooleanExpr(res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\t\r\n\t/* Comparison Operations */\r\n\tfunction compareFunc(left,right,row,getter){\r\n\t\tleft = left.applyRow(row, getter);\r\n\t\tright = right.applyRow(row, getter);\r\n\t\tvar left_res = left.getValue();\r\n\t\tvar right_res = right.getValue();\r\n\t\tif(left instanceof exprs.TimeExpr){\r\n\t\t\treturn date.compare(left_res,right_res,\"time\");\r\n\t\t}else if(left instanceof exprs.DateExpr){\r\n\t\t\treturn date.compare(left_res,right_res,\"date\");\r\n\t\t}else{\r\n\t\t\tif(left instanceof exprs.StringExpr){\r\n\t\t\t\tleft_res = left_res.toLowerCase();\r\n\t\t\t\tright_res = String(right_res).toLowerCase();\r\n\t\t\t}\r\n\t\t\treturn left_res == right_res ? 0 : (left_res < right_res ? -1 : 1);\r\n\t\t}\r\n\t}\r\n\tvar EqualTo = declare(\"dojox.grid.enhanced.plugins.filter.EqualTo\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tAn \"equal to\" condition expression.\r\n\t\t_name: \"equal\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = compareFunc(left_operand,right_operand,datarow,getter);\r\n\t\t\treturn new exprs.BooleanExpr(res === 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LessThan = declare(\"dojox.grid.enhanced.plugins.filter.LessThan\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"less than\" condition expression.\r\n\t\t_name: \"less\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = compareFunc(left_operand,right_operand,datarow,getter);\r\n\t\t\treturn new exprs.BooleanExpr(res < 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LessThanOrEqualTo = declare(\"dojox.grid.enhanced.plugins.filter.LessThanOrEqualTo\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"less than or equal to\" condition expression.\r\n\t\t_name: \"lessEqual\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = compareFunc(left_operand,right_operand,datarow,getter);\r\n\t\t\treturn new exprs.BooleanExpr(res <= 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LargerThan = declare(\"dojox.grid.enhanced.plugins.filter.LargerThan\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"larger than\" condition expression.\r\n\t\t_name: \"larger\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = compareFunc(left_operand,right_operand,datarow,getter);\r\n\t\t\treturn new exprs.BooleanExpr(res > 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar LargerThanOrEqualTo = declare(\"dojox.grid.enhanced.plugins.filter.LargerThanOrEqualTo\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"larger than or equal to\" condition expression.\r\n\t\t_name: \"largerEqual\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = compareFunc(left_operand,right_operand,datarow,getter);\r\n\t\t\treturn new exprs.BooleanExpr(res >= 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\t\r\n\t/* String Operations */\r\n\tvar Contains = declare(\"dojox.grid.enhanced.plugins.filter.Contains\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"contains\" condition expression.\r\n\t\t_name: \"contains\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar left_res = String(left_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\tvar right_res = String(right_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\treturn new exprs.BooleanExpr(left_res.indexOf(right_res) >= 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar StartsWith = declare(\"dojox.grid.enhanced.plugins.filter.StartsWith\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"starts with\" condition expression.\r\n\t\t_name: \"startsWith\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar left_res = String(left_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\tvar right_res = String(right_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\treturn new exprs.BooleanExpr(left_res.substring(0, right_res.length) == right_res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar EndsWith = declare(\"dojox.grid.enhanced.plugins.filter.EndsWith\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tAn \"ends with\" condition expression.\r\n\t\t_name: \"endsWith\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar left_res = String(left_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\tvar right_res = String(right_operand.applyRow(datarow, getter).getValue()).toLowerCase();\r\n\t\t\treturn new exprs.BooleanExpr(left_res.substring(left_res.length - right_res.length) == right_res);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar Matches = declare(\"dojox.grid.enhanced.plugins.filter.Matches\", exprs._BiOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA \"regular expression match\" condition expression.\r\n\t\t//\t\tThe second operand's value will be regarded as an regular expression string.\r\n\t\t_name: \"matches\",\r\n\t\t_calculate: function(/* _ConditionExpr */left_operand,/* _ConditionExpr */right_operand,\r\n\t\t\t\t\t\t\t/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar left_res = String(left_operand.applyRow(datarow, getter).getValue());\r\n\t\t\tvar right_res = new RegExp(right_operand.applyRow(datarow, getter).getValue());\r\n\t\t\treturn new exprs.BooleanExpr(left_res.search(right_res) >= 0);\t//_ConditionExpr\r\n\t\t}\r\n\t});\r\n\tvar IsEmpty = declare(\"dojox.grid.enhanced.plugins.filter.IsEmpty\", exprs._UniOpExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tCheck empty\r\n\t\t_name: \"isEmpty\",\r\n\t\t_calculate: function(/* _ConditionExpr */operand,/* data item*/datarow,/* function(row,colIdx) */getter){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride from _BiOpExpr\r\n\t\t\tvar res = operand.applyRow(datarow, getter).getValue();\r\n\t\t\treturn new exprs.BooleanExpr(res === \"\" || res == null);\r\n\t\t}\r\n\t});\r\n\r\n\treturn lang.mixin({\r\n\t\tLogicAND: LogicAND,\r\n\t\tLogicOR: LogicOR,\r\n\t\tLogicXOR: LogicXOR,\r\n\t\tLogicNOT: LogicNOT,\r\n\t\tLogicALL: LogicALL,\r\n\t\tLogicANY: LogicANY,\r\n\t\tEqualTo: EqualTo,\r\n\t\tLessThan: LessThan,\r\n\t\tLessThanOrEqualTo: LessThanOrEqualTo,\r\n\t\tLargerThan: LargerThan,\r\n\t\tLargerThanOrEqualTo: LargerThanOrEqualTo,\r\n\t\tContains: Contains,\r\n\t\tStartsWith: StartsWith,\r\n\t\tEndsWith: EndsWith,\r\n\t\tMatches: Matches,\r\n\t\tIsEmpty: IsEmpty\r\n\t}, exprs);\r\n});\r\n"]}