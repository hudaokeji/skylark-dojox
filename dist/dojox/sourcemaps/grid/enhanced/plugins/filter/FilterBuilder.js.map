{"version":3,"sources":["grid/enhanced/plugins/filter/FilterBuilder.js"],"names":["define","declare","array","lang","exprs","bdr","opCls","partial","cls","operands","bdr_not","LogicNOT","buildExpression","def","this","supportedOps","op","toLowerCase","map","data","args","mixin","defaultArgs","datatype","supportedTypes","isColumn","equalto","lessthan","lessthanorequalto","largerthan","largerthanorequalto","contains","startswith","endswith","notequalto","notcontains","notstartswith","notendswith","isempty","range","LogicALL","LargerThanOrEqualTo","slice","LessThanOrEqualTo","logicany","logicall","number","NumberExpr","string","StringExpr","boolean","BooleanExpr","date","DateExpr","time","TimeExpr","falseValue","convert","dataValue","trueValue","isString"],"mappings":";;;;;;;AAAAA,QACC,qBACA,mBACA,kBACA,iBACE,SAASC,EAASC,EAAOC,EAAMC,GAElC,IAAIC,EAAM,SAASC,GACjB,OAAOH,EAAKI,QAAQ,SAASC,EAAIC,GAChC,OAAO,IAAIL,EAAMI,GAAKC,IACrBH,IAEHI,EAAU,SAASJ,GAClB,OAAOH,EAAKI,QAAQ,SAASC,EAAIC,GAChC,OAAO,IAAIL,EAAMO,SAAS,IAAIP,EAAMI,GAAKC,KACxCH,IAEJ,OAAOL,EAAQ,mDAAoD,MAGlEW,gBAAiB,SAASC,GACzB,GAAG,OAAQA,EACV,OAAOC,KAAKC,aAAaF,EAAIG,GAAGC,eAAef,EAAMgB,IAAIL,EAAIM,KAAML,KAAKF,gBAAiBE,OAEzF,IAAIM,EAAOjB,EAAKkB,MAAMP,KAAKQ,YAAYT,EAAIU,UAAWV,EAAIO,UAC1D,OAAO,IAAIN,KAAKU,eAAeX,EAAIU,UAAUV,EAAIM,KAAMN,EAAIY,SAAUL,IAGvEL,cAGCW,QAAWrB,EAAI,WACfsB,SAAYtB,EAAI,YAChBuB,kBAAqBvB,EAAI,qBACzBwB,WAAcxB,EAAI,cAClByB,oBAAuBzB,EAAI,uBAC3B0B,SAAY1B,EAAI,YAChB2B,WAAc3B,EAAI,cAClB4B,SAAY5B,EAAI,YAChB6B,WAAcxB,EAAQ,WACtByB,YAAezB,EAAQ,YACvB0B,cAAiB1B,EAAQ,cACzB2B,YAAe3B,EAAQ,YACvB4B,QAAWjC,EAAI,WACfkC,MAAS,SAAS9B,GACjB,OAAO,IAAIL,EAAMoC,SAChB,IAAIpC,EAAMqC,oBAAoBhC,EAASiC,MAAM,EAAE,IAC/C,IAAItC,EAAMuC,kBAAkBlC,EAAS,GAAIA,EAAS,MAGpDmC,SAAYvC,EAAI,YAChBwC,SAAYxC,EAAI,aAEjBmB,gBACCsB,OAAU1C,EAAM2C,WAChBC,OAAU5C,EAAM6C,WAChBC,QAAW9C,EAAM+C,YACjBC,KAAQhD,EAAMiD,SACdC,KAAQlD,EAAMmD,UAEfjC,aACC4B,SACCM,WAAc,QACdC,QAAW,SAASC,EAAWtC,GAC9B,IAAIoC,EAAapC,EAAKoC,WAClBG,EAAYvC,EAAKuC,UACrB,GAAGxD,EAAKyD,SAASF,GAAW,CAC3B,GAAGC,GAAaD,EAAUzC,eAAiB0C,EAC1C,OAAO,EAER,GAAGH,GAAcE,EAAUzC,eAAiBuC,EAC3C,OAAO,EAGT,QAASE","file":"../../../../../grid/enhanced/plugins/filter/FilterBuilder.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"./_FilterExpr\"\r\n], function(declare, array, lang, exprs){\r\n\r\nvar bdr = function(opCls){\r\n\t\treturn lang.partial(function(cls,operands){\r\n\t\t\treturn new exprs[cls](operands);\r\n\t\t},opCls);\r\n\t},\r\n\tbdr_not = function(opCls){\r\n\t\treturn lang.partial(function(cls,operands){\r\n\t\t\treturn new exprs.LogicNOT(new exprs[cls](operands));\r\n\t\t},opCls);\r\n\t};\r\nreturn declare(\"dojox.grid.enhanced.plugins.filter.FilterBuilder\", null, {\r\n\t// summary:\r\n\t//\t\tCreate filter expression from a JSON object.\r\n\tbuildExpression: function(def){\r\n\t\tif(\"op\" in def){\r\n\t\t\treturn this.supportedOps[def.op.toLowerCase()](array.map(def.data, this.buildExpression, this));\r\n\t\t}else{\r\n\t\t\tvar args = lang.mixin(this.defaultArgs[def.datatype], def.args || {});\r\n\t\t\treturn new this.supportedTypes[def.datatype](def.data, def.isColumn, args);\r\n\t\t}\r\n\t},\r\n\tsupportedOps: {\r\n\t// summary:\r\n\t//\t\tThe builders of all supported operations\r\n\t\t\"equalto\": bdr(\"EqualTo\"),\r\n\t\t\"lessthan\": bdr(\"LessThan\"),\r\n\t\t\"lessthanorequalto\": bdr(\"LessThanOrEqualTo\"),\r\n\t\t\"largerthan\": bdr(\"LargerThan\"),\r\n\t\t\"largerthanorequalto\": bdr(\"LargerThanOrEqualTo\"),\r\n\t\t\"contains\": bdr(\"Contains\"),\r\n\t\t\"startswith\": bdr(\"StartsWith\"),\r\n\t\t\"endswith\": bdr(\"EndsWith\"),\r\n\t\t\"notequalto\": bdr_not(\"EqualTo\"),\r\n\t\t\"notcontains\": bdr_not(\"Contains\"),\r\n\t\t\"notstartswith\": bdr_not(\"StartsWith\"),\r\n\t\t\"notendswith\": bdr_not(\"EndsWith\"),\r\n\t\t\"isempty\": bdr(\"IsEmpty\"),\r\n\t\t\"range\": function(operands){\r\n\t\t\treturn new exprs.LogicALL(\r\n\t\t\t\tnew exprs.LargerThanOrEqualTo(operands.slice(0,2)),\r\n\t\t\t\tnew exprs.LessThanOrEqualTo(operands[0], operands[2])\r\n\t\t\t);\r\n\t\t},\r\n\t\t\"logicany\": bdr(\"LogicANY\"),\r\n\t\t\"logicall\": bdr(\"LogicALL\")\r\n\t},\r\n\tsupportedTypes: {\r\n\t\t\"number\": exprs.NumberExpr,\r\n\t\t\"string\": exprs.StringExpr,\r\n\t\t\"boolean\": exprs.BooleanExpr,\r\n\t\t\"date\": exprs.DateExpr,\r\n\t\t\"time\": exprs.TimeExpr\r\n\t},\r\n\tdefaultArgs: {\r\n\t\t\"boolean\": {\r\n\t\t\t\"falseValue\": \"false\",\r\n\t\t\t\"convert\": function(dataValue, args){\r\n\t\t\t\tvar falseValue = args.falseValue;\r\n\t\t\t\tvar trueValue = args.trueValue;\r\n\t\t\t\tif(lang.isString(dataValue)){\r\n\t\t\t\t\tif(trueValue && dataValue.toLowerCase() == trueValue){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(falseValue && dataValue.toLowerCase() == falseValue){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn !!dataValue;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n});\r\n"]}