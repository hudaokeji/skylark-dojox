{"version":3,"sources":["grid/enhanced/plugins/filter/_DataExprs.js"],"names":["define","declare","lang","dateLocale","exprs","BooleanExpr","_DataExpr","_name","_convertData","dataValue","StringExpr","String","NumberExpr","_convertDataToExpr","parseFloat","DateExpr","Date","res","parse","mixin","selector","this","_convertArgs","Error","toObject","_value","tmp","valueOf","inherited","arguments","TimeExpr"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,mBACA,oBACE,SAASC,EAASC,EAAMC,EAAYC,GAEtC,IAAIC,EAAcJ,EAAQ,iDAAkDG,EAAME,WAGjFC,MAAO,OACPC,aAAc,SAAuBC,GAGpC,QAASA,KAGPC,EAAaT,EAAQ,gDAAiDG,EAAME,WAG/EC,MAAO,SACPC,aAAc,SAAuBC,GAGpC,OAAOE,OAAOF,MAGZG,EAAaX,EAAQ,gDAAiDG,EAAME,WAG/EC,MAAO,SACPM,mBAAoB,SAAuBJ,GAG1C,OAAOK,WAAWL,MAGhBM,EAAWd,EAAQ,8CAA+CG,EAAME,WAG3EC,MAAO,OACPC,aAAc,SAAuBC,GAGpC,GAAGA,aAAqBO,KACvB,OAAOP,EACF,GAAuB,iBAAbA,EACf,OAAO,IAAIO,KAAKP,GAEhB,IAAIQ,EAAMd,EAAWe,MAAMP,OAAOF,GAAYP,EAAKiB,OAAOC,SAAUC,KAAKd,OAAQc,KAAKC,eACtF,IAAIL,EACH,MAAM,IAAIM,MAAM,0BAA4Bd,GAE7C,OAAOQ,GAGTO,SAAU,WAGT,GAAGH,KAAKI,kBAAkBT,KAAK,CAC9B,IAAIU,EAAML,KAAKI,OACfJ,KAAKI,OAASJ,KAAKI,OAAOE,UAC1B,IAAIV,EAAMI,KAAKO,UAAUC,WAEzB,OADAR,KAAKI,OAASC,EACPT,EAEP,OAAOI,KAAKO,UAAUC,cAIrBC,EAAW7B,EAAQ,8CAA+Cc,GAGrER,MAAO,SAGR,OAAOL,EAAKiB,OACXd,YAAaA,EACbK,WAAYA,EACZE,WAAYA,EACZG,SAAUA,EACVe,SAAUA,GACR1B","file":"../../../../../grid/enhanced/plugins/filter/_DataExprs.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/date/locale\",\r\n\t\"./_ConditionExpr\"\r\n], function(declare, lang, dateLocale, exprs){\r\n\r\n\tvar BooleanExpr = declare(\"dojox.grid.enhanced.plugins.filter.BooleanExpr\", exprs._DataExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA condition expression wrapper for boolean values\r\n\t\t_name: \"bool\",\r\n\t\t_convertData: function(/* anything */dataValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\toverride from _DataExpr\r\n\t\t\treturn !!dataValue;\t//Boolean\r\n\t\t}\r\n\t});\r\n\tvar StringExpr = declare(\"dojox.grid.enhanced.plugins.filter.StringExpr\", exprs._DataExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA condition expression wrapper for string values\r\n\t\t_name: \"string\",\r\n\t\t_convertData: function(/* anything */dataValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\toverride from _DataExpr\r\n\t\t\treturn String(dataValue);\t//String\r\n\t\t}\r\n\t});\r\n\tvar NumberExpr = declare(\"dojox.grid.enhanced.plugins.filter.NumberExpr\", exprs._DataExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA condition expression wrapper for number values\r\n\t\t_name: \"number\",\r\n\t\t_convertDataToExpr: function(/* anything */dataValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\toverride from _DataExpr\r\n\t\t\treturn parseFloat(dataValue);\t//Number\r\n\t\t}\r\n\t});\r\n\tvar DateExpr = declare(\"dojox.grid.enhanced.plugins.filter.DateExpr\", exprs._DataExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA condition expression wrapper for date values\r\n\t\t_name: \"date\",\r\n\t\t_convertData: function(/* anything */dataValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\toverride from _DataExpr\r\n\t\t\tif(dataValue instanceof Date){\r\n\t\t\t\treturn dataValue;\r\n\t\t\t}else if(typeof dataValue == \"number\"){\r\n\t\t\t\treturn new Date(dataValue);\r\n\t\t\t}else{\r\n\t\t\t\tvar res = dateLocale.parse(String(dataValue), lang.mixin({selector: this._name}, this._convertArgs));\r\n\t\t\t\tif(!res){\r\n\t\t\t\t\tthrow new Error(\"Datetime parse failed: \" + dataValue);\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t},\r\n\t\ttoObject: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrided from _DataExpr.toObject\r\n\t\t\tif(this._value instanceof Date){\r\n\t\t\t\tvar tmp = this._value;\r\n\t\t\t\tthis._value = this._value.valueOf();\r\n\t\t\t\tvar res = this.inherited(arguments);\r\n\t\t\t\tthis._value = tmp;\r\n\t\t\t\treturn res;\r\n\t\t\t}else{\r\n\t\t\t\treturn this.inherited(arguments);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tvar TimeExpr = declare(\"dojox.grid.enhanced.plugins.filter.TimeExpr\", DateExpr, {\r\n\t\t// summary:\r\n\t\t//\t\tA condition expression wrapper for time values\r\n\t\t_name: \"time\"\r\n\t});\r\n\r\n\treturn lang.mixin({\r\n\t\tBooleanExpr: BooleanExpr,\r\n\t\tStringExpr: StringExpr,\r\n\t\tNumberExpr: NumberExpr,\r\n\t\tDateExpr: DateExpr,\r\n\t\tTimeExpr: TimeExpr\r\n\t}, exprs);\r\n});\r\n"]}