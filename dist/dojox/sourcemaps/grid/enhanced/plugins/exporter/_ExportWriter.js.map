{"version":3,"sources":["grid/enhanced/plugins/exporter/_ExportWriter.js"],"names":["define","declare","constructor","writerArgs","_getExportDataForCell","rowIndex","rowItem","cell","grid","data","get","call","this","formatter","beforeHeader","afterHeader","beforeContent","items","afterContent","beforeContentRow","argObj","afterContentRow","beforeView","afterView","beforeSubrow","afterSubrow","handleCell","toString"],"mappings":";;;;;;;AAAAA,QACC,sBACE,SAASC,GAIZ,OAAOA,EAAQ,qDAAsD,MAgFpEC,YAAa,SAAsBC,KAOnCC,sBAAuB,SAASC,EAAUC,EAASC,EAAMC,GACxD,IAAIC,GAAQF,EAAKG,KAAOF,EAAKE,KAAKC,KAAKJ,EAAMF,EAAUC,GACvD,OAAGM,KAAKC,UACAD,KAAKC,UAAUJ,EAAMF,EAAMF,EAAUC,GAErCG,GAGTK,aAAc,SAA2BN,GASxC,OAAO,GAERO,YAAa,aAQbC,cAAe,SAAoBC,GAUlC,OAAO,GAERC,aAAc,aASdC,iBAAkB,SAAqBC,GAetC,OAAO,GAERC,gBAAiB,SAAqBD,KAetCE,WAAY,SAAqBF,GAehC,OAAO,GAERG,UAAW,SAAqBH,KAiBhCI,aAAc,SAAqBJ,GAiBlC,OAAO,GAERK,YAAa,SAAqBL,KAiBlCM,WAAY,SAAqBN,KAkBjCO,SAAU,WAOT,MAAO","file":"../../../../../grid/enhanced/plugins/exporter/_ExportWriter.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\"\r\n], function(declare){\r\n//require Exporter here, so the implementations only need to require this file,\r\n//and the users only need to require the implementation file.\r\n\r\nreturn declare(\"dojox.grid.enhanced.plugins.exporter._ExportWriter\", null, {\r\n\t// summary:\r\n\t//\t\tThis is an abstract class for all kinds of writers used in the Exporter plugin.\r\n\t//\t\tIt utilizes the strategy pattern to break the export work into several stages,\r\n\t//\t\tand provide interfaces for all of them.\r\n\t//\r\n\t//\t\tImplementations might choose some of the functions in this class to override,\r\n\t//\t\tthus providing their own functionalities.\r\n\t//\r\n\t//\t\tThe Exporter will go through the grid line by line. So in every line, all the Views\r\n\t//\t\twill be reached, and the header line is only handled once.\r\n\t//\r\n\t//\t\tAn *argObj* object is passed to most functions of this class.\r\n\t//\t\tIt carries context arguments that make sense when they are called.\r\n\r\n/*=====\r\n\targObj: {\r\n\t\t// grid: EnhancedGrid\r\n\t\t//\t\tThe grid object we are now handling.\r\n\t\tgrid: null,\r\n\t\t\r\n\t\t// isHeader: bool\r\n\t\t//\t\tIndicating which context we're handling, header or content.\r\n\t\tisHeader: true,\r\n\t\t\r\n\t\t// view: _View\r\n\t\t//\t\tReference to the current _View object.\r\n\t\tview: null,\r\n\t\t\r\n\t\t// viewIdx: int\r\n\t\t//\t\tThe index of the current _View object in the views array.\r\n\t\t//\t\tIf the grid does not have any rowselector view, it conforms to the index\r\n\t\t//\t\tin the _ViewManager.views.\r\n\t\tviewIdx: -1,\r\n\t\t\r\n\t\t// subrow: _View.structure.cells[i]\r\n\t\t//\t\tReference to the current subrow.\r\n\t\t//\t\tA subrow describe the innter structure of a row in a view, it's an array of cells\r\n\t\tsubrow: null,\r\n\t\t\r\n\t\t// subrowIdx: int\r\n\t\t//\t\tThe index of the current subrow in the subrow array: _View.structure.cells.\r\n\t\tsubrowIdx: -1,\r\n\t\t\r\n\t\t// cell: dojox.grid.__CellDef\r\n\t\t//\t\tReference to the current cell.\r\n\t\tcell: null,\r\n\t\t\r\n\t\t// cellIdx: int\r\n\t\t//\t\tThe index of the current cell in the current subrow.\r\n\t\t//\t\tIt's different from cell.index, which is the index in the whole line.\r\n\t\tcellIdx: -1,\r\n\t\t\r\n\t\t// row: item\r\n\t\t//\t\tThe current row of data (logically), a.k.a.: current item.\r\n\t\trow: null,\r\n\t\t\r\n\t\t// rowIdx: int\r\n\t\t//\t\tThe index of the current row (item).\r\n\t\trowIdx: -1,\r\n\t\t\r\n\t\t// spCols: int[]\r\n\t\t//\t\tAn array of special column indexes(flat,not regarding structure).\r\n\t\t//\t\tSpecial columns are typically attached to grid as a kind of UI facility\r\n\t\t//\t\tby the grid widget, instead of some real data.\r\n\t\t//\t\tFor example, indirect selectors and row indexers.\r\n\t\t//\t\tUsers can choose to export it or not.\r\n\t\tspCols: [],\r\n\t\t\r\n\t\t// colOffset: int\r\n\t\t//\t\tIf the grid has a _RowSelector view or something else, this view will NOT be\r\n\t\t//\t\tpassed to the user in argObj. So the column index (cell.index) will appear shifted\r\n\t\t//\t\t(start from 1 instead of 0). This colOffset is provided to remove this shift.\r\n\t\t//\r\n\t\t//\t\tusage:\r\n\t\t//\t\t|\tvar correctColIndex = argObj.cell.index + argObj.colOffset;\r\n\t\tcolOffset: 0\r\n\t},\r\n=====*/\r\n\r\n\tconstructor: function(/* object? */writerArgs){\r\n\t\t// summary:\r\n\t\t//\t\tWriter initializations goes here.\r\n\t\t// writerArgs: object?\r\n\t\t//\t\tAny implementation of this class might accept a writerArgs object (optional),\r\n\t\t//\t\twhich contains some writer-specific arguments given by the user.\r\n\t},\r\n\t_getExportDataForCell: function(rowIndex, rowItem, cell, grid){\r\n\t\tvar data = (cell.get || grid.get).call(cell, rowIndex, rowItem);\r\n\t\tif(this.formatter){\r\n\t\t\treturn this.formatter(data, cell, rowIndex, rowItem);\r\n\t\t}else{\r\n\t\t\treturn data;\r\n\t\t}\r\n\t},\r\n\tbeforeHeader: function(/* EnhancedGrid */grid){\r\n\t\t// summary:\r\n\t\t//\t\tWe are going to start the travel in the grid.\r\n\t\t//\t\tIs there anything we should do now?\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// returns:\r\n\t\t//\t\t- true: go on handling the header row and then call afterHeader.\r\n\t\t//\t\t- false: skip the header row, won't call afterHeader.\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\tafterHeader: function(){\r\n\t\t// summary:\r\n\t\t//\t\tThe header line has been handled.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\tbeforeContent: function(/* Array */items){\r\n\t\t// summary:\r\n\t\t//\t\tWe are ready to go through all the contents(items).\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// items:\r\n\t\t//\t\tAll the items fetched from the store\r\n\t\t// returns:\r\n\t\t//\t\t- true: go on handling the contents and then call afterContent.\r\n\t\t//\t\t- false: skip all the contents, won't call afterContent.\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\tafterContent: function(){\r\n\t\t// summary:\r\n\t\t//\t\tWe have finished the entire grid travel.\r\n\t\t//\t\tDo some clean up work if you need to.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\tbeforeContentRow: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tBefore handling a line of data (not header).\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\trow,rowIdx,\r\n\t\t// |\t\tspCols\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\t- true: go on handling the current data row and then call afterContentRow.\r\n\t\t//\t\t- false: skip the current data row, won't call afterContentRow.\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\tafterContentRow: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tAfter handling a line of data (not header).\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\trow,rowIdx,\r\n\t\t// |\t\tspCols\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\tbeforeView: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tBefore handling a view.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\tview,viewIdx,\r\n\t\t// |\t\tspCols(if isHeader==false)\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\t- true: go on handling the current view and then call afterView.\r\n\t\t//\t\t- false: skip the current view, won't call afterView.\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\tafterView: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tAfter handling a view.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\tview,viewIdx,\r\n\t\t// |\t\tspCols(if isHeader==false)\r\n\t\t// |\t}\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\tbeforeSubrow: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tBefore handling a subrow in a line (defined in the grid structure).\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\trow,rowIdx,\r\n\t\t// |\t\tview,viewIdx,\r\n\t\t// |\t\tsubrow,subrowIdx,\r\n\t\t// |\t\tspCols(if isHeader==false)\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\t- true: go on handling the current subrow and then call afterSubrow.\r\n\t\t//\t\t- false: skip the current subrow, won't call afterSubrow.\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\tafterSubrow: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tBefore handling a subrow in a line (defined in the grid structure).\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\trow,rowIdx,\r\n\t\t// |\t\tview,viewIdx,\r\n\t\t// |\t\tsubrow,subrowIdx,\r\n\t\t// |\t\tspCols(if isHeader==false)\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\thandleCell: function(/* object */argObj){\r\n\t\t// summary:\r\n\t\t//\t\tHandle a header cell or data cell.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// argObj:\r\n\t\t//\t\tAn object with at least the following context properties available:\r\n\t\t// |\t{\r\n\t\t// |\t\tgrid,isHeader,\r\n\t\t// |\t\trow,rowIdx,\r\n\t\t// |\t\tview,viewIdx,\r\n\t\t// |\t\tsubrow,subrowIdx,\r\n\t\t// |\t\tcell,cellIdx,\r\n\t\t// |\t\tspCols(if isHeader==false)\r\n\t\t// |\t}\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t},\r\n\ttoString: function(){\r\n\t\t// summary:\r\n\t\t//\t\tExport to a string.\r\n\t\t// tags:\r\n\t\t//\t\tprotected extension\r\n\t\t// returns:\r\n\t\t//\t\tThe exported result string.\r\n\t\treturn '';\t//String\r\n\t}\r\n});\r\n});\r\n"]}