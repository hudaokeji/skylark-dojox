{"version":3,"sources":["grid/enhanced/plugins/exporter/TableWriter.js"],"names":["define","declare","array","domGeometry","_ExportWriter","Exporter","registerWriter","constructor","writerArgs","this","_viewTables","_tableAttrs","_getTableAttrs","tagName","attrs","_getRowClass","arg_obj","isHeader","rowIdx","join","_getColumnClass","col_idx","cell","index","colOffset","beforeView","height","viewIdx","table","width","getMarginBox","view","contentNode","w","left","i","_width","isBodyLtr","getContentBox","headerContentNode","h","rowNode","grid","getRowNode","scroller","averageRowHeight","push","afterView","beforeSubrow","afterSubrow","handleCell","hidden","indexOf","spCols","cellTagName","colSpan","rowSpan","getHeaderNode","name","field","_getExportDataForCell","row","afterContent","forEach","toString","map"],"mappings":"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","file":"../../../../../grid/enhanced/plugins/exporter/TableWriter.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"./_ExportWriter\",\r\n\t\"../Exporter\"\r\n], function(declare, array, domGeometry, _ExportWriter, Exporter){\r\n\r\nExporter.registerWriter(\"table\", \"dojox.grid.enhanced.plugins.exporter.TableWriter\");\r\n\t\r\nreturn declare(\"dojox.grid.enhanced.plugins.exporter.TableWriter\", _ExportWriter, {\r\n\t// summary:\r\n\t//\t\tExport grid to HTML table format. Primarily used by Printer plugin.\r\n\tconstructor: function(/* object? */writerArgs){\r\n\t\t// summary:\r\n\t\t//\t\tThe generated table only defines the col/rowspan, height and width of\r\n\t\t//\t\tall the cells in the style attribute, no other attributes\r\n\t\t//\t\t(like border, cellspacing, etc.) are used.\r\n\t\t//\t\tUsers can define these attributes in the writerArgs object, like:\r\n\t\t//\t\t{table:\"border='border'\",thead:\"cellspacing='3'\"}\r\n\t\tthis._viewTables = [];\r\n\t\tthis._tableAttrs = writerArgs || {};\r\n\t},\r\n\r\n\t_getTableAttrs: function(/* string */tagName){\r\n\t\t// summary:\r\n\t\t//\t\tGet html attribute string for the given kind of tag.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// tagName: string\r\n\t\t//\t\tAn html tag name\r\n\t\t// returns:\r\n\t\t//\t\tThe well formatted attributes for the given html table.tag\r\n\t\tvar attrs = this._tableAttrs[tagName] || '';\r\n\t\t//To ensure the attribute list starts with a space\r\n\t\tif(attrs && attrs[0] != ' '){\r\n\t\t\tattrs = ' ' + attrs;\r\n\t\t}\r\n\t\treturn attrs;\t//String\r\n\t},\r\n\r\n\t_getRowClass: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tGet CSS class string for a row\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\treturn arg_obj.isHeader ? \" grid_header\" : [//String\r\n\t\t\t\" grid_row grid_row_\",\r\n\t\t\targ_obj.rowIdx + 1,\r\n\t\t\targ_obj.rowIdx % 2 ? \" grid_even_row\" : \" grid_odd_row\"\r\n\t\t].join('');\r\n\t},\r\n\r\n\t_getColumnClass: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tGet CSS class string for a column\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tvar col_idx = arg_obj.cell.index + arg_obj.colOffset + 1;\r\n\t\treturn [\" grid_column grid_column_\", col_idx,//String\r\n\t\t\t\tcol_idx % 2 ? \" grid_odd_column\" : \" grid_even_column\"].join('');\r\n\t},\r\n\r\n\tbeforeView: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar viewIdx = arg_obj.viewIdx,\r\n\t\t\ttable = this._viewTables[viewIdx],\r\n\t\t\theight, width = domGeometry.getMarginBox(arg_obj.view.contentNode).w;\r\n\t\tif(!table){\r\n\t\t\tvar left = 0;\r\n\t\t\tfor(var i = 0; i < viewIdx; ++i){\r\n\t\t\t\tleft += this._viewTables[i]._width;\r\n\t\t\t}\r\n\t\t\ttable = this._viewTables[viewIdx] = ['<div class=\"grid_view\" style=\"position: absolute; top: 0; ',\r\n\t\t\t\tdomGeometry.isBodyLtr() ? 'left' : 'right', ':', left,\r\n\t\t\t\t'px;\">'];\r\n\t\t}\r\n\t\ttable._width = width;\r\n\t\tif(arg_obj.isHeader){\r\n\t\t\theight = domGeometry.getContentBox(arg_obj.view.headerContentNode).h;\r\n\t\t}else{\r\n\t\t\tvar rowNode = arg_obj.grid.getRowNode(arg_obj.rowIdx);\r\n\t\t\tif(rowNode){\r\n\t\t\t\theight = domGeometry.getContentBox(rowNode).h;\r\n\t\t\t}else{\r\n\t\t\t\t//This row has not been loaded from store, so we should estimate it's height.\r\n\t\t\t\theight = arg_obj.grid.scroller.averageRowHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttable.push('<table class=\"', this._getRowClass(arg_obj), \r\n\t\t\t'\" style=\"table-layout:fixed; height:', height, 'px; width:', width, 'px;\" ', \r\n\t\t\t'border=\"0\" cellspacing=\"0\" cellpadding=\"0\" ',\r\n\t\t\tthis._getTableAttrs(\"table\"),\r\n\t\t\t'><tbody ', this._getTableAttrs('tbody'), '>');\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\r\n\tafterView: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tthis._viewTables[arg_obj.viewIdx].push('</tbody></table>');\r\n\t},\r\n\r\n\tbeforeSubrow: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tthis._viewTables[arg_obj.viewIdx].push('<tr', this._getTableAttrs('tr'), '>');\r\n\t\treturn true;\t//Boolean\r\n\t},\r\n\r\n\tafterSubrow: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tthis._viewTables[arg_obj.viewIdx].push('</tr>');\r\n\t},\r\n\r\n\thandleCell: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar cell = arg_obj.cell;\r\n\t\tif(cell.hidden || array.indexOf(arg_obj.spCols, cell.index) >= 0){\r\n\t\t\t//We are not interested in indirect selectors and row indexes.\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar cellTagName = arg_obj.isHeader ? 'th' : 'td',\r\n\t\t\tattrs = [cell.colSpan ? ' colspan=\"' + cell.colSpan + '\"' : '',\r\n\t\t\t\t\tcell.rowSpan ? ' rowspan=\"' + cell.rowSpan + '\"' : '',\r\n\t\t\t\t\t' style=\"width: ', domGeometry.getContentBox(cell.getHeaderNode()).w, 'px;\"',\r\n\t\t\t\t\tthis._getTableAttrs(cellTagName),\r\n\t\t\t\t\t' class=\"', this._getColumnClass(arg_obj), '\"'].join(''),\r\n\t\t\ttable = this._viewTables[arg_obj.viewIdx];\r\n\t\ttable.push('<', cellTagName, attrs, '>');\r\n\t\tif(arg_obj.isHeader){\r\n\t\t\ttable.push(cell.name || cell.field);\r\n\t\t} else{\r\n\t\t\ttable.push(this._getExportDataForCell(arg_obj.rowIdx, arg_obj.row, cell, arg_obj.grid));\r\n\t\t}\r\n\t\ttable.push('</', cellTagName, '>');\r\n\t},\r\n\r\n\tafterContent: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tarray.forEach(this._viewTables, function(table){\r\n\t\t\ttable.push('</div>');\r\n\t\t});\r\n\t},\r\n\r\n\ttoString: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar viewsHTML = array.map(this._viewTables, function(table){\t//String\r\n\t\t\treturn table.join('');\r\n\t\t}).join('');\r\n\t\treturn ['<div style=\"position: relative;\">', viewsHTML, '</div>'].join('');\r\n\t}\r\n});\r\n});\r\n"]}