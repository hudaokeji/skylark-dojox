{"version":3,"sources":["grid/enhanced/plugins/exporter/CSVWriter.js"],"names":["define","declare","array","_ExportWriter","Exporter","registerWriter","_separator","_newline","constructor","writerArgs","this","separator","newline","_headers","_dataRows","_formatCSVCell","cellValue","undefined","result","String","replace","indexOf","search","beforeContentRow","arg_obj","row","func","forEach","grid","layout","cells","cell","hidden","spCols","index","push","_getExportDataForCell","rowIndex","handleCell","isHeader","name","field","toString","join","i","length"],"mappings":";;;;;;;AAAAA,QACC,qBACA,mBACA,kBACA,eACE,SAASC,EAASC,EAAOC,EAAeC,GAI3C,OAFAA,EAASC,eAAe,MAAO,kDAExBJ,EAAQ,iDAAkDE,GAGhEG,WAAY,IAEZC,SAAU,OAEVC,YAAa,SAAsBC,GAM/BA,IACFC,KAAKJ,WAAaG,EAAWE,UAAYF,EAAWE,UAAYD,KAAKJ,WACrEI,KAAKH,SAAWE,EAAWG,QAAUH,EAAWG,QAAUF,KAAKH,UAEhEG,KAAKG,YACLH,KAAKI,cAGNC,eAAgB,SAAqBC,GAUpC,GAAiB,OAAdA,QAAoCC,IAAdD,EACxB,MAAO,GAER,IAAIE,EAASC,OAAOH,GAAWI,QAAQ,KAAM,MAI7C,OAHGF,EAAOG,QAAQX,KAAKJ,aAAe,GAAKY,EAAOI,OAAO,eAAiB,KACzEJ,EAAS,IAAMA,EAAS,KAElBA,GAGRK,iBAAkB,SAAqBC,GAGtC,IAAIC,KACHC,EAAOhB,KAAKK,eAUb,OATAb,EAAMyB,QAAQH,EAAQI,KAAKC,OAAOC,MAAO,SAASC,IAE7CA,EAAKC,QAAU9B,EAAMmB,QAAQG,EAAQS,OAAOF,EAAKG,OAAS,GAE7DT,EAAIU,KAAKT,EAAKhB,KAAK0B,sBAAsBZ,EAAQa,SAAUb,EAAQC,IAAKM,EAAMP,EAAQI,SAErFlB,MACHA,KAAKI,UAAUqB,KAAKV,IAEb,GAGRa,WAAY,SAAqBd,GAGhC,IAAIO,EAAOP,EAAQO,KAChBP,EAAQe,WAAaR,EAAKC,QAAU9B,EAAMmB,QAAQG,EAAQS,OAAOF,EAAKG,OAAS,GACjFxB,KAAKG,SAASsB,KAAKJ,EAAKS,MAAQT,EAAKU,QAIvCC,SAAU,WAIT,IADA,IAAIxB,EAASR,KAAKG,SAAS8B,KAAKjC,KAAKJ,YAC7BsC,EAAIlC,KAAKI,UAAU+B,OAAS,EAAGD,GAAK,IAAKA,EAChDlC,KAAKI,UAAU8B,GAAKlC,KAAKI,UAAU8B,GAAGD,KAAKjC,KAAKJ,YAEjD,OAAOY,EAASR,KAAKH,SAAWG,KAAKI,UAAU6B,KAAKjC,KAAKH","file":"../../../../../grid/enhanced/plugins/exporter/CSVWriter.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"./_ExportWriter\",\r\n\t\"../Exporter\"\r\n], function(declare, array, _ExportWriter, Exporter){\r\n\r\nExporter.registerWriter(\"csv\", \"dojox.grid.enhanced.plugins.exporter.CSVWriter\");\r\n\r\nreturn declare(\"dojox.grid.enhanced.plugins.exporter.CSVWriter\", _ExportWriter, {\r\n\t// summary:\r\n\t//\t\tExport grid to CSV format.\r\n\t_separator: ',',\r\n\r\n\t_newline: \"\\r\\n\",\r\n\r\n\tconstructor: function(/* object? */writerArgs){\r\n\t\t// summary:\r\n\t\t//\t\tCSV default separator is ','.\r\n\t\t//\t\tBut we can also use our own.\r\n\t\t// writerArgs: object?\r\n\t\t//\t\t{separator:'...'}\r\n\t\tif(writerArgs){\r\n\t\t\tthis._separator = writerArgs.separator ? writerArgs.separator : this._separator;\r\n\t\t\tthis._newline = writerArgs.newline ? writerArgs.newline : this._newline;\r\n\t\t}\r\n\t\tthis._headers = [];\r\n\t\tthis._dataRows = [];\r\n\t},\r\n\r\n\t_formatCSVCell: function(/* string */cellValue){\r\n\t\t// summary:\r\n\t\t//\t\tFormat cell value to follow CSV standard.\r\n\t\t//\t\tSee: http://en.wikipedia.org/wiki/Comma-separated_values\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// cellValue: string\r\n\t\t//\t\tThe value in a cell.\r\n\t\t// returns:\r\n\t\t//\t\tThe formatted content of a cell\r\n\t\tif(cellValue === null || cellValue === undefined){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tvar result = String(cellValue).replace(/\"/g, '\"\"');\r\n\t\tif(result.indexOf(this._separator) >= 0 || result.search(/[\" \\t\\r\\n]/) >= 0){\r\n\t\t\tresult = '\"' + result + '\"';\r\n\t\t}\r\n\t\treturn result;\t//String\r\n\t},\r\n\r\n\tbeforeContentRow: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar row = [],\r\n\t\t\tfunc = this._formatCSVCell;\r\n\t\tarray.forEach(arg_obj.grid.layout.cells, function(cell){\r\n\t\t\t//We are not interested in indirect selectors and row indexes.\r\n\t\t\tif(!cell.hidden && array.indexOf(arg_obj.spCols,cell.index) < 0){\r\n\t\t\t\t//We only need data here, not html\r\n\t\t\t\trow.push(func(this._getExportDataForCell(arg_obj.rowIndex, arg_obj.row, cell, arg_obj.grid)));\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis._dataRows.push(row);\r\n\t\t//We do not need to go into the row.\r\n\t\treturn false;\t//Boolean\r\n\t},\r\n\r\n\thandleCell: function(/* object */arg_obj){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar cell = arg_obj.cell;\r\n\t\tif(arg_obj.isHeader && !cell.hidden && array.indexOf(arg_obj.spCols,cell.index) < 0){\r\n\t\t\tthis._headers.push(cell.name || cell.field);\r\n\t\t}\r\n\t},\r\n\r\n\ttoString: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrided from _ExportWriter\r\n\t\tvar result = this._headers.join(this._separator);\r\n\t\tfor(var i = this._dataRows.length - 1; i >= 0; --i){\r\n\t\t\tthis._dataRows[i] = this._dataRows[i].join(this._separator);\r\n\t\t}\r\n\t\treturn result + this._newline + this._dataRows.join(this._newline);\t//String\r\n\t}\r\n});\r\n});\r\n"]}