{"version":3,"sources":["grid/enhanced/plugins/Printer.js"],"names":["define","declare","html","Deferred","lang","has","xhr","array","query","DeferredList","_Plugin","EnhancedGrid","TableWriter","Printer","name","constructor","grid","this","_mixinGrid","setExportFormatter","data","cell","rowIndex","rowItem","format","g","printGrid","hitch","printSelected","exportToHTML","exportSelectedToHTML","normalizePrintedGrid","normalizeRowHeight","args","_print","onExported","_formalizeArgs","_this","exportGrid","str","_wrapHTML","title","cssFiles","titleInBody","then","exportSelected","writerArgs","_loadCSSFiles","dl","map","cssFile","trim","substring","length","toLowerCase","get","url","d","callback","prototype","gatherResults","htmlStr","win","fillDoc","w","doc","document","open","write","close","window","print","fn","_printFrame","dn","domNode","frameId","id","byId","create","frameBorder","style","width","height","position","right","bottom","border","overflow","appendChild","contentWindow","focus","body_content","cssStrs","i","sb","_isBodyLtr","push","search","join","v","h","views","body","headPerView","view","rowsPerView","rowCount","maxHeight","contentBox","left","ltr","marginBox","isObject","String","isArray","registerPlugin","dependency"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,sBACA,kBACA,mBACA,iBACA,mBACA,aACA,oBACA,aACA,qBACA,0BACE,SAASC,EAASC,EAAMC,EAAUC,EAAMC,EAAKC,EAAKC,EAAOC,EAAOC,EAAcC,EAASC,EAAcC,GAExG,IAAIC,EAAUZ,EAAQ,sCAAuCS,GAmC5DI,KAAM,UAENC,YAAa,SAASC,GAKrBC,KAAKD,KAAOA,EACZC,KAAKC,WAAWF,GAGhBA,EAAKG,mBAAmB,SAASC,EAAMC,EAAMC,EAAUC,GACtD,OAAOF,EAAKG,OAAOF,EAAUC,MAG/BL,WAAY,WACX,IAAIO,EAAIR,KAAKD,KACbS,EAAEC,UAAYtB,EAAKuB,MAAMV,KAAMA,KAAKS,WACpCD,EAAEG,cAAgBxB,EAAKuB,MAAMV,KAAMA,KAAKW,eACxCH,EAAEI,aAAezB,EAAKuB,MAAMV,KAAMA,KAAKY,cACvCJ,EAAEK,qBAAuB1B,EAAKuB,MAAMV,KAAMA,KAAKa,sBAC/CL,EAAEM,qBAAuB3B,EAAKuB,MAAMV,KAAMA,KAAKe,qBAEhDN,UAAW,SAASO,GAUnBhB,KAAKY,aAAaI,EAAM7B,EAAKuB,MAAMV,KAAMA,KAAKiB,UAE/CN,cAAe,SAASK,GAQvBhB,KAAKa,qBAAqBG,EAAM7B,EAAKuB,MAAMV,KAAMA,KAAKiB,UAEvDL,aAAc,SAASI,EAAME,GAW5BF,EAAOhB,KAAKmB,eAAeH,GAC3B,IAAII,EAAQpB,KACZA,KAAKD,KAAKsB,WAAW,QAASL,EAAM,SAASM,GAC5CF,EAAMG,UAAUP,EAAKQ,MAAOR,EAAKS,SAAUT,EAAKU,YAAcJ,GAAKK,KAAKT,MAG1EL,qBAAsB,SAASG,EAAME,GASpCF,EAAOhB,KAAKmB,eAAeH,GAC3B,IAAII,EAAQpB,KACZA,KAAKD,KAAK6B,eAAe,QAASZ,EAAKa,WAAY,SAASP,GAC3DF,EAAMG,UAAUP,EAAKQ,MAAOR,EAAKS,SAAUT,EAAKU,YAAcJ,GAAKK,KAAKT,MAI1EY,cAAe,SAASL,GACvB,IAAIM,EAAKzC,EAAM0C,IAAIP,EAAU,SAASQ,GAErC,GAA2D,UAD3DA,EAAU9C,EAAK+C,KAAKD,IACTE,UAAUF,EAAQG,OAAS,GAAGC,cACxC,OAAOhD,EAAIiD,KACVC,IAAKN,IAGN,IAAIO,EAAI,IAAItD,EAEZ,OADAsD,EAAEC,SAASR,GACJO,IAGT,OAAOhD,EAAakD,UAAUC,cAAcZ,IAE7Cd,OAAQ,SAAqB2B,GAS5B,IAAIC,EAAKzB,EAAQpB,KAChB8C,EAAU,SAASC,GAClB,IAAIC,EAAMD,EAAEE,SACZD,EAAIE,OACJF,EAAIG,MAAMP,GACVI,EAAII,QACJhC,EAAML,mBAAmBiC,IAE3B,GAAIK,OAAOC,MAGL,GAAGlE,EAAI,WAAaA,EAAI,SAO7B0D,EAFAD,EAAMQ,OAAOH,KAAK,iBAAkB,GACnC,sFAEDL,EAAIS,QAKJT,EAAIO,YACA,CAEJ,IAAIG,EAAKvD,KAAKwD,YACbC,EAAKzD,KAAKD,KAAK2D,QAChB,IAAIH,EAAG,CACN,IAAII,EAAUF,EAAGG,GAAK,gBACjBL,EAAKtE,EAAK4E,KAAKF,OAEnBJ,EAAKtE,EAAK6E,OAAO,WACdF,GAAKD,EACRJ,EAAGQ,YAAc,EACjB9E,EAAK+E,MAAMT,GACVU,MAAO,MACPC,OAAQ,MACRC,SAAU,WACVC,MAAO,EACPC,OAAQ,EACRC,OAAQ,OACRC,SAAU,WAEPnF,EAAI,OACPH,EAAK+E,MAAMT,EAAI,aAAc,UAE9BE,EAAGe,YAAYjB,IAGhBvD,KAAKwD,YAAcD,EAGpBT,EADAD,EAAMU,EAAGkB,eAGT5B,EAAI6B,QACJ7B,EAAIS,UAGN/B,UAAW,SAAqBC,EAAkBC,EAAsBkD,GAavE,OAAO3E,KAAK8B,cAAcL,GAAUE,KAAK,SAASiD,GACjD,IAAIC,EAAGC,GAAM,yGACX,SAAU7F,EAAK8F,aAAe,GAAK,YAAa,iBAAkBvD,EAClE,sFACF,IAAIqD,EAAI,EAAGA,EAAID,EAAQxC,SAAUyC,EAChCC,EAAGE,KAAK,0BAA2BJ,EAAQC,GAAI,YAOhD,OALAC,EAAGE,KAAK,WACLL,EAAaM,OAAO,cAAgB,IACtCN,EAAe,SAAWA,EAAe,WAE1CG,EAAGE,KAAKL,EAAc,WACfG,EAAGI,KAAK,OAGjBnE,mBAAoB,SAASiC,GAC5B,IAQI6B,EAAGM,EAAGC,EARNC,EAAQ9F,EAAM,aAAcyD,EAAIsC,MAChCC,EAAcjG,EAAM0C,IAAIqD,EAAO,SAASG,GAC3C,OAAOjG,EAAM,eAAgBiG,GAAM,KAEhCC,EAAcnG,EAAM0C,IAAIqD,EAAO,SAASG,GAC3C,OAAOjG,EAAM,YAAaiG,KAEvBE,EAAWD,EAAY,GAAGrD,OACjBuD,EAAY,EACzB,IAAIR,EAAIE,EAAMjD,OAAS,EAAG+C,GAAK,IAAKA,GACnCC,EAAInG,EAAK2G,WAAWL,EAAYJ,IAAIC,GAC7BO,IACNA,EAAYP,GAGd,IAAID,EAAIE,EAAMjD,OAAS,EAAG+C,GAAK,IAAKA,EACnClG,EAAK+E,MAAMuB,EAAYJ,GAAI,SAAUQ,EAAY,MAElD,IAAId,EAAI,EAAGA,EAAIa,IAAYb,EAAE,CAE5B,IADAc,EAAY,EACRR,EAAIE,EAAMjD,OAAS,EAAG+C,GAAK,IAAKA,GACnCC,EAAInG,EAAK2G,WAAWH,EAAYN,GAAGN,IAAIO,GAChCO,IACNA,EAAYP,GAGd,IAAID,EAAIE,EAAMjD,OAAS,EAAG+C,GAAK,IAAKA,EACnClG,EAAK+E,MAAMyB,EAAYN,GAAGN,GAAI,SAAUc,EAAY,MAGtD,IAAIE,EAAO,EAAGC,EAAM7G,EAAK8F,aACzB,IAAII,EAAI,EAAGA,EAAIE,EAAMjD,SAAU+C,EAC9BlG,EAAK+E,MAAMqB,EAAMF,GAAIW,EAAM,OAAS,QAASD,EAAO,MACpDA,GAAQ5G,EAAK8G,UAAUV,EAAMF,IAAIpC,GAGnC5B,eAAgB,SAASH,GAOxB,OANAA,EAAQA,GAAQ7B,EAAK6G,SAAShF,GAASA,MAClCQ,MAAQyE,OAAOjF,EAAKQ,QAAU,GAC/BrC,EAAK+G,QAAQlF,EAAKS,YACrBT,EAAKS,UAAYT,EAAKS,WAEvBT,EAAKU,YAAcV,EAAKQ,OAAS,OAAQR,EAAKQ,MAAO,SAAS0D,KAAK,IAAM,GAClElE,KAQT,OAJAtB,EAAayG,eAAevG,GAC3BwG,YAAe,cAGTxG","file":"../../../../grid/enhanced/plugins/Printer.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/html\",\r\n\t\"dojo/_base/Deferred\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojo/_base/xhr\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/query\", \r\n\t\"dojo/DeferredList\",\r\n\t\"../_Plugin\",\r\n\t\"../../EnhancedGrid\",\r\n\t\"./exporter/TableWriter\"\r\n], function(declare, html, Deferred, lang, has, xhr, array, query, DeferredList, _Plugin, EnhancedGrid, TableWriter){\r\n\r\nvar Printer = declare(\"dojox.grid.enhanced.plugins.Printer\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tProvide printGrid function to the grid.\r\n\t// example:\r\n\t//\t|\tdojo.require(\"dojox.grid.enhanced.plugins.Printer\");\r\n\t//\t|\tdijit.byId(\"grid1\").printGrid(\"my grid\",\t\t\t\t\t//A title for the grid,optional\r\n\t//\t|\t\t\t\t\t\t\t\t[\"cssfile1.css\",\"cssfile2.css\"],//An array of css files to decorate the printed gird,optional\r\n\t//\t|\t\t\t\t\t\t\t\t{table:\"border='border'\"}\t\t//tagName:\"attrbuteList\" pairs, optional,\r\n\t//\t|\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//control the html tags in the generated html\r\n\t//\t|\t);\r\n\r\n\t/*=====\r\n\t__printArgs: {\r\n\t\t// title: String\r\n\t\t//\t\tA title of the printed page can be specified. Optional.\r\n\t\t//\t\tIf given, it's shown in an <h1> tag at the top of the page.\r\n\t\t// cssFiles: Array|String\r\n\t\t//\t\tCSS file paths. Optional.\r\n\t\t//\t\tEvery row and column is given CSS classes, including:\r\n\t\t//\r\n\t\t//\t\t- grid_row_{row-number}, grid_odd_row, grid_even_row, grid_header,\r\n\t\t//\t\t\t\tgrid_col_{col-number}, grid_odd_col, grid_even_col\r\n\t\t//\t\t- {row_number} and {col-number} are both integers starting from 1.\r\n\t\t//\t\t- Row classes are for <thead> and <tbody> tags.\r\n\t\t//\t\t- Column classes are for <th> and <td> tags.\r\n\t\t//\t\t- Users can use these classes in the CSS files, but cannot define their own.\r\n\t\t// writerArgs: Object\r\n\t\t//\t\t Associative Array, arguments for TableWriter.\r\n\t\t// fetchArgs: object?\r\n\t\t//\t\tAny arguments for store.fetch\r\n\t},\r\n\t=====*/\r\n\t\r\n\t// name: String\r\n\t//\t\tPlugin name\r\n\tname: \"printer\",\r\n\t\r\n\tconstructor: function(grid){\r\n\t\t// summary:\r\n\t\t//\t\tonly newed by _Plugin\r\n\t\t// inGrid: EnhancedGrid\r\n\t\t//\t\tThe grid to plug in to.\r\n\t\tthis.grid = grid;\r\n\t\tthis._mixinGrid(grid);\r\n\t\t\r\n\t\t//For print, we usually need the HTML instead of raw data.\r\n\t\tgrid.setExportFormatter(function(data, cell, rowIndex, rowItem){\r\n\t\t\treturn cell.format(rowIndex, rowItem);\r\n\t\t});\r\n\t},\r\n\t_mixinGrid: function(){\r\n\t\tvar g = this.grid;\r\n\t\tg.printGrid = lang.hitch(this, this.printGrid);\r\n\t\tg.printSelected = lang.hitch(this, this.printSelected);\r\n\t\tg.exportToHTML = lang.hitch(this, this.exportToHTML);\r\n\t\tg.exportSelectedToHTML = lang.hitch(this, this.exportSelectedToHTML);\r\n\t\tg.normalizePrintedGrid = lang.hitch(this, this.normalizeRowHeight);\r\n\t},\r\n\tprintGrid: function(args){\r\n\t\t// summary:\r\n\t\t//\t\tPrint all the data in the grid, using title as a title,\r\n\t\t//\t\tdecorating generated html by cssFiles,\r\n\t\t//\t\tusing tagName:\"attrbuteList\" pairs(writerArgs) to control html tags\r\n\t\t//\t\tin the generated html string.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// args: __printArgs?\r\n\t\t//\t\tArguments for print.\r\n\t\tthis.exportToHTML(args, lang.hitch(this, this._print));\r\n\t},\r\n\tprintSelected: function(args){\r\n\t\t// summary:\r\n\t\t//\t\tPrint selected data. All other features are the same as printGrid.\r\n\t\t//\t\tFor meaning of arguments see function *printGrid*\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// args: __printArgs?\r\n\t\t//\t\tArguments for print.\r\n\t\tthis.exportSelectedToHTML(args, lang.hitch(this, this._print));\r\n\t},\r\n\texportToHTML: function(args, onExported){\r\n\t\t// summary:\r\n\t\t//\t\tExport to HTML string, but do NOT print.\r\n\t\t//\t\tUsers can use this to implement print preview.\r\n\t\t//\t\tFor meaning of the 1st-3rd arguments see function *printGrid*.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// args: __printArgs?\r\n\t\t//\t\tArguments for print.\r\n\t\t// onExported: function(string)\r\n\t\t//\t\tcall back function\r\n\t\targs = this._formalizeArgs(args);\r\n\t\tvar _this = this;\r\n\t\tthis.grid.exportGrid(\"table\", args, function(str){\r\n\t\t\t_this._wrapHTML(args.title, args.cssFiles, args.titleInBody + str).then(onExported);\r\n\t\t});\r\n\t},\r\n\texportSelectedToHTML: function(args, onExported){\r\n\t\t// summary:\r\n\t\t//\t\tExport selected rows to HTML string, but do NOT print.\r\n\t\t//\t\tUsers can use this to implement print preview.\r\n\t\t//\t\tFor meaning of arguments see function *printGrid*\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t// args: __printArgs?\r\n\t\t//\t\tArguments for print.\r\n\t\targs = this._formalizeArgs(args);\r\n\t\tvar _this = this;\r\n\t\tthis.grid.exportSelected(\"table\", args.writerArgs, function(str){\r\n\t\t\t_this._wrapHTML(args.title, args.cssFiles, args.titleInBody + str).then(onExported);\r\n\t\t});\r\n\t},\r\n\r\n\t_loadCSSFiles: function(cssFiles){\r\n\t\tvar dl = array.map(cssFiles, function(cssFile){\r\n\t\t\tcssFile = lang.trim(cssFile);\r\n\t\t\tif(cssFile.substring(cssFile.length - 4).toLowerCase() === '.css'){\r\n\t\t\t\treturn xhr.get({\r\n\t\t\t\t\turl: cssFile\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tvar d = new Deferred();\r\n\t\t\t\td.callback(cssFile);\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn DeferredList.prototype.gatherResults(dl);\r\n\t},\r\n\t_print: function(/* string */htmlStr){\r\n\t\t// summary:\r\n\t\t//\t\tDo the print job.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// htmlStr: String\r\n\t\t//\t\tThe html content string to be printed.\r\n\t\t// returns:\r\n\t\t//\t\tundefined\r\n\t\tvar win, _this = this,\r\n\t\t\tfillDoc = function(w){\r\n\t\t\t\tvar doc = w.document;\r\n\t\t\t\tdoc.open();\r\n\t\t\t\tdoc.write(htmlStr);\r\n\t\t\t\tdoc.close();\r\n\t\t\t\t_this.normalizeRowHeight(doc);\r\n\t\t\t};\r\n\t\tif(!window.print){\r\n\t\t\t//We don't have a print facility.\r\n\t\t\treturn;\r\n\t\t}else if(has('chrome') || has('opera')){\r\n\t\t\t//referred from dijit._editor.plugins.Print._print()\r\n\t\t\t//In opera and chrome the iframe.contentWindow.print\r\n\t\t\t//will also print the outside window. So we must create a\r\n\t\t\t//stand-alone new window.\r\n\t\t\twin = window.open(\"javascript: ''\", \"\",\r\n\t\t\t\t\"status=0,menubar=0,location=0,toolbar=0,width=1,height=1,resizable=0,scrollbars=0\");\r\n\t\t\tfillDoc(win);\r\n\t\t\twin.print();\r\n\t\t\t//Opera will stop at this point, showing the popping-out window.\r\n\t\t\t//If the user closes the window, the following codes will not execute.\r\n\t\t\t//If the user returns focus to the main window, the print function\r\n\t\t\t// is executed, but still a no-op.\r\n\t\t\twin.close();\r\n\t\t}else{\r\n\t\t\t//Put private things in deeper namespace to avoid poluting grid namespace.\r\n\t\t\tvar fn = this._printFrame,\r\n\t\t\t\tdn = this.grid.domNode;\r\n\t\t\tif(!fn){\r\n\t\t\t\tvar frameId = dn.id + \"_print_frame\";\r\n\t\t\t\tif(!(fn = html.byId(frameId))){\r\n\t\t\t\t\t//create an iframe to store the grid data.\r\n\t\t\t\t\tfn = html.create(\"iframe\");\r\n\t\t\t\t\tfn.id = frameId;\r\n\t\t\t\t\tfn.frameBorder = 0;\r\n\t\t\t\t\thtml.style(fn, {\r\n\t\t\t\t\t\twidth: \"1px\",\r\n\t\t\t\t\t\theight: \"1px\",\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\tright: 0,\r\n\t\t\t\t\t\tbottom: 0,\r\n\t\t\t\t\t\tborder: \"none\",\r\n\t\t\t\t\t\toverflow: \"hidden\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(!has('ie')){\r\n\t\t\t\t\t\thtml.style(fn, \"visibility\", \"hidden\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdn.appendChild(fn);\r\n\t\t\t\t}\r\n\t\t\t\t//Reuse this iframe\r\n\t\t\t\tthis._printFrame = fn;\r\n\t\t\t}\r\n\t\t\twin = fn.contentWindow;\r\n\t\t\tfillDoc(win);\r\n\t\t\t//IE requires the frame to be focused for print to work, and it's harmless for FF.\r\n\t\t\twin.focus();\r\n\t\t\twin.print();\r\n\t\t}\r\n\t},\r\n\t_wrapHTML: function(/* string */title, /* Array */cssFiles, /* string */body_content){\r\n\t\t// summary:\r\n\t\t//\t\tPut title, cssFiles, and body_content together into an HTML string.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\t// title: String\r\n\t\t//\t\tA title for the html page.\r\n\t\t// cssFiles: Array\r\n\t\t//\t\tcss file pathes.\r\n\t\t// body_content: String\r\n\t\t//\t\tContent to print, not including <head></head> part and <html> tags\r\n\t\t// returns:\r\n\t\t//\t\tthe wrapped HTML string ready for print\r\n\t\treturn this._loadCSSFiles(cssFiles).then(function(cssStrs){\r\n\t\t\tvar i, sb = ['<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">',\r\n\t\t\t\t\t'<html ', html._isBodyLtr() ? '' : 'dir=\"rtl\"', '><head><title>', title,\r\n\t\t\t\t\t'</title><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"></meta>'];\r\n\t\t\tfor(i = 0; i < cssStrs.length; ++i){\r\n\t\t\t\tsb.push('<style type=\"text/css\">', cssStrs[i], '</style>');\r\n\t\t\t}\r\n\t\t\tsb.push('</head>');\r\n\t\t\tif(body_content.search(/^\\s*<body/i) < 0){\r\n\t\t\t\tbody_content = '<body>' + body_content + '</body>';\r\n\t\t\t}\r\n\t\t\tsb.push(body_content, '</html>');\r\n\t\t\treturn sb.join('');\r\n\t\t});\r\n\t},\r\n\tnormalizeRowHeight: function(doc){\r\n\t\tvar views = query(\".grid_view\", doc.body);\r\n\t\tvar headPerView = array.map(views, function(view){\r\n\t\t\treturn query(\".grid_header\", view)[0];\r\n\t\t});\r\n\t\tvar rowsPerView = array.map(views, function(view){\r\n\t\t\treturn query(\".grid_row\", view);\r\n\t\t});\r\n\t\tvar rowCount = rowsPerView[0].length;\r\n\t\tvar i, v, h, maxHeight = 0;\r\n\t\tfor(v = views.length - 1; v >= 0; --v){\r\n\t\t\th = html.contentBox(headPerView[v]).h;\r\n\t\t\tif(h > maxHeight){\r\n\t\t\t\tmaxHeight = h;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(v = views.length - 1; v >= 0; --v){\r\n\t\t\thtml.style(headPerView[v], \"height\", maxHeight + \"px\");\r\n\t\t}\r\n\t\tfor(i = 0; i < rowCount; ++i){\r\n\t\t\tmaxHeight = 0;\r\n\t\t\tfor(v = views.length - 1; v >= 0; --v){\r\n\t\t\t\th = html.contentBox(rowsPerView[v][i]).h;\r\n\t\t\t\tif(h > maxHeight){\r\n\t\t\t\t\tmaxHeight = h;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(v = views.length - 1; v >= 0; --v){\r\n\t\t\t\thtml.style(rowsPerView[v][i], \"height\", maxHeight + \"px\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar left = 0, ltr = html._isBodyLtr();\r\n\t\tfor(v = 0; v < views.length; ++v){\r\n\t\t\thtml.style(views[v], ltr ? \"left\" : \"right\", left + \"px\");\r\n\t\t\tleft += html.marginBox(views[v]).w;\r\n\t\t}\r\n\t},\r\n\t_formalizeArgs: function(args){\r\n\t\targs = (args && lang.isObject(args)) ? args : {};\r\n\t\targs.title = String(args.title) || \"\";\r\n\t\tif(!lang.isArray(args.cssFiles)){\r\n\t\t\targs.cssFiles = [args.cssFiles];\r\n\t\t}\r\n\t\targs.titleInBody = args.title ? ['<h1>', args.title, '</h1>'].join('') : '';\r\n\t\treturn args;\t//Object\r\n\t}\r\n});\r\n\r\nEnhancedGrid.registerPlugin(Printer/*name:'printer'*/, {\r\n\t\"dependency\": [\"exporter\"]\r\n});\r\n\r\nreturn Printer;\r\n});\r\n"]}