{"version":3,"sources":["grid/enhanced/plugins/GridSource.js"],"names":["define","declare","array","lang","Source","DnD","_joinToArray","arrays","a","i","length","concat","GridDnDSource","getObject","accept","insertNodesForGrid","markupFactory","params","node","cls","checkAcceptance","source","nodes","item","getItem","id","indexOf","type","dndPlugin","_allDnDItemsLoaded","this","sourcePlugin","inherited","arguments","onDraggingOver","_isSource","onDraggingOut","onDropExternal","copy","range","ranges","map","data","grid","innerHTML","getCellContent","min","max","onDropGridCells","getRowContent","onDropGridRows","getColumnContent","onDropGridColumns","selectNone","insertNodes","before","current","onDragOut","e","console","warn","leftTopCell","rightBottomCell","rowIndexes","colIndexes"],"mappings":";;;;;;;AAAAA,QACC,qBACA,mBACA,kBACA,kBACA,SACE,SAASC,EAASC,EAAOC,EAAMC,EAAQC,GAE1C,IAAIC,EAAe,SAASC,GAE3B,IADA,IAAIC,EAAID,EAAO,GACPE,EAAI,EAAGA,EAAIF,EAAOG,SAAUD,EACnCD,EAAIA,EAAEG,OAAOJ,EAAOE,IAErB,OAAOD,GAGJI,EAAgBT,EAAKU,UAAU,6CAEnC,OAAOZ,EAAQ,yCAA0CG,GAIxDU,QAAS,aAAc,YAAa,YAAa,QAMjDC,oBAAoB,EAEpBC,cAAe,SAASC,EAAQC,GAE/B,OADAC,IAAMhB,EAAKU,UAAU,0CACd,IAAIM,IAAID,EAAMD,IAEtBG,gBAAiB,SAASC,EAAQC,GACjC,GAAGD,aAAkBT,EAAc,CAClC,GAAGU,EAAM,GAAG,CACX,IAAIC,EAAOF,EAAOG,QAAQF,EAAM,GAAGG,IACnC,GAAGF,IAASrB,EAAMwB,QAAQH,EAAKI,KAAM,cAAgB,GAAKzB,EAAMwB,QAAQH,EAAKI,KAAM,eAAiB,KAClGN,EAAOO,UAAUC,qBAClB,OAAO,EAGTC,KAAKC,aAAeV,EAAOO,UAE5B,OAAOE,KAAKE,UAAUC,YAEvBC,eAAgB,WACZJ,KAAKC,eACPD,KAAKC,aAAaI,WAAY,IAGhCC,cAAe,WACXN,KAAKC,eACPD,KAAKC,aAAaI,WAAY,IAGhCE,eAAgB,SAAShB,EAAQC,EAAOgB,GACvC,GAAGjB,aAAkBT,EAAc,CAClC,IAMI2B,EANAC,EAAStC,EAAMuC,IAAInB,EAAO,SAASJ,GACtC,OAAOG,EAAOG,QAAQN,EAAKO,IAAIiB,OAE5BnB,EAAOF,EAAOG,QAAQF,EAAM,GAAGG,IAC/BkB,EAAOpB,EAAKK,UAAUe,KACtBhB,EAAOJ,EAAKI,KAAK,GAErB,IACC,OAAOA,GACN,IAAK,aACJL,EAAM,GAAGsB,UAAYd,KAAKe,eAAeF,EAAMH,EAAO,GAAGM,IAAKN,EAAO,GAAGO,MAAQ,GAChFjB,KAAKkB,gBAAgBL,EAAMH,EAAO,GAAGM,IAAKN,EAAO,GAAGO,KACpD,MACD,IAAK,YACJR,EAAQjC,EAAakC,GACrBlB,EAAM,GAAGsB,UAAYd,KAAKmB,cAAcN,EAAMJ,IAAU,GACxDT,KAAKoB,eAAeP,EAAMJ,GAC1B,MACD,IAAK,YACJA,EAAQjC,EAAakC,GACrBlB,EAAM,GAAGsB,UAAYd,KAAKqB,iBAAiBR,EAAMJ,IAAU,GAC3DT,KAAKsB,kBAAkBT,EAAMJ,GAG5BT,KAAKf,qBACPe,KAAKuB,aACLvB,KAAKwB,aAAY,GAAOhC,EAAM,IAAKQ,KAAKyB,OAAQzB,KAAK0B,UAEtDjC,EAAKK,UAAU6B,WAAWnB,GAC1B,MAAMoB,GACNC,QAAQC,KAAK,qCAAqCF,SAGnD5B,KAAKE,UAAUC,YAGjBY,eAAgB,SAASF,EAAMkB,EAAaC,KAgB5Cb,cAAe,SAASN,EAAMoB,KAoB9BZ,iBAAkB,SAASR,EAAMqB,KAYjChB,gBAAiB,SAASL,EAAMkB,EAAaC,KAG7CZ,eAAgB,SAASP,EAAMoB,KAG/BX,kBAAmB,SAAST,EAAMqB","file":"../../../../grid/enhanced/plugins/GridSource.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dnd/Source\",\r\n\t\"./DnD\"\r\n], function(declare, array, lang, Source, DnD){\r\n\r\nvar _joinToArray = function(arrays){\r\n\tvar a = arrays[0];\r\n\tfor(var i = 1; i < arrays.length; ++i){\r\n\t\ta = a.concat(arrays[i]);\r\n\t}\r\n\treturn a;\r\n};\r\n\r\nvar GridDnDSource = lang.getObject(\"dojox.grid.enhanced.plugins.GridDnDSource\");\r\n\r\nreturn declare(\"dojox.grid.enhanced.plugins.GridSource\", Source, {\r\n\t// summary:\r\n\t//\t\tA special source that can accept grid contents.\r\n\t//\t\tOnly for non-grid widgets or domNodes.\r\n\taccept: [\"grid/cells\", \"grid/rows\", \"grid/cols\", \"text\"],\r\n\t\r\n\t// insertNodesForGrid:\r\n\t//\t\tIf you'd like to insert some sort of nodes into your dnd source, turn this on,\r\n\t//\t\tand override getCellContent/getRowContent/getColumnContent\r\n\t//\t\tto populate the dnd data in your desired format.\r\n\tinsertNodesForGrid: false,\r\n\t\r\n\tmarkupFactory: function(params, node){\r\n\t\tcls = lang.getObject(\"dojox.grid.enhanced.plugins.GridSource\");\r\n\t\treturn new cls(node, params);\r\n\t},\r\n\tcheckAcceptance: function(source, nodes){\r\n\t\tif(source instanceof GridDnDSource){\r\n\t\t\tif(nodes[0]){\r\n\t\t\t\tvar item = source.getItem(nodes[0].id);\r\n\t\t\t\tif(item && (array.indexOf(item.type, \"grid/rows\") >= 0 || array.indexOf(item.type, \"grid/cells\") >= 0) &&\r\n\t\t\t\t\t!source.dndPlugin._allDnDItemsLoaded()){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.sourcePlugin = source.dndPlugin;\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\tonDraggingOver: function(){\r\n\t\tif(this.sourcePlugin){\r\n\t\t\tthis.sourcePlugin._isSource = true;\r\n\t\t}\r\n\t},\r\n\tonDraggingOut: function(){\r\n\t\tif(this.sourcePlugin){\r\n\t\t\tthis.sourcePlugin._isSource = false;\r\n\t\t}\r\n\t},\r\n\tonDropExternal: function(source, nodes, copy){\r\n\t\tif(source instanceof GridDnDSource){\r\n\t\t\tvar ranges = array.map(nodes, function(node){\r\n\t\t\t\treturn source.getItem(node.id).data;\r\n\t\t\t});\r\n\t\t\tvar item = source.getItem(nodes[0].id);\r\n\t\t\tvar grid = item.dndPlugin.grid;\r\n\t\t\tvar type = item.type[0];\r\n\t\t\tvar range;\r\n\t\t\ttry{\r\n\t\t\t\tswitch(type){\r\n\t\t\t\t\tcase \"grid/cells\":\r\n\t\t\t\t\t\tnodes[0].innerHTML = this.getCellContent(grid, ranges[0].min, ranges[0].max) || \"\";\r\n\t\t\t\t\t\tthis.onDropGridCells(grid, ranges[0].min, ranges[0].max);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"grid/rows\":\r\n\t\t\t\t\t\trange = _joinToArray(ranges);\r\n\t\t\t\t\t\tnodes[0].innerHTML = this.getRowContent(grid, range) || \"\";\r\n\t\t\t\t\t\tthis.onDropGridRows(grid, range);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"grid/cols\":\r\n\t\t\t\t\t\trange = _joinToArray(ranges);\r\n\t\t\t\t\t\tnodes[0].innerHTML = this.getColumnContent(grid, range) || \"\";\r\n\t\t\t\t\t\tthis.onDropGridColumns(grid, range);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.insertNodesForGrid){\r\n\t\t\t\t\tthis.selectNone();\r\n\t\t\t\t\tthis.insertNodes(true, [nodes[0]], this.before, this.current);\r\n\t\t\t\t}\r\n\t\t\t\titem.dndPlugin.onDragOut(!copy);\r\n\t\t\t}catch(e){\r\n\t\t\t\tconsole.warn(\"GridSource.onDropExternal() error:\",e);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t},\r\n\tgetCellContent: function(grid, leftTopCell, rightBottomCell){\r\n\t\t// summary:\r\n\t\t//\t\tFill node innerHTML for dnd grid cells.\r\n\t\t// example:\r\n\t\t//\t|\tvar cells = grid.layout.cells;\r\n\t\t//\t|\tvar store = grid.store;\r\n\t\t//\t|\tvar cache = grid._by_idx;\r\n\t\t//\t|\tvar res = \"Grid Cells from \" + grid.id + \":<br/>\";\r\n\t\t//\t|\tfor(var r = leftTopCell.row; r <= rightBottomCell.row; ++r){\r\n\t\t//\t|\t\tfor(var c = leftTopCell.col; c <= rightBottomCell.col; ++c){\r\n\t\t//\t|\t\t\tres += store.getValue(cache[r].item, cells[c].field) + \", \";\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t\tres = res.substring(0, res.length - 2) + \";<br/>\";\r\n\t\t//\t|\t}\r\n\t\t//\t|\treturn res;\r\n\t},\r\n\tgetRowContent: function(grid, rowIndexes){\r\n\t\t// summary:\r\n\t\t//\t\tFill node innerHTML for dnd grid rows.\r\n\t\t// example:\r\n\t\t//\t|\tvar cells = grid.layout.cells;\r\n\t\t//\t|\tvar store = grid.store;\r\n\t\t//\t|\tvar cache = grid._by_idx;\r\n\t\t//\t|\tvar res = \"Grid Rows from \" + grid.id + \":<br/>\";\r\n\t\t//\t|\tfor(var i = 0; i < rowIndexes.length; ++i){\r\n\t\t//\t|\t\tvar r = rowIndexes[i];\r\n\t\t//\t|\t\tres += \"Row \" + r + \": \";\r\n\t\t//\t|\t\tfor(var j = 0; j < cells.length; ++j){\r\n\t\t//\t|\t\t\tif(!cells[j].hidden){\r\n\t\t//\t|\t\t\t\tres += store.getValue(cache[r].item, cells[j].field) + \", \";\r\n\t\t//\t|\t\t\t}\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t\tres = res.substring(0, res.length - 2) + \";<br/>\";\r\n\t\t//\t|\t}\r\n\t\t//\t|\treturn res;\r\n\t},\r\n\tgetColumnContent: function(grid, colIndexes){\r\n\t\t// summary:\r\n\t\t//\t\tFill node innerHTML for dnd grid columns.\r\n\t\t// example:\r\n\t\t//\t|\tvar cells = grid.layout.cells;\r\n\t\t//\t|\tvar res = \"Grid Columns from \" + grid.id + \":\";\r\n\t\t//\t|\tfor(var i = 0; i < colIndexes.length; ++i){\r\n\t\t//\t|\t\tvar c = colIndexes[i];\r\n\t\t//\t|\t\tres += (cells[c].name || cells[c].field) + \", \";\r\n\t\t//\t|\t}\r\n\t\t//\t|\treturn res.substring(0, res.length - 2);\r\n\t},\r\n\tonDropGridCells: function(grid, leftTopCell, rightBottomCell){\r\n\t\t\r\n\t},\r\n\tonDropGridRows: function(grid, rowIndexes){\r\n\t\t\r\n\t},\r\n\tonDropGridColumns: function(grid, colIndexes){\r\n\t\t\r\n\t}\r\n});\r\n});\r\n"]}