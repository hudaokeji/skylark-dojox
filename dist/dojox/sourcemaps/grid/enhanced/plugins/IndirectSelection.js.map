{"version":3,"sources":["grid/enhanced/plugins/IndirectSelection.js"],"names":["define","declare","array","evt","lang","html","win","connect","has","query","keys","string","_Plugin","EnhancedGrid","RowSelector","getObject","_Widget","inputType","map","disabledMap","isRowSelector","_connects","_subscribes","checkedText","unCheckedText","constructor","this","disabledCount","inA11YMode","hasClass","body","baseClass","checkedClass","disabledClass","checkedDisabledClass","statusTextClass","push","grid","selection","scroller","formatter","data","rowIndex","scope","_this","clazz","checked","getValue","disabled","id","toLowerCase","substitute","_nls","join","setValue","inValue","isSelected","toggleRow","index","value","_nativeSelect","setDisabled","_toggleDisabledStyle","_onClick","e","cell","_selectRow","_dokeyup","cellIndex","keyCode","SPACE","focus","selector","_focusEndingCell","getCell","setFocusCell","_onSelected","_toggleCheckedStyle","_onDeselected","_onUpdateRow","_getSelector","toggleClass","setAttribute","firstChild","innerHTML","rowNode","view","rowNodes","_pageDestroyed","pageIndex","rowsPerPage","start","end","i","destroy","forEach","disconnect","unsubscribe","SingleRowSelector","selected","MultipleRowSelector","swipeStartRowIndex","swipeMinRowIndex","swipeMaxRowIndex","toSelect","lastClickRowIdx","doc","headerSelector","views","_toggletHeader","toggleAllSelection","selectRange","rowCount","deselectAll","_onMouseDown","_startSelection","stop","_onRowMouseOver","_updateSelection","_domouseup","content","decorateEvent","inSwipeSelection","edit","isEditRow","_finishSelect","inherited","arguments","shiftKey","delta","byKey","currRow","deltaRow","min","max","_swipeByKey","rowOffset","colOffset","newValue","ctrlKey","altKey","g","getSelectedCount","_addHeaderSelector","headerCellNode","getHeaderCellNode","empty","appendChild","create","aria-label","tabindex","class","role","idx","_headerSelectorConnectIdx","undefined","splice","length","_onSelectionChanged","_selectingRange","allItemsSelected","allDisabled","IndirectSelection","name","layout","hitch","addRowSelectCell","option","indirectSelection","selectionMode","rowSelectCellAdded","inValidFields","defaultCellDef","type","width","styles","rowSelectCell","structure","cells","firstRow","console","debug","selectDef","cellType","mixin","editable","notselectable","filterable","navigatable","nosort","field","rowSpan","warn","addCellDef","unshift","cellCount","registerPlugin","preInit"],"mappings":"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","file":"../../../../grid/enhanced/plugins/IndirectSelection.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/html\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojo/query\",\r\n\t\"dojo/keys\",\r\n\t\"dojo/string\",\r\n\t\"../_Plugin\",\r\n\t\"../../EnhancedGrid\",\r\n\t\"../../cells/dijit\"\r\n], function(declare, array, evt, lang, html, win, connect, has, query, keys, string, _Plugin, EnhancedGrid){\r\n\r\nvar gridCells = lang.getObject(\"dojox.grid.cells\");\r\n\r\nvar RowSelector = declare(\"dojox.grid.cells.RowSelector\", gridCells._Widget, {\r\n\t// summary:\r\n\t//\t\t Common attributes & functions for row selectors(Radio|CheckBox)\r\n\r\n\t// inputType: String\r\n\t//\t\tInput type - Radio|CheckBox\r\n\tinputType: \"\",\r\n\t\r\n\t// map: Object\r\n\t//\t\tCache div refs of radio|checkbox to avoid querying each time\r\n\tmap: null,\r\n\t\r\n\t// disabledMap: Object\r\n\t//\t\tCache index of disabled rows\r\n\tdisabledMap: null,\r\n\t\r\n\t// isRowSelector: Boolean\r\n\t//\t\tMarker of indirectSelection cell(column)\r\n\tisRowSelector: true,\r\n\r\n\t// _connects: Array\r\n\t//\t\tList of all connections.\r\n\t_connects: null,\r\n\t\r\n\t// _subscribes: Array\r\n\t//\t\tList of all subscribes.\r\n\t_subscribes: null,\r\n\r\n\t// checkedText: String\r\n\t//\t\tChecked character for high contrast mode\r\n\tcheckedText: '&#10003;',\r\n\r\n\t// unCheckedText: String\r\n\t//\t\tUnchecked character for high contrast mode\r\n\tunCheckedText: 'O',\r\n\r\n\tconstructor: function(){\r\n\t\tthis.map = {}; this.disabledMap = {}; this.disabledCount= 0;\r\n\t\tthis._connects = []; this._subscribes = [];\r\n\t\tthis.inA11YMode = html.hasClass(win.body(), \"dijit_a11y\");\r\n\t\t\r\n\t\tthis.baseClass = \"dojoxGridRowSelector dijitReset dijitInline dijit\" + this.inputType;\r\n\t\tthis.checkedClass = \" dijit\" + this.inputType + \"Checked\";\r\n\t\tthis.disabledClass = \" dijit\" + this.inputType + \"Disabled\";\r\n\t\tthis.checkedDisabledClass = \" dijit\" + this.inputType + \"CheckedDisabled\";\r\n\t\tthis.statusTextClass = \" dojoxGridRowSelectorStatusText\";//a11y use\r\n\r\n\t\tthis._connects.push(connect.connect(this.grid, 'dokeyup', this, '_dokeyup'));\r\n\t\tthis._connects.push(connect.connect(this.grid.selection, 'onSelected', this, '_onSelected'));\r\n\t\tthis._connects.push(connect.connect(this.grid.selection, 'onDeselected', this, '_onDeselected'));\r\n\t\tthis._connects.push(connect.connect(this.grid.scroller, 'invalidatePageNode', this, '_pageDestroyed'));\r\n\t\tthis._connects.push(connect.connect(this.grid, 'onCellClick', this, '_onClick'));\r\n\t\tthis._connects.push(connect.connect(this.grid, 'updateRow', this, '_onUpdateRow'));\r\n\t},\r\n\tformatter: function(data, rowIndex, scope){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten, see dojox.grid.cells._Widget\r\n\t\tvar _this = scope;\r\n\t\tvar clazz = _this.baseClass;\r\n\t\tvar checked = !!_this.getValue(rowIndex);\r\n\t\tvar disabled = !!_this.disabledMap[rowIndex];//normalize 'undefined'\r\n\t\t\r\n\t\tif(checked){\r\n\t\t\tclazz += _this.checkedClass;\r\n\t\t\tif(disabled){ clazz += _this.checkedDisabledClass; }\r\n\t\t}else if(disabled){\r\n\t\t\tclazz += _this.disabledClass;\r\n\t\t}\r\n\t\treturn [\"<div tabindex = -1 \",\r\n\t\t\t\t\"id = '\" + _this.grid.id + \"_rowSelector_\" + rowIndex + \"' \",\r\n\t\t\t\t\"name = '\" + _this.grid.id + \"_rowSelector' class = '\" + clazz + \"' \",\r\n\t\t\t\t\"role = \" + _this.inputType.toLowerCase() + \" aria-checked = '\" + checked + \"' aria-disabled = '\" + disabled +\r\n\t\t\t\t\"' aria-label = '\" + string.substitute(_this.grid._nls[\"indirectSelection\" + _this.inputType], [rowIndex + 1]) + \"'>\",\r\n\t\t\t\t\"<span class = '\" + _this.statusTextClass + \"'>\" + (checked ? _this.checkedText : _this.unCheckedText) + \"</span>\",\r\n\t\t\t\t\"</div>\"].join(\"\");\r\n\t},\r\n\tsetValue: function(rowIndex, inValue){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten, see dojox.grid.cells._Widget\r\n\t\t//\t\tSimply return, no action\r\n\t},\r\n\tgetValue: function(rowIndex){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten, see dojox.grid.cells._Widget\r\n\t\treturn this.grid.selection.isSelected(rowIndex);\r\n\t},\r\n\ttoggleRow: function(index, value){\r\n\t\t// summary:\r\n\t\t//\t\ttoggle checked | unchecked state for given row\r\n\t\t// index: Integer\r\n\t\t//\t\tRow index\r\n\t\t// value: Boolean\r\n\t\t//\t\tTrue - checked | False - unchecked\r\n\t\tthis._nativeSelect(index, value);\r\n\t},\r\n\tsetDisabled: function(index, disabled){\r\n\t\t// summary:\r\n\t\t//\t\ttoggle disabled | enabled state for given row\r\n\t\t// idx: Integer\r\n\t\t//\t\tRow index\r\n\t\t// disabled: Boolean\r\n\t\t//\t\tTrue - disabled | False - enabled\r\n\t\tif(index < 0){ return; }\r\n\t\tthis._toggleDisabledStyle(index, disabled);\r\n\t},\r\n\tdisabled: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tCheck if one row is disabled\r\n\t\treturn !!this.disabledMap[index];\r\n\t},\r\n\t_onClick: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tWhen mouse click on the selector cell, select/deselect the row.\r\n\t\tif(e.cell === this){\r\n\t\t\tthis._selectRow(e);\r\n\t\t}\r\n\t},\r\n\t_dokeyup: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tEvent handler for key up event\r\n\t\t//\t\t- from dojox.grid.enhanced._Events.dokeyup()\r\n\t\t// e: Event\r\n\t\t//\t\tKey up event\r\n\t\tif(e.cellIndex == this.index && e.rowIndex >= 0 && e.keyCode == keys.SPACE){\r\n\t\t\tthis._selectRow(e);\r\n\t\t}\r\n\t},\r\n\tfocus: function(rowIndex){\r\n\t\t// summary:\r\n\t\t//\t\tSet focus to given row\r\n\t\t// rowIndex: Integer\r\n\t\t//\t\tTarget row\r\n\t\tvar selector = this.map[rowIndex];\r\n\t\tif(selector){ selector.focus(); }\r\n\t},\r\n\t_focusEndingCell: function(rowIndex, cellIndex){\r\n\t\t// summary:\r\n\t\t//\t\tSet focus to the ending grid cell(rowIndex,cellIndex) when swipe selection finished\r\n\t\t// rowIndex: Integer\r\n\t\t//\t\tRow index\r\n\t\t// cellIndex: Integer\r\n\t\t//\t\tColumn index\r\n\t\tvar cell = this.grid.getCell(cellIndex);\r\n\t\tthis.grid.focus.setFocusCell(cell, rowIndex);\r\n\t},\r\n\t_nativeSelect: function(index, value){\r\n\t\t// summary:\r\n\t\t//\t\tUse grid's native selection\r\n\t\tthis.grid.selection[value ? 'select' : 'deselect'](index);\r\n\t},\r\n\t_onSelected: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tTriggered when a row is selected\r\n\t\tthis._toggleCheckedStyle(index, true);\r\n\t},\r\n\t_onDeselected: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tTriggered when a row is deselected\r\n\t\tthis._toggleCheckedStyle(index, false);\r\n\t},\r\n\t_onUpdateRow: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tClear cache when row is re-built.\r\n\t\tdelete this.map[index];\r\n\t},\r\n\t_toggleCheckedStyle: function(index, value){\r\n\t\t// summary:\r\n\t\t//\t\tChange css styles for checked | unchecked\r\n\t\tvar selector = this._getSelector(index);\r\n\t\tif(selector){\r\n\t\t\thtml.toggleClass(selector, this.checkedClass, value);\r\n\t\t\tif(this.disabledMap[index]){\r\n\t\t\t\thtml.toggleClass(selector, this.checkedDisabledClass, value);\r\n\t\t\t}\r\n\t\t\tselector.setAttribute(\"aria-checked\", value);\r\n\t\t\tif(this.inA11YMode){\r\n\t\t\t\tselector.firstChild.innerHTML = (value ? this.checkedText : this.unCheckedText);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t_toggleDisabledStyle: function(index, disabled){\r\n\t\t// summary:\r\n\t\t//\t\tChange css styles for disabled | enabled\r\n\t\tvar selector = this._getSelector(index);\r\n\t\tif(selector){\r\n\t\t\thtml.toggleClass(selector, this.disabledClass, disabled);\r\n\t\t\tif(this.getValue(index)){\r\n\t\t\t\thtml.toggleClass(selector, this.checkedDisabledClass, disabled);\r\n\t\t\t}\r\n\t\t\tselector.setAttribute(\"aria-disabled\", disabled);\r\n\t\t}\r\n\t\tthis.disabledMap[index] = disabled;\r\n\t\tif(index >= 0){\r\n\t\t\tthis.disabledCount += disabled ? 1 : -1;\r\n\t\t}\r\n\t},\r\n\t_getSelector: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tFind selector for given row caching it if 1st time found\r\n\t\tvar selector = this.map[index];\r\n\t\tif(!selector){//use accurate query for better performance\r\n\t\t\tvar rowNode = this.view.rowNodes[index];\r\n\t\t\tif(rowNode){\r\n\t\t\t\tselector = query('.dojoxGridRowSelector', rowNode)[0];\r\n\t\t\t\tif(selector){ this.map[index] = selector; }\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn selector;\r\n\t},\r\n\t_pageDestroyed: function(pageIndex){\r\n\t\t// summary:\r\n\t\t//\t\tExplicitly empty map cache when a page destroyed\r\n\t\t//\t\tSee dojox.grid._Scroller.invalidatePageNode()\r\n\t\t// pageIndex: Integer\r\n\t\t//\t\tIndex of destroyed page\r\n\t\tvar rowsPerPage = this.grid.scroller.rowsPerPage;\r\n\t\tvar start = pageIndex * rowsPerPage, end = start + rowsPerPage - 1;\r\n\t\tfor(var i = start; i <= end; i++){\r\n\t\t\tif(!this.map[i]){continue;}\r\n\t\t\thtml.destroy(this.map[i]);\r\n\t\t\tdelete this.map[i];\r\n\t\t}\r\n\t\t//console.log(\"Page \",pageIndex, \" destroyed, Map=\",this.map);\r\n\t},\r\n\tdestroy: function(){\r\n\t\tfor(var i in this.map){\r\n\t\t\thtml.destroy(this.map[i]);\r\n\t\t\tdelete this.map[i];\r\n\t\t}\r\n\t\tfor(i in this.disabledMap){ delete this.disabledMap[i]; }\r\n\t\tarray.forEach(this._connects, connect.disconnect);\r\n\t\tarray.forEach(this._subscribes, connect.unsubscribe);\r\n\t\tdelete this._connects;\r\n\t\tdelete this._subscribes;\r\n\t\t//console.log('Single(Multiple)RowSelector.destroy() executed!');\r\n\t}\r\n});\r\n\r\nvar SingleRowSelector = declare(\"dojox.grid.cells.SingleRowSelector\", RowSelector, {\r\n\t// summary:\r\n\t//\t\tIndirectSelection cell(column) for single selection mode, using styles of dijit.form.RadioButton\r\n\tinputType: \"Radio\",\r\n\r\n\t_selectRow: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tSelect the target row\r\n\t\t// e: Event\r\n\t\t//\t\tEvent fired on the target row\r\n\t\tvar index = e.rowIndex;\r\n\t\tif(this.disabledMap[index]){ return; }\r\n\t\tthis._focusEndingCell(index, e.cellIndex);\r\n\t\tthis._nativeSelect(index, !this.grid.selection.selected[index]);\r\n\t}\r\n});\r\n\r\nvar MultipleRowSelector = declare(\"dojox.grid.cells.MultipleRowSelector\", RowSelector, {\r\n\t// summary:\r\n\t//\t\tIndirect selection cell for multiple or extended mode, using dijit.form.CheckBox\r\n\r\n\t// inputType: String\r\n\tinputType: \"CheckBox\",\r\n\t\r\n\t// swipeStartRowIndex: Integer\r\n\t//\t\tStart row index for swipe selection\r\n\tswipeStartRowIndex: -1,\r\n\r\n\t// swipeMinRowIndex: Integer\r\n\t//\t\tMin row index for swipe selection\r\n\tswipeMinRowIndex: -1,\r\n\t\r\n\t// swipeMinRowIndex: Integer\r\n\t//\t\tMax row index for swipe selection\r\n\tswipeMaxRowIndex: -1,\r\n\t\r\n\t// toSelect: Boolean\r\n\t//\t\tnew state for selection\r\n\ttoSelect: false,\r\n\t\r\n\t// lastClickRowIdx: Integer\r\n\t//\t\tRow index for last click, used for range selection via Shift + click\r\n\tlastClickRowIdx: -1,\r\n\t\t\r\n\tunCheckedText: '&#9633;',\r\n\r\n\tconstructor: function(){\r\n\t\tthis._connects.push(connect.connect(win.doc, 'onmouseup', this, '_domouseup'));\r\n\t\tthis._connects.push(connect.connect(this.grid, 'onRowMouseOver', this, '_onRowMouseOver'));\r\n\t\tthis._connects.push(connect.connect(this.grid.focus, 'move', this, '_swipeByKey'));\r\n\t\tthis._connects.push(connect.connect(this.grid, 'onCellMouseDown', this, '_onMouseDown'));\r\n\t\tif(this.headerSelector){//option set by user to add a select-all checkbox in column header\r\n\t\t\tthis._connects.push(connect.connect(this.grid.views, 'render', this, '_addHeaderSelector'));\r\n\t\t\tthis._connects.push(connect.connect(this.grid, '_onFetchComplete', this, '_addHeaderSelector'));\r\n\t\t\tthis._connects.push(connect.connect(this.grid, 'onSelectionChanged', this, '_onSelectionChanged'));\r\n\t\t\tthis._connects.push(connect.connect(this.grid, 'onKeyDown', this, function(e){\r\n\t\t\t\tif(e.rowIndex == -1 && e.cellIndex == this.index && e.keyCode == keys.SPACE){\r\n\t\t\t\t\tthis._toggletHeader();//TBD - a better way\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t},\r\n\ttoggleAllSelection:function(checked){\r\n\t\t// summary:\r\n\t\t//\t\tToggle select all|deselect all\r\n\t\t// checked: Boolean\r\n\t\t//\t\tTrue - select all, False - deselect all\r\n\t\tvar grid = this.grid, selection = grid.selection;\r\n\t\tif(checked){\r\n\t\t\tselection.selectRange(0, grid.rowCount-1);\r\n\t\t}else{\r\n\t\t\tselection.deselectAll();\r\n\t\t}\r\n\t},\r\n\t_onMouseDown: function(e){\r\n\t\tif(e.cell == this){\r\n\t\t\tthis._startSelection(e.rowIndex);\r\n\t\t\tevt.stop(e);\r\n\t\t}\r\n\t},\r\n\t_onRowMouseOver: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tEvent fired when mouse moves over a data row(outside of this column).\r\n\t\t//\t\t- from dojox.grid.enhanced._Events.onRowMouseOver()\r\n\t\t// e: Event\r\n\t\t//\t\tDecorated event object which contains reference to grid, cell, and rowIndex\r\n\t\tthis._updateSelection(e, 0);\r\n\t},\r\n\t_domouseup: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tEvent handler for mouse up event - from dojo.doc.domouseup()\r\n\t\t// e: Event\r\n\t\t//\t\tMouse up event\r\n\t\tif(has('ie')){\r\n\t\t\tthis.view.content.decorateEvent(e);//TODO - why only e in IE hasn't been decorated?\r\n\t\t}\r\n\t\tvar inSwipeSelection = e.cellIndex >= 0 && this.inSwipeSelection() && !this.grid.edit.isEditRow(e.rowIndex);\r\n\t\tif(inSwipeSelection){\r\n\t\t\tthis._focusEndingCell(e.rowIndex, e.cellIndex);\r\n\t\t}\r\n\t\tthis._finishSelect();\r\n\t},\r\n\t_dokeyup: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tEvent handler for key up event\r\n\t\t//\t\t- from dojox.grid.enhanced._Events.dokeyup()\r\n\t\t// e: Event\r\n\t\t//\t\tKey up event\r\n\t\tthis.inherited(arguments);\r\n\t\tif(!e.shiftKey){\r\n\t\t\tthis._finishSelect();\r\n\t\t}\r\n\t},\r\n\t_startSelection: function(rowIndex){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize parameters to start a new swipe selection\r\n\t\t// rowIndex: Integer\r\n\t\t//\t\tIndex of the start row\r\n\t\tthis.swipeStartRowIndex = this.swipeMinRowIndex = this.swipeMaxRowIndex = rowIndex;\r\n\t\tthis.toSelect = !this.getValue(rowIndex);\r\n\t},\r\n\t_updateSelection: function(e, delta){\r\n\t\t// summary:\r\n\t\t//\t\tUpdate row selections, fired during a swipe selection\r\n\t\t// e: Event\r\n\t\t//\t\tEvent of the current row,\r\n\t\t// delta: Integer\r\n\t\t//\t\tRow index delta, used for swipe selection via Shift + Arrow key\r\n\t\t//\t\t0: not via key, -1 : Shift +  Up, 1 : Shift + Down\r\n\t\tif(!this.inSwipeSelection()){ return; }\r\n\t\t\r\n\t\tvar byKey = delta !== 0;//whether via Shift + Arrow Key\r\n\t\tvar currRow = e.rowIndex, deltaRow = currRow - this.swipeStartRowIndex + delta;\r\n\t\tif(deltaRow > 0 && this.swipeMaxRowIndex < currRow + delta){\r\n\t\t\tthis.swipeMaxRowIndex = currRow + delta;\r\n\t\t}\r\n\t\tif(deltaRow < 0 && this.swipeMinRowIndex > currRow + delta){\r\n\t\t\tthis.swipeMinRowIndex = currRow + delta;\r\n\t\t}\r\n\r\n\t\tvar min = deltaRow > 0 ? this.swipeStartRowIndex : currRow + delta;\r\n\t\tvar max = deltaRow > 0 ? currRow + delta : this.swipeStartRowIndex;\r\n\t\tfor(var i = this.swipeMinRowIndex; i <= this.swipeMaxRowIndex; i++){\r\n\t\t\tif(this.disabledMap[i] || i < 0){ continue; }\r\n\t\t\tif(i >= min && i <= max){//deltaRow != 0 || this.toSelect\r\n\t\t\t\tthis._nativeSelect(i, this.toSelect);\r\n\t\t\t}else if(!byKey){\r\n\t\t\t\tthis._nativeSelect(i, !this.toSelect);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t_swipeByKey: function(rowOffset, colOffset, e){\r\n\t\t// summary:\r\n\t\t//\t\tUpdate row selections, fired when Shift + Cursor is used for swipe selection\r\n\t\t//\t\tSee dojox.grid.enhanced._Events.onKeyDown\r\n\t\t// e: Event\r\n\t\t//\t\tEvent of the current row,\r\n\t\t// rowOffset: Integer\r\n\t\t//\t\tRow offset, used for swipe selection via Shift + Cursor\r\n\t\t//\t\t-1 : Shift +  Up, 1 : Shift + Down\r\n\t\tif(!e || rowOffset === 0 || !e.shiftKey || e.cellIndex != this.index ||\r\n\t\t\tthis.grid.focus.rowIndex < 0){ //TBD - e.rowIndex == 0 && delta == -1\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar rowIndex = e.rowIndex;\r\n\t\tif(this.swipeStartRowIndex < 0){\r\n\t\t\t//A new swipe selection starts via Shift + Arrow key\r\n\t\t\tthis.swipeStartRowIndex = rowIndex;\r\n\t\t\tif(rowOffset > 0){//Shift + Down\r\n\t\t\t\tthis.swipeMaxRowIndex = rowIndex + rowOffset;\r\n\t\t\t\tthis.swipeMinRowIndex = rowIndex;\r\n\t\t\t}else{//Shift + UP\r\n\t\t\t\tthis.swipeMinRowIndex = rowIndex + rowOffset;\r\n\t\t\t\tthis.swipeMaxRowIndex = rowIndex;\r\n\t\t\t}\r\n\t\t\tthis.toSelect = this.getValue(rowIndex);\r\n\t\t}\r\n\t\tthis._updateSelection(e, rowOffset);\r\n\t},\r\n\t_finishSelect: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReset parameters to end a swipe selection\r\n\t\tthis.swipeStartRowIndex = -1;\r\n\t\tthis.swipeMinRowIndex = -1;\r\n\t\tthis.swipeMaxRowIndex = -1;\r\n\t\tthis.toSelect = false;\r\n\t},\r\n\tinSwipeSelection: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCheck if during a swipe selection\r\n\t\t// returns: Boolean\r\n\t\t//\t\tWhether in swipe selection\r\n\t\treturn this.swipeStartRowIndex >= 0;\r\n\t},\r\n\t_nativeSelect: function(index, value){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten\r\n\t\tthis.grid.selection[value ? 'addToSelection' : 'deselect'](index);\r\n\t},\r\n\t_selectRow: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tSelect the target row or range or rows\r\n\t\t// e: Event\r\n\t\t//\t\tEvent fired on the target row\r\n\t\tvar rowIndex = e.rowIndex;\r\n\t\tif(this.disabledMap[rowIndex]){ return; }\r\n\t\tevt.stop(e);\r\n\t\tthis._focusEndingCell(rowIndex, e.cellIndex);\r\n\t\t\r\n\t\tvar delta = rowIndex - this.lastClickRowIdx;\r\n\t\tvar newValue = !this.grid.selection.selected[rowIndex];\r\n\t\tif(this.lastClickRowIdx >= 0 && !e.ctrlKey && !e.altKey && e.shiftKey){\r\n\t\t\tvar min = delta > 0 ? this.lastClickRowIdx : rowIndex;\r\n\t\t\tvar max = delta > 0 ? rowIndex : this.lastClickRowIdx;\r\n\t\t\tfor(var i = min; i >= 0 && i <= max; i++){\r\n\t\t\t\tthis._nativeSelect(i, newValue);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tthis._nativeSelect(rowIndex, newValue);\r\n\t\t}\r\n\t\tthis.lastClickRowIdx = rowIndex;\r\n\t},\r\n\tgetValue: function(rowIndex){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten\r\n\t\tif(rowIndex == -1){//header selector\r\n\t\t\tvar g = this.grid;\r\n\t\t\treturn g.rowCount > 0 && g.rowCount <= g.selection.getSelectedCount();\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\t_addHeaderSelector: function(){\r\n\t\t// summary:\r\n\t\t//\t\tAdd selector in column header for selecting|deselecting all\r\n\t\tvar headerCellNode = this.view.getHeaderCellNode(this.index);\r\n\t\tif(!headerCellNode){ return; }\r\n\t\thtml.empty(headerCellNode);\r\n\t\tvar g = this.grid;\r\n\t\tvar selector = headerCellNode.appendChild(html.create(\"div\", {\r\n\t\t\t'aria-label': g._nls[\"selectAll\"],\r\n\t\t\t\"tabindex\": -1, \"id\": g.id + \"_rowSelector_-1\", \"class\": this.baseClass, \"role\": \"Checkbox\",\r\n\t\t\t\"innerHTML\": \"<span class = '\" + this.statusTextClass +\r\n\t\t\t\t\"'></span><span style='height: 0; width: 0; overflow: hidden; display: block;'>\" +\r\n\t\t\t\tg._nls[\"selectAll\"] + \"</span>\"\r\n\t\t}));\r\n\t\tthis.map[-1] = selector;\r\n\t\tvar idx = this._headerSelectorConnectIdx;\r\n\t\tif(idx !== undefined){\r\n\t\t\tconnect.disconnect(this._connects[idx]);\r\n\t\t\tthis._connects.splice(idx, 1);\r\n\t\t}\r\n\t\tthis._headerSelectorConnectIdx = this._connects.length;\r\n\t\tthis._connects.push(connect.connect(selector, 'onclick', this, '_toggletHeader'));\r\n\t\tthis._onSelectionChanged();\r\n\t},\r\n\t_toggletHeader: function(){\r\n\t\t// summary:\r\n\t\t//\t\tToggle state for head selector\r\n\t\tif(!!this.disabledMap[-1]){ return; }\r\n\t\tthis.grid._selectingRange = true;\r\n\t\tthis.toggleAllSelection(!this.getValue(-1));\r\n\t\tthis._onSelectionChanged();\r\n\t\tthis.grid._selectingRange = false;\r\n\t},\r\n\t_onSelectionChanged: function(){\r\n\t\t// summary:\r\n\t\t//\t\tUpdate header selector anytime selection changed\r\n\t\tvar g = this.grid;\r\n\t\tif(!this.map[-1] || g._selectingRange){ return; }\r\n\t\tg.allItemsSelected = this.getValue(-1);\r\n\t\tthis._toggleCheckedStyle(-1, g.allItemsSelected);\r\n\t},\r\n\t_toggleDisabledStyle: function(index, disabled){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this.headerSelector){\r\n\t\t\tvar allDisabled = (this.grid.rowCount == this.disabledCount);\r\n\t\t\tif(allDisabled != !!this.disabledMap[-1]){//only if needed\r\n\t\t\t\targuments[0] = -1;\r\n\t\t\t\targuments[1] = allDisabled;\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nvar IndirectSelection = declare(\"dojox.grid.enhanced.plugins.IndirectSelection\", _Plugin, {\r\n\t// summary:\r\n\t//\t\tA handy way for adding check boxe/radio button for rows, and selecting rows by swiping(or keyboard)\r\n\r\n\t// description:\r\n\t//\t\tFor better rendering performance, div(images) are used to simulate radio button|check boxes\r\n\t//\r\n\t// example:\r\n\t// |\t<div dojoType=\"dojox.grid.EnhancedGrid\" plugins=\"{indirectSelection: true}\" ...></div>\r\n\t//\t\tor\r\n\t// |\t<div dojoType=\"dojox.grid.EnhancedGrid\" plugins=\"{indirectSelection: {name: 'xxx', width:'30px', styles:'text-align: center;'}}\" ...></div>\r\n\r\n\t// name: String\r\n\t//\t\tPlugin name\r\n\tname: \"indirectSelection\",\r\n\t\r\n\tconstructor: function(){\r\n\t\t// Hook layout.setStructure(), so that indirectSelection is always included\r\n\t\tvar layout = this.grid.layout;\r\n\t\tthis.connect(layout, 'setStructure', lang.hitch(layout, this.addRowSelectCell, this.option));\r\n\t},\r\n\taddRowSelectCell: function(option){\r\n\t\t// summary:\r\n\t\t//\t\tAdd indirectSelection cell(mapped to a column of radio button|check boxes)\r\n\t\tif(!this.grid.indirectSelection || this.grid.selectionMode == 'none'){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar rowSelectCellAdded = false, inValidFields = ['get', 'formatter', 'field', 'fields'],\r\n\t\tdefaultCellDef = {type: MultipleRowSelector, name: '', width:'30px', styles:'text-align: center;'};\r\n\t\tif(option.headerSelector){ option.name = ''; }//mutual conflicting attrs\r\n\r\n\t\tif(this.grid.rowSelectCell){//remove the existed one\r\n\t\t\tthis.grid.rowSelectCell.destroy();\r\n\t\t}\r\n\t\t\r\n\t\tarray.forEach(this.structure, function(view){\r\n\t\t\tvar cells = view.cells;\r\n\t\t\tif(cells && cells.length > 0 && !rowSelectCellAdded){\r\n\t\t\t\tvar firstRow = cells[0];\r\n\t\t\t\tif(firstRow[0] && firstRow[0].isRowSelector){\r\n\t\t\t\t\tconsole.debug('addRowSelectCell() - row selector cells already added, return.');\r\n\t\t\t\t\trowSelectCellAdded = true;\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar selectDef, cellType = this.grid.selectionMode == 'single' ? SingleRowSelector : MultipleRowSelector;\r\n\t\t\t\tselectDef = lang.mixin(defaultCellDef, option, {type: cellType, editable: false, notselectable: true, filterable: false, navigatable: true, nosort: true});\r\n\t\t\t\tarray.forEach(inValidFields, function(field){//remove invalid fields\r\n\t\t\t\t\tif(field in selectDef){ delete selectDef[field]; }\r\n\t\t\t\t});\r\n\t\t\t\tif(cells.length > 1){ selectDef.rowSpan = cells.length; }//for complicate layout\r\n\t\t\t\tarray.forEach(this.cells, function(cell, i){\r\n\t\t\t\t\tif(cell.index >= 0){\r\n\t\t\t\t\t\tcell.index += 1;\r\n\t\t\t\t\t\t//console.debug('cell '+ (cell.index - 1) +  ' is updated to index ' + cell.index);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tconsole.warn('Error:IndirectSelection.addRowSelectCell()-  cell ' + i + ' has no index!');\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar rowSelectCell = this.addCellDef(0, 0, selectDef);\r\n\t\t\t\trowSelectCell.index = 0;\r\n\t\t\t\tfirstRow.unshift(rowSelectCell);\r\n\t\t\t\tthis.cells.unshift(rowSelectCell);\r\n\t\t\t\tthis.grid.rowSelectCell = rowSelectCell;\r\n\t\t\t\trowSelectCellAdded = true;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.cellCount = this.cells.length;\r\n\t},\r\n\tdestroy: function(){\r\n\t\tthis.grid.rowSelectCell.destroy();\r\n\t\tdelete this.grid.rowSelectCell;\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n\r\nEnhancedGrid.registerPlugin(IndirectSelection/*name:'indirectSelection'*/, {\"preInit\": true});\r\n\r\nreturn IndirectSelection;\r\n});\r\n"]}