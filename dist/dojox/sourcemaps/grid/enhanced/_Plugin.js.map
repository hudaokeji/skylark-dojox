{"version":3,"sources":["grid/enhanced/_Plugin.js"],"names":["define","dojo","lang","declare","array","connect","name","grid","option","_connects","_subscribes","privates","constructor","inGrid","this","mixin","dojox","enhanced","_Plugin","prototype","init","onPreInit","onPostInit","onStartUp","obj","event","method","conn","push","disconnect","handle","some","i","conns","splice","subscribe","topic","unsubscribe","subscribes","onSetStore","store","destroy","forEach"],"mappings":";;;;;;;AAAAA,QACC,oBACA,kBACA,qBACA,mBACA,qBACG,mBACD,SAASC,EAAMC,EAAMC,EAASC,EAAOC,GAExC,OAAOF,EAAQ,8BAA+B,MAkD7CG,KAAM,SAINC,KAAM,KAKNC,UAIAC,aAIAC,eAIAC,YAEAC,YAAa,SAASC,EAAQL,GAC7BM,KAAKP,KAAOM,EACZC,KAAKN,OAASA,EACdM,KAAKL,aACLK,KAAKJ,eACLI,KAAKH,SAAWT,EAAKa,SAASC,MAAMT,KAAKU,SAASC,QAAQC,WAC1DL,KAAKM,QAGNA,KAAM,aAENC,UAAW,aAEXC,WAAY,aAEZC,UAAW,aAEXlB,QAAS,SAASmB,EAAKC,EAAOC,GAS7B,IAAIC,EAAOtB,EAAQA,QAAQmB,EAAKC,EAAOX,KAAMY,GAE7C,OADAZ,KAAKL,UAAUmB,KAAKD,GACbA,GAERE,WAAY,SAASC,GAGpB1B,EAAM2B,KAAKjB,KAAKL,UAAW,SAASkB,EAAMK,EAAGC,GAC5C,OAAGN,GAAQG,IACVzB,EAAQwB,WAAWC,GACnBG,EAAMC,OAAOF,EAAG,IACT,MAKVG,UAAW,SAASC,EAAOV,GAW1B,IAAIS,EAAY9B,EAAQ8B,UAAUC,EAAOtB,KAAMY,GAE/C,OADAZ,KAAKJ,YAAYkB,KAAKO,GACfA,GAERE,YAAa,SAASP,GAGrB1B,EAAM2B,KAAKjB,KAAKJ,YAAa,SAASyB,EAAWH,EAAGM,GACnD,OAAGH,GAAaL,IACfzB,EAAQgC,YAAYP,GACpBQ,EAAWJ,OAAOF,EAAG,IACd,MAKVO,WAAY,SAASC,KAIrBC,QAAS,WAGRrC,EAAMsC,QAAQ5B,KAAKL,UAAWJ,EAAQwB,YACtCzB,EAAMsC,QAAQ5B,KAAKJ,YAAaL,EAAQgC,oBACjCvB,KAAKL,iBACLK,KAAKJ,mBACLI,KAAKN,cACLM,KAAKH","file":"../../../grid/enhanced/_Plugin.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/connect\",\r\n    \"../EnhancedGrid\"\r\n], function(dojo, lang, declare, array, connect){\r\n\t\r\nreturn declare(\"dojox.grid.enhanced._Plugin\", null, {\r\n\t// summary:\r\n\t//\t\tBase class for all plugins.\r\n\t// description:\r\n\t//\t\tProvides common plugin functionality and basic life cycle management.\r\n\t//\r\n\t//\t\tEach concrete plugin must have a name field and is responsible for registering itself to the global plugin registry\r\n\t//\t\te.g. for dnd plugin:\r\n\t// |\t\tdojox.grid.EnhancedGrid.registerPlugin(\"dnd\" /*plugin name*/,\r\n\t// |\t\t\t\t\t\t\t\t\t\t\t\tdojox.grid.enhanced.plugins.DnD /*full class name of a plugin*/\r\n\t// |\t\t\t\t\t\t\t\t\t\t\t\t{\"preInit\": false, \"dependency\": [\"nestedSorting\"]} /*properties*/);\r\n\t//\r\n\t//\t\t[Keywords] of plugin properties (case sensitive):\r\n\t//\r\n\t//\t\t- \"preInit\": boolean, whether a plugin should be created before EnhancedGrid.postCreate(),\r\n\t//\t\t   false by default(plugins are created after EnhancedGrid.postCreate()).\r\n\t//\t\t- \"dependency\": array or string, plugin(s) indicated by \"dependency\" will be created before the current one.\r\n\t//\t\t   Note: recursive cycle dependencies are not supported e.g. following dependency is invalid:\r\n\t//\t\t   pluginA -> pluginB -> pluginA\r\n\t//\r\n\t// example:\r\n\t//\t\t1. Customize default DnD plugin\r\n\t//\r\n\t// |\tdeclare(\"mygrid.MyDnD\", dojox.grid.enhanced.plugins.DnD, {\r\n\t// |\t\tname:\"dnd\" //still reuse the plugin name\r\n\t// |\t\tconstructor: function(inGrid, option){ ... }\r\n\t// |\t});\r\n\t// |\tdojox.grid.EnhancedGrid.registerPlugin(\"dnd\", mygrid.MyDnD);\r\n\t//\r\n\t//\t\t2. Add new plugin - PluginA\r\n\t//\r\n\t// |\tdeclare(\"mygrid.PluginA\", dojox.grid.enhanced._Plugin, {\r\n\t// |\t\tname: \"pA\",\r\n\t// |\t\tconstructor: function(inGrid, option){ ... }\r\n\t// |\t});\r\n\t// |\tdojox.grid.EnhancedGrid.registerPlugin(\"pA\",mygrid.PluginA);\r\n\t//\r\n\t//\t\t3. Use plugins\r\n\t//\r\n\t// |\tdojo.require(\"mygrid.MyDnD\");\r\n\t// |\tdojo.require(\"mygrid.PluginA\");\r\n\t// |\r\n\t// |\t<script type=\"text/javascript\">\r\n\t// |\t\tvar grid = new dojox.grid.EnhancedGrid(\r\n\t// |\t\t{plugins: {dnd:true, pA:true}, ... }, dojo.byId(\"gridDiv\"));\r\n\t// |\t\tgrid.startup();\r\n\t// |\t</script>\r\n\r\n\t// name: String\r\n\t//\t\tPlugin name, e.g. 'nestedSorting', 'dnd'...\r\n\tname: 'plugin',\r\n\t\r\n\t// grid: Object\r\n\t//\t\tGrid that the plugin belongs to\r\n\tgrid: null,\r\n\r\n\t// option: Object\r\n\t//\t\tPlugin properties - leveraged with default and user specified properties.\r\n\t//\t\te.g. for dnd plugin, it may look like {\"class\": dojox.grid.enhanced.plugins.DnD, \"dependency\": [\"nestedSorting\"], ...}\r\n\toption: {},\r\n\r\n\t// _connects: Array\r\n\t//\t\tList of all connections.\r\n\t_connects: [],\r\n\t\r\n\t// _subscribes: Array\r\n\t//\t\tList of all subscribes.\r\n\t_subscribes: [],\r\n\r\n\t// privates: Object\r\n\t//\t\tPrivate properties/methods shouldn't be mixin-ed anytime.\r\n\tprivates: {},\r\n\t\r\n\tconstructor: function(inGrid, option){\r\n\t\tthis.grid = inGrid;\r\n\t\tthis.option = option;\r\n\t\tthis._connects = [];\r\n\t\tthis._subscribes = [];\r\n\t\tthis.privates = lang.mixin({},dojox.grid.enhanced._Plugin.prototype);\r\n\t\tthis.init();\r\n\t},\r\n\t\r\n\tinit: function(){},\r\n\t\r\n\tonPreInit: function(){},\r\n\t\r\n\tonPostInit: function(){},\r\n\t\r\n\tonStartUp: function(){},\r\n\t\r\n\tconnect: function(obj, event, method){\r\n\t\t// summary:\r\n\t\t//\t\tConnects specified obj/event to specified method of this object.\r\n\t\t// example:\r\n\t\t//\t|\tvar plugin = new dojox.grid.enhanced._Plugin(grid,\"myPlugin\",{...});\r\n\t\t//\t|\t// when foo.bar() is called, call the listener in the scope of plugin\r\n\t\t//\t|\tplugin.connect(foo, \"bar\", function(){\r\n\t\t//\t|\t\tconsole.debug(this.xxx());//\"this\" - plugin scope\r\n\t\t//\t|\t});\r\n\t\tvar conn = connect.connect(obj, event, this, method);\r\n\t\tthis._connects.push(conn);\r\n\t\treturn conn;\r\n\t},\r\n\tdisconnect: function(handle){\r\n\t\t// summary:\r\n\t\t//\t\tDisconnects handle and removes it from connection list.\r\n\t\tarray.some(this._connects, function(conn, i, conns){\r\n\t\t\tif(conn == handle){\r\n\t\t\t\tconnect.disconnect(handle);\r\n\t\t\t\tconns.splice(i, 1);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\t},\r\n\tsubscribe: function(topic, method){\r\n\t\t// summary:\r\n\t\t//\t\tSubscribes to the specified topic and calls the specified method\r\n\t\t//\t\tof this object.\r\n\t\t// example:\r\n\t\t//\t|\tvar plugin = new dojox.grid.enhanced._Plugin(grid,\"myPlugin\",{...});\r\n\t\t//\t|\t// when /my/topic is published, call the subscriber in the scope of plugin\r\n\t\t//\t|\t// with passed parameter - \"v\"\r\n\t\t//\t|\tplugin.subscribe(\"/my/topic\", function(v){\r\n\t\t//\t|\t\tconsole.debug(this.xxx(v));//\"this\" - plugin scope\r\n\t\t//\t|\t});\r\n\t\tvar subscribe = connect.subscribe(topic, this, method);\r\n\t\tthis._subscribes.push(subscribe);\r\n\t\treturn subscribe;\r\n\t},\r\n\tunsubscribe: function(handle){\r\n\t\t// summary:\r\n\t\t//\t\tUn-subscribes handle and removes it from subscriptions list.\r\n\t\tarray.some(this._subscribes, function(subscribe, i, subscribes){\r\n\t\t\tif(subscribe == handle){\r\n\t\t\t\tconnect.unsubscribe(handle);\r\n\t\t\t\tsubscribes.splice(i, 1);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t});\r\n\t},\r\n\tonSetStore: function(store){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when store is changed.\r\n\t},\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tDestroy all resources.\r\n\t\tarray.forEach(this._connects, connect.disconnect);\r\n\t\tarray.forEach(this._subscribes, connect.unsubscribe);\r\n\t\tdelete this._connects;\r\n\t\tdelete this._subscribes;\r\n\t\tdelete this.option;\r\n\t\tdelete this.privates;\r\n\t\t//console.log('Plugin [', this.name, '].destroy() executed!');\r\n\t}\r\n});\r\n\r\n//Each plugin is responsible for registering itself\r\n// e.g. for DnD plugin(name:'dnd'):\r\n// |\tdojox.grid.EnhancedGrid.registerPlugin(dojox.grid.enhanced.plugins.DnD/*class*/,\r\n// |\t\t{\"dependency\": [\"nestedSorting\"]}/*Optional - properties*/);\r\n\r\n});\r\n"]}