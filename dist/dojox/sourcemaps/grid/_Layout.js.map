{"version":3,"sources":["grid/_Layout.js"],"names":["define","dojo","dojox","declare","array","lang","domGeometry","constructor","inGrid","this","grid","cells","structure","defaultWidth","moveColumn","sourceViewIndex","destViewIndex","cellIndex","targetIndex","before","c","source_cells","dest_cells","cell","cell_ri","target_ri","i","index","splice","view","views","v","sortedCell","getCell","getSortIndex","_currentlySorted","getSortAsc","cs","j","k","push","si","sortInfo","forEach","marks","markup","split","parseInt","substring","join","setupHeaderMenu","setColumnVisibility","columnIndex","visible","hidden","w","viewWidth","_togglingColumn","getMarginBox","getHeaderNode","update","addCellDef","inRowIndex","inCellIndex","inDef","self","getCellWidth","colSpan","width","_defaultCellProps","isNaN","props","subrow","layoutIndex","length","_Base","new_cell","clone","unitWidth","_props","mixin","cell_type","type","cellType","Cell","isString","getObject","addRowDef","def","result","relSum","pctSum","doRel","relWidth","slice","window","addRowsDef","isArray","row","addViewDef","defaultCell","rows","setStructure","inStructure","fieldIndex","s","rowSelector","sel","_scopeName","isCell","isView","isObject","st","hasViews","cellCount"],"mappings":"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","file":"../../grid/_Layout.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"../main\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"./cells\",\r\n\t\"./_RowSelector\"\r\n], function(dojo, dojox, declare, array, lang, domGeometry){\r\n\r\nreturn declare(\"dojox.grid._Layout\", null, {\r\n\t// summary:\r\n\t//\tControls grid cell layout. Owned by grid and used internally.\r\n\tconstructor: function(inGrid){\r\n\t\tthis.grid = inGrid;\r\n\t},\r\n\t// flat array of grid cells\r\n\tcells: [],\r\n\t// structured array of grid cells\r\n\tstructure: null,\r\n\t// default cell width\r\n\tdefaultWidth: '6em',\r\n\r\n\t// methods\r\n\tmoveColumn: function(sourceViewIndex, destViewIndex, cellIndex, targetIndex, before){\r\n\t\tvar source_cells = this.structure[sourceViewIndex].cells[0];\r\n\t\tvar dest_cells = this.structure[destViewIndex].cells[0];\r\n\r\n\t\tvar cell = null;\r\n\t\tvar cell_ri = 0;\r\n\t\tvar target_ri = 0;\r\n\r\n\t\tfor(var i=0, c; c=source_cells[i]; i++){\r\n\t\t\tif(c.index == cellIndex){\r\n\t\t\t\tcell_ri = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcell = source_cells.splice(cell_ri, 1)[0];\r\n\t\tcell.view = this.grid.views.views[destViewIndex];\r\n\r\n\t\tfor(i=0, c=null; c=dest_cells[i]; i++){\r\n\t\t\tif(c.index == targetIndex){\r\n\t\t\t\ttarget_ri = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!before){\r\n\t\t\ttarget_ri += 1;\r\n\t\t}\r\n\t\tdest_cells.splice(target_ri, 0, cell);\r\n\r\n\t\tvar sortedCell = this.grid.getCell(this.grid.getSortIndex());\r\n\t\tif(sortedCell){\r\n\t\t\tsortedCell._currentlySorted = this.grid.getSortAsc();\r\n\t\t}\r\n\r\n\t\tthis.cells = [];\r\n\t\tcellIndex = 0;\r\n\t\tvar v;\r\n\t\tfor(i=0; v=this.structure[i]; i++){\r\n\t\t\tfor(var j=0, cs; cs=v.cells[j]; j++){\r\n\t\t\t\tfor(var k=0; c=cs[k]; k++){\r\n\t\t\t\t\tc.index = cellIndex;\r\n\t\t\t\t\tthis.cells.push(c);\r\n\t\t\t\t\tif(\"_currentlySorted\" in c){\r\n\t\t\t\t\t\tvar si = cellIndex + 1;\r\n\t\t\t\t\t\tsi *= c._currentlySorted ? 1 : -1;\r\n\t\t\t\t\t\tthis.grid.sortInfo = si;\r\n\t\t\t\t\t\tdelete c._currentlySorted;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcellIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t//Fix #9481 - reset idx in cell markup\r\n\t\tarray.forEach(this.cells, function(c){\r\n\t\t\tvar marks = c.markup[2].split(\" \");\r\n\t\t\tvar oldIdx = parseInt(marks[1].substring(5));//get old \"idx\"\r\n\t\t\tif(oldIdx != c.index){\r\n\t\t\t\tmarks[1] = \"idx=\\\"\" + c.index + \"\\\"\";\r\n\t\t\t\tc.markup[2] = marks.join(\" \");\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tthis.grid.setupHeaderMenu();\r\n\t\t//this.grid.renderOnIdle();\r\n\t},\r\n\r\n\tsetColumnVisibility: function(columnIndex, visible){\r\n\t\tvar cell = this.cells[columnIndex];\r\n\t\tif(cell.hidden == visible){\r\n\t\t\tcell.hidden = !visible;\r\n\t\t\tvar v = cell.view, w = v.viewWidth;\r\n\t\t\tif(w && w != \"auto\"){\r\n\t\t\t\tv._togglingColumn = domGeometry.getMarginBox(cell.getHeaderNode()).w || 0;\r\n\t\t\t}\r\n\t\t\tv.update();\r\n\t\t\treturn true;\r\n\t\t}else{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\t\r\n\taddCellDef: function(inRowIndex, inCellIndex, inDef){\r\n\t\tvar self = this;\r\n\t\tvar getCellWidth = function(inDef){\r\n\t\t\tvar w = 0;\r\n\t\t\tif(inDef.colSpan > 1){\r\n\t\t\t\tw = 0;\r\n\t\t\t}else{\r\n\t\t\t\tw = inDef.width || self._defaultCellProps.width || self.defaultWidth;\r\n\r\n\t\t\t\tif(!isNaN(w)){\r\n\t\t\t\t\tw = w + \"em\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn w;\r\n\t\t};\r\n\r\n\t\tvar props = {\r\n\t\t\tgrid: this.grid,\r\n\t\t\tsubrow: inRowIndex,\r\n\t\t\tlayoutIndex: inCellIndex,\r\n\t\t\tindex: this.cells.length\r\n\t\t};\r\n\r\n\t\tif(inDef && inDef instanceof dojox.grid.cells._Base){\r\n\t\t\tvar new_cell = lang.clone(inDef);\r\n\t\t\tprops.unitWidth = getCellWidth(new_cell._props);\r\n\t\t\tnew_cell = lang.mixin(new_cell, this._defaultCellProps, inDef._props, props);\r\n\t\t\treturn new_cell;\r\n\t\t}\r\n\r\n\t\tvar cell_type = inDef.type || inDef.cellType || this._defaultCellProps.type || this._defaultCellProps.cellType || dojox.grid.cells.Cell;\r\n\t\tif(lang.isString(cell_type)){\r\n\t\t\tcell_type = lang.getObject(cell_type);\r\n\t\t}\r\n\r\n\t\tprops.unitWidth = getCellWidth(inDef);\r\n\t\treturn new cell_type(lang.mixin({}, this._defaultCellProps, inDef, props));\r\n\t},\r\n\t\r\n\taddRowDef: function(inRowIndex, inDef){\r\n\t\tvar result = [];\r\n\t\tvar relSum = 0, pctSum = 0, doRel = true;\r\n\t\tfor(var i=0, def, cell; (def=inDef[i]); i++){\r\n\t\t\tcell = this.addCellDef(inRowIndex, i, def);\r\n\t\t\tresult.push(cell);\r\n\t\t\tthis.cells.push(cell);\r\n\t\t\t// Check and calculate the sum of all relative widths\r\n\t\t\tif(doRel && cell.relWidth){\r\n\t\t\t\trelSum += cell.relWidth;\r\n\t\t\t}else if(cell.width){\r\n\t\t\t\tvar w = cell.width;\r\n\t\t\t\tif(typeof w == \"string\" && w.slice(-1) == \"%\"){\r\n\t\t\t\t\tpctSum += window.parseInt(w, 10);\r\n\t\t\t\t}else if(w == \"auto\"){\r\n\t\t\t\t\t// relative widths doesn't play nice with auto - since we\r\n\t\t\t\t\t// don't have a way of knowing how much space the auto is\r\n\t\t\t\t\t// supposed to take up.\r\n\t\t\t\t\tdoRel = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(relSum && doRel){\r\n\t\t\t// We have some kind of relWidths specified - so change them to %\r\n\t\t\tarray.forEach(result, function(cell){\r\n\t\t\t\tif(cell.relWidth){\r\n\t\t\t\t\tcell.width = cell.unitWidth = ((cell.relWidth / relSum) * (100 - pctSum)) + \"%\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\t\r\n\t},\r\n\r\n\taddRowsDef: function(inDef){\r\n\t\tvar result = [];\r\n\t\tif(lang.isArray(inDef)){\r\n\t\t\tif(lang.isArray(inDef[0])){\r\n\t\t\t\tfor(var i=0, row; inDef && (row=inDef[i]); i++){\r\n\t\t\t\t\tresult.push(this.addRowDef(i, row));\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tresult.push(this.addRowDef(0, inDef));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\t\r\n\taddViewDef: function(inDef){\r\n\t\tthis._defaultCellProps = inDef.defaultCell || {};\r\n\t\tif(inDef.width && inDef.width == \"auto\"){\r\n\t\t\tdelete inDef.width;\r\n\t\t}\r\n\t\treturn lang.mixin({}, inDef, {cells: this.addRowsDef(inDef.rows || inDef.cells)});\r\n\t},\r\n\t\r\n\tsetStructure: function(inStructure){\r\n\t\tthis.fieldIndex = 0;\r\n\t\tthis.cells = [];\r\n\t\tvar s = this.structure = [];\r\n\r\n\t\tif(this.grid.rowSelector){\r\n\t\t\tvar sel = { type: dojox._scopeName + \".grid._RowSelector\" };\r\n\r\n\t\t\tif(lang.isString(this.grid.rowSelector)){\r\n\t\t\t\tvar width = this.grid.rowSelector;\r\n\r\n\t\t\t\tif(width == \"false\"){\r\n\t\t\t\t\tsel = null;\r\n\t\t\t\t}else if(width != \"true\"){\r\n\t\t\t\t\tsel['width'] = width;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(!this.grid.rowSelector){\r\n\t\t\t\t\tsel = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(sel){\r\n\t\t\t\ts.push(this.addViewDef(sel));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar isCell = function(def){\r\n\t\t\treturn (\"name\" in def || \"field\" in def || \"get\" in def);\r\n\t\t};\r\n\r\n\t\tvar isRowDef = function(def){\r\n\t\t\tif(lang.isArray(def)){\r\n\t\t\t\tif(lang.isArray(def[0]) || isCell(def[0])){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\tvar isView = function(def){\r\n\t\t\treturn (def !== null && lang.isObject(def) &&\r\n\t\t\t\t\t(\"cells\" in def || \"rows\" in def || (\"type\" in def && !isCell(def))));\r\n\t\t};\r\n\r\n\t\tif(lang.isArray(inStructure)){\r\n\t\t\tvar hasViews = false;\r\n\t\t\tfor(var i=0, st; (st=inStructure[i]); i++){\r\n\t\t\t\tif(isView(st)){\r\n\t\t\t\t\thasViews = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!hasViews){\r\n\t\t\t\ts.push(this.addViewDef({ cells: inStructure }));\r\n\t\t\t}else{\r\n\t\t\t\tfor(i=0; (st=inStructure[i]); i++){\r\n\t\t\t\t\tif(isRowDef(st)){\r\n\t\t\t\t\t\ts.push(this.addViewDef({ cells: st }));\r\n\t\t\t\t\t}else if(isView(st)){\r\n\t\t\t\t\t\ts.push(this.addViewDef(st));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else if(isView(inStructure)){\r\n\t\t\t// it's a view object\r\n\t\t\ts.push(this.addViewDef(inStructure));\r\n\t\t}\r\n\r\n\t\tthis.cellCount = this.cells.length;\r\n\t\tthis.grid.setupHeaderMenu();\r\n\t}\r\n});\r\n});"]}