{"version":3,"sources":["grid/_TreeView.js"],"names":["define","dijit","dojox","declare","array","lang","event","domAttr","domClass","domStyle","domCtr","query","parser","template","_Widget","_TemplatedMixin","_View","_Builder","util","open","toggleClass","itemId","cellIdx","view","rowNode","rowIdx","expandoCell","level","templateString","_toggleRows","this","length","_initialized","grid","updateRow","self","treeModel","p","_tableRow","get","forEach","n","en","parentNode","contains","ew","byNode","style","display","getAttribute","wOpen","getOpenState","setOpen","domNode","store","d","idx","_by_idx","_loadedChildren","itm","getItem","expandoInner","innerHTML","add","getChildren","items","_setOpen","data","isItemLoaded","item","loadItem","onItem","hitch","i","idty","getIdentity","_by_idty","remove","toggle","base","new_base","trim","replace","indexOf","set","changed","openStates","v","g","rowHeightChanged","postresize","hasVScrollbar","onToggle","e","stop","setRowNode","structure","cells","_contentBuilderClass","_ContentBuilder","generateHtml","inDataIndex","inRowIndex","html","getTableArray","row","fire","createRow","rowItem","summaryRow","toggleClasses","rowStack","shown","rowNodeIdx","tcJoin","join","tcString","clString","mayHaveChildren","push","cell","parentOpen","values","nextLevel","parentCell","m","markup","cc","customClasses","cs","customStyles","formatAtLevel","apply","isItem","_by_idty_paths","iStack","concat","TreePath","children","cItm","nToggle","split","pop","hasAttribute","field","tToggle","findTarget","inSource","inTag","tagName","toLowerCase","getCellNode","inRowNode","inCellIndex","node","decorateEvent","findRowTarget","target","rowIndex","baseDecorateEvent","getCell","cellIndex","_onDndDrop","source","nodes","copy","aggregator","clearSubtotalCache","inherited","arguments","postCreate","connect","_cleanupExpandoCache","index","identity","layout","path","ppath","parent","pitem","_expandos","exp","destroy","j","postMixInProperties","onBeforeRow","onAfterRow","expando","tc","place","parseInt","isNaN","parse","removeChild","alt","className","rows","styleRowNode","updateRowStyles","rowNodes","content"],"mappings":"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","file":"../../grid/_TreeView.js","sourcesContent":["define([\r\n\t\"dijit/registry\",\r\n\t\"../main\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/query\",\r\n\t\"dojo/parser\",\r\n\t\"dojo/text!./resources/Expando.html\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"./_View\",\r\n\t\"./_Builder\",\r\n\t\"./util\"\r\n], function(dijit, dojox, declare, array, lang, event, domAttr, domClass, \r\n\tdomStyle, domCtr, query, parser, template, _Widget, _TemplatedMixin, _View, _Builder, util){\r\n\r\ndeclare(\"dojox.grid._Expando\", [ _Widget, _TemplatedMixin ], {\r\n\topen: false,\r\n\ttoggleClass: \"\",\r\n\titemId: \"\",\r\n\tcellIdx: -1,\r\n\tview: null,\r\n\trowNode: null,\r\n\trowIdx: -1,\r\n\texpandoCell: null,\r\n\tlevel: 0,\r\n\ttemplateString: template,\r\n\t_toggleRows: function(toggleClass, open){\r\n\t\tif(!toggleClass || !this.rowNode){ return; }\r\n\t\tif(query(\"table.dojoxGridRowTableNeedsRowUpdate\").length){\r\n\t\t\tif(this._initialized){\r\n\t\t\t\tthis.view.grid.updateRow(this.rowIdx);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar self = this;\r\n\t\tvar g = this.view.grid;\r\n\t\tif(g.treeModel){\r\n\t\t\tvar p = this._tableRow ? domAttr.get(this._tableRow, \"dojoxTreeGridPath\") : \"\";\r\n\t\t\tif(p){\r\n\t\t\t\tquery(\"tr[dojoxTreeGridPath^=\\\"\" + p + \"/\\\"]\", this.rowNode).forEach(function(n){\r\n\t\t\t\t\tvar en = query(\".dojoxGridExpando\", n)[0];\r\n\t\t\t\t\tif(en && en.parentNode && en.parentNode.parentNode &&\r\n\t\t\t\t\t\t\t\t!domClass.contains(en.parentNode.parentNode, \"dojoxGridNoChildren\")){\r\n\t\t\t\t\t\tvar ew = dijit.byNode(en);\r\n\t\t\t\t\t\tif(ew){\r\n\t\t\t\t\t\t\tew._toggleRows(toggleClass, ew.open&&open);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tn.style.display = open ? \"\" : \"none\";\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tquery(\"tr.\" + toggleClass, this.rowNode).forEach(function(n){\r\n\t\t\t\tif(domClass.contains(n, \"dojoxGridExpandoRow\")){\r\n\t\t\t\t\tvar en = query(\".dojoxGridExpando\", n)[0];\r\n\t\t\t\t\tif(en){\r\n\t\t\t\t\t\tvar ew = dijit.byNode(en);\r\n\t\t\t\t\t\tvar toggleClass = ew ? ew.toggleClass : en.getAttribute(\"toggleClass\");\r\n\t\t\t\t\t\tvar wOpen = ew ? ew.open : self.expandoCell.getOpenState(en.getAttribute(\"itemId\"));\r\n\t\t\t\t\t\tself._toggleRows(toggleClass, wOpen&&open);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tn.style.display = open ? \"\" : \"none\";\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tsetOpen: function(open){\r\n\t\tif(open && domClass.contains(this.domNode, \"dojoxGridExpandoLoading\")){\r\n\t\t\topen = false;\r\n\t\t}\r\n\t\tvar view = this.view;\r\n\t\tvar grid = view.grid;\r\n\t\tvar store = grid.store;\r\n\t\tvar treeModel = grid.treeModel;\r\n\t\tvar d = this;\r\n\t\tvar idx = this.rowIdx;\r\n\t\tvar me = grid._by_idx[idx];\r\n\t\tif(!me){ return; }\r\n\t\tif(treeModel && !this._loadedChildren){\r\n\t\t\tif(open){\r\n\t\t\t\t// Do this to make sure our children are fully-loaded\r\n\t\t\t\tvar itm = grid.getItem(domAttr.get(this._tableRow, \"dojoxTreeGridPath\"));\r\n\t\t\t\tif(itm){\r\n\t\t\t\t\tthis.expandoInner.innerHTML = \"o\";\r\n\t\t\t\t\tdomClass.add(this.domNode, \"dojoxGridExpandoLoading\");\r\n\t\t\t\t\ttreeModel.getChildren(itm, function(items){\r\n\t\t\t\t\t\td._loadedChildren = true;\r\n\t\t\t\t\t\td._setOpen(open);\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._setOpen(open);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis._setOpen(open);\r\n\t\t\t}\r\n\t\t}else if(!treeModel && store){\r\n\t\t\tif(open){\r\n\t\t\t\tvar data = grid._by_idx[this.rowIdx];\r\n\t\t\t\tif(data&&!store.isItemLoaded(data.item)){\r\n\t\t\t\t\tthis.expandoInner.innerHTML = \"o\";\r\n\t\t\t\t\tdomClass.add(this.domNode, \"dojoxGridExpandoLoading\");\r\n\t\t\t\t\tstore.loadItem({\r\n\t\t\t\t\t\titem: data.item,\r\n\t\t\t\t\t\tonItem: lang.hitch(this, function(i){\r\n\t\t\t\t\t\t\tvar idty = store.getIdentity(i);\r\n\t\t\t\t\t\t\tgrid._by_idty[idty] = grid._by_idx[this.rowIdx] = { idty: idty, item: i };\r\n\t\t\t\t\t\t\tthis._setOpen(open);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._setOpen(open);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis._setOpen(open);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tthis._setOpen(open);\r\n\t\t}\r\n\t},\r\n\t_setOpen: function(open){\r\n\t\tif(open && this._tableRow && domClass.contains(this._tableRow, \"dojoxGridNoChildren\")){\r\n\t\t\tthis._setOpen(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.expandoInner.innerHTML = open ? \"-\" : \"+\";\r\n\t\tdomClass.remove(this.domNode, \"dojoxGridExpandoLoading\");\r\n\t\tdomClass.toggle(this.domNode, \"dojoxGridExpandoOpened\", open);\r\n\t\tif(this._tableRow){\r\n\t\t\tdomClass.toggle(this._tableRow, \"dojoxGridRowCollapsed\", !open);\r\n\t\t\tvar base = domAttr.get(this._tableRow, \"dojoxTreeGridBaseClasses\");\r\n\t\t\tvar new_base = \"\";\r\n\t\t\tif(open){\r\n\t\t\t\tnew_base = lang.trim((\" \" + base + \" \").replace(\" dojoxGridRowCollapsed \", \" \"));\r\n\t\t\t}else{\r\n\t\t\t\tif((\" \" + base + \" \").indexOf(' dojoxGridRowCollapsed ') < 0){\r\n\t\t\t\t\tnew_base = base + (base ? ' ' : '' ) + 'dojoxGridRowCollapsed';\r\n\t\t\t\t}else{\r\n\t\t\t\t\tnew_base = base;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdomAttr.set(this._tableRow, 'dojoxTreeGridBaseClasses', new_base);\r\n\t\t}\r\n\t\tvar changed = (this.open !== open);\r\n\t\tthis.open = open;\r\n\t\tif(this.expandoCell && this.itemId){\r\n\t\t\tthis.expandoCell.openStates[this.itemId] = open;\r\n\t\t}\r\n\t\tvar v = this.view;\r\n\t\tvar g = v.grid;\r\n\t\tif(this.toggleClass && changed){\r\n\t\t\tif(!this._tableRow || !this._tableRow.style.display){\r\n\t\t\t\tthis._toggleRows(this.toggleClass, open);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(v && this._initialized && this.rowIdx >= 0){\r\n\t\t\tg.rowHeightChanged(this.rowIdx);\r\n\t\t\tg.postresize();\r\n\t\t\tv.hasVScrollbar(true);\r\n\t\t}\r\n\t\tthis._initialized = true;\r\n\t},\r\n\tonToggle: function(e){\r\n\t\tthis.setOpen(!this.open);\r\n\t\tevent.stop(e);\r\n\t},\r\n\tsetRowNode: function(rowIdx, rowNode, view){\r\n\t\tif(this.cellIdx < 0 || !this.itemId){ return false; }\r\n\t\tthis._initialized = false;\r\n\t\tthis.view = view;\r\n\t\tthis.rowNode = rowNode;\r\n\t\tthis.rowIdx = rowIdx;\r\n\t\tthis.expandoCell = view.structure.cells[0][this.cellIdx];\r\n\t\tvar d = this.domNode;\r\n\t\tif(d && d.parentNode && d.parentNode.parentNode){\r\n\t\t\tthis._tableRow = d.parentNode.parentNode;\r\n\t\t}\r\n\t\tthis.open = this.expandoCell.getOpenState(this.itemId);\r\n\t\tif(view.grid.treeModel){\r\n\t\t\t// TODO: Rather than hard-code the 18px and 3px, we should probably\r\n\t\t\t// calculate them based off css or something...  However, all the\r\n\t\t\t// themes that we support use these values.\r\n\t\t\tdomStyle.set(this.domNode , \"marginLeft\" , (this.level * 18) + \"px\");\r\n\t\t\tif(this.domNode.parentNode){\r\n\t\t\t\tdomStyle.set(this.domNode.parentNode, \"backgroundPosition\", ((this.level * 18) + (3)) + \"px\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setOpen(this.open);\r\n\t\treturn true;\r\n\t}\r\n});\r\n\r\nvar _TreeContentBuilder = declare(\"dojox.grid._TreeContentBuilder\", _Builder._ContentBuilder, {\r\n\tgenerateHtml: function(inDataIndex, inRowIndex){\r\n\t\tvar\r\n\t\t\thtml = this.getTableArray(),\r\n\t\t\tv = this.view,\r\n\t\t\trow = v.structure.cells[0],\r\n\t\t\titem = this.grid.getItem(inRowIndex),\r\n\t\t\tgrid = this.grid,\r\n\t\t\tstore = this.grid.store;\r\n\r\n\t\tutil.fire(this.view, \"onBeforeRow\", [inRowIndex, [row]]);\r\n\t\t\r\n\t\tvar createRow = function(level, rowItem, summaryRow, toggleClasses, rowStack, shown){\r\n\t\t\tif(!shown){\r\n\t\t\t\tif(html[0].indexOf('dojoxGridRowTableNeedsRowUpdate') == -1){\r\n\t\t\t\t\thtml[0] = html[0].replace(\"dojoxGridRowTable\", \"dojoxGridRowTable dojoxGridRowTableNeedsRowUpdate\");\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar rowNodeIdx = html.length;\r\n\t\t\ttoggleClasses = toggleClasses || [];\r\n\t\t\tvar tcJoin = toggleClasses.join('|');\r\n\t\t\tvar tcString = toggleClasses[toggleClasses.length - 1];\r\n\t\t\tvar clString = tcString + (summaryRow ? \" dojoxGridSummaryRow\" : \"\");\r\n\t\t\tvar sString = \"\";\r\n\t\t\tif(grid.treeModel && rowItem && !grid.treeModel.mayHaveChildren(rowItem)){\r\n\t\t\t\tclString += \" dojoxGridNoChildren\";\r\n\t\t\t}\r\n\t\t\thtml.push('<tr style=\"' + sString + '\" class=\"' + clString + '\" dojoxTreeGridPath=\"' + rowStack.join('/') +  '\" dojoxTreeGridBaseClasses=\"' + clString + '\">');\r\n\t\t\tvar nextLevel = level + 1;\r\n\t\t\tvar parentCell = null;\r\n\t\t\tfor(var i=0, cell; (cell=row[i]); i++){\r\n\t\t\t\tvar m = cell.markup, cc = cell.customClasses = [], cs = cell.customStyles = [];\r\n\t\t\t\t// content (format can fill in cc and cs as side-effects)\r\n\t\t\t\tm[5] = cell.formatAtLevel(rowStack, rowItem, level, summaryRow, tcString, cc);\r\n\t\t\t\t// classes\r\n\t\t\t\tm[1] = cc.join(' ');\r\n\t\t\t\t// styles\r\n\t\t\t\tm[3] = cs.join(';');\r\n\t\t\t\t// in-place concat\r\n\t\t\t\thtml.push.apply(html, m);\r\n\t\t\t\tif(!parentCell && cell.level === nextLevel && cell.parentCell){\r\n\t\t\t\t\tparentCell = cell.parentCell;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\thtml.push('</tr>');\r\n\t\t\tif(rowItem && store && store.isItem(rowItem)){\r\n\t\t\t\tvar idty = store.getIdentity(rowItem);\r\n\t\t\t\tif(typeof grid._by_idty_paths[idty] == \"undefined\"){\r\n\t\t\t\t\tgrid._by_idty_paths[idty] = rowStack.join('/');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar expandoCell;\r\n\t\t\tvar parentOpen;\r\n\t\t\tvar path;\r\n\t\t\tvar values;\r\n\t\t\tvar iStack = rowStack.concat([]);\r\n\t\t\tif(grid.treeModel && rowItem){\r\n\t\t\t\tif(grid.treeModel.mayHaveChildren(rowItem)){\r\n\t\t\t\t\texpandoCell = v.structure.cells[0][grid.expandoCell||0];\r\n\t\t\t\t\tparentOpen = expandoCell.getOpenState(rowItem) && shown;\r\n\t\t\t\t\tpath = new dojox.grid.TreePath(rowStack.join('/'), grid);\r\n\t\t\t\t\tvalues = path.children(true)||[];\r\n\t\t\t\t\tarray.forEach(values, function(cItm, idx){\r\n\t\t\t\t\t\tvar nToggle = tcJoin.split('|');\r\n\t\t\t\t\t\tnToggle.push(nToggle[nToggle.length - 1] + \"-\" + idx);\r\n\t\t\t\t\t\tiStack.push(idx);\r\n\t\t\t\t\t\tcreateRow(nextLevel, cItm, false, nToggle, iStack, parentOpen);\r\n\t\t\t\t\t\tiStack.pop();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}else if(rowItem && parentCell && !summaryRow){\r\n\t\t\t\texpandoCell = v.structure.cells[0][parentCell.level];\r\n\t\t\t\tparentOpen = expandoCell.getOpenState(rowItem) && shown;\r\n\t\t\t\tif(store.hasAttribute(rowItem, parentCell.field)){\r\n\t\t\t\t\tvar tToggle = tcJoin.split('|');\r\n\t\t\t\t\ttToggle.pop();\r\n\t\t\t\t\tpath = new dojox.grid.TreePath(rowStack.join('/'), grid);\r\n\t\t\t\t\tvalues = path.children(true)||[];\r\n\t\t\t\t\tif(values.length){\r\n\t\t\t\t\t\thtml[rowNodeIdx] = '<tr class=\"' + tToggle.join(' ') +' dojoxGridExpandoRow\" dojoxTreeGridPath=\"' + rowStack.join('/') + '\">';\r\n\t\t\t\t\t\tarray.forEach(values, function(cItm, idx){\r\n\t\t\t\t\t\t\tvar nToggle = tcJoin.split('|');\r\n\t\t\t\t\t\t\tnToggle.push(nToggle[nToggle.length - 1] + \"-\" + idx);\r\n\t\t\t\t\t\t\tiStack.push(idx);\r\n\t\t\t\t\t\t\tcreateRow(nextLevel, cItm, false, nToggle, iStack, parentOpen);\r\n\t\t\t\t\t\t\tiStack.pop();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tiStack.push(values.length);\r\n\t\t\t\t\t\tcreateRow(level, rowItem, true, toggleClasses, iStack, parentOpen);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\thtml[rowNodeIdx] = '<tr class=\"' + tcString + ' dojoxGridNoChildren\" dojoxTreeGridPath=\"' + rowStack.join('/') + '\">';\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(!store.isItemLoaded(rowItem)){\r\n\t\t\t\t\t\thtml[0] = html[0].replace(\"dojoxGridRowTable\", \"dojoxGridRowTable dojoxGridRowTableNeedsRowUpdate\");\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\thtml[rowNodeIdx] = '<tr class=\"' + tcString + ' dojoxGridNoChildren\" dojoxTreeGridPath=\"' + rowStack.join('/') + '\">';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else if(rowItem && !summaryRow && toggleClasses.length > 1){\r\n\t\t\t\thtml[rowNodeIdx] = '<tr class=\"' + toggleClasses[toggleClasses.length - 2] + '\" dojoxTreeGridPath=\"' + rowStack.join('/') + '\">';\r\n\t\t\t}\r\n\t\t};\r\n\t\tcreateRow(0, item, false, [\"dojoxGridRowToggle-\" + inRowIndex], [inRowIndex], true);\r\n\t\thtml.push('</table>');\r\n\t\treturn html.join(''); // String\r\n\t},\r\n\tfindTarget: function(inSource, inTag){\r\n\t\tvar n = inSource;\r\n\t\twhile(n && (n!=this.domNode)){\r\n\t\t\tif(n.tagName && n.tagName.toLowerCase() == 'tr'){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tn = n.parentNode;\r\n\t\t}\r\n\t\treturn (n != this.domNode) ? n : null;\r\n\t},\r\n\tgetCellNode: function(inRowNode, inCellIndex){\r\n\t\tvar node = query(\"td[idx='\" + inCellIndex + \"']\", inRowNode)[0];\r\n\t\tif(node&&node.parentNode&&!domClass.contains(node.parentNode, \"dojoxGridSummaryRow\")){\r\n\t\t\treturn node;\r\n\t\t}\r\n\t},\r\n\tdecorateEvent: function(e){\r\n\t\te.rowNode = this.findRowTarget(e.target);\r\n\t\tif(!e.rowNode){return false;}\r\n\t\te.rowIndex = domAttr.get(e.rowNode, 'dojoxTreeGridPath');\r\n\t\tthis.baseDecorateEvent(e);\r\n\t\te.cell = this.grid.getCell(e.cellIndex);\r\n\t\treturn true; // Boolean\r\n\t}\r\n});\r\n\r\nreturn declare(\"dojox.grid._TreeView\", _View, {\r\n\t_contentBuilderClass: _TreeContentBuilder,\r\n\t_onDndDrop: function(source, nodes, copy){\r\n\t\tif(this.grid && this.grid.aggregator){\r\n\t\t\tthis.grid.aggregator.clearSubtotalCache();\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.connect(this.grid, '_cleanupExpandoCache', '_cleanupExpandoCache');\r\n\t},\r\n\t_cleanupExpandoCache: function(index, identity, item){\r\n\t\tif(index == -1){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tarray.forEach(this.grid.layout.cells, function(cell){\r\n\t\t\tif(typeof cell['openStates'] != 'undefined'){\r\n\t\t\t\tif(identity in cell.openStates){\r\n\t\t\t\t\tdelete cell.openStates[identity];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(typeof index == \"string\" && index.indexOf('/') > -1){\r\n\t\t\tvar path = new dojox.grid.TreePath(index, this.grid);\r\n\t\t\tvar ppath = path.parent();\r\n\t\t\twhile(ppath){\r\n\t\t\t\tpath = ppath;\r\n\t\t\t\tppath = path.parent();\r\n\t\t\t}\r\n\t\t\tvar pitem = path.item();\r\n\t\t\tif(!pitem){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar idty = this.grid.store.getIdentity(pitem);\r\n\t\t\tif(typeof this._expandos[idty] != 'undefined'){\r\n\t\t\t\tfor(var i in this._expandos[idty]){\r\n\t\t\t\t\tvar exp = this._expandos[idty][i];\r\n\t\t\t\t\tif(exp){\r\n\t\t\t\t\t\texp.destroy();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._expandos[idty][i];\r\n\t\t\t\t}\r\n\t\t\t\tdelete this._expandos[idty];\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tfor(var i in this._expandos){\r\n\t\t\t\tif(typeof this._expandos[i] != 'undefined'){\r\n\t\t\t\t\tfor(var j in this._expandos[i]){\r\n\t\t\t\t\t\tvar exp = this._expandos[i][j];\r\n\t\t\t\t\t\tif(exp){\r\n\t\t\t\t\t\t\texp.destroy();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._expandos = {};\r\n\t\t}\r\n\t},\r\n\tpostMixInProperties: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._expandos = {};\r\n\t},\r\n\tonBeforeRow: function(inRowIndex, cells){\r\n\t\t// Save off our expando if we have one so we don't have to create it\r\n\t\t// again\r\n\t\tvar g = this.grid;\r\n\t\tif(g._by_idx && g._by_idx[inRowIndex] && g._by_idx[inRowIndex].idty){\r\n\t\t\tvar idty = g._by_idx[inRowIndex].idty;\r\n\t\t\tthis._expandos[idty] = this._expandos[idty] || {};\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tonAfterRow: function(inRowIndex, cells, inRowNode){\r\n\t\tarray.forEach(query(\"span.dojoxGridExpando\", inRowNode), function(n){\r\n\t\t\tif(n && n.parentNode){\r\n\t\t\t\t// Either create our expando or put the existing expando back\r\n\t\t\t\t// into place\r\n\t\t\t\tvar tc = n.getAttribute(\"toggleClass\");\r\n\t\t\t\tvar idty;\r\n\t\t\t\tvar expando;\r\n\t\t\t\tvar g = this.grid;\r\n\t\t\t\tif(g._by_idx && g._by_idx[inRowIndex] && g._by_idx[inRowIndex].idty){\r\n\t\t\t\t\tidty = g._by_idx[inRowIndex].idty;\r\n\t\t\t\t\texpando = this._expandos[idty][tc];\r\n\t\t\t\t}\r\n\t\t\t\tif(expando){\r\n\t\t\t\t\tdomCtr.place(expando.domNode, n, \"replace\");\r\n\t\t\t\t\texpando.itemId = n.getAttribute(\"itemId\");\r\n\t\t\t\t\texpando.cellIdx = parseInt(n.getAttribute(\"cellIdx\"), 10);\r\n\t\t\t\t\tif(isNaN(expando.cellIdx)){\r\n\t\t\t\t\t\texpando.cellIdx = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(idty){\r\n\t\t\t\t\t\texpando = parser.parse(n.parentNode)[0];\r\n\t\t\t\t\t\tthis._expandos[idty][tc] = expando;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(expando && !expando.setRowNode(inRowIndex, inRowNode, this)){\r\n\t\t\t\t\texpando.domNode.parentNode.removeChild(expando.domNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tvar alt = false;\r\n\t\tvar self = this;\r\n\t\tquery(\"tr[dojoxTreeGridPath]\", inRowNode).forEach(function(n){\r\n\t\t\tdomClass.toggle(n, \"dojoxGridSubRowAlt\", alt);\r\n\t\t\tdomAttr.set(n, \"dojoxTreeGridBaseClasses\", n.className);\r\n\t\t\talt = !alt;\r\n\t\t\tself.grid.rows.styleRowNode(domAttr.get(n, 'dojoxTreeGridPath'), n);\r\n\t\t});\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tupdateRowStyles: function(inRowIndex){\r\n\t\tvar rowNodes = query(\"tr[dojoxTreeGridPath='\" + inRowIndex + \"']\", this.domNode);\r\n\t\tif(rowNodes.length){\r\n\t\t\tthis.styleRowNode(inRowIndex, rowNodes[0]);\r\n\t\t}\r\n\t},\r\n\tgetCellNode: function(inRowIndex, inCellIndex){\r\n\t\tvar row = query(\"tr[dojoxTreeGridPath='\" + inRowIndex + \"']\", this.domNode)[0];\r\n\t\tif(row){\r\n\t\t\treturn this.content.getCellNode(row, inCellIndex);\r\n\t\t}\r\n\t},\r\n\tdestroy: function(){\r\n\t\tthis._cleanupExpandoCache();\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n});"]}