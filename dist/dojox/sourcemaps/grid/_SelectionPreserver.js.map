{"version":3,"sources":["grid/_SelectionPreserver.js"],"names":["define","declare","connect","lang","array","constructor","selection","this","grid","reset","_connects","hitch","destroy","forEach","disconnect","_selectedById","_reSelectById","item","index","_hasIdentity","selected","store","getIdentity","_selectById","toSelect","inItemOrIndex","mode","g","entry","_by_idx"],"mappings":";;;;;;;AAAAA,QACC,qBACA,qBACA,kBACA,oBACE,SAASC,EAASC,EAASC,EAAMC,GAEpC,OAAOH,EAAQ,iCAAkC,MAgBhDI,YAAa,SAASC,GACrBC,KAAKD,UAAYA,EACjB,IAAIE,EAAOD,KAAKC,KAAOF,EAAUE,KACjCD,KAAKE,QACLF,KAAKG,WACJR,EAAQA,QAAQM,EAAM,YAAaD,KAAM,SACzCL,EAAQA,QAAQM,EAAM,WAAYD,KAAM,iBACxCL,EAAQA,QAAQI,EAAW,aAAcH,EAAKQ,MAAMJ,KAAM,eAAe,IACzEL,EAAQA,QAAQI,EAAW,eAAgBH,EAAKQ,MAAMJ,KAAM,eAAe,IAC3EL,EAAQA,QAAQI,EAAW,cAAeC,KAAM,WAGlDK,QAAS,WACRL,KAAKE,QACLL,EAAMS,QAAQN,KAAKG,UAAWR,EAAQY,mBAC/BP,KAAKG,WAEbD,MAAO,WACNF,KAAKQ,kBAENC,cAAe,SAASC,EAAMC,GAG1BD,GAAQV,KAAKC,KAAKW,eACpBZ,KAAKD,UAAUc,SAASF,GAASX,KAAKQ,cAAcR,KAAKC,KAAKa,MAAMC,YAAYL,MAGlFM,YAAa,SAASC,EAAUC,GAG/B,GAA0B,QAAvBlB,KAAKD,UAAUoB,MAAmBnB,KAAKC,KAAKW,aAA/C,CACA,IAAIF,EAAOQ,EAAeE,EAAIpB,KAAKC,KACnC,GAA2B,iBAAjBiB,GAAqD,iBAAjBA,EAA0B,CACvE,IAAIG,EAAQD,EAAEE,QAAQJ,GACtBR,EAAOW,GAASA,EAAMX,KAKvB,OAHGA,IACFV,KAAKQ,cAAcY,EAAEN,MAAMC,YAAYL,MAAWO,GAE5CP","file":"../../grid/_SelectionPreserver.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\"\r\n], function(declare, connect, lang, array){\r\n\r\nreturn declare(\"dojox.grid._SelectionPreserver\", null, {\r\n\t// summary:\r\n\t//\t\tPreserve selections across various user actions.\r\n\t//\r\n\t// description:\r\n\t//\t\tWhen this feature is turned on, Grid will try to preserve selections across actions, e.g. sorting, filtering etc.\r\n\t//\r\n\t//\t\tPrecondition - Identifier(id) is required for store since id is the only way for differentiating row items.\r\n\t//\t\tKnown issue - The preserved selections might be inaccurate if some unloaded rows are previously selected by range(e.g.SHIFT + click)\r\n\t//\r\n\t// example:\r\n\t// |\t//To turn on this - please set 'keepSelection' attribute to true\r\n\t// |\t<div dojoType=\"dojox.grid.DataGrid\" keepSelection = true .../>\r\n\t// |\t<div dojoType=\"dojox.grid.TreeGrid\" keepSelection = true .../>\r\n\t// |\t<div dojoType=\"dojox.grid.LazyTreeGrid\" keepSelection = true .../>\r\n\t\r\n\tconstructor: function(selection){\r\n\t\tthis.selection = selection;\r\n\t\tvar grid = this.grid = selection.grid;\r\n\t\tthis.reset();\r\n\t\tthis._connects = [\r\n\t\t\tconnect.connect(grid, '_setStore', this, 'reset'),\r\n\t\t\tconnect.connect(grid, '_addItem', this, '_reSelectById'),\r\n\t\t\tconnect.connect(selection, 'onSelected', lang.hitch(this, '_selectById', true)),\r\n\t\t\tconnect.connect(selection, 'onDeselected', lang.hitch(this, '_selectById', false)),\r\n\t\t\tconnect.connect(selection, 'deselectAll', this, 'reset')\r\n\t\t];\r\n\t},\r\n\tdestroy: function(){\r\n\t\tthis.reset();\r\n\t\tarray.forEach(this._connects, connect.disconnect);\r\n\t\tdelete this._connects;\r\n\t},\r\n\treset: function(){\r\n\t\tthis._selectedById = {};\r\n\t},\r\n\t_reSelectById: function(item, index){\r\n\t\t// summary:\r\n\t\t//\t\tWhen some rows is fetched, determine whether it should be selected.\r\n\t\tif(item && this.grid._hasIdentity){\r\n\t\t\tthis.selection.selected[index] = this._selectedById[this.grid.store.getIdentity(item)];\r\n\t\t}\r\n\t},\r\n\t_selectById: function(toSelect, inItemOrIndex){\r\n\t\t// summary:\r\n\t\t//\t\tRecord selected rows by ID.\r\n\t\tif(this.selection.mode == 'none' || !this.grid._hasIdentity){ return; }\r\n\t\tvar item = inItemOrIndex, g = this.grid;\r\n\t\tif(typeof inItemOrIndex == \"number\" || typeof inItemOrIndex == \"string\"){\r\n\t\t\tvar entry = g._by_idx[inItemOrIndex];\r\n\t\t\titem = entry && entry.item;\r\n\t\t}\r\n\t\tif(item){\r\n\t\t\tthis._selectedById[g.store.getIdentity(item)] = !!toSelect;\r\n\t\t}\r\n\t\treturn item;\r\n\t}\r\n});\r\n});"]}