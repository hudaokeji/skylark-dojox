{"version":3,"sources":["grid/LazyTreeGrid.js"],"names":["define","dojo","declare","lang","event","array","query","parser","domConstruct","domClass","domStyle","domGeometry","dom","keys","template","_widget","_templatedMixin","TreeGrid","_Builder","_View","_Layout","TreeCell","_RowManager","_FocusManager","_EditManager","DataSelection","util","_LazyExpando","grid","view","rowIdx","cellIdx","level","itemId","templateString","onToggle","evt","this","_treeCache","items","focus","setFocusIndex","setOpen","opened","stop","e","open","g","item","_by_idx","treeModel","mayHaveChildren","_loading","expandoFetch","_updateOpenState","state","expandoInner","innerHTML","toggle","domNode","parentNode","setAttribute","remove","setRowNode","rowNode","marginPos","isLeftToRight","set","_contentBuilderClass","_ContentBuilder","generateHtml","inDataIndex","rowIndex","html","getTableArray","cells","structure","getItem","toggleClass","treePath","fire","isArray","length","row","cell","mergedCells","i","j","totalWidth","totalWidthes","hidden","header","push","_getColSpans","forEach","c","start","end","_getCellWidth","m","cc","cs","pbm","k","markup","customClasses","customStyles","primaryIdx","primary","formatAtLevel","join","getMarginBox","getHeaderNode","w","getContentBox","apply","colSpans","colIndex","nextCell","curCell","node","every","slice","headerNodePos","position","headerContentNode","firstChild","x","postCreate","inherited","arguments","_expandos","connect","destroy","_cleanupExpandoCache","identity","onAfterRow","n","idty","expando","_byIdx","place","getAttribute","parseInt","isNaN","parse","removeChild","updateRow","keepSelection","selection","preserver","_reSelectById","LazyTreeCell","mixin","clone","formatIndexes","content","ret","isCollapsable","store","isItem","_scopeName","getIdentity","index","info","edit","d","get","value","defaultValue","editable","alwaysEditing","formatEditing","dir","textDir","_defaultFormat","_enforceTextDirWithUcc","_LazyTreeLayout","setStructure","s","type","_isCollapsable","expandoCell","addCellDef","cellIndex","def","obj","_LazyTreeGridCache","constructor","getSiblingIndex","tp","indexCount","removeChildren","count","splice","LazyTreeGrid","_layoutClass","_size","defaultState","_setState","dijit","tree","ForestStoreModel","Error","add","setSelectable","selectable","createManagers","rows","createSelection","setModel","_setModel","_cleanup","_refresh","setStore","queryOptions","_setQuery","root","children","onSetState","cache","sortInfo","_lastScrollTop","scrollTop","_selectedById","selected","getState","filter","reRender","expand","_fold","collapse","refresh","keepState","_onCleanupExpandoCache","setSortIndex","inIndex","inAsc","canSort","isRender","_clearData","updateRowCount","_fetch","render","setScrollTop","_onNew","parentInfo","addingChild","some","childrenAttrs","attribute","byIdx","parentItem","parentIdty","parentTreePath","pos","_by_idty","_updateRenderedRows","_onDelete","Math","min","rowsPerPage","fetchedItems","_reqQueueLen","_onFetchBegin","startRowIdx","_onFetchComplete","len","_fetchItems","req","_pending_requests","showMessage","loadingMessage","onError","hitch","fetch","sort","getSortProps","onBegin","onComplete","parentId","queryObj","_this","f","getChildren","fetchItemByIdentity","onItem","size","request","_addItem","updateRows","noDataMessage","_toggleLoadingClass","expandoRowIndex","num","_bop","_eop","_delayedCellFocus","_onExpandoComplete","childItems","stateChangeNode","autoHeight","_resize","styleRowNode","onStyleRow","layout","odd","over","styleRow","onKeyDown","altKey","metaKey","findWidgets","target","keyCode","ENTER","flag","views","getRowNode","scroller","stack","p","markupFactory","props","ctor","cellFunc"],"mappings":"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","file":"../../grid/LazyTreeGrid.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/query\",\r\n\t\"dojo/parser\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/keys\",\t\r\n\t\"dojo/text!./resources/Expando.html\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"./TreeGrid\",\r\n\t\"./_Builder\",\r\n\t\"./_View\",\r\n\t\"./_Layout\",\r\n\t\"./cells/tree\",\r\n\t\"./_RowManager\",\r\n\t\"./_FocusManager\",\r\n\t\"./_EditManager\",\r\n\t\"./DataSelection\",\r\n\t\"./util\"\r\n], function(dojo, declare, lang, event, array, query, parser, domConstruct,\r\n\tdomClass, domStyle, domGeometry, dom, keys, template, _widget, _templatedMixin,\r\n\tTreeGrid, _Builder, _View, _Layout, TreeCell, _RowManager, _FocusManager, _EditManager, DataSelection, util){\r\n\t\t\r\nvar _LazyExpando = declare(\"dojox.grid._LazyExpando\", [_widget, _templatedMixin], {\r\n\tgrid: null,\r\n\tview: null,\r\n\trowIdx: -1,\r\n\tcellIdx: -1,\r\n\tlevel: 0,\r\n\titemId: \"\",\r\n\ttemplateString: template,\r\n\tonToggle: function(evt){\r\n\t\t// summary:\r\n\t\t//\t\tThe onclick handler of expando, expand/collapse a tree node if has children.\r\n\t\tif(this.grid._treeCache.items[this.rowIdx]){\r\n\t\t\tthis.grid.focus.setFocusIndex(this.rowIdx, this.cellIdx);\r\n\t\t\tthis.setOpen(!this.grid._treeCache.items[this.rowIdx].opened);\r\n\t\t\ttry{\r\n\t\t\t\tevent.stop(evt);\r\n\t\t\t}catch(e){}\r\n\t\t}\r\n\t},\r\n\tsetOpen: function(open){\r\n\t\t// summary:\r\n\t\t//\t\texpand/collapse the row where the expando is in.\r\n\t\tvar g = this.grid,\r\n\t\t\titem = g._by_idx[this.rowIdx].item;\r\n\t\tif(item && g.treeModel.mayHaveChildren(item) && !g._loading && g._treeCache.items[this.rowIdx].opened !== open){\r\n\t\t\tg._treeCache.items[this.rowIdx].opened = open;\r\n\t\t\tg.expandoFetch(this.rowIdx, open);\r\n\t\t\tthis._updateOpenState(item);\r\n\t\t}\r\n\t},\r\n\t_updateOpenState: function(item){\r\n\t\tvar g = this.grid, state;\r\n\t\tif(item && g.treeModel.mayHaveChildren(item)){\r\n\t\t\tstate = g._treeCache.items[this.rowIdx].opened;\r\n\t\t\tthis.expandoInner.innerHTML = state ? \"-\" : \"+\";\r\n\t\t\tdomClass.toggle(this.domNode, \"dojoxGridExpandoOpened\", state);\r\n\t\t\tthis.domNode.parentNode.setAttribute(\"aria-expanded\", state);\r\n\t\t}else{\r\n\t\t\tdomClass.remove(this.domNode, \"dojoxGridExpandoOpened\");\r\n\t\t}\r\n\t},\r\n\tsetRowNode: function(rowIdx, rowNode, view){\r\n\t\tif(this.cellIdx < 0 || !this.itemId){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.view = view;\r\n\t\tthis.grid = view.grid;\r\n\t\tthis.rowIdx = rowIdx;\r\n\t\tvar marginPos = this.grid.isLeftToRight() ? \"marginLeft\" : \"marginRight\";\r\n\t\tdomStyle.set(this.domNode.parentNode, marginPos, (this.level * 1.125) + \"em\");\r\n\t\tthis._updateOpenState(this.grid._by_idx[this.rowIdx].item);\r\n\t\treturn true;\r\n\t}\r\n});\r\n\r\nvar _TreeGridContentBuilder = declare(\"dojox.grid._TreeGridContentBuilder\", _Builder._ContentBuilder, {\r\n\tgenerateHtml: function(inDataIndex, rowIndex){\r\n\t\tvar html = this.getTableArray(),\r\n\t\t\tgrid = this.grid,\r\n\t\t\tv = this.view,\r\n\t\t\tcells = v.structure.cells,\r\n\t\t\titem = grid.getItem(rowIndex),\r\n\t\t\tlevel = 0,\r\n\t\t\ttoggleClass = \"\",\r\n\t\t\ttreePath = grid._treeCache.items[rowIndex] ? grid._treeCache.items[rowIndex].treePath : null;\r\n\t\tutil.fire(this.view, \"onBeforeRow\", [rowIndex, cells]);\r\n\t\tif(item && lang.isArray(treePath)){\r\n\t\t\tlevel = treePath.length;\r\n\t\t\ttoggleClass = grid.treeModel.mayHaveChildren(item) ? \"\" : \"dojoxGridNoChildren\";\r\n\t\t}\r\n\t\tvar i = 0, j = 0, row, cell,\r\n\t\t\tmergedCells, totalWidth = 0, totalWidthes = [];\r\n\t\tfor(; row = cells[j]; j++){\r\n\t\t\tif(row.hidden || row.header){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\thtml.push('<tr class=\"' + toggleClass + '\">');\r\n\t\t\t// cell merge\r\n\t\t\tmergedCells = this._getColSpans(level);\r\n\t\t\tif(mergedCells){\r\n\t\t\t\tarray.forEach(mergedCells, function(c){\r\n\t\t\t\t\tfor(i = 0; cell = row[i]; i++){\r\n\t\t\t\t\t\tif(i >= c.start && i <= c.end){\r\n\t\t\t\t\t\t\ttotalWidth += this._getCellWidth(row, i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotalWidthes.push(totalWidth);\r\n\t\t\t\t\ttotalWidth = 0;\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t\tvar m, cc, cs, pbm, k = 0;\r\n\t\t\tfor(i = 0; cell = row[i]; i++){\r\n\t\t\t\tm = cell.markup;\r\n\t\t\t\tcc = cell.customClasses = [];\r\n\t\t\t\tcs = cell.customStyles = [];\r\n\t\t\t\tif(mergedCells && mergedCells[k] && (i >= mergedCells[k].start && i <= mergedCells[k].end)){\r\n\t\t\t\t\tvar primaryIdx = mergedCells[k].primary || mergedCells[k].start;\r\n\t\t\t\t\tif(i == primaryIdx){\r\n\t\t\t\t\t\tm[5] = cell.formatAtLevel(item, level, rowIndex);\r\n\t\t\t\t\t\tm[1] = cc.join(' ');\r\n\t\t\t\t\t\tpbm = domGeometry.getMarginBox(cell.getHeaderNode()).w - domGeometry.getContentBox(cell.getHeaderNode()).w;\r\n\t\t\t\t\t\tcs = cell.customStyles = ['width:' + (totalWidthes[k] - pbm) + \"px\"];\r\n\t\t\t\t\t\tm[3] = cs.join(';');\r\n\t\t\t\t\t\thtml.push.apply(html, m);\r\n\t\t\t\t\t}else if(i == mergedCells[k].end){\r\n\t\t\t\t\t\tk++;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tm[5] = cell.formatAtLevel(item, level, rowIndex);\r\n\t\t\t\t\tm[1] = cc.join(' ');\r\n\t\t\t\t\tm[3] = cs.join(';');\r\n\t\t\t\t\thtml.push.apply(html, m);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\thtml.push('</tr>');\r\n\t\t}\r\n\t\thtml.push('</table>');\r\n\t\treturn html.join(''); // String\r\n\t},\r\n\t_getColSpans: function(level){\r\n\t\tvar colSpans = this.grid.colSpans;\r\n\t\treturn colSpans && colSpans[level] ? colSpans[level] : null;\r\n\t},\r\n\t_getCellWidth: function(cells, colIndex){\r\n\t\tvar curCell = cells[colIndex], node = curCell.getHeaderNode();\r\n\t\tif(curCell.hidden){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif(colIndex == cells.length - 1 || array.every(cells.slice(colIndex + 1), function(cell){\r\n\t\t\treturn cell.hidden;\r\n\t\t})){\r\n\t\t\tvar headerNodePos = domGeometry.position(cells[colIndex].view.headerContentNode.firstChild);\r\n\t\t\treturn headerNodePos.x + headerNodePos.w - domGeometry.position(node).x;\r\n\t\t}else{\r\n\t\t\tvar nextCell;\r\n\t\t\tdo{\r\n\t\t\t\tnextCell = cells[++colIndex];\r\n\t\t\t}while(nextCell.hidden);\r\n\t\t\treturn domGeometry.position(nextCell.getHeaderNode()).x - domGeometry.position(node).x;\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndeclare(\"dojox.grid._TreeGridView\", _View, {\r\n\t_contentBuilderClass: _TreeGridContentBuilder,\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._expandos = {};\r\n\t\tthis.connect(this.grid, '_onCleanupExpandoCache', '_cleanupExpandoCache');\r\n\t},\r\n\tdestroy: function(){\r\n\t\tthis._cleanupExpandoCache();\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\t_cleanupExpandoCache: function(identity){\r\n\t\tif(identity && this._expandos[identity]){\r\n\t\t\tthis._expandos[identity].destroy();\r\n\t\t\tdelete this._expandos[identity];\r\n\t\t}else{\r\n\t\t\tvar i;\r\n\t\t\tfor(i in this._expandos){\r\n\t\t\t\tthis._expandos[i].destroy();\r\n\t\t\t}\r\n\t\t\tthis._expandos = {};\r\n\t\t}\r\n\t},\r\n\tonAfterRow: function(rowIndex, cells, rowNode){\r\n\t\tquery(\"span.dojoxGridExpando\", rowNode).forEach(function(n){\r\n\t\t\tif(n && n.parentNode){\r\n\t\t\t\tvar idty, expando, _byIdx = this.grid._by_idx;\r\n\t\t\t\tif(_byIdx && _byIdx[rowIndex] && _byIdx[rowIndex].idty){\r\n\t\t\t\t\tidty = _byIdx[rowIndex].idty;\r\n\t\t\t\t\texpando = this._expandos[idty];\r\n\t\t\t\t}\r\n\t\t\t\tif(expando){\r\n\t\t\t\t\tdomConstruct.place(expando.domNode, n, \"replace\");\r\n\t\t\t\t\texpando.itemId = n.getAttribute(\"itemId\");\r\n\t\t\t\t\texpando.cellIdx = parseInt(n.getAttribute(\"cellIdx\"), 10);\r\n\t\t\t\t\tif(isNaN(expando.cellIdx)){\r\n\t\t\t\t\t\texpando.cellIdx = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\texpando = parser.parse(n.parentNode)[0];\r\n\t\t\t\t\tif(idty){\r\n\t\t\t\t\t\tthis._expandos[idty] = expando;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!expando.setRowNode(rowIndex, rowNode, this)){\r\n\t\t\t\t\texpando.domNode.parentNode.removeChild(expando.domNode);\r\n\t\t\t\t}\r\n\t\t\t\tdomConstruct.destroy(n);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tupdateRow: function(rowIndex){\r\n\t\tvar grid = this.grid, item;\r\n\t\tif(grid.keepSelection){\r\n\t\t\titem = grid.getItem(rowIndex);\r\n\t\t\tif(item){\r\n\t\t\t\tgrid.selection.preserver._reSelectById(item, rowIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n\r\nvar LazyTreeCell = lang.mixin(lang.clone(TreeCell), {\r\n\tformatAtLevel: function(item, level, rowIndex){\r\n\t\tif(!item){\r\n\t\t\treturn this.formatIndexes(rowIndex, item, level);\r\n\t\t}\r\n\t\tvar result = \"\", ret = \"\", content;\r\n\t\tif(this.isCollapsable && this.grid.store.isItem(item)){\r\n\t\t\tret = '<span ' + dojo._scopeName + 'Type=\"dojox.grid._LazyExpando\" level=\"' + level + '\" class=\"dojoxGridExpando\"' +\r\n\t\t\t\t\t' itemId=\"' + this.grid.store.getIdentity(item) + '\" cellIdx=\"' + this.index + '\"></span>';\r\n\t\t}\r\n\t\tcontent = this.formatIndexes(rowIndex, item, level);\r\n\t\tresult = ret !== \"\" ? '<div>' + ret + content + '</div>' : content;\r\n\t\treturn result;\r\n\t},\r\n\tformatIndexes: function(rowIndex, item, level){\r\n\t\tvar info = this.grid.edit.info,\r\n\t\t\td = this.get ? this.get(rowIndex, item) : (this.value || this.defaultValue);\r\n\t\tif(this.editable && (this.alwaysEditing || (info.rowIndex === rowIndex && info.cell === this))){\r\n\t\t\treturn this.formatEditing(d, rowIndex);\r\n\t\t}else{\r\n\t\t\tvar dir = this.textDir || this.grid.textDir;\r\n\t\t\tvar ret = this._defaultFormat(d, [d, rowIndex, level, this]);\r\n\t\t\tif(dir && this._enforceTextDirWithUcc){\r\n\t\t\t    ret = this._enforceTextDirWithUcc(dir, ret);\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t}\r\n});\r\n\r\nvar _LazyTreeLayout = declare(\"dojox.grid._LazyTreeLayout\", _Layout, {\r\n\t// summary:\r\n\t//\t\tOverride the dojox.grid._TreeLayout to modify the _TreeGridView and cell formatter\r\n\tsetStructure: function(structure){\r\n\t\tvar g = this.grid, s = structure;\r\n\t\tif(g && !array.every(s, function(i){\r\n\t\t\treturn !!i.cells;\r\n\t\t})){\r\n\t\t\ts = arguments[0] = [{cells:[s]}];//intentionally change arguments[0]\r\n\t\t}\r\n\t\tif(s.length === 1 && s[0].cells.length === 1){\r\n\t\t\ts[0].type = \"dojox.grid._TreeGridView\";\r\n\t\t\tthis._isCollapsable = true;\r\n\t\t\ts[0].cells[0][this.grid.expandoCell].isCollapsable = true;\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\taddCellDef: function(rowIndex, cellIndex, def){\r\n\t\tvar obj = this.inherited(arguments);\r\n\t\treturn lang.mixin(obj, LazyTreeCell);\r\n\t}\r\n});\r\n\r\nvar _LazyTreeGridCache = declare(\"dojox.grid._LazyTreeGridCache\", null, {\r\n\t// summary:\r\n\t//\t\tAn internal object used to cache the tree path and open state of each item.\r\n\t//\t\tThe form of the cache items would be an object array: \r\n\t//\t\t[{opened: true/false, treePath: [level0 parent id, level1 parent id, ...]}]\r\n\t// example:\r\n\t//\t\t| [{opened: true, treePath: []},\r\n\t//\t\t|  {opened: false, treePath: [\"root0\"]},\r\n\t//\t\t|  {opened: false, treePath: [\"root0\"]},\r\n\t//\t\t|  {opened: false, treePath: []},\r\n\t//\t\t|  ...]\r\n\tconstructor: function(){\r\n\t\tthis.items = [];\r\n\t},\r\n\tgetSiblingIndex: function(rowIndex, treePath){\r\n\t\tvar i = rowIndex - 1, indexCount = 0, tp;\r\n\t\tfor(; i >=0; i--){\r\n\t\t\ttp = this.items[i] ? this.items[i].treePath : [];\r\n\t\t\tif(tp.join('/') === treePath.join('/')){\r\n\t\t\t\tindexCount++;\r\n\t\t\t}else if(tp.length < treePath.length){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn indexCount;\r\n\t},\r\n\tremoveChildren: function(rowIndex){\r\n\t\t// find next sibling index\r\n\t\tvar i = rowIndex + 1, count, tp,\r\n\t\t\ttreePath = this.items[rowIndex] ? this.items[rowIndex].treePath : [];\r\n\t\tfor(; i < this.items.length; i++){\r\n\t\t\ttp = this.items[i] ? this.items[i].treePath : [];\r\n\t\t\tif(tp.join('/') === treePath.join('/') || tp.length <= treePath.length){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcount = i - (rowIndex + 1);\r\n\t\tthis.items.splice(rowIndex + 1, count);\r\n\t\treturn count;\r\n\t}\r\n});\r\n\r\nvar LazyTreeGrid = declare(\"dojox.grid.LazyTreeGrid\", TreeGrid, {\r\n\t// summary:\r\n\t//\t\tAn enhanced TreeGrid widget which supports lazy-loading for nested children items\r\n\t//\r\n\t// description:\r\n\t//\t\tLazyTreeGrid inherits from dojo.grid.TreeGrid and applies virtual scrolling mechanism\r\n\t//\t\tto nested children rows so that it's possible to deal with complex tree structure data set\r\n\t//\t\twith nested and huge children rows. It's also compatible with dijit.tree.ForestStoreModel\r\n\t//\r\n\t//\t\tMost methods and properties pertaining to dojox.grid.DataGrid\r\n\t//\t\tand dojox.grid.TreeGrid also apply here\r\n\t//\r\n\t//\t\tLazyTreeGrid does not support summary row/items aggregate due to the lazy-loading rationale.\r\n\r\n\t_layoutClass: _LazyTreeLayout,\r\n\t_size: 0,\r\n\r\n\t// treeModel: dijit/tree/.ForestStoreModel|dojox/grid/LazyTreeGridStoreModel\r\n\t//\t\tA tree store model object.\r\n\ttreeModel: null,\r\n\r\n\t// defaultState: Object\r\n\t//\t\tUsed to restore the state of LazyTreeGrid.\r\n\t//\t\tThis object should ONLY be obtained from `LazyTreeGrid.getState()`.\r\n\tdefaultState: null,\r\n\r\n\t// colSpans: Object\r\n\t//\t\tA json object that defines column span of each level rows.  Attributes:\r\n\t//\r\n\t//\t\t- 0/1/..: which level need to colspan\r\n\t//\t\t- start: start column index of colspan\r\n\t//\t\t- end: end column index of colspan\r\n\t//\t\t- primary: index of column which content will be displayed (default is value of start).\r\n\t//\r\n\t//\t\texample:\r\n\t//\t\t|\tcolSpans = {\r\n\t//\t\t|\t0:\t[\r\n\t//\t\t|\t\t\t{start: 0, end: 1, primary: 0},\r\n\t//\t\t|\t\t\t{start: 2, end: 4, primary: 3}\r\n\t//\t\t|\t\t],\r\n\t//\t\t|\t1:\t[\r\n\t//\t\t|\t\t\t{start: 0, end: 3, primary: 1}\r\n\t//\t\t|\t\t]\r\n\t//\t\t|\t};\r\n\tcolSpans: null,\r\n\t\r\n\tpostCreate: function(){\r\n\t\tthis._setState();\r\n\t\tthis.inherited(arguments);\r\n\t\tif(!this._treeCache){\r\n\t\t\tthis._treeCache = new _LazyTreeGridCache();\r\n\t\t}\r\n\t\tif(!this.treeModel || !(this.treeModel instanceof dijit.tree.ForestStoreModel)){\r\n\t\t\tthrow new Error(\"dojox.grid.LazyTreeGrid: must be used with a treeModel which is an instance of dijit.tree.ForestStoreModel\");\r\n\t\t}\r\n\t\tdomClass.add(this.domNode, \"dojoxGridTreeModel\");\r\n\t\tdom.setSelectable(this.domNode, this.selectable);\r\n\t},\r\n\tcreateManagers: function(){\r\n\t\tthis.rows = new _RowManager(this);\r\n\t\tthis.focus = new _FocusManager(this);\r\n\t\tthis.edit = new _EditManager(this);\r\n\t},\r\n\tcreateSelection: function(){\r\n\t\tthis.selection = new DataSelection(this);\r\n\t},\r\n\tsetModel: function(treeModel){\r\n\t\tif(!treeModel){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._setModel(treeModel);\r\n\t\tthis._cleanup();\r\n\t\tthis._refresh(true);\r\n\t},\r\n\tsetStore: function(store, query, queryOptions){\r\n\t\tif(!store){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._setQuery(query, queryOptions);\r\n\t\tthis.treeModel.query = query;\r\n\t\tthis.treeModel.store = store;\r\n\t\tthis.treeModel.root.children = [];\r\n\t\tthis.setModel(this.treeModel);\r\n\t},\r\n\tonSetState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tEvent fired when a default state being set.\r\n\t},\r\n\t_setState: function(){\r\n\t\tif(this.defaultState){\r\n\t\t\tthis._treeCache = this.defaultState.cache;\r\n\t\t\tthis.sortInfo = this.defaultState.sortInfo || 0;\r\n\t\t\tthis.query = this.defaultState.query || this.query;\r\n\t\t\tthis._lastScrollTop = this.defaultState.scrollTop;\r\n\t\t\tif(this.keepSelection){\r\n\t\t\t\tthis.selection.preserver._selectedById = this.defaultState.selection;\r\n\t\t\t}else{\r\n\t\t\t\tthis.selection.selected = this.defaultState.selection || [];\r\n\t\t\t}\r\n\t\t\tthis.onSetState();\r\n\t\t}\r\n\t},\r\n\tgetState: function(){\r\n\t\t// summary:\r\n\t\t//\t\tGet the current state of LazyTreeGrid including expanding, sorting, selection and scroll top state.\r\n\t\tvar _this = this, \r\n\t\t\tselection = this.keepSelection ? this.selection.preserver._selectedById : this.selection.selected;\r\n\t\treturn {\r\n\t\t\tcache: lang.clone(_this._treeCache),\r\n\t\t\tquery: lang.clone(_this.query),\r\n\t\t\tsortInfo: lang.clone(_this.sortInfo),\r\n\t\t\tscrollTop: lang.clone(_this.scrollTop),\r\n\t\t\tselection: lang.clone(selection)\r\n\t\t};\r\n\t},\r\n\t_setQuery: function(query, queryOptions){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.treeModel.query = query;\r\n\t},\r\n\tfilter: function(query, reRender){\r\n\t\tthis._cleanup();\r\n\t\tthis.inherited(arguments);\r\n    },\r\n\tdestroy: function(){\r\n\t\tthis._cleanup();\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\texpand: function(itemId){\r\n\t\t// summary:\r\n\t\t//\t\tExpand the row with the given itemId.\r\n\t\t// itemId: String?\r\n\t\tthis._fold(itemId, true);\r\n\t},\r\n\tcollapse: function(itemId){\r\n\t\t// summary:\r\n\t\t//\t\tCollapse the row with the given itemId.\r\n\t\t// itemId: String?\r\n\t\tthis._fold(itemId, false);\r\n\t},\r\n\trefresh: function(keepState){\r\n\t\t// summary:\r\n\t\t//\t\tRefresh, and persist the expand/collapse state when keepState equals true\r\n\t\t// keepState: Boolean\r\n\t\tif(!keepState){\r\n\t\t\tthis._cleanup();\r\n\t\t}\r\n\t\tthis._refresh(true);\r\n\t},\r\n\t_cleanup: function(){\r\n\t\tthis._treeCache.items = [];\r\n\t\tthis._onCleanupExpandoCache();\r\n\t},\r\n\tsetSortIndex: function(inIndex, inAsc){\r\n\t\t// Need to clean up the cache before sorting\r\n\t\tif(this.canSort(inIndex + 1)){\r\n\t\t\tthis._cleanup();\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\t_refresh: function(isRender){\r\n\t\tthis._clearData();\r\n\t\tthis.updateRowCount(this._size);\r\n\t\tthis._fetch(0, true);\r\n\t},\r\n\trender: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.setScrollTop(this.scrollTop);\r\n\t},\r\n\t_onNew: function(item, parentInfo){\r\n\t\tvar addingChild = parentInfo && this.store.isItem(parentInfo.item) && array.some(this.treeModel.childrenAttrs, function(c){\r\n\t\t\treturn c === parentInfo.attribute;\r\n\t\t});\r\n\t\tvar items = this._treeCache.items, byIdx = this._by_idx;\r\n\t\tif(!addingChild){\r\n\t\t\titems.push({opened: false, treePath: []});\r\n\t\t\tthis._size += 1;\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}else{\r\n\t\t\tvar parentItem = parentInfo.item, \r\n\t\t\t\tparentIdty = this.store.getIdentity(parentItem),\r\n\t\t\t\trowIndex = -1, i = 0;\r\n\t\t\tfor(; i < byIdx.length; i++){\r\n\t\t\t\tif(parentIdty === byIdx[i].idty){\r\n\t\t\t\t\trowIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(rowIndex >= 0){\r\n\t\t\t\tif(items[rowIndex] && items[rowIndex].opened){\r\n\t\t\t\t\tvar parentTreePath = items[rowIndex].treePath, pos = rowIndex + 1;\r\n\t\t\t\t\tfor(; pos < items.length; pos++){\r\n\t\t\t\t\t\tif(items[pos].treePath.length <= parentTreePath.length){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar treePath = parentTreePath.slice();\r\n\t\t\t\t\ttreePath.push(parentIdty);\r\n\t\t\t\t\tthis._treeCache.items.splice(pos, 0, {opened: false, treePath: treePath});\r\n\t\t\t\t\t// update grid._by_idx\r\n\t\t\t\t\tvar idty = this.store.getIdentity(item);\r\n\t\t\t\t\tthis._by_idty[idty] = { idty: idty, item: item };\r\n\t\t\t\t\tbyIdx.splice(pos, 0, this._by_idty[idty]);\r\n\t\t\t\t\t// update grid\r\n\t\t\t\t\tthis._size += 1;\r\n\t\t\t\t\tthis.updateRowCount(this._size);\r\n\t\t\t\t\tthis._updateRenderedRows(pos);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.updateRow(rowIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t_onDelete: function(item){\r\n\t\tvar i = 0, rowIndex = -1, idty = this.store.getIdentity(item);\r\n\t\tfor(; i < this._by_idx.length; i++){\r\n\t\t\tif(idty === this._by_idx[i].idty){\r\n\t\t\t\trowIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(rowIndex >= 0){\r\n\t\t\tvar items = this._treeCache.items, treePath = items[rowIndex] ? items[rowIndex].treePath : [], tp, count = 1;\r\n\t\t\ti = rowIndex + 1;\r\n\t\t\tfor(; i < this._size; i++, count++){\r\n\t\t\t\ttp = items[i] ? items[i].treePath : [];\r\n\t\t\t\tif(items[i].treePath.length <= treePath.length){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\titems.splice(rowIndex, count);\r\n\t\t\tthis._onCleanupExpandoCache(idty);\r\n\t\t\tthis._by_idx.splice(rowIndex, count);\r\n\t\t\tthis._size -= count;\r\n\t\t\tthis.updateRowCount(this._size);\r\n\t\t\tthis._updateRenderedRows(rowIndex);\r\n\t\t}\r\n\t},\r\n\t_onCleanupExpandoCache: function(identity){},\r\n\t_fetch: function(start, isRender){\r\n\t\tif(!this._loading){\r\n\t\t\tthis._loading = true;\r\n\t\t}\r\n\t\tstart = start || 0;\r\n\t\tvar count = this._size - start > 0 ? Math.min(this.rowsPerPage, this._size - start) : this.rowsPerPage;\r\n\t\tvar i = 0;\r\n\t\tvar fetchedItems = [];\r\n\t\tthis._reqQueueLen = 0;\r\n\t\tfor(; i < count; i++){\r\n\t\t\tif(this._by_idx[start + i]){\r\n\t\t\t\tfetchedItems.push(this._by_idx[start + i].item);\r\n\t\t\t}else{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(fetchedItems.length === count){\r\n\t\t\tthis._reqQueueLen = 1;\r\n\t\t\tthis._onFetchBegin(this._size, {startRowIdx: start, count: count});\r\n\t\t\tthis._onFetchComplete(fetchedItems, {startRowIdx: start, count: count});\r\n\t\t}else{\r\n\t\t\tvar level, nextLevel, len = 1, items = this._treeCache.items, \r\n\t\t\t\ttreePath = items[start] ? items[start].treePath : [];\r\n\t\t\tfor(i = 1; i < count; i++){\r\n\t\t\t\tlevel = items[start + len - 1] ? items[start + len - 1].treePath.length : 0;\r\n\t\t\t\tnextLevel = items[start + len] ? items[start + len].treePath.length : 0;\r\n\t\t\t\tif(level !== nextLevel){\r\n\t\t\t\t\tthis._reqQueueLen++;\r\n\t\t\t\t\tthis._fetchItems({startRowIdx: start, count: len, treePath: treePath});\r\n\t\t\t\t\tstart = start + len;\r\n\t\t\t\t\tlen = 1;\r\n\t\t\t\t\ttreePath = items[start] ? items[start].treePath : 0;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlen++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._reqQueueLen++;\r\n\t\t\tthis._fetchItems({startRowIdx: start, count: len, treePath: treePath});\r\n\t\t}\r\n\t},\r\n\t_fetchItems: function(req){\r\n\t\tif(this._pending_requests[req.startRowIdx]){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.showMessage(this.loadingMessage);\r\n\t\tthis._pending_requests[req.startRowIdx] = true;\r\n\t\tvar\tonError = lang.hitch(this, '_onFetchError'),\r\n\t\t\tstart = this._treeCache.getSiblingIndex(req.startRowIdx, req.treePath);\r\n\t\tif(req.treePath.length === 0){\r\n\t\t\tthis.store.fetch({\r\n\t\t\t\tstart: start,\r\n\t\t\t\tstartRowIdx: req.startRowIdx,\r\n\t\t\t\ttreePath: req.treePath,\r\n\t\t\t\tcount: req.count,\r\n\t\t\t\tquery: this.query,\r\n\t\t\t\tsort: this.getSortProps(),\r\n\t\t\t\tqueryOptions: this.queryOptions,\r\n\t\t\t\tonBegin: lang.hitch(this, '_onFetchBegin'),\r\n\t\t\t\tonComplete: lang.hitch(this, '_onFetchComplete'),\r\n\t\t\t\tonError: lang.hitch(this, '_onFetchError')\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tvar parentId = req.treePath[req.treePath.length - 1], parentItem;\r\n\t\t\tvar queryObj = {\r\n\t\t\t\tstart: start,\r\n\t\t\t\tstartRowIdx: req.startRowIdx,\r\n\t\t\t\ttreePath: req.treePath,\r\n\t\t\t\tcount: req.count,\r\n\t\t\t\tparentId: parentId,\r\n\t\t\t\tsort: this.getSortProps()\r\n\t\t\t};\r\n\t\t\tvar _this = this;\r\n\t\t\tvar onComplete = function(){\r\n\t\t\t\tvar f = lang.hitch(_this, '_onFetchComplete');\r\n\t\t\t\tif(arguments.length == 1){\r\n\t\t\t\t\tf.apply(_this, [arguments[0], queryObj]);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tf.apply(_this, arguments);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif(this._by_idty[parentId]){\r\n\t\t\t\tparentItem = this._by_idty[parentId].item;\r\n\t\t\t\tthis.treeModel.getChildren(parentItem, onComplete, onError, queryObj);\r\n\t\t\t}else{\r\n\t\t\t\tthis.store.fetchItemByIdentity({\r\n\t\t\t\t\tidentity: parentId,\r\n\t\t\t\t\tonItem: function(item){\r\n\t\t\t\t\t\t_this.treeModel.getChildren(item, onComplete, onError, queryObj);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t_onFetchBegin: function(size, request){\r\n\t\tif(this._treeCache.items.length === 0){\r\n\t\t\tthis._size = parseInt(size, 10);\r\n\t\t}\r\n\t\tsize = this._size;\r\n\t\t// this._size = size = this._treeCache.items.length;\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\t_onFetchComplete: function(items, request){\r\n\t\tvar startRowIdx = request.startRowIdx,\r\n\t\t\tcount = request.count,\r\n\t\t\tstart = items.length <= count ? 0: request.start,\r\n\t\t\ttreePath = request.treePath || [];\r\n\t\tif(lang.isArray(items) && items.length > 0){\r\n\t\t\tvar i = 0, len = Math.min(count, items.length);\r\n\t\t\tfor(; i < len; i++){\r\n\t\t\t\tif(!this._treeCache.items[startRowIdx + i]){\r\n\t\t\t\t\tthis._treeCache.items[startRowIdx + i] = {opened: false, treePath: treePath};\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._by_idx[startRowIdx + i]){\r\n\t\t\t\t\tthis._addItem(items[start + i], startRowIdx + i, true);\r\n\t\t\t\t}\r\n\t\t\t\t// this._treeCache.items.splice(startRowIdx + i, 0, {opened: false, treePath: treePath});\r\n\t\t\t}\r\n\t\t\tthis.updateRows(startRowIdx, len);\r\n\t\t}\r\n\t\tif(this._size == 0){\r\n\t\t\tthis.showMessage(this.noDataMessage);\r\n\t\t}else{\r\n\t\t\tthis.showMessage();\r\n\t\t}\r\n\t\tthis._pending_requests[startRowIdx] = false;\r\n\t\tthis._reqQueueLen--;\r\n\t\tif(this._loading && this._reqQueueLen === 0){\r\n\t\t\tthis._loading = false;\r\n\t\t\tif(this._lastScrollTop){\r\n\t\t\t\tthis.setScrollTop(this._lastScrollTop);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\texpandoFetch: function(rowIndex, open){\r\n\t\t// summary:\r\n\t\t//\t\tFunction for fetch children of a given row\r\n\t\tif(this._loading || !this._by_idx[rowIndex]){return;}\r\n\t\tthis._loading = true;\r\n\t\tthis._toggleLoadingClass(rowIndex, true);\r\n\t\tthis.expandoRowIndex = rowIndex;\r\n\t\tvar item = this._by_idx[rowIndex].item;\r\n\t\t// this._pages = [];\r\n\t\tif(open){\r\n\t\t\tvar queryObj = {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: this.rowsPerPage,\r\n\t\t\t\tparentId: this.store.getIdentity(this._by_idx[rowIndex].item),\r\n\t\t\t\tsort: this.getSortProps()\r\n\t\t\t};\r\n\t\t\tthis.treeModel.getChildren(item, lang.hitch(this, \"_onExpandoComplete\"), lang.hitch(this, \"_onFetchError\"), queryObj);\r\n\t\t}else{\r\n\t\t\t// get the whole children number when clear the children from cache\r\n\t\t\tvar num = this._treeCache.removeChildren(rowIndex);\r\n\t\t\t// remove the items from grid._by_idx\r\n\t\t\tthis._by_idx.splice(rowIndex + 1, num);\r\n\t\t\tthis._bop = this._eop = -1;\r\n\t\t\t//update grid\r\n\t\t\tthis._size -= num;\r\n\t\t\tthis.updateRowCount(this._size);\r\n\t\t\tthis._updateRenderedRows(rowIndex + 1);\r\n\t\t\tthis._toggleLoadingClass(rowIndex, false);\r\n\t\t\tif(this._loading){\r\n\t\t\t\tthis._loading = false;\r\n\t\t\t}\r\n\t\t\tthis.focus._delayedCellFocus();\r\n\t\t}\r\n\t},\r\n\t_onExpandoComplete: function(childItems, request, size){\r\n\t\tsize = isNaN(size) ? childItems.length : parseInt(size, 10);\r\n\t\tvar treePath = this._treeCache.items[this.expandoRowIndex].treePath.slice(0);\r\n\t\ttreePath.push(this.store.getIdentity(this._by_idx[this.expandoRowIndex].item));\r\n\t\tvar i = 1, idty;\r\n\t\tfor(; i <= size; i++){\r\n\t\t\tthis._treeCache.items.splice(this.expandoRowIndex + i, 0, {treePath: treePath, opened: false});\r\n\t\t}\r\n\t\tthis._size += size;\r\n\t\tthis.updateRowCount(this._size);\r\n\t\tfor(i = 0; i < size; i++){\r\n\t\t\tif(childItems[i]){\r\n\t\t\t\tidty = this.store.getIdentity(childItems[i]);\r\n\t\t\t\tthis._by_idty[idty] = { idty: idty, item: childItems[i] };\r\n\t\t\t\tthis._by_idx.splice(this.expandoRowIndex + 1 + i, 0, this._by_idty[idty]);\r\n\t\t\t}else{\r\n\t\t\t\tthis._by_idx.splice(this.expandoRowIndex + 1 + i, 0, null);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._updateRenderedRows(this.expandoRowIndex + 1);\r\n\t\tthis._toggleLoadingClass(this.expandoRowIndex, false);\r\n\t\tthis.stateChangeNode = null;\r\n\t\tif(this._loading){\r\n\t\t\tthis._loading = false;\r\n\t\t}\r\n\t\tif(this.autoHeight === true){\r\n\t\t\tthis._resize();\r\n\t\t}\r\n\t\tthis.focus._delayedCellFocus();\r\n\t},\r\n\tstyleRowNode: function(rowIndex, rowNode){\r\n\t\tif(rowNode){\r\n\t\t\tthis.rows.styleRowNode(rowIndex, rowNode);\r\n\t\t}\r\n\t},\r\n\tonStyleRow: function(row){\r\n\t\tif(!this.layout._isCollapsable){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trow.customClasses += (row.odd ? \" dojoxGridRowOdd\" : \"\") + (row.selected ? \" dojoxGridRowSelected\" : \"\") + (row.over ? \" dojoxGridRowOver\" : \"\");\r\n\t\tthis.focus.styleRow(row);\r\n\t\tthis.edit.styleRow(row);\r\n\t},\r\n\tonKeyDown: function(e){\r\n\t\tif(e.altKey || e.metaKey){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar expando = dijit.findWidgets(e.target)[0];\r\n\t\tif(e.keyCode === keys.ENTER && expando instanceof _LazyExpando){\r\n\t\t\texpando.onToggle();\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\t_toggleLoadingClass: function(rowIndex, flag){\r\n\t\tvar views = this.views.views, node,\r\n\t\t\trowNode = views[views.length - 1].getRowNode(rowIndex);\r\n\t\tif(rowNode){\r\n\t\t\tnode = query('.dojoxGridExpando', rowNode)[0];\r\n\t\t\tif(node){\r\n\t\t\t\tdomClass.toggle(node, \"dojoxGridExpandoLoading\", flag);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t_updateRenderedRows: function(start){\r\n\t\tarray.forEach(this.scroller.stack, function(p){\r\n\t\t\tif(p * this.rowsPerPage >= start){\r\n\t\t\t\tthis.updateRows(p * this.rowsPerPage, this.rowsPerPage);\r\n\t\t\t}else if((p + 1) * this.rowsPerPage >=  start){\r\n\t\t\t\tthis.updateRows(start, (p + 1) * this.rowsPerPage - start + 1);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t},\r\n\t_fold: function(itemId, open){\r\n\t\tvar rowIndex = -1, i = 0, byIdx = this._by_idx, idty = this._by_idty[itemId];\r\n\t\tif(idty && idty.item && this.treeModel.mayHaveChildren(idty.item)){\r\n\t\t\tfor(; i < byIdx.length; i++){\r\n\t\t\t\tif(byIdx[i] && byIdx[i].idty === itemId){\r\n\t\t\t\t\trowIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(rowIndex >= 0){\r\n\t\t\t\tvar rowNode = this.views.views[this.views.views.length - 1].getRowNode(rowIndex);\r\n\t\t\t\tif(rowNode){\r\n\t\t\t\t\tvar expando = dijit.findWidgets(rowNode)[0];\r\n\t\t\t\t\tif(expando){\r\n\t\t\t\t\t\texpando.setOpen(open);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nLazyTreeGrid.markupFactory = function(props, node, ctor, cellFunc){\r\n\treturn TreeGrid.markupFactory(props, node, ctor, cellFunc);\r\n};\r\n\r\nreturn LazyTreeGrid;\r\n\r\n});"]}