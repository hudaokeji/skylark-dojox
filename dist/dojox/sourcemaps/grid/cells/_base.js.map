{"version":3,"sources":["grid/cells/_base.js"],"names":["define","dojo","declare","lang","event","connect","array","has","dom","domAttr","domConstruct","_Widget","util","_DeferredTextWidget","deferred","_destroyOnRemove","postCreate","this","addBoth","hitch","text","domNode","innerHTML","whenIdle","setTimeout","apply","arguments","BaseCell","styles","classes","editable","alwaysEditing","formatter","defaultValue","value","hidden","noresize","draggable","_valueProp","_formatPending","constructor","inProps","_props","mixin","undefined","_defaultFormat","inValue","callArgs","s","grid","formatterScope","f","v","create","declaredClass","startup","id","index","format","inRowIndex","inItem","i","edit","info","d","get","replace","escapeHTMLInData","rowIndex","cell","formatEditing","inDatum","getNode","view","getCellNode","getHeaderNode","getHeaderCellNode","getEditNode","firstChild","canResize","uw","unitWidth","isFlex","isString","slice","applyEdit","applyCellEdit","cancelEdit","doCancelEdit","_onEditBlur","isEditCell","registerOnBlur","inNode","commitOnBlur","e","needFormatNode","cancelFormatNode","_formatNode","setSelectable","formatNode","focus","dispatchEvent","m","getValue","setValue","n","fire","focusSelectNode","save","restore","_finish","cancel","markupFactory","node","cellDef","trim","getObject","getBoolAttr","attr","cellAttr","toLowerCase","getStrAttr","Cell","keyFilter","inherited","doKey","String","fromCharCode","charCode","search","stop","RegExp","RowIndex","name","postscript","Select","options","values","returnIndex","inCell","o","h","push","join","indexOf","selectedIndex","split","AlwaysEdit","applyStaticValue","start","Bool","doclick","target","tagName"],"mappings":"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","file":"../../../grid/cells/_base.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/_Widget\",\r\n\t\"../util\"\r\n], function(dojo, declare, lang, event, connect, array, has, dom, domAttr, domConstruct, _Widget, util){\r\n\r\n\tvar _DeferredTextWidget = declare(\"dojox.grid._DeferredTextWidget\", _Widget, {\r\n\t\tdeferred: null,\r\n\t\t_destroyOnRemove: true,\r\n\t\tpostCreate: function(){\r\n\t\t\tif(this.deferred){\r\n\t\t\t\tthis.deferred.addBoth(lang.hitch(this, function(text){\r\n\t\t\t\t\tif(this.domNode){\r\n\t\t\t\t\t\tthis.domNode.innerHTML = text;\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar focusSelectNode = function(inNode){\r\n\t\ttry{\r\n\t\t\tutil.fire(inNode, \"focus\");\r\n\t\t\tutil.fire(inNode, \"select\");\r\n\t\t}catch(e){// IE sux bad\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar whenIdle = function(/*inContext, inMethod, args ...*/){\r\n\t\tsetTimeout(lang.hitch.apply(dojo, arguments), 0);\r\n\t};\r\n\r\n\tvar BaseCell = declare(\"dojox.grid.cells._Base\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tRepresents a grid cell and contains information about column options and methods\r\n\t\t//\t\tfor retrieving cell related information.\r\n\t\t//\t\tEach column in a grid layout has a cell object and most events and many methods\r\n\t\t//\t\tprovide access to these objects.\r\n\t\tstyles: '',\r\n\t\tclasses: '',\r\n\t\teditable: false,\r\n\t\talwaysEditing: false,\r\n\t\tformatter: null,\r\n\t\tdefaultValue: '...',\r\n\t\tvalue: null,\r\n\t\thidden: false,\r\n\t\tnoresize: false,\r\n\t\tdraggable: true,\r\n\t\t//private\r\n\t\t_valueProp: \"value\",\r\n\t\t_formatPending: false,\r\n\r\n\t\tconstructor: function(inProps){\r\n\t\t\tthis._props = inProps || {};\r\n\t\t\tlang.mixin(this, inProps);\r\n\t\t\tif(this.draggable === undefined){\r\n\t\t\t\tthis.draggable = true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_defaultFormat: function(inValue, callArgs){\r\n\t\t\tvar s = this.grid.formatterScope || this;\r\n\t\t\tvar f = this.formatter;\r\n\t\t\tif(f && s && typeof f == \"string\"){\r\n\t\t\t\tf = this.formatter = s[f];\r\n\t\t\t}\r\n\t\t\tvar v = (inValue != this.defaultValue && f) ? f.apply(s, callArgs) : inValue;\r\n\t\t\tif(typeof v == \"undefined\"){\r\n\t\t\t\treturn this.defaultValue;\r\n\t\t\t}\r\n\t\t\tif(v && v.addBoth){\r\n\t\t\t\t// Check if it's a deferred\r\n\t\t\t\tv = new _DeferredTextWidget({deferred: v},\r\n\t\t\t\t\t\t\t\t\tdomConstruct.create(\"span\", {innerHTML: this.defaultValue}));\r\n\t\t\t}\r\n\t\t\tif(v && v.declaredClass && v.startup){\r\n\t\t\t\treturn \"<div class='dojoxGridStubNode' linkWidget='\" +\r\n\t\t\t\t\t\tv.id +\r\n\t\t\t\t\t\t\"' cellIdx='\" +\r\n\t\t\t\t\t\tthis.index +\r\n\t\t\t\t\t\t\"'>\" +\r\n\t\t\t\t\t\tthis.defaultValue +\r\n\t\t\t\t\t\t\"</div>\";\r\n\t\t\t}\r\n\t\t\treturn v;\r\n\t\t},\r\n\t\t\r\n\t\t// data source\r\n\t\tformat: function(inRowIndex, inItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprovides the html for a given grid cell.\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// returns:\r\n\t\t\t//\t\thtml for a given grid cell\r\n\t\t\tvar f, i=this.grid.edit.info, d=this.get ? this.get(inRowIndex, inItem) : (this.value || this.defaultValue);\r\n\t\t\td = (d && d.replace && this.grid.escapeHTMLInData) ? d.replace(/&/g, '&amp;').replace(/</g, '&lt;') : d;\r\n\t\t\tif(this.editable && (this.alwaysEditing || (i.rowIndex==inRowIndex && i.cell==this))){\r\n\t\t\t\treturn this.formatEditing(i.value ? i.value : d, inRowIndex);\r\n\t\t\t}else{\r\n\t\t\t\treturn this._defaultFormat(d, [d, inRowIndex, this]);\r\n\t\t\t}\r\n\t\t},\r\n\t\tformatEditing: function(inDatum, inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tformats the cell for editing\r\n\t\t\t// inDatum: anything\r\n\t\t\t//\t\tcell data to edit\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// returns:\r\n\t\t\t//\t\tstring of html to place in grid cell\r\n\t\t},\r\n\t\t// utility\r\n\t\tgetNode: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tgets the dom node for a given grid cell.\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// returns:\r\n\t\t\t//\t\tdom node for a given grid cell\r\n\t\t\treturn this.view.getCellNode(inRowIndex, this.index);\r\n\t\t},\r\n\t\tgetHeaderNode: function(){\r\n\t\t\treturn this.view.getHeaderCellNode(this.index);\r\n\t\t},\r\n\t\tgetEditNode: function(inRowIndex){\r\n\t\t\treturn (this.getNode(inRowIndex) || 0).firstChild || 0;\r\n\t\t},\r\n\t\tcanResize: function(){\r\n\t\t\tvar uw = this.unitWidth;\r\n\t\t\treturn uw && (uw!=='auto');\r\n\t\t},\r\n\t\tisFlex: function(){\r\n\t\t\tvar uw = this.unitWidth;\r\n\t\t\treturn uw && lang.isString(uw) && (uw=='auto' || uw.slice(-1)=='%');\r\n\t\t},\r\n\t\t// edit support\r\n\t\tapplyEdit: function(inValue, inRowIndex){\r\n\t\t\tif(this.getNode(inRowIndex)){\r\n\t\t\t\tthis.grid.edit.applyCellEdit(inValue, this, inRowIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t\tcancelEdit: function(inRowIndex){\r\n\t\t\tthis.grid.doCancelEdit(inRowIndex);\r\n\t\t},\r\n\t\t_onEditBlur: function(inRowIndex){\r\n\t\t\tif(this.grid.edit.isEditCell(inRowIndex, this.index)){\r\n\t\t\t\t//console.log('editor onblur', e);\r\n\t\t\t\tthis.grid.edit.apply();\r\n\t\t\t}\r\n\t\t},\r\n\t\tregisterOnBlur: function(inNode, inRowIndex){\r\n\t\t\tif(this.commitOnBlur){\r\n\t\t\t\tconnect.connect(inNode, \"onblur\", function(e){\r\n\t\t\t\t\t// hack: if editor still thinks this editor is current some ms after it blurs, assume we've focused away from grid\r\n\t\t\t\t\tsetTimeout(lang.hitch(this, \"_onEditBlur\", inRowIndex), 250);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\t//protected\r\n\t\tneedFormatNode: function(inDatum, inRowIndex){\r\n\t\t\tthis._formatPending = true;\r\n\t\t\twhenIdle(this, \"_formatNode\", inDatum, inRowIndex);\r\n\t\t},\r\n\t\tcancelFormatNode: function(){\r\n\t\t\tthis._formatPending = false;\r\n\t\t},\r\n\t\t//private\r\n\t\t_formatNode: function(inDatum, inRowIndex){\r\n\t\t\tif(this._formatPending){\r\n\t\t\t\tthis._formatPending = false;\r\n\t\t\t\t// make cell selectable\r\n\t\t\t\tif(!has('ie')){\r\n\t\t\t\t\tdom.setSelectable(this.grid.domNode, true);\r\n\t\t\t\t}\r\n\t\t\t\tthis.formatNode(this.getEditNode(inRowIndex), inDatum, inRowIndex);\r\n\t\t\t}\r\n\t\t},\r\n\t\t//protected\r\n\t\tformatNode: function(inNode, inDatum, inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tformat the editing dom node. Use when editor is a widget.\r\n\t\t\t// inNode: dom node\r\n\t\t\t//\t\tdom node for the editor\r\n\t\t\t// inDatum: anything\r\n\t\t\t//\t\tcell data to edit\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tif(has('ie')){\r\n\t\t\t\t// IE sux bad\r\n\t\t\t\twhenIdle(this, \"focus\", inRowIndex, inNode);\r\n\t\t\t}else{\r\n\t\t\t\tthis.focus(inRowIndex, inNode);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdispatchEvent: function(m, e){\r\n\t\t\tif(m in this){\r\n\t\t\t\treturn this[m](e);\r\n\t\t\t}\r\n\t\t},\r\n\t\t//public\r\n\t\tgetValue: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns value entered into editor\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// returns:\r\n\t\t\t//\t\tvalue of editor\r\n\t\t\treturn this.getEditNode(inRowIndex)[this._valueProp];\r\n\t\t},\r\n\t\tsetValue: function(inRowIndex, inValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tset the value of the grid editor\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// inValue: anything\r\n\t\t\t//\t\tvalue of editor\r\n\t\t\tvar n = this.getEditNode(inRowIndex);\r\n\t\t\tif(n){\r\n\t\t\t\tn[this._valueProp] = inValue;\r\n\t\t\t}\r\n\t\t},\r\n\t\tfocus: function(inRowIndex, inNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfocus the grid editor\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\t// inNode: dom node\r\n\t\t\t//\t\teditor node\r\n\t\t\tfocusSelectNode(inNode || this.getEditNode(inRowIndex));\r\n\t\t},\r\n\t\tsave: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsave editor state\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tthis.value = this.value || this.getValue(inRowIndex);\r\n\t\t\t//console.log(\"save\", this.value, inCell.index, inRowIndex);\r\n\t\t},\r\n\t\trestore: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trestore editor state\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tthis.setValue(inRowIndex, this.value);\r\n\t\t\t//console.log(\"restore\", this.value, inCell.index, inRowIndex);\r\n\t\t},\r\n\t\t//protected\r\n\t\t_finish: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcalled when editing is completed to clean up editor\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tdom.setSelectable(this.grid.domNode, false);\r\n\t\t\tthis.cancelFormatNode();\r\n\t\t},\r\n\t\t//public\r\n\t\tapply: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapply edit from cell editor\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tthis.applyEdit(this.getValue(inRowIndex), inRowIndex);\r\n\t\t\tthis._finish(inRowIndex);\r\n\t\t},\r\n\t\tcancel: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcancel cell edit\r\n\t\t\t// inRowIndex: int\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tthis.cancelEdit(inRowIndex);\r\n\t\t\tthis._finish(inRowIndex);\r\n\t\t}\r\n\t});\r\n\tBaseCell.markupFactory = function(node, cellDef){\r\n\t\tvar formatter = lang.trim(domAttr.get(node, \"formatter\")||\"\");\r\n\t\tif(formatter){\r\n\t\t\tcellDef.formatter = lang.getObject(formatter)||formatter;\r\n\t\t}\r\n\t\tvar get = lang.trim(domAttr.get(node, \"get\")||\"\");\r\n\t\tif(get){\r\n\t\t\tcellDef.get = lang.getObject(get);\r\n\t\t}\r\n\t\tvar getBoolAttr = function(attr, cell, cellAttr){\r\n\t\t\tvar value = lang.trim(domAttr.get(node, attr)||\"\");\r\n\t\t\tif(value){ cell[cellAttr||attr] = !(value.toLowerCase()==\"false\"); }\r\n\t\t};\r\n\t\tgetBoolAttr(\"sortDesc\", cellDef);\r\n\t\tgetBoolAttr(\"editable\", cellDef);\r\n\t\tgetBoolAttr(\"alwaysEditing\", cellDef);\r\n\t\tgetBoolAttr(\"noresize\", cellDef);\r\n\t\tgetBoolAttr(\"draggable\", cellDef);\r\n\r\n\t\tvar value = lang.trim(domAttr.get(node, \"loadingText\")||domAttr.get(node, \"defaultValue\")||\"\");\r\n\t\tif(value){\r\n\t\t\tcellDef.defaultValue = value;\r\n\t\t}\r\n\r\n\t\tvar getStrAttr = function(attr, cell, cellAttr){\r\n\t\t\tvar value = lang.trim(domAttr.get(node, attr)||\"\")||undefined;\r\n\t\t\tif(value){ cell[cellAttr||attr] = value; }\r\n\t\t};\r\n\t\tgetStrAttr(\"styles\", cellDef);\r\n\t\tgetStrAttr(\"headerStyles\", cellDef);\r\n\t\tgetStrAttr(\"cellStyles\", cellDef);\r\n\t\tgetStrAttr(\"classes\", cellDef);\r\n\t\tgetStrAttr(\"headerClasses\", cellDef);\r\n\t\tgetStrAttr(\"cellClasses\", cellDef);\r\n\t};\r\n\r\n\tvar Cell = BaseCell.Cell = declare(\"dojox.grid.cells.Cell\", BaseCell, {\r\n\t\t// summary:\r\n\t\t//\t\tgrid cell that provides a standard text input box upon editing\r\n\t\tconstructor: function(){\r\n\t\t\tthis.keyFilter = this.keyFilter;\r\n\t\t},\r\n\t\t// keyFilter: RegExp\r\n\t\t//\t\toptional regex for disallowing keypresses\r\n\t\tkeyFilter: null,\r\n\t\tformatEditing: function(inDatum, inRowIndex){\r\n\t\t\tthis.needFormatNode(inDatum, inRowIndex);\r\n\t\t\treturn '<input class=\"dojoxGridInput\" type=\"text\" value=\"' + inDatum + '\">';\r\n\t\t},\r\n\t\tformatNode: function(inNode, inDatum, inRowIndex){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// FIXME: feels too specific for this interface\r\n\t\t\tthis.registerOnBlur(inNode, inRowIndex);\r\n\t\t},\r\n\t\tdoKey: function(e){\r\n\t\t\tif(this.keyFilter){\r\n\t\t\t\tvar key = String.fromCharCode(e.charCode);\r\n\t\t\t\tif(key.search(this.keyFilter) == -1){\r\n\t\t\t\t\tevent.stop(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t_finish: function(inRowIndex){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tvar n = this.getEditNode(inRowIndex);\r\n\t\t\ttry{\r\n\t\t\t\tutil.fire(n, \"blur\");\r\n\t\t\t}catch(e){}\r\n\t\t}\r\n\t});\r\n\tCell.markupFactory = function(node, cellDef){\r\n\t\tBaseCell.markupFactory(node, cellDef);\r\n\t\tvar keyFilter = lang.trim(domAttr.get(node, \"keyFilter\")||\"\");\r\n\t\tif(keyFilter){\r\n\t\t\tcellDef.keyFilter = new RegExp(keyFilter);\r\n\t\t}\r\n\t};\r\n\r\n\tvar RowIndex = BaseCell.RowIndex = declare(\"dojox.grid.cells.RowIndex\", Cell, {\r\n\t\tname: 'Row',\r\n\r\n\t\tpostscript: function(){\r\n\t\t\tthis.editable = false;\r\n\t\t},\r\n\t\tget: function(inRowIndex){\r\n\t\t\treturn inRowIndex + 1;\r\n\t\t}\r\n\t});\r\n\tRowIndex.markupFactory = function(node, cellDef){\r\n\t\tCell.markupFactory(node, cellDef);\r\n\t};\r\n\r\n\tvar Select = BaseCell.Select = declare(\"dojox.grid.cells.Select\", Cell, {\r\n\t\t// summary:\r\n\t\t//\t\tgrid cell that provides a standard select for editing\r\n\r\n\t\t// options: Array\r\n\t\t//\t\ttext of each item\r\n\t\toptions: null,\r\n\r\n\t\t// values: Array\r\n\t\t//\t\tvalue for each item\r\n\t\tvalues: null,\r\n\r\n\t\t// returnIndex: Integer\r\n\t\t//\t\teditor returns only the index of the selected option and not the value\r\n\t\treturnIndex: -1,\r\n\r\n\t\tconstructor: function(inCell){\r\n\t\t\tthis.values = this.values || this.options;\r\n\t\t},\r\n\t\tformatEditing: function(inDatum, inRowIndex){\r\n\t\t\tthis.needFormatNode(inDatum, inRowIndex);\r\n\t\t\tvar h = [ '<select class=\"dojoxGridSelect\">' ];\r\n\t\t\tfor (var i=0, o, v; ((o=this.options[i]) !== undefined)&&((v=this.values[i]) !== undefined); i++){\r\n\t\t\t\tv = v.replace ? v.replace(/&/g, '&amp;').replace(/</g, '&lt;') : v;\r\n\t\t\t\to = o.replace ? o.replace(/&/g, '&amp;').replace(/</g, '&lt;') : o;\r\n\t\t\t\th.push(\"<option\", (inDatum==v ? ' selected' : ''), ' value=\"' + v + '\"', \">\", o, \"</option>\");\r\n\t\t\t}\r\n\t\t\th.push('</select>');\r\n\t\t\treturn h.join('');\r\n\t\t},\r\n\t\t_defaultFormat: function(inValue, callArgs){\r\n\t\t\tvar v = this.inherited(arguments);\r\n\t\t\t// when 'values' and 'options' both provided and there is no cutomized formatter,\r\n\t\t\t// then we use 'options' as label in order to be consistent\r\n\t\t\tif(!this.formatter && this.values && this.options){\r\n\t\t\t\tvar i = array.indexOf(this.values, v);\r\n\t\t\t\tif(i >= 0){\r\n\t\t\t\t\tv = this.options[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn v;\r\n\t\t},\r\n\t\tgetValue: function(inRowIndex){\r\n\t\t\tvar n = this.getEditNode(inRowIndex);\r\n\t\t\tif(n){\r\n\t\t\t\tvar i = n.selectedIndex, o = n.options[i];\r\n\t\t\t\treturn this.returnIndex > -1 ? i : o.value || o.innerHTML;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tSelect.markupFactory = function(node, cell){\r\n\t\tCell.markupFactory(node, cell);\r\n\t\tvar options = lang.trim(domAttr.get(node, \"options\")||\"\");\r\n\t\tif(options){\r\n\t\t\tvar o = options.split(',');\r\n\t\t\tif(o[0] != options){\r\n\t\t\t\tcell.options = o;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar values = lang.trim(domAttr.get(node, \"values\")||\"\");\r\n\t\tif(values){\r\n\t\t\tvar v = values.split(',');\r\n\t\t\tif(v[0] != values){\r\n\t\t\t\tcell.values = v;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar AlwaysEdit = BaseCell.AlwaysEdit = declare(\"dojox.grid.cells.AlwaysEdit\", Cell, {\r\n\t\t// summary:\r\n\t\t//\t\tgrid cell that is always in an editable state, regardless of grid editing state\r\n\t\talwaysEditing: true,\r\n\t\t_formatNode: function(inDatum, inRowIndex){\r\n\t\t\tthis.formatNode(this.getEditNode(inRowIndex), inDatum, inRowIndex);\r\n\t\t},\r\n\t\tapplyStaticValue: function(inRowIndex){\r\n\t\t\tvar e = this.grid.edit;\r\n\t\t\te.applyCellEdit(this.getValue(inRowIndex), this, inRowIndex);\r\n\t\t\te.start(this, inRowIndex, true);\r\n\t\t}\r\n\t});\r\n\tAlwaysEdit.markupFactory = function(node, cell){\r\n\t\tCell.markupFactory(node, cell);\r\n\t};\r\n\r\n\tvar Bool = BaseCell.Bool = declare(\"dojox.grid.cells.Bool\", AlwaysEdit, {\r\n\t\t// summary:\r\n\t\t//\t\tgrid cell that provides a standard checkbox that is always on for editing\r\n\t\t_valueProp: \"checked\",\r\n\t\tformatEditing: function(inDatum, inRowIndex){\r\n\t\t\treturn '<input class=\"dojoxGridInput\" type=\"checkbox\"' + (inDatum ? ' checked=\"checked\"' : '') + ' style=\"width: auto\" />';\r\n\t\t},\r\n\t\tdoclick: function(e){\r\n\t\t\tif(e.target.tagName == 'INPUT'){\r\n\t\t\t\tthis.applyStaticValue(e.rowIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tBool.markupFactory = function(node, cell){\r\n\t\tAlwaysEdit.markupFactory(node, cell);\r\n\t};\r\n\r\n\treturn BaseCell;\r\n\r\n});"]}