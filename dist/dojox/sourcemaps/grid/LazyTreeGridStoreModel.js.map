{"version":3,"sources":["grid/LazyTreeGridStoreModel.js"],"names":["define","declare","array","lang","ForestStoreModel","serverStore","constructor","args","this","mayHaveChildren","item","children","some","childrenAttrs","attr","store","getValue","isString","parseInt","toLowerCase","isItem","getValues","isArray","length","getChildren","parentItem","onComplete","onError","queryObj","start","count","parentId","sort","root","size","fetch","query","onBegin","hitch","items","isItemLoaded","arguments","callee","loadItem","onItem","_isChildrenLoaded","childrenSize","mixin","inherited","every","c","onNewItem","parentInfo","onDeleteItem"],"mappings":";;;;;;;AAAAA,QACC,qBACA,mBACA,kBACA,+BAAgC,SAASC,EAASC,EAAOC,EAAMC,GAEhE,OAAOH,EAAQ,oCAAqCG,GAMnDC,aAAa,EAEbC,YAAa,SAAsBC,GAClCC,KAAKH,cAAgBE,EAAKF,aAG3BI,gBAAiB,SAA4BC,GAC5C,IAAIC,EAAW,KACf,OAAOT,EAAMU,KAAKJ,KAAKK,cAAe,SAASC,GAE7C,OADAH,EAAWH,KAAKO,MAAMC,SAASN,EAAMI,GAClCX,EAAKc,SAASN,GACTO,SAASP,EAAU,IAAM,GAAgC,SAA3BA,EAASQ,cACnB,iBAAZR,EACRA,EAAW,EACS,kBAAZA,EACRA,IACCH,KAAKO,MAAMK,OAAOT,KAC1BA,EAAWH,KAAKO,MAAMM,UAAUX,EAAMI,KAC/BX,EAAKmB,QAAQX,IAAYA,EAASY,OAAS,IAIlDf,OAGJgB,YAAa,SAA2BC,EAAqCC,EAAyBC,EAAmBC,GACxH,GAAGA,EAAS,CACX,IAAIC,EAAQD,EAASC,OAAS,EAC7BC,EAAQF,EAASE,MACjBC,EAAWH,EAASG,SACpBC,EAAOJ,EAASI,KACjB,GAAGP,IAAejB,KAAKyB,KACtBzB,KAAKyB,KAAKC,KAAO,EACjB1B,KAAKO,MAAMoB,OACVN,MAAOA,EACPC,MAAOA,EACPE,KAAMA,EACNI,MAAO5B,KAAK4B,MACZC,QAASlC,EAAKmC,MAAM9B,KAAM,SAAS0B,GAClC1B,KAAKyB,KAAKC,KAAOA,IAElBR,WAAYvB,EAAKmC,MAAM9B,KAAM,SAAS+B,GACrCb,EAAWa,EAAOX,EAAUpB,KAAKyB,KAAKC,QAEvCP,QAASA,QAEN,CACJ,IAAIZ,EAAQP,KAAKO,MACjB,IAAIA,EAAMyB,aAAaf,GAAY,CAClC,IAAID,EAAcrB,EAAKmC,MAAM9B,KAAMiC,UAAUC,QAQ7C,YAPA3B,EAAM4B,UACLjC,KAAMe,EACNmB,OAAQ,SAASnB,GAChBD,EAAYC,EAAYC,EAAYC,EAASC,IAE9CD,QAASA,IAIRnB,KAAKH,cAAgBG,KAAKqC,kBAAkBpB,IAC9CjB,KAAKsC,aAAe,EACpBtC,KAAKO,MAAMoB,OACVN,MAAOA,EACPC,MAAOA,EACPE,KAAMA,EACNI,MAAOjC,EAAK4C,OAAOhB,SAAUA,GAAWvB,KAAK4B,WAC7CC,QAASlC,EAAKmC,MAAM9B,KAAM,SAAS0B,GAClC1B,KAAKsC,aAAeZ,IAErBR,WAAYvB,EAAKmC,MAAM9B,KAAM,SAAS+B,GACrCb,EAAWa,EAAOX,EAAUpB,KAAKsC,gBAElCnB,QAASA,KAGVnB,KAAKwC,UAAUP,iBAIjBjC,KAAKwC,UAAUP,YAIjBI,kBAAmB,SAASpB,GAG3B,IAAId,EAAW,KACf,OAAOT,EAAM+C,MAAMzC,KAAKK,cAAe,SAASC,GAE/C,OADAH,EAAWH,KAAKO,MAAMM,UAAUI,EAAYX,GACrCZ,EAAM+C,MAAMtC,EAAU,SAASuC,GACrC,OAAO1C,KAAKO,MAAMyB,aAAaU,IAC7B1C,OACDA,OAIJ2C,UAAW,SAASzC,EAAM0C,KAE1BC,aAAc,SAAS3C","file":"../../grid/LazyTreeGridStoreModel.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dijit/tree/ForestStoreModel\"], function(declare, array, lang, ForestStoreModel){\r\n\r\nreturn declare(\"dojox.grid.LazyTreeGridStoreModel\", ForestStoreModel, {\r\n\r\n\t// There are different approaches to get children for client-side\r\n\t// DataStore (e.g. dojo.data.ItemFileReadStore) or server-side DataStore\r\n\t// (e.g. dojox.data.QueryReadStore), so we need to be sure what kind of\r\n\t// DataStore is being used\r\n\tserverStore: false, // server side store\r\n\t\r\n\tconstructor: function(/* Object */ args){\r\n\t\tthis.serverStore = !!args.serverStore;\r\n\t},\r\n\r\n\tmayHaveChildren: function(/*dojo.data.Item*/ item){\r\n\t\tvar children = null;\r\n\t\treturn array.some(this.childrenAttrs, function(attr){\r\n\t\t\t\tchildren = this.store.getValue(item, attr);\r\n\t\t\t\tif(lang.isString(children)){\r\n\t\t\t\t\treturn parseInt(children, 10) > 0 || children.toLowerCase() === \"true\" ? true : false;\r\n\t\t\t\t}else if(typeof children == \"number\"){\r\n\t\t\t\t\treturn children > 0;\r\n\t\t\t\t}else if(typeof children == \"boolean\"){\r\n\t\t\t\t\treturn children;\r\n\t\t\t\t}else if(this.store.isItem(children)){\r\n\t\t\t\t\tchildren = this.store.getValues(item, attr);\r\n\t\t\t\t\treturn lang.isArray(children) ? children.length > 0 : false;\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t}, this);\r\n\t},\r\n\t\r\n\tgetChildren: function(/*dojo.data.Item*/parentItem, /*function(items, size)*/onComplete, /*function*/ onError, /*object*/queryObj){\r\n\t\tif(queryObj){\r\n\t\t\tvar start = queryObj.start || 0,\r\n\t\t\t\tcount = queryObj.count,\r\n\t\t\t\tparentId = queryObj.parentId,\r\n\t\t\t\tsort = queryObj.sort;\r\n\t\t\tif(parentItem === this.root){\r\n\t\t\t\tthis.root.size = 0;\r\n\t\t\t\tthis.store.fetch({\r\n\t\t\t\t\tstart: start,\r\n\t\t\t\t\tcount: count,\r\n\t\t\t\t\tsort: sort,\r\n\t\t\t\t\tquery: this.query,\r\n\t\t\t\t\tonBegin: lang.hitch(this, function(size){\r\n\t\t\t\t\t\tthis.root.size = size;\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tonComplete: lang.hitch(this, function(items){\r\n\t\t\t\t\t\tonComplete(items, queryObj, this.root.size);\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tvar store = this.store;\r\n\t\t\t\tif(!store.isItemLoaded(parentItem)){\r\n\t\t\t\t\tvar getChildren = lang.hitch(this, arguments.callee);\r\n\t\t\t\t\tstore.loadItem({\r\n\t\t\t\t\t\titem: parentItem,\r\n\t\t\t\t\t\tonItem: function(parentItem){\r\n\t\t\t\t\t\t\tgetChildren(parentItem, onComplete, onError, queryObj);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.serverStore && !this._isChildrenLoaded(parentItem)){\r\n\t\t\t\t\tthis.childrenSize = 0;\r\n\t\t\t\t\tthis.store.fetch({\r\n\t\t\t\t\t\tstart: start,\r\n\t\t\t\t\t\tcount: count,\r\n\t\t\t\t\t\tsort: sort,\r\n\t\t\t\t\t\tquery: lang.mixin({parentId: parentId}, this.query || {}),\r\n\t\t\t\t\t\tonBegin: lang.hitch(this, function(size){\r\n\t\t\t\t\t\t\tthis.childrenSize = size;\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tonComplete: lang.hitch(this, function(items){\r\n\t\t\t\t\t\t\tonComplete(items, queryObj, this.childrenSize);\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t},\r\n\t\r\n\t_isChildrenLoaded: function(parentItem){\r\n\t\t// summary:\r\n\t\t//\t\tCheck if all children of the given item have been loaded\r\n\t\tvar children = null;\r\n\t\treturn array.every(this.childrenAttrs, function(attr){\r\n\t\t\tchildren = this.store.getValues(parentItem, attr);\r\n\t\t\treturn array.every(children, function(c){\r\n\t\t\t\treturn this.store.isItemLoaded(c);\r\n\t\t\t}, this);\r\n\t\t}, this);\r\n\t},\r\n\t\r\n\t//overwritten\r\n\tonNewItem: function(item, parentInfo){ },\r\n\t\r\n\tonDeleteItem: function(item){ }\r\n});\r\n});\r\n"]}