{"version":3,"sources":["grid/_Grid.js"],"names":["define","dojo","dojox","declare","_Events","_Scroller","_Layout","_View","_ViewManager","_RowManager","_FocusManager","_EditManager","Selection","_RowSelector","util","_Widget","_TemplatedMixin","CheckedMenuItem","template","string","array","lang","has","metrics","html","query","isCopyKey","dnd","getCopyKeyState","_Grid","templateString","classTag","rowCount","keepRows","rowsPerPage","autoWidth","initialWidth","autoHeight","rowHeight","autoRender","defaultHeight","height","structure","elasticView","singleClickEdit","selectionMode","rowSelector","columnReordering","headerMenu","placeholderLabel","selectable","_click","loadingMessage","errorMessage","noDataMessage","escapeHTMLInData","formatterScope","editable","summary","_setSummaryAttr","sortInfo","_placeholders","_layoutClass","buildRendering","this","inherited","arguments","domNode","getAttribute","tabIndex","createScroller","createLayout","createViews","createManagers","createSelection","connect","selection","initOnFontResize","funnelEvents","keyEvents","setAttribute","addClass","isLeftToRight","viewsNode","postMixInProperties","messages","i18n","getLocalization","substitute","srcNodeRef","style","_setAutoHeightAttr","lastScrollTop","scrollTop","postCreate","_setHeaderMenuAttr","_setStructureAttr","width","attr","destroy","onReveal","onSizeChange","scroller","edit","views","destroyViews","focus","length","forEach","p","unReplace","unBindDomNode","viewsHeaderNode","ah","skipRender","window","parseInt","isNaN","_autoHeight","get","_started","render","_getRowCountAttr","updating","invalidated","undefined","textSizeChanged","sizeChange","update","rows","grid","renderRow","hitch","removeRow","layout","onMoveColumn","onResizeColumn","cellIdx","createView","inClass","idx","view","getObject","index","appendChild","headerNode","addView","buildViews","vs","i","type","_scopeName","setStructure","setContentNodes","getContentNodes","s","isString","deprecated","focusView","_structureChanged","inStructure","getColumnTogglingItems","items","checkedItems","map","cells","cell","menuItems","self","item","label","name","checked","hidden","_gridCell","onChange","setColumnVisibility","filter","c","set","indexOf","splice","prototype","apply","push","menu","bindDomNode","getPlaceholders","setHeaderMenu","setupHeaderMenu","_replaced","replace","_fetch","start","setScrollTop","getItem","inRowIndex","showMessage","message","messagesNode","innerHTML","display","hasLayout","resize","changeSize","resultSize","_pendingChangeSize","_pendingResultSize","_getPadBorder","_padBorder","_getPadBorderExtents","_getHeaderHeight","vns","t","measureHeader","normalizeHeaderNodeHeight","_resize","pn","parentNode","nodeType","visibility","h","padBorder","hh","averageRowHeight","clientHeight","document","body","fitTo","marginBox","_parentContentBoxHeight","_getContentBox","Math","max","hasFlex","some","v","flexCells","adaptWidth","adaptHeight","postresize","doAutoWidth","w","clientWidth","offsetWidth","vw","arrange","onEach","inHeaderHeight","numScroll","numNoScroll","noScrolls","hasHScrollbar","windowHeight","startup","defaultUpdate","_render","init","prerender","postrender","setKeepInfo","initFocusView","setSelectable","size","measureContent","inNodes","_skipRowRenormalize","rowRemoved","beginUpdate","endUpdate","r","all","updateRowCount","updateRow","Number","invalidateNodes","rowHeightChanged","updateRows","startIndex","howMany","inRowCount","updateRowStyles","getRowNode","rowNodes","cView","renormalizeRow","fastScroll","delayScroll","scrollRedrawThreshold","scrollTo","inTop","delta","abs","_pendingScroll","clearTimeout","_this","setTimeout","finishScrollJob","scroll","scrollToRow","findScrollTop","styleRowNode","inRowNode","_mouseOut","e","setOverRow","getCell","inIndex","setCellWidth","inUnitWidth","unitWidth","getCellName","inCell","canSort","inSortInfo","sort","getSortAsc","Boolean","getSortIndex","setSortIndex","inAsc","si","setSortInfo","doKeyEvent","dispatch","onKeyEvent","_dispatch","m","dispatchKeyEvent","dispatchContentEvent","dispatchEvent","sourceView","dispatchHeaderEvent","dokeydown","onKeyDown","doclick","cellNode","onCellClick","onRowClick","dodblclick","onCellDblClick","onRowDblClick","docontextmenu","onCellContextMenu","onRowContextMenu","doheaderclick","onHeaderCellClick","onHeaderClick","doheaderdblclick","onHeaderCellDblClick","onHeaderDblClick","doheadercontextmenu","onHeaderCellContextMenu","onHeaderContextMenu","doStartEdit","onStartEdit","doApplyCellEdit","inValue","inFieldIndex","onApplyCellEdit","doCancelEdit","onCancelEdit","doApplyEdit","onApplyEdit","addRow","removeSelectedRows","allItemsSelected","getSelected","clear","markupFactory","props","node","ctor","cellFunc","widthFromAttr","n","slice","nodeName","toLowerCase","cg","sv","noscroll","__span","hasAttr","Infinity","tr","tr_idx","lastViewIdx","cellCount","viewIdx","th","trim","colSpan","id","rowSpan","relWidth","Cell"],"mappings":"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","file":"../../grid/_Grid.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"../main\",\r\n\t\"dojo/_base/declare\",\r\n\t\"./_Events\",\r\n\t\"./_Scroller\",\r\n\t\"./_Layout\",\r\n\t\"./_View\",\r\n\t\"./_ViewManager\",\r\n\t\"./_RowManager\",\r\n\t\"./_FocusManager\",\r\n\t\"./_EditManager\",\r\n\t\"./Selection\",\r\n\t\"./_RowSelector\",\r\n\t\"./util\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_TemplatedMixin\",\r\n\t\"dijit/CheckedMenuItem\",\r\n\t\"dojo/text!./resources/_Grid.html\",\r\n\t\"dojo/string\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojox/html/metrics\",\r\n\t\"dojo/_base/html\",\r\n\t\"dojo/query\",\r\n\t\"dojo/dnd/common\",\r\n\t\"dojo/i18n!dijit/nls/loading\"\r\n], function(dojo, dojox, declare, _Events, _Scroller, _Layout, _View, _ViewManager,\r\n\t_RowManager, _FocusManager, _EditManager, Selection, _RowSelector, util, _Widget,\r\n\t _TemplatedMixin, CheckedMenuItem, template, string, array, lang, has, metrics, html, query){\r\n\r\n\t// NOTE: this is for backwards compatibility with Dojo 1.3\r\n\tif(!dojo.isCopyKey){\r\n\t\tdojo.isCopyKey = dojo.dnd.getCopyKeyState;\r\n\t}\r\n\t/*=====\r\n\tdojox.grid.__CellDef = {\r\n\t\t// name: String?\r\n\t\t//\t\tThe text to use in the header of the grid for this cell.\r\n\t\t// get: Function?\r\n\t\t//\t\tfunction(rowIndex){} rowIndex is of type Integer.  This\r\n\t\t//\t\tfunction will be called when a cell\trequests data.  Returns the\r\n\t\t//\t\tunformatted data for the cell.\r\n\t\t// value: String?\r\n\t\t//\t\tIf \"get\" is not specified, this is used as the data for the cell.\r\n\t\t// defaultValue: String?\r\n\t\t//\t\tIf \"get\" and \"value\" aren't specified or if \"get\" returns an undefined\r\n\t\t//\t\tvalue, this is used as the data for the cell.  \"formatter\" is not run\r\n\t\t//\t\ton this if \"get\" returns an undefined value.\r\n\t\t// formatter: Function?\r\n\t\t//\t\tfunction(data, rowIndex){} data is of type anything, rowIndex\r\n\t\t//\t\tis of type Integer.  This function will be called after the cell\r\n\t\t//\t\thas its data but before it passes it back to the grid to render.\r\n\t\t//\t\tReturns the formatted version of the cell's data.\r\n\t\t// type: dojox.grid.cells._Base|Function?\r\n\t\t//\t\tTODO\r\n\t\t// editable: Boolean?\r\n\t\t//\t\tWhether this cell should be editable or not.\r\n\t\t// hidden: Boolean?\r\n\t\t//\t\tIf true, the cell will not be displayed.\r\n\t\t// noresize: Boolean?\r\n\t\t//\t\tIf true, the cell will not be able to be resized.\r\n\t\t// width: Integer|String?\r\n\t\t//\t\tA CSS size.  If it's an Integer, the width will be in em's.\r\n\t\t// colSpan: Integer?\r\n\t\t//\t\tHow many columns to span this cell.  Will not work in the first\r\n\t\t//\t\tsub-row of cells.\r\n\t\t// rowSpan: Integer?\r\n\t\t//\t\tHow many sub-rows to span this cell.\r\n\t\t// styles: String?\r\n\t\t//\t\tA string of styles to apply to both the header cell and main\r\n\t\t//\t\tgrid cells.  Must end in a ';'.\r\n\t\t// headerStyles: String?\r\n\t\t//\t\tA string of styles to apply to just the header cell.  Must end\r\n\t\t//\t\tin a ';'\r\n\t\t// cellStyles: String?\r\n\t\t//\t\tA string of styles to apply to just the main grid cells.  Must\r\n\t\t//\t\tend in a ';'\r\n\t\t// classes: String?\r\n\t\t//\t\tA space separated list of classes to apply to both the header\r\n\t\t//\t\tcell and the main grid cells.\r\n\t\t// headerClasses: String?\r\n\t\t//\t\tA space separated list of classes to apply to just the header\r\n\t\t//\t\tcell.\r\n\t\t// cellClasses: String?\r\n\t\t//\t\tA space separated list of classes to apply to just the main\r\n\t\t//\t\tgrid cells.\r\n\t\t// attrs: String?\r\n\t\t//\t\tA space separated string of attribute='value' pairs to add to\r\n\t\t//\t\tthe header cell element and main grid cell elements.\r\n\t};\r\n\t=====*/\r\n\r\n\t/*=====\r\n\tdojox.grid.__ViewDef = {\r\n\t\t// noscroll: Boolean?\r\n\t\t//\t\tIf true, no scrollbars will be rendered without scrollbars.\r\n\t\t// width: Integer|String?\r\n\t\t//\t\tA CSS size.  If it's an Integer, the width will be in em's. If\r\n\t\t//\t\t\"noscroll\" is true, this value is ignored.\r\n\t\t// cells: dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]?\r\n\t\t//\t\tThe structure of the cells within this grid.\r\n\t\t// type: String?\r\n\t\t//\t\tA string containing the constructor of a subclass of\r\n\t\t//\t\tdojox.grid._View.  If this is not specified, dojox.grid._View\r\n\t\t//\t\tis used.\r\n\t\t// defaultCell: dojox.grid.__CellDef?\r\n\t\t//\t\tA cell definition with default values for all cells in this view.  If\r\n\t\t//\t\ta property is defined in a cell definition in the \"cells\" array and\r\n\t\t//\t\tthis property, the cell definition's property will override this\r\n\t\t//\t\tproperty's property.\r\n\t\t// onBeforeRow: Function?\r\n\t\t//\t\tfunction(rowIndex, cells){} rowIndex is of type Integer, cells\r\n\t\t//\t\tis of type Array[dojox.grid.__CellDef[]].  This function is called\r\n\t\t//\t\tbefore each row of data is rendered.  Before the header is\r\n\t\t//\t\trendered, rowIndex will be -1.  \"cells\" is a reference to the\r\n\t\t//\t\tinternal structure of this view's cells so any changes you make to\r\n\t\t//\t\tit will persist between calls.\r\n\t\t// onAfterRow: Function?\r\n\t\t//\t\tfunction(rowIndex, cells, rowNode){} rowIndex is of type Integer, cells\r\n\t\t//\t\tis of type Array[dojox.grid.__CellDef[]], rowNode is of type DOMNode.\r\n\t\t//\t\tThis function is called\tafter each row of data is rendered.  After the\r\n\t\t//\t\theader is rendered, rowIndex will be -1.  \"cells\" is a reference to the\r\n\t\t//\t\tinternal structure of this view's cells so any changes you make to\r\n\t\t//\t\tit will persist between calls.\r\n\t};\r\n\t=====*/\r\n\r\n\tvar _Grid = declare('dojox.grid._Grid',\r\n\t\t[ _Widget, _TemplatedMixin, _Events ],\r\n\t\t{\r\n\t\t// summary:\r\n\t\t//\t\tA grid widget with virtual scrolling, cell editing, complex rows,\r\n\t\t//\t\tsorting, fixed columns, sizeable columns, etc.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\t_Grid provides the full set of grid features without any\r\n\t\t//\t\tdirect connection to a data store.\r\n\t\t//\r\n\t\t//\t\tThe grid exposes a get function for the grid, or optionally\r\n\t\t//\t\tindividual columns, to populate cell contents.\r\n\t\t//\r\n\t\t//\t\tThe grid is rendered based on its structure, an object describing\r\n\t\t//\t\tcolumn and cell layout.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tA quick sample:\r\n\t\t//\r\n\t\t//\t\tdefine a get function\r\n\t\t//\t|\tfunction get(inRowIndex){ // called in cell context\r\n\t\t//\t|\t\treturn [this.index, inRowIndex].join(', ');\r\n\t\t//\t|\t}\r\n\t\t//\r\n\t\t//\t\tdefine the grid structure:\r\n\t\t//\t|\tvar structure = [ // array of view objects\r\n\t\t//\t|\t\t{ cells: [// array of rows, a row is an array of cells\r\n\t\t//\t|\t\t\t[\r\n\t\t//\t|\t\t\t\t{ name: \"Alpha\", width: 6 },\r\n\t\t//\t|\t\t\t\t{ name: \"Beta\" },\r\n\t\t//\t|\t\t\t\t{ name: \"Gamma\", get: get }]\r\n\t\t//\t|\t\t]}\r\n\t\t//\t|\t];\r\n\t\t//\r\n\t\t//\t|\t<div id=\"grid\"\r\n\t\t//\t|\t\trowCount=\"100\" get=\"get\"\r\n\t\t//\t|\t\tstructure=\"structure\"\r\n\t\t//\t|\t\tdojoType=\"dojox.grid._Grid\"></div>\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// classTag: String\r\n\t\t//\t\tCSS class applied to the grid's domNode\r\n\t\tclassTag: 'dojoxGrid',\r\n\r\n\t\t// settings\r\n\t\t// rowCount: Integer\r\n\t\t//\t\tNumber of rows to display.\r\n\t\trowCount: 5,\r\n\r\n\t\t// keepRows: Integer\r\n\t\t//\t\tNumber of rows to keep in the rendering cache.\r\n\t\tkeepRows: 75,\r\n\r\n\t\t// rowsPerPage: Integer\r\n\t\t//\t\tNumber of rows to render at a time.\r\n\t\trowsPerPage: 25,\r\n\r\n\t\t// autoWidth: Boolean\r\n\t\t//\t\tIf autoWidth is true, grid width is automatically set to fit the data.\r\n\t\tautoWidth: false,\r\n\t\t\r\n\t\t// initialWidth: String\r\n\t\t//\t\tA css string to use to set our initial width (only used if autoWidth\r\n\t\t//\t\tis true).  The first rendering of the grid will be this width, any\r\n\t\t//\t\tresizing of columns, etc will result in the grid switching to\r\n\t\t//\t\tautoWidth mode.  Note, this width will override any styling in a\r\n\t\t//\t\tstylesheet or directly on the node.\r\n\t\tinitialWidth: \"\",\r\n\r\n\t\t// autoHeight: Boolean|Integer\r\n\t\t//\t\tIf autoHeight is true, grid height is automatically set to fit the data.\r\n\t\t//\t\tIf it is an integer, the height will be automatically set to fit the data\r\n\t\t//\t\tif there are fewer than that many rows - and the height will be set to show\r\n\t\t//\t\tthat many rows if there are more\r\n\t\tautoHeight: '',\r\n\r\n\t\t// rowHeight: Integer\r\n\t\t//\t\tIf rowHeight is set to a positive number, it will define the height of the rows\r\n\t\t//\t\tin pixels. This can provide a significant performance advantage, since it\r\n\t\t//\t\teliminates the need to measure row sizes during rendering, which is one\r\n\t\t//\t\tthe primary bottlenecks in the DataGrid's performance.\r\n\t\trowHeight: 0,\r\n\t\t\r\n\t\t// autoRender: Boolean\r\n\t\t//\t\tIf autoRender is true, grid will render itself after initialization.\r\n\t\tautoRender: true,\r\n\r\n\t\t// defaultHeight: String\r\n\t\t//\t\tdefault height of the grid, measured in any valid css unit.\r\n\t\tdefaultHeight: '15em',\r\n\t\t\r\n\t\t// height: String\r\n\t\t//\t\texplicit height of the grid, measured in any valid css unit.  This will be populated (and overridden)\r\n\t\t//\t\tif the height: css attribute exists on the source node.\r\n\t\theight: '',\r\n\r\n\t\t// structure: dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]]\r\n\t\t//\t\tView layout definition.\r\n\t\tstructure: null,\r\n\r\n\t\t// elasticView: Integer\r\n\t\t//\tOverride defaults and make the indexed grid view elastic, thus filling available horizontal space.\r\n\t\telasticView: -1,\r\n\r\n\t\t// singleClickEdit: boolean\r\n\t\t//\t\tSingle-click starts editing. Default is double-click\r\n\t\tsingleClickEdit: false,\r\n\r\n\t\t// selectionMode: String\r\n\t\t//\t\tSet the selection mode of grid's Selection.  Value must be 'single', 'multiple',\r\n\t\t//\t\tor 'extended'.  Default is 'extended'.\r\n\t\tselectionMode: 'extended',\r\n\r\n\t\t// rowSelector: Boolean|String\r\n\t\t//\t\tIf set to true, will add a row selector view to this grid.  If set to a CSS width, will add\r\n\t\t//\t\ta row selector of that width to this grid.\r\n\t\trowSelector: '',\r\n\r\n\t\t// columnReordering: Boolean\r\n\t\t//\t\tIf set to true, will add drag and drop reordering to views with one row of columns.\r\n\t\tcolumnReordering: false,\r\n\r\n\t\t// headerMenu: dijit.Menu\r\n\t\t//\t\tIf set to a dijit.Menu, will use this as a context menu for the grid headers.\r\n\t\theaderMenu: null,\r\n\r\n\t\t// placeholderLabel: String\r\n\t\t//\t\tLabel of placeholders to search for in the header menu to replace with column toggling\r\n\t\t//\t\tmenu items.\r\n\t\tplaceholderLabel: \"GridColumns\",\r\n\t\t\r\n\t\t// selectable: Boolean\r\n\t\t//\t\tSet to true if you want to be able to select the text within the grid.\r\n\t\tselectable: false,\r\n\t\t\r\n\t\t// Used to store the last two clicks, to ensure double-clicking occurs based on the intended row\r\n\t\t_click: null,\r\n\t\t\r\n\t\t// loadingMessage: String\r\n\t\t//\t\tMessage that shows while the grid is loading\r\n\t\tloadingMessage: \"<span class='dojoxGridLoading'>${loadingState}</span>\",\r\n\r\n\t\t// errorMessage: String\r\n\t\t//\t\tMessage that shows when the grid encounters an error loading\r\n\t\terrorMessage: \"<span class='dojoxGridError'>${errorState}</span>\",\r\n\r\n\t\t// noDataMessage: String\r\n\t\t//\t\tMessage that shows if the grid has no data - wrap it in a\r\n\t\t//\t\tspan with class 'dojoxGridNoData' if you want it to be\r\n\t\t//\t\tstyled similar to the loading and error messages\r\n\t\tnoDataMessage: \"\",\r\n\t\t\r\n\t\t// escapeHTMLInData: Boolean\r\n\t\t//\t\tThis will escape HTML brackets from the data to prevent HTML from\r\n\t\t//\t\tuser-inputted data being rendered with may contain JavaScript and result in\r\n\t\t//\t\tXSS attacks. This is true by default, and it is recommended that it remain\r\n\t\t//\t\ttrue. Setting this to false will allow data to be displayed in the grid without\r\n\t\t//\t\tfiltering, and should be only used if it is known that the data won't contain\r\n\t\t//\t\tmalicious scripts. If HTML is needed in grid cells, it is recommended that\r\n\t\t//\t\tyou use the formatter function to generate the HTML (the output of\r\n\t\t//\t\tformatter functions is not filtered, even with escapeHTMLInData set to true).\r\n\t\tescapeHTMLInData: true,\r\n\t\t\r\n\t\t// formatterScope: Object\r\n\t\t//\t\tAn object to execute format functions within.  If not set, the\r\n\t\t//\t\tformat functions will execute within the scope of the cell that\r\n\t\t//\t\thas a format function.\r\n\t\tformatterScope: null,\r\n\t\t\r\n\t\t// editable: boolean\r\n\t\t//\t\tindicates if the grid contains editable cells, default is false\r\n\t\t//\t\tset to true if editable cell encountered during rendering\r\n\t\teditable: false,\r\n\r\n\t\t// summary: String\r\n\t\t//\t\tCustomizable summary descriptions which will be added to grid.domNode\r\n\t\tsummary: '',\r\n\t\t_setSummaryAttr: 'domNode',\r\n\t\t\r\n\t\t// sortInfo: [private] Number\r\n\t\tsortInfo: 0,\r\n\r\n\t\t// _placeholders: [private] Array\r\n\t\t_placeholders: null,\r\n\r\n\t\t// _layoutClass: Object\r\n\t\t//\tThe class to use for our layout - can be overridden by grid subclasses\r\n\t\t_layoutClass: _Layout,\r\n\r\n\t\t// initialization\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.domNode.getAttribute('tabIndex')){\r\n\t\t\t\tthis.domNode.tabIndex = \"0\";\r\n\t\t\t}\r\n\t\t\tthis.createScroller();\r\n\t\t\tthis.createLayout();\r\n\t\t\tthis.createViews();\r\n\t\t\tthis.createManagers();\r\n\r\n\t\t\tthis.createSelection();\r\n\r\n\t\t\tthis.connect(this.selection, \"onSelected\", \"onSelected\");\r\n\t\t\tthis.connect(this.selection, \"onDeselected\", \"onDeselected\");\r\n\t\t\tthis.connect(this.selection, \"onChanged\", \"onSelectionChanged\");\r\n\r\n\t\t\tmetrics.initOnFontResize();\r\n\t\t\tthis.connect(metrics, \"onFontResize\", \"textSizeChanged\");\r\n\t\t\tutil.funnelEvents(this.domNode, this, 'doKeyEvent', util.keyEvents);\r\n\t\t\tif (this.selectionMode != \"none\") {\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-multiselectable\", this.selectionMode == \"single\" ? \"false\" : \"true\");\r\n\t\t\t}\r\n\r\n\t\t\thtml.addClass(this.domNode, this.classTag);\r\n\t\t\tif(!this.isLeftToRight()){\r\n\t\t\t\thtml.addClass(this.domNode, this.classTag+\"Rtl\");\r\n\t\t\t}\r\n\t\t\tif(this.rowHeight > 0){\r\n\t\t\t\thtml.addClass(this.viewsNode, this.classTag + \"FixedRowHeight\");\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tvar messages = dojo.i18n.getLocalization(\"dijit\", \"loading\", this.lang);\r\n\t\t\tthis.loadingMessage = string.substitute(this.loadingMessage, messages);\r\n\t\t\tthis.errorMessage = string.substitute(this.errorMessage, messages);\r\n\t\t\tif(this.srcNodeRef && this.srcNodeRef.style.height){\r\n\t\t\t\tthis.height = this.srcNodeRef.style.height;\r\n\t\t\t}\r\n\t\t\t// Call this to update our autoheight to start out\r\n\t\t\tthis._setAutoHeightAttr(this.autoHeight, true);\r\n\t\t\tthis.lastScrollTop = this.scrollTop = 0;\r\n\t\t},\r\n\t\t\r\n\t\tpostCreate: function(){\r\n\t\t\tthis._placeholders = [];\r\n\t\t\tthis._setHeaderMenuAttr(this.headerMenu);\r\n\t\t\tthis._setStructureAttr(this.structure);\r\n\t\t\tthis._click = [];\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.domNode && this.autoWidth && this.initialWidth){\r\n\t\t\t\tthis.domNode.style.width = this.initialWidth;\r\n\t\t\t}\r\n\t\t\tif (this.domNode && !this.editable){\r\n\t\t\t\t// default value for aria-readonly is false, set to true if grid is not editable\r\n\t\t\t\thtml.attr(this.domNode,\"aria-readonly\", \"true\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tthis.domNode.onReveal = null;\r\n\t\t\tthis.domNode.onSizeChange = null;\r\n\r\n\t\t\t// Fixes IE domNode leak\r\n\t\t\tdelete this._click;\r\n\r\n\t\t\tif(this.scroller){\r\n\t\t\t\tthis.scroller.destroy();\r\n\t\t\t\tdelete this.scroller;\r\n\t\t\t}\r\n\t\t\tthis.edit.destroy();\r\n\t\t\tdelete this.edit;\r\n\t\t\tthis.views.destroyViews();\r\n\t\t\tif(this.focus){\r\n\t\t\t\tthis.focus.destroy();\r\n\t\t\t\tdelete this.focus;\r\n\t\t\t}\r\n\t\t\tif(this.headerMenu&&this._placeholders.length){\r\n\t\t\t\tarray.forEach(this._placeholders, function(p){ p.unReplace(true); });\r\n\t\t\t\tthis.headerMenu.unBindDomNode(this.viewsHeaderNode);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_setAutoHeightAttr: function(ah, skipRender){\r\n\t\t\t// Calculate our autoheight - turn it into a boolean or an integer\r\n\t\t\tif(typeof ah == \"string\"){\r\n\t\t\t\tif(!ah || ah == \"false\"){\r\n\t\t\t\t\tah = false;\r\n\t\t\t\t}else if (ah == \"true\"){\r\n\t\t\t\t\tah = true;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tah = window.parseInt(ah, 10);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(typeof ah == \"number\"){\r\n\t\t\t\tif(isNaN(ah)){\r\n\t\t\t\t\tah = false;\r\n\t\t\t\t}\r\n\t\t\t\t// Autoheight must be at least 1, if it's a number.  If it's\r\n\t\t\t\t// less than 0, we'll take that to mean \"all\" rows (same as\r\n\t\t\t\t// autoHeight=true - if it is equal to zero, we'll take that\r\n\t\t\t\t// to mean autoHeight=false\r\n\t\t\t\tif(ah < 0){\r\n\t\t\t\t\tah = true;\r\n\t\t\t\t}else if (ah === 0){\r\n\t\t\t\t\tah = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.autoHeight = ah;\r\n\t\t\tif(typeof ah == \"boolean\"){\r\n\t\t\t\tthis._autoHeight = ah;\r\n\t\t\t}else if(typeof ah == \"number\"){\r\n\t\t\t\tthis._autoHeight = (ah >= this.get('rowCount'));\r\n\t\t\t}else{\r\n\t\t\t\tthis._autoHeight = false;\r\n\t\t\t}\r\n\t\t\tif(this._started && !skipRender){\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getRowCountAttr: function(){\r\n\t\t\treturn this.updating && this.invalidated && this.invalidated.rowCount != undefined ?\r\n\t\t\t\tthis.invalidated.rowCount : this.rowCount;\r\n\t\t},\r\n\t\t\r\n\t\ttextSizeChanged: function(){\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\tsizeChange: function(){\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\t\tcreateManagers: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreate grid managers for various tasks including rows, focus, selection, editing\r\n\r\n\t\t\t// row manager\r\n\t\t\tthis.rows = new _RowManager(this);\r\n\t\t\t// focus manager\r\n\t\t\tthis.focus = new _FocusManager(this);\r\n\t\t\t// edit manager\r\n\t\t\tthis.edit = new _EditManager(this);\r\n\t\t},\r\n\r\n\t\tcreateSelection: function(){\r\n\t\t\t// summary:\tCreates a new Grid selection manager.\r\n\r\n\t\t\t// selection manager\r\n\t\t\tthis.selection = new Selection(this);\r\n\t\t},\r\n\r\n\t\tcreateScroller: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a new virtual scroller\r\n\t\t\tthis.scroller = new _Scroller();\r\n\t\t\tthis.scroller.grid = this;\r\n\t\t\tthis.scroller.renderRow = lang.hitch(this, \"renderRow\");\r\n\t\t\tthis.scroller.removeRow = lang.hitch(this, \"rowRemoved\");\r\n\t\t},\r\n\r\n\t\tcreateLayout: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a new Grid layout\r\n\t\t\tthis.layout = new this._layoutClass(this);\r\n\t\t\tthis.connect(this.layout, \"moveColumn\", \"onMoveColumn\");\r\n\t\t},\r\n\r\n\t\tonMoveColumn: function(){\r\n\t\t\tthis.update();\r\n\t\t},\r\n\t\t\r\n\t\tonResizeColumn: function(/*int*/ cellIdx){\r\n\t\t\t// Called when a column is resized.\r\n\t\t},\r\n\r\n\t\t// views\r\n\t\tcreateViews: function(){\r\n\t\t\tthis.views = new _ViewManager(this);\r\n\t\t\tthis.views.createView = lang.hitch(this, \"createView\");\r\n\t\t},\r\n\r\n\t\tcreateView: function(inClass, idx){\r\n\t\t\tvar c = lang.getObject(inClass);\r\n\t\t\tvar view = new c({ grid: this, index: idx });\r\n\t\t\tthis.viewsNode.appendChild(view.domNode);\r\n\t\t\tthis.viewsHeaderNode.appendChild(view.headerNode);\r\n\t\t\tthis.views.addView(view);\r\n\t\t\thtml.attr(this.domNode, \"align\", this.isLeftToRight() ? 'left' : 'right');\r\n\t\t\treturn view;\r\n\t\t},\r\n\r\n\t\tbuildViews: function(){\r\n\t\t\tfor(var i=0, vs; (vs=this.layout.structure[i]); i++){\r\n\t\t\t\tthis.createView(vs.type || dojox._scopeName + \".grid._View\", i).setStructure(vs);\r\n\t\t\t}\r\n\t\t\tthis.scroller.setContentNodes(this.views.getContentNodes());\r\n\t\t},\r\n\r\n\t\t_setStructureAttr: function(structure){\r\n\t\t\tvar s = structure;\r\n\t\t\tif(s && lang.isString(s)){\r\n\t\t\t\tdojo.deprecated(\"dojox.grid._Grid.set('structure', 'objVar')\", \"use dojox.grid._Grid.set('structure', objVar) instead\", \"2.0\");\r\n\t\t\t\ts=lang.getObject(s);\r\n\t\t\t}\r\n\t\t\tthis.structure = s;\r\n\t\t\tif(!s){\r\n\t\t\t\tif(this.layout.structure){\r\n\t\t\t\t\ts = this.layout.structure;\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.views.destroyViews();\r\n\t\t\tthis.focus.focusView = null;\r\n\t\t\tif(s !== this.layout.structure){\r\n\t\t\t\tthis.layout.setStructure(s);\r\n\t\t\t}\r\n\t\t\tthis._structureChanged();\r\n\t\t},\r\n\r\n\t\tsetStructure: function(/* dojox.grid.__ViewDef|dojox.grid.__ViewDef[]|dojox.grid.__CellDef[]|Array[dojox.grid.__CellDef[]] */ inStructure){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInstall a new structure and rebuild the grid.\r\n\t\t\tdojo.deprecated(\"dojox.grid._Grid.setStructure(obj)\", \"use dojox.grid._Grid.set('structure', obj) instead.\", \"2.0\");\r\n\t\t\tthis._setStructureAttr(inStructure);\r\n\t\t},\r\n\t\t\r\n\t\tgetColumnTogglingItems: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns an array of dijit.CheckedMenuItem widgets that can be\r\n\t\t\t//\t\tadded to a menu for toggling columns on and off.\r\n\t\t\tvar items, checkedItems = [];\r\n\t\t\titems = array.map(this.layout.cells, function(cell){\r\n\t\t\t\tif(!cell.menuItems){ cell.menuItems = []; }\r\n\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tvar item = new CheckedMenuItem({\r\n\t\t\t\t\tlabel: cell.name,\r\n\t\t\t\t\tchecked: !cell.hidden,\r\n\t\t\t\t\t_gridCell: cell,\r\n\t\t\t\t\tonChange: function(checked){\r\n\t\t\t\t\t\tif(self.layout.setColumnVisibility(this._gridCell.index, checked)){\r\n\t\t\t\t\t\t\tvar items = this._gridCell.menuItems;\r\n\t\t\t\t\t\t\tif(items.length > 1){\r\n\t\t\t\t\t\t\t\tarray.forEach(items, function(item){\r\n\t\t\t\t\t\t\t\t\tif(item !== this){\r\n\t\t\t\t\t\t\t\t\t\titem.setAttribute(\"checked\", checked);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tchecked = array.filter(self.layout.cells, function(c){\r\n\t\t\t\t\t\t\t\tif(c.menuItems.length > 1){\r\n\t\t\t\t\t\t\t\t\tarray.forEach(c.menuItems, \"item.set('disabled', false);\");\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tc.menuItems[0].set('disabled', false);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn !c.hidden;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(checked.length == 1){\r\n\t\t\t\t\t\t\t\tarray.forEach(checked[0].menuItems, \"item.set('disabled', true);\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tdestroy: function(){\r\n\t\t\t\t\t\tvar index = array.indexOf(this._gridCell.menuItems, this);\r\n\t\t\t\t\t\tthis._gridCell.menuItems.splice(index, 1);\r\n\t\t\t\t\t\tdelete this._gridCell;\r\n\t\t\t\t\t\tCheckedMenuItem.prototype.destroy.apply(this, arguments);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tcell.menuItems.push(item);\r\n\t\t\t\tif(!cell.hidden) {\r\n\t\t\t\t\tcheckedItems.push(item);\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t}, this); // dijit.CheckedMenuItem[]\r\n\t\t\tif(checkedItems.length == 1) {\r\n\t\t\t\tcheckedItems[0].set('disabled', true);\r\n\t\t\t}\r\n\t\t\treturn items;\r\n\t\t},\r\n\r\n\t\t_setHeaderMenuAttr: function(menu){\r\n\t\t\tif(this._placeholders && this._placeholders.length){\r\n\t\t\t\tarray.forEach(this._placeholders, function(p){\r\n\t\t\t\t\tp.unReplace(true);\r\n\t\t\t\t});\r\n\t\t\t\tthis._placeholders = [];\r\n\t\t\t}\r\n\t\t\tif(this.headerMenu){\r\n\t\t\t\tthis.headerMenu.unBindDomNode(this.viewsHeaderNode);\r\n\t\t\t}\r\n\t\t\tthis.headerMenu = menu;\r\n\t\t\tif(!menu){ return; }\r\n\r\n\t\t\tthis.headerMenu.bindDomNode(this.viewsHeaderNode);\r\n\t\t\tif(this.headerMenu.getPlaceholders){\r\n\t\t\t\tthis._placeholders = this.headerMenu.getPlaceholders(this.placeholderLabel);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetHeaderMenu: function(/* dijit.Menu */ menu){\r\n\t\t\tdojo.deprecated(\"dojox.grid._Grid.setHeaderMenu(obj)\", \"use dojox.grid._Grid.set('headerMenu', obj) instead.\", \"2.0\");\r\n\t\t\tthis._setHeaderMenuAttr(menu);\r\n\t\t},\r\n\t\t\r\n\t\tsetupHeaderMenu: function(){\r\n\t\t\tif(this._placeholders && this._placeholders.length){\r\n\t\t\t\tarray.forEach(this._placeholders, function(p){\r\n\t\t\t\t\tif(p._replaced){\r\n\t\t\t\t\t\tp.unReplace(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tp.replace(this.getColumnTogglingItems());\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_fetch: function(start){\r\n\t\t\tthis.setScrollTop(0);\r\n\t\t},\r\n\r\n\t\tgetItem: function(inRowIndex){\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t\r\n\t\tshowMessage: function(message){\r\n\t\t\tif(message){\r\n\t\t\t\tthis.messagesNode.innerHTML = message;\r\n\t\t\t\tthis.messagesNode.style.display = \"\";\r\n\t\t\t}else{\r\n\t\t\t\tthis.messagesNode.innerHTML = \"\";\r\n\t\t\t\tthis.messagesNode.style.display = \"none\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_structureChanged: function() {\r\n\t\t\tthis.buildViews();\r\n\t\t\tif(this.autoRender && this._started){\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\thasLayout: function() {\r\n\t\t\treturn this.layout.cells.length;\r\n\t\t},\r\n\r\n\t\t// sizing\r\n\t\tresize: function(changeSize, resultSize){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the grid's rendering dimensions and resize it\r\n\t\t\t\r\n\t\t\t// Calling sizeChange calls update() which calls _resize...so let's\r\n\t\t\t// save our input values, if any, and use them there when it gets\r\n\t\t\t// called.  This saves us an extra call to _resize(), which can\r\n\t\t\t// get kind of heavy.\r\n\t\t\t\r\n\t\t\tthis._pendingChangeSize = changeSize;\r\n\t\t\tthis._pendingResultSize = resultSize;\r\n\t\t\tthis.sizeChange();\r\n\t\t},\r\n\r\n\t\t_getPadBorder: function() {\r\n\t\t\tthis._padBorder = this._padBorder || html._getPadBorderExtents(this.domNode);\r\n\t\t\treturn this._padBorder;\r\n\t\t},\r\n\r\n\t\t_getHeaderHeight: function(){\r\n\t\t\tvar vns = this.viewsHeaderNode.style, t = vns.display == \"none\" ? 0 : this.views.measureHeader();\r\n\t\t\tvns.height = t + 'px';\r\n\t\t\t// header heights are reset during measuring so must be normalized after measuring.\r\n\t\t\tthis.views.normalizeHeaderNodeHeight();\r\n\t\t\treturn t;\r\n\t\t},\r\n\t\t\r\n\t\t_resize: function(changeSize, resultSize){\r\n\t\t\t// Restore our pending values, if any\r\n\t\t\tchangeSize = changeSize || this._pendingChangeSize;\r\n\t\t\tresultSize = resultSize || this._pendingResultSize;\r\n\t\t\tdelete this._pendingChangeSize;\r\n\t\t\tdelete this._pendingResultSize;\r\n\t\t\t// if we have set up everything except the DOM, we cannot resize\r\n\t\t\tif(!this.domNode){ return; }\r\n\t\t\tvar pn = this.domNode.parentNode;\r\n\t\t\tif(!pn || pn.nodeType != 1 || !this.hasLayout() || pn.style.visibility == \"hidden\" || pn.style.display == \"none\"){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// useful measurement\r\n\t\t\tvar padBorder = this._getPadBorder();\r\n\t\t\tvar hh = undefined;\r\n\t\t\tvar h;\r\n\t\t\t// grid height\r\n\t\t\tif(this._autoHeight){\r\n\t\t\t\tthis.domNode.style.height = 'auto';\r\n\t\t\t}else if(typeof this.autoHeight == \"number\"){\r\n\t\t\t\th = hh = this._getHeaderHeight();\r\n\t\t\t\th += (this.scroller.averageRowHeight * this.autoHeight);\r\n\t\t\t\tthis.domNode.style.height = h + \"px\";\r\n\t\t\t}else if(this.domNode.clientHeight <= padBorder.h){\r\n\t\t\t\tif(pn == document.body){\r\n\t\t\t\t\tthis.domNode.style.height = this.defaultHeight;\r\n\t\t\t\t}else if(this.height){\r\n\t\t\t\t\tthis.domNode.style.height = this.height;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.fitTo = \"parent\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// if we are given dimensions, size the grid's domNode to those dimensions\r\n\t\t\tif(resultSize){\r\n\t\t\t\tchangeSize = resultSize;\r\n\t\t\t}\r\n\t\t\tif(!this._autoHeight && changeSize){\r\n\t\t\t\thtml.marginBox(this.domNode, changeSize);\r\n\t\t\t\tthis.height = this.domNode.style.height;\r\n\t\t\t\tdelete this.fitTo;\r\n\t\t\t}else if(this.fitTo == \"parent\"){\r\n\t\t\t\th = this._parentContentBoxHeight = (this._parentContentBoxHeight > 0 ? this._parentContentBoxHeight : html._getContentBox(pn).h);\r\n\t\t\t\tthis.domNode.style.height = Math.max(0, h) + \"px\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar hasFlex = array.some(this.views.views, function(v){ return v.flexCells; });\r\n\r\n\t\t\tif(!this._autoHeight && (h || html._getContentBox(this.domNode).h) === 0){\r\n\t\t\t\t// We need to hide the header, since the Grid is essentially hidden.\r\n\t\t\t\tthis.viewsHeaderNode.style.display = \"none\";\r\n\t\t\t}else{\r\n\t\t\t\t// Otherwise, show the header and give it an appropriate height.\r\n\t\t\t\tthis.viewsHeaderNode.style.display = \"block\";\r\n\t\t\t\tif(!hasFlex && hh === undefined){\r\n\t\t\t\t\thh = this._getHeaderHeight();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(hasFlex){\r\n\t\t\t\thh = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// NOTE: it is essential that width be applied before height\r\n\t\t\t// Header height can only be calculated properly after view widths have been set.\r\n\t\t\t// This is because flex column width is naturally 0 in Firefox.\r\n\t\t\t// Therefore prior to width sizing flex columns with spaces are maximally wrapped\r\n\t\t\t// and calculated to be too tall.\r\n\t\t\tthis.adaptWidth();\r\n\t\t\tthis.adaptHeight(hh);\r\n\r\n\t\t\tthis.postresize();\r\n\t\t},\r\n\r\n\t\tadaptWidth: function() {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsets width and position for views and update grid width if necessary\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar doAutoWidth = (!this.initialWidth && this.autoWidth);\r\n\t\t\tvar w = doAutoWidth ? 0 : this.domNode.clientWidth || (this.domNode.offsetWidth - this._getPadBorder().w),\r\n\t\t\t\tvw = this.views.arrange(1, w);\r\n\t\t\tthis.views.onEach(\"adaptWidth\");\r\n\t\t\tif(doAutoWidth){\r\n\t\t\t\tthis.domNode.style.width = vw + \"px\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tadaptHeight: function(inHeaderHeight){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tmeasures and normalizes header height, then sets view heights, and then updates scroller\r\n\t\t\t//\t\tcontent extent\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar t = inHeaderHeight === undefined ? this._getHeaderHeight() : inHeaderHeight;\r\n\t\t\tvar h = (this._autoHeight ? -1 : Math.max(this.domNode.clientHeight - t, 0) || 0);\r\n\t\t\tthis.views.onEach('setSize', [0, h]);\r\n\t\t\tthis.views.onEach('adaptHeight');\r\n\t\t\tif(!this._autoHeight){\r\n\t\t\t\tvar numScroll = 0, numNoScroll = 0;\r\n\t\t\t\tvar noScrolls = array.filter(this.views.views, function(v){\r\n\t\t\t\t\tvar has = v.hasHScrollbar();\r\n\t\t\t\t\tif(has){ numScroll++; }else{ numNoScroll++; }\r\n\t\t\t\t\treturn (!has);\r\n\t\t\t\t});\r\n\t\t\t\tif(numScroll > 0 && numNoScroll > 0){\r\n\t\t\t\t\tarray.forEach(noScrolls, function(v){\r\n\t\t\t\t\t\tv.adaptHeight(true);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.autoHeight === true || h != -1 || (typeof this.autoHeight == \"number\" && this.autoHeight >= this.get('rowCount'))){\r\n\t\t\t\tthis.scroller.windowHeight = h;\r\n\t\t\t}else{\r\n\t\t\t\tthis.scroller.windowHeight = Math.max(this.domNode.clientHeight - t, 0);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// startup\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){return;}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.autoRender){\r\n\t\t\t\tthis.render();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// render\r\n\t\trender: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\tRender the grid, headers, and views. Edit and scrolling states are reset. To retain edit and\r\n\t\t\t//\tscrolling states, see Update.\r\n\r\n\t\t\tif(!this.domNode){return;}\r\n\t\t\tif(!this._started){return;}\r\n\r\n\t\t\tif(!this.hasLayout()) {\r\n\t\t\t\tthis.scroller.init(0, this.keepRows, this.rowsPerPage);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//\r\n\t\t\tthis.update = this.defaultUpdate;\r\n\t\t\tthis._render();\r\n\t\t},\r\n\r\n\t\t_render: function(){\r\n\t\t\tthis.scroller.init(this.get('rowCount'), this.keepRows, this.rowsPerPage);\r\n\t\t\tthis.prerender();\r\n\t\t\tthis.setScrollTop(0);\r\n\t\t\tthis.postrender();\r\n\t\t},\r\n\r\n\t\tprerender: function(){\r\n\t\t\t// if autoHeight, make sure scroller knows not to virtualize; everything must be rendered.\r\n\t\t\tthis.keepRows = this._autoHeight ? 0 : this.keepRows;\r\n\t\t\tthis.scroller.setKeepInfo(this.keepRows);\r\n\t\t\tthis.views.render();\r\n\t\t\tthis._resize();\r\n\t\t},\r\n\r\n\t\tpostrender: function(){\r\n\t\t\tthis.postresize();\r\n\t\t\tthis.focus.initFocusView();\r\n\t\t\t// make rows unselectable\r\n\t\t\thtml.setSelectable(this.domNode, this.selectable);\r\n\t\t},\r\n\r\n\t\tpostresize: function(){\r\n\t\t\t// views are position absolute, so they do not inflate the parent\r\n\t\t\tif(this._autoHeight){\r\n\t\t\t\tvar size = Math.max(this.views.measureContent()) + 'px';\r\n\t\t\t\t\r\n\t\t\t\tthis.viewsNode.style.height = size;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trenderRow: function(inRowIndex, inNodes){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tused internally to render rows\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.views.renderRow(inRowIndex, inNodes, this._skipRowRenormalize);\r\n\t\t},\r\n\r\n\t\trowRemoved: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tused internally to remove rows\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.views.rowRemoved(inRowIndex);\r\n\t\t},\r\n\r\n\t\tinvalidated: null,\r\n\r\n\t\tupdating: false,\r\n\r\n\t\tbeginUpdate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUse to make multiple changes to rows while queueing row updating.\r\n\t\t\t// NOTE: not currently supporting nested begin/endUpdate calls\r\n\t\t\tthis.invalidated = [];\r\n\t\t\tthis.updating = true;\r\n\t\t},\r\n\r\n\t\tendUpdate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUse after calling beginUpdate to render any changes made to rows.\r\n\t\t\tthis.updating = false;\r\n\t\t\tvar i = this.invalidated, r;\r\n\t\t\tif(i.all){\r\n\t\t\t\tthis.update();\r\n\t\t\t}else if(i.rowCount != undefined){\r\n\t\t\t\tthis.updateRowCount(i.rowCount);\r\n\t\t\t}else{\r\n\t\t\t\tfor(r in i){\r\n\t\t\t\t\tthis.updateRow(Number(r));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.invalidated = [];\r\n\t\t},\r\n\r\n\t\t// update\r\n\t\tdefaultUpdate: function(){\r\n\t\t\t// note: initial update calls render and subsequently this function.\r\n\t\t\tif(!this.domNode){return;}\r\n\t\t\tif(this.updating){\r\n\t\t\t\tthis.invalidated.all = true;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//this.edit.saveState(inRowIndex);\r\n\t\t\tthis.lastScrollTop = this.scrollTop;\r\n\t\t\tthis.prerender();\r\n\t\t\tthis.scroller.invalidateNodes();\r\n\t\t\tthis.setScrollTop(this.lastScrollTop);\r\n\t\t\tthis.postrender();\r\n\t\t\t//this.edit.restoreState(inRowIndex);\r\n\t\t},\r\n\r\n\t\tupdate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the grid, retaining edit and scrolling states.\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\tupdateRow: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender a single row.\r\n\t\t\t// inRowIndex: Integer\r\n\t\t\t//\t\tIndex of the row to render\r\n\t\t\tinRowIndex = Number(inRowIndex);\r\n\t\t\tif(this.updating){\r\n\t\t\t\tthis.invalidated[inRowIndex]=true;\r\n\t\t\t}else{\r\n\t\t\t\tthis.views.updateRow(inRowIndex);\r\n\t\t\t\tthis.scroller.rowHeightChanged(inRowIndex);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateRows: function(startIndex, howMany){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender consecutive rows at once.\r\n\t\t\t// startIndex: Integer\r\n\t\t\t//\t\tIndex of the starting row to render\r\n\t\t\t// howMany: Integer\r\n\t\t\t//\t\tHow many rows to update.\r\n\t\t\tstartIndex = Number(startIndex);\r\n\t\t\thowMany = Number(howMany);\r\n\t\t\tvar i;\r\n\t\t\tif(this.updating){\r\n\t\t\t\tfor(i=0; i<howMany; i++){\r\n\t\t\t\t\tthis.invalidated[i+startIndex]=true;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(i=0; i<howMany; i++){\r\n\t\t\t\t\tthis.views.updateRow(i+startIndex, this._skipRowRenormalize);\r\n\t\t\t\t}\r\n\t\t\t\tthis.scroller.rowHeightChanged(startIndex);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateRowCount: function(inRowCount){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange the number of rows.\r\n\t\t\t// inRowCount: int\r\n\t\t\t//\t\tNumber of rows in the grid.\r\n\t\t\tif(this.updating){\r\n\t\t\t\tthis.invalidated.rowCount = inRowCount;\r\n\t\t\t}else{\r\n\t\t\t\tthis.rowCount = inRowCount;\r\n\t\t\t\tthis._setAutoHeightAttr(this.autoHeight, true);\r\n\t\t\t\tif(this.layout.cells.length){\r\n\t\t\t\t\tthis.scroller.updateRowCount(inRowCount);\r\n\t\t\t\t}\r\n\t\t\t\tthis._resize();\r\n\t\t\t\tif(this.layout.cells.length){\r\n\t\t\t\t\tthis.setScrollTop(this.scrollTop);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateRowStyles: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the styles for a row after it's state has changed.\r\n\t\t\tthis.views.updateRowStyles(inRowIndex);\r\n\t\t},\r\n\t\tgetRowNode: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfind the rowNode that is not a rowSelector\r\n\t\t\tif (this.focus.focusView && !(this.focus.focusView instanceof _RowSelector)){\r\n\t\t\t\t\treturn this.focus.focusView.rowNodes[inRowIndex];\r\n\t\t\t}else{ // search through views\r\n\t\t\t\tfor (var i = 0, cView; (cView = this.views.views[i]); i++) {\r\n\t\t\t\t\tif (!(cView instanceof _RowSelector)) {\r\n\t\t\t\t\t\treturn cView.rowNodes[inRowIndex];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\trowHeightChanged: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate grid when the height of a row has changed. Row height is handled automatically as rows\r\n\t\t\t//\t\tare rendered. Use this function only to update a row's height outside the normal rendering process.\r\n\t\t\t// inRowIndex: Integer\r\n\t\t\t//\t\tindex of the row that has changed height\r\n\r\n\t\t\tthis.views.renormalizeRow(inRowIndex);\r\n\t\t\tthis.scroller.rowHeightChanged(inRowIndex);\r\n\t\t},\r\n\r\n\t\t// fastScroll: Boolean\r\n\t\t//\t\tflag modifies vertical scrolling behavior. Defaults to true but set to false for slower\r\n\t\t//\t\tscroll performance but more immediate scrolling feedback\r\n\t\tfastScroll: true,\r\n\r\n\t\tdelayScroll: false,\r\n\r\n\t\t// scrollRedrawThreshold: int\r\n\t\t//\tpixel distance a user must scroll vertically to trigger grid scrolling.\r\n\t\tscrollRedrawThreshold: (has('ie') ? 100 : 50),\r\n\r\n\t\t// scroll methods\r\n\t\tscrollTo: function(inTop){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tVertically scroll the grid to a given pixel position\r\n\t\t\t// inTop: Integer\r\n\t\t\t//\t\tvertical position of the grid in pixels\r\n\t\t\tif(!this.fastScroll){\r\n\t\t\t\tthis.setScrollTop(inTop);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar delta = Math.abs(this.lastScrollTop - inTop);\r\n\t\t\tthis.lastScrollTop = inTop;\r\n\t\t\tif(delta > this.scrollRedrawThreshold || this.delayScroll){\r\n\t\t\t\tthis.delayScroll = true;\r\n\t\t\t\tthis.scrollTop = inTop;\r\n\t\t\t\tthis.views.setScrollTop(inTop);\r\n\t\t\t\tif(this._pendingScroll){\r\n\t\t\t\t\twindow.clearTimeout(this._pendingScroll);\r\n\t\t\t\t}\r\n\t\t\t\tvar _this = this;\r\n\t\t\t\tthis._pendingScroll = window.setTimeout(function(){\r\n\t\t\t\t\tdelete _this._pendingScroll;\r\n\t\t\t\t\t_this.finishScrollJob();\r\n\t\t\t\t}, 200);\r\n\t\t\t}else{\r\n\t\t\t\tthis.setScrollTop(inTop);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfinishScrollJob: function(){\r\n\t\t\tthis.delayScroll = false;\r\n\t\t\tthis.setScrollTop(this.scrollTop);\r\n\t\t},\r\n\r\n\t\tsetScrollTop: function(inTop){\r\n\t\t\tthis.scroller.scroll(this.views.setScrollTop(inTop));\r\n\t\t},\r\n\r\n\t\tscrollToRow: function(inRowIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tScroll the grid to a specific row.\r\n\t\t\t// inRowIndex: Integer\r\n\t\t\t//\t\tgrid row index\r\n\t\t\tthis.setScrollTop(this.scroller.findScrollTop(inRowIndex) + 1);\r\n\t\t},\r\n\r\n\t\tstyleRowNode: function(inRowIndex, inRowNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tstyling (used internally to style individual parts of a row)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(inRowNode){\r\n\t\t\t\tthis.rows.styleRowNode(inRowIndex, inRowNode);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t// called when the mouse leaves the grid so we can deselect all hover rows\r\n\t\t_mouseOut: function(e){\r\n\t\t\tthis.rows.setOverRow(-2);\r\n\t\t},\r\n\t\r\n\t\t// cells\r\n\t\tgetCell: function(inIndex){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRetrieves the cell object for a given grid column.\r\n\t\t\t// inIndex: Integer\r\n\t\t\t//\t\tGrid column index of cell to retrieve\r\n\t\t\t// returns:\r\n\t\t\t//\t\ta grid cell\r\n\t\t\treturn this.layout.cells[inIndex];\r\n\t\t},\r\n\r\n\t\tsetCellWidth: function(inIndex, inUnitWidth){\r\n\t\t\tthis.getCell(inIndex).unitWidth = inUnitWidth;\r\n\t\t},\r\n\r\n\t\tgetCellName: function(inCell){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the cell name of a passed cell\r\n\t\t\treturn \"Cell \" + inCell.index; // String\r\n\t\t},\r\n\r\n\t\t// sorting\r\n\t\tcanSort: function(inSortInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDetermines if the grid can be sorted\r\n\t\t\t// inSortInfo: Integer\r\n\t\t\t//\t\tSort information, 1-based index of column on which to sort, positive for an ascending sort\r\n\t\t\t//\t\tand negative for a descending sort\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tTrue if grid can be sorted on the given column in the given direction\r\n\t\t},\r\n\r\n\t\tsort: function(){\r\n\t\t},\r\n\r\n\t\tgetSortAsc: function(inSortInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if grid is sorted in an ascending direction.\r\n\t\t\tinSortInfo = inSortInfo == undefined ? this.sortInfo : inSortInfo;\r\n\t\t\treturn Boolean(inSortInfo > 0); // Boolean\r\n\t\t},\r\n\r\n\t\tgetSortIndex: function(inSortInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the index of the column on which the grid is sorted\r\n\t\t\tinSortInfo = inSortInfo == undefined ? this.sortInfo : inSortInfo;\r\n\t\t\treturn Math.abs(inSortInfo) - 1; // Integer\r\n\t\t},\r\n\r\n\t\tsetSortIndex: function(inIndex, inAsc){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSort the grid on a column in a specified direction\r\n\t\t\t// inIndex: Integer\r\n\t\t\t//\t\tColumn index on which to sort.\r\n\t\t\t// inAsc: Boolean\r\n\t\t\t//\t\tIf true, sort the grid in ascending order, otherwise in descending order\r\n\t\t\tvar si = inIndex +1;\r\n\t\t\tif(inAsc != undefined){\r\n\t\t\t\tsi *= (inAsc ? 1 : -1);\r\n\t\t\t} else if(this.getSortIndex() == inIndex){\r\n\t\t\t\tsi = -this.sortInfo;\r\n\t\t\t}\r\n\t\t\tthis.setSortInfo(si);\r\n\t\t},\r\n\r\n\t\tsetSortInfo: function(inSortInfo){\r\n\t\t\tif(this.canSort(inSortInfo)){\r\n\t\t\t\tthis.sortInfo = inSortInfo;\r\n\t\t\t\tthis.sort();\r\n\t\t\t\tthis.update();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// DOM event handler\r\n\t\tdoKeyEvent: function(e){\r\n\t\t\te.dispatch = 'do' + e.type;\r\n\t\t\tthis.onKeyEvent(e);\r\n\t\t},\r\n\r\n\t\t// event dispatch\r\n\t\t//: protected\r\n\t\t_dispatch: function(m, e){\r\n\t\t\tif(m in this){\r\n\t\t\t\treturn this[m](e);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tdispatchKeyEvent: function(e){\r\n\t\t\tthis._dispatch(e.dispatch, e);\r\n\t\t},\r\n\r\n\t\tdispatchContentEvent: function(e){\r\n\t\t\tthis.edit.dispatchEvent(e) || e.sourceView.dispatchContentEvent(e) || this._dispatch(e.dispatch, e);\r\n\t\t},\r\n\r\n\t\tdispatchHeaderEvent: function(e){\r\n\t\t\te.sourceView.dispatchHeaderEvent(e) || this._dispatch('doheader' + e.type, e);\r\n\t\t},\r\n\r\n\t\tdokeydown: function(e){\r\n\t\t\tthis.onKeyDown(e);\r\n\t\t},\r\n\r\n\t\tdoclick: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onCellClick(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onRowClick(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdodblclick: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onCellDblClick(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onRowDblClick(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdocontextmenu: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onCellContextMenu(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onRowContextMenu(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdoheaderclick: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onHeaderCellClick(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onHeaderClick(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdoheaderdblclick: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onHeaderCellDblClick(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onHeaderDblClick(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdoheadercontextmenu: function(e){\r\n\t\t\tif(e.cellNode){\r\n\t\t\t\tthis.onHeaderCellContextMenu(e);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onHeaderContextMenu(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// override to modify editing process\r\n\t\tdoStartEdit: function(inCell, inRowIndex){\r\n\t\t\tthis.onStartEdit(inCell, inRowIndex);\r\n\t\t},\r\n\r\n\t\tdoApplyCellEdit: function(inValue, inRowIndex, inFieldIndex){\r\n\t\t\tthis.onApplyCellEdit(inValue, inRowIndex, inFieldIndex);\r\n\t\t},\r\n\r\n\t\tdoCancelEdit: function(inRowIndex){\r\n\t\t\tthis.onCancelEdit(inRowIndex);\r\n\t\t},\r\n\r\n\t\tdoApplyEdit: function(inRowIndex){\r\n\t\t\tthis.onApplyEdit(inRowIndex);\r\n\t\t},\r\n\r\n\t\t// row editing\r\n\t\taddRow: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a row to the grid.\r\n\t\t\tthis.updateRowCount(this.get('rowCount')+1);\r\n\t\t},\r\n\r\n\t\tremoveSelectedRows: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove the selected rows from the grid.\r\n\t\t\tif(this.allItemsSelected){\r\n\t\t\t\tthis.updateRowCount(0);\r\n\t\t\t}else{\r\n\t\t\t\tthis.updateRowCount(Math.max(0, this.get('rowCount') - this.selection.getSelected().length));\r\n\t\t\t}\r\n\t\t\tthis.selection.clear();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t_Grid.markupFactory = function(props, node, ctor, cellFunc){\r\n\t\tvar widthFromAttr = function(n){\r\n\t\t\tvar w = html.attr(n, \"width\")||\"auto\";\r\n\t\t\tif((w != \"auto\")&&(w.slice(-2) != \"em\")&&(w.slice(-1) != \"%\")){\r\n\t\t\t\tw = parseInt(w, 10)+\"px\";\r\n\t\t\t}\r\n\t\t\treturn w;\r\n\t\t};\r\n\t\t// if(!props.store){ console.debug(\"no store!\"); }\r\n\t\t// if a structure isn't referenced, do we have enough\r\n\t\t// data to try to build one automatically?\r\n\t\tif(\t!props.structure &&\r\n\t\t\tnode.nodeName.toLowerCase() == \"table\"){\r\n\r\n\t\t\t// try to discover a structure\r\n\t\t\tprops.structure = query(\"> colgroup\", node).map(function(cg){\r\n\t\t\t\tvar sv = html.attr(cg, \"span\");\r\n\t\t\t\tvar v = {\r\n\t\t\t\t\tnoscroll: (html.attr(cg, \"noscroll\") == \"true\") ? true : false,\r\n\t\t\t\t\t__span: (!!sv ? parseInt(sv, 10) : 1),\r\n\t\t\t\t\tcells: []\r\n\t\t\t\t};\r\n\t\t\t\tif(html.hasAttr(cg, \"width\")){\r\n\t\t\t\t\tv.width = widthFromAttr(cg);\r\n\t\t\t\t}\r\n\t\t\t\treturn v; // for vendetta\r\n\t\t\t});\r\n\t\t\tif(!props.structure.length){\r\n\t\t\t\tprops.structure.push({\r\n\t\t\t\t\t__span: Infinity,\r\n\t\t\t\t\tcells: [] // catch-all view\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// check to see if we're gonna have more than one view\r\n\r\n\t\t\t// for each tr in our th, create a row of cells\r\n\t\t\tquery(\"thead > tr\", node).forEach(function(tr, tr_idx){\r\n\t\t\t\tvar cellCount = 0;\r\n\t\t\t\tvar viewIdx = 0;\r\n\t\t\t\tvar lastViewIdx;\r\n\t\t\t\tvar cView = null;\r\n\t\t\t\tquery(\"> th\", tr).map(function(th){\r\n\t\t\t\t\t// what view will this cell go into?\r\n\r\n\t\t\t\t\t// NOTE:\r\n\t\t\t\t\t//\t\tto prevent extraneous iteration, we start counters over\r\n\t\t\t\t\t//\t\tfor each row, incrementing over the surface area of the\r\n\t\t\t\t\t//\t\tstructure that colgroup processing generates and\r\n\t\t\t\t\t//\t\tcreating cell objects for each <th> to place into those\r\n\t\t\t\t\t//\t\tcell groups.  There's a lot of state-keepking logic\r\n\t\t\t\t\t//\t\there, but it is what it has to be.\r\n\t\t\t\t\tif(!cView){ // current view book keeping\r\n\t\t\t\t\t\tlastViewIdx = 0;\r\n\t\t\t\t\t\tcView = props.structure[0];\r\n\t\t\t\t\t}else if(cellCount >= (lastViewIdx+cView.__span)){\r\n\t\t\t\t\t\tviewIdx++;\r\n\t\t\t\t\t\t// move to allocating things into the next view\r\n\t\t\t\t\t\tlastViewIdx += cView.__span;\r\n\t\t\t\t\t\tvar lastView = cView;\r\n\t\t\t\t\t\tcView = props.structure[viewIdx];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// actually define the cell from what markup hands us\r\n\t\t\t\t\tvar cell = {\r\n\t\t\t\t\t\tname: lang.trim(html.attr(th, \"name\")||th.innerHTML),\r\n\t\t\t\t\t\tcolSpan: parseInt(html.attr(th, \"colspan\")||1, 10),\r\n\t\t\t\t\t\ttype: lang.trim(html.attr(th, \"cellType\")||\"\"),\r\n\t\t\t\t\t\tid: lang.trim(html.attr(th,\"id\")||\"\")\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcellCount += cell.colSpan;\r\n\t\t\t\t\tvar rowSpan = html.attr(th, \"rowspan\");\r\n\t\t\t\t\tif(rowSpan){\r\n\t\t\t\t\t\tcell.rowSpan = rowSpan;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(html.hasAttr(th, \"width\")){\r\n\t\t\t\t\t\tcell.width = widthFromAttr(th);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(html.hasAttr(th, \"relWidth\")){\r\n\t\t\t\t\t\tcell.relWidth = window.parseInt(html.attr(th, \"relWidth\"), 10);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(html.hasAttr(th, \"hidden\")){\r\n\t\t\t\t\t\tcell.hidden = (html.attr(th, \"hidden\") == \"true\" || html.attr(th, \"hidden\") === true/*always boolean true in Chrome*/);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(cellFunc){\r\n\t\t\t\t\t\tcellFunc(th, cell);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcell.type = cell.type ? lang.getObject(cell.type) : dojox.grid.cells.Cell;\r\n\r\n\t\t\t\t\tif(cell.type && cell.type.markupFactory){\r\n\t\t\t\t\t\tcell.type.markupFactory(th, cell);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(!cView.cells[tr_idx]){\r\n\t\t\t\t\t\tcView.cells[tr_idx] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcView.cells[tr_idx].push(cell);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn new ctor(props, node);\r\n\t};\r\n\r\n\treturn _Grid;\r\n\r\n});\r\n"]}