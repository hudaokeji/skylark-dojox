{"version":3,"sources":["mvc/StoreRefController.js"],"names":["define","declare","lang","when","getStateful","ModelRefController","store","getStatefulOptions","_refSourceModelProp","queryStore","query","options","this","_queryObserveHandle","cancel","_self","queryResult","result","results","_beingDestroyed","set","s","then","delegate","isNaN","hasOwnProperty","isFunction","getStore","id","get","putStore","object","put","addStore","add","removeStore","remove"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,YACA,gBACA,wBACE,SAASC,EAASC,EAAMC,EAAMC,EAAaC,GAC7C,OAAOJ,EAAQ,+BAAgCI,GA2C9CC,MAAO,KAIPC,mBAAoB,KAIpBC,oBAAqB,QAErBC,WAAY,SAAoBC,EAA8CC,GAU7E,IAAKC,KAAKN,WAAaI,MAAvB,CACGE,KAAKC,qBAAsBD,KAAKC,oBAAoBC,SAEvD,IAAIC,EAAQH,KACXI,EAAcJ,KAAKN,MAAMI,MAAMA,EAAOC,GACtCM,EAASd,EAAKa,EAAa,SAASE,GACpC,IAAGH,EAAMI,gBAGT,OAFAD,EAAUd,EAAYc,EAASH,EAAMR,oBACrCQ,EAAMK,IAAIL,EAAMP,oBAAqBU,GAC9BA,IAMR,IAAI,IAAIG,KAJLJ,EAAOK,OACTL,EAASf,EAAKqB,SAASN,IAGXD,EACTQ,MAAMH,IAAML,EAAYS,eAAeJ,IAAMnB,EAAKwB,WAAWV,EAAYK,MAC3EJ,EAAOI,GAAKL,EAAYK,IAG1B,OAAOJ,IAGRU,SAAU,SAAoBC,EAAejB,GAU5C,IAAKC,KAAKN,WAAauB,IAAvB,CACGjB,KAAKC,qBAAsBD,KAAKC,oBAAoBC,SACvD,IAAIC,EAAQH,KAOZ,OANAK,OAASd,EAAKS,KAAKN,MAAMuB,IAAID,EAAIjB,GAAU,SAASM,GACnD,IAAGF,EAAMI,gBAGT,OAFAF,EAASb,EAAYa,EAAQF,EAAMR,oBACnCQ,EAAMK,IAAIL,EAAMP,oBAAqBS,GAC9BA,IAEDA,SAGRa,SAAU,SAAoBC,EAAgDpB,GAS7E,IAAKC,KAAKN,WAAa0B,IACvB,OAAOpB,KAAKN,MAAM0B,IAAID,EAAQpB,IAG/BsB,SAAU,SAASF,EAAQpB,GAS1B,IAAKC,KAAKN,WAAa4B,IACvB,OAAOtB,KAAKN,MAAM4B,IAAIH,EAAQpB,IAG/BwB,YAAa,SAAoBP,EAAejB,GAU/C,IAAKC,KAAKN,WAAa8B,OACvB,OAAOxB,KAAKN,MAAM8B,OAAOR,EAAIjB","file":"../../mvc/StoreRefController.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/when\",\r\n\t\"./getStateful\",\r\n\t\"./ModelRefController\"\r\n], function(declare, lang, when, getStateful, ModelRefController){\r\n\treturn declare(\"dojox.mvc.StoreRefController\", ModelRefController, {\r\n\t\t// summary:\r\n\t\t//\t\tA child class of dojox.mvc.ModelRefController, which keeps a reference to Dojo Object Store (in store property).\r\n\t\t// description:\r\n\t\t//\t\tHas several methods to work with the store:\r\n\t\t//\r\n\t\t//\t\t- queryStore(): Runs query() against the store, and creates a data model from retrieved data\r\n\t\t//\t\t- getStore(): Runs get() against the store, and creates a data model from retrieved data\r\n\t\t//\t\t- putStore(): Runs put() against the store\r\n\t\t//\t\t- addStore(): Runs add() against the store\r\n\t\t//\t\t- removeStore(): Runs remove() against the store\r\n\t\t//\r\n\t\t//\t\tdojo.Stateful get()/set()/watch() interfaces in dojox.mvc.StoreRefController will work with the data model from queryStore() or getStore().\r\n\t\t//\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe text box refers to \"value\" property in the controller (with \"ctrl\" ID).\r\n\t\t//\t\tThe controller provides the \"value\" property, from the data coming from data store (\"store\" property in the controller).\r\n\t\t//\t\tTwo seconds later, the text box changes from \"Foo\" to \"Bar\" as the controller gets new data from data store.\r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/parser\", \"dojo/when\", \"dojo/store/Memory\", \"dijit/registry\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(parser, when, Memory, registry){\r\n\t\t// |\t\t\t\t\t\tstore = new Memory({data: [{id: \"Foo\", value: \"Foo\"}, {id: \"Bar\", value: \"Bar\"}]});\r\n\t\t// |\t\t\t\t\t\twhen(parser.parse(), function(){\r\n\t\t// |\t\t\t\t\t\t\tregistry.byId(\"ctrl\").getStore(\"Foo\");\r\n\t\t// |\t\t\t\t\t\t\tsetTimeout(function(){ registry.byId(\"ctrl\").getStore(\"Bar\"); }, 2000);\r\n\t\t// |\t\t\t\t\t\t});\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox.mvc.StoreRefController\" data-dojo-props=\"store: store\"></span>\r\n\t\t// |\t\t\t\t<input type=\"text\" data-dojo-type=\"dijit/form/TextBox\" data-dojo-props=\"value: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\t// store: dojo/store/*\r\n\t\t//\t\tThe Dojo Object Store in use.\r\n\t\tstore: null,\r\n\r\n\t\t// getStatefulOptions: dojox.mvc.getStatefulOptions\r\n\t\t//\t\tThe options to get stateful object from plain value.\r\n\t\tgetStatefulOptions: null,\r\n\r\n\t\t// _refSourceModelProp: String\r\n\t\t//\t\tThe property name for the data model, that serves as the data source.\r\n\t\t_refSourceModelProp: \"model\",\r\n\r\n\t\tqueryStore: function(/*Object*/ query, /*dojo/store/api/Store.QueryOptions?*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tQueries the store for objects.\r\n\t\t\t// query: Object\r\n\t\t\t//\t\tThe query to use for retrieving objects from the store.\r\n\t\t\t// options: dojo/store/api/Store.QueryOptions?\r\n\t\t\t//\t\tThe optional arguments to apply to the resultset.\r\n\t\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t\t//\t\tThe results of the query, extended with iterative methods.\r\n\r\n\t\t\tif(!(this.store || {}).query){ return; }\r\n\t\t\tif(this._queryObserveHandle){ this._queryObserveHandle.cancel(); }\r\n\r\n\t\t\tvar _self = this,\r\n\t\t\t queryResult = this.store.query(query, options),\r\n\t\t\t result = when(queryResult, function(results){\r\n\t\t\t\tif(_self._beingDestroyed){ return; }\r\n\t\t\t\tresults = getStateful(results, _self.getStatefulOptions);\r\n\t\t\t\t_self.set(_self._refSourceModelProp, results);\r\n\t\t\t\treturn results;\r\n\t\t\t});\r\n\t\t\tif(result.then){\r\n\t\t\t\tresult = lang.delegate(result);\r\n\t\t\t}\r\n\t\t\t// For dojo/store/Observable, which adds a function to query result\r\n\t\t\tfor(var s in queryResult){\r\n\t\t\t\tif(isNaN(s) && queryResult.hasOwnProperty(s) && lang.isFunction(queryResult[s])){\r\n\t\t\t\t\tresult[s] = queryResult[s];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\tgetStore: function(/*Number*/ id, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRetrieves an object by its identity.\r\n\t\t\t// id: Number\r\n\t\t\t//\t\tThe identity to use to lookup the object.\r\n\t\t\t// options: Object\r\n\t\t\t//\t\tThe options for dojo/store.*.get().\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe object in the store that matches the given id.\r\n\r\n\t\t\tif(!(this.store || {}).get){ return; }\r\n\t\t\tif(this._queryObserveHandle){ this._queryObserveHandle.cancel(); }\r\n\t\t\tvar _self = this;\r\n\t\t\tresult = when(this.store.get(id, options), function(result){\r\n\t\t\t\tif(_self._beingDestroyed){ return; }\r\n\t\t\t\tresult = getStateful(result, _self.getStatefulOptions);\r\n\t\t\t\t_self.set(_self._refSourceModelProp, result);\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\tputStore: function(/*Object*/ object, /*dojo/store/api/Store.PutDirectives?*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStores an object.\r\n\t\t\t// object: Object\r\n\t\t\t//\t\tThe object to store.\r\n\t\t\t// options: dojo/store/api/Store.PutDirectives?\r\n\t\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\" property if a specific id is to be used.\r\n\t\t\t// returns: Number\r\n\r\n\t\t\tif(!(this.store || {}).put){ return; }\r\n\t\t\treturn this.store.put(object, options);\r\n\t\t},\r\n\r\n\t\taddStore: function(object, options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates an object, throws an error if the object already exists.\r\n\t\t\t// object: Object\r\n\t\t\t//\t\tThe object to store.\r\n\t\t\t// options: dojo/store/api/Store.PutDirectives?\r\n\t\t\t//\t\tAdditional metadata for storing the data.  Includes an \"id\" property if a specific id is to be used.\r\n\t\t\t// returns: Number\r\n\r\n\t\t\tif(!(this.store || {}).add){ return; }\r\n\t\t\treturn this.store.add(object, options);\r\n\t\t},\r\n\r\n\t\tremoveStore: function(/*Number*/ id, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeletes an object by its identity\r\n\t\t\t// id: Number\r\n\t\t\t//\t\tThe identity to use to delete the object\r\n\t\t\t// options: Object\r\n\t\t\t//\t\tThe options for dojo/store/*.remove().\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tReturns true if an object was removed, falsy (undefined) if no object matched the id.\r\n\r\n\t\t\tif(!(this.store || {}).remove){ return; }\r\n\t\t\treturn this.store.remove(id, options);\r\n\t\t}\r\n\t});\r\n});\r\n"]}