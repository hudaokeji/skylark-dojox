{"version":3,"sources":["mvc/EditStoreRefListController.js"],"names":["define","declare","lang","getPlainValue","EditStoreRefController","ListController","commitCurrent","id","this","cursor","idProperty","i","originalModel","length","set","cloneModel","store","put"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,kBACA,2BACA,oBACE,SAASC,EAASC,EAAMC,EAAeC,EAAwBC,GACjE,OAAOJ,EAAQ,wCAAyCG,EAAwBC,IAyC/EC,cAAe,WAKd,IADA,IAAIC,EAAKC,KAAKC,OAAOD,KAAKE,YAClBC,EAAI,EAAGA,EAAIH,KAAKI,cAAcC,OAAQF,IAC7C,GAAGH,KAAKI,cAAcD,GAAGH,KAAKE,aAAeH,EAAG,CAC/CC,KAAKI,cAAcE,IAAIH,EAAGH,KAAKO,WAAWP,KAAKC,SAC/C,MAGFD,KAAKQ,MAAMC,IAAIT,KAAKC","file":"../../mvc/EditStoreRefListController.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"./getPlainValue\",\r\n\t\"./EditStoreRefController\",\r\n\t\"./ListController\"\r\n], function(declare, lang, getPlainValue, EditStoreRefController, ListController){\r\n\treturn declare(\"dojox.mvc.EditStoreRefListController\", [EditStoreRefController, ListController], {\r\n\t\t// summary:\r\n\t\t//\t\tA child class of dojox/mvc/EditStoreRefController, mixed with ListController.\r\n\t\t// description:\r\n\t\t//\t\tIt supports Lists in addition to what dojox/mvc/EditStoreRefController does.\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe check box refers to \"value\" property in the controller (with \"ctrl\" ID).\r\n\t\t//\t\tThe controller provides the \"value\" property, from the data coming from data store (\"store\" property in the controller), using the first one in array.\r\n\t\t//\t\tTwo seconds later, the check box changes from unchecked to checked.\r\n\t\t//\t\tThe change is committed to the data store, which is reflected to dojo/store/Observable callback. \r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/dom\", \"dojo/parser\", \"dojo/store/Observable\", \"dojo/store/Memory\", \"dijit/registry\",\r\n\t\t// |\t\t\t\t\t\t\"dijit/form/CheckBox\", \"dojox/mvc/EditStoreRefListController\", \"dojox/mvc/ListController\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(ddom, parser, Observable, Memory, registry){\r\n\t\t// |\t\t\t\t\t\tstore = Observable(new Memory({data: [{id: \"Foo\", value: false}]}));\r\n\t\t// |\t\t\t\t\t\tparser.parse();\r\n\t\t// |\t\t\t\t\t\tregistry.byId(\"ctrl\").queryStore().observe(function(object, previousIndex, newIndex){\r\n\t\t// |\t\t\t\t\t\t\talert(\"ID: \" + object.id + \", value: \" + object.value);\r\n\t\t// |\t\t\t\t\t\t}, true);\r\n\t\t// |\t\t\t\t\t\tvar count = 0;\r\n\t\t// |\t\t\t\t\t\tvar h = setInterval(function(){\r\n\t\t// |\t\t\t\t\t\t\tddom.byId(\"check\").click();\r\n\t\t// |\t\t\t\t\t\t\tregistry.byId(\"ctrl\").commit();\r\n\t\t// |\t\t\t\t\t\t\tif(++count >= 2){ clearInterval(h); }\r\n\t\t// |\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox/mvc/EditStoreRefListController\" \r\n\t\t// |\t\t\t\t data-dojo-props=\"store: store, cursorIndex: 0\"></span>\r\n\t\t// |\t\t\t\t<input id=\"check\" type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" data-dojo-props=\"checked: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\tcommitCurrent: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSend the change back to the data source for the current index.\r\n\r\n\t\t\tvar id = this.cursor[this.idProperty];\r\n\t\t\tfor(var i = 0; i < this.originalModel.length; i++){\r\n\t\t\t\tif(this.originalModel[i][this.idProperty] == id){\r\n\t\t\t\t\tthis.originalModel.set(i, this.cloneModel(this.cursor));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.store.put(this.cursor);\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}