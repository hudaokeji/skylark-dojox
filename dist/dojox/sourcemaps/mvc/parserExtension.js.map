{"version":3,"sources":["mvc/parserExtension.js"],"names":["define","require","kernel","lang","win","has","parser","mobileParser","_atBindingMixin","add","document","createElement","querySelectorAll","e","oldScan","scan","root","options","apply","this","_toArray","arguments","then","list","dojoType","scope","_scopeName","dataDojoType","nodes","prototype","dataBindAttr","getElementsByTagName","i","l","length","node","getAttribute","push","types","oldParse","parse","body","setAttribute"],"mappings":";;;;;;;AAAAA,QACC,UACA,oBACA,kBACA,0CACA,WACA,2CACA,4CACA,4BACA,qBACE,SAASC,EAASC,EAAQC,EAAMC,EAAKC,EAAKC,EAAQC,EAAcC,GAOlEH,EAAII,IAAI,YAAaC,SAASC,cAAc,OAAOC,kBACnD,IAAKP,EAAII,IAAI,gBAAiBR,EAAQ,gBAAmB,MAAMY,IAC/D,IAAKR,EAAII,IAAI,uBAAwBR,EAAQ,wBAA0B,MAAMY,IAE7E,GAAGR,EAAI,eAAe,CACrB,IAAIS,EAAUR,EAAOS,KAErBT,EAAOS,KAAO,SAAsBC,EAAiBC,GAKpD,OAAOH,EAAQI,MAAMC,KAAMhB,EAAKiB,SAASC,YAAYC,KAAK,SAASC,GAKlE,IAJA,IAAIC,GAAYP,EAAQQ,OAASvB,EAAOwB,YAAc,OAErDC,EADW,SAAWV,EAAQQ,OAASvB,EAAOwB,YAAc,IAClC,OAEnBE,EAAQvB,EAAI,WAAaW,EAAKJ,iBAAiB,IAAMJ,EAAgBqB,UAAUC,aAAe,KAAOd,EAAKe,qBAAqB,KAAMC,EAAI,EAAGC,EAAIL,EAAMM,OAAQF,EAAIC,EAAGD,IAAI,CAChL,IAAIG,EAAOP,EAAMI,GACbG,EAAKC,aAAaT,IAAkBQ,EAAKC,aAAaZ,KAAaW,EAAKC,aAAa5B,EAAgBqB,UAAUC,eAClHP,EAAKc,MACJC,OAAQ,qBACRH,KAAMA,IAKT,OAAOZ,KAKV,GAAGlB,EAAI,sBAAsB,CAC5B,IAAIkC,EAAWhC,EAAaiC,MAE5BjC,EAAaiC,MAAQ,SAAsBxB,EAAiBC,GAK3D,IAAIO,IAAaP,OAAeQ,OAASvB,EAAOwB,YAAc,OAE7DC,EADW,UAAYV,OAAeQ,OAASvB,EAAOwB,YAAc,IAC1C,OAC1BE,MAAQvB,EAAI,YAAcW,GAAQZ,EAAIqC,QAAQ7B,iBAAiB,IAAMJ,EAAgBqB,UAAUC,aAAe,MAAQd,GAAQZ,EAAIqC,QAAQV,qBAAqB,KAEhK,IAAI,IAAIC,EAAI,EAAGC,EAAIL,MAAMM,OAAQF,EAAIC,EAAGD,IAAI,CAC3C,IAAIG,EAAOP,MAAMI,GACbG,EAAKC,aAAaT,IAAkBQ,EAAKC,aAAaZ,KAAaW,EAAKC,aAAa5B,EAAgBqB,UAAUC,eAClHK,EAAKO,aAAaf,EAAc,qBAIlC,OAAOY,EAASrB,MAAMC,KAAMhB,EAAKiB,SAASC,aAI5C,OAAOf,GAAUC","file":"../../mvc/parserExtension.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/has!dojo-parser?:dojo/_base/window\",\r\n\t\"dojo/has\",\r\n\t\"dojo/has!dojo-mobile-parser?:dojo/parser\",\r\n\t\"dojo/has!dojo-parser?:dojox/mobile/parser\",\r\n\t\"dojox/mvc/_atBindingMixin\",\r\n\t\"dojox/mvc/Element\"\r\n], function(require, kernel, lang, win, has, parser, mobileParser, _atBindingMixin){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mvc/parserExtension\r\n\t// summary:\r\n\t//\t\tA extension of Dojo parser that allows data binding without specifying data-dojo-type.\r\n\r\n\thas.add(\"dom-qsa\", !!document.createElement(\"div\").querySelectorAll);\r\n\ttry{ has.add(\"dojo-parser\", !!require(\"dojo/parser\"));  }catch(e){}\r\n\ttry{ has.add(\"dojo-mobile-parser\", !!require(\"dojox/mobile/parser\")); }catch(e){}\r\n\r\n\tif(has(\"dojo-parser\")){\r\n\t\tvar oldScan = parser.scan;\r\n\r\n\t\tparser.scan = function(/*DOMNode?*/ root, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFind list of DOM nodes that has data-dojo-bind, but not data-dojo-type.\r\n\t\t\t//\t\tAnd add them to list of DOM nodes to instantiate widget (dojox/mvc/Element).\r\n\r\n\t\t\treturn oldScan.apply(this, lang._toArray(arguments)).then(function(list){\r\n\t\t\t\tvar dojoType = (options.scope || kernel._scopeName) + \"Type\",\t\t\t// typically \"dojoType\"\r\n\t\t\t\t attrData = \"data-\" + (options.scope || kernel._scopeName) + \"-\",\t// typically \"data-dojo-\"\r\n\t\t\t\t dataDojoType = attrData + \"type\";\t\t\t\t\t\t\t\t\t// typically \"data-dojo-type\"\r\n\r\n\t\t\t\tfor(var nodes = has(\"dom-qsa\") ? root.querySelectorAll(\"[\" + _atBindingMixin.prototype.dataBindAttr + \"]\") : root.getElementsByTagName(\"*\"), i = 0, l = nodes.length; i < l; i++){\r\n\t\t\t\t\tvar node = nodes[i], foundBindingInAttribs = false;\r\n\t\t\t\t\tif(!node.getAttribute(dataDojoType) && !node.getAttribute(dojoType) && node.getAttribute(_atBindingMixin.prototype.dataBindAttr)){\r\n\t\t\t\t\t\tlist.push({\r\n\t\t\t\t\t\t\ttypes: [\"dojox/mvc/Element\"],\r\n\t\t\t\t\t\t\tnode: node\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\r\n\tif(has(\"dojo-mobile-parser\")){\r\n\t\tvar oldParse = mobileParser.parse;\r\n\r\n\t\tmobileParser.parse = function(/*DOMNode?*/ root, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFind list of DOM nodes that has data-dojo-bind, but not data-dojo-type.\r\n\t\t\t//\t\tSet dojox/mvc/Element to their data-dojo-type.\r\n\r\n\t\t\tvar dojoType = ((options || {}).scope || kernel._scopeName) + \"Type\",\t\t// typically \"dojoType\"\r\n\t\t\t attrData = \"data-\" + ((options || {}).scope || kernel._scopeName) + \"-\",\t// typically \"data-dojo-\"\r\n\t\t\t dataDojoType = attrData + \"type\";\t\t\t\t\t\t\t\t\t\t\t// typically \"data-dojo-type\"\r\n\t\t\t nodes = has(\"dom-qsa\") ? (root || win.body()).querySelectorAll(\"[\" + _atBindingMixin.prototype.dataBindAttr + \"]\") : (root || win.body()).getElementsByTagName(\"*\");\r\n\r\n\t\t\tfor(var i = 0, l = nodes.length; i < l; i++){\r\n\t\t\t\tvar node = nodes[i], foundBindingInAttribs = false, bindingsInAttribs = [];\r\n\t\t\t\tif(!node.getAttribute(dataDojoType) && !node.getAttribute(dojoType) && node.getAttribute(_atBindingMixin.prototype.dataBindAttr)){\r\n\t\t\t\t\tnode.setAttribute(dataDojoType, \"dojox/mvc/Element\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn oldParse.apply(this, lang._toArray(arguments));\r\n\t\t};\r\n\t}\r\n\r\n\treturn parser || mobileParser;\r\n});\r\n"]}