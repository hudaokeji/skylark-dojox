{"version":3,"sources":["mvc/_Controller.js"],"names":["define","declare","lang","Stateful","_atBindingMixin","postscript","params","srcNodeRef","this","_applyAttributes","inherited","arguments","_dbpostscript","s","set","registry","require","id","getUniqueId","declaredClass","replace","add","e","setAttribute","startup","_startAtWatchHandles","destroy","_beingDestroyed","_stopAtWatchHandles","remove","_destroyed","name","value","x","hasOwnProperty","atsignature","_setAtWatchHandle","setterName","c","toUpperCase","_set","_changeAttrValue"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,gBACA,qBACE,SAASC,EAASC,EAAMC,EAAUC,GACpC,OAAOH,EAAQ,yBAA0BE,EAAUC,IAClDC,WAAY,SAAqBC,EAA4BC,GAM5D,GAAGC,KAAKC,iBACP,OAAOD,KAAKE,UAAUC,WAKvB,GAFAH,KAAKI,cAAcN,EAAQC,GAExBD,EAEF,IAAI,IAAIO,KADRL,KAAKF,OAASA,EACDA,EACZE,KAAKM,IAAID,EAAGP,EAAOO,IAIrB,IAAIE,EACJ,IAECA,EAAWC,QAAQ,kBACnBR,KAAKS,GAAKT,KAAKS,KAAOV,OAAkBU,IAAMF,EAASG,YAAYV,KAAKW,cAAcC,QAAQ,MAAO,MACrGL,EAASM,IAAIb,MACb,MAAMc,IACHf,EAKHA,EAAWgB,aAAa,WAAYf,KAAKS,IAHzCT,KAAKgB,WAOPA,QAAS,WAIJhB,KAAKC,kBACRD,KAAKiB,uBAGNjB,KAAKE,UAAUC,YAGhBe,QAAS,WAUR,GANAlB,KAAKmB,iBAAkB,EACnBnB,KAAKC,kBACRD,KAAKoB,sBAGNpB,KAAKE,UAAUC,YACXH,KAAKC,iBACR,IAGCO,QAAQ,kBAAkBa,OAAOrB,KAAKS,IACtC,MAAMK,IAERd,KAAKsB,YAAa,GAGnBhB,IAAK,SAAoBiB,EAAmBC,GAW3C,GAAmB,iBAATD,EAAkB,CAC3B,IAAI,IAAIE,KAAKF,EACTA,EAAKG,eAAeD,IACtBzB,KAAKM,IAAImB,EAAGF,EAAKE,IAGnB,OAAOzB,KAGR,IAAIA,KAAKC,iBAAiB,CACzB,GAAgC,iBAA5BuB,OAAaG,YAEhB,OAAO3B,KAAK4B,kBAAkBL,EAAMC,GAGpC,IAAIK,EAAa,OAASN,EAAKX,QAAQ,SAAU,SAASkB,GAAI,OAAOA,EAAEC,gBAAoB,OAM3F,OALG/B,KAAK6B,GACP7B,KAAK6B,GAAYL,GAEjBxB,KAAKgC,KAAKT,EAAMC,GAEVxB,KAKT,OAAOA,KAAKE,UAAUC,YAGvB6B,KAAM,SAAoBT,EAAmBC,GAS5C,OAAIxB,KAAKC,iBAKFD,KAAKE,UAAUC,WAHdH,KAAKiC,iBAAiBV,EAAMC","file":"../../mvc/_Controller.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/Stateful\",\r\n\t\"./_atBindingMixin\"\r\n], function(declare, lang, Stateful, _atBindingMixin){\r\n\treturn declare(\"dojox.mvc._Controller\", [Stateful, _atBindingMixin], {\r\n\t\tpostscript: function(/*Object?*/ params, /*DomNode|String?*/ srcNodeRef){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIf this object is not called from Dojo parser, starts this up right away.\r\n\t\t\t//\t\tAlso, if widget registry is available, register this object.\r\n\r\n\t\t\t// If there is dijit/_WidgetBase in upper class hierarchy (happens when this descendant is mixed into a widget), let _WidgetBase do all work\r\n\t\t\tif(this._applyAttributes){\r\n\t\t\t\treturn this.inherited(arguments);\r\n\t\t\t}\r\n\t\t\t// Look for dojox/mvc/at handles in the parameters\r\n\t\t\tthis._dbpostscript(params, srcNodeRef);\r\n\t\t\t// Merge the parameters to this\r\n\t\t\tif(params){\r\n\t\t\t\tthis.params = params;\r\n\t\t\t\tfor(var s in params){\r\n\t\t\t\t\tthis.set(s, params[s]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Add this instance to dijit/registry, if it's available\r\n\t\t\tvar registry;\r\n\t\t\ttry{\r\n\t\t\t\t// Usage of dijit/registry module is optional. Do not use it if it's not already loaded.\r\n\t\t\t\tregistry = require(\"dijit/registry\");\r\n\t\t\t\tthis.id = this.id || (srcNodeRef || {}).id || registry.getUniqueId(this.declaredClass.replace(/\\./g, \"_\"));\r\n\t\t\t\tregistry.add(this);\r\n\t\t\t}catch(e){}\r\n\t\t\tif(!srcNodeRef){\r\n\t\t\t\t// If this instance is not created via Dojo parser, start this up right away\r\n\t\t\t\tthis.startup();\r\n\t\t\t}else{\r\n\t\t\t\t// If this is created via Dojo parser, set widgetId attribute so that destroyDescendants() of parent widget works\r\n\t\t\t\tsrcNodeRef.setAttribute(\"widgetId\", this.id); \r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStarts up data binding as this object starts up.\r\n\r\n\t\t\tif(!this._applyAttributes){\r\n\t\t\t\tthis._startAtWatchHandles();\r\n\t\t\t}\r\n\t\t\t// If there is dijit/_WidgetBase in upper class hierarchy (happens when this descendant is mixed into a widget), let _WidgetBase do all work\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStops data binding as this object is destroyed.\r\n\r\n\t\t\tthis._beingDestroyed = true;\r\n\t\t\tif(!this._applyAttributes){\r\n\t\t\t\tthis._stopAtWatchHandles();\r\n\t\t\t}\r\n\t\t\t// If there is dijit/_WidgetBase in upper class hierarchy (happens when this descendant is mixed into a widget), let _WidgetBase do all work\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this._applyAttributes){\r\n\t\t\t\ttry{\r\n\t\t\t\t\t// Remove this instance from dijit/registry\r\n\t\t\t\t\t// Usage of dijit/registry module is optional. Do not use it if it's not already loaded.\r\n\t\t\t\t\trequire(\"dijit/registry\").remove(this.id);\r\n\t\t\t\t}catch(e){}\r\n\t\t\t}\r\n\t\t\tthis._destroyed = true;\r\n\t\t},\r\n\r\n\t\tset: function(/*String*/ name, /*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIf the value given is dojox/mvc/at handle, use it for data binding.\r\n\t\t\t//\t\tOtherwise, if setter function is there, use it.\r\n\t\t\t//\t\tOtherwise, set the value to the data model or to this object.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe property value.\r\n\r\n\t\t\t// If an object is used, iterate through object\r\n\t\t\tif(typeof name === \"object\"){\r\n\t\t\t\tfor(var x in name){\r\n\t\t\t\t\tif(name.hasOwnProperty(x)){\r\n\t\t\t\t\t\tthis.set(x, name[x]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\tif(!this._applyAttributes){\r\n\t\t\t\tif((value || {}).atsignature == \"dojox.mvc.at\"){\r\n\t\t\t\t\t// If dojox/mvc/at handle is given, use it for data binding\r\n\t\t\t\t\treturn this._setAtWatchHandle(name, value);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// Otherwise align the setter interface to _WidgetBase\r\n\t\t\t\t\tvar setterName = \"_set\" + name.replace(/^[a-z]/, function(c){ return c.toUpperCase(); }) + \"Attr\";\r\n\t\t\t\t\tif(this[setterName]){\r\n\t\t\t\t\t\tthis[setterName](value);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis._set(name, value);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If there is dijit/_WidgetBase in upper class hierarchy (happens when this descendant is mixed into a widget), let _WidgetBase do all work\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_set: function(/*String*/ name, /*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tImplement _set() interface so that _set() behavior is consistent whether the instance inherits _WidgetBase or not.\r\n\t\t\t//\t\tIf the instance does not inherit _WidgetBase, use dojo/Stateful/_changeAttrValue() that's equivalent to dijit/_WidgetBase._set().\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe property value.\r\n\r\n\t\t\tif(!this._applyAttributes){\r\n\t\t\t\t// Call dojo/Stateful/_changeAttrValue() that's equivalent to dijit/_WidgetBase/_set()\r\n\t\t\t\treturn this._changeAttrValue(name, value);\r\n\t\t\t}\r\n\t\t\t// If there is dijit/_WidgetBase in upper class hierarchy (happens when this descendant is mixed into a widget), let _WidgetBase do all work\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}