{"version":3,"sources":["mvc/EditModelRefController.js"],"names":["define","declare","lang","getPlainValue","getStateful","ModelRefController","getStatefulOptions","getPlainValueOptions","holdModelUntilCommit","originalModel","sourceModel","_refOriginalModelProp","_refSourceModelProp","_refEditModelProp","postscript","params","srcNodeRef","s","value","this","inherited","arguments","set","name","ctrl","current","cloneModel","plain","isFunction","watch","commit","get","reset","hasControllerProperty"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,kBACA,gBACA,wBACE,SAASC,EAASC,EAAMC,EAAeC,EAAaC,GAoBtD,OAAOJ,EAAQ,mCAAoCI,GAsFlDC,mBAAoB,KAIpBC,qBAAsB,KAItBC,sBAAsB,EAItBC,cAAe,KAIfC,YAAa,KAIbC,sBAAuB,gBAIvBC,oBAAqB,cAIrBC,kBAAmB,QAEnBC,WAAY,SAAqBC,EAA4BC,GAI5D,IAAI,IAAIC,KAAMX,mBAAoB,EAAGC,qBAAsB,EAAGC,qBAAsB,GAAG,CACtF,IAAIU,GAASH,OAAcE,QACR,IAATC,IACTC,KAAKF,GAAKC,GAGZC,KAAKC,UAAUC,YAGhBC,IAAK,SAAoBC,EAAmBL,GAjJ7C,IAAgEM,EAAqCC,EAyJhGF,GAAQJ,KAAKP,sBAzJ8CY,EA0J3CL,KAAMA,KAAKA,KAAKP,wBA1JgEa,EA0J1CP,KA/IzDM,EAAKF,IAAIE,EAAKb,sBAAuBa,EAAKhB,qBAAuBiB,EAAUD,EAAKE,WAAWD,IAC3FD,EAAKF,IAAIE,EAAKX,kBAAmBW,EAAKhB,qBAAuBgB,EAAKE,WAAWD,GAAWA,KAgJxFN,KAAKC,UAAUC,YAGhBK,WAAY,SAAsBR,GAOjC,IAAIS,EAAQzB,EAAK0B,YAAYV,OAAaI,MAAQpB,EAAK0B,YAAYV,OAAaW,OAAS1B,EAAce,EAAOC,KAAKZ,sBAAwBW,EAC3I,OAAOd,EAAYuB,EAAOR,KAAKb,qBAGhCwB,OAAQ,WAIPX,KAAKG,IAAIH,KAAKX,qBAAuBW,KAAKP,oBAAsBO,KAAKR,sBAAuBQ,KAAKO,WAAWP,KAAKY,IAAIZ,KAAKN,sBAG3HmB,MAAO,WAINb,KAAKG,IAAIH,KAAKX,qBAAuBW,KAAKN,kBAAoBM,KAAKP,oBAAqBO,KAAKO,WAAWP,KAAKY,IAAIZ,KAAKR,0BAGvHsB,sBAAuB,SAAoBV,GAM1C,OAAOJ,KAAKC,UAAUC,YAAcE,GAAQJ,KAAKR,uBAAyBY,GAAQJ,KAAKP","file":"../../mvc/EditModelRefController.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"./getPlainValue\",\r\n\t\"./getStateful\",\r\n\t\"./ModelRefController\"\r\n], function(declare, lang, getPlainValue, getStateful, ModelRefController){\r\n\t// module:\r\n\t//\t\tdojox/mvc/EditModelRefController\r\n\r\n\tfunction setRefSourceModel(/*dojox/mvc/EditModelRefController*/ ctrl, /*Anything*/ old, /*Anything*/ current){\r\n\t\t// summary:\r\n\t\t//\t\tA function called when this controller gets newer value as the data source.\r\n\t\t// ctrl: dojox/mvc/EditModelRefController\r\n\t\t//\t\tThe controller.\r\n\t\t// old: Anything\r\n\t\t//\t\tThe older value.\r\n\t\t// current: Anything\r\n\t\t//\t\tThe newer value.\r\n\r\n\t\tif(old !== current){\r\n\t\t\tctrl.set(ctrl._refOriginalModelProp, ctrl.holdModelUntilCommit ? current : ctrl.cloneModel(current));\r\n\t\t\tctrl.set(ctrl._refEditModelProp, ctrl.holdModelUntilCommit ? ctrl.cloneModel(current) : current);\r\n\t\t}\r\n\t}\r\n\r\n\treturn declare(\"dojox.mvc.EditModelRefController\", ModelRefController, {\r\n\t\t// summary:\r\n\t\t//\t\tA child class of dojox/mvc/ModelRefController.\r\n\t\t//\t\tKeeps a copy (originalModel) of given data model (sourceModel) so that it can manage the data model of before/after the edit.\r\n\t\t// description:\r\n\t\t//\t\tHas two modes:\r\n\t\t//\r\n\t\t//\t\t- Directly reflect the edits to sourceModel (holdModelUntilCommit=false)\r\n\t\t//\t\t- Don't reflect the edits to sourceModel, until commit() is called (holdModelUntilCommit=true)\r\n\t\t//\r\n\t\t//\t\tFor the 1st case, dojo/Stateful get()/set()/watch() interfaces will work with sourceModel.\r\n\t\t//\t\tFor the 2nd case, dojo/Stateful get()/set()/watch() interfaces will work with a copy of sourceModel, and sourceModel will be replaced with such copy when commit() is called.\r\n\t\t//\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe check box refers to \"value\" property in the controller (with \"ctrl\" ID).\r\n\t\t//\t\tThe controller provides the \"value\" property on behalf of the model (\"model\" property in the controller, which comes from \"sourceModel\" property).\r\n\t\t//\t\tTwo seconds later, the check box changes from unchecked to checked, and the controller saves the state.\r\n\t\t//\t\tTwo seconds later then, the check box changes from checked to unchecked.\r\n\t\t//\t\tTwo seconds later then, the controller goes back to the last saved state, and the check box changes from unchecked to checked as the result.\r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/dom\", \"dojo/parser\", \"dojo/Stateful\", \"dijit/registry\", \"dijit/form/CheckBox\", \"dojox/mvc/EditModelRefController\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(ddom, parser, Stateful, registry){\r\n\t\t// |\t\t\t\t\t\tmodel = new Stateful({value: false});\r\n\t\t// |\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t// |\t\t\t\t\t\t\tddom.byId(\"check\").click();\r\n\t\t// |\t\t\t\t\t\t\tregistry.byId(\"ctrl\").commit();\r\n\t\t// |\t\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t// |\t\t\t\t\t\t\t\tddom.byId(\"check\").click();\r\n\t\t// |\t\t\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t// |\t\t\t\t\t\t\t\t\tregistry.byId(\"ctrl\").reset();\r\n\t\t// |\t\t\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\tparser.parse();\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox/mvc/EditModelRefController\" data-dojo-props=\"sourceModel: model\"></span>\r\n\t\t// |\t\t\t\t<input id=\"check\" type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" data-dojo-props=\"checked: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\t\t// example:\r\n\t\t//\t\tThe controller with \"ctrlSource\" ID specifies holding changes until commit() is called (by setting true to holdModelUntilCommit).\r\n\t\t//\t\tAs the change in the second check box is committed two seconds later from the change, the first check box is checked at then (when the change is committed).\r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/dom\", \"dojo/parser\", \"dojo/Stateful\", \"dijit/registry\",\r\n\t\t// |\t\t\t\t\t\t\"dijit/form/CheckBox\", \"dojox/mvc/ModelRefController\", \"dojox/mvc/EditModelRefController\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(ddom, parser, Stateful, registry){\r\n\t\t// |\t\t\t\t\t\tmodel = new Stateful({value: false});\r\n\t\t// |\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t// |\t\t\t\t\t\t\tddom.byId(\"checkEdit\").click();\r\n\t\t// |\t\t\t\t\t\t\tsetTimeout(function(){\r\n\t\t// |\t\t\t\t\t\t\t\tregistry.byId(\"ctrlEdit\").commit();\r\n\t\t// |\t\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\tparser.parse();\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrlSource\" data-dojo-type=\"dojox/mvc/ModelRefController\" data-dojo-props=\"model: model\"></span>\r\n\t\t// |\t\t\t\t<span id=\"ctrlEdit\" data-dojo-type=\"dojox/mvc/EditModelRefController\"\r\n\t\t// |\t\t\t\t data-dojo-props=\"sourceModel: at('widget:ctrlSource', 'model'), holdModelUntilCommit: true\"></span>\r\n\t\t// |\t\t\t\tSource:\r\n\t\t// |\t\t\t\t<input id=\"checkSource\" type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\"\r\n\t\t// |\t\t\t\t data-dojo-props=\"checked: at('widget:ctrlSource', 'value')\">\r\n\t\t// |\t\t\t\tEdit:\r\n\t\t// |\t\t\t\t<input id=\"checkEdit\" type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\"\r\n\t\t// |\t\t\t\t data-dojo-props=\"checked: at('widget:ctrlEdit', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\t// getStatefulOptions: dojox/mvc/getStatefulOptions\r\n\t\t//\t\tThe options to get stateful object from plain value.\r\n\t\tgetStatefulOptions: null,\r\n\r\n\t\t// getPlainValueOptions: dojox/mvc/getPlainValueOptions\r\n\t\t//\t\tThe options to get plain value from stateful object.\r\n\t\tgetPlainValueOptions: null,\r\n\r\n\t\t// holdModelUntilCommit: Boolean\r\n\t\t//\t\tTrue not to send the change in model back to sourceModel until commit() is called.\r\n\t\tholdModelUntilCommit: false,\r\n\r\n\t\t// originalModel: dojo/Stateful\r\n\t\t//\t\tThe data model, that serves as the original data.\r\n\t\toriginalModel: null,\r\n\r\n\t\t// originalModel: dojo/Stateful\r\n\t\t//\t\tThe data model, that serves as the data source.\r\n\t\tsourceModel: null,\r\n\r\n\t\t// _refOriginalModelProp: String\r\n\t\t//\t\tThe property name for the data model, that serves as the original data.\r\n\t\t_refOriginalModelProp: \"originalModel\",\r\n\r\n\t\t// _refSourceModelProp: String\r\n\t\t//\t\tThe property name for the data model, that serves as the data source.\r\n\t\t_refSourceModelProp: \"sourceModel\",\r\n\r\n\t\t// _refEditModelProp: String\r\n\t\t//\t\tThe property name for the data model, that is being edited.\r\n\t\t_refEditModelProp: \"model\",\r\n\r\n\t\tpostscript: function(/*Object?*/ params, /*DomNode|String?*/ srcNodeRef){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets certain properties before setting models.\r\n\r\n\t\t\tfor(var s in {getStatefulOptions: 1, getPlainValueOptions: 1, holdModelUntilCommit: 1}){\r\n\t\t\t\tvar value = (params || {})[s];\r\n\t\t\t\tif(typeof value != \"undefined\"){\r\n\t\t\t\t\tthis[s] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tset: function(/*String*/ name, /*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet a property to this.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property to set.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe value to set in the property.\r\n\r\n\t\t\tif(name == this._refSourceModelProp){\r\n\t\t\t\tsetRefSourceModel(this, this[this._refSourceModelProp], value);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tcloneModel: function(/*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a clone object of the data source.\r\n\t\t\t//\t\tChild classes of this controller can override it to achieve its specific needs.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe data serving as the data source.\r\n\r\n\t\t\tvar plain = lang.isFunction((value || {}).set) && lang.isFunction((value || {}).watch) ? getPlainValue(value, this.getPlainValueOptions) : value;\r\n\t\t\treturn getStateful(plain, this.getStatefulOptions);\r\n\t\t},\r\n\r\n\t\tcommit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSend the change back to the data source.\r\n\r\n\t\t\tthis.set(this.holdModelUntilCommit ? this._refSourceModelProp : this._refOriginalModelProp, this.cloneModel(this.get(this._refEditModelProp)));\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange the model back to its original state.\r\n\r\n\t\t\tthis.set(this.holdModelUntilCommit ? this._refEditModelProp : this._refSourceModelProp, this.cloneModel(this.get(this._refOriginalModelProp)));\r\n\t\t},\r\n\r\n\t\thasControllerProperty: function(/*String*/ name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if this controller itself owns the given property.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\r\n\t\t\treturn this.inherited(arguments) || name == this._refOriginalModelProp || name == this._refSourceModelProp;\r\n\t\t}\r\n\t});\r\n});\r\n"]}