{"version":3,"sources":["mvc/ModelRefController.js"],"names":["define","array","declare","lang","Stateful","_Controller","ownProps","_refModelProp","_refInModelProp","model","postscript","params","srcNodeRef","this","_relTargetProp","inherited","arguments","get","name","hasControllerProperty","_set","value","set","watch","callback","hm","hp","_self","watchPropertiesInModel","unwatch","isFunction","apply","concat","old","current","call","reflectChangeInModel","props","s","forEach","list","item","hasOwnProperty","prototype","h","remove","constructor","test"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,kBACA,gBACA,iBACE,SAASC,EAAOC,EAASC,EAAMC,EAAUC,GAC3C,OAAOH,EAAQ,+BAAgCG,GA2C9CC,SAAU,KAIVC,cAAe,QAKfC,gBAAiB,QAIjBC,MAAO,KAEPC,WAAY,SAAqBC,EAA4BC,GAI5DC,KAAKC,gBAAkBH,OAAcJ,eAAiBM,KAAKN,cAC3DM,KAAKE,UAAUC,YAGhBC,IAAK,SAAoBC,GAMxB,IAAIL,KAAKM,sBAAsBD,GAAM,CACpC,IAAIT,EAAQI,KAAKA,KAAKN,eACtB,OAAQE,EAAiBA,EAAMQ,IAAMR,EAAMQ,IAAIC,GAAQT,EAAMS,QAA7C,EAEjB,OAAOL,KAAKE,UAAUC,YAGvBI,KAAM,SAAoBF,EAAmBG,GAQ5C,IAAIR,KAAKM,sBAAsBD,GAAM,CACpC,IAAIT,EAAQI,KAAKA,KAAKN,eAEtB,OADAE,IAAUA,EAAMa,IAAMb,EAAMa,IAAIJ,EAAMG,GAAUZ,EAAMS,GAAQG,GACvDR,KAER,OAAOA,KAAKE,UAAUC,YAGvBO,MAAO,SAAqBL,EAAmBM,GAQ9C,GAAGX,KAAKM,sBAAsBD,GAC7B,OAAOL,KAAKE,UAAUC,WAGnBQ,IACHA,EAAWN,EACXA,EAAO,MAGR,IAAIO,EAAK,KAAMC,EAAK,KAAMC,EAAQd,KAElC,SAASe,EAAyCnB,GAO9CiB,GAAKA,EAAGG,UAERpB,GAASN,EAAK2B,WAAWrB,EAAMa,MAAQnB,EAAK2B,WAAWrB,EAAMc,SAC/DG,EAAKjB,EAAMc,MAAMQ,MAAMtB,GAAQS,GAAQA,OAAYc,QAAQ,SAASd,EAAMe,EAAKC,GAAUV,EAASW,KAAKR,EAAOT,EAAMe,EAAKC,QAI3H,SAASE,EAAuCH,EAAuBC,GAStE,IAAIG,KAsBJ,IAAI,IAAIC,KArBJpB,EAiBHmB,EAAMnB,GAAQ,EAfdjB,EAAMsC,SAASN,EAAKC,GAAU,SAASzB,GACtC,IAAI+B,EAAO/B,GAASA,EAAMQ,IAAI,cAC9B,GAAGuB,EAEFvC,EAAMsC,QAAQC,EAAM,SAASC,GACxBd,EAAMR,sBAAsBsB,KAAQJ,EAAMI,GAAQ,UAIvD,IAAI,IAAIH,KAAK7B,EACTA,EAAMiC,eAAeJ,KAAOX,EAAMR,sBAAsBmB,KAAKD,EAAMC,GAAK,KASlED,EACZb,EAASW,KAAKR,EAAOW,EAAIL,EAAeA,EAAIhB,IAAMgB,EAAIhB,IAAIqB,GAAKL,EAAIK,QAApC,EAAyCJ,EAAmBA,EAAQjB,IAAMiB,EAAQjB,IAAIqB,GAAKJ,EAAQI,QAAhD,GAKpFb,EAAKrB,EAASuC,UAAUpB,MAAMY,KAAKtB,KAAMA,KAAKN,cAAe,SAASW,EAAMe,EAAKC,GAC7ED,IAAQC,IACXE,EAAqBH,EAAKC,GAC1BN,EAAuBM,MAIxBN,EAAuBf,KAAKI,IAAIJ,KAAKN,gBAErC,IAAIqC,KAIJ,OAHAA,EAAEf,QAAUe,EAAEC,OAAS,WACnBnB,IAAKA,EAAGG,UAAWH,EAAK,MAAWD,IAAKA,EAAGI,UAAWJ,EAAK,OAExDmB,GAGRzB,sBAAuB,SAAoBD,GAM1C,MAAe,mBAARA,GAA6BA,GAAQL,KAAKN,eAAiBW,GAAQL,KAAKL,iBAAoBU,KAASL,KAAKP,eAAqBY,KAAQL,KAAKiC,YAAYH,WAAc,6BAA6BI,KAAK7B","file":"../../mvc/ModelRefController.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/Stateful\",\r\n\t\"./_Controller\"\r\n], function(array, declare, lang, Stateful, _Controller){\r\n\treturn declare(\"dojox.mvc.ModelRefController\", _Controller, {\r\n\t\t// summary:\r\n\t\t//\t\tA controller that keeps a reference to dojo/Stateful-based data model.\r\n\t\t// description:\r\n\t\t//\t\tDoes the following on behalf of such model:\r\n\t\t//\r\n\t\t//\t\t- Provides data from model via dojo/Stateful get() interface\r\n\t\t//\t\t- Stores data to model via dojo/Stateful set() interface\r\n\t\t//\t\t- Watches for change in model via dojo/Stateful watch() interface (The callback is called when there is a change in data model, as well as when the data model itself is replaced with different one)\r\n\t\t//\r\n\t\t//\t\tCan also be used to do some application-specific stuffs upon change in properties in model, by defining setter functions. \r\n\t\t//\t\tDoing so will help keep models and widgets free from application-specific logic, and will help keep application logic free from specifics of models and widgets.\r\n\t\t//\t\tSuch kind of setter functions can be defined in the same manner as widgets (_setXXXAttr()).\r\n\t\t//\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe text box refers to \"value\" property in the controller (with \"ctrl\" ID).\r\n\t\t//\t\tThe controller provides the \"value\" property on behalf of the model (\"model\" property in the controller).\r\n\t\t//\t\tTwo seconds later, the text box changes from \"Foo\" to \"Bar\" as the controller changes the data model it refers to.\r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/parser\", \"dojo/Stateful\", \"dijit/registry\",\r\n\t\t// |\t\t\t\t\t\t\"dijit/form/TextBox\", \"dojox/mvc/ModelRefController\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(parser, Stateful, registry){\r\n\t\t// |\t\t\t\t\t\tmodelFoo = new Stateful({value: \"Foo\"});\r\n\t\t// |\t\t\t\t\t\tmodelBar = new Stateful({value: \"Bar\"});\r\n\t\t// |\t\t\t\t\t\tsetTimeout(function(){ registry.byId(\"ctrl\").set(\"model\", modelBar); }, 2000);\r\n\t\t// |\t\t\t\t\t\tparser.parse();\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox/mvc/ModelRefController\" data-dojo-props=\"model: modelFoo\"></span>\r\n\t\t// |\t\t\t\t<input type=\"text\" data-dojo-type=\"dijit/form/TextBox\" data-dojo-props=\"value: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\t// ownProps: Object\r\n\t\t//\t\tList of property names owned by this controller, instead of the data model.\r\n\t\townProps: null,\r\n\r\n\t\t// _refModelProp: String\r\n\t\t//\t\tThe property name for the data model.\r\n\t\t_refModelProp: \"model\",\r\n\r\n\t\t// _refInModelProp: String\r\n\t\t//\t\tThe property name for the data model, used as the input.\r\n\t\t//\t\tUsed when this controller needs data model (as input) that is different from the data model this controller provides.\r\n\t\t_refInModelProp: \"model\",\r\n\r\n\t\t// model: dojo/Stateful\r\n\t\t//\t\tThe data model.\r\n\t\tmodel: null,\r\n\r\n\t\tpostscript: function(/*Object?*/ params, /*DomNode|String?*/ srcNodeRef){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets _relTargetProp so that the property specified by _refModelProp is used for relative data binding.\r\n\r\n\t\t\tthis._relTargetProp = (params || {})._refModelProp || this._refModelProp;\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tget: function(/*String*/ name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIf getter function is there, use it. Otherwise, get the data from data model of this object.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\r\n\t\t\tif(!this.hasControllerProperty(name)){\r\n\t\t\t\tvar model = this[this._refModelProp];\r\n\t\t\t\treturn !model ? void 0 : model.get ? model.get(name) : model[name];\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_set: function(/*String*/ name, /*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the value to the data model or to this object.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe property value.\r\n\r\n\t\t\tif(!this.hasControllerProperty(name)){\r\n\t\t\t\tvar model = this[this._refModelProp];\r\n\t\t\t\tmodel && (model.set ? model.set(name, value) : (model[name] = value));\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\twatch: function(/*String?*/ name, /*Function*/ callback){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWatch a property in the data model or in this object.\r\n\t\t\t// name: String?\r\n\t\t\t//\t\tThe property name.\r\n\t\t\t// callback: Function\r\n\t\t\t//\t\tThe callback function.\r\n\r\n\t\t\tif(this.hasControllerProperty(name)){\r\n\t\t\t\treturn this.inherited(arguments);\r\n\t\t\t}\r\n\r\n\t\t\tif(!callback){\r\n\t\t\t\tcallback = name;\r\n\t\t\t\tname = null;\r\n\t\t\t}\r\n\r\n\t\t\tvar hm = null, hp = null, _self = this;\r\n\r\n\t\t\tfunction watchPropertiesInModel(/*dojo/Stateful*/ model){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tWatch properties in referred model.\r\n\t\t\t\t// model: dojo/Stateful\r\n\t\t\t\t//\t\tThe model to watch for.\r\n\r\n\t\t\t\t// Unwatch properties of older model.\r\n\t\t\t\tif(hp){ hp.unwatch(); }\r\n\t\t\t\t// Watch properties of newer model.\r\n\t\t\t\tif(model && lang.isFunction(model.set) && lang.isFunction(model.watch)){\r\n\t\t\t\t\thp = model.watch.apply(model, (name ? [name] : []).concat([function(name, old, current){ callback.call(_self, name, old, current); }]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction reflectChangeInModel(/*dojo/Stateful*/ old, /*dojo/Stateful*/ current){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tUpon change in model, detect change in properties, and call watch callbacks.\r\n\t\t\t\t// old: dojo/Stateful\r\n\t\t\t\t//\t\tThe older model.\r\n\t\t\t\t// current: dojo/Stateful\r\n\t\t\t\t//\t\tThe newer model.\r\n\r\n\t\t\t\t// Gather list of properties to notify change in value as model changes.\r\n\t\t\t\tvar props = {};\r\n\t\t\t\tif(!name){\r\n\t\t\t\t\t// If all properties are being watched, find out all properties from older model as well as from newer model.\r\n\t\t\t\t\tarray.forEach([old, current], function(model){\r\n\t\t\t\t\t\tvar list = model && model.get(\"properties\");\r\n\t\t\t\t\t\tif(list){\r\n\t\t\t\t\t\t\t// If the model explicitly specifies the list of properties, use it.\r\n\t\t\t\t\t\t\tarray.forEach(list, function(item){\r\n\t\t\t\t\t\t\t\tif(!_self.hasControllerProperty(item)){ props[item] = 1; }\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// Otherwise, iterate through own properties.\r\n\t\t\t\t\t\t\tfor(var s in model){\r\n\t\t\t\t\t\t\t\tif(model.hasOwnProperty(s) && !_self.hasControllerProperty(s)){ props[s] = 1; }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tprops[name] = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Call watch callbacks for properties.\r\n\t\t\t\tfor(var s in props){\r\n\t\t\t\t\tcallback.call(_self, s, !old ? void 0 : old.get ? old.get(s) : old[s], !current ? void 0 : current.get ? current.get(s) : current[s]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Watch for change in model.\r\n\t\t\thm = Stateful.prototype.watch.call(this, this._refModelProp, function(name, old, current){\r\n\t\t\t\tif(old === current){ return; }\r\n\t\t\t\treflectChangeInModel(old, current);\r\n\t\t\t\twatchPropertiesInModel(current);\r\n\t\t\t});\r\n\r\n\t\t\t// Watch for properties in model.\r\n\t\t\twatchPropertiesInModel(this.get(this._refModelProp));\r\n\r\n\t\t\tvar h = {};\r\n\t\t\th.unwatch = h.remove = function(){\r\n\t\t\t\tif(hp){ hp.unwatch(); hp = null; } if(hm){ hm.unwatch(); hm = null; }\r\n\t\t\t};\r\n\t\t\treturn h; // dojo/handle\r\n\t\t},\r\n\r\n\t\thasControllerProperty: function(/*String*/ name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if this controller itself owns the given property.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\r\n\t\t\treturn name == \"_watchCallbacks\" || name == this._refModelProp || name == this._refInModelProp || (name in (this.ownProps || {})) || (name in this.constructor.prototype) || /^dojoAttach(Point|Event)$/i.test(name); // Let dojoAttachPoint/dojoAttachEvent be this controller's property to support <span data-dojo-type=\"dojox/mvc/ModelRefController\" data-dojo-attach-point=\"controllerNode\"> in widgets-in-template\r\n\t\t}\r\n\t});\r\n});\r\n"]}