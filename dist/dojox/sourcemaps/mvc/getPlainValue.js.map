{"version":3,"sources":["mvc/getPlainValue.js"],"names":["define","array","lang","Stateful","getPlainValueOptions","getType","v","isArray","toString","call","getPlainArray","a","map","item","getPlainValue","this","getPlainObject","o","plain","s","prototype","value","options","replace","c","toUpperCase","setObject","mixin"],"mappings":";;;;;;;AAAAA,QACC,mBACA,kBACA,iBACE,SAASC,EAAOC,EAAMC,GACxB,IAAIC,GAIHC,QAAS,SAAsBC,GAQ9B,OAAOJ,EAAKK,QAAQD,GAAK,QAAe,MAALA,GAAoC,sBAApBE,SAASC,KAAKH,GAA0B,SAAW,SAGvGI,cAAe,SAAwBC,GAQtC,OAAOV,EAAMW,IAAID,EAAG,SAASE,GAAO,OAAOC,EAAcD,EAAME,OAAUA,OAG1EC,eAAgB,SAAoBC,GAMnC,IAAIC,KACJ,IAAI,IAAIC,KAAKF,EACPE,KAAKhB,EAASiB,WAAmB,mBAALD,IAChCD,EAAMC,GAAKL,EAAcG,EAAEE,GAAIJ,OAGjC,OAAOG,GAGRJ,cAAe,SAAsBR,GAIpC,OAAOA,IAILQ,EAAgB,SAAsBO,EAA0CC,GAYnF,OAAQA,GAAWR,GAAe,YAAcQ,GAAWR,GAAeT,QAAQgB,GAAOE,QAAQ,SAAU,SAASC,GAAI,OAAOA,EAAEC,iBAAmBJ,IAIrJ,OAAOnB,EAAKwB,UAAU,0BAA2BxB,EAAKyB,MAAMb,EAAeV","file":"../../mvc/getPlainValue.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/Stateful\"\r\n], function(array, lang, Stateful){\r\n\tvar getPlainValueOptions = {\r\n\t\t// summary:\r\n\t\t//\t\tOptions used for dojox/mvc/getPlainValue().\r\n\r\n\t\tgetType: function(/*Anything*/ v){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the type of the given value.\r\n\t\t\t// v: Anything\r\n\t\t\t//\t\tThe value.\r\n\t\t\t// returns:\r\n\t\t\t//\t\t The type of the given value.\r\n\r\n\t\t\treturn lang.isArray(v) ? \"array\" : v != null && {}.toString.call(v) == \"[object Object]\" ? \"object\" : \"value\";\r\n\t\t},\r\n\r\n\t\tgetPlainArray: function(/*Anything[]*/ a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the stateful version of the given array.\r\n\t\t\t// a: Anything[]\r\n\t\t\t//\t\tThe array.\r\n\t\t\t// returns:\r\n\t\t\t//\t\t The converted array.\r\n\r\n\t\t\treturn array.map(a, function(item){ return getPlainValue(item, this); }, this); // Anything[]\r\n\t\t},\r\n\r\n\t\tgetPlainObject: function(/*Object*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the stateful version of the given object.\r\n\t\t\t// o: Object\r\n\t\t\t//\t\tThe object.\r\n\r\n\t\t\tvar plain = {};\r\n\t\t\tfor(var s in o){\r\n\t\t\t\tif(!(s in Stateful.prototype) && s != \"_watchCallbacks\"){\r\n\t\t\t\t\tplain[s] = getPlainValue(o[s], this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn plain; // Object\r\n\t\t},\r\n\r\n\t\tgetPlainValue: function(/*Anything*/ v){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tJust returns the given value.\r\n\r\n\t\t\treturn v; // Anything\r\n\t\t}\r\n\t};\r\n\r\n\tvar getPlainValue = function(/*Anything*/ value, /*dojox/mvc/getPlainValueOptions*/ options){\r\n\t\t// summary:\r\n\t\t//\t\tCreate a raw value from a dojo/Stateful object.\r\n\t\t// description:\r\n\t\t//\t\tRecursively iterates the stateful value given, and convert them to raw ones.\r\n\t\t// value: Anything\r\n\t\t//\t\tThe stateful value.\r\n\t\t// options: dojox/mvc/getPlainValueOptions\r\n\t\t//\t\tThe object that defines how plain value should be created from stateful value.\r\n\t\t// returns:\r\n\t\t//\t\t The converted value.\r\n\r\n\t\treturn (options || getPlainValue)[\"getPlain\" + (options || getPlainValue).getType(value).replace(/^[a-z]/, function(c){ return c.toUpperCase(); })](value); // Anything\r\n\t};\r\n\r\n\t// lang.setObject() thing is for back-compat, remove it in 2.0\r\n\treturn lang.setObject(\"dojox.mvc.getPlainValue\", lang.mixin(getPlainValue, getPlainValueOptions));\r\n});\r\n"]}