{"version":3,"sources":["mvc/EditStoreRefController.js"],"names":["define","declare","lang","when","getPlainValue","EditModelRefController","StoreRefController","getPlainValueOptions","_removals","_resultsWatchHandle","_refSourceModelProp","queryStore","query","options","this","store","unwatch","_self","queryResult","inherited","arguments","result","results","_beingDestroyed","isArray","watchElements","idx","removals","adds","push","apply","s","then","delegate","isNaN","hasOwnProperty","isFunction","getStore","id","commit","i","length","remove","getIdentity","data","get","_refEditModelProp","put","reset","destroy"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,YACA,kBACA,2BACA,wBACE,SAASC,EAASC,EAAMC,EAAMC,EAAeC,EAAwBC,GACvE,OAAOL,EAAQ,oCAAqCK,EAAoBD,IA2CvEE,qBAAsB,KAItBC,aAIAC,oBAAqB,KAIrBC,oBAAqB,cAErBC,WAAY,SAAoBC,EAA8CC,GAU7E,IAAKC,KAAKC,WAAaH,MAAvB,CACGE,KAAKL,qBAAsBK,KAAKL,oBAAoBO,UACvDF,KAAKN,aACL,IAAIS,EAAQH,KACXI,EAAcJ,KAAKK,UAAUC,WAC7BC,EAASlB,EAAKe,EAAa,SAASI,GACpC,IAAGL,EAAMM,gBAMT,OALGrB,EAAKsB,QAAQF,KACfL,EAAMR,oBAAsBa,EAAQG,cAAc,SAASC,EAAKC,EAAUC,MACtEC,KAAKC,MAAMb,EAAMT,UAAWmB,MAG1BL,IAMR,IAAI,IAAIS,KAJLV,EAAOW,OACTX,EAASnB,EAAK+B,SAASZ,IAGXH,EACTgB,MAAMH,IAAMb,EAAYiB,eAAeJ,IAAM7B,EAAKkC,WAAWlB,EAAYa,MAC3EV,EAAOU,GAAKb,EAAYa,IAG1B,OAAOV,IAGRgB,SAAU,SAAoBC,EAAezB,GAW5C,OADGC,KAAKL,qBAAsBK,KAAKL,oBAAoBO,UAChDF,KAAKK,UAAUC,YAGvBmB,OAAQ,WAIP,GAAGzB,KAAKN,UAAU,CACjB,IAAI,IAAIgC,EAAI,EAAGA,EAAI1B,KAAKN,UAAUiC,OAAQD,IACzC1B,KAAKC,MAAM2B,OAAO5B,KAAKC,MAAM4B,YAAY7B,KAAKN,UAAUgC,KAEzD1B,KAAKN,aAEN,IAAIoC,EAAOxC,EAAcU,KAAK+B,IAAI/B,KAAKgC,mBAAoBhC,KAAKP,sBAChE,GAAGL,EAAKsB,QAAQoB,GACf,IAAQJ,EAAI,EAAGA,EAAII,EAAKH,OAAQD,IAC/B1B,KAAKC,MAAMgC,IAAIH,EAAKJ,SAGrB1B,KAAKC,MAAMgC,IAAIH,GAEhB9B,KAAKK,UAAUC,YAGhB4B,MAAO,WAINlC,KAAKK,UAAUC,WACfN,KAAKN,cAGNyC,QAAS,WAILnC,KAAKL,qBAAsBK,KAAKL,oBAAoBO,UACvDF,KAAKK,UAAUC","file":"../../mvc/EditStoreRefController.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/when\",\r\n\t\"./getPlainValue\",\r\n\t\"./EditModelRefController\",\r\n\t\"./StoreRefController\"\r\n], function(declare, lang, when, getPlainValue, EditModelRefController, StoreRefController){\r\n\treturn declare(\"dojox.mvc.EditStoreRefController\", [StoreRefController, EditModelRefController], {\r\n\t\t// summary:\r\n\t\t//\t\tA child class of dojox/mvc/StoreRefController, managing edits.\r\n\t\t// description:\r\n\t\t//\t\tIn addition to what dojox/mvc/StoreRefController does, the commit() method sends the data model as well as the removed entries in array to the data store.\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe check box refers to \"value\" property in the controller (with \"ctrl\" ID).\r\n\t\t//\t\tThe controller provides the \"value\" property, from the data coming from data store (\"store\" property in the controller), using the first one in array.\r\n\t\t//\t\tTwo seconds later, the check box changes from unchecked to checked.\r\n\t\t//\t\tThe change is committed to the data store, which is reflected to dojo/store/Observable callback. \r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/dom\", \"dojo/parser\", \"dojo/when\", \"dojo/store/Observable\", \"dojo/store/Memory\", \"dijit/registry\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(ddom, parser, when, Observable, Memory, registry){\r\n\t\t// |\t\t\t\t\t\tstore = Observable(new Memory({data: [{id: \"Foo\", value: false}]}));\r\n\t\t// |\t\t\t\t\t\twhen(parser.parse(), function(){\r\n\t\t// |\t\t\t\t\t\t\tregistry.byId(\"ctrl\").queryStore().observe(function(object, previousIndex, newIndex){\r\n\t\t// |\t\t\t\t\t\t\t\talert(\"ID: \" + object.id + \", value: \" + object.value);\r\n\t\t// |\t\t\t\t\t\t\t}, true);\r\n\t\t// |\t\t\t\t\t\t\tvar count = 0;\r\n\t\t// |\t\t\t\t\t\t\tvar h = setInterval(function(){\r\n\t\t// |\t\t\t\t\t\t\t\tddom.byId(\"check\").click();\r\n\t\t// |\t\t\t\t\t\t\t\tregistry.byId(\"ctrl\").commit();\r\n\t\t// |\t\t\t\t\t\t\t\tif(++count >= 2){ clearInterval(h); }\r\n\t\t// |\t\t\t\t\t\t\t}, 2000);\r\n\t\t// |\t\t\t\t\t\t});\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox/mvc/EditStoreRefController\" data-dojo-mixins=\"dojox/mvc/ListController\"\r\n\t\t// |\t\t\t\t data-dojo-props=\"store: store, cursorIndex: 0\"></span>\r\n\t\t// |\t\t\t\t<input id=\"check\" type=\"checkbox\" data-dojo-type=\"dijit/form/CheckBox\" data-dojo-props=\"checked: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\t// getPlainValueOptions: dojox/mvc/getPlainValueOptions\r\n\t\t//\t\tThe options to get plain value from stateful object.\r\n\t\tgetPlainValueOptions: null,\r\n\r\n\t\t// _removals: Object[]\r\n\t\t//\t\tThe list of removed elements.\r\n\t\t_removals: [],\r\n\r\n\t\t// _resultsWatchHandle: dojox/mvc/StatefulArray.watchElements.handle\r\n\t\t//\t\tThe watch handle for model array elements.\r\n\t\t_resultsWatchHandle: null,\r\n\r\n\t\t// _refSourceModelProp: String\r\n\t\t//\t\tThe property name for the data model, that serves as the data source.\r\n\t\t_refSourceModelProp: \"sourceModel\",\r\n\r\n\t\tqueryStore: function(/*Object*/ query, /*dojo/store/api/Store.QueryOptions?*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tQueries the store for objects.\r\n\t\t\t// query: Object\r\n\t\t\t//\t\tThe query to use for retrieving objects from the store.\r\n\t\t\t// options: dojo/store/api/Store.QueryOptions?\r\n\t\t\t//\t\tThe optional arguments to apply to the resultset.\r\n\t\t\t// returns: dojo/store/api/Store.QueryResults\r\n\t\t\t//\t\tThe results of the query, extended with iterative methods.\r\n\r\n\t\t\tif(!(this.store || {}).query){ return; }\r\n\t\t\tif(this._resultsWatchHandle){ this._resultsWatchHandle.unwatch(); }\r\n\t\t\tthis._removals = [];\r\n\t\t\tvar _self = this,\r\n\t\t\t queryResult = this.inherited(arguments),\r\n\t\t\t result = when(queryResult, function(results){\r\n\t\t\t\tif(_self._beingDestroyed){ return; }\r\n\t\t\t\tif(lang.isArray(results)){\r\n\t\t\t\t\t_self._resultsWatchHandle = results.watchElements(function(idx, removals, adds){\r\n\t\t\t\t\t\t[].push.apply(_self._removals, removals);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn results;\r\n\t\t\t});\r\n\t\t\tif(result.then){\r\n\t\t\t\tresult = lang.delegate(result);\r\n\t\t\t}\r\n\t\t\t// For dojo/store/Observable, which adds a function to query result\r\n\t\t\tfor(var s in queryResult){\r\n\t\t\t\tif(isNaN(s) && queryResult.hasOwnProperty(s) && lang.isFunction(queryResult[s])){\r\n\t\t\t\t\tresult[s] = queryResult[s];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\tgetStore: function(/*Number*/ id, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRetrieves an object by its identity.\r\n\t\t\t// id: Number\r\n\t\t\t//\t\tThe identity to use to lookup the object.\r\n\t\t\t// options: Object\r\n\t\t\t//\t\tThe options for dojo/store/*/get().\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe object in the store that matches the given id.\r\n\r\n\t\t\tif(this._resultsWatchHandle){ this._resultsWatchHandle.unwatch(); }\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tcommit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSend the change back to the data source.\r\n\r\n\t\t\tif(this._removals){\r\n\t\t\t\tfor(var i = 0; i < this._removals.length; i++){\r\n\t\t\t\t\tthis.store.remove(this.store.getIdentity(this._removals[i]));\r\n\t\t\t\t}\r\n\t\t\t\tthis._removals = [];\r\n\t\t\t}\r\n\t\t\tvar data = getPlainValue(this.get(this._refEditModelProp), this.getPlainValueOptions);\r\n\t\t\tif(lang.isArray(data)){\r\n\t\t\t\tfor(var i = 0; i < data.length; i++){\r\n\t\t\t\t\tthis.store.put(data[i]);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.store.put(data);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange the model back to its original state.\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._removals = [];\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClean up model watch handle as this object is destroyed.\r\n\r\n\t\t\tif(this._resultsWatchHandle){ this._resultsWatchHandle.unwatch(); }\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}