{"version":3,"sources":["mvc/tests/1.7/models/LoanWizardModel.js"],"names":["define","declare","mvc","StatefulModel","ItemFileWriteStore","chartStore","data","hierarchical","identifier","items","id","x","y","constructor","args","bindInputs","this","Zip","Country","dojo","hitch","_lookupAddrs","Mortgage","Taxes","OtherHousing","BaseIncome","BonusIncome","_recomputeTotalAndPercentages","bind","HousingPercent","_isHousingLessThanOrEqualToThirtyThreePercent","_nonZeroRelevance","TotalHousing","_lookupItem","dataSource","identity","found_item","fetchItemByIdentity","onItem","item","get","isNaN","pThis","query","postalcode","country","xhrArgs","url","sync","content","preventCache","handleAs","load","io","City","set","postalcodes","placeName","County","adminName2","State","adminCode1","error","xhrGet","mortgage","parseInt","taxes","otherHousing","totalHousing","totalIncome","housingPercentage","Math","round","TotalIncome","mortgageItem","taxesItem","otherItem","setValue","newValue"],"mappings":"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","file":"../../../../../mvc/tests/1.7/models/LoanWizardModel.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojox/mvc\",\r\n\t\"dojox/mvc/StatefulModel\",\r\n\t\"dojo/data/ItemFileWriteStore\"\r\n], function(declare, mvc, StatefulModel, ItemFileWriteStore){\r\n\r\n\treturn declare(\"dojox.mvc.tests.models.LoanWizardModel\", [StatefulModel], {\r\n\r\n\t\t// data store for pie chart\r\n\t\tchartStore: new ItemFileWriteStore({ data: {\r\n\t\t\t\"hierarchical\" : false,\r\n\t\t\t\"identifier\"   : \"id\",\r\n\t\t\t\"items\" : [\r\n\t\t\t           { \"id\" : \"mortgage\", \"x\"  : 1, \"y\"\t: 0 },\r\n\t\t\t           { \"id\" : \"taxes\", \"x\"  : 2, \"y\"\t : 0 },\r\n\t\t\t           { \"id\" : \"otherhousing\", \"x\"  : 3, \"y\"\t: 0 }\r\n\t\t\t           ]\r\n\t\t}}),\r\n\r\n\t\tconstructor: function (args) {\r\n\t\t\t// try to precompute address fields from the zipcode and country...\t \r\n\t\t\tmvc.bindInputs([this.Zip, this.Country], dojo.hitch(this, this._lookupAddrs));\r\n\t\t\t// simple dependence of percentages on input values and total\r\n\t\t\tmvc.bindInputs([this.Mortgage, this.Taxes, this.OtherHousing, this.BaseIncome, this.BonusIncome], dojo.hitch(this, this._recomputeTotalAndPercentages));\r\n\r\n\t\t\tmvc.bind(this.HousingPercent, \"value\", this.HousingPercent, \"valid\", dojo.hitch(this, this._isHousingLessThanOrEqualToThirtyThreePercent), true);\r\n\r\n\t\t\tmvc.bind(this.HousingPercent, \"value\", this.HousingPercent, \"relevant\", dojo.hitch(this, this._nonZeroRelevance), true);\r\n\t\t\tmvc.bind(this.TotalHousing, \"value\", this.TotalHousing, \"relevant\", dojo.hitch(this, this._nonZeroRelevance), true);\r\n\r\n\t\t\tthis._recomputeTotalAndPercentages();  // get things going first time...\r\n\t\t},\r\n\r\n\t\t_lookupItem: function( dataSource, identity ) {\r\n\t\t\tvar found_item;\r\n\t\t\tdataSource.fetchItemByIdentity( { \"identity\": identity, \r\n\t\t\t\t\"onItem\": function (item) { found_item = item; } } );\r\n\t\t\treturn found_item;\r\n\t\t},\r\n\r\n\t\t_lookupAddrs: function() {\r\n\t\t\tif ( this.Zip.get(\"value\") == null || isNaN(this.Zip.get(\"value\"))) return;\r\n\t\t\tvar pThis = this;\r\n\t\t\tvar query = { \"postalcode\": this.Zip.get(\"value\"), \"country\": this.Country.get(\"value\") };\t\t\r\n\t\t\tvar xhrArgs = {\r\n\t\t\t\t\turl: \"zips/\"+this.Zip.get(\"value\")+\".json\",\r\n\t\t\t\t\tsync: true,\r\n\t\t\t\t\tcontent: query,\r\n\t\t\t\t\tpreventCache: true,\r\n\t\t\t\t\thandleAs: \"json\",\r\n\t\t\t\t\tload: function(data, io) {\r\n\t\t\t\t\t\tpThis.City.set(\"value\", data.postalcodes[0].placeName );\r\n\t\t\t\t\t\tpThis.County.set(\"value\", data.postalcodes[0].adminName2 );\r\n\t\t\t\t\t\tpThis.State.set(\"value\", data.postalcodes[0].adminCode1 );\r\n\t\t\t\t\t\tpThis.Zip.set(\"valid\", true ); \r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function (data) {\r\n\t\t\t\t\t\t// we couldn't find this country/zip combination...clear the fields and set validity=false\r\n\t\t\t\t\t\tpThis.City.set(\"value\", \"\" );\r\n\t\t\t\t\t\tpThis.County.set(\"value\", \"\" );\r\n\t\t\t\t\t\tpThis.State.set(\"value\", \"\" );\r\n\t\t\t\t\t\tpThis.Zip.set(\"valid\", false );\r\n\t\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t//Call the synchronous xhrGet\r\n\t\t\tvar deferred = dojo.xhrGet(xhrArgs);\t\r\n\t\t},\r\n\r\n\t\t_recomputeTotalAndPercentages: function() {\r\n\t\t\tvar mortgage = parseInt(this.Mortgage.get(\"value\"));\r\n\t\t\tvar taxes = parseInt(this.Taxes.get(\"value\"));\r\n\t\t\tvar otherHousing = parseInt(this.OtherHousing.get(\"value\"));\r\n\t\t\tvar totalHousing = mortgage + taxes + otherHousing;\r\n\r\n\t\t\tvar baseIncome = parseInt(this.BaseIncome.get(\"value\"));\r\n\t\t\tvar bonusIncome = parseInt(this.BonusIncome.get(\"value\"));\r\n\t\t\tvar totalIncome = baseIncome + bonusIncome;\r\n\r\n\t\t\tvar housingPercentage = Math.round(totalHousing / totalIncome * 100);\r\n\r\n\t\t\tthis.HousingPercent.set(\"value\", housingPercentage);\r\n\t\t\tthis.TotalHousing.set(\"value\", totalHousing);\r\n\t\t\tthis.TotalIncome.set(\"value\", totalIncome);\r\n\r\n\t\t\t// map the values into the data source structure required for chart display as well...\r\n\t\t\tvar mortgageItem = this._lookupItem(this.chartStore, \"mortgage\");\r\n\t\t\tvar taxesItem = this._lookupItem(this.chartStore, \"taxes\");\r\n\t\t\tvar otherItem = this._lookupItem(this.chartStore, \"otherhousing\");\r\n\t\t\tthis.chartStore.setValue(mortgageItem, \"y\", mortgage);\r\n\t\t\tthis.chartStore.setValue(taxesItem, \"y\", taxes);\r\n\t\t\tthis.chartStore.setValue(otherItem, \"y\", otherHousing);\r\n\t\t},\r\n\r\n\t\t_isHousingLessThanOrEqualToThirtyThreePercent: function(newValue) {\r\n\t\t\treturn newValue <= 33;\r\n\t\t},\r\n\r\n\t\t_nonZeroRelevance: function(newValue) {\r\n\t\t\tif ( newValue > 0 ) return true;\r\n\t\t\telse return false;\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}