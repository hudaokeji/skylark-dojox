{"version":3,"sources":["mvc/tests/doh/atEquals.js"],"names":["define","doh","Stateful","_WidgetBase","at","equals","register","a","model","value","w","startup","set","slice","is","copy","_getPropertiesAttr","*"],"mappings":";;;;;;;AAAAA,QACC,MACA,gBACA,oBACA,eACA,oBACE,SAASC,EAAKC,EAAUC,EAAaC,EAAIC,GAC3CJ,EAAIK,SAAS,gCACZ,WACC,IAAIC,GAAK,EAAG,EAAG,GACdC,EAAQ,IAAIN,GAAUO,MAAOF,IAC7BG,EAAI,IAAIP,GAAaM,MAAOL,EAAGI,EAAO,SAASH,OAAOA,KACvDK,EAAEC,UACFH,EAAMI,IAAI,QAASL,EAAEM,SACrBZ,EAAIa,GAAGP,EAAGG,EAAED,MAAO,6CACnBC,EAAEE,IAAI,QAASR,EAAGI,EAAO,UACzB,IAAIO,EAAOR,EAAEM,QACbL,EAAMI,IAAI,QAASG,GACnBd,EAAIa,GAAGC,EAAML,EAAED,MAAO,oDAEvB,WACC,IAAIF,GAAK,EAAG,EAAG,GACdC,EAAQ,IAAIN,GAAUO,MAAOF,IAC7BG,EAAI,IAAIP,GAAaa,mBAAoB,WAAY,OAAQ,UAAaC,IAAKb,EAAGI,EAAO,KAAKH,OAAOA,KACtGK,EAAEC,UACFH,EAAMI,IAAI,QAASL,EAAEM,SACrBZ,EAAIa,GAAGP,EAAGG,EAAED,MAAO,6CACnBC,EAAEE,IAAI,QAASR,EAAGI,EAAO,UACzB,IAAIO,EAAOR,EAAEM,QACbL,EAAMI,IAAI,QAASG,GACnBd,EAAIa,GAAGC,EAAML,EAAED,MAAO","file":"../../../../mvc/tests/doh/atEquals.js","sourcesContent":["define([\r\n\t\"doh\",\r\n\t\"dojo/Stateful\",\r\n\t\"dijit/_WidgetBase\",\r\n\t\"dojox/mvc/at\",\r\n\t\"dojox/mvc/equals\"\r\n], function(doh, Stateful, _WidgetBase, at, equals){\r\n\tdoh.register(\"dojox.mvc.tests.doh.atEquals\", [\r\n\t\tfunction single(){\r\n\t\t\tvar a = [0, 1, 2],\r\n\t\t\t model = new Stateful({value: a}),\r\n\t\t\t w = new _WidgetBase({value: at(model, \"value\").equals(equals)});\r\n\t\t\tw.startup();\r\n\t\t\tmodel.set(\"value\", a.slice());\r\n\t\t\tdoh.is(a, w.value, \"The widget should keep the original value\");\r\n\t\t\tw.set(\"value\", at(model, \"value\"));\r\n\t\t\tvar copy = a.slice();\r\n\t\t\tmodel.set(\"value\", copy);\r\n\t\t\tdoh.is(copy, w.value, \"The widget should be updated with the new value\");\r\n\t\t},\r\n\t\tfunction wildcard(){\r\n\t\t\tvar a = [0, 1, 2],\r\n\t\t\t model = new Stateful({value: a}),\r\n\t\t\t w = new _WidgetBase({_getPropertiesAttr: function(){ return [\"value\"]; }, \"*\": at(model, \"*\").equals(equals)});\r\n\t\t\tw.startup();\r\n\t\t\tmodel.set(\"value\", a.slice());\r\n\t\t\tdoh.is(a, w.value, \"The widget should keep the original value\");\r\n\t\t\tw.set(\"value\", at(model, \"value\"));\r\n\t\t\tvar copy = a.slice();\r\n\t\t\tmodel.set(\"value\", copy);\r\n\t\t\tdoh.is(copy, w.value, \"The widget should be updated with the new value\");\r\n\t\t}\r\n\t]);\r\n});\r\n"]}