{"version":3,"sources":["mvc/tests/doh/StatefulArray.js"],"names":["define","doh","Stateful","StatefulArray","register","name","runTest","dfd","Deferred","a","this","h","watchElements","idx","removals","adds","is","e","errback","splice","callback","tearDown","remove","slice","concat","t","isInstanceOf","changes","getTestErrback","push","length","set"],"mappings":";;;;;;;AAAAA,QACC,MACA,gBACA,2BACE,SAASC,EAAKC,EAAUC,GAC1BF,EAAIG,SAAS,sCAEXC,KAAM,SACNC,QAAS,WACR,IAAIC,EAAM,IAAIN,EAAIO,SACjBC,EAAI,IAAIN,GAAe,EAAG,EAAG,EAAG,IAiBjC,OAfAO,KAAKC,EAAIF,EAAEG,cAAc,SAASC,EAAKC,EAAUC,GAChD,IACCd,EAAIe,GAAG,EAAGH,EAAK,mCACfZ,EAAIe,IAAI,EAAG,GAAIF,EAAU,yCACzBb,EAAIe,IAAI,IAAK,KAAMD,EAAM,+BACzB,MAAME,GACNV,EAAIW,QAAQD,MAIdR,EAAEU,QAAQ,EAAG,EAAG,IAAK,KAErBlB,EAAIe,IAAI,EAAG,IAAK,IAAK,GAAIP,EAAG,+CAC5BF,EAAIa,SAAS,GAENb,GAERc,SAAU,WACTX,KAAKC,GAAKD,KAAKC,EAAEW,WAGnB,WACC,IAAIb,EAAI,IAAIN,GAAe,EAAG,EAAG,EAAG,IACpCF,EAAIe,IAAI,EAAG,GAAIP,EAAEc,OAAO,EAAG,GAAI,0CAC/BtB,EAAIe,IAAI,GAAIP,EAAEc,OAAO,GAAI,GAAI,+BAE9B,WACC,IAAId,EAAI,IAAIN,GAAe,EAAG,EAAG,EAAG,IACpCF,EAAIe,IAAI,EAAG,EAAG,EAAG,GAAIP,EAAEe,SAAU,8DACjCvB,EAAIe,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIP,EAAEe,QAAQ,EAAG,IAAK,EAAG,EAAG,IAAK,yCACjEvB,EAAIe,IAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIP,EAAEe,OAAO,EAAG,GAAI,EAAG,EAAG,IAAK,qCAEhE,WACC,IAAIf,EAAI,IAAIN,EACZF,EAAIwB,EAAEhB,EAAEiB,aAAaxB,GAAW,kDAChCD,EAAIwB,EAAEhB,EAAEiB,aAAavB,GAAgB,mEAGrCE,KAAM,eACNC,QAAS,WACR,IAAIC,EAAM,IAAIN,EAAIO,SACjBC,EAAI,IAAIN,GAAe,EAAG,EAAG,EAAG,IAChCwB,KAwBD,OAvBAjB,KAAKC,EAAIF,EAAEG,cAAcL,EAAIqB,eAAe,SAASf,EAAKC,EAAUC,GACnEY,EAAQE,MACPhB,IAAKA,EACLC,SAAUA,EACVC,KAAMA,IAEJY,EAAQG,QAAU,IACpB7B,EAAIe,GAAG,EAAGW,EAAQG,OAAQ,yCAC1B7B,EAAIe,IACHH,IAAK,EACLC,UAAW,EAAG,GACdC,SACEY,EAAQ,GAAI,0DACf1B,EAAIe,IACHH,IAAK,EACLC,YACAC,WAAO,OAAQ,IACbY,EAAQ,GAAI,mDACfpB,EAAIa,SAAS,OAGfX,EAAEsB,IAAI,SAAU,GAChBtB,EAAEsB,IAAI,SAAU,GACTxB,GAERc,SAAU,WACTX,KAAKC,GAAKD,KAAKC,EAAEW","file":"../../../../mvc/tests/doh/StatefulArray.js","sourcesContent":["define([\r\n\t\"doh\",\r\n\t\"dojo/Stateful\",\r\n\t\"dojox/mvc/StatefulArray\"\r\n], function(doh, Stateful, StatefulArray){\r\n\tdoh.register(\"dojox.mvc.tests.doh.StatefulArray\", [\r\n\t\t{\r\n\t\t\tname: \"splice\",\r\n\t\t\trunTest: function(){\r\n\t\t\t\tvar dfd = new doh.Deferred(),\r\n\t\t\t\t a = new StatefulArray([0, 1, 2, 3]);\r\n\r\n\t\t\t\tthis.h = a.watchElements(function(idx, removals, adds){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tdoh.is(1, idx, \"The removal starts with index 1\");\r\n\t\t\t\t\t\tdoh.is([1, 2], removals, \"Index 1 and index 2 should be removed\");\r\n\t\t\t\t\t\tdoh.is([100, 101], adds, \"100 and 101 should be added\");\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tdfd.errback(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\ta.splice(-3, 2, 100, 101);\r\n\r\n\t\t\t\tdoh.is([0, 100, 101, 3], a, \"The array should end up with 0, 100, 101, 3\");\r\n\t\t\t\tdfd.callback(1);\r\n\r\n\t\t\t\treturn dfd;\r\n\t\t\t},\r\n\t\t\ttearDown: function(){\r\n\t\t\t\tthis.h && this.h.remove();\r\n\t\t\t}\r\n\t\t},\r\n\t\tfunction slice(){\r\n\t\t\tvar a = new StatefulArray([0, 1, 2, 3]);\r\n\t\t\tdoh.is([1, 2], a.slice(-3, 3), \"Index 1 and index 2 should be returned\");\r\n\t\t\tdoh.is([1], a.slice(-3, -2), \"Index 1 should be returned\");\r\n\t\t},\r\n\t\tfunction concat(){\r\n\t\t\tvar a = new StatefulArray([0, 1, 2, 3]);\r\n\t\t\tdoh.is([0, 1, 2, 3], a.concat(), \"concat() with empty args should end up with the same array\");\r\n\t\t\tdoh.is([0, 1, 2, 3, 4, 5, 6, 7, 8], a.concat([4, 5], [6, 7, 8]), \"concat() should support multiple args\");\r\n\t\t\tdoh.is([0, 1, 2, 3, 4, 5, 6, 7, 8], a.concat(4, 5, [6, 7, 8]), \"concat() should non-array values\");\r\n\t\t},\r\n\t\tfunction isInstanceOf(){\r\n\t\t\tvar a = new StatefulArray();\r\n\t\t\tdoh.t(a.isInstanceOf(Stateful), \"StatefulArray should be a subclass of Stateful\");\r\n\t\t\tdoh.t(a.isInstanceOf(StatefulArray), \"StatefulArray's instance should work with isInstanceOf() call\");\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"changeLength\",\r\n\t\t\trunTest: function(){\r\n\t\t\t\tvar dfd = new doh.Deferred(),\r\n\t\t\t\t a = new StatefulArray([0, 1, 2, 3]),\r\n\t\t\t\t changes = [];\r\n\t\t\t\tthis.h = a.watchElements(dfd.getTestErrback(function(idx, removals, adds){\r\n\t\t\t\t\tchanges.push({\r\n\t\t\t\t\t\tidx: idx,\r\n\t\t\t\t\t\tremovals: removals,\r\n\t\t\t\t\t\tadds: adds\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(changes.length >= 2){\r\n\t\t\t\t\t\tdoh.is(2, changes.length, \"Two changes should have been notified\");\r\n\t\t\t\t\t\tdoh.is({\r\n\t\t\t\t\t\t\tidx: 2,\r\n\t\t\t\t\t\t\tremovals: [2, 3],\r\n\t\t\t\t\t\t\tadds: []\r\n\t\t\t\t\t\t}, changes[0], \"The first change should remove two elements at index 2\");\r\n\t\t\t\t\t\tdoh.is({\r\n\t\t\t\t\t\t\tidx: 2,\r\n\t\t\t\t\t\t\tremovals: [],\r\n\t\t\t\t\t\t\tadds: [void 0, void 0]\r\n\t\t\t\t\t\t}, changes[1], \"The second change should add empty two elements\");\r\n\t\t\t\t\t\tdfd.callback(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\ta.set(\"length\", 2);\r\n\t\t\t\ta.set(\"length\", 4);\r\n\t\t\t\treturn dfd;\r\n\t\t\t},\r\n\t\t\ttearDown: function(){\r\n\t\t\t\tthis.h && this.h.remove();\r\n\t\t\t}\r\n\t\t}\r\n\t]);\r\n});\r\n"]}