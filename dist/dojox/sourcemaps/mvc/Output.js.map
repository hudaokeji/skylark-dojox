{"version":3,"sources":["mvc/Output.js"],"names":["define","declare","lang","dom","_WidgetBase","regexp","exprchar","templateString","postscript","params","srcNodeRef","this","byId","innerHTML","inherited","arguments","set","name","value","_output","_updateBinding","old","current","domNode","_exprRepl","tmpl","pThis","transform","key","exp","substr","length","val","eval","hitch","replace","RegExp","escapeString","match","format","toString"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,WACA,oBACA,eACE,SAASC,QAASC,KAAMC,IAAKC,YAAaC,QAE5C,OAAOJ,QAAQ,mBAAoBG,aAwBlCE,SAAU,IAIVC,eAAiB,GAEjBC,WAAY,SAASC,EAAQC,GAG5BC,KAAKD,WAAaP,IAAIS,KAAKF,GACxBC,KAAKD,aACPC,KAAKJ,eAAiBI,KAAKD,WAAWG,UACtCF,KAAKD,WAAWG,UAAY,IAE7BF,KAAKG,UAAUC,YAGhBC,IAAK,SAASC,EAAMC,GAOnBP,KAAKG,UAAUC,WACH,UAATE,GACFN,KAAKQ,WAMPC,eAAgB,SAASH,EAAMI,EAAKC,GAKnCX,KAAKG,UAAUC,WACfJ,KAAKQ,WAGNA,QAAS,YAKSR,KAAKD,YAAcC,KAAKY,SAC9BV,UAAYF,KAAKJ,eAAiBI,KAAKa,UAAUb,KAAKJ,gBAAkBI,KAAKO,OAGzFM,UAAW,SAASC,MAKnB,IAAIC,MAAQf,KAAMgB,UAAY,SAAST,MAAOU,KAC7C,IAAIV,MAAO,MAAO,GAClB,IAAIW,IAAMX,MAAMY,OAAO,GAEvB,KADAD,IAAMA,IAAIC,OAAO,EAAGD,IAAIE,OAAS,GAC5BL,MAAM,CACV,IAAIM,IAAMC,KAAKJ,KACf,OAAQG,KAAc,GAAPA,IAAWA,IAAM,KAIlC,OADAL,UAAYzB,KAAKgC,MAAMvB,KAAMgB,WACtBF,KAAKU,QAAQ,IAAIC,OAAO/B,OAAOgC,aAAa1B,KAAKL,UAAU,UAAY,KAC7E,SAASgC,EAAOV,EAAKW,GACpB,OAAOZ,UAAUW,EAAOV,GAAKY","file":"../../mvc/Output.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom\",\r\n\t\"dijit/_WidgetBase\",\r\n\t\"dojo/regexp\"\r\n], function(declare, lang, dom, _WidgetBase, regexp){\r\n\r\n\treturn declare(\"dojox.mvc.Output\", _WidgetBase, {\r\n\t\t// summary:\r\n\t\t//\t\tA simple widget that displays templated output, parts of which may\r\n\t\t//\t\tbe data-bound.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tSimple output example:\r\n\t\t//\r\n\t\t//\t\t|  <span data-dojo-type=\"dojox/mvc/Output\" data-dojo-props=\"value: at(model, 'balance')\"></span>\r\n\t\t//\r\n\t\t//\t\tAnother simple output example:\r\n\t\t//\r\n\t\t//\t\t|  <span data-dojo-type=\"dojox/mvc/Output\" data-dojo-props=\"value: at(model, 'balance')\">\r\n\t\t//\t\t|    Your balance is: ${this.value}\r\n\t\t//\t\t|  </span>\r\n\t\t//\r\n\t\t//\r\n\t\t//\t\tThe output widget being data-bound, if the balance changes in the\r\n\t\t//\t\tmodel, the content within the `<span>` will be\r\n\t\t//\t\tupdated accordingly.\r\n\r\n\t\t// exprchar:  Character\r\n\t\t//\t\tCharacter to use for a substitution expression, for a substitution string like ${this.value}\r\n\t\t//\t\tIf this class is declared in a template HTML and exprchar is used in in-line template of this class, something other than `$` should be specified to avoid conflict with exprchar of outer-template.\r\n\t\texprchar: '$',\r\n\t\r\n\t\t// templateString: [private] String\r\n\t\t//\t\tThe template or data-bound output content.\r\n\t\ttemplateString : \"\",\r\n\t\r\n\t\tpostscript: function(params, srcNodeRef){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride and save template from body.\r\n\t\t\tthis.srcNodeRef = dom.byId(srcNodeRef);\r\n\t\t\tif(this.srcNodeRef){\r\n\t\t\t\tthis.templateString = this.srcNodeRef.innerHTML;\r\n\t\t\t\tthis.srcNodeRef.innerHTML = \"\";\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\t\r\n\t\tset: function(name, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride and refresh output on value change.\r\n\t\t\t// name:\r\n\t\t\t//\t\tThe property to set.\r\n\t\t\t// value:\r\n\t\t\t//\t\tThe value to set in the property.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(name === \"value\"){\r\n\t\t\t\tthis._output();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t////////////////////// PRIVATE METHODS ////////////////////////\r\n\t\r\n\t\t_updateBinding: function(name, old, current){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRebuild output UI if data binding changes.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._output();\r\n\t\t},\r\n\t\r\n\t\t_output: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProduce the data-bound output.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar outputNode = this.srcNodeRef || this.domNode;\r\n\t\t\toutputNode.innerHTML = this.templateString ? this._exprRepl(this.templateString) : this.value;\r\n\t\t},\r\n\t\r\n\t\t_exprRepl: function(tmpl){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDoes substitution of ${foo+bar} type expressions in template string.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar pThis = this, transform = function(value, key){\r\n\t\t\t\tif(!value){return \"\";}\r\n\t\t\t\tvar exp = value.substr(2);\r\n\t\t\t\texp = exp.substr(0, exp.length - 1);\r\n\t\t\t\twith(pThis){\r\n\t\t\t\t\tvar val = eval(exp);\r\n\t\t\t\t\treturn (val || val == 0 ? val : \"\");\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttransform = lang.hitch(this, transform);\r\n\t\t\treturn tmpl.replace(new RegExp(regexp.escapeString(this.exprchar)+\"(\\{.*?\\})\",\"g\"),\r\n\t\t\t\tfunction(match, key, format){\r\n\t\t\t\t\treturn transform(match, key).toString();\r\n\t\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n"]}