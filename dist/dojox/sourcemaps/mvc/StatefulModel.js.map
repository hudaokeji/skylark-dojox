{"version":3,"sources":["mvc/StatefulModel.js"],"names":["define","kernel","lang","array","declare","Stateful","getStateful","getPlainValue","StatefulArray","deprecated","StatefulModel","data","store","valid","value","reset","isObject","this","Date","RegExp","set","x","isFunction","commit","_commit","ds","_saveToStore","toPlainObject","getPlainValueOptions","splice","idx","n","a","apply","_toArray","arguments","i","length","_removals","push","add","name","stateful","get","test","toString","Error","remove","elem","undefined","valueOf","constructor","args","_createModel","getStatefulOptions","isArray","s","hasOwnProperty","forEach","d","getIdentity","dataToCommit","put","mixin","getType","v","call","getStatefulArray","_self","statefularray","map","item","prototype","getStatefulObject","o","object","getStatefulValue","watch","getPlainArray","getPlainObject","plain"],"mappings":"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","file":"../../mvc/StatefulModel.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/Stateful\",\r\n\t\"./getStateful\",\r\n\t\"./getPlainValue\",\r\n\t\"./StatefulArray\"\r\n], function(kernel, lang, array, declare, Stateful, getStateful, getPlainValue, StatefulArray){\r\n\r\n\tkernel.deprecated(\"dojox/mvc/StatefulModel\", \"Use dojox/mvc/getStateful, dojox/mvc/getPlainValue, dojox/mvc/StatefulArray or one of the dojox/mvc/*RefControllers instead\");\r\n\r\n\tvar StatefulModel = declare(\"dojox.mvc.StatefulModel\", [Stateful], {\r\n\t\t// summary:\r\n\t\t//\t\tDeprecated.  Use dojox/mvc/getStateful, dojox/mvc/getPlainValue, dojox/mvc/StatefulArray or one of the dojox/mvc/*RefControllers instead.\r\n\t\t//\t\tThe first-class native JavaScript data model based on dojo/Stateful\r\n\t\t//\t\tthat wraps any data structure(s) that may be relevant for a view,\r\n\t\t//\t\ta view portion, a dijit or any custom view layer component.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tA data model is effectively instantiated with a plain JavaScript\r\n\t\t//\t\tobject which specifies the initial data structure for the model.\r\n\t\t//\r\n\t\t//\t\t|\tvar struct = {\r\n\t\t//\t\t|\t\torder\t: \"abc123\",\r\n\t\t//\t\t|\t\tshipto\t: {\r\n\t\t//\t\t|\t\t\taddress\t: \"123 Example St, New York, NY\",\r\n\t\t//\t\t|\t\t\tphone\t: \"212-000-0000\"\r\n\t\t//\t\t|\t\t},\r\n\t\t//\t\t|\t\titems : [\r\n\t\t//\t\t|\t\t\t{ part : \"x12345\", num : 1 },\r\n\t\t//\t\t|\t\t\t{ part : \"n09876\", num : 3 }\r\n\t\t//\t\t|\t\t]\r\n\t\t//\t\t|\t};\r\n\t\t//\t\t|\r\n\t\t//\t\t|\tvar model = dojox/mvc.newStatefulModel({ data : struct });\r\n\t\t//\r\n\t\t//\t\tThe simple example above shows an inline plain JavaScript object\r\n\t\t//\t\tillustrating the data structure to prime the model with, however\r\n\t\t//\t\tthe underlying data may be made available by other means, such as\r\n\t\t//\t\tfrom the results of a dojo/store or dojo/data query.\r\n\t\t//\r\n\t\t//\t\tTo deal with stores providing immediate values or Promises, a\r\n\t\t//\t\tfactory method for model instantiation is provided. This method\r\n\t\t//\t\twill either return an immediate model or a model Promise depending\r\n\t\t//\t\ton the nature of the store.\r\n\t\t//\r\n\t\t//\t\t|\tvar model = mvc.newStatefulModel({ store: someStore });\r\n\t\t//\r\n\t\t//\t\tThe created data model has the following properties:\r\n\t\t//\r\n\t\t//\t\t- It enables dijits or custom components in the view to \"bind\" to\r\n\t\t//\t\t  data within the model. A bind creates a bi-directional update\r\n\t\t//\t\t  mechanism between the bound view and the underlying data:\r\n\t\t//\r\n\t\t//\t\ta) The data model is \"live\" data i.e. it maintains any updates\r\n\t\t//\t\tdriven by the view on the underlying data.\r\n\t\t//\r\n\t\t//\t\tb) The data model issues updates to portions of the view if the\r\n\t\t//\t\tdata they bind to is updated in the model. For example, if two\r\n\t\t//\t\tdijits are bound to the same part of a data model, updating the\r\n\t\t//\t\tvalue of one in the view will cause the data model to issue an\r\n\t\t//\t\tupdate to the other containing the new value.\r\n\t\t//\r\n\t\t//\t\t- The data model internally creates a tree of dojo/Stateful\r\n\t\t//\t\t  objects that matches the input, which is effectively a plain\r\n\t\t//\t\t  JavaScript object i.e. \"pure data\". This tree allows dijits or\r\n\t\t//\t\t  other view components to bind to any node within the data model.\r\n\t\t//\t\t  Typically, dijits with simple values bind to leaf nodes of the\r\n\t\t//\t\t  datamodel, whereas containers bind to internal nodes of the\r\n\t\t//\t\t  datamodel. For example, a datamodel created using the object below\r\n\t\t//\t\t  will generate the dojo/Stateful tree as shown:\r\n\t\t//\r\n\t\t//\t\t|\tvar model = dojox/mvc/newStatefulModel({ data : {\r\n\t\t//\t\t|\t\tprop1\t: \"foo\",\r\n\t\t//\t\t|\t\tprop2\t: {\r\n\t\t//\t\t|\t\t\tleaf1\t: \"bar\",\r\n\t\t//\t\t|\t\t\tleaf2\t: \"baz\"\r\n\t\t//\t\t|\t\t}\r\n\t\t//\t\t|\t}});\r\n\t\t//\t\t|\r\n\t\t//\t\t|\t// The created dojo/Stateful tree is illustrated below (all nodes are dojo/Stateful objects)\r\n\t\t//\t\t|\t//\r\n\t\t//\t\t|\t//\t\t            o  (root node)\r\n\t\t//\t\t|\t//\t\t           / \\\r\n\t\t//\t\t|\t//\t (prop1 node) o   o (prop2 node)\r\n\t\t//\t\t|\t//\t\t             / \\\r\n\t\t//\t\t|\t//\t   (leaf1 node)\to   o (leaf2 node)\r\n\t\t//\t\t|\t//\r\n\t\t//\t\t|\t// The root node is accessed using the expression \"model\" (the var name above). The prop1\r\n\t\t//\t\t|\t// node is accessed using the expression \"model.prop1\", the leaf2 node is accessed using\r\n\t\t//\t\t|\t// the expression \"model.prop2.leaf2\" and so on.\r\n\t\t//\r\n\t\t//\t\t- Each of the dojo/Stateful nodes in the model may store data as well\r\n\t\t//\t\t  as associated \"meta-data\", which includes things such as whether\r\n\t\t//\t\t  the data is required or readOnly etc. This meta-data differs from\r\n\t\t//\t\t  that maintained by, for example, an individual dijit in that this\r\n\t\t//\t\t  is maintained by the datamodel and may therefore be affected by\r\n\t\t//\t\t  datamodel-level constraints that span multiple dijits or even\r\n\t\t//\t\t  additional criteria such as server-side computations.\r\n\t\t//\r\n\t\t//\t\t- When the model is backed by a dojo/store or dojo/data query, the\r\n\t\t//\t\t  client-side updates can be persisted once the client is ready to\r\n\t\t//\t\t  \"submit\" the changes (which may include both value changes or\r\n\t\t//\t\t  structural changes - adds/deletes). The datamodel allows control\r\n\t\t//\t\t  over when the underlying data is persisted i.e. this can be more\r\n\t\t//\t\t  incremental or batched per application needs.\r\n\t\t//\r\n\t\t//\t\tThere need not be a one-to-one association between a datamodel and\r\n\t\t//\t\ta view or portion thereof. For example, multiple datamodels may\r\n\t\t//\t\tback the dijits in a view. Indeed, this may be useful where the\r\n\t\t//\t\tbinding data comes from a number of data sources or queries, for\r\n\t\t//\t\texample. Just as well, dijits from multiple portions of the view\r\n\t\t//\t\tmay be bound to a single datamodel.\r\n\t\t//\r\n\t\t//\t\tFinally, requiring this class also enables all dijits to become data\r\n\t\t//\t\tbinding aware. The data binding is commonly specified declaratively\r\n\t\t//\t\tvia the \"ref\" property in the \"data-dojo-props\" attribute value.\r\n\t\t//\r\n\t\t//\t\tTo illustrate, the following is the \"Hello World\" of such data-bound\r\n\t\t//\t\twidget examples:\r\n\t\t//\r\n\t\t//\r\n\t\t//\t\t|\t<script>\r\n\t\t//\t\t|\t\tvar model;\r\n\t\t//\t\t|\t\trequire([\"dojox/mvc\", \"dojo/parser\"], function(mvc, parser){\r\n\t\t//\t\t|\t\t\tmodel = mvc.newStatefulModel({ data : {\r\n\t\t//\t\t|\t\t\t\thello : \"Hello World\"\r\n\t\t//\t\t|\t\t\t}});\r\n\t\t//\t\t|\t\t\tparser.parse();\r\n\t\t//\t\t|\t\t});\r\n\t\t//\t\t|\t</script>\r\n\t\t//\t\t|\r\n\t\t//\t\t|\t<input id=\"helloInput\" data-dojo-type=\"dijit/form/TextBox\"\r\n\t\t//\t\t|\t\tdata-dojo-props=\"ref: 'model.hello'\">\r\n\t\t//\r\n\t\t//\t\tSuch data binding awareness for dijits is added by extending the\r\n\t\t//\t\tdijit/_WidgetBase class to include data binding capabilities\r\n\t\t//\t\tprovided by dojox/mvc/_DataBindingMixin, and this class declares a\r\n\t\t//\t\tdependency on dojox/mvc/_DataBindingMixin.\r\n\t\t//\r\n\t\t//\t\tThe presence of a data model and the data-binding capabilities\r\n\t\t//\t\toutlined above support the flexible development of a number of MVC\r\n\t\t//\t\tpatterns on the client. As an example, CRUD operations can be\r\n\t\t//\t\tsupported with minimal application code.\r\n\t\t//\r\n\t\t// tags:\r\n\t\t//\t\tdeprecated\r\n\t\r\n\t\t// data: Object\r\n\t\t//\t\tThe plain JavaScript object / data structure used to initialize\r\n\t\t//\t\tthis model. At any point in time, it holds the lasted saved model\r\n\t\t//\t\tstate.\r\n\t\t//\t\tEither data or store property must be provided.\r\n\t\tdata: null,\r\n\r\n\t\t// store: dojo/store/DataStore\r\n\t\t//\t\tThe data store from where to retrieve initial data for this model.\r\n\t\t//\t\tAn optional query may also be provided along with this store.\r\n\t\t//\t\tEither data or store property must be provided.\r\n\t\tstore: null,\r\n\t\r\n\t\t// valid: boolean\r\n\t\t//\t\tWhether this model deems the associated data to be valid.\r\n\t\tvalid: true,\r\n\r\n\t\t// value: Object\r\n\t\t//\t\tThe associated value (if this is a leaf node). The value of\r\n\t\t//\t\tintermediate nodes in the model is not defined.\r\n\t\tvalue: \"\",\r\n\r\n\t\t//////////////////////// PUBLIC METHODS / API ////////////////////////\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResets this data model values to its original state.\r\n\t\t\t//\t\tStructural changes to the data model (such as adds or removes)\r\n\t\t\t//\t\tare not restored.\r\n\t\t\tif(lang.isObject(this.data) && !(this.data instanceof Date) && !(this.data instanceof RegExp)){\t\r\n\t\t\t\tfor(var x in this){\r\n\t\t\t\t\tif(this[x] && lang.isFunction(this[x].reset)){\r\n\t\t\t\t\t\tthis[x].reset();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.set(\"value\", this.data);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcommit: function(/*\"dojo/store/DataStore?\"*/ store){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCommits this data model:\r\n\t\t\t//\r\n\t\t\t//\t\t- Saves the current state such that a subsequent reset will not\r\n\t\t\t//\t\t  undo any prior changes.\r\n\t\t\t//\t\t- Persists client-side changes to the data store, if a store\r\n\t\t\t//\t\t  has been supplied as a parameter or at instantiation.\r\n\t\t\t// store:\r\n\t\t\t//\t\tdojo/store/DataStore\r\n\t\t\t//\t\tOptional dojo/store/DataStore to use for this commit, if none\r\n\t\t\t//\t\tprovided but one was provided at instantiation time, that store\r\n\t\t\t//\t\twill be used instead.\r\n\t\t\tthis._commit();\r\n\t\t\tvar ds = store || this.store;\r\n\t\t\tif(ds){\r\n\t\t\t\tthis._saveToStore(ds);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttoPlainObject: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProduces a plain JavaScript object representation of the data\r\n\t\t\t//\t\tcurrently within this data model.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tObject\r\n\t\t\t//\t\tThe plain JavaScript object representation of the data in this\r\n\t\t\t//\t\tmodel.\r\n\t\t\treturn getPlainValue(this, StatefulModel.getPlainValueOptions);\r\n\t\t},\r\n\r\n\t\tsplice: function(/*Number*/ idx, /*Number*/ n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves and then adds some elements to this array.\r\n\t\t\t//\t\tUpdates the removed/added elements, as well as the length, as stateful.\r\n\t\t\t// idx: Number\r\n\t\t\t//\t\tThe index where removal/addition should be done.\r\n\t\t\t// n: Number\r\n\t\t\t//\t\tHow many elements to be removed at idx.\r\n\t\t\t// varargs: Anything[]\r\n\t\t\t//\t\tThe elements to be added to idx.\r\n\t\t\t// returns: dojox/mvc/StatefulArray\r\n\t\t\t//\t\tThe removed elements.\r\n\r\n\t\t\tvar a = (new StatefulArray([])).splice.apply(this, lang._toArray(arguments));\r\n\t\t\tfor(var i = 0; i < a.length; i++){\r\n\t\t\t\t(this._removals = this._removals || []).push(a[i].toPlainObject());\r\n\t\t\t}\r\n\t\t\treturn a;\r\n\t\t},\r\n\r\n\t\tadd: function(/*String*/ name, /*dojo/Stateful*/ stateful){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds a dojo/Stateful tree represented by the given\r\n\t\t\t//\t\tdojox/mvc/StatefulModel at the given property name.\r\n\t\t\t// name:\r\n\t\t\t//\t\tThe property name to use whose value will become the given\r\n\t\t\t//\t\tdijit/Stateful tree.\r\n\t\t\t// stateful:\r\n\t\t\t//\t\tThe dojox/mvc/StatefulModel to insert.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIn case of arrays, the property names are indices passed\r\n\t\t\t//\t\tas Strings. An addition of such a dojo/Stateful node\r\n\t\t\t//\t\tresults in right-shifting any trailing sibling nodes.\r\n\r\n\t\t\tif(typeof this.get(\"length\") === \"number\" && /^[0-9]+$/.test(name.toString())){\r\n\t\t\t\tif(this.get(\"length\") < (name - 0)){\r\n\t\t\t\t\tthrow new Error(\"Out of bounds insert attempted, must be contiguous.\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.splice(name - 0, 0, stateful);\r\n\t\t\t}else{\r\n\t\t\t\tthis.set(name, stateful);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremove: function(/*String*/ name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves the dojo/Stateful tree at the given property name.\r\n\t\t\t// name:\r\n\t\t\t//\t\tThe property name from where the tree will be removed.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIn case of arrays, the property names are indices passed\r\n\t\t\t//\t\tas Strings. A removal of such a dojo/Stateful node\r\n\t\t\t//\t\tresults in left-shifting any trailing sibling nodes.\r\n\t\t\tif(typeof this.get(\"length\") === \"number\" && /^[0-9]+$/.test(name.toString())){\r\n\t\t\t\tif(!this.get(name)){\r\n\t\t\t\t\tthrow new Error(\"Out of bounds delete attempted - no such index: \" + n);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.splice(name - 0, 1);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tvar elem = this.get(name);\r\n\t\t\t\tif(!elem){\r\n\t\t\t\t\tthrow new Error(\"Illegal delete attempted - no such property: \" + name);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._removals = this._removals || [];\r\n\t\t\t\t\tthis._removals.push(elem.toPlainObject());\r\n\t\t\t\t\tthis.set(name, undefined);\r\n\t\t\t\t\tdelete this[name];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tvalueOf: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the value representation of the data currently within this data model.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tObject\r\n\t\t\t//\t\tThe object representation of the data in this model.\r\n\t\t\treturn this.toPlainObject();\r\n\t\t},\r\n\r\n\t\ttoString: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the string representation of the data currently within this data model.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tString\r\n\t\t\t//\t\tThe object representation of the data in this model.\r\n\t\t\treturn this.value === \"\" && this.data ? this.data.toString() : this.value.toString();\r\n\t\t},\r\n\r\n\t\t//////////////////////// PRIVATE INITIALIZATION METHOD ////////////////////////\r\n\r\n\t\tconstructor: function(/*Object*/ args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInstantiates a new data model that view components may bind to.\r\n\t\t\t//\t\tThis is a private constructor, use the factory method\r\n\t\t\t//\t\tinstead: dojox/mvc/newStatefulModel(args)\r\n\t\t\t// args:\r\n\t\t\t//\t\tThe mixin properties.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCreates a tree of dojo/Stateful objects matching the initial\r\n\t\t\t//\t\tdata structure passed as input. The mixin property \"data\" is\r\n\t\t\t//\t\tused to provide a plain JavaScript object directly representing\r\n\t\t\t//\t\tthe data structure.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar data = (args && \"data\" in args) ? args.data : this.data;\r\n\t\t\tthis._createModel(data);\r\n\t\t},\r\n\r\n\t\t//////////////////////// PRIVATE METHODS ////////////////////////\r\n\r\n\t\t_createModel: function(/*Object*/ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate this data model from provided input data.\r\n\t\t\t//\tobj:\r\n\t\t\t//\t\tThe input for the model, as a plain JavaScript object.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(data != null){\r\n\t\t\t\tdata = getStateful(data, StatefulModel.getStatefulOptions);\r\n\t\t\t\tif(lang.isArray(data)){\r\n\t\t\t\t\t// Some consumers of dojox/mvc/StatefulModel inherits it via dojo/declare(), where we cannot use array inheritance technique\r\n\t\t\t\t\t// (dojo/declare() does not support return value in constructor)\r\n\t\t\t\t\tthis.length = 0;\r\n\t\t\t\t\t[].splice.apply(this, data);\r\n\t\t\t\t}else if(lang.isObject(data)){\r\n\t\t\t\t\tfor(var s in data){\r\n\t\t\t\t\t\tif(data.hasOwnProperty(s)){\r\n\t\t\t\t\t\t\tthis[s] = data[s];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.set(\"value\", data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_commit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCommits this data model, saves the current state into data to become the saved state, \r\n\t\t\t//\t\tso a reset will not undo any prior changes.  \r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tfor(var x in this){\r\n\t\t\t\tif(this[x] && lang.isFunction(this[x]._commit)){\r\n\t\t\t\t\tthis[x]._commit();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.data = this.toPlainObject();\r\n\t\t},\r\n\r\n\t\t_saveToStore: function(/*\"dojo/store/DataStore\"*/ store){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCommit the current values to the data store:\r\n\t\t\t//\r\n\t\t\t//\t\t- remove() any deleted entries\r\n\t\t\t//\t\t- put() any new or updated entries\r\n\t\t\t// store:\r\n\t\t\t//\t\tdojo/store/DataStore to use for this commit.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(this._removals){\r\n\t\t\t\tarray.forEach(this._removals, function(d){\r\n\t\t\t\t\tstore.remove(store.getIdentity(d));\r\n\t\t\t\t}, this);\r\n\t\t\t\tdelete this._removals;\r\n\t\t\t}\r\n\t\t\tvar dataToCommit = this.toPlainObject();\r\n\t\t\tif(lang.isArray(dataToCommit)){\r\n\t\t\t\tarray.forEach(dataToCommit, function(d){\r\n\t\t\t\t\tstore.put(d);\r\n\t\t\t\t}, this);\r\n\t\t\t}else{\r\n\t\t\t\tstore.put(dataToCommit);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tlang.mixin(StatefulModel, {\r\n\t\tgetStatefulOptions: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object that defines how model object should be created from plain object hierarchy.\r\n\r\n\t\t\tgetType: function(/*Anything*/ v){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tReturns the type of the given value.\r\n\t\t\t\t// v: Anything\r\n\t\t\t\t//\t\tThe value.\r\n\r\n\t\t\t\treturn lang.isArray(v) ? \"array\" : v != null && {}.toString.call(v) == \"[object Object]\" ? \"object\" : \"value\"; // String\r\n\t\t\t},\r\n\r\n\t\t\tgetStatefulArray: function(/*Anything[]*/ a){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tCreate a stateful array from a plain array.\r\n\t\t\t\t// a: Anything[]\r\n\t\t\t\t//\t\tThe plain array.\r\n\r\n\t\t\t\tvar _self = this, statefularray = lang.mixin(new StatefulArray(array.map(a, function(item){ return getStateful(item, _self); })));\r\n\t\t\t\tfor(var s in StatefulModel.prototype){\r\n\t\t\t\t\tif(s != \"set\"){ statefularray[s] = StatefulModel.prototype[s]; }\r\n\t\t\t\t}\r\n\t\t\t\tstatefularray.data = a;\r\n\t\t\t\treturn statefularray;\r\n\t\t\t},\r\n\r\n\t\t\tgetStatefulObject: function(/*Object*/ o){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tCreate a stateful object from a plain object.\r\n\t\t\t\t// o: Object\r\n\t\t\t\t//\t\tThe plain object.\r\n\r\n\t\t\t\tvar object = new StatefulModel();\r\n\t\t\t\tobject.data = o;\r\n\t\t\t\tfor(var s in o){\r\n\t\t\t\t\tobject.set(s, getStateful(o[s], this));\r\n\t\t\t\t}\r\n\t\t\t\treturn object; // dojox/mvc/StatefulModel\r\n\t\t\t},\r\n\r\n\t\t\tgetStatefulValue: function(/*Anything*/ v){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tCreate a stateful value from a plain value.\r\n\t\t\t\t// v: Anything\r\n\t\t\t\t//\t\tThe plain value.\r\n\r\n\t\t\t\tvar value = new StatefulModel();\r\n\t\t\t\tvalue.data = v;\r\n\t\t\t\tvalue.set(\"value\", v);\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetPlainValueOptions: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object that defines how plain value should be created from model object.\r\n\r\n\t\t\tgetType: function(/*Anything*/ v){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tReturns the type of the given value.\r\n\t\t\t\t// v: Anything\r\n\t\t\t\t//\t\tThe value.\r\n\r\n\t\t\t\tif(lang.isArray(v)){ return \"array\"; }\r\n\t\t\t\tif(lang.isObject(v)){ // Primitive values may have their own properties\r\n\t\t\t\t\tfor(var s in v){\r\n\t\t\t\t\t\tif(v.hasOwnProperty(s) && s != \"value\" && (v[s] || {}).get && (v[s] || {}).watch){\r\n\t\t\t\t\t\t\treturn \"object\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn \"value\";\r\n\t\t\t},\r\n\r\n\t\t\tgetPlainArray: function(/*dojox/mvc/StatefulArray*/ a){\r\n\t\t\t\treturn array.map(a, function(item){ return getPlainValue(item, this); }, this);\r\n\t\t\t},\r\n\r\n\t\t\tgetPlainObject: function(/*dojox/mvc/StatefulModel*/ o){\r\n\t\t\t\tvar plain = {};\r\n\t\t\t\tfor(var s in o){\r\n\t\t\t\t\tif(s == \"_watchCallbacks\" || (s in StatefulModel.prototype)){ continue; }\r\n\t\t\t\t\tplain[s] = getPlainValue(o[s], this);\r\n\t\t\t\t}\r\n\t\t\t\treturn plain;\r\n\t\t\t},\r\n\r\n\t\t\tgetPlainValue: function(/*Anything*/ v){\r\n\t\t\t\treturn (v || {}).set && (v || {}).watch ? getPlainValue(v.value, this) : v;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn StatefulModel;\r\n});\r\n"]}