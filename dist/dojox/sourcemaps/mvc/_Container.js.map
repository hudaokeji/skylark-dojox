{"version":3,"sources":["mvc/_Container.js"],"names":["define","declare","lang","when","_WidgetBase","regexp","stopParser","exprchar","templateString","inlineTemplateString","_containedWidgets","_parser","_createBody","this","require","e","console","error","_self","parse","srcNodeRef","template","inherited","dir","propsThis","scope","widgets","_destroyBody","length","n","w","_destroyed","destroy","_exprRepl","tmpl","pThis","transform","value","key","exp","substr","eval","hitch","replace","RegExp","escapeString","match","format","toString"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,YACA,oBACA,eACE,SAASC,QAASC,KAAMC,KAAMC,YAAaC,QAE7C,OAAOJ,QAAQ,uBAAwBG,aAItCE,YAAY,EAKZC,SAAU,IAOVC,eAAiB,GAIjBC,qBAAuB,GAIvBC,qBAIAC,QAAU,KAEVC,YAAa,WASZ,IAAIC,KAAKF,QACR,IAECE,KAAKF,QAAUG,QAAQ,eACvB,MAAMC,GAEN,IAECF,KAAKF,QAAUG,QAAQ,uBACvB,MAAMC,GAENC,QAAQC,MAAM,wHAKjB,IAAIC,EAAQL,KAEZ,GAAGA,KAAKF,QACP,OAAOR,KAAKU,KAAKF,QAAQQ,MAAMN,KAAKO,YACnCC,UAAU,EACVC,WAAYC,IAAKV,KAAKU,IAAKrB,KAAMW,KAAKX,MACtCsB,UAAWX,KACXY,MAAO,SACJ,SAASC,GACZR,EAAMR,kBAAoBgB,KAK7BC,aAAc,WAMb,GAAGd,KAAKH,mBAAqBG,KAAKH,kBAAkBkB,OAAS,EAC5D,IAAI,IAAIC,EAAIhB,KAAKH,kBAAkBkB,OAAS,EAAGC,GAAK,EAAGA,IAAI,CAC1D,IAAIC,EAAIjB,KAAKH,kBAAkBmB,GAC5BC,IAAMA,EAAEC,YAAcD,EAAEE,SAC1BF,EAAEE,YAQNC,UAAW,SAASC,MAKnB,IAAIC,MAAQtB,KAAMuB,UAAY,SAASC,MAAOC,KAC7C,IAAID,MAAO,MAAO,GAClB,IAAIE,IAAMF,MAAMG,OAAO,GAEvB,KADAD,IAAMA,IAAIC,OAAO,EAAGD,IAAIX,OAAS,GAC5BO,MAAO,OAAOM,KAAKF,MAGzB,OADAH,UAAYlC,KAAKwC,MAAM7B,KAAMuB,WACtBF,KAAKS,QAAQ,IAAIC,OAAOvC,OAAOwC,aAAahC,KAAKN,UAAU,UAAY,KAC7E,SAASuC,EAAOR,EAAKS,GACpB,OAAOX,UAAUU,EAAOR,GAAKU","file":"../../mvc/_Container.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/when\",\r\n\t\"dijit/_WidgetBase\",\r\n\t\"dojo/regexp\"\r\n], function(declare, lang, when, _WidgetBase, regexp){\r\n\r\n\treturn declare(\"dojox.mvc._Container\", _WidgetBase, {\r\n\t\r\n\t\t// stopParser: [private] Boolean\r\n\t\t//\t\tFlag to parser to not try and parse widgets declared inside the container.\r\n\t\tstopParser: true,\r\n\r\n\t\t// exprchar:  Character\r\n\t\t//\t\tCharacter to use for a substitution expression, for a substitution string like ${this.index}\r\n\t\t//\t\tIf this class is declared in a template HTML and exprchar is used in in-line template of this class, something other than `$` should be specified to avoid conflict with exprchar of outer-template.\r\n\t\texprchar: '$',\r\n\t\r\n\t\t// templateString: [private] String\r\n\t\t//\t\tThe template or content for this container. It is usually obtained from the\r\n\t\t//\t\tbody of the container and may be modified or repeated over a collection/array.\r\n\t\t//\t\tIn this simple implementation, attach points, attach events and WAI\r\n\t\t//\t\tattributes are not supported in the template.\r\n\t\ttemplateString : \"\",\r\n\t\r\n\t\t// inlineTemplateString: [private] String\r\n\t\t//\t\tSame as templateString. Used when this widget is mixed with a regular templated widget.\r\n\t\tinlineTemplateString : \"\",\r\n\r\n\t\t// _containedWidgets: [protected] dijit/_Widget[]\r\n\t\t//\t\tThe array of contained widgets at any given point in time within this container.\r\n\t\t_containedWidgets : [],\r\n\t\r\n\t\t////////////////////// PROTECTED METHODS ////////////////////////\r\n\t\r\n\t\t_parser : null,\r\n\t\t\r\n\t\t_createBody: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tParse the body of this MVC container widget.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe bodies of MVC containers may be model-bound views generated dynamically.\r\n\t\t\t//\t\tParse the body, start an contained widgets and attach template nodes for\r\n\t\t\t//\t\tcontained widgets as necessary.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tif(!this._parser){\r\n\t\t\t\ttry{\r\n\t\t\t\t\t// returns dojo/parser if loaded, otherwise throws\r\n\t\t\t\t\tthis._parser = require(\"dojo/parser\");\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\t// if here, dojo/parser not loaded\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\t// returns dojox/mobile/parser if loaded, otherwise throws\r\n\t\t\t\t\t\tthis._parser = require(\"dojox/mobile/parser\");\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t// if here, both dojox/mobile/parser and dojo/parser are not loaded\r\n\t\t\t\t\t\tconsole.error(\"Add explicit require(['dojo/parser']) or explicit require(['dojox/mobile/parser']), one of the parsers is required!\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar _self = this;\r\n\r\n\t\t\tif(this._parser){\r\n\t\t\t\treturn when(this._parser.parse(this.srcNodeRef,{\r\n\t\t\t\t\ttemplate: true,\r\n\t\t\t\t\tinherited: {dir: this.dir, lang: this.lang},\r\n\t\t\t\t\tpropsThis: this,\r\n\t\t\t\t\tscope: \"dojo\"\r\n\t\t\t\t}), function(widgets){\r\n\t\t\t\t\t_self._containedWidgets = widgets;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t_destroyBody: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroy the body of this MVC container widget. Also destroys any\r\n\t\t\t//\t\tcontained widgets.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tif(this._containedWidgets && this._containedWidgets.length > 0){\r\n\t\t\t\tfor(var n = this._containedWidgets.length - 1; n > -1; n--){\r\n\t\t\t\t\tvar w = this._containedWidgets[n];\r\n\t\t\t\t\tif(w && !w._destroyed && w.destroy){\r\n\t\t\t\t\t\tw.destroy();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t////////////////////// PRIVATE METHODS ////////////////////////\r\n\r\n\t\t_exprRepl: function(tmpl){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDoes substitution of ${foo+bar} type expressions in template string.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar pThis = this, transform = function(value, key){\r\n\t\t\t\tif(!value){return \"\";}\r\n\t\t\t\tvar exp = value.substr(2);\r\n\t\t\t\texp = exp.substr(0, exp.length - 1);\r\n\t\t\t\twith(pThis){return eval(exp);}\r\n\t\t\t};\r\n\t\t\ttransform = lang.hitch(this, transform);\r\n\t\t\treturn tmpl.replace(new RegExp(regexp.escapeString(this.exprchar)+\"(\\{.*?\\})\",\"g\"),\r\n\t\t\t\tfunction(match, key, format){\r\n\t\t\t\t\treturn transform(match, key).toString();\r\n\t\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n"]}