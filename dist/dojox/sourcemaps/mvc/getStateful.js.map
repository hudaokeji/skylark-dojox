{"version":3,"sources":["mvc/getStateful.js"],"names":["define","array","lang","Stateful","StatefulArray","getStatefulOptions","getType","v","isArray","toString","call","getStatefulArray","a","map","item","getStateful","this","getStatefulObject","o","stateful","s","getStatefulValue","value","options","replace","c","toUpperCase","setObject","mixin"],"mappings":";;;;;;;AAAAA,QACC,mBACA,kBACA,gBACA,mBACE,SAASC,EAAOC,EAAMC,EAAUC,GAClC,IAAIC,GAIHC,QAAS,SAAsBC,GAM9B,OAAOL,EAAKM,QAAQD,GAAK,QAAe,MAALA,GAAoC,sBAApBE,SAASC,KAAKH,GAA0B,SAAW,SAGvGI,iBAAkB,SAAwBC,GAMzC,OAAO,IAAIR,EAAcH,EAAMY,IAAID,EAAG,SAASE,GAAO,OAAOC,EAAYD,EAAME,OAAUA,QAG1FC,kBAAmB,SAAoBC,GAMtC,IAAIC,EAAW,IAAIhB,EACnB,IAAI,IAAIiB,KAAKF,EACZC,EAASC,GAAKL,EAAYG,EAAEE,GAAIJ,MAEjC,OAAOG,GAGRE,iBAAkB,SAAsBd,GAIvC,OAAOA,IAILQ,EAAc,SAAsBO,EAAwCC,GAY/E,OAAQA,GAAWR,GAAa,eAAiBQ,GAAWR,GAAaT,QAAQgB,GAAOE,QAAQ,SAAU,SAASC,GAAI,OAAOA,EAAEC,iBAAmBJ,IAIpJ,OAAOpB,EAAKyB,UAAU,wBAAyBzB,EAAK0B,MAAMb,EAAaV","file":"../../mvc/getStateful.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/Stateful\",\r\n\t\"./StatefulArray\"\r\n], function(array, lang, Stateful, StatefulArray){\r\n\tvar getStatefulOptions = {\r\n\t\t// summary:\r\n\t\t//\t\tOptions used for dojox/mvc/getStateful().\r\n\r\n\t\tgetType: function(/*Anything*/ v){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the type of the given value.\r\n\t\t\t// v: Anything\r\n\t\t\t//\t\tThe value.\r\n\r\n\t\t\treturn lang.isArray(v) ? \"array\" : v != null && {}.toString.call(v) == \"[object Object]\" ? \"object\" : \"value\";\r\n\t\t},\r\n\r\n\t\tgetStatefulArray: function(/*Anything[]*/ a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the stateful version of the given array.\r\n\t\t\t// a: Anything[]\r\n\t\t\t//\t\tThe array.\r\n\r\n\t\t\treturn new StatefulArray(array.map(a, function(item){ return getStateful(item, this); }, this)); // dojox/mvc/StatefulArray\r\n\t\t},\r\n\r\n\t\tgetStatefulObject: function(/*Object*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the stateful version of the given object.\r\n\t\t\t// o: Object\r\n\t\t\t//\t\tThe object.\r\n\r\n\t\t\tvar stateful = new Stateful();\r\n\t\t\tfor(var s in o){\r\n\t\t\t\tstateful[s] = getStateful(o[s], this);\r\n\t\t\t}\r\n\t\t\treturn stateful; // dojo/Stateful\r\n\t\t},\r\n\r\n\t\tgetStatefulValue: function(/*Anything*/ v){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tJust returns the given value.\r\n\r\n\t\t\treturn v; // Anything\r\n\t\t}\r\n\t};\r\n\r\n\tvar getStateful = function(/*Anything*/ value, /*dojox/mvc/getStatefulOptions*/ options){\r\n\t\t// summary:\r\n\t\t//\t\tCreate a dojo/Stateful object from a raw value.\r\n\t\t// description:\r\n\t\t//\t\tRecursively iterates the raw value given, and convert them to stateful ones.\r\n\t\t// value: Anything\r\n\t\t//\t\tThe raw value.\r\n\t\t// options: dojox/mvc/getStatefulOptions\r\n\t\t//\t\tThe object that defines how model object should be created from plain object hierarchy.\r\n\t\t// returns: Anything\r\n\t\t//\t\t The converted value.\r\n\r\n\t\treturn (options || getStateful)[\"getStateful\" + (options || getStateful).getType(value).replace(/^[a-z]/, function(c){ return c.toUpperCase(); })](value); // Anything\r\n\t};\r\n\r\n\t// lang.setObject() thing is for back-compat, remove it in 2.0\r\n\treturn lang.setObject(\"dojox.mvc.getStateful\", lang.mixin(getStateful, getStatefulOptions));\r\n});\r\n"]}