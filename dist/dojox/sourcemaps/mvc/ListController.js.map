{"version":3,"sources":["mvc/ListController.js"],"names":["define","array","lang","declare","ModelRefController","unwatchHandles","c","s","_listModelWatchHandle","_tableModelWatchHandle","unwatch","idProperty","cursorId","cursorIndex","cursor","model","_refCursorProp","_refModelProp","destroy","this","inherited","arguments","set","name","value","ctrl","old","current","oldRefInCursor","oldRefInModel","_refInModelProp","isArray","foundIdx","indexOf","targetIdx","get","length","setRefCursor","watchElements","idx","removals","adds","curIdx","watch","_set","_setCursorIndexAttr","_setCursorIdAttr","i","hasControllerProperty"],"mappings":"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","file":"../../mvc/ListController.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/declare\",\r\n\t\"./ModelRefController\"\r\n], function(array, lang, declare, ModelRefController){\r\n\tfunction unwatchHandles(/*dojox/mvc/ListController*/ c){\r\n\t\t// summary:\r\n\t\t//\t\tUnwatch model watch handles.\r\n\r\n\t\tfor(var s in {\"_listModelWatchHandle\": 1, \"_tableModelWatchHandle\": 1}){\r\n\t\t\tif(c[s]){\r\n\t\t\t\tc[s].unwatch();\r\n\t\t\t\tc[s] = null;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setRefInModel(/*dojox/mvc/ListController*/ ctrl, /*dojo/Stateful*/ old, /*dojo/Stateful*/ current){\r\n\t\t// summary:\r\n\t\t//\t\tA function called when this controller gets newer value as the list data.\r\n\r\n\t\tunwatchHandles(ctrl);\r\n\t\tif(current && old !== current){\r\n\t\t\tif(current.watchElements){\r\n\t\t\t\tctrl._listModelWatchHandle = current.watchElements(function(idx, removals, adds){\r\n\t\t\t\t\tif(removals && adds){\r\n\t\t\t\t\t\tvar curIdx = ctrl.get(\"cursorIndex\");\r\n\t\t\t\t\t\t// If selected element is removed, make \"no selection\" state\r\n\t\t\t\t\t\tif(removals && curIdx >= idx && curIdx < idx + removals.length){\r\n\t\t\t\t\t\t\tctrl.set(\"cursorIndex\", -1);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// If selected element is equal to or larger than the removals/adds point, update the selected index\r\n\t\t\t\t\t\tif((removals.length || adds.length) && curIdx >= idx){\r\n\t\t\t\t\t\t\tctrl.set(ctrl._refCursorProp, ctrl.get(\"cursor\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// If there is a update to the whole array, update the selected index \r\n\t\t\t\t\t\tctrl.set(ctrl._refCursorProp, ctrl.get(ctrl._refCursorProp));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}else if(current.set && current.watch){\r\n\t\t\t\tif(ctrl.get(\"cursorIndex\") < 0){ ctrl._set(\"cursorIndex\", \"\"); }\r\n\t\t\t\tctrl._tableModelWatchHandle = current.watch(function(name, old, current){\r\n\t\t\t\t\tif(old !== current && name == ctrl.get(\"cursorIndex\")){\r\n\t\t\t\t\t\tctrl.set(ctrl._refCursorProp, current);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tctrl._setCursorIndexAttr(ctrl.cursorIndex);\r\n\t}\r\n\r\n\tfunction setRefCursor(/*dojox/mvc/ListController*/ ctrl, /*dojo/Stateful*/ old, /*dojo/Stateful*/ current){\r\n\t\t// summary:\r\n\t\t//\t\tA function called when this controller gets newer value as the data of current selection.\r\n\t\t// description:\r\n\t\t//\t\tFinds the index associated with the given element, and updates cursorIndex property.\r\n\r\n\t\tvar model = ctrl[ctrl._refInModelProp];\r\n\t\tif(!model){ return; }\r\n\t\tif(old !== current){\r\n\t\t\tif(lang.isArray(model)){\r\n\t\t\t\tvar foundIdx = array.indexOf(model, current);\r\n\t\t\t\tif(foundIdx < 0){\r\n\t\t\t\t\tvar targetIdx = ctrl.get(\"cursorIndex\");\r\n\t\t\t\t\tif(targetIdx >= 0 && targetIdx < model.length){\r\n\t\t\t\t\t\tmodel.set(targetIdx, current);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tctrl.set(\"cursorIndex\", foundIdx);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(var s in model){\r\n\t\t\t\t\tif(model[s] == current){\r\n\t\t\t\t\t\tctrl.set(\"cursorIndex\", s);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar targetIdx = ctrl.get(\"cursorIndex\");\r\n\t\t\t\tif(targetIdx){\r\n\t\t\t\t\tmodel.set(targetIdx, current);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn declare(\"dojox.mvc.ListController\", ModelRefController, {\r\n\t\t// summary:\r\n\t\t//\t\tA controller working with array model, managing its cursor.\r\n\t\t//\t\tNOTE - If this class is used with a widget by data-dojo-mixins, make sure putting the widget in data-dojo-type and putting this class to data-dojo-mixins.\r\n\t\t// example:\r\n\t\t//\t\tThe text box changes its value every two seconds.\r\n\t\t// |\t\t<html>\r\n\t\t// |\t\t\t<head>\r\n\t\t// |\t\t\t\t<script src=\"/path/to/dojo-toolkit/dojo/dojo.js\" type=\"text/javascript\" data-dojo-config=\"parseOnLoad: 0\"></script>\r\n\t\t// |\t\t\t\t<script type=\"text/javascript\">\r\n\t\t// |\t\t\t\t\trequire([\r\n\t\t// |\t\t\t\t\t\t\"dojo/parser\", \"dijit/registry\", \"dojox/mvc/StatefulArray\",\r\n\t\t// |\t\t\t\t\t\t\"dijit/form/TextBox\", \"dojox/mvc/ListController\", \"dojo/domReady!\"\r\n\t\t// |\t\t\t\t\t], function(parser, registry, StatefulArray){\r\n\t\t// |\t\t\t\t\t\tvar count = 0;\r\n\t\t// |\t\t\t\t\t\tmodel = new StatefulArray([{value: \"First\"}, {value: \"Second\"}, {value: \"Third\"}, {value: \"Fourth\"}, {value: \"Fifth\"}]);\r\n\t\t// |\t\t\t\t\t\tsetInterval(function(){ registry.byId(\"ctrl\").set(\"cursorIndex\", ++count % 5); }, 2000);\r\n\t\t// |\t\t\t\t\t\tparser.parse();\r\n\t\t// |\t\t\t\t\t});\r\n\t\t// |\t\t\t\t</script>\r\n\t\t// |\t\t\t</head>\r\n\t\t// |\t\t\t<body>\r\n\t\t// |\t\t\t\t<script type=\"dojo/require\">at: \"dojox/mvc/at\"</script>\r\n\t\t// |\t\t\t\t<span id=\"ctrl\" data-dojo-type=\"dojox/mvc/ListController\" data-dojo-props=\"model: model\"></span>\r\n\t\t// |\t\t\t\t<input type=\"text\" data-dojo-type=\"dijit/form/TextBox\" data-dojo-props=\"value: at('widget:ctrl', 'value')\">\r\n\t\t// |\t\t\t</body>\r\n\t\t// |\t\t</html>\r\n\r\n\t\t// idProperty: String\r\n\t\t//\t\tThe property name in element in the model array, that works as its identifier.\r\n\t\tidProperty: \"uniqueId\",\r\n\r\n\t\t// cursorId: String\r\n\t\t//\t\tThe ID of the selected element in the model array.\r\n\t\tcursorId: null,\r\n\r\n\t\t// cursorIndex: Number|String\r\n\t\t//\t\tThe index of the selected element in the model.\r\n\t\tcursorIndex: -1,\r\n\r\n\t\t// cursor: dojo/Stateful\r\n\t\t//\t\tThe selected element in the model array.\r\n\t\tcursor: null,\r\n\r\n\t\t// model: dojox/mvc/StatefulArray\r\n\t\t//\t\tThe data model working as an array.\r\n\t\tmodel: null,\r\n\r\n\t\t// _listModelWatchHandle: Object\r\n\t\t//\t\tThe watch handle of model, watching for array elements.\r\n\t\t_listModelWatchHandle: null,\r\n\r\n\t\t// _tableModelWatchHandle: Object\r\n\t\t//\t\tThe watch handle of model.\r\n\t\t_tableModelWatchHandle: null,\r\n\r\n\t\t// _refCursorProp: String\r\n\t\t//\t\tThe property name for the data model of the current selection.\r\n\t\t_refCursorProp: \"cursor\",\r\n\r\n\t\t// _refModelProp: String\r\n\t\t//\t\tThe property name for the data model.\r\n\t\t_refModelProp: \"cursor\",\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tunwatchHandles(this);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tset: function(/*String*/ name, /*Anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet a property to this.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property to set.\r\n\t\t\t// value: Anything\r\n\t\t\t//\t\tThe value to set in the property.\r\n\r\n\t\t\tvar oldRefInCursor = this[this._refCursorProp];\r\n\t\t\tvar oldRefInModel = this[this._refInModelProp];\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(name == this._refCursorProp){\r\n\t\t\t\tsetRefCursor(this, oldRefInCursor, value);\r\n\t\t\t}\r\n\t\t\tif(name == this._refInModelProp){\r\n\t\t\t\tsetRefInModel(this, oldRefInModel, value);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setCursorIdAttr: function(/*String*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for calls to set(\"cursorId\", val).\r\n\t\t\t// description:\r\n\t\t\t//\t\tFinds the index associated with the given cursor ID, and updates cursorIndex property.\r\n\r\n\t\t\tvar old = this.cursorId;\r\n\t\t\tthis._set(\"cursorId\", value);\r\n\t\t\tvar model = this[this._refInModelProp];\r\n\t\t\tif(!model){ return; }\r\n\t\t\tif(old !== value){\r\n\t\t\t\tif(lang.isArray(model)){\r\n\t\t\t\t\tfor(var i = 0; i < model.length; i++){\r\n\t\t\t\t\t\tif(model[i][this.idProperty] == value){\r\n\t\t\t\t\t\t\tthis.set(\"cursorIndex\", i);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._set(\"cursorIndex\", -1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfor(var s in model){\r\n\t\t\t\t\t\tif(model[s][this.idProperty] == value){\r\n\t\t\t\t\t\t\tthis.set(\"cursorIndex\", s);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._set(\"cursorIndex\", \"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setCursorIndexAttr: function(/*Number*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for calls to set(\"cursorIndex\", val).\r\n\t\t\t// description:\r\n\t\t\t//\t\tUpdates cursor, cursorId, cursorIndex properties internally and call watch callbacks for them.\r\n\r\n\t\t\tthis._set(\"cursorIndex\", value);\r\n\t\t\tif(!this[this._refInModelProp]){ return; }\r\n\t\t\tthis.set(this._refCursorProp, this[this._refInModelProp][value]);\r\n\t\t\tthis.set(\"cursorId\", this[this._refInModelProp][value] && this[this._refInModelProp][value][this.idProperty]);\r\n\t\t},\r\n\r\n\t\thasControllerProperty: function(/*String*/ name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if this controller itself owns the given property.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe property name.\r\n\r\n\t\t\treturn this.inherited(arguments) || name == this._refCursorProp;\r\n\t\t}\r\n\t});\r\n});\r\n"]}