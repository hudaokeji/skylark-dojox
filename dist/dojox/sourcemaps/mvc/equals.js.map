{"version":3,"sources":["mvc/equals.js"],"names":["define","array","lang","Stateful","StatefulArray","equalsOptions","getType","v","isArray","isFunction","getTime","toString","call","set","watch","equalsArray","dst","src","i","l","Math","max","length","equals","equalsDate","equalsObject","list","mixin","s","prototype","equalsValue","options","opts","types","replace","c","toUpperCase","setObject"],"mappings":";;;;;;;AAAAA,QACC,mBACA,kBACA,gBACA,mBACE,SAASC,EAAOC,EAAMC,EAAUC,GAClC,IAAIC,GAIHC,QAAS,SAAsBC,GAM9B,OAAOL,EAAKM,QAAQD,GAAK,QAAUL,EAAKO,YAAYF,OAASG,SAAW,OAAc,MAALH,IAAqC,sBAApBI,SAASC,KAAKL,IAA2BL,EAAKO,YAAYF,OAASM,MAAQX,EAAKO,YAAYF,OAASO,QAAU,SAAW,SAG7NC,YAAa,SAAwBC,EAAoBC,GAQxD,IAAI,IAAIC,EAAI,EAAGC,EAAIC,KAAKC,IAAIL,EAAIM,OAAQL,EAAIK,QAASJ,EAAIC,EAAGD,IAC3D,IAAIK,EAAOP,EAAIE,GAAID,EAAIC,IAAM,OAAO,EAErC,OAAO,GAGRM,WAAY,SAAkBR,EAAcC,GAC3C,OAAOD,EAAIN,WAAaO,EAAIP,WAG7Be,aAAc,SAAoBT,EAAgBC,GAQjD,IAAIS,EAAOxB,EAAKyB,SAAUX,EAAKC,GAC/B,IAAI,IAAIW,KAAKF,EACZ,KAAKE,KAAKzB,EAAS0B,WAAmB,mBAALD,GAA2BL,EAAOP,EAAIY,GAAIX,EAAIW,KAAM,OAAO,EAE7F,OAAO,GAGRE,YAAa,SAAsBd,EAAkBC,GAIpD,OAAOD,IAAQC,IAIbM,EAAS,SAAsBP,EAAkBC,EAAiCc,GAcrF,IAAIC,EAAOD,GAAWR,EAAQU,GAASD,EAAK1B,QAAQU,GAAMgB,EAAK1B,QAAQW,IACvE,OAAOgB,EAAM,IAAMA,EAAM,IAAaD,EAAK,SAAWC,EAAM,GAAGC,QAAQ,SAAU,SAASC,GAAI,OAAOA,EAAEC,iBAAmBpB,EAAKC,IAIhI,OAAOf,EAAKmC,UAAU,mBAAoBnC,EAAKyB,MAAMJ,EAAQlB","file":"../../mvc/equals.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/Stateful\",\r\n\t\"./StatefulArray\"\r\n], function(array, lang, Stateful, StatefulArray){\r\n\tvar equalsOptions = {\r\n\t\t// summary:\r\n\t\t//\t\tOptions used for dojox/mvc/equals().\r\n\r\n\t\tgetType: function(/*Anything*/ v){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the type of the given value.\r\n\t\t\t// v: Anything\r\n\t\t\t//\t\tThe value.\r\n\r\n\t\t\treturn lang.isArray(v) ? \"array\" : lang.isFunction((v || {}).getTime) ? \"date\" : v != null && ({}.toString.call(v) == \"[object Object]\" || lang.isFunction((v || {}).set) && lang.isFunction((v || {}).watch)) ? \"object\" : \"value\";\r\n\t\t},\r\n\r\n\t\tequalsArray: function(/*Anything[]*/ dst, /*Anything[]*/ src){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns if the given two stateful arrays are equal.\r\n\t\t\t// dst: Anything[]\r\n\t\t\t//\t\tThe array to compare with.\r\n\t\t\t// src: Anything[]\r\n\t\t\t//\t\tThe array to compare with.\r\n\r\n\t\t\tfor(var i = 0, l = Math.max(dst.length, src.length); i < l; i++){\r\n\t\t\t\tif(!equals(dst[i], src[i])){ return false; }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tequalsDate: function(/*Date*/ dst, /*Date*/ src){\r\n\t\t\treturn dst.getTime() == src.getTime();\r\n\t\t},\r\n\r\n\t\tequalsObject: function(/*Object*/ dst, /*Object*/ src){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns if the given two stateful objects are equal.\r\n\t\t\t// dst: Object\r\n\t\t\t//\t\tThe object to compare with.\r\n\t\t\t// src: Object\r\n\t\t\t//\t\tThe object to compare with.\r\n\r\n\t\t\tvar list = lang.mixin({}, dst, src);\r\n\t\t\tfor(var s in list){\r\n\t\t\t\tif(!(s in Stateful.prototype) && s != \"_watchCallbacks\" && !equals(dst[s], src[s])){ return false; }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tequalsValue: function(/*Anything*/ dst, /*Anything*/ src){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns if the given two values are equal.\r\n\r\n\t\t\treturn dst === src; // Boolean\r\n\t\t}\r\n\t};\r\n\r\n\tvar equals = function(/*Anything*/ dst, /*Anything*/ src, /*dojox/mvc/equalsOptions*/ options){\r\n\t\t// summary:\r\n\t\t//\t\tCompares two dojo/Stateful objects, by diving into the leaves.\r\n\t\t// description:\r\n\t\t//\t\tRecursively iterates and compares stateful values.\r\n\t\t// dst: Anything\r\n\t\t//\t\tThe stateful value to compare with.\r\n\t\t// src: Anything\r\n\t\t//\t\tThe stateful value to compare with.\r\n\t\t// options: dojox/mvc/equalsOptions\r\n\t\t//\t\tThe object that defines how two stateful values are compared.\r\n\t\t// returns: Boolean\r\n\t\t//\t\tTrue if dst equals to src, false otherwise.\r\n\r\n\t\tvar opts = options || equals, types = [opts.getType(dst), opts.getType(src)];\r\n\t\treturn types[0] != types[1] ? false : opts[\"equals\" + types[0].replace(/^[a-z]/, function(c){ return c.toUpperCase(); })](dst, src); // Boolean\r\n\t};\r\n\r\n\t// lang.setObject() thing is for back-compat, remove it in 2.0\r\n\treturn lang.setObject(\"dojox.mvc.equals\", lang.mixin(equals, equalsOptions));\r\n});\r\n"]}