{"version":3,"sources":["calc/toFrac.js"],"names":["define","lang","calc","multiples","_fracLookup","number","findSimpleFraction","fraction","denom1Low","Math","floor","quotient","approx","n","d","denom1High","denom2","less2","denom4","less4","denom3","smallestDenom","largestDenom","numerator","startDenom","stopDenom","thisDenom","mt","abs","multiple","simpleFraction","wholeNumber","m","a","sqrts","i","1","√(2)","sqrt","√(3)","pi","PI","_fracHashInit","mixin","toFrac","f","pow","base","exponent","NaN"],"mappings":"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","file":"../../calc/toFrac.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojox/calc/_Executor\"\r\n], function(lang, calc) {\r\n\r\n\tvar multiples;\r\n\r\n\tfunction _fracHashInit(){\r\n\t\tvar sqrts = [\r\n\t\t\t5,6,7,10,11,13,14,15,17,19,21,22,23,26,29,\r\n\t\t\t30,31,33,34,35,37,38,39,41,42,43,46,47,51,53,55,57,58,59,\r\n\t\t\t61,62,65,66,67,69,70,71,73,74,77,78,79,82,83,85,86,87,89,91,93,94,95,97\r\n\t\t];\r\n\t\tmultiples = { \"1\":1, \"\\u221A(2)\":Math.sqrt(2), \"\\u221A(3)\":Math.sqrt(3), \"pi\":Math.PI };\r\n\t\t// populate the rest of the multiples array\r\n\t\tfor(var i in sqrts){\r\n\t\t\tvar n = sqrts[i];\r\n\t\t\tmultiples[\"\\u221A(\"+n+\")\"] = Math.sqrt(n);\r\n\t\t}\r\n\t\tmultiples[\"\\u221A(pi)\"] = Math.sqrt(Math.PI);\r\n\t}\r\n\r\n\tfunction _fracLookup(number){\r\n\t\tfunction findSimpleFraction(fraction){\r\n\t\t\tvar denom1Low = Math.floor(1 / fraction);\r\n\t\t\t// fraction <= 1/denom1Low \r\n\t\t\tvar quotient = calc.approx(1 / denom1Low);\r\n\t\t\tif(quotient == fraction){ return { n:1, d:denom1Low }; }\r\n\t\t\tvar denom1High = denom1Low + 1;\r\n\t\t\t// 1/denom1High <= fraction < 1/denom1Low \r\n\t\t\tquotient = calc.approx(1 / denom1High);\r\n\t\t\tif(quotient == fraction){ return { n:1, d:denom1High }; }\r\n\t\t\tif(denom1Low >= 50){ return null; } // only 1's in the numerator beyond this point\r\n\t\t\t// 1/denom1High < fraction < 1/denom1Low \r\n\t\t\tvar denom2 = denom1Low + denom1High;\r\n\t\t\tquotient = calc.approx(2 / denom2);\r\n\t\t\t// 1/denom1High < 2/(denom1Low+denom1High) < 1/denom1Low \r\n\t\t\tif(quotient == fraction){ return { n:2, d:denom2 }; }\r\n\t\t\tif(denom1Low >= 34){ return null; } // only 1's and 2's in the numerator beyond this point\r\n\t\t\tvar less2 = fraction < quotient;\r\n\t\t\t// if less2\r\n\t\t\t//\t1/denom1High < fraction < 2/(denom1Low+denom1High)\r\n\t\t\t// else\r\n\t\t\t//\t2/(denom1Low+denom1High) < fraction < 1/denom1Low\r\n\t\t\tvar denom4 = denom2 * 2 + (less2 ? 1 : -1);\r\n\t\t\tquotient = calc.approx(4 / denom4);\r\n\t\t\t// 1/denom1High < 4/(2*denom1Low+2*denom1High+1) < 2/(denom1Low+denom1High) < 4/(2*denom1Low+2*denom1High-1) < 1/denom1Low \r\n\t\t\tif(quotient == fraction){ return { n:4, d:denom4 }; }\r\n\t\t\tvar less4 = fraction < quotient;\r\n\t\t\t// we've already checked for 1, 2 and 4, but now see if we need to check for 3 in the numerator\r\n\t\t\tif((less2 && !less4) || (!less2 && less4)){\r\n\t\t\t\tvar denom3 = (denom2 + denom4) >> 1;\r\n\t\t\t\tquotient = calc.approx(3 / denom3);\r\n\t\t\t\t// 1/denom1High < 4/(2*denom1Low+2*denom1High+1) < 3/((3*denom1Low+3*denom1High+1)/2) < 2/(denom1Low+denom1High) < 3/((3*denom1Low+3*denom1High-1)/2) < 4/(2*denom1Low+2*denom1High-1) < 1/denom1Low \r\n\t\t\t\tif(quotient == fraction){ return { n:3, d:denom3 }; }\r\n\t\t\t}\r\n\t\t\tif(denom1Low >= 20){ return null; } // only 1's, 2's, 3's, and 4's in the numerator beyond this point\r\n\t\t\t// if less2\r\n\t\t\t// \tif less4\r\n\t\t\t//\t\t1/denom1High < fraction < 4/(2*denom1Low+2*denom1High+1)\r\n\t\t\t//\telse\r\n\t\t\t//\t\t4/(2*denom1Low+2*denom1High+1) < fraction < 2/(denom1Low+denom1High)\r\n\t\t\t// else\r\n\t\t\t// \tif less4\r\n\t\t\t//\t\t2/(denom1Low+denom1High) < fraction < 4/(2*denom1Low+2*denom1High-1)\r\n\t\t\t//\telse\r\n\t\t\t//\t\t4/(2*denom1Low+2*denom1High-1) < fraction < 1/denom1Low\r\n\t\t\tvar smallestDenom = denom2 + denom1Low * 2;\r\n\t\t\tvar largestDenom = smallestDenom + 2;\r\n\t\t\tfor(var numerator = 5; smallestDenom <= 100; numerator++){ // start with 5 in the numerator\r\n\t\t\t\tsmallestDenom += denom1Low;\r\n\t\t\t\tlargestDenom += denom1High;\r\n\t\t\t\tvar startDenom = less2 ? ((largestDenom + smallestDenom + 1) >> 1) : smallestDenom;\r\n\t\t\t\tvar stopDenom = less2 ? largestDenom : ((largestDenom + smallestDenom - 1) >> 1);\r\n\t\t\t\tstartDenom = less4 ? ((startDenom + stopDenom) >> 1) : startDenom;\r\n\t\t\t\tstopDenom = less4 ? stopDenom : ((startDenom + stopDenom) >> 1);\r\n\t\t\t\tfor(var thisDenom = startDenom; thisDenom <= stopDenom; thisDenom++){\r\n\t\t\t\t\tif(numerator & 1 == 0 && thisDenom & 1 == 0){ continue; } // skip where n and d are both even\r\n\t\t\t\t\tquotient = calc.approx(numerator / thisDenom);\r\n\t\t\t\t\tif(quotient == fraction){ return { n:numerator, d:thisDenom }; }\r\n\t\t\t\t\tif(quotient < fraction){ break; } // stop since the values will just get smaller\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tnumber = Math.abs(number);\r\n\t\tfor(var mt in multiples){\r\n\t\t\tvar multiple = multiples[mt];\r\n\t\t\tvar simpleFraction = number / multiple;\r\n\t\t\tvar wholeNumber = Math.floor(simpleFraction);\r\n\t\t\tsimpleFraction = calc.approx(simpleFraction - wholeNumber);\r\n\t\t\tif(simpleFraction == 0){\r\n\t\t\t\treturn { mt:mt, m:multiple, n:wholeNumber, d:1 };\r\n\t\t\t}else{\r\n\t\t\t\tvar a = findSimpleFraction(simpleFraction);\r\n\t\t\t\tif(!a){ continue; }\r\n\t\t\t\treturn { mt:mt, m:multiple, n:(wholeNumber * a.d + a.n), d:a.d };\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// make the hash\r\n\t_fracHashInit();\r\n\r\n\t// add toFrac to the calculator\r\n\treturn lang.mixin(calc, {\r\n\t\ttoFrac: function(number){// get a string fraction for a decimal with a set range of numbers, based on the hash\r\n\t\t\tvar f = _fracLookup(number);\r\n\t\t\treturn f ? ((number < 0 ? '-' : '') + (f.m == 1 ? '' : (f.n == 1 ? '' : (f.n + '*'))) + (f.m == 1 ? f.n : f.mt) + ((f.d == 1 ? '' : '/' + f.d))) : number;\r\n\t\t\t//return f ? ((number < 0 ? '-' : '') + (f.m == 1 ? '' : (f.n == 1 ? '' : (f.n + '*'))) + (f.m == 1 ? f.n : f.mt) + '/' + f.d) : number;\r\n\t\t},\r\n\t\tpow: function(base, exponent){// pow benefits from toFrac because it can overcome many of the limitations set before the standard Math.pow\r\n\t\t\t// summary:\r\n\t\t\t//\t\tComputes base ^ exponent\r\n\r\n\t\t\t//\tWrapper to Math.pow(base, exponent) to handle (-27) ^ (1/3)\r\n\t\t\tfunction isInt(n){\r\n\t\t\t\treturn Math.floor(n) == n;\r\n\t\t\t}\r\n\r\n\t\t\tif(base>0||isInt(exponent)){\r\n\t\t\t\treturn Math.pow(base, exponent);\r\n\t\t\t}else{\r\n\t\t\t\tvar f = _fracLookup(exponent);\r\n\t\t\t\tif(base >= 0){\r\n\t\t\t\t\treturn (f && f.m == 1)\r\n\t\t\t\t\t\t? Math.pow(Math.pow(base, 1 / f.d), exponent < 0 ? -f.n : f.n) // 32 ^ (2/5) is much more accurate if done as (32 ^ (1/5)) ^ 2\r\n\t\t\t\t\t\t: Math.pow(base, exponent);\r\n\t\t\t\t}else{\t// e.g. (1/3) root of -27 = -3, 1 / exponent must be an odd integer for a negative base\r\n\t\t\t\t\treturn (f && f.d & 1) ? Math.pow(Math.pow(-Math.pow(-base, 1 / f.d), exponent < 0 ? -f.n : f.n), f.m) : NaN;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n/*\r\n\tfunction reduceError(number){\r\n\t\tvar f = _fracLookup(number);\r\n\t\tif(!f){ f = _fracLookup(number); }\r\n\t\treturn f ? ((number < 0 ? -1 : 1) * f.n * f.m / f.d) : number;\r\n\t}\r\n*/\r\n});\r\n"]}