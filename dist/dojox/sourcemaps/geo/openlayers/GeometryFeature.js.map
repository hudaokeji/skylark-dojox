{"version":3,"sources":["geo/openlayers/GeometryFeature.js"],"names":["define","declare","array","lang","matrix","Point","LineString","Collection","Feature","constructor","geometry","this","_geometry","_shapeProperties","_fill","_stroke","_createCollection","g","layer","getLayer","s","getSurface","c","createShape","getViewport","add","_getCollectionShape","shape","renderCollection","undefined","prop","getShapeProperties","setShape","forEach","coordinates","item","renderPoint","renderLineString","Error","_applyStyle","render","setShapeProperties","createCircle","createPolyline","grp","createGroup","shp","getShape","_createPoint","_getPointShape","map","getDojoMap","mixin","_defaults","pointShape","from","getCoordinateSystem","p","transform","a","_getLocalXY","cx","cy","tr","getTransform","setTransform","translate","dx","dy","_createLineString","_surface","_getLineStringShape","lss","points","Array","length","i","x","y","lineStringShape","fill","f","getFill","isString","isArray","stroke","getStroke","_applyRecusiveStyle","setFill","setStroke","remove","removeShape","r"],"mappings":"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","file":"../../../geo/openlayers/GeometryFeature.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojox/gfx/matrix\",\r\n\t\"./Point\",\r\n\t\"./LineString\",\r\n\t\"./Collection\",\r\n\t\"./Feature\"\r\n], function(declare, array, lang, matrix, Point, LineString, Collection, Feature){\r\n\r\n\treturn declare(\"dojox.geo.openlayers.GeometryFeature\", Feature, {\r\n\t\t// summary:\r\n\t\t//\t\tA Feature encapsulating a geometry.\r\n\t\t// description:\r\n\t\t//\t\tThis Feature renders a geometry such as a Point or LineString geometry. This Feature\r\n\t\t//\t\tis responsible for reprojecting the geometry before creating a gfx shape to display it.\r\n\t\t//\t\tBy default the shape created is a circle for a Point geometry and a polyline for a \r\n\t\t//\t\tLineString geometry. User can change these behavior by overriding the createShape \r\n\t\t//\t\tmethod to create the desired shape.\r\n\t\t// example:\r\n\t\t//\t|  var geom = new dojox.geo.openlayers.Point({x:0, y:0});\r\n\t\t//\t|  var gf = new dojox.geo.openlayers.GeometryFeature(geom);\r\n\r\n\t\tconstructor: function(geometry){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstructs a GeometryFeature for the specified geometry.\r\n\t\t\t// geometry: dojox/geo/openlayers/Geometry\r\n\t\t\t//\t\tThe geometry to render.\r\n\t\t\tthis._geometry = geometry;\r\n\t\t\tthis._shapeProperties = {};\r\n\t\t\tthis._fill = null;\r\n\t\t\tthis._stroke = null;\r\n\t\t},\r\n\r\n\t\t_createCollection: function(/* dojox/geo/openlayers/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate collection shape and add it to the viewport.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar layer = this.getLayer();\r\n\t\t\tvar s = layer.getSurface();\r\n\t\t\tvar c = this.createShape(s, g);\r\n\t\t\tvar vp = layer.getViewport();\r\n\t\t\tvp.add(c);\r\n\t\t\treturn c;\r\n\t\t},\r\n\r\n\t\t_getCollectionShape: function(/* dojox/geo/openlayers/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the collection shape, create it if necessary\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar s = g.shape;\r\n\t\t\tif(s == null){\r\n\t\t\t\ts = this._createCollection(g);\r\n\t\t\t\tg.shape = s;\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t},\r\n\r\n\t\trenderCollection: function(g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders a geometry collection.\r\n\t\t\t// g: dojox.geo.openlayers.Geometry?\r\n\t\t\t//\t\tThe geometry to render.\r\n\t\t\tif(g == undefined){\r\n\t\t\t\tg = this._geometry;\r\n\t\t\t}\r\n\r\n\t\t\ts = this._getCollectionShape(g);\r\n\t\t\tvar prop = this.getShapeProperties();\r\n\t\t\ts.setShape(prop);\r\n\r\n\t\t\tarray.forEach(g.coordinates, function(item){\r\n\t\t\t\tif(item instanceof Point){\r\n\t\t\t\t\tthis.renderPoint(item);\r\n\t\t\t\t}else if(item instanceof LineString){\r\n\t\t\t\t\tthis.renderLineString(item);\r\n\t\t\t\t}else if(item instanceof Collection){\r\n\t\t\t\t\tthis.renderCollection(item);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._applyStyle(g);\r\n\t\t},\r\n\r\n\t\trender: function(g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender a geometry. \r\n\t\t\t//\t\tCalled by the Layer on which the feature is added. \r\n\t\t\t// g: dojox/geo/openlayer/Geometry?\r\n\t\t\t//\t\tThe geometry to draw\r\n\t\t\tif(g == undefined){\r\n\t\t\t\tg = this._geometry;\r\n\t\t\t}\r\n\r\n\t\t\tif(g instanceof Point){\r\n\t\t\t\tthis.renderPoint(g);\r\n\t\t\t}else if(g instanceof LineString){\r\n\t\t\t\tthis.renderLineString(g);\r\n\t\t\t}else if(g instanceof Collection){\r\n\t\t\t\tthis.renderCollection(g);\r\n\t\t\t}else{\r\n\t\t\t\tthrow new Error();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetShapeProperties: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the shape properties. \r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe shape properties.\r\n\t\t\treturn this._shapeProperties;\r\n\t\t},\r\n\r\n\t\tsetShapeProperties: function(s){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the shape properties. \r\n\t\t\t// s: Object\r\n\t\t\t//\t\tThe shape properties to set.\r\n\t\t\tthis._shapeProperties = s;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tcreateShape: function(s, g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the shape rendering the geometry has to be created.\r\n\t\t\t//\t\tThis default implementation creates a circle for a point geometry, a polyline for\r\n\t\t\t//\t\ta LineString geometry and is recursively called when creating a collection.\r\n\t\t\t//\t\tUser may replace this method to produce a custom shape.\r\n\t\t\t// s: dojox/gfx/Surface\r\n\t\t\t//\t\tThe surface on which the method create the shapes.\r\n\t\t\t// g: dojox/geo/openlayers/Geometry?\r\n\t\t\t//\t\tThe reference geometry \r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe resulting shape.\r\n\t\t\tif(!g){\r\n\t\t\t\tg = this._geometry;\r\n\t\t\t}\r\n\r\n\t\t\tvar shape = null;\r\n\t\t\tif(g instanceof Point){\r\n\t\t\t\tshape = s.createCircle();\r\n\t\t\t}else if(g instanceof LineString){\r\n\t\t\t\tshape = s.createPolyline();\r\n\t\t\t}else if(g instanceof Collection){\r\n\t\t\t\tvar grp = s.createGroup();\r\n\t\t\t\tarray.forEach(g.coordinates, function(item){\r\n\t\t\t\t\tvar shp = this.createShape(s, item);\r\n\t\t\t\t\tgrp.add(shp);\r\n\t\t\t\t}, this);\r\n\t\t\t\tshape = grp;\r\n\t\t\t}else{\r\n\t\t\t\tthrow new Error();\r\n\t\t\t}\r\n\t\t\treturn shape;\r\n\t\t},\r\n\r\n\t\tgetShape: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the shape rendering the geometry\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe shape used to render the geometry.\r\n\t\t\tvar g = this._geometry;\r\n\t\t\tif(!g){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(g.shape){\r\n\t\t\t\treturn g.shape;\r\n\t\t\t}\r\n\t\t\tthis.render();\r\n\t\t\treturn g.shape; // dojox.gfx.shape.Shape\r\n\t\t},\r\n\r\n\t\t_createPoint: function(/* dojox/geo/openlayer/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a point shape\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar layer = this.getLayer();\r\n\t\t\tvar s = layer.getSurface();\r\n\t\t\tvar c = this.createShape(s, g);\r\n\t\t\tvar vp = layer.getViewport();\r\n\t\t\tvp.add(c);\r\n\t\t\treturn c;\r\n\t\t},\r\n\r\n\t\t_getPointShape: function(/* dojox/geo/openlayers/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tget the point geometry shape, create it if necessary\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar s = g.shape;\r\n\t\t\tif(s == null){\r\n\t\t\t\ts = this._createPoint(g);\r\n\t\t\t\tg.shape = s;\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t},\r\n\r\n\t\trenderPoint: function(g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders a point geometry.\r\n\t\t\t// g: dojox/geo/openlayers/Point?\r\n\t\t\t//\t\tThe geometry to render, or the current instance geometry if not specified.\r\n\t\t\tif(g == undefined){\r\n\t\t\t\tg = this._geometry;\r\n\t\t\t}\r\n\t\t\tvar layer = this.getLayer();\r\n\t\t\tvar map = layer.getDojoMap();\r\n\r\n\t\t\ts = this._getPointShape(g);\r\n\t\t\tvar prop = lang.mixin({}, this._defaults.pointShape);\r\n\t\t\tprop = lang.mixin(prop, this.getShapeProperties());\r\n\t\t\ts.setShape(prop);\r\n\r\n\t\t\tvar from = this.getCoordinateSystem();\r\n\t\t\tvar p = map.transform(g.coordinates, from);\r\n\r\n\t\t\tvar a = this._getLocalXY(p);\r\n\t\t\tvar cx = a[0];\r\n\t\t\tvar cy = a[1];\r\n\t\t\tvar tr = layer.getViewport().getTransform();\r\n\t\t\tif(tr){\r\n\t\t\t\ts.setTransform(matrix.translate(cx - tr.dx, cy - tr.dy));\r\n\t\t\t}\r\n\t\t\tthis._applyStyle(g);\r\n\t\t},\r\n\r\n\t\t_createLineString: function(/* dojox/geo/openlayers/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate polyline shape and add it to the viewport.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar layer = this.getLayer();\r\n\t\t\tvar s = layer._surface;\r\n\t\t\tvar shape = this.createShape(s, g);\r\n\t\t\tvar vp = layer.getViewport();\r\n\t\t\tvp.add(shape);\r\n\t\t\tg.shape = shape;\r\n\t\t\treturn shape;\r\n\t\t},\r\n\r\n\t\t_getLineStringShape: function(/* dojox/geo/openlayers/Geometry */g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the line string geometry shape, create it if necessary\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar s = g.shape;\r\n\t\t\tif(s == null){\r\n\t\t\t\ts = this._createLineString(g);\r\n\t\t\t\tg.shape = s;\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t},\r\n\r\n\t\trenderLineString: function(g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRenders a line string geometry.\r\n\t\t\t// g: dojox/geo/openlayers/Geometry?\r\n\t\t\t//\t\tThe geometry to render.\r\n\t\t\tif(g == undefined){\r\n\t\t\t\tg = this._geometry;\r\n\t\t\t}\r\n\t\t\tvar layer = this.getLayer();\r\n\t\t\tvar map = layer.getDojoMap();\r\n\t\t\tvar lss = this._getLineStringShape(g);\r\n\t\t\tvar from = this.getCoordinateSystem();\r\n\t\t\tvar points = new Array(g.coordinates.length); // ss.getShape().points;\t\t\r\n\t\t\tvar tr = layer.getViewport().getTransform();\r\n\t\t\tarray.forEach(g.coordinates, function(c, i, array){\r\n\t\t\t\tvar p = map.transform(c, from);\r\n\t\t\t\tvar a = this._getLocalXY(p);\r\n\t\t\t\tif(tr){\r\n\t\t\t\t\ta[0] -= tr.dx;\r\n\t\t\t\t\ta[1] -= tr.dy;\r\n\t\t\t\t}\r\n\t\t\t\tpoints[i] = {\r\n\t\t\t\t\tx: a[0],\r\n\t\t\t\t\ty: a[1]\r\n\t\t\t\t};\r\n\t\t\t}, this);\r\n\t\t\tvar prop = lang.mixin({}, this._defaults.lineStringShape);\r\n\t\t\tprop = lang.mixin(prop, this.getShapeProperties());\r\n\t\t\tprop = lang.mixin(prop, {\r\n\t\t\t\tpoints: points\r\n\t\t\t});\r\n\t\t\tlss.setShape(prop);\r\n\t\t\tthis._applyStyle(g);\r\n\t\t},\r\n\r\n\t\t_applyStyle: function(g){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApply the style on the geometry's shape.\r\n\t\t\t// g: Geometry\r\n\t\t\t//\t\tThe geometry.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(!g || !g.shape){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar f = this.getFill();\r\n\r\n\t\t\tvar fill;\r\n\t\t\tif(!f || lang.isString(f) || lang.isArray(f)){\r\n\t\t\t\tfill = f;\r\n\t\t\t}else{\r\n\t\t\t\tfill = lang.mixin({}, this._defaults.fill);\r\n\t\t\t\tfill = lang.mixin(fill, f);\r\n\t\t\t}\r\n\r\n\t\t\tvar s = this.getStroke();\r\n\t\t\tvar stroke;\r\n\t\t\tif(!s || lang.isString(s) || lang.isArray(s)){\r\n\t\t\t\tstroke = s;\r\n\t\t\t}else{\r\n\t\t\t\tstroke = lang.mixin({}, this._defaults.stroke);\r\n\t\t\t\tstroke = lang.mixin(stroke, s);\r\n\t\t\t}\r\n\r\n\t\t\tthis._applyRecusiveStyle(g, stroke, fill);\r\n\t\t},\r\n\r\n\t\t_applyRecusiveStyle: function(g, stroke, fill){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApply the style on the geometry's shape recursively.\r\n\t\t\t// g: dojox.geo.openlayers.Geometry\r\n\t\t\t//\t\tThe geometry.\r\n\t\t\t// stroke: Object\r\n\t\t\t//\t\tThe stroke\r\n\t\t\t// fill:Object\r\n\t\t\t//\t\tThe fill\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar shp = g.shape;\r\n\r\n\t\t\tif(shp.setFill){\r\n\t\t\t\tshp.setFill(fill);\r\n\t\t\t}\r\n\r\n\t\t\tif(shp.setStroke){\r\n\t\t\t\tshp.setStroke(stroke);\r\n\t\t\t}\r\n\r\n\t\t\tif(g instanceof Collection){\r\n\t\t\t\tarray.forEach(g.coordinates, function(i){\r\n\t\t\t\t\tthis._applyRecusiveStyle(i, stroke, fill);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetStroke: function(s){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the stroke style to be applied on the rendered shape.\r\n\t\t\t// s: Object\r\n\t\t\t//\t\tThe stroke style\r\n\t\t\tthis._stroke = s;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tgetStroke: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the stroke style\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe stroke style\r\n\t\t\treturn this._stroke;\r\n\t\t},\r\n\r\n\t\tsetFill: function(f){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the fill style to be applied on the rendered shape.\r\n\t\t\t// f: Object\r\n\t\t\t//\t\tThe fill style\r\n\t\t\tthis._fill = f;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tgetFill: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the fill style\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe fill style\r\n\t\t\treturn this._fill;\r\n\t\t},\r\n\r\n\t\tremove: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves the shape from the Surface. \r\n\t\t\t//\t\tCalled when the feature is removed from the layer.\r\n\t\t\tvar g = this._geometry;\r\n\t\t\tvar shp = g.shape;\r\n\t\t\tg.shape = null;\r\n\t\t\tif(shp){\r\n\t\t\t\tshp.removeShape();\r\n\t\t\t}\r\n\t\t\tif(g instanceof Collection){\r\n\t\t\t\tarray.forEach(g.coordinates, function(i){\r\n\t\t\t\t\tthis.remove(i);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_defaults: {\r\n\t\t\tfill: null,\r\n\t\t\tstroke: null,\r\n\t\t\tpointShape: {\r\n\t\t\t\tr: 30\r\n\t\t\t},\r\n\t\t\tlineStringShape: null\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}