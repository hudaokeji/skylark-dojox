{"version":3,"sources":["geo/openlayers/Map.js"],"names":["define","kernel","declare","lang","array","json","dom","style","openlayers","TouchInteractionSupport","Layer","Patch","experimental","patchGFX","olMap","_tp","constructor","div","options","byId","this","x","y","opts","openLayersMapOptions","controls","OpenLayers","Control","ScaleLine","maxWidth","Navigation","accessible","kbd","KeyboardDefaults","push","baseLayerType","BaseLayerType","OSM","map","Map","_layerDictionary","olLayers","layers","touchHandler","_touchControl","base","_createBaseLayer","addLayer","initialFit","params","o","initialLocation","fitTo","setBaseLayerType","type","baseLayerName","bl","olm","ob","getZoom","oc","getCenter","recenter","baseLayer","proj","getProjectionObject","transform","EPSG4326","old","l","_getLayer","removeLayer","setCenter","getBaseLayerType","getScale","geodesic","scale","om","getUnits","inches","INCHES_PER_UNIT","getGeodesicPixelSize","w","DOTS_PER_INCH","getOLMap","url","baseLayerUrl","name","baseLayerOptions","transitionEffect","olLayer","Transport","TransportMap","WMS","GOOGLE","Google","VIRTUAL_EARTH","VirtualEarth","YAHOO","Yahoo","ARCGIS","ArcGIS93Rest","layer","i","indexOf","splice","oll","j","layerIndex","index","setLayerIndex","sort","l1","l2","getLayerIndex","dojoMap","ol","added","getLayer","property","value","ols","getBy","ret","Array","forEach","getLayerCount","length","from","ul","lr","b","fromJson","hasOwnProperty","a","bounds","Bounds","transformXY","left","top","right","bottom","p","position","e","extent","parseFloat","zoomToExtent","c","LonLat","to","tp","Projection"],"mappings":"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","file":"../../../geo/openlayers/Map.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/json\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/dom-style\",\r\n\t\"./_base\",\r\n\t\"./TouchInteractionSupport\",\r\n\t\"./Layer\",\r\n\t\"./Patch\"\r\n], function(kernel, declare, lang, array, json, dom, style, openlayers, TouchInteractionSupport, Layer, Patch){\r\n\r\n\tkernel.experimental(\"dojox.geo.openlayers.Map\");\r\n\r\n\r\n\tPatch.patchGFX();\r\n\r\n\t/*=====\r\n\tdojox.geo.openlayers.__MapArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tThe keyword arguments that can be passed in a Map constructor.\r\n\t\t// baseLayerType: String\r\n\t\t//\t\t type of the base layer. Can be any of\r\n\t\t//\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.OSM`: Open Street Map base layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.Transport`: Open Street Map Transport base layer (opencyclemap.org)\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.WMS`: Web Map Service layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.GOOGLE`: Google layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.VIRTUAL_EARTH`: Virtual Earth layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.BING`: Bing layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.YAHOO`: Yahoo layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.ARCGIS`: ESRI ArgGIS layer\r\n\t\t// baseLayerName: String\r\n\t\t//\t\tThe name of the base layer.\r\n\t\t// baseLayerUrl: String\r\n\t\t//\t\tSome layer may need an url such as Web Map Server.\r\n\t\t// baseLayerOptions: String\r\n\t\t//\t\tAdditional specific options passed to OpensLayers layer, such as The list of layer to display, for Web Map Server layer.\r\n\t};\r\n\t=====*/\r\n\r\n\treturn declare(\"dojox.geo.openlayers.Map\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA map viewer based on the OpenLayers library.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tThe `dojox.geo.openlayers.Map` object allows to view maps from various map providers. \r\n\t\t//\t\tIt encapsulates  an `OpenLayers.Map` object on which most operations are delegated.\r\n\t\t//\t\tGFX layers can be added to display GFX georeferenced shapes as well as Dojo widgets.\r\n\t\t//\t\tParameters can be passed as argument at construction time to define the base layer\r\n\t\t//\t\ttype and the base layer parameters such as url or options depending on the type\r\n\t\t//\t\tspecified. These parameters can be any of:\r\n\t\t//\r\n\t\t//\t\t_baseLayerType_: type of the base layer. Can be any of:\r\n\t\t//\t\t\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.OSM`: Open Street Map base layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.Transport`: Open Street Map Transport base layer (opencyclemap.org)\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.WMS`: Web Map Service layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.GOOGLE`: Google layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.VIRTUAL_EARTH`: Virtual Earth layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.BING`: Bing layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.YAHOO`: Yahoo layer\r\n\t\t//\t\t- `dojox.geo.openlayers.BaseLayerType.ARCGIS`: ESRI ArgGIS layer\r\n\t\t//\t\t\r\n\t\t//\t\tNote that access to commercial server such as Google, Virtual Earth or Yahoo may need specific licencing.\r\n\t\t//\t\t\r\n\t\t//\t\tThe parameters value also include:\r\n\t\t//\t\t\r\n\t\t//\t\t- `baseLayerName`: The name of the base layer.\r\n\t\t//\t\t- `baseLayerUrl`: Some layer may need an url such as Web Map Server\r\n\t\t//\t\t- `baseLayerOptions`: Additional specific options passed to OpensLayers layer,\r\n\t\t//\t\t  such as The list of layer to display, for Web Map Server layer.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\tvar map = new dojox.geo.openlayers.widget.Map(div, {\r\n\t\t//\t|\t\tbaseLayerType: dojox.geo.openlayers.BaseLayerType.OSM,\r\n\t\t//\t|\t\tbaseLayerName: 'Open Street Map Layer'\r\n\t\t//\t|\t});\r\n\r\n\t\t// olMap: OpenLayers.Map\r\n\t\t//\t\tThe underlying OpenLayers.Map object.\r\n\t\t//\t\tShould be accessed on read mode only.\r\n\t\tolMap: null,\r\n\r\n\t\t_tp: null,\r\n\r\n\t\tconstructor: function(div, options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstructs a new Map object\r\n\t\t\tif(!options){\r\n\t\t\t\toptions = {};\r\n\t\t\t}\r\n\r\n\t\t\tdiv = dom.byId(div);\r\n\r\n\t\t\tthis._tp = {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\r\n\t\t\tvar opts = options.openLayersMapOptions;\r\n\r\n\t\t\tif(!opts){\r\n\t\t\t\topts = {\r\n\t\t\t\t\tcontrols: [new OpenLayers.Control.ScaleLine({\r\n\t\t\t\t\t\tmaxWidth: 200\r\n\t\t\t\t\t}), new OpenLayers.Control.Navigation()]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif(options.accessible){\r\n\t\t\t\tvar kbd = new OpenLayers.Control.KeyboardDefaults();\r\n\t\t\t\tif(!opts.controls){\r\n\t\t\t\t\topts.controls = [];\r\n\t\t\t\t}\r\n\t\t\t\topts.controls.push(kbd);\r\n\t\t\t}\r\n\t\t\tvar baseLayerType = options.baseLayerType;\r\n\t\t\tif(!baseLayerType){\r\n\t\t\t\tbaseLayerType = openlayers.BaseLayerType.OSM;\r\n\t\t\t}\r\n\t\t\tvar map = new OpenLayers.Map(div, opts);\r\n\t\t\tthis.olMap = map;\r\n\r\n\t\t\tthis._layerDictionary = {\r\n\t\t\t\tolLayers: [],\r\n\t\t\t\tlayers: []\r\n\t\t\t};\r\n\r\n\t\t\tif(options.touchHandler){\r\n\t\t\t\tthis._touchControl = new TouchInteractionSupport(map);\r\n\t\t\t}\r\n\r\n\t\t\tvar base = this._createBaseLayer(options);\r\n\t\t\tthis.addLayer(base);\r\n\r\n\t\t\tthis.initialFit(options);\r\n\t\t},\r\n\r\n\t\tinitialFit: function(params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPerforms an initial fit to contents.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar o = params.initialLocation;\r\n\t\t\tif(!o){\r\n\t\t\t\to = [-160, 70, 160, -70];\r\n\t\t\t}\r\n\t\t\tthis.fitTo(o);\r\n\t\t},\r\n\r\n\t\tsetBaseLayerType: function(type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the base layer type, replacing the existing base layer\r\n\t\t\t// type: dojox/geo/openlayers.BaseLayerType\r\n\t\t\t//\t\tbase layer type\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe newly created layer.\r\n\t\t\tif(type == this.baseLayerType){\r\n\t\t\t\treturn null; // Layer\r\n\t\t\t}\r\n\r\n\t\t\tvar o = null;\r\n\t\t\tif(typeof type == \"string\"){\r\n\t\t\t\to = {\r\n\t\t\t\t\tbaseLayerName: type,\r\n\t\t\t\t\tbaseLayerType: type\r\n\t\t\t\t};\r\n\t\t\t\tthis.baseLayerType = type;\r\n\t\t\t}else if(typeof type == \"object\"){\r\n\t\t\t\to = type;\r\n\t\t\t\tthis.baseLayerType = o.baseLayerType;\r\n\t\t\t}\r\n\t\t\tvar bl = null;\r\n\t\t\tif(o != null){\r\n\t\t\t\tbl = this._createBaseLayer(o);\r\n\t\t\t\tif(bl != null){\r\n\t\t\t\t\tvar olm = this.olMap;\r\n\t\t\t\t\tvar ob = olm.getZoom();\r\n\t\t\t\t\tvar oc = olm.getCenter();\r\n\t\t\t\t\tvar recenter = !!oc && !!olm.baseLayer && !!olm.baseLayer.map;\r\n\r\n\t\t\t\t\tif(recenter){\r\n\t\t\t\t\t\tvar proj = olm.getProjectionObject();\r\n\t\t\t\t\t\tif(proj != null){\r\n\t\t\t\t\t\t\toc = oc.transform(proj, openlayers.EPSG4326);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar old = olm.baseLayer;\r\n\t\t\t\t\tif(old != null){\r\n\t\t\t\t\t\tvar l = this._getLayer(old);\r\n\t\t\t\t\t\tthis.removeLayer(l);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(bl != null){\r\n\t\t\t\t\t\tthis.addLayer(bl);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(recenter){\r\n\t\t\t\t\t\tproj = olm.getProjectionObject();\r\n\t\t\t\t\t\tif(proj != null){\r\n\t\t\t\t\t\t\toc = oc.transform(openlayers.EPSG4326, proj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tolm.setCenter(oc, ob);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn bl;\r\n\t\t},\r\n\r\n\t\tgetBaseLayerType: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the base layer type.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe current base layer type.\r\n\t\t\treturn this.baseLayerType; // openlayers.BaseLayerType\r\n\t\t},\r\n\r\n\t\tgetScale: function(geodesic){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the current scale\r\n\t\t\t// geodesic: Boolean\r\n\t\t\t//\t\tTell if geodesic calculation should be performed. If set to\r\n\t\t\t//\t\ttrue, the scale will be calculated based on the horizontal size of the\r\n\t\t\t//\t\tpixel in the center of the map viewport.\r\n\t\t\tvar scale = null;\r\n\t\t\tvar om = this.olMap;\r\n\t\t\tif(geodesic){\r\n\t\t\t\tvar units = om.getUnits();\r\n\t\t\t\tif(!units){\r\n\t\t\t\t\treturn null;\t// Number\r\n\t\t\t\t}\r\n\t\t\t\tvar inches = OpenLayers.INCHES_PER_UNIT;\r\n\t\t\t\tscale = (om.getGeodesicPixelSize().w || 0.000001) * inches[\"km\"] * OpenLayers.DOTS_PER_INCH;\r\n\t\t\t}else{\r\n\t\t\t\tscale = om.getScale();\r\n\t\t\t}\r\n\t\t\treturn scale;\t// Number\r\n\t\t},\r\n\r\n\t\tgetOLMap: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tgets the underlying OpenLayers map object.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe underlying OpenLayers map object.\r\n\t\t\treturn this.olMap;\t// OpenLayers.Map\r\n\t\t},\r\n\r\n\t\t_createBaseLayer: function(params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates the base layer.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar base = null;\r\n\t\t\tvar type = params.baseLayerType;\r\n\t\t\tvar url = params.baseLayerUrl;\r\n\t\t\tvar name = params.baseLayerName;\r\n\t\t\tvar options = params.baseLayerOptions;\r\n\r\n\t\t\tif(!name){\r\n\t\t\t\tname = type;\r\n\t\t\t}\r\n\t\t\tif(!options){\r\n\t\t\t\toptions = {};\r\n\t\t\t}\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase openlayers.BaseLayerType.OSM:\r\n\t\t\t\t\toptions.transitionEffect = \"resize\";\r\n\t\t\t\t\t//\t\t\t\tbase = new OpenLayers.Layer.OSM(name, url, options);\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.OSM(name, url, options)\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.Transport:\r\n\t\t\t\t\toptions.transitionEffect = \"resize\";\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.OSM.TransportMap(name, url, options)\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.WMS:\r\n\t\t\t\t\tif(!url){\r\n\t\t\t\t\t\turl = \"http://labs.metacarta.com/wms/vmap0\";\r\n\t\t\t\t\t\tif(!options.layers){\r\n\t\t\t\t\t\t\toptions.layers = \"basic\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.WMS(name, url, options, {\r\n\t\t\t\t\t\t\ttransitionEffect: \"resize\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.GOOGLE:\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.Google(name, options)\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.VIRTUAL_EARTH:\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.VirtualEarth(name, options)\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.YAHOO:\r\n\t\t\t\t\t//\t\t\t\tbase = new OpenLayers.Layer.Yahoo(name);\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.Yahoo(name, options)\r\n\t\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase openlayers.BaseLayerType.ARCGIS:\r\n\t\t\t\t\tif(!url){\r\n\t\t\t\t\t\turl = \"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer/export\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.ArcGIS93Rest(name, url, options, {})\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif(base == null){\r\n\t\t\t\tif(type instanceof OpenLayers.Layer){\r\n\t\t\t\t\tbase = type;\r\n\t\t\t\t}else{\r\n\t\t\t\t\toptions.transitionEffect = \"resize\";\r\n\t\t\t\t\tbase = new Layer(name, {\r\n\t\t\t\t\t\tolLayer: new OpenLayers.Layer.OSM(name, url, options)\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.baseLayerType = openlayers.BaseLayerType.OSM;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn base;\r\n\t\t},\r\n\r\n\t\tremoveLayer: function(layer){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove the specified layer from the map.\r\n\t\t\t// layer: Layer\r\n\t\t\t//\t\tThe layer to remove from the map.\r\n\t\t\tvar om = this.olMap;\r\n\t\t\tvar i = array.indexOf(this._layerDictionary.layers, layer);\r\n\t\t\tif(i > 0){\r\n\t\t\t\tthis._layerDictionary.layers.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tvar oll = layer.olLayer;\r\n\t\t\tvar j = array.indexOf(this._layerDictionary.olLayers, oll);\r\n\t\t\tif(j > 0){\r\n\t\t\t\tthis._layerDictionary.olLayers.splice(i, j);\r\n\t\t\t}\r\n\t\t\tom.removeLayer(oll, false);\r\n\t\t},\r\n\r\n\t\tlayerIndex: function(layer, index){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet or retrieve the layer index.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSet or get the layer index, that is the z-order of the layer.\r\n\t\t\t//\t\tif the index parameter is provided, the layer index is set to\r\n\t\t\t//\t\tthis value. If the index parameter is not provided, the index of \r\n\t\t\t//\t\tthe layer is returned.\r\n\t\t\t// layer: Layer\r\n\t\t\t//\t\tthe layer to retrieve the index.\r\n\t\t\t// index: int?\r\n\t\t\t//\t\tindex of the layer\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe index of the layer.\r\n\t\t\tvar olm = this.olMap;\r\n\t\t\tif(!index){\r\n\t\t\t\treturn olm.getLayerIndex(layer.olLayer);\r\n\t\t\t}\r\n\t\t\t//olm.raiseLayer(layer.olLayer, index);\r\n\t\t\tolm.setLayerIndex(layer.olLayer, index);\r\n\r\n\t\t\tthis._layerDictionary.layers.sort(function(l1, l2){\r\n\t\t\t\treturn olm.getLayerIndex(l1.olLayer) - olm.getLayerIndex(l2.olLayer);\r\n\t\t\t});\r\n\t\t\tthis._layerDictionary.olLayers.sort(function(l1, l2){\r\n\t\t\t\treturn olm.getLayerIndex(l1) - olm.getLayerIndex(l2);\r\n\t\t\t});\r\n\r\n\t\t\treturn index; // Number\r\n\t\t},\r\n\r\n\t\taddLayer: function(layer){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd the specified layer to the map.\r\n\t\t\t// layer: Layer\r\n\t\t\t//\t\tThe layer to add to the map.\r\n\t\t\tlayer.dojoMap = this;\r\n\t\t\tvar om = this.olMap;\r\n\t\t\tvar ol = layer.olLayer;\r\n\t\t\tthis._layerDictionary.olLayers.push(ol);\r\n\t\t\tthis._layerDictionary.layers.push(layer);\r\n\t\t\tom.addLayer(ol);\r\n\t\t\tlayer.added();\r\n\t\t},\r\n\r\n\t\t_getLayer: function(/*OpenLayer.Layer */ol){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRetrieve the dojox.geo.openlayer.Layer from the OpenLayer.Layer\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar i = array.indexOf(this._layerDictionary.olLayers, ol);\r\n\t\t\tif(i != -1){\r\n\t\t\t\treturn this._layerDictionary.layers[i];\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\tgetLayer: function(property, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the layer whose property matches the value.\r\n\t\t\t// property: String\r\n\t\t\t//\t\tThe property to check\r\n\t\t\t// value: Object\r\n\t\t\t//\t\tThe value to match\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe layer(s) matching the property's value. Since multiple layers\r\n\t\t\t//\t\tmatch the property's value the return value is an array. \r\n\t\t\t// example:\r\n\t\t\t//\t\tvar layers = map.getLayer(\"name\", \"Layer Name\");\r\n\t\t\tvar om = this.olMap;\r\n\t\t\tvar ols = om.getBy(\"layers\", property, value);\r\n\t\t\tvar ret = new Array(); //[];\r\n\t\t\tarray.forEach(ols, function(ol){\r\n\t\t\t\tret.push(this._getLayer(ol));\r\n\t\t\t}, this);\r\n\t\t\treturn ret; // Layer[]\r\n\t\t},\r\n\r\n\t\tgetLayerCount: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the count of layers of this map.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe number of layers of this map. \r\n\t\t\tvar om = this.olMap;\r\n\t\t\tif(om.layers == null){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn om.layers.length; // Number\r\n\t\t},\r\n\r\n\t\tfitTo: function(o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFits the map on a point,or an area\r\n\t\t\t// description:\r\n\t\t\t//\t\tFits the map on the point or extent specified as parameter. \r\n\t\t\t// o: Object\r\n\t\t\t//\t\tObject with key values fit parameters or a JSON string.\r\n\t\t\t// example:\r\n\t\t\t//\t\tExamples of arguments passed to the fitTo function:\r\n\t\t\t//\t|\tnull\r\n\t\t\t//\t\tThe map is fit on full extent\r\n\t\t\t//\r\n\t\t\t//\t|\t{\r\n\t\t\t//\t|\t\tbounds: [ulx, uly, lrx, lry]\r\n\t\t\t//\t|\t}\r\n\t\t\t//\t\tThe map is fit on the specified bounds expressed as decimal degrees latitude and longitude.\r\n\t\t\t//\t\tThe bounds are defined with their upper left and lower right corners coordinates.\r\n\t\t\t// \r\n\t\t\t//\t|\t{\r\n\t\t\t//\t|\t\tposition: [longitude, latitude],\r\n\t\t\t//\t|\t\textent: degrees\r\n\t\t\t//\t|\t}\r\n\t\t\t//\t\tThe map is fit on the specified position showing the extent `<extent>` around\r\n\t\t\t//\t\tthe specified center position.\r\n\r\n\t\t\tvar map = this.olMap;\r\n\t\t\tvar from = openlayers.EPSG4326;\r\n\r\n\t\t\tif(o == null){\r\n\t\t\t\tvar c = this.transformXY(0, 0, from);\r\n\t\t\t\tmap.setCenter(new OpenLayers.LonLat(c.x, c.y));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar b = null;\r\n\t\t\tif(typeof o == \"string\"){\r\n\t\t\t\tvar j = json.fromJson(o);\r\n\t\t\t}else{\r\n\t\t\t\tj = o;\r\n\t\t\t}\r\n\t\t\tvar ul;\r\n\t\t\tvar lr;\r\n\t\t\tif(j.hasOwnProperty(\"bounds\")){\r\n\t\t\t\tvar a = j.bounds;\r\n\t\t\t\tb = new OpenLayers.Bounds();\r\n\t\t\t\tul = this.transformXY(a[0], a[1], from);\r\n\t\t\t\tb.left = ul.x;\r\n\t\t\t\tb.top = ul.y;\r\n\t\t\t\tlr = this.transformXY(a[2], a[3], from);\r\n\t\t\t\tb.right = lr.x;\r\n\t\t\t\tb.bottom = lr.y;\r\n\t\t\t}\r\n\t\t\tif(b == null){\r\n\t\t\t\tif(j.hasOwnProperty(\"position\")){\r\n\t\t\t\t\tvar p = j.position;\r\n\t\t\t\t\tvar e = j.hasOwnProperty(\"extent\") ? j.extent : 1;\r\n\t\t\t\t\tif(typeof e == \"string\"){\r\n\t\t\t\t\t\te = parseFloat(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tb = new OpenLayers.Bounds();\r\n\t\t\t\t\tul = this.transformXY(p[0] - e, p[1] + e, from);\r\n\t\t\t\t\tb.left = ul.x;\r\n\t\t\t\t\tb.top = ul.y;\r\n\t\t\t\t\tlr = this.transformXY(p[0] + e, p[1] - e, from);\r\n\t\t\t\t\tb.right = lr.x;\r\n\t\t\t\t\tb.bottom = lr.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(b == null){\r\n\t\t\t\tif(o.length == 4){\r\n\t\t\t\t\tb = new OpenLayers.Bounds();\r\n\t\t\t\t\t// TODO Choose the correct method\r\n\t\t\t\t\tif(false){\r\n\t\t\t\t\t\tb.left = o[0];\r\n\t\t\t\t\t\tb.top = o[1];\r\n\r\n\t\t\t\t\t\tb.right = o[2];\r\n\t\t\t\t\t\tb.bottom = o[3];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tul = this.transformXY(o[0], o[1], from);\r\n\t\t\t\t\t\tb.left = ul.x;\r\n\t\t\t\t\t\tb.top = ul.y;\r\n\t\t\t\t\t\tlr = this.transformXY(o[2], o[3], from);\r\n\t\t\t\t\t\tb.right = lr.x;\r\n\t\t\t\t\t\tb.bottom = lr.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(b != null){\r\n\t\t\t\tmap.zoomToExtent(b, true);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttransform: function(p, from, to){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransforms the point passed as argument, expressed in the <em>from</em> \r\n\t\t\t//\t\tcoordinate system to the map coordinate system.\r\n\t\t\t// description:\r\n\t\t\t//\t\tTransforms the point passed as argument without modifying it. The point is supposed to be expressed\r\n\t\t\t//\t\tin the <em>from</em> coordinate system and is transformed to the map coordinate system.\r\n\t\t\t// p: Object {x, y}\r\n\t\t\t//\t\tThe point to transform\r\n\t\t\t// from: OpenLayers.Projection\r\n\t\t\t//\t\tThe projection in which the point is expressed.\r\n\t\t\treturn this.transformXY(p.x, p.y, from, to);\r\n\t\t},\r\n\r\n\t\ttransformXY: function(x, y, from, to){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransforms the coordinates passed as argument, expressed in the <em>from</em> \r\n\t\t\t//\t\tcoordinate system to the map coordinate system.\r\n\t\t\t// description:\r\n\t\t\t//\t\tTransforms the coordinates passed as argument. The coordinate are supposed to be expressed\r\n\t\t\t//\t\tin the <em>from</em> coordinate system and are transformed to the map coordinate system.\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tThe longitude coordinate to transform.\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tThe latitude coordinate to transform.\r\n\t\t\t// from: OpenLayers.Projection?\r\n\t\t\t//\t\tThe projection in which the point is expressed, or EPSG4326 is not specified.\r\n\t\t\t// to: OpenLayers.Projection?\r\n\t\t\t//\t\tThe projection in which the point is converted to. In not specifed, the map projection is used.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe transformed coordinate as an {x,y} Object.\r\n\r\n\t\t\tvar tp = this._tp;\r\n\t\t\ttp.x = x;\r\n\t\t\ttp.y = y;\r\n\t\t\tif(!from){\r\n\t\t\t\tfrom = openlayers.EPSG4326;\r\n\t\t\t}\r\n\t\t\tif(!to){\r\n\t\t\t\tto = this.olMap.getProjectionObject();\r\n\t\t\t}\r\n\t\t\ttp = OpenLayers.Projection.transform(tp, from, to);\r\n\t\t\treturn tp; // Object\r\n\t\t}\r\n\r\n\t});\r\n\r\n});\r\n"]}