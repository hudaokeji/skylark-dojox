{"version":3,"sources":["secure/capability.js"],"names":["dojo","provide","dojox","secure","badProps","capability","keywords","validate","script","safeLibraries","safeGlobals","this","i","length","newScript","outerRefs","badThis","blocks","match","Error","parseBlock","t","func","a","b","params","block","parseVars","decl","replace","identifier","p","refs","substring","charAt","findOuterRefs","push","prop","prefix","key","test","oper","RegExp","join","call"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,2BAEbC,MAAMC,OAAOC,SAAW,6FACxBF,MAAMC,OAAOE,YACZC,UAAW,QAAS,OAAQ,QAAS,QAAS,WAAW,WAAY,UAAW,SAAU,KACxF,OAAQ,OAAO,QAAS,UAAW,MAAO,WAAW,KAAM,KAAM,aAAc,MAC/E,OAAO,QAAQ,SAAU,SACzB,QAAS,OAAQ,MAAO,SAAU,MAAO,OAAQ,SACnDC,SAAW,SAAmBC,EAAgBC,EAAwBC,GAkBrE,IADA,IAAIJ,EAAWK,KAAKL,SACXM,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IACpCF,EAAYJ,EAASM,KAAI,EAE1B,IAwDIE,EAAUC,EAxDVC,EAAU,wDACVC,KACJ,GAAGT,EAAOU,MAAM,0DACf,MAAM,IAAIC,MAAM,uCAEjB,GAAGX,EAAOU,MAAM,cACf,MAAM,IAAIC,MAAM,gDAmDjB,SAASC,EAAWC,EAAEC,EAAKC,EAAEC,EAAEC,EAAOC,GAYrC,SAASC,EAAUN,EAAEE,EAAEC,EAAEI,GACxBA,EAAKC,QAAQ,0BAA0B,SAASR,EAAES,GACjD,GAAiB,SAAdA,EACF,MAAM,IAAIX,MAAM,4BAEVJ,EAAUe,KASnB,OAzBAJ,EAAMG,QAAQ,4BAA4B,SAASR,EAAEE,EAAEC,GAE1CP,EAAOO,GACb,WAAa,IAEpBE,EAAQA,EAAMG,QAAQ,qDAAqD,SAASR,EAAEU,EAAER,EAAEC,GAGxF,cAFWP,EAAOO,GACNR,IACJe,GAAG,KAAOR,GAAG,IAAM,IAAMC,IAEnCT,EArCD,SAAuBW,EAAMJ,GAC5B,IAAIP,KAsBJ,OArBAW,EAAMG,QAAQ,QAAQ,SAASL,GAC9B,IAAIQ,EAAOf,EAAOO,EAAES,UAAU,IAC9B,IAAK,IAAIrB,KAAKoB,EAAM,CACnB,GAAGpB,GAAKI,EACP,MAAMJ,EAEC,QAALA,GAAeoB,EAAK,YAA8B,GAAhBA,EAAW,OAE/CpB,EAAII,GAEG,WAALJ,IACFG,EAAUH,GAAK,MAIlBc,EAAMG,QAAQ,+BAA+B,SAASR,EAAEE,EAAEO,GACzD,GAAyB,KAAtBA,EAAWI,OAAO,GACpB,MAAM,IAAIf,MAAM,8BAEjBJ,EAAUe,GAAc,IAElBf,EAcKoB,CAAcT,GAUvBJ,GACFK,EAAUN,EAAEE,EAAEA,EAAEE,GAEjBC,EAAMG,QAAQ,8BAA8BF,IAEpCJ,GAAK,KAAOC,GAAK,IAAM,KAAOP,EAAOmB,KAAKrB,GAAW,IA3E9DP,EAASA,EAAOqB,QAAQ,oBAAqB,KAI5CA,QAAQ,+CAA+C,SAASR,GAC/D,OAAOA,EAAEH,MAAM,eAAiB,IAAM,MAEvCW,QAAQ,kEAAkE,SAASR,EAAEgB,EAAKC,EAAOC,GAGhG,GAAG,6FAA6FC,KADhGH,EAAOA,GAAQE,GAEd,MAAM,IAAIpB,MAAM,yBAA2BkB,GAE5C,OAAQC,GAAWA,EAAS,MAAU,OAEjCT,QAAQ,iEAAiE,SAASY,GACxF,IAAIA,EAAKvB,MAAM,4CACd,MAAM,IAAIC,MAAM,oBAAsBsB,EAAKR,UAAU,MAGvDzB,EAASA,EAAOqB,QAAQ,IAAIa,OAAO,IAAMjC,EAAckC,KAAK,KAAO,cAAc,KAAK,SAASC,GAC9F,MAAO,SAwDR,GAEC9B,EAAYN,EAAOqB,QAAQ,iEAAkET,SAExFN,GAAaN,IAAWA,EAASM,IAEvC,IAAKF,KADLQ,EAAW,EAAE,EAAE,EAAE,EAAE,EAAEZ,GACXO,EACT,KAAKH,KAAKF,GACT,MAAM,IAAIS,MAAM,wBAA0BP","file":"../../secure/capability.js","sourcesContent":["dojo.provide(\"dojox.secure.capability\");\r\n\r\ndojox.secure.badProps = /^__|^(apply|call|callee|caller|constructor|eval|prototype|this|unwatch|valueOf|watch)$|__$/;\r\ndojox.secure.capability = {\r\n\tkeywords: [\"break\", \"case\", \"catch\", \"const\", \"continue\",\"debugger\", \"default\", \"delete\", \"do\",\r\n\t\t \"else\", \"enum\",\"false\", \"finally\", \"for\", \"function\",\"if\", \"in\", \"instanceof\", \"new\",\r\n\t\t \"null\",\"yield\",\"return\", \"switch\",\r\n\t\t \"throw\", \"true\", \"try\", \"typeof\", \"var\", \"void\", \"while\"],\r\n\tvalidate : function(/*string*/script,/*Array*/safeLibraries,/*Object*/safeGlobals) {\r\n\t\t// summary:\r\n\t\t//\t\tpass in the text of a script. If it passes and it can be eval'ed, it should be safe.\r\n\t\t//\t\tNote that this does not do full syntax checking, it relies on eval to reject invalid scripts.\r\n\t\t//\t\tThere are also known false rejections:\r\n\t\t//\r\n\t\t//\t\t- Nesting vars inside blocks will not declare the variable for the outer block\r\n\t\t// \t \t- Named functions are not treated as declaration so they are generally not allowed unless the name is declared with a var.\r\n\t\t//\t\t- Var declaration that involve multiple comma delimited variable assignments are not accepted\r\n\t\t// script:\r\n\t\t//\t\t the script to execute\r\n\t\t// safeLibraries:\r\n\t\t//\t\tThe safe libraries that can be called (the functions can not be access/modified by the untrusted code, only called)\r\n\t\t// safeGlobals:\r\n\t\t//\t\tThese globals can be freely interacted with by the untrusted code\r\n\t\t\r\n\t\r\n\t\tvar keywords = this.keywords;\r\n\t\tfor (var i = 0; i < keywords.length; i++) {\r\n\t\t\tsafeGlobals[keywords[i]]=true;\r\n\t\t}\r\n\t\tvar badThis = \"|this| keyword in object literal without a Class call\";\r\n\t\tvar blocks = []; // keeps track of the outer references from each inner block\r\n\t\tif(script.match(/[\\u200c-\\u200f\\u202a-\\u202e\\u206a-\\u206f\\uff00-\\uffff]/)){\r\n\t\t\tthrow new Error(\"Illegal unicode characters detected\");\r\n\t\t}\r\n\t\tif(script.match(/\\/\\*@cc_on/)){\r\n\t\t\tthrow new Error(\"Conditional compilation token is not allowed\");\r\n\t\t}\r\n\t\tscript = script.replace(/\\\\[\"'\\\\\\/bfnrtu]/g, '@'). // borrows some tricks from json.js\r\n\t\t\t// now clear line comments, block comments, regular expressions, and strings.\r\n\t\t\t// By doing it all at once, the regular expression uses left to right parsing, and the most\r\n\t\t\t// left token is read first. It is also more compact.\r\n\t\t\treplace(/\\/\\/.*|\\/\\*[\\w\\W]*?\\*\\/|(\"[^\"]*\")|('[^']*')/g,function(t) {\r\n\t\t\t\treturn t.match(/^\\/\\/|^\\/\\*/) ? ' ' : '0'; // comments are replaced with a space, strings and regex are replaced with a single safe token (0)\r\n\t\t\t}).\r\n\t\t\treplace(/\\.\\s*([a-z\\$_A-Z][\\w\\$_]*)|([;,{])\\s*([a-z\\$_A-Z][\\w\\$_]*\\s*):/g,function(t,prop,prefix,key) {\r\n\t\t\t\t// find all the dot property references, all the object literal keys, and labels\r\n\t\t\t\tprop = prop || key;\r\n\t\t\t\tif(/^__|^(apply|call|callee|caller|constructor|eval|prototype|this|unwatch|valueOf|watch)$|__$/.test(prop)){\r\n\t\t\t\t\tthrow new Error(\"Illegal property name \" + prop);\r\n\t\t\t\t}\r\n\t\t\t\treturn (prefix && (prefix + \"0:\")) || '~'; // replace literal keys with 0: and replace properties with the innocuous ~\r\n\t\t\t});\r\n\t\tscript.replace(/([^\\[][\\]\\}]\\s*=)|((\\Wreturn|\\S)\\s*\\[\\s*\\+?)|([^=!][=!]=[^=])/g,function(oper) {// check for illegal operator usages\r\n\t\t\tif(!oper.match(/((\\Wreturn|[=\\&\\|\\:\\?\\,])\\s*\\[)|\\[\\s*\\+$/)){ // the whitelist for [ operator for array initializer context or [+num] syntax\r\n\t\t\t\tthrow new Error(\"Illegal operator \" + oper.substring(1));\r\n\t\t\t}\r\n\t\t});\r\n\t\tscript = script.replace(new RegExp(\"(\" + safeLibraries.join(\"|\") + \")[\\\\s~]*\\\\(\",\"g\"),function(call) { // find library calls and make them look safe\r\n\t\t\treturn \"new(\"; // turn into a known safe call\r\n\t\t});\r\n\t\tfunction findOuterRefs(block,func) {\r\n\t\t\tvar outerRefs = {};\r\n\t\t\tblock.replace(/#\\d+/g,function(b) { // graft in the outer references from the inner scopes\r\n\t\t\t\tvar refs = blocks[b.substring(1)];\r\n\t\t\t\tfor (var i in refs) {\r\n\t\t\t\t\tif(i == badThis) {\r\n\t\t\t\t\t\tthrow i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(i == 'this' && refs[':method'] && refs['this'] == 1) {\r\n\t\t\t\t\t\t// if we are in an object literal the function may be a bindable method, this must only be in the local scope\r\n\t\t\t\t\t\ti = badThis;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(i != ':method'){\r\n\t\t\t\t\t\touterRefs[i] = 2; // the reference is more than just local\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tblock.replace(/(\\W|^)([a-z_\\$A-Z][\\w_\\$]*)/g,function(t,a,identifier) { // find all the identifiers\r\n\t\t\t\tif(identifier.charAt(0)=='_'){\r\n\t\t\t\t\tthrow new Error(\"Names may not start with _\");\r\n\t\t\t\t}\r\n\t\t\t\touterRefs[identifier] = 1;\r\n\t\t\t});\r\n\t\t\treturn outerRefs;\r\n\t\t}\r\n\t\tvar newScript,outerRefs;\r\n\t\tfunction parseBlock(t,func,a,b,params,block) {\r\n\t\t\tblock.replace(/(^|,)0:\\s*function#(\\d+)/g,function(t,a,b) { // find functions in object literals\r\n\t\t\t// note that if named functions are allowed, it could be possible to have label: function name() {} which is a security breach\r\n\t\t\t\t\tvar refs = blocks[b];\r\n\t\t\t\t\trefs[':method'] = 1;//mark it as a method\r\n\t\t\t});\r\n\t\t\tblock = block.replace(/(^|[^_\\w\\$])Class\\s*\\(\\s*([_\\w\\$]+\\s*,\\s*)*#(\\d+)/g,function(t,p,a,b) { // find Class calls\r\n\t\t\t\t\tvar refs = blocks[b];\r\n\t\t\t\t\tdelete refs[badThis];\r\n\t\t\t\t\treturn (p||'') + (a||'') + \"#\" + b;\r\n\t\t\t});\r\n\t\t\touterRefs = findOuterRefs(block,func); // find the variables in this block\r\n\t\t\tfunction parseVars(t,a,b,decl) { // find var decls\r\n\t\t\t\tdecl.replace(/,?([a-z\\$A-Z][_\\w\\$]*)/g,function(t,identifier) {\r\n\t\t\t\t\tif(identifier == 'Class'){\r\n\t\t\t\t\t\tthrow new Error(\"Class is reserved\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete outerRefs[identifier]; // outer reference is safely referenced here\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(func) {\r\n\t\t\t\tparseVars(t,a,a,params); // the parameters are declare variables\r\n\t\t\t}\r\n\t\t\tblock.replace(/(\\W|^)(var) ([ \\t,_\\w\\$]+)/g,parseVars); // and vars declare variables\r\n\t\t\t// FIXME: Give named functions #name syntax so they can be detected as vars in outer scopes (but be careful of nesting)\r\n\t\t\treturn (a || '') + (b || '') + \"#\" + (blocks.push(outerRefs)-1); // return a block reference so the outer block can fetch it\r\n\t\t}\r\n\t\tdo {\r\n\t\t\t// get all the blocks, starting with inside and moving out, capturing the parameters of functions and catchs as variables along the way\r\n\t\t\tnewScript = script.replace(/((function|catch)(\\s+[_\\w\\$]+)?\\s*\\(([^\\)]*)\\)\\s*)?{([^{}]*)}/g, parseBlock);\r\n\t\t}\r\n\t\twhile(newScript != script && (script = newScript)); // keep going until we can't find anymore blocks\r\n\t\tparseBlock(0,0,0,0,0,script); //findOuterRefs(script); // find the references in the outside scope\r\n\t\tfor (i in outerRefs) {\r\n\t\t\tif(!(i in safeGlobals)) {\r\n\t\t\t\tthrow new Error(\"Illegal reference to \" + i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n};"]}