{"version":3,"sources":["form/PasswordValidator.js"],"names":["define","array","lang","domAttr","i18n","query","keys","FormValueWidget","ValidationTextBox","template","formNlsPasswordValidator","declare","_ChildTextBox","containerWidget","type","reset","prototype","_setValueAttr","call","this","_hasBeenBlurred","postCreate","inherited","arguments","name","remove","focusNode","connect","_onChildKeyPress","e","keyCode","ENTER","_setBlurValue","_OldPWBox","_isPWValid","newVal","priority","superclass","attr","pwCheck","_childValueAttr","_inputWidgets","get","isValid","isFocused","_update","validate","_onMouse","_getValueAttr","_started","value","_NewPWBox","required","onChange","_VerifyPWBox","oldName","templateString","every","i","_setStateClass","map","item","forEach","_createSubWidgets","widgets","msg","getLocalization","idx","c","p","invalidMessage","badPasswordMessage","nomatchMessage","password","push","containerNode","Error","domNode","v","set","_setDisabledAttr","_setRequiredAttribute","setAttribute","_refreshState","focus","f"],"mappings":"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","file":"../../form/PasswordValidator.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/i18n\",\r\n\t\"dojo/query\",\r\n\t\"dojo/keys\",\r\n\t\"dijit/form/_FormValueWidget\",\r\n\t\"dijit/form/ValidationTextBox\",\r\n\t\"dojo/text!./resources/PasswordValidator.html\",\r\n\t\"dojo/i18n!./nls/PasswordValidator\",\r\n\t\"dojo/_base/declare\"\r\n], function(array, lang, domAttr, i18n, query, keys, FormValueWidget, ValidationTextBox, template, formNlsPasswordValidator, declare){\r\n\r\nvar _ChildTextBox = declare(\"dojox.form._ChildTextBox\", ValidationTextBox, {\r\n\t// summary:\r\n\t//\t\tA class that is shared between all our children - extends\r\n\t//\t\tValidationTextBox and provides some shared functionality\r\n\r\n\t// containerWidget: widget\r\n\t//\t\tOur parent (the PasswordValidator)\r\n\tcontainerWidget: null,\r\n\r\n\t// type: string\r\n\t//\t\tDon't override this - we are all \"password\" types\r\n\ttype: \"password\",\r\n\r\n\treset: function(){\r\n\t\t// summary:\r\n\t\t//\t\tForce-set to empty string (we don't save passwords EVER)...and\r\n\t\t//\t\tsince _OldPWBox overrides _setValueAttr to check for empty string,\r\n\t\t//\t\tcall our parent class directly (not this.inherited())\r\n\t\tValidationTextBox.prototype._setValueAttr.call(this, \"\", true);\r\n\t\tthis._hasBeenBlurred = false;\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tWe want to remove the \"name\" attribute from our focus node if\r\n\t\t//\t\twe don't have one set - this prevents all our extra values\r\n\t\t//\t\tfrom being posted on submit\r\n\t\tthis.inherited(arguments);\r\n\t\tif(!this.name){\r\n\t\t\tdomAttr.remove(this.focusNode, \"name\");\r\n\t\t}\r\n\t\tthis.connect(this.focusNode, \"onkeypress\", \"_onChildKeyPress\");\r\n\t},\r\n\r\n\t_onChildKeyPress: function(e){\r\n\t\t// Check if we pressed <enter> - if so, set our blur value so that\r\n\t\t// the parent widget will be updated correctly.\r\n\t\tif(e && e.keyCode == keys.ENTER){\r\n\t\t\tthis._setBlurValue();\r\n\t\t}\r\n\t}\r\n});\r\n\r\n\r\n\r\nvar _OldPWBox = declare(\"dojox.form._OldPWBox\", _ChildTextBox, {\r\n\t// summary:\r\n\t//\t\tA class representing our \"old password\" box.\r\n\t//\r\n\t// _isPWValid: boolean\r\n\t//\t\tWhether or not the password is valid\r\n\t_isPWValid: false,\r\n\r\n\t_setValueAttr: function(/*anything*/ newVal, /*Boolean?*/ priority){\r\n\t\t// summary:\r\n\t\t//\t\tUpdates _isPWValid if this isn't our initial update by calling\r\n\t\t//\t\tour PasswordValidator's pwCheck function\r\n\t\tif(newVal === \"\"){\r\n\t\t\tnewVal = _OldPWBox.superclass.attr.call(this, \"value\");\r\n\t\t}\r\n\t\tif(priority !== null){\r\n\t\t\t// Priority is passed in as null, explicitly when this is an\r\n\t\t\t// update (not initially set).  We want to check our password now.\r\n\t\t\tthis._isPWValid = this.containerWidget.pwCheck(newVal);\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t\t// Trigger the containerWidget to recheck its value, if needed\r\n\t\tthis.containerWidget._childValueAttr(this.containerWidget._inputWidgets[1].get(\"value\"));\r\n\t},\r\n\r\n\tisValid: function(/*Boolean*/ isFocused){\r\n\t\t// Take into account the isPWValid setting\r\n\t\treturn this.inherited(\"isValid\", arguments) && this._isPWValid;\r\n\t},\r\n\r\n\t_update: function(/*Event*/ e){\r\n\t\t// Only call validate() if we've been blurred or else we get popups\r\n\t\t// too early.\r\n\t\tif(this._hasBeenBlurred){ this.validate(true); }\r\n\t\tthis._onMouse(e);\r\n\t},\r\n\r\n\t_getValueAttr: function(){\r\n\t\tif(this.containerWidget._started && this.containerWidget.isValid()){\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t}\r\n\t\treturn \"\";\r\n\t},\r\n\r\n\t_setBlurValue: function(){\r\n\t\t// TextBox._setBlurValue calls this._setValueAttr(this.get('value'), ...)\r\n\t\t// Because we are overriding _getValueAttr to return \"\" when the containerWidget\r\n\t\t// is not valid, TextBox._setBlurValue will cause OldPWBox's value to be set to \"\"\r\n\t\t//\r\n\t\t// So, we directly call ValidationTextBox._getValueAttr to bypass our _getValueAttr\r\n\t\tvar value = ValidationTextBox.prototype._getValueAttr.call(this);\r\n\t\tthis._setValueAttr(value, (this.isValid ? this.isValid() : true));\r\n\t}\r\n});\r\n\r\n\r\nvar _NewPWBox = declare(\"dojox.form._NewPWBox\", _ChildTextBox, {\r\n\t// summary:\r\n\t//\t\tA class representing our new password textbox\r\n\r\n\t// required: boolean\r\n\t//\t\tWhether or not this widget is required (default: true)\r\n\trequired: true,\r\n\r\n\tonChange: function(){\r\n\t\t// summary:\r\n\t\t//\t\tValidates our verify box - to make sure that a change to me is\r\n\t\t//\t\treflected there\r\n\t\tthis.containerWidget._inputWidgets[2].validate(false);\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n\r\nvar _VerifyPWBox = declare(\"dojox.form._VerifyPWBox\", _ChildTextBox, {\r\n\t// summary:\r\n\t//\t\tA class representing our verify textbox\r\n\r\n\tisValid: function(isFocused){\r\n\t\t// summary:\r\n\t\t//\t\tValidates that we match the \"real\" password\r\n\t\treturn this.inherited(\"isValid\", arguments) &&\r\n\t\t\t(this.get(\"value\") == this.containerWidget._inputWidgets[1].get(\"value\"));\r\n\t}\r\n});\r\n\r\nreturn declare(\"dojox.form.PasswordValidator\", FormValueWidget, {\r\n\t// summary:\r\n\t//\t\tA password validation widget that simplifies the \"old/new/verify\"\r\n\t//\t\tstyle of requesting passwords.  You will probably want to override\r\n\t//\t\tthis class and implement your own pwCheck function.\r\n\r\n\t// required: boolean\r\n\t//\t\tWhether or not it is required for form submission\r\n\trequired: true,\r\n\r\n\t// inputWidgets: TextBox[]\r\n\t//\t\tAn array of text boxes that are our components\r\n\t_inputWidgets: null,\r\n\r\n\t// oldName: string?\r\n\t//\t\tThe name to send our old password as (when form is posted)\r\n\toldName: \"\",\r\n\r\n\ttemplateString: template,\r\n\r\n\t_hasBeenBlurred: false,\r\n\r\n\tisValid: function(/*Boolean*/ isFocused){\r\n\t\t// summary:\r\n\t\t//\t\twe are valid if ALL our children are valid\r\n\t\treturn array.every(this._inputWidgets, function(i){\r\n\t\t\tif(i && i._setStateClass){ i._setStateClass(); }\r\n\t\t\treturn (!i || i.isValid());\r\n\t\t});\r\n\t},\r\n\r\n\tvalidate: function(/*Boolean*/ isFocused){\r\n\t\t// summary:\r\n\t\t//\t\tValidating this widget validates all our children\r\n\t\treturn array.every(array.map(this._inputWidgets, function(i){\r\n\t\t\tif(i && i.validate){\r\n\t\t\t\ti._hasBeenBlurred = (i._hasBeenBlurred || this._hasBeenBlurred);\r\n\t\t\t\treturn i.validate();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}, this), function(item){ return item; });\r\n\t},\r\n\r\n\treset: function(){\r\n\t\t// summary:\r\n\t\t//\t\tResetting this widget resets all our children\r\n\t\tthis._hasBeenBlurred = false;\r\n\t\tarray.forEach(this._inputWidgets, function(i){\r\n\t\t\tif(i && i.reset){ i.reset(); }\r\n\t\t}, this);\r\n\t},\r\n\r\n\t_createSubWidgets: function(){\r\n\t\t// summary:\r\n\t\t//\t\tTurns the inputs inside this widget into \"real\" validation\r\n\t\t//\t\twidgets - and sets up the needed connections.\r\n\t\tvar widgets = this._inputWidgets,\r\n\t\t\tmsg = i18n.getLocalization(\"dojox.form\", \"PasswordValidator\", this.lang);\r\n\t\tarray.forEach(widgets, function(i, idx){\r\n\t\t\tif(i){\r\n\t\t\t\tvar p = {containerWidget: this}, c;\r\n\t\t\t\tif(idx === 0){\r\n\t\t\t\t\tp.name = this.oldName;\r\n\t\t\t\t\tp.invalidMessage = msg.badPasswordMessage;\r\n\t\t\t\t\tc = _OldPWBox;\r\n\t\t\t\t}else if(idx === 1){\r\n\t\t\t\t\tp.required = this.required;\r\n\t\t\t\t\tc = _NewPWBox;\r\n\t\t\t\t}else if(idx === 2){\r\n\t\t\t\t\tp.invalidMessage = msg.nomatchMessage;\r\n\t\t\t\t\tc = _VerifyPWBox;\r\n\t\t\t\t}\r\n\t\t\t\twidgets[idx] = new c(p, i);\r\n\t\t\t}\r\n\t\t}, this);\r\n\t},\r\n\r\n\tpwCheck: function(/*String*/ password){\r\n\t\t// summary:\r\n\t\t//\t\tOverridable function for validation of the old password box.\r\n\t\t//\r\n\t\t//\t\tThis function is called and passed the old password.  Return\r\n\t\t//\t\ttrue if it's OK to continue, and false if it is not.\r\n\t\t//\r\n\t\t//\t\tIMPORTANT SECURITY NOTE:  Do NOT EVER EVER EVER check this in\r\n\t\t//\t\tHTML or JavaScript!!!\r\n\t\t//\r\n\t\t//\t\tYou will probably want to override this function to callback\r\n\t\t//\t\tto a server to verify the password (the callback will need to\r\n\t\t//\t\tbe synchronous) - and it's probably a good idea to validate\r\n\t\t//\t\tit again on form submission before actually doing\r\n\t\t//\t\tanything destructive - that's why the \"oldName\" value\r\n\t\t//\t\tis available.\r\n\t\t//\r\n\t\t//\t\tAnd don't just fetch the password from the server\r\n\t\t//\t\teither :)  Send the test password (probably hashed, for\r\n\t\t//\t\tsecurity) and return from the server a status instead.\r\n\t\t//\r\n\t\t//\t\tAgain - DON'T BE INSECURE!!!  Security is left as an exercise\r\n\t\t//\t\tfor the reader :)\r\n\t\treturn false;\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSets up the correct widgets.  You *MUST* specify one child\r\n\t\t//\t\ttext box (a simple HTML `<input>` element) with pwType=\"new\"\r\n\t\t//\t\t*and* one child text box with pwType=\"verify\".  You *MAY*\r\n\t\t//\t\tspecify a third child text box with pwType=\"old\" in order to\r\n\t\t//\t\tprompt the user to enter in their old password before the\r\n\t\t//\t\twidget returns that it is valid.\r\n\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\t// Turn my inputs into the correct stuff....\r\n\t\tvar widgets = this._inputWidgets = [];\r\n\t\tarray.forEach([\"old\",\"new\",\"verify\"], function(i){\r\n\t\t\twidgets.push(query(\"input[pwType=\" + i + \"]\", this.containerNode)[0]);\r\n\t\t}, this);\r\n\t\tif(!widgets[1] || !widgets[2]){\r\n\t\t\tthrow new Error(\"Need at least pwType=\\\"new\\\" and pwType=\\\"verify\\\"\");\r\n\t\t}\r\n\t\tif(this.oldName && !widgets[0]){\r\n\t\t\tthrow new Error(\"Need to specify pwType=\\\"old\\\" if using oldName\");\r\n\t\t}\r\n\t\tthis.containerNode = this.domNode;\r\n\t\tthis._createSubWidgets();\r\n\t\tthis.connect(this._inputWidgets[1], \"_setValueAttr\", \"_childValueAttr\");\r\n\t\tthis.connect(this._inputWidgets[2], \"_setValueAttr\", \"_childValueAttr\");\r\n\t},\r\n\r\n\t_childValueAttr: function(v){\r\n\t\tthis.set(\"value\", this.isValid() ? v : \"\");\r\n\t},\r\n\r\n\t_setDisabledAttr: function(value){\r\n\t\tthis.inherited(arguments);\r\n\t\tarray.forEach(this._inputWidgets, function(i){\r\n\t\t\tif(i && i.set){ i.set(\"disabled\", value);}\r\n\t\t});\r\n\t},\r\n\r\n\t_setRequiredAttribute: function(value){\r\n\t\tthis.required = value;\r\n\t\tdomAttr.set(this.focusNode, \"required\", value);\r\n\t\tthis.focusNode.setAttribute(\"aria-required\", value);\r\n\t\tthis._refreshState();\r\n\t\tarray.forEach(this._inputWidgets, function(i){\r\n\t\t\tif(i && i.set){ i.set(\"required\", value);}\r\n\t\t});\r\n\t},\r\n\r\n\t_setValueAttr: function(v){\r\n\t\tthis.inherited(arguments);\r\n\t\tdomAttr.set(this.focusNode, \"value\", v);\r\n\t},\r\n\r\n\t_getValueAttr: function(){\r\n\t\t// Make sure we don't return undefined.... maybe should do conversion in _setValueAttr() instead?\r\n\t\treturn this.value||\"\";\r\n\t},\r\n\r\n\tfocus: function(){\r\n\t\t// summary:\r\n\t\t//\t\tplaces focus on the first invalid input widget - if all\r\n\t\t//\t\tinput widgets are valid, the first widget is focused.\r\n\t\tvar f = false;\r\n\t\tarray.forEach(this._inputWidgets, function(i){\r\n\t\t\tif(i && !i.isValid() && !f){\r\n\t\t\t\ti.focus();\r\n\t\t\t\tf = true;\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(!f){ this._inputWidgets[1].focus(); }\r\n\t}\r\n});\r\n});\r\n"]}