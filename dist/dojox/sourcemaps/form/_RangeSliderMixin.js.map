{"version":3,"sources":["form/_RangeSliderMixin.js"],"names":["define","declare","lang","array","fx","event","has","domStyle","domGeometry","keys","dijit","Mover","Moveable","FormValueWidget","FocusManager","fxUtils","sortReversed","a","b","sortForward","RangeSliderMixin","_setTabIndexAttr","value","postMixInProperties","this","inherited","arguments","map","i","parseInt","postCreate","sort","_isReversed","_self","mover","SliderMoverMax","constructor","widget","_movableMax","sliderHandleMax","sliderHandle","setAttribute","minimum","maximum","barMover","SliderBarMover","_movableBar","progressBar","focusNode","removeAttribute","destroy","_onKeyPress","e","disabled","readOnly","altKey","ctrlKey","useMaxValue","target","barFocus","k","delegate","isLeftToRight","PREV_ARROW","LEFT_ARROW","NEXT_ARROW","RIGHT_ARROW","delta","down","keyCode","HOME","_setValueAttr","stop","END","DOWN_ARROW","UP_ARROW","PAGE_DOWN","PAGE_UP","pageIncrement","_bumpValue","change","_onHandleClickMax","focus","_onClkIncBumper","_descending","signedChange","isArray","_getBumpValue","idx","s","getComputedStyle","sliderBarContainer","c","getContentBox","count","discreteValues","myValue","Infinity","_pixelCount","_onBarClick","_onRemainingBarClick","abspos","position","bar","mousePos","_mousePixelCoord","leftPos","_startingPixelCoord","rightPos","isMaxVal","p","_setPixelValue","pixelValue","maxPixels","priorityChange","_getValueByPixelValue","pixelsPerValue","wholeIncrements","Math","round","actValue","_lastValueReported","valueNode","prototype","apply","_printSliderBar","percentMin","percentMax","percentMinSave","sliderHandleVal","sliderHandleMaxVal","progressBarVal","slideDuration","style","_progressPixelSize","parseFloat","_handleOffsetCoord","duration","propsHandle","propsHandleMax","propsBar","start","parentNode","end","units","animHandle","animateProperty","node","properties","animHandleMax","animBar","combine","play","onMouseMove","_abspos","_setPixelValue_","hitch","_isReversed_","_bar","mouseOffset","_mouseOffset","_getValueByPixelValue_","pixelValueMin","pixelValueMax","pixelValues","myValues"],"mappings":"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","file":"../../form/_RangeSliderMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/fx\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"dojo/keys\",\r\n\t\"dijit\",\r\n\t\"dojo/dnd/Mover\",\r\n\t\"dojo/dnd/Moveable\",\r\n\t\"dijit/form/_FormValueWidget\",\r\n\t\"dijit/focus\",\r\n\t\"dojo/fx\",\r\n\t\"dojox/fx\" // unused?\r\n], function(declare, lang, array, fx, event, has, domStyle, domGeometry, keys, dijit, Mover, Moveable, FormValueWidget, FocusManager, fxUtils){\r\n\r\n\t// make these functions once:\r\n\tvar sortReversed = function(a, b){ return b - a; },\r\n\t\tsortForward = function(a, b){ return a - b; }\r\n\t;\r\n\r\n\r\n\tvar RangeSliderMixin = declare(\"dojox.form._RangeSliderMixin\", null, {\r\n\r\n\t\t// list attach points that have tabIndex so they can be properly disabled\r\n\t\t_setTabIndexAttr: [\"sliderHandle\", \"sliderHandleMax\"],\r\n\r\n\t\tvalue: [0,100],\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.value = array.map(this.value, function(i){ return parseInt(i, 10); });\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// we sort the values!\r\n\t\t\t// TODO: re-think, how to set the value\r\n\t\t\tthis.value.sort(this._isReversed() ? sortReversed : sortForward);\r\n\r\n\t\t\t// define a custom constructor for a SliderMoverMax that points back to me\r\n\t\t\tvar _self = this;\r\n\t\t\tvar mover = declare(SliderMoverMax, {\r\n\t\t\t\tconstructor: function(){\r\n\t\t\t\t\tthis.widget = _self;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis._movableMax = new Moveable(this.sliderHandleMax,{ mover: mover });\r\n\r\n\t\t\t//The valuenow of the sliderHandle (min) usually determines the valuemin of sliderHandleMax\r\n\t\t\t//and valuenow of sliderHandleMax usually determines the valueMax of sliderHandle\r\n\t\t\t//However, in our RangeSlider dragging one handle past the other one causes both to\r\n\t\t\t//'snap' together and move so both sliders will have the same min, max values\t\t\t\r\n\r\n\t\t\tthis.sliderHandle.setAttribute(\"aria-valuemin\", this.minimum);\r\n\t\t\tthis.sliderHandle.setAttribute(\"aria-valuemax\", this.maximum);\r\n\t\t\tthis.sliderHandleMax.setAttribute(\"aria-valuemin\", this.minimum);\r\n\t\t\tthis.sliderHandleMax.setAttribute(\"aria-valuemax\", this.maximum);\r\n\t\t\t\r\n\t\t\t// a dnd for the bar!\r\n\t\t\tvar barMover = declare(SliderBarMover, {\r\n\t\t\t\tconstructor: function(){\r\n\t\t\t\t\tthis.widget = _self;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._movableBar = new Moveable(this.progressBar,{ mover: barMover });\r\n\t\t\t\t\r\n\t\t\t// Remove these from the progress bar since it isn't a slider\r\n\t\t\tthis.focusNode.removeAttribute(\"aria-valuemin\");\r\n\t\t\tthis.focusNode.removeAttribute(\"aria-valuemax\");\r\n\t\t\tthis.focusNode.removeAttribute(\"aria-valuenow\");\r\n\r\n\t\t},\t\t\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._movableMax.destroy();\r\n\t\t\tthis._movableBar.destroy();\r\n\t\t},\r\n\r\n\t\t_onKeyPress: function(/*Event*/ e){\r\n\t\t\tif(this.disabled || this.readOnly || e.altKey || e.ctrlKey){ return; }\r\n\r\n\t\t\tvar useMaxValue = e.target === this.sliderHandleMax;\r\n\t\t\tvar barFocus = e.target === this.progressBar;\r\n\t\t\tvar k = lang.delegate(keys, this.isLeftToRight() ? {PREV_ARROW: keys.LEFT_ARROW, NEXT_ARROW: keys.RIGHT_ARROW} \r\n\t\t\t                                                 : {PREV_ARROW: keys.RIGHT_ARROW, NEXT_ARROW: keys.LEFT_ARROW});\t\t\t\r\n\t\t\tvar delta = 0;\r\n\t\t\tvar down = false;\r\n\r\n\t\t\tswitch(e.keyCode){\r\n\t\t\t\tcase k.HOME       :\tthis._setValueAttr(this.minimum, true, useMaxValue);event.stop(e);return;\r\n\t\t\t\tcase k.END        :\tthis._setValueAttr(this.maximum, true, useMaxValue);event.stop(e);return;\r\n\t\t\t\tcase k.PREV_ARROW :\r\n\t\t\t\tcase k.DOWN_ARROW :\tdown = true;\r\n\t\t\t\tcase k.NEXT_ARROW :\r\n\t\t\t\tcase k.UP_ARROW   :\tdelta = 1; break;\r\n\t\t\t\tcase k.PAGE_DOWN  :\tdown = true;\r\n\t\t\t\tcase k.PAGE_UP    :\tdelta = this.pageIncrement; break;\r\n\t\t\t\tdefault           : this.inherited(arguments);return;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(down){delta = -delta;}\r\n\r\n\t\t\tif(delta){\r\n\t\t\t\tif(barFocus){\r\n\t\t\t\t\tthis._bumpValue([\r\n\t\t\t\t\t\t{ change: delta, useMaxValue: false },\r\n\t\t\t\t\t\t{ change: delta, useMaxValue: true }\r\n\t\t\t\t\t]);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._bumpValue(delta, useMaxValue);\r\n\t\t\t\t}\r\n\t\t\t\tevent.stop(e);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onHandleClickMax: function(e){\r\n\t\t\tif(this.disabled || this.readOnly){ return; }\r\n\t\t\tif(!has(\"ie\")){\r\n\t\t\t\t// make sure you get focus when dragging the handle\r\n\t\t\t\t// (but don't do on IE because it causes a flicker on mouse up (due to blur then focus)\r\n\t\t\t\tFocusManager.focus(this.sliderHandleMax);\r\n\t\t\t}\r\n\t\t\tevent.stop(e);\r\n\t\t},\r\n\r\n\t\t_onClkIncBumper: function(){\r\n\t\t\tthis._setValueAttr(this._descending === false ? this.minimum : this.maximum, true, true);\r\n\t\t},\r\n\r\n\t\t_bumpValue: function(signedChange, useMaxValue){\r\n\r\n\t\t\t// we pass an array to _setValueAttr when signedChange is an array\r\n\t\t\tvar value = lang.isArray(signedChange) ? [\r\n\t\t\t\t\tthis._getBumpValue(signedChange[0].change, signedChange[0].useMaxValue),\r\n\t\t\t\t\tthis._getBumpValue(signedChange[1].change, signedChange[1].useMaxValue)\r\n\t\t\t\t]\r\n\t\t\t\t: this._getBumpValue(signedChange, useMaxValue)\r\n\r\n\t\t\tthis._setValueAttr(value, true, useMaxValue);\r\n\t\t},\r\n\r\n\t\t_getBumpValue: function(signedChange, useMaxValue){\r\n\r\n\t\t\tvar idx = useMaxValue ? 1 : 0;\r\n\t\t\tif(this._isReversed()){\r\n\t\t\t\tidx = 1 - idx;\r\n\t\t\t}\r\n\r\n\t\t\tvar s = domStyle.getComputedStyle(this.sliderBarContainer),\r\n\t\t\t\tc = domGeometry.getContentBox(this.sliderBarContainer, s),\r\n\t\t\t\tcount = this.discreteValues,\r\n\t\t\t\tmyValue = this.value[idx]\r\n\t\t\t;\r\n\r\n\t\t\tif(count <= 1 || count == Infinity){ count = c[this._pixelCount]; }\r\n\t\t\tcount--;\r\n\r\n\t\t\tvar value = this.maximum > this.minimum ? ((myValue - this.minimum) * count / (this.maximum - this.minimum) + signedChange) : 0;\r\n\t\t\tif(value < 0){ value = 0; }\r\n\t\t\tif(value > count){ value = count; }\r\n\r\n\t\t\treturn value * (this.maximum - this.minimum) / count + this.minimum;\r\n\t\t},\r\n\r\n\t\t_onBarClick: function(e){\r\n\t\t\tif(this.disabled || this.readOnly){ return; }\r\n\t\t\tif(!has(\"ie\")){\r\n\t\t\t\t// make sure you get focus when dragging the handle\r\n\t\t\t\t// (but don't do on IE because it causes a flicker on mouse up (due to blur then focus)\r\n\t\t\t\tFocusManager.focus(this.progressBar);\r\n\t\t\t}\r\n\t\t\tevent.stop(e);\r\n\t\t},\r\n\r\n\t\t_onRemainingBarClick: function(e){\r\n\t\t\tif(this.disabled || this.readOnly){ return; }\r\n\t\t\tif(!has(\"ie\")){\r\n\t\t\t\t// make sure you get focus when dragging the handle\r\n\t\t\t\t// (but don't do on IE because it causes a flicker on mouse up (due to blur then focus)\r\n\t\t\t\tFocusManager.focus(this.progressBar);\r\n\t\t\t}\r\n\r\n\t\t\t// now we set the min/max-value of the slider!\r\n\t\t\tvar abspos = domGeometry.position(this.sliderBarContainer, true),\r\n\t\t\t\tbar = domGeometry.position(this.progressBar, true),\r\n\t\t\t\tmousePos = e[this._mousePixelCoord],\r\n\t\t\t\tleftPos = bar[this._startingPixelCoord],\r\n\t\t\t\trightPos = leftPos + bar[this._pixelCount],\r\n\t\t\t\tisMaxVal = this._isReversed() ? mousePos <= leftPos : mousePos >= rightPos,\r\n\t\t\t\tp = this._isReversed() ? (abspos[this._pixelCount] - mousePos + abspos[this._startingPixelCoord]) : (mousePos - abspos[this._startingPixelCoord])\r\n\t\t\t;\r\n\r\n\t\t\tthis._setPixelValue(p, abspos[this._pixelCount], true, isMaxVal);\r\n\t\t\tevent.stop(e);\r\n\t\t},\r\n\r\n\t\t_setPixelValue: function(/*Number*/ pixelValue, /*Number*/ maxPixels, /*Boolean*/ priorityChange, /*Boolean*/ isMaxVal){\r\n\t\t\tif(this.disabled || this.readOnly){ return; }\r\n\t\t\tvar myValue = this._getValueByPixelValue(pixelValue, maxPixels);\r\n\t\t\tthis._setValueAttr(myValue, priorityChange, isMaxVal);\r\n\t\t},\r\n\r\n\t\t_getValueByPixelValue: function(/*Number*/ pixelValue, /*Number*/ maxPixels){\r\n\t\t\tpixelValue = pixelValue < 0 ? 0 : maxPixels < pixelValue ? maxPixels : pixelValue;\r\n\t\t\tvar count = this.discreteValues;\r\n\t\t\tif(count <= 1 || count == Infinity){ count = maxPixels; }\r\n\t\t\tcount--;\r\n\t\t\tvar pixelsPerValue = maxPixels / count;\r\n\t\t\tvar wholeIncrements = Math.round(pixelValue / pixelsPerValue);\r\n\t\t\treturn (this.maximum-this.minimum)*wholeIncrements/count + this.minimum;\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*Array or Number*/ value, /*Boolean, optional*/ priorityChange, /*Boolean, optional*/ isMaxVal){\r\n\t\t\t// we pass an array, when we move the slider with the bar\r\n\t\t\tvar actValue = this.value;\r\n\t\t\tif(!lang.isArray(value)){\r\n\t\t\t\tif(isMaxVal){\r\n\t\t\t\t\tif(this._isReversed()){\r\n\t\t\t\t\t\tactValue[0] = value;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tactValue[1] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(this._isReversed()){\r\n\t\t\t\t\t\tactValue[1] = value;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tactValue[0] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tactValue = value;\r\n\t\t\t}\r\n\t\t\t// we have to reset this values. don't know the reason for that\r\n\t\t\tthis._lastValueReported = \"\";\r\n\t\t\tthis.valueNode.value = this.value = value = actValue;\r\n\r\n\t\t\tthis.value.sort(this._isReversed() ? sortReversed : sortForward);\r\n\r\n\t\t\tthis.sliderHandle.setAttribute(\"aria-valuenow\", actValue[0]);\r\n\t\t\tthis.sliderHandleMax.setAttribute(\"aria-valuenow\", actValue[1]);\r\n\t\t\t\r\n\t\t\t// not calling the _setValueAttr-function of Slider, but the super-super-class (needed for the onchange-event!)\r\n\t\t\tFormValueWidget.prototype._setValueAttr.apply(this, arguments);\r\n\t\t\tthis._printSliderBar(priorityChange, isMaxVal);\r\n\t\t},\r\n\r\n\t\t_printSliderBar: function(priorityChange, isMaxVal){\r\n\t\t\tvar percentMin = this.maximum > this.minimum ? ((this.value[0] - this.minimum) / (this.maximum - this.minimum)) : 0;\r\n\t\t\tvar percentMax = this.maximum > this.minimum ? ((this.value[1] - this.minimum) / (this.maximum - this.minimum)) : 0;\r\n\t\t\tvar percentMinSave = percentMin;\r\n\t\t\tif(percentMin > percentMax){\r\n\t\t\t\tpercentMin = percentMax;\r\n\t\t\t\tpercentMax = percentMinSave;\r\n\t\t\t}\r\n\t\t\tvar sliderHandleVal = this._isReversed() ? ((1-percentMin)*100) : (percentMin * 100);\r\n\t\t\tvar sliderHandleMaxVal = this._isReversed() ? ((1-percentMax)*100) : (percentMax * 100);\r\n\t\t\tvar progressBarVal = this._isReversed() ? ((1-percentMax)*100) : (percentMin * 100);\r\n\t\t\tif(priorityChange && this.slideDuration > 0 && this.progressBar.style[this._progressPixelSize]){\r\n\t\t\t\t// animate the slider\r\n\t\t\t\tvar percent = isMaxVal ? percentMax : percentMin;\r\n\t\t\t\tvar _this = this;\r\n\t\t\t\tvar props = {};\r\n\t\t\t\tvar start = parseFloat(this.progressBar.style[this._handleOffsetCoord]);\r\n\t\t\t\tvar duration = this.slideDuration / 10; // * (percent-start/100);\r\n\t\t\t\tif(duration === 0){ return; }\r\n\t\t\t\tif(duration < 0){ duration = 0 - duration; }\r\n\t\t\t\tvar propsHandle = {};\r\n\t\t\t\tvar propsHandleMax = {};\r\n\t\t\t\tvar propsBar = {};\r\n\t\t\t\t// hui, a lot of animations :-)\r\n\t\t\t\tpropsHandle[this._handleOffsetCoord] = { start: this.sliderHandle.parentNode.style[this._handleOffsetCoord], end: sliderHandleVal, units:\"%\"};\r\n\t\t\t\tpropsHandleMax[this._handleOffsetCoord] = { start: this.sliderHandleMax.parentNode.style[this._handleOffsetCoord], end: sliderHandleMaxVal, units:\"%\"};\r\n\t\t\t\tpropsBar[this._handleOffsetCoord] = { start: this.progressBar.style[this._handleOffsetCoord], end: progressBarVal, units:\"%\"};\r\n\t\t\t\tpropsBar[this._progressPixelSize] = { start: this.progressBar.style[this._progressPixelSize], end: (percentMax - percentMin) * 100, units:\"%\"};\r\n\t\t\t\tvar animHandle = fx.animateProperty({node: this.sliderHandle.parentNode, duration: duration, properties: propsHandle});\r\n\t\t\t\tvar animHandleMax = fx.animateProperty({node: this.sliderHandleMax.parentNode, duration: duration, properties: propsHandleMax});\r\n\t\t\t\tvar animBar = fx.animateProperty({node: this.progressBar, duration: duration, properties: propsBar});\r\n\t\t\t\tvar animCombine = fxUtils.combine([animHandle, animHandleMax, animBar]);\r\n\t\t\t\tanimCombine.play();\r\n\t\t\t}else{\r\n\t\t\t\tthis.sliderHandle.parentNode.style[this._handleOffsetCoord] = sliderHandleVal + \"%\";\r\n\t\t\t\tthis.sliderHandleMax.parentNode.style[this._handleOffsetCoord] = sliderHandleMaxVal + \"%\";\r\n\t\t\t\tthis.progressBar.style[this._handleOffsetCoord] = progressBarVal + \"%\";\r\n\t\t\t\tthis.progressBar.style[this._progressPixelSize] = ((percentMax - percentMin) * 100) + \"%\";\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar SliderMoverMax = declare(\"dijit.form._SliderMoverMax\", Mover, {\r\n\r\n\t\tonMouseMove: function(e){\r\n\t\t\tvar widget = this.widget;\r\n\t\t\tvar abspos = widget._abspos;\r\n\t\t\tif(!abspos){\r\n\t\t\t\tabspos = widget._abspos = domGeometry.position(widget.sliderBarContainer, true);\r\n\t\t\t\twidget._setPixelValue_ = lang.hitch(widget, \"_setPixelValue\");\r\n\t\t\t\twidget._isReversed_ = widget._isReversed();\r\n\t\t\t}\r\n\r\n\t\t\tvar pixelValue = e[widget._mousePixelCoord] - abspos[widget._startingPixelCoord];\r\n\t\t\twidget._setPixelValue_(widget._isReversed_ ? (abspos[widget._pixelCount]-pixelValue) : pixelValue, abspos[widget._pixelCount], false, true);\r\n\t\t},\r\n\r\n\t\tdestroy: function(e){\r\n\t\t\tMover.prototype.destroy.apply(this, arguments);\r\n\t\t\tvar widget = this.widget;\r\n\t\t\twidget._abspos = null;\r\n\t\t\twidget._setValueAttr(widget.value, true);\r\n\t\t}\r\n\t});\r\n\r\n\tvar SliderBarMover = declare(\"dijit.form._SliderBarMover\", Mover, {\r\n\r\n\t\tonMouseMove: function(e){\r\n\t\t\tvar widget = this.widget;\r\n\t\t\tif(widget.disabled || widget.readOnly){ return; }\r\n\t\t\tvar abspos = widget._abspos;\r\n\t\t\tvar bar = widget._bar;\r\n\t\t\tvar mouseOffset = widget._mouseOffset;\r\n\t\t\tif(!abspos){\r\n\t\t\t\tabspos = widget._abspos = domGeometry.position(widget.sliderBarContainer, true);\r\n\t\t\t\twidget._setPixelValue_ = lang.hitch(widget, \"_setPixelValue\");\r\n\t\t\t\twidget._getValueByPixelValue_ = lang.hitch(widget, \"_getValueByPixelValue\");\r\n\t\t\t\twidget._isReversed_ = widget._isReversed();\r\n\t\t\t}\r\n\r\n\t\t\tif(!bar){\r\n\t\t\t\tbar = widget._bar = domGeometry.position(widget.progressBar, true);\r\n\t\t\t}\r\n\r\n\t\t\tif(!mouseOffset){\r\n\t\t\t\tmouseOffset = widget._mouseOffset = e[widget._mousePixelCoord] - bar[widget._startingPixelCoord];\r\n\t\t\t}\r\n\r\n\t\t\tvar pixelValueMin = e[widget._mousePixelCoord] - abspos[widget._startingPixelCoord] - mouseOffset,\r\n\t\t\t\tpixelValueMax = pixelValueMin + bar[widget._pixelCount];\r\n\t\t\t\t// we don't narrow the slider when it reaches the bumper!\r\n\t\t\t\t// maybe there is a simpler way\r\n\t\t\t\tpixelValues = [pixelValueMin, pixelValueMax]\r\n\t\t\t;\r\n\r\n\t\t\tpixelValues.sort(sortForward);\r\n\r\n\t\t\tif(pixelValues[0] <= 0){\r\n\t\t\t\tpixelValues[0] = 0;\r\n\t\t\t\tpixelValues[1] = bar[widget._pixelCount];\r\n\t\t\t}\r\n\t\t\tif(pixelValues[1] >= abspos[widget._pixelCount]){\r\n\t\t\t\tpixelValues[1] = abspos[widget._pixelCount];\r\n\t\t\t\tpixelValues[0] = abspos[widget._pixelCount] - bar[widget._pixelCount];\r\n\t\t\t}\r\n\t\t\t// getting the real values by pixel\r\n\t\t\tvar myValues = [\r\n\t\t\t\twidget._getValueByPixelValue(widget._isReversed_ ? (abspos[widget._pixelCount] - pixelValues[0]) : pixelValues[0], abspos[widget._pixelCount]),\r\n\t\t\t\twidget._getValueByPixelValue(widget._isReversed_ ? (abspos[widget._pixelCount] - pixelValues[1]) : pixelValues[1], abspos[widget._pixelCount])\r\n\t\t\t];\r\n\t\t\t// and setting the value of the widget\r\n\t\t\twidget._setValueAttr(myValues, false, false);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tMover.prototype.destroy.apply(this, arguments);\r\n\t\t\tvar widget = this.widget;\r\n\t\t\twidget._abspos = null;\r\n\t\t\twidget._bar = null;\r\n\t\t\twidget._mouseOffset = null;\r\n\t\t\twidget._setValueAttr(widget.value, true);\r\n\t\t}\r\n\t});\r\n\r\n\treturn RangeSliderMixin;\r\n});\r\n"]}