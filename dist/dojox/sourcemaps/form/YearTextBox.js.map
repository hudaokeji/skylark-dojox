{"version":3,"sources":["form/YearTextBox.js"],"names":["define","kernel","lang","YearlyCalendar","TextBox","DateTextBox","declare","experimental","popupClass","format","value","getFullYear","validator","test","String","_setValueAttr","priorityChange","formattedValue","prototype","call","this","openDropDown","inherited","arguments","dropDown","onValueSelected","hitch","focus","setTimeout","parse","constraints","_isEmpty","undefined","filter","val","toString"],"mappings":";;;;;;;AAAAA,QACC,oBACA,kBACA,8BACA,qBACA,gBACA,sBACG,SAASC,EAAQC,EAAMC,EAAgBC,EAASC,EAAaC,GAE/D,OADAL,EAAOM,aAAa,0BACbD,EAAQ,yBAA0BD,GAKxCG,WAAYL,EAEZM,OAAQ,SAASC,GAEhB,MAAmB,iBAATA,EACFA,EAEAA,EAAMC,YACND,EAAMC,cAEPD,GAGRE,UAAW,SAASF,GACnB,MAAgB,IAATA,GAAwB,MAATA,GAAiB,cAAcG,KAAKC,OAAOJ,KAGlEK,cAAe,SAASL,EAAOM,EAAgBC,GAC3CP,GACCA,EAAMC,cACRD,EAAQA,EAAMC,eAGhBP,EAAQc,UAAUH,cAAcI,KAAKC,KAAMV,EAAOM,EAAgBC,IAGnEI,aAAc,WACbD,KAAKE,UAAUC,WAGfH,KAAKI,SAASC,gBAAkBvB,EAAKwB,MAAMN,KAAM,SAASV,GACzDU,KAAKO,QACLC,WAAW1B,EAAKwB,MAAMN,KAAM,iBAAkB,GAC9ChB,EAAQc,UAAUH,cAAcI,KAAKC,KAAKV,GAAO,EAAMA,MAIzDmB,MAAO,SAAoBnB,EAA4CoB,GACtE,OAAOpB,IAAUU,KAAKW,SAASrB,GAAS,UAAOsB,IAGhDC,OAAQ,SAASC,GAChB,OAAGA,GAAOA,EAAIvB,YACNuB,EAAIvB,cAAcwB,WAEnBf,KAAKE,UAAUC","file":"../../form/YearTextBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojox/widget/YearlyCalendar\",\r\n\t\"dijit/form/TextBox\",\r\n\t\"./DateTextBox\",\r\n\t\"dojo/_base/declare\"\r\n\t], function(kernel, lang, YearlyCalendar, TextBox, DateTextBox, declare){\r\n\t\tkernel.experimental(\"dojox/form/DateTextBox\");\r\n\t\treturn declare(\"dojox.form.YearTextBox\", DateTextBox,\r\n\t\t{\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA validating, serializable, range-bound date text box with a popup calendar that contains only years\r\n\r\n\t\t\tpopupClass: YearlyCalendar,\r\n\r\n\t\t\tformat: function(value){\r\n\t\t\t\t//console.log('Year format ' + value);\r\n\t\t\t\tif(typeof value == \"string\"){\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t\telse if(value.getFullYear){\r\n\t\t\t\t\treturn value.getFullYear();\r\n\t\t\t\t}\r\n\t\t\t\treturn value;\r\n\t\t\t},\r\n\r\n\t\t\tvalidator: function(value){\r\n\t\t\t\treturn value == \"\" || value == null || /(^-?\\d\\d*$)/.test(String(value));\r\n\t\t\t},\r\n\r\n\t\t\t_setValueAttr: function(value, priorityChange, formattedValue){\r\n\t\t\t\tif(value){\r\n\t\t\t\t\tif(value.getFullYear){\r\n\t\t\t\t\t\tvalue = value.getFullYear();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTextBox.prototype._setValueAttr.call(this, value, priorityChange, formattedValue);\r\n\t\t\t},\r\n\r\n\t\t\topenDropDown: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\t//console.log('yearly openDropDown and value = ' + this.get('value'));\r\n\r\n\t\t\t\tthis.dropDown.onValueSelected = lang.hitch(this, function(value){\r\n\t\t\t\t\tthis.focus(); // focus the textbox before the popup closes to avoid reopening the popup\r\n\t\t\t\t\tsetTimeout(lang.hitch(this, \"closeDropDown\"), 1); // allow focus time to take\r\n\t\t\t\t\tTextBox.prototype._setValueAttr.call(this,value, true, value);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\tparse: function(/*String*/ value, /*dojo.date.locale.__FormatOptions*/ constraints){\r\n\t\t\t\treturn value || (this._isEmpty(value) ? null : undefined); // Date\r\n\t\t\t},\r\n\r\n\t\t\tfilter: function(val){\r\n\t\t\t\tif(val && val.getFullYear){\r\n\t\t\t\t\treturn val.getFullYear().toString();\r\n\t\t\t\t}\r\n\t\t\t\treturn this.inherited(arguments);\r\n\t\t\t}\r\n\t\t});\r\n});\r\n"]}