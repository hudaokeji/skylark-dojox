{"version":3,"sources":["form/manager/_ValueMixin.js"],"names":["define","lang","dojo","declare","elementValue","name","value","this","formWidgets","formWidgetValue","formNodes","formNodeValue","formPointValue","gatherFormValues","names","result","inspectFormWidgets","inspectFormNodes","mixin","inspectAttachedPoints","setFormValues","values","widget","node"],"mappings":";;;;;;;AAAAA,QACC,kBACA,oBACA,sBACE,SAASC,EAAMC,EAAMC,GACxB,OAAOA,EAAQ,iCAAkC,MAQhDC,aAAc,SAASC,EAAMC,GAQ5B,OAAGD,KAAQE,KAAKC,YACRD,KAAKE,gBAAgBJ,EAAMC,GAGhCC,KAAKG,WAAaL,KAAQE,KAAKG,UAC1BH,KAAKI,cAAcN,EAAMC,GAG1BC,KAAKK,eAAeP,EAAMC,IAGlCO,iBAAkB,SAASC,GAQ1B,IAAIC,EAASR,KAAKS,mBAAmB,SAASX,GAC7C,OAAOE,KAAKE,gBAAgBJ,IAC1BS,GAYH,OAVGP,KAAKU,kBACPhB,EAAKiB,MAAMH,EAAQR,KAAKU,iBAAiB,SAASZ,GACjD,OAAOE,KAAKI,cAAcN,IACxBS,IAGJb,EAAKiB,MAAMH,EAAQR,KAAKY,sBAAsB,SAASd,GACtD,OAAOE,KAAKK,eAAeP,IACzBS,IAEIC,GAGRK,cAAe,SAASC,GAoBvB,OAfGA,IACFd,KAAKS,mBAAmB,SAASX,EAAMiB,EAAQhB,GAC9CC,KAAKE,gBAAgBJ,EAAMC,IACzBe,GAEAd,KAAKU,kBACPV,KAAKU,iBAAiB,SAASZ,EAAMkB,EAAMjB,GAC1CC,KAAKI,cAAcN,EAAMC,IACvBe,GAGJd,KAAKY,sBAAsB,SAASd,EAAMkB,EAAMjB,GAC/CC,KAAKK,eAAeP,EAAMC,IACxBe,IAEGd","file":"../../../form/manager/_ValueMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, dojo, declare){\r\nreturn declare(\"dojox.form.manager._ValueMixin\", null, {\r\n\t// summary:\r\n\t//\t\tForm manager's mixin for getting/setting form values in the unified manner.\r\n\t// description:\r\n\t//\t\tThis mixin adds unified access to form widgets and form elements\r\n\t//\t\tin terms of name-value regardless of the underlying type of\r\n\t//\t\tan element. It should be used together with dojox.form.manager.Mixin.\r\n\r\n\telementValue: function(name, value){\r\n\t\t// summary:\r\n\t\t//\t\tSet or get a form widget/element or an attached point node by name.\r\n\t\t// name: String\r\n\t\t//\t\tThe name.\r\n\t\t// value: Object?\r\n\t\t//\t\tOptional. The value to set.\r\n\r\n\t\tif(name in this.formWidgets){\r\n\t\t\treturn this.formWidgetValue(name, value);\t// Object\r\n\t\t}\r\n\r\n\t\tif(this.formNodes && name in this.formNodes){\r\n\t\t\treturn this.formNodeValue(name, value);\t// Object\r\n\t\t}\r\n\r\n\t\treturn this.formPointValue(name, value);\t// Object\r\n\t},\r\n\r\n\tgatherFormValues: function(names){\r\n\t\t// summary:\r\n\t\t//\t\tCollect form values.\r\n\t\t// names: Object?\r\n\t\t//\t\tIf it is an array, it is a list of names of form elements to be collected.\r\n\t\t//\t\tIf it is an object, dictionary keys are names to be collected.\r\n\t\t//\t\tIf it is omitted, all known form elements are to be collected.\r\n\r\n\t\tvar result = this.inspectFormWidgets(function(name){\r\n\t\t\treturn this.formWidgetValue(name);\r\n\t\t}, names);\r\n\r\n\t\tif(this.inspectFormNodes){\r\n\t\t\tlang.mixin(result, this.inspectFormNodes(function(name){\r\n\t\t\t\treturn this.formNodeValue(name);\r\n\t\t\t}, names));\r\n\t\t}\r\n\r\n\t\tlang.mixin(result, this.inspectAttachedPoints(function(name){\r\n\t\t\treturn this.formPointValue(name);\r\n\t\t}, names));\r\n\r\n\t\treturn result;\t// Object\r\n\t},\r\n\r\n\tsetFormValues: function(values){\r\n\t\t// summary:\r\n\t\t//\t\tSet values to form elements\r\n\t\t// values: Object\r\n\t\t//\t\tA dictionary of key-value pairs.\r\n\t\tif(values){\r\n\t\t\tthis.inspectFormWidgets(function(name, widget, value){\r\n\t\t\t\tthis.formWidgetValue(name, value);\r\n\t\t\t}, values);\r\n\r\n\t\t\tif(this.inspectFormNodes){\r\n\t\t\t\tthis.inspectFormNodes(function(name, node, value){\r\n\t\t\t\t\tthis.formNodeValue(name, value);\r\n\t\t\t\t}, values);\r\n\t\t\t}\r\n\r\n\t\t\tthis.inspectAttachedPoints(function(name, node, value){\r\n\t\t\t\tthis.formPointValue(name, value);\r\n\t\t\t}, values);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n});\r\n});\r\n"]}