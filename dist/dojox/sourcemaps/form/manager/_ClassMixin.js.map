{"version":3,"sources":["form/manager/_ClassMixin.js"],"names":["define","lang","dojo","domClass","_Mixin","declare","fm","getObject","aa","actionAdapter","ia","inspectorAdapter","gatherClassState","className","names","this","inspect","name","node","contains","addClass","add","removeClass","remove"],"mappings":";;;;;;;AAAAA,QACC,kBACA,oBACA,iBACA,WACA,sBACE,SAASC,EAAMC,EAAMC,EAAUC,EAAQC,GACzC,IAAIC,EAAKL,EAAKM,UAAU,sBAAsB,GAC7CC,EAAKF,EAAGG,cACRC,EAAKJ,EAAGK,iBAET,OAAON,EAAQ,iCAAkC,MAShDO,iBAAkB,SAASC,EAAWC,GAcrC,OAJaC,KAAKC,QAAQN,EAAG,SAASO,EAAMC,GAC3C,OAAOf,EAASgB,SAASD,EAAML,KAC5BC,IAKLM,SAAU,SAASP,EAAWC,GAc7B,OAJAC,KAAKC,QAAQR,EAAG,SAASS,EAAMC,GAC9Bf,EAASkB,IAAIH,EAAML,KAChBC,GAEGC,MAGRO,YAAa,SAAST,EAAWC,GAchC,OAJAC,KAAKC,QAAQR,EAAG,SAASS,EAAMC,GAC9Bf,EAASoB,OAAOL,EAAML,KACnBC,GAEGC","file":"../../../form/manager/_ClassMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/dom-class\",\r\n\t\"./_Mixin\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, dojo, domClass, _Mixin, declare){\r\n\tvar fm = lang.getObject(\"dojox.form.manager\", true),\r\n\t\taa = fm.actionAdapter,\r\n\t\tia = fm.inspectorAdapter;\r\n\r\n\treturn declare(\"dojox.form.manager._ClassMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tForm manager's mixin for testing/assigning/removing\r\n\t\t//\t\tclasses of controlled elements.\r\n\t\t// description:\r\n\t\t//\t\tThis mixin provides unified way to check/add/remove a class\r\n\t\t//\t\tof controlled elements.\r\n\t\t//\t\tIt should be used together with dojox.form.manager.Mixin.\r\n\r\n\t\tgatherClassState: function(className, names){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGather the presence of a certain class in all controlled elements.\r\n\t\t\t// className: String\r\n\t\t\t//\t\tThe class name to test for.\r\n\t\t\t// names: Object?\r\n\t\t\t//\t\tIf it is an array, it is a list of names to be processed.\r\n\t\t\t//\t\tIf it is an object, dictionary keys are names to be processed.\r\n\t\t\t//\t\tIf it is omitted, all known form elements are to be processed.\r\n\r\n\t\t\tvar result = this.inspect(ia(function(name, node){\r\n\t\t\t\treturn domClass.contains(node, className);\r\n\t\t\t}), names);\r\n\r\n\t\t\treturn result;\t// Object\r\n\t\t},\r\n\r\n\t\taddClass: function(className, names){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a class to nodes according to the supplied set of names\r\n\t\t\t// className: String\r\n\t\t\t//\t\tClass name to add.\r\n\t\t\t// names: Object?\r\n\t\t\t//\t\tIf it is an array, it is a list of names to be processed.\r\n\t\t\t//\t\tIf it is an object, dictionary keys are names to be processed.\r\n\t\t\t//\t\tIf it is omitted, all known form elements are to be processed.\r\n\r\n\t\t\tthis.inspect(aa(function(name, node){\r\n\t\t\t\tdomClass.add(node, className);\r\n\t\t\t}), names);\r\n\r\n\t\t\treturn this;\t// self\r\n\t\t},\r\n\r\n\t\tremoveClass: function(className, names){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove a class from nodes according to the supplied set of names\r\n\t\t\t// className: String\r\n\t\t\t//\t\tClass name to remove.\r\n\t\t\t// names: Object?\r\n\t\t\t//\t\tIf it is an array, it is a list of names to be processed.\r\n\t\t\t//\t\tIf it is an object, dictionary keys are names to be processed.\r\n\t\t\t//\t\tIf it is omitted, all known form elements are to be processed.\r\n\r\n\t\t\tthis.inspect(aa(function(name, node){\r\n\t\t\t\tdomClass.remove(node, className);\r\n\t\t\t}), names);\r\n\r\n\t\t\treturn this;\t// self\r\n\t\t}\r\n\t});\r\n});\r\n"]}