{"version":3,"sources":["form/manager/_NodeMixin.js"],"names":["define","lang","array","on","dom","domAttr","query","_Mixin","_FormWidget","manager","declare","fm","getObject","aa","actionAdapter","keys","_keys","ce","changeEvent","node","eventName","tagName","toLowerCase","type","registerNode","groupNode","name","get","this","domNode","formWidgets","n","parentNode","byNode","isInstanceOf","a","formNodes","isArray","push","connections","getObserversFromNode","observers","_","o","forEach","split","trim","isFunction","call","connectNode","t","c","length","item","remove","hitch","evt","watching","formNodeValue","destroy","inherited","arguments","byId","unregisterNode","registerNodeDescendants","map","unregisterNodeDescendants","elem","value","result","isSetter","undefined","checked","some","multiple","dict","v","opt","selected","filter","innerHTML","Boolean","inspectFormNodes","inspector","state","defaultValue"],"mappings":"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","file":"../../../form/manager/_NodeMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/on\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/query\",\r\n\t\"./_Mixin\",\r\n\t\"dijit/form/_FormWidget\",\r\n\t\"dijit/_base/manager\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, array, on, dom, domAttr, query, _Mixin, _FormWidget, manager, declare){\r\n\tvar fm = lang.getObject(\"dojox.form.manager\", true),\r\n\t\taa = fm.actionAdapter,\r\n\t\tkeys = fm._keys,\r\n\r\n\t\tce = fm.changeEvent = function(node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction that returns a valid \"onchange\" event for a given form node.\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tForm node.\r\n\r\n\t\t\tvar eventName = \"click\";\r\n\t\t\tswitch(node.tagName.toLowerCase()){\r\n\t\t\t\tcase \"textarea\":\r\n\t\t\t\t\teventName = \"keyup\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\teventName = \"change\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"input\":\r\n\t\t\t\t\tswitch(node.type.toLowerCase()){\r\n\t\t\t\t\t\tcase \"text\":\r\n\t\t\t\t\t\tcase \"password\":\r\n\t\t\t\t\t\t\teventName = \"keyup\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t// button, input/button, input/checkbox, input/radio,\r\n\t\t\t\t// input/file, input/image, input/submit, input/reset\r\n\t\t\t\t// use \"onclick\" (the default)\r\n\t\t\t}\r\n\t\t\treturn eventName;\t// String\r\n\t\t},\r\n\r\n\t\tregisterNode = function(node, groupNode){\r\n\t\t\tvar name = domAttr.get(node, \"name\");\r\n\t\t\tgroupNode = groupNode || this.domNode;\r\n\t\t\tif(name && !(name in this.formWidgets)){\r\n\t\t\t\t// verify that it is not part of any widget\r\n\t\t\t\tfor(var n = node; n && n !== groupNode; n = n.parentNode){\r\n\t\t\t\t\tif(domAttr.get(n, \"widgetId\") && manager.byNode(n).isInstanceOf(_FormWidget)){\r\n\t\t\t\t\t\t// this is a child of some widget --- bail out\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// register the node\r\n\t\t\t\tif(node.tagName.toLowerCase() == \"input\" && node.type.toLowerCase() == \"radio\"){\r\n\t\t\t\t\tvar a = this.formNodes[name];\r\n\t\t\t\t\ta = a && a.node;\r\n\t\t\t\t\tif(a && lang.isArray(a)){\r\n\t\t\t\t\t\ta.push(node);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis.formNodes[name] = {node: [node], connections: []};\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.formNodes[name] = {node: node, connections: []};\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tname = null;\r\n\t\t\t}\r\n\t\t\treturn name;\r\n\t\t},\r\n\r\n\t\tgetObserversFromNode = function(name){\r\n\t\t\tvar observers = {};\r\n\t\t\taa(function(_, n){\r\n\t\t\t\tvar o = domAttr.get(n, \"data-dojo-observer\") || domAttr.get(n, \"observer\");\r\n\t\t\t\tif(o && typeof o == \"string\"){\r\n\t\t\t\t\tarray.forEach(o.split(\",\"), function(o){\r\n\t\t\t\t\t\to = lang.trim(o);\r\n\t\t\t\t\t\tif(o && lang.isFunction(this[o])){\r\n\t\t\t\t\t\t\tobservers[o] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}).call(this, null, this.formNodes[name].node);\r\n\t\t\treturn keys(observers);\r\n\t\t},\r\n\r\n\t\tconnectNode = function(name, observers){\r\n\t\t\tvar t = this.formNodes[name], c = t.connections;\r\n\t\t\tif(c.length){\r\n\t\t\t\tarray.forEach(c, function(item){ item.remove(); });\r\n\t\t\t\tc = t.connections = [];\r\n\t\t\t}\r\n\t\t\taa(function(_, n){\r\n\t\t\t\t// the next line is a crude workaround for Button that fires onClick instead of onChange\r\n\t\t\t\tvar eventName = ce(n);\r\n\t\t\t\tarray.forEach(observers, function(o){\r\n\t\t\t\t\tc.push(on(n, eventName, lang.hitch(this, function(evt){\r\n\t\t\t\t\t\tif(this.watching){\r\n\t\t\t\t\t\t\tthis[o](this.formNodeValue(name), name, n, evt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})));\r\n\t\t\t\t}, this);\r\n\t\t\t}).call(this, null, t.node);\r\n\t\t};\r\n\r\n\treturn declare(\"dojox.form.manager._NodeMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin to orchestrate dynamic forms (works with DOM nodes).\r\n\t\t// description:\r\n\t\t//\t\tThis mixin provides a foundation for an enhanced form\r\n\t\t//\t\tfunctionality: unified access to individual form elements,\r\n\t\t//\t\tunified \"change\" event processing, and general event\r\n\t\t//\t\tprocessing. It complements dojox/form/manager/_Mixin\r\n\t\t//\t\textending the functionality to DOM nodes.\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the widget is being destroyed\r\n\r\n\t\t\tfor(var name in this.formNodes){\r\n\t\t\t\tarray.forEach(this.formNodes[name].connections, function(item){\r\n\t\t\t\t\titem.remove();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.formNodes = {};\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t// register/unregister widgets and nodes\r\n\r\n\t\tregisterNode: function(node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister a node with the form manager\r\n\t\t\t// node: String|Node\r\n\t\t\t//\t\tA node, or its id\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\t\t\tif(typeof node == \"string\"){\r\n\t\t\t\tnode = dom.byId(node);\r\n\t\t\t}\r\n\t\t\tvar name = registerNode.call(this, node);\r\n\t\t\tif(name){\r\n\t\t\t\tconnectNode.call(this, name, getObserversFromNode.call(this, name));\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tunregisterNode: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves the node by name from internal tables unregistering\r\n\t\t\t//\t\tconnected observers\r\n\t\t\t// name: String\r\n\t\t\t//\t\tName of the to unregister\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\t\t\tif(name in this.formNodes){\r\n\t\t\t\tarray.forEach(this.formNodes[name].connections, function(item){\r\n\t\t\t\t\titem.remove();\r\n\t\t\t\t});\r\n\t\t\t\tdelete this.formNodes[name];\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tregisterNodeDescendants: function(node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister node's descendants (form nodes) with the form manager\r\n\t\t\t// node: String|Node\r\n\t\t\t//\t\tA widget, or its widgetId, or its DOM node\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\r\n\t\t\tif(typeof node == \"string\"){\r\n\t\t\t\tnode = dom.byId(node);\r\n\t\t\t}\r\n\r\n\t\t\tquery(\"input, select, textarea, button\", node).\r\n\t\t\t\tmap(function(n){\r\n\t\t\t\t\treturn registerNode.call(this, n, node);\r\n\t\t\t\t}, this).\r\n\t\t\t\tforEach(function(name){\r\n\t\t\t\t\tif(name){\r\n\t\t\t\t\t\tconnectNode.call(this, name, getObserversFromNode.call(this, name));\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tunregisterNodeDescendants: function(node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnregister node's descendants (form nodes) with the form manager\r\n\t\t\t// node: String|Node\r\n\t\t\t//\t\tA widget, or its widgetId, or its DOM node\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\r\n\t\t\tif(typeof node == \"string\"){\r\n\t\t\t\tnode = dom.byId(node);\r\n\t\t\t}\r\n\r\n\t\t\tquery(\"input, select, textarea, button\", node).\r\n\t\t\t\tmap(function(n){ return domAttr.get(node, \"name\") || null; }).\r\n\t\t\t\tforEach(function(name){\r\n\t\t\t\t\tif(name){\r\n\t\t\t\t\t\tthis.unregisterNode(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t// value accessors\r\n\r\n\t\tformNodeValue: function(elem, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet or get a form element by name.\r\n\t\t\t// elem: String|Node|Array\r\n\t\t\t//\t\tForm element's name, DOM node, or array or radio nodes.\r\n\t\t\t// value: Object?\r\n\t\t\t//\t\tOptional. The value to set.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tFor a getter it returns the value, for a setter it returns\r\n\t\t\t//\t\tself. If the elem is not valid, null will be returned.\r\n\r\n\t\t\tvar isSetter = arguments.length == 2 && value !== undefined, result;\r\n\r\n\t\t\tif(typeof elem == \"string\"){\r\n\t\t\t\telem = this.formNodes[elem];\r\n\t\t\t\tif(elem){\r\n\t\t\t\t\telem = elem.node;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(!elem){\r\n\t\t\t\treturn null;\t// Object\r\n\t\t\t}\r\n\r\n\t\t\tif(lang.isArray(elem)){\r\n\t\t\t\t// input/radio array\r\n\t\t\t\tif(isSetter){\r\n\t\t\t\t\tarray.forEach(elem, function(node){\r\n\t\t\t\t\t\tnode.checked = \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t\tarray.forEach(elem, function(node){\r\n\t\t\t\t\t\tnode.checked = node.value === value ? \"checked\" : \"\";\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t}\r\n\t\t\t\t// getter\r\n\t\t\t\tarray.some(elem, function(node){\r\n\t\t\t\t\tif(node.checked){\r\n\t\t\t\t\t\tresult = node;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t});\r\n\t\t\t\treturn result ? result.value : \"\";\t// String\r\n\t\t\t}\r\n\t\t\t// all other elements\r\n\t\t\tswitch(elem.tagName.toLowerCase()){\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tif(elem.multiple){\r\n\t\t\t\t\t\t// multiple is allowed\r\n\t\t\t\t\t\tif(isSetter){\r\n\t\t\t\t\t\t\tif(lang.isArray(value)){\r\n\t\t\t\t\t\t\t\tvar dict = {};\r\n\t\t\t\t\t\t\t\tarray.forEach(value, function(v){\r\n\t\t\t\t\t\t\t\t\tdict[v] = 1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tquery(\"> option\", elem).forEach(function(opt){\r\n\t\t\t\t\t\t\t\t\topt.selected = opt.value in dict;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// singular property\r\n\t\t\t\t\t\t\tquery(\"> option\", elem).forEach(function(opt){\r\n\t\t\t\t\t\t\t\topt.selected = opt.value === value;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// getter\r\n\t\t\t\t\t\tresult = query(\"> option\", elem).filter(function(opt){\r\n\t\t\t\t\t\t\treturn opt.selected;\r\n\t\t\t\t\t\t}).map(function(opt){\r\n\t\t\t\t\t\t\treturn opt.value;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn result.length == 1 ? result[0] : result;\t// Object\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// singular\r\n\t\t\t\t\tif(isSetter){\r\n\t\t\t\t\t\tquery(\"> option\", elem).forEach(function(opt){\r\n\t\t\t\t\t\t\topt.selected = opt.value === value;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// getter\r\n\t\t\t\t\treturn elem.value || \"\"; // String\r\n\t\t\t\tcase \"button\":\r\n\t\t\t\t\tif(isSetter){\r\n\t\t\t\t\t\telem.innerHTML = \"\" + value;\r\n\t\t\t\t\t\treturn this;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// getter\r\n\t\t\t\t\treturn elem.innerHTML;\r\n\t\t\t\tcase \"input\":\r\n\t\t\t\t\tif(elem.type.toLowerCase() == \"checkbox\"){\r\n\t\t\t\t\t\t// input/checkbox element\r\n\t\t\t\t\t\tif(isSetter){\r\n\t\t\t\t\t\t\telem.checked = value ? \"checked\" : \"\";\r\n\t\t\t\t\t\t\treturn this;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// getter\r\n\t\t\t\t\t\treturn Boolean(elem.checked);\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// the rest of inputs\r\n\t\t\tif(isSetter){\r\n\t\t\t\telem.value = \"\" + value;\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\t// getter\r\n\t\t\treturn elem.value;\r\n\t\t},\r\n\r\n\t\t// inspectors\r\n\r\n\t\tinspectFormNodes: function(inspector, state, defaultValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun an inspector function on controlled form elements returning a result object.\r\n\t\t\t// inspector: Function\r\n\t\t\t//\t\tA function to be called on a form element. Takes three arguments: a name, a node or\r\n\t\t\t//\t\tan array of nodes, and a supplied value. Runs in the context of the form manager.\r\n\t\t\t//\t\tReturns a value that will be collected and returned as a state.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary --- only listed names will be processed.\r\n\t\t\t//\t\tIf an array, all names in the array will be processed with defaultValue.\r\n\t\t\t//\t\tIf omitted or null, all form elements will be processed with defaultValue.\r\n\t\t\t// defaultValue: Object?\r\n\t\t\t//\t\tOptional. The default state (true, if omitted).\r\n\r\n\t\t\tvar name, result = {};\r\n\r\n\t\t\tif(state){\r\n\t\t\t\tif(lang.isArray(state)){\r\n\t\t\t\t\tarray.forEach(state, function(name){\r\n\t\t\t\t\t\tif(name in this.formNodes){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, this.formNodes[name].node, defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfor(name in state){\r\n\t\t\t\t\t\tif(name in this.formNodes){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, this.formNodes[name].node, state[name]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(name in this.formNodes){\r\n\t\t\t\t\tresult[name] = inspector.call(this, name, this.formNodes[name].node, defaultValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\t// Object\r\n\t\t}\r\n\t});\r\n});\r\n"]}