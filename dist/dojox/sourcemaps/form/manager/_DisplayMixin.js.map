{"version":3,"sources":["form/manager/_DisplayMixin.js"],"names":["define","dojo","domStyle","declare","gatherDisplayState","names","this","inspectAttachedPoints","name","node","get","show","state","defaultState","arguments","length","value","set","hide"],"mappings":";;;;;;;AAAAA,QACC,oBACA,iBACA,sBACE,SAASC,EAAMC,EAAUC,GAC5B,OAAOA,EAAQ,mCAAoC,MAWlDC,mBAAoB,SAASC,GAY5B,OAJaC,KAAKC,sBAAsB,SAASC,EAAMC,GACtD,MAAwC,QAAjCP,EAASQ,IAAID,EAAM,YACxBJ,IAKJM,KAAM,SAASC,EAAOC,GAmBrB,OARGC,UAAUC,OAAS,IACrBF,GAAe,GAGhBP,KAAKC,sBAAsB,SAASC,EAAMC,EAAMO,GAC/Cd,EAASe,IAAIR,EAAM,UAAWO,EAAQ,GAAK,SACzCJ,EAAOC,GAEHP,MAGRY,KAAM,SAASN,GAQd,OAAON,KAAKK,KAAKC,GAAO","file":"../../../form/manager/_DisplayMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/_base/declare\"\r\n], function(dojo, domStyle, declare){\r\nreturn declare(\"dojox.form.manager._DisplayMixin\", null, {\r\n\t// summary:\r\n\t//\t\tForm manager's mixin for controlling show/hide state of\r\n\t//\t\tcontrolled elements (defined by dojoAttachPoint attributes).\r\n\t// description:\r\n\t//\t\tThis mixin provides unified show/hide functionality for\r\n\t//\t\tcontrolled elements (indicated by dojoAttachPoint attribute).\r\n\t//\t\tEssentially it provides a way to change \"style.display\"\r\n\t//\t\tparameter of controlled nodes.\r\n\t//\t\tIt should be used together with dojox.form.manager.Mixin.\r\n\r\n\tgatherDisplayState: function(names){\r\n\t\t// summary:\r\n\t\t//\t\tGather display state of all attached elements and return as a dictionary.\r\n\t\t// names: Object?\r\n\t\t//\t\tIf it is an array, it is a list of names to be processed.\r\n\t\t//\t\tIf it is an object, dictionary keys are names to be processed.\r\n\t\t//\t\tIf it is omitted, all known attach point nodes are to be processed.\r\n\r\n\t\tvar result = this.inspectAttachedPoints(function(name, node){\r\n\t\t\treturn domStyle.get(node, \"display\") != \"none\";\r\n\t\t}, names);\r\n\r\n\t\treturn result;\t// Object\r\n\t},\r\n\r\n\tshow: function(state, defaultState){\r\n\t\t// summary:\r\n\t\t//\t\tShow attached nodes according to the supplied state object.\r\n\t\t// state: Object?\r\n\t\t//\t\tOptional. If a name-value dictionary, the value is true\r\n\t\t//\t\tto show and false to hide. If an array, all names in the\r\n\t\t//\t\tarray will be set to defaultState. If omitted, all form\r\n\t\t//\t\telements will be set to defaultState.\r\n\t\t// defaultState: Boolean?\r\n\t\t//\t\tThe default state (true, if omitted).\r\n\r\n\t\tif(arguments.length < 2){\r\n\t\t\tdefaultState = true;\r\n\t\t}\r\n\r\n\t\tthis.inspectAttachedPoints(function(name, node, value){\r\n\t\t\tdomStyle.set(node, \"display\", value ? \"\" : \"none\");\r\n\t\t}, state, defaultState);\r\n\r\n\t\treturn this;\t// self\r\n\t},\r\n\r\n\thide: function(state){\r\n\t\t// summary:\r\n\t\t//\t\tHide attached nodes according to the supplied state object.\r\n\t\t// state: Object?\r\n\t\t//\t\tOptional. If a name-value dictionary, the value is true\r\n\t\t//\t\tto show and false to hide. If an array, all names in the\r\n\t\t//\t\tarray will be hidden. If omitted, all form elements\r\n\t\t//\t\twill be hidden.\r\n\t\treturn this.show(state, false);\t// self\r\n\t}\r\n});\r\n});\r\n"]}