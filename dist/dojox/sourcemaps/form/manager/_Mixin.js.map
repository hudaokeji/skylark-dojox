{"version":3,"sources":["form/manager/_Mixin.js"],"names":["define","win","lang","array","on","domAttr","domClass","manager","Widget","FormWidget","Button","CheckBox","declare","fm","getObject","aa","actionAdapter","action","name","elems","value","isArray","forEach","elem","call","this","apply","arguments","skipNames","inspectorAdapter","inspector","domNode","containerNode","srcNodeRef","bgIframe","keys","_keys","o","key","list","hasOwnProperty","push","registerWidget","widget","get","isInstanceOf","formWidgets","a","connections","getObserversFromWidget","observers","_","w","split","trim","isFunction","connectWidget","t","c","length","item","remove","hitch","evt","watching","focusNode","eventName","_Mixin","startup","_started","formNodes","registerWidgetDescendants","inherited","destroy","byId","tagName","cloneNode","byNode","unregisterWidget","widgets","map","getDescendants","registerNodeDescendants","unregisterWidgetDescendants","unregisterNodeDescendants","formWidgetValue","result","isSetter","undefined","set","some","Boolean","formPointValue","contains","innerHTML","inspectFormWidgets","state","defaultValue","inspectAttachedPoints","inspect","inspectFormNodes","mixin","extend","observer"],"mappings":"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","file":"../../../form/manager/_Mixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/on\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-class\",\r\n\t\"dijit/_base/manager\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/form/_FormWidget\",\r\n\t\"dijit/form/Button\",\r\n\t\"dijit/form/CheckBox\",\r\n\t\"dojo/_base/declare\"\r\n], function(win, lang, array, on, domAttr, domClass, manager, Widget, FormWidget, Button, CheckBox, declare){\r\n\t// TODO: This class is loading a bunch of extra widgets just to perform isInstanceOf operations,\r\n\t// which is wasteful\r\n\r\n\tvar fm = lang.getObject(\"dojox.form.manager\", true),\r\n\r\n\t\taa = fm.actionAdapter = function(action){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdapter that automates application of actions to arrays.\r\n\t\t\t// action: Function\r\n\t\t\t//\t\tFunction that takes three parameters: a name, an object\r\n\t\t\t//\t\t(usually node or widget), and a value. This action will\r\n\t\t\t//\t\tbe applied to all elements of array.\r\n\t\t\treturn function(name, elems, value){\r\n\t\t\t\tif(lang.isArray(elems)){\r\n\t\t\t\t\tarray.forEach(elems, function(elem){\r\n\t\t\t\t\t\taction.call(this, name, elem, value);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}else{\r\n\t\t\t\t\taction.apply(this, arguments);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tia = fm.inspectorAdapter = function(inspector){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdapter that applies an inspector only to the first item of the array.\r\n\t\t\t// inspector: Function\r\n\t\t\t//\t\tFunction that takes three parameters: a name, an object\r\n\t\t\t//\t\t(usually node or widget), and a value.\r\n\t\t\treturn function(name, elem, value){\r\n\t\t\t\treturn inspector.call(this, name, lang.isArray(elem) ? elem[0] : elem, value);\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tskipNames = {domNode: 1, containerNode: 1, srcNodeRef: 1, bgIframe: 1},\r\n\r\n\t\tkeys = fm._keys = function(o){\r\n\t\t\t// similar to dojox.lang.functional.keys\r\n\t\t\tvar list = [], key;\r\n\t\t\tfor(key in o){\r\n\t\t\t\tif(o.hasOwnProperty(key)){\r\n\t\t\t\t\tlist.push(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn list;\r\n\t\t},\r\n\r\n\t\tregisterWidget = function(widget){\r\n\t\t\tvar name = widget.get(\"name\");\r\n\t\t\tif(name && widget.isInstanceOf(FormWidget)){\r\n\t\t\t\tif(name in this.formWidgets){\r\n\t\t\t\t\tvar a = this.formWidgets[name].widget;\r\n\t\t\t\t\tif(lang.isArray(a)){\r\n\t\t\t\t\t\ta.push(widget);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis.formWidgets[name].widget = [a, widget];\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.formWidgets[name] = {widget: widget, connections: []};\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tname = null;\r\n\t\t\t}\r\n\t\t\treturn name;\r\n\t\t},\r\n\r\n\t\tgetObserversFromWidget = function(name){\r\n\t\t\tvar observers = {};\r\n\t\t\taa(function(_, w){\r\n\t\t\t\tvar o = w.get(\"data-dojo-observer\") || w.get(\"observer\");\r\n\t\t\t\tif(o && typeof o == \"string\"){\r\n\t\t\t\t\tarray.forEach(o.split(\",\"), function(o){\r\n\t\t\t\t\t\to = lang.trim(o);\r\n\t\t\t\t\t\tif(o && lang.isFunction(this[o])){\r\n\t\t\t\t\t\t\tobservers[o] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}).call(this, null, this.formWidgets[name].widget);\r\n\t\t\treturn keys(observers);\r\n\t\t},\r\n\r\n\t\tconnectWidget = function(name, observers){\r\n\t\t\tvar t = this.formWidgets[name], w = t.widget, c = t.connections;\r\n\t\t\tif(c.length){\r\n\t\t\t\tarray.forEach(c, function(item){ item.remove(); });\r\n\t\t\t\tc = t.connections = [];\r\n\t\t\t}\r\n\t\t\tif(lang.isArray(w)){\r\n\t\t\t\t// radio buttons\r\n\t\t\t\tarray.forEach(w, function(w){\r\n\t\t\t\t\tarray.forEach(observers, function(o){\r\n\t\t\t\t\t\tc.push(on(w, \"change\", lang.hitch(this, function(evt){\r\n\t\t\t\t\t\t\t// TODO: for some reason for radio button widgets\r\n\t\t\t\t\t\t\t// w.checked != w.focusNode.checked when value changes.\r\n\t\t\t\t\t\t\t// We test the underlying value to be 100% sure.\r\n\t\t\t\t\t\t\tif(this.watching && domAttr.get(w.focusNode, \"checked\")){\r\n\t\t\t\t\t\t\t\tthis[o](w.get(\"value\"), name, w, evt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})));\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}, this);\r\n\t\t\t}else{\r\n\t\t\t\t// the rest\r\n\t\t\t\t// the next line is a crude workaround for Button that fires onClick instead of onChange\r\n\t\t\t\tvar eventName = w.isInstanceOf(Button) ?\r\n\t\t\t\t\t\t\"click\" : \"change\";\r\n\t\t\t\tarray.forEach(observers, function(o){\r\n\t\t\t\t\tc.push(on(w, eventName, lang.hitch(this, function(evt){\r\n\t\t\t\t\t\tif(this.watching){\r\n\t\t\t\t\t\t\tthis[o](w.get(\"value\"), name, w, evt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})));\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\tvar _Mixin = declare(\"dojox.form.manager._Mixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin to orchestrate dynamic forms.\r\n\t\t// description:\r\n\t\t//\t\tThis mixin provides a foundation for an enhanced form\r\n\t\t//\t\tfunctionality: unified access to individual form elements,\r\n\t\t//\t\tunified \"onchange\" event processing, general event\r\n\t\t//\t\tprocessing, I/O orchestration, and common form-related\r\n\t\t//\t\tfunctionality. See additional mixins in dojox.form.manager\r\n\t\t//\t\tnamespace.\r\n\r\n\t\twatching: true,\r\n\r\n\t\tstartup: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled after all the widgets have been instantiated and their\r\n\t\t\t//\t\tdom nodes have been inserted somewhere under win.doc.body.\r\n\r\n\t\t\tif(this._started){ return; }\r\n\r\n\t\t\tthis.formWidgets = {};\r\n\t\t\tthis.formNodes = {};\r\n\t\t\tthis.registerWidgetDescendants(this);\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the widget is being destroyed\r\n\r\n\t\t\tfor(var name in this.formWidgets){\r\n\t\t\t\tarray.forEach(this.formWidgets[name].connections, function(item){\r\n\t\t\t\t\titem.remove();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.formWidgets = {};\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t// register/unregister widgets and nodes\r\n\r\n\t\tregisterWidget: function(widget){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister a widget with the form manager\r\n\t\t\t// widget: String|Node|dijit/form/_FormWidget\r\n\t\t\t//\t\tA widget, or its widgetId, or its DOM node\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\t\t\tif(typeof widget == \"string\"){\r\n\t\t\t\twidget = manager.byId(widget);\r\n\t\t\t}else if(widget.tagName && widget.cloneNode){\r\n\t\t\t\twidget = manager.byNode(widget);\r\n\t\t\t}\r\n\t\t\tvar name = registerWidget.call(this, widget);\r\n\t\t\tif(name){\r\n\t\t\t\tconnectWidget.call(this, name, getObserversFromWidget.call(this, name));\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tunregisterWidget: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves the widget by name from internal tables unregistering\r\n\t\t\t//\t\tconnected observers\r\n\t\t\t// name: String\r\n\t\t\t//\t\tName of the to unregister\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\t\t\tif(name in this.formWidgets){\r\n\t\t\t\tarray.forEach(this.formWidgets[name].connections, function(item){\r\n\t\t\t\t\titem.remove();\r\n\t\t\t\t});\r\n\t\t\t\tdelete this.formWidgets[name];\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tregisterWidgetDescendants: function(widget){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister widget's descendants with the form manager\r\n\t\t\t// widget: String|Node|dijit._Widget\r\n\t\t\t//\t\tA widget, or its widgetId, or its DOM node\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\r\n\t\t\t// convert to widget, if required\r\n\t\t\tif(typeof widget == \"string\"){\r\n\t\t\t\twidget = manager.byId(widget);\r\n\t\t\t}else if(widget.tagName && widget.cloneNode){\r\n\t\t\t\twidget = manager.byNode(widget);\r\n\t\t\t}\r\n\r\n\t\t\t// build the map of widgets\r\n\t\t\tvar widgets = array.map(widget.getDescendants(), registerWidget, this);\r\n\r\n\t\t\t// process observers for widgets\r\n\t\t\tarray.forEach(widgets, function(name){\r\n\t\t\t\tif(name){\r\n\t\t\t\t\tconnectWidget.call(this, name, getObserversFromWidget.call(this, name));\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\t// do the same with nodes, if available\r\n\t\t\treturn this.registerNodeDescendants ?\r\n\t\t\t\tthis.registerNodeDescendants(widget.domNode) : this;\r\n\t\t},\r\n\r\n\t\tunregisterWidgetDescendants: function(widget){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnregister widget's descendants with the form manager\r\n\t\t\t// widget: String|Node|dijit/_Widget\r\n\t\t\t//\t\tA widget, or its widgetId, or its DOM node\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tReturns self\r\n\r\n\t\t\t// convert to widget, if required\r\n\t\t\tif(typeof widget == \"string\"){\r\n\t\t\t\twidget = manager.byId(widget);\r\n\t\t\t}else if(widget.tagName && widget.cloneNode){\r\n\t\t\t\twidget = manager.byNode(widget);\r\n\t\t\t}\r\n\r\n\t\t\t// unregister widgets by names\r\n\t\t\tarray.forEach(\r\n\t\t\t\tarray.map(\r\n\t\t\t\t\twidget.getDescendants(),\r\n\t\t\t\t\tfunction(w){\r\n\t\t\t\t\t\treturn w instanceof FormWidget && w.get(\"name\") || null;\r\n\t\t\t\t\t}\r\n\t\t\t\t),\r\n\t\t\t\tfunction(name){\r\n\t\t\t\t\tif(name){\r\n\t\t\t\t\t\tthis.unregisterWidget(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tthis\r\n\t\t\t);\r\n\r\n\t\t\t// do the same with nodes, if available\r\n\t\t\treturn this.unregisterNodeDescendants ?\r\n\t\t\t\tthis.unregisterNodeDescendants(widget.domNode) : this;\r\n\t\t},\r\n\r\n\t\t// value accessors\r\n\r\n\t\tformWidgetValue: function(elem, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet or get a form widget by name.\r\n\t\t\t// elem: String|Object|Array\r\n\t\t\t//\t\tForm element's name, widget object, or array or radio widgets.\r\n\t\t\t// value: Object?\r\n\t\t\t//\t\tOptional. The value to set.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tFor a getter it returns the value, for a setter it returns\r\n\t\t\t//\t\tself. If the elem is not valid, null will be returned.\r\n\r\n\t\t\tvar isSetter = arguments.length == 2 && value !== undefined, result;\r\n\r\n\t\t\tif(typeof elem == \"string\"){\r\n\t\t\t\telem = this.formWidgets[elem];\r\n\t\t\t\tif(elem){\r\n\t\t\t\t\telem = elem.widget;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(!elem){\r\n\t\t\t\treturn null;\t// Object\r\n\t\t\t}\r\n\r\n\t\t\tif(lang.isArray(elem)){\r\n\t\t\t\t// input/radio array of widgets\r\n\t\t\t\tif(isSetter){\r\n\t\t\t\t\tarray.forEach(elem, function(widget){\r\n\t\t\t\t\t\twidget.set(\"checked\", false, !this.watching);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\tarray.forEach(elem, function(widget){\r\n\t\t\t\t\t\twidget.set(\"checked\", widget.value === value, !this.watching);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t}\r\n\t\t\t\t// getter\r\n\t\t\t\tarray.some(elem, function(widget){\r\n\t\t\t\t\t// TODO: for some reason for radio button widgets\r\n\t\t\t\t\t// w.checked != w.focusNode.checked when value changes.\r\n\t\t\t\t\t// We test the underlying value to be 100% sure.\r\n\t\t\t\t\tif(domAttr.get(widget.focusNode, \"checked\")){\r\n\t\t\t\t\t//if(widget.get(\"checked\")){\r\n\t\t\t\t\t\tresult = widget;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t});\r\n\t\t\t\treturn result ? result.get(\"value\") : \"\";\t// String\r\n\t\t\t}\r\n\r\n\t\t\t// checkbox widget is a special case :-(\r\n\t\t\tif(elem.isInstanceOf && elem.isInstanceOf(CheckBox)){\r\n\t\t\t\tif(isSetter){\r\n\t\t\t\t\telem.set(\"value\", Boolean(value), !this.watching);\r\n\t\t\t\t\treturn this;\t// self\r\n\t\t\t\t}\r\n\t\t\t\treturn Boolean(elem.get(\"value\"));\t// Object\r\n\t\t\t}\r\n\r\n\t\t\t// all other elements\r\n\t\t\tif(isSetter){\r\n\t\t\t\telem.set(\"value\", value, !this.watching);\r\n\t\t\t\treturn this;\t// self\r\n\t\t\t}\r\n\t\t\treturn elem.get(\"value\");\t// Object\r\n\t\t},\r\n\r\n\t\tformPointValue: function(elem, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet or get a node context by name (using dojoAttachPoint).\r\n\t\t\t// elem: String|Object|Array\r\n\t\t\t//\t\tA node.\r\n\t\t\t// value: Object?\r\n\t\t\t//\t\tOptional. The value to set.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tFor a getter it returns the value, for a setter it returns\r\n\t\t\t//\t\tself. If the elem is not valid, null will be returned.\r\n\r\n\t\t\tif(elem && typeof elem == \"string\"){\r\n\t\t\t\telem = this[elem];\r\n\t\t\t}\r\n\r\n\t\t\tif(!elem || !elem.tagName || !elem.cloneNode){\r\n\t\t\t\treturn null;\t// Object\r\n\t\t\t}\r\n\r\n\t\t\tif(!domClass.contains(elem, \"dojoFormValue\")){\r\n\t\t\t\t// accessing the value of the attached point not marked with CSS class 'dojoFormValue'\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tif(arguments.length == 2 && value !== undefined){\r\n\t\t\t\t// setter\r\n\t\t\t\telem.innerHTML = value;\r\n\t\t\t\treturn this;\t// self\r\n\t\t\t}\r\n\t\t\t// getter\r\n\t\t\treturn elem.innerHTML;\t// String\r\n\t\t},\r\n\r\n\t\t// inspectors\r\n\r\n\t\tinspectFormWidgets: function(inspector, state, defaultValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun an inspector function on controlled widgets returning a result object.\r\n\t\t\t// inspector: Function\r\n\t\t\t//\t\tA function to be called on a widget. Takes three arguments: a name, a widget object\r\n\t\t\t//\t\tor an array of widget objects, and a supplied value. Runs in the context of\r\n\t\t\t//\t\tthe form manager. Returns a value that will be collected and returned as a state.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary --- only listed names will be processed.\r\n\t\t\t//\t\tIf an array, all names in the array will be processed with defaultValue.\r\n\t\t\t//\t\tIf omitted or null, all widgets will be processed with defaultValue.\r\n\t\t\t// defaultValue: Object?\r\n\t\t\t//\t\tOptional. The default state (true, if omitted).\r\n\r\n\t\t\tvar name, result = {};\r\n\r\n\t\t\tif(state){\r\n\t\t\t\tif(lang.isArray(state)){\r\n\t\t\t\t\tarray.forEach(state, function(name){\r\n\t\t\t\t\t\tif(name in this.formWidgets){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, this.formWidgets[name].widget, defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfor(name in state){\r\n\t\t\t\t\t\tif(name in this.formWidgets){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, this.formWidgets[name].widget, state[name]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(name in this.formWidgets){\r\n\t\t\t\t\tresult[name] = inspector.call(this, name, this.formWidgets[name].widget, defaultValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\t// Object\r\n\t\t},\r\n\r\n\t\tinspectAttachedPoints: function(inspector, state, defaultValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun an inspector function on \"dojoAttachPoint\" nodes returning a result object.\r\n\t\t\t// inspector: Function\r\n\t\t\t//\t\tA function to be called on a node. Takes three arguments: a name, a node or\r\n\t\t\t//\t\tan array of nodes, and a supplied value. Runs in the context of the form manager.\r\n\t\t\t//\t\tReturns a value that will be collected and returned as a state.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary --- only listed names will be processed.\r\n\t\t\t//\t\tIf an array, all names in the array will be processed with defaultValue.\r\n\t\t\t//\t\tIf omitted or null, all attached point nodes will be processed with defaultValue.\r\n\t\t\t// defaultValue: Object?\r\n\t\t\t//\t\tOptional. The default state (true, if omitted).\r\n\r\n\t\t\tvar name, elem, result = {};\r\n\r\n\t\t\tif(state){\r\n\t\t\t\tif(lang.isArray(state)){\r\n\t\t\t\t\tarray.forEach(state, function(name){\r\n\t\t\t\t\t\telem = this[name];\r\n\t\t\t\t\t\tif(elem && elem.tagName && elem.cloneNode){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, elem, defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfor(name in state){\r\n\t\t\t\t\t\telem = this[name];\r\n\t\t\t\t\t\tif(elem && elem.tagName && elem.cloneNode){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, elem, state[name]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(name in this){\r\n\t\t\t\t\tif(!(name in skipNames)){\r\n\t\t\t\t\t\telem = this[name];\r\n\t\t\t\t\t\tif(elem && elem.tagName && elem.cloneNode){\r\n\t\t\t\t\t\t\tresult[name] = inspector.call(this, name, elem, defaultValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\t// Object\r\n\t\t},\r\n\r\n\t\tinspect: function(inspector, state, defaultValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun an inspector function on controlled elements returning a result object.\r\n\t\t\t// inspector: Function\r\n\t\t\t//\t\tA function to be called on a widget, form element, and an attached node.\r\n\t\t\t//\t\tTakes three arguments: a name, a node (domNode in the case of widget) or\r\n\t\t\t//\t\tan array of such objects, and a supplied value. Runs in the context of\r\n\t\t\t//\t\tthe form manager. Returns a value that will be collected and returned as a state.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary --- only listed names will be processed.\r\n\t\t\t//\t\tIf an array, all names in the array will be processed with defaultValue.\r\n\t\t\t//\t\tIf omitted or null, all controlled elements will be processed with defaultValue.\r\n\t\t\t// defaultValue: Object?\r\n\t\t\t//\t\tOptional. The default state (true, if omitted).\r\n\r\n\t\t\tvar result = this.inspectFormWidgets(function(name, widget, value){\r\n\t\t\t\tif(lang.isArray(widget)){\r\n\t\t\t\t\treturn inspector.call(this, name, array.map(widget, function(w){ return w.domNode; }), value);\r\n\t\t\t\t}\r\n\t\t\t\treturn inspector.call(this, name, widget.domNode, value);\r\n\t\t\t}, state, defaultValue);\r\n\t\t\tif(this.inspectFormNodes){\r\n\t\t\t\tlang.mixin(result, this.inspectFormNodes(inspector, state, defaultValue));\r\n\t\t\t}\r\n\t\t\treturn lang.mixin(result, this.inspectAttachedPoints(inspector, state, defaultValue));\t// Object\r\n\t\t}\r\n\t});\r\n\r\n// These arguments can be specified for widgets which are used in forms.\r\n// Since any widget can be specified as sub widgets, mix it into the base\r\n// widget class.  (This is a hack, but it's effective.)\r\nlang.extend(Widget, {\r\n\tobserver: \"\"\r\n});\r\nreturn _Mixin;\r\n});\r\n"]}