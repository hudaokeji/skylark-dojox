{"version":3,"sources":["form/manager/_FormMixin.js"],"names":["define","lang","dojo","event","windowUtils","_Mixin","declare","aa","getObject","actionAdapter","name","action","method","encType","accept-charset","accept","target","startup","this","isForm","domNode","tagName","toLowerCase","connect","inherited","arguments","_onReset","evt","faux","returnValue","preventDefault","stopPropagation","currentTarget","onReset","reset","stop","inspectFormWidgets","_","widget","_onSubmit","onSubmit","isValid","submit","formWidgets","get","call","validate","didFocus","_hasBeenBlurred","valid","disabled","scrollIntoView","containerNode","focus"],"mappings":";;;;;;;AAAAA,QACC,kBACA,oBACA,mBACA,cACA,WACA,sBACE,SAASC,EAAMC,EAAMC,EAAOC,EAAaC,EAAQC,GACnD,IACCC,EADQN,EAAKO,UAAU,sBAAsB,GACrCC,cAET,OAAOH,EAAQ,gCAAiC,MAU/CI,KAAM,GACNC,OAAQ,GACRC,OAAQ,GACRC,QAAS,GACTC,iBAAkB,GAClBC,OAAQ,GACRC,OAAQ,GAERC,QAAS,WACRC,KAAKC,OAA+C,QAAtCD,KAAKE,QAAQC,QAAQC,cAChCJ,KAAKC,SACPD,KAAKK,QAAQL,KAAKE,QAAS,UAAW,YACtCF,KAAKK,QAAQL,KAAKE,QAAS,WAAY,cAExCF,KAAKM,UAAUC,YAKhBC,SAAU,SAASC,GAKlB,IAAIC,GACHC,aAAa,EACbC,eAAgB,WACbZ,KAAKW,aAAc,GAEtBE,gBAAiB,aAAcC,cAAeL,EAAIK,cAAehB,OAAQW,EAAIX,QAO9E,OAJ4B,IAAvBE,KAAKe,QAAQL,IAAoBA,EAAKC,aAC1CX,KAAKgB,QAEN/B,EAAMgC,KAAKR,IACJ,GAGRM,QAAS,WAMR,OAAO,GAGRC,MAAO,WAWN,OARAhB,KAAKkB,mBAAmB7B,EAAG,SAAS8B,EAAGC,GACnCA,EAAOJ,OACTI,EAAOJ,WAGNhB,KAAKC,QACPD,KAAKE,QAAQc,QAEPhB,MAGRqB,UAAW,SAASZ,IAIO,IAAvBT,KAAKsB,SAASb,IAChBxB,EAAMgC,KAAKR,IAIba,SAAU,WAST,OAAOtB,KAAKuB,WAGbC,OAAQ,WAGJxB,KAAKC,SACkB,IAApBD,KAAKsB,YACTtB,KAAKE,QAAQsB,UAKhBD,QAAS,WAGR,IAAI,IAAI/B,KAAQQ,KAAKyB,YAAY,CAChC,IAAIR,GAAO,EAMX,GALA5B,EAAG,SAAS8B,EAAGC,GACVA,EAAOM,IAAI,cAAeN,EAAOG,SAAYH,EAAOG,YACvDN,GAAO,KAENU,KAAK3B,KAAM,KAAMA,KAAKyB,YAAYjC,GAAM4B,QACxCH,EACF,OAAO,EAGT,OAAO,GAERW,SAAU,WAMT,IAEmBpC,EAFf+B,GAAU,EACbE,EAAczB,KAAKyB,YACnBI,GAAW,EAEZ,IAAIrC,KAAQiC,EACXpC,EAAG,SAAS8B,EAAGC,GAGdA,EAAOU,iBAAkB,EACzB,IAAIC,EAAQX,EAAOY,WAAaZ,EAAOQ,UAAYR,EAAOQ,WACtDG,GAAUF,IAEb3C,EAAY+C,eAAeb,EAAOc,eAAiBd,EAAOlB,SAC1DkB,EAAOe,QACPN,GAAW,GAEZN,EAAUA,GAAWQ,IACnBJ,KAAK3B,KAAM,KAAMyB,EAAYjC,GAAM4B,QAGvC,OAAOG","file":"../../../form/manager/_FormMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/window\",\r\n\t\"./_Mixin\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, dojo, event, windowUtils, _Mixin, declare){\r\n\tvar fm = lang.getObject(\"dojox.form.manager\", true),\r\n\t\taa = fm.actionAdapter;\r\n\r\n\treturn declare(\"dojox.form.manager._FormMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tForm manager's mixin for form-specific functionality.\r\n\t\t// description:\r\n\t\t//\t\tThis mixin adds automated \"onreset\", and \"onsubmit\" event processing\r\n\t\t//\t\tif we are based on a form node, defines onReset(), onSubmit(),\r\n\t\t//\t\treset(), submit(), and isValid() methods like dijit.form.Form.\r\n\t\t//\t\tIt should be used together with dojox.form.manager.Mixin.\r\n\r\n\t\t// HTML <FORM> attributes (if we are based on the form element)\r\n\t\tname: \"\",\r\n\t\taction: \"\",\r\n\t\tmethod: \"\",\r\n\t\tencType: \"\",\r\n\t\t\"accept-charset\": \"\",\r\n\t\taccept: \"\",\r\n\t\ttarget: \"\",\r\n\r\n\t\tstartup: function(){\r\n\t\t\tthis.isForm = this.domNode.tagName.toLowerCase() == \"form\";\r\n\t\t\tif(this.isForm){\r\n\t\t\t\tthis.connect(this.domNode, \"onreset\", \"_onReset\");\r\n\t\t\t\tthis.connect(this.domNode, \"onsubmit\", \"_onSubmit\");\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t// form-specific functionality\r\n\r\n\t\t_onReset: function(evt){\r\n\t\t\t// NOTE: this function is taken from dijit.form.Form, it works only\r\n\t\t\t// for form-based managers.\r\n\r\n\t\t\t// create fake event so we can know if preventDefault() is called\r\n\t\t\tvar faux = {\r\n\t\t\t\treturnValue: true, // the IE way\r\n\t\t\t\tpreventDefault: function(){  // not IE\r\n\t\t\t\t\t\t\tthis.returnValue = false;\r\n\t\t\t\t\t\t},\r\n\t\t\t\tstopPropagation: function(){}, currentTarget: evt.currentTarget, target: evt.target\r\n\t\t\t};\r\n\t\t\t// if return value is not exactly false, and haven't called preventDefault(), then reset\r\n\t\t\tif(!(this.onReset(faux) === false) && faux.returnValue){\r\n\t\t\t\tthis.reset();\r\n\t\t\t}\r\n\t\t\tevent.stop(evt);\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tonReset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when user resets the form. This method is intended\r\n\t\t\t//\t\tto be over-ridden. When the `reset` method is called\r\n\t\t\t//\t\tprogrammatically, the return value from `onReset` is used\r\n\t\t\t//\t\tto compute whether or not resetting should proceed\r\n\t\t\treturn true; // Boolean\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResets form widget values.\r\n\t\t\tthis.inspectFormWidgets(aa(function(_, widget){\r\n\t\t\t\tif(widget.reset){\r\n\t\t\t\t\twidget.reset();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t\tif(this.isForm){\r\n\t\t\t\tthis.domNode.reset();\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t_onSubmit: function(evt){\r\n\t\t\t// NOTE: this function is taken from dijit.formForm, it works only\r\n\t\t\t// for form-based managers.\r\n\r\n\t\t\tif(this.onSubmit(evt) === false){ // only exactly false stops submit\r\n\t\t\t\tevent.stop(evt);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonSubmit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when user submits the form. This method is\r\n\t\t\t//\t\tintended to be over-ridden, but by default it checks and\r\n\t\t\t//\t\treturns the validity of form elements. When the `submit`\r\n\t\t\t//\t\tmethod is called programmatically, the return value from\r\n\t\t\t//\t\t`onSubmit` is used to compute whether or not submission\r\n\t\t\t//\t\tshould proceed\r\n\r\n\t\t\treturn this.isValid(); // Boolean\r\n\t\t},\r\n\r\n\t\tsubmit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprogrammatically submit form if and only if the `onSubmit` returns true\r\n\t\t\tif(this.isForm){\r\n\t\t\t\tif(!(this.onSubmit() === false)){\r\n\t\t\t\t\tthis.domNode.submit();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tisValid: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMake sure that every widget that has a validator function returns true.\r\n\t\t\tfor(var name in this.formWidgets){\r\n\t\t\t\tvar stop = false;\r\n\t\t\t\taa(function(_, widget){\r\n\t\t\t\t\tif(!widget.get(\"disabled\") && widget.isValid && !widget.isValid()){\r\n\t\t\t\t\t\tstop = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}).call(this, null, this.formWidgets[name].widget);\r\n\t\t\t\tif(stop){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tvalidate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tvalidate() returns if the form is valid - same as isValid - \r\n\t\t\t//\t\tbut provides a few additional (ui-specific) features: it \r\n\t\t\t//\t\twill highlight any sub-widgets that are not valid it will \r\n\t\t\t//\t\tcall focus() on the first invalid sub-widget\r\n\t\t\tvar isValid = true,\r\n\t\t\t\tformWidgets = this.formWidgets,\r\n\t\t\t\tdidFocus = false, name;\r\n\r\n\t\t\tfor(name in formWidgets){\r\n\t\t\t\taa(function(_, widget){\r\n\t\t\t\t\t// Need to set this so that \"required\" widgets get their\r\n\t\t\t\t\t// state set.\r\n\t\t\t\t\twidget._hasBeenBlurred = true;\r\n\t\t\t\t\tvar valid = widget.disabled || !widget.validate || widget.validate();\r\n\t\t\t\t\tif(!valid && !didFocus){\r\n\t\t\t\t\t\t// Set focus of the first non-valid widget\r\n\t\t\t\t\t\twindowUtils.scrollIntoView(widget.containerNode || widget.domNode);\r\n\t\t\t\t\t\twidget.focus();\r\n\t\t\t\t\t\tdidFocus = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisValid = isValid && valid;\r\n\t\t\t\t}).call(this, null, formWidgets[name].widget);\r\n\t\t\t}\r\n\r\n\t\t\treturn isValid;\r\n\t\t}\r\n\t});\r\n});\r\n"]}