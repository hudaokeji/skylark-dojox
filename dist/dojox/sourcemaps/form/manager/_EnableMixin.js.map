{"version":3,"sources":["form/manager/_EnableMixin.js"],"names":["define","lang","dojo","domAttr","_Mixin","declare","fm","getObject","aa","actionAdapter","ia","inspectorAdapter","gatherEnableState","names","result","this","inspectFormWidgets","name","widget","get","inspectFormNodes","mixin","node","enable","state","defaultState","arguments","length","undefined","value","set","disable","oldState"],"mappings":";;;;;;;AAAAA,QACC,kBACA,oBACA,gBACA,WACA,sBACE,SAASC,EAAMC,EAAMC,EAASC,EAAQC,GACxC,IAAIC,EAAKL,EAAKM,UAAU,sBAAsB,GAC7CC,EAAKF,EAAGG,cACRC,EAAKJ,EAAGK,iBAET,OAAON,EAAQ,kCAAmC,MASjDO,kBAAmB,SAASC,GAQ3B,IAAIC,EAASC,KAAKC,mBAAmBN,EAAG,SAASO,EAAMC,GACtD,OAAQA,EAAOC,IAAI,cAChBN,GAQJ,OANGE,KAAKK,kBACPnB,EAAKoB,MAAMP,EAAQC,KAAKK,iBAAiBV,EAAG,SAASO,EAAMK,GAC1D,OAAQnB,EAAQgB,IAAIG,EAAM,cACvBT,IAGEC,GAGRS,OAAQ,SAASC,EAAOC,GAyBvB,OAdGC,UAAUC,OAAS,QAAsBC,IAAjBH,KAC1BA,GAAe,GAGhBV,KAAKC,mBAAmBR,EAAG,SAASS,EAAMC,EAAQW,GACjDX,EAAOY,IAAI,YAAaD,KACrBL,EAAOC,GAERV,KAAKK,kBACPL,KAAKK,iBAAiBZ,EAAG,SAASS,EAAMK,EAAMO,GAC7C1B,EAAQ2B,IAAIR,EAAM,YAAaO,KAC5BL,EAAOC,GAGLV,MAGRgB,QAAS,SAASP,GAQjB,IAAIQ,EAAWjB,KAAKH,oBAEpB,OADAG,KAAKQ,OAAOC,GAAO,GACZQ","file":"../../../form/manager/_EnableMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/dom-attr\",\r\n\t\"./_Mixin\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, dojo, domAttr, _Mixin, declare){\r\n\tvar fm = lang.getObject(\"dojox.form.manager\", true),\r\n\t\taa = fm.actionAdapter,\r\n\t\tia = fm.inspectorAdapter;\r\n\r\n\treturn declare(\"dojox.form.manager._EnableMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tForm manager's mixin for controlling enable/disable state of\r\n\t\t//\t\tform elements.\r\n\t\t// description:\r\n\t\t//\t\tThis mixin provides unified enable/disable functionality for\r\n\t\t//\t\tform widgets and form elements. It should be used together\r\n\t\t//\t\twith dojox.form.manager.Mixin.\r\n\r\n\t\tgatherEnableState: function(names){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGather enable state of all form elements and return as a dictionary.\r\n\t\t\t// names: Object?\r\n\t\t\t//\t\tIf it is an array, it is a list of names to be processed.\r\n\t\t\t//\t\tIf it is an object, dictionary keys are names to be processed.\r\n\t\t\t//\t\tIf it is omitted, all known form elements are to be processed.\r\n\r\n\t\t\tvar result = this.inspectFormWidgets(ia(function(name, widget){\r\n\t\t\t\treturn !widget.get(\"disabled\");\r\n\t\t\t}), names);\r\n\r\n\t\t\tif(this.inspectFormNodes){\r\n\t\t\t\tlang.mixin(result, this.inspectFormNodes(ia(function(name, node){\r\n\t\t\t\t\treturn !domAttr.get(node, \"disabled\");\r\n\t\t\t\t}), names));\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\t// Object\r\n\t\t},\r\n\r\n\t\tenable: function(state, defaultState){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEnable form controls according to the supplied state object.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary, the value is true\r\n\t\t\t//\t\tto enable and false to disable. If an array, all names in the\r\n\t\t\t//\t\tarray will be set to defaultState. If omitted, all form\r\n\t\t\t//\t\telements will be set to defaultState.\r\n\t\t\t// defaultState: Boolean\r\n\t\t\t//\t\tThe default state (true, if omitted).\r\n\r\n\t\t\tif(arguments.length < 2 || defaultState === undefined){\r\n\t\t\t\tdefaultState = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.inspectFormWidgets(aa(function(name, widget, value){\r\n\t\t\t\twidget.set(\"disabled\", !value);\r\n\t\t\t}), state, defaultState);\r\n\r\n\t\t\tif(this.inspectFormNodes){\r\n\t\t\t\tthis.inspectFormNodes(aa(function(name, node, value){\r\n\t\t\t\t\tdomAttr.set(node, \"disabled\", !value);\r\n\t\t\t\t}), state, defaultState);\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\t// self\r\n\t\t},\r\n\r\n\t\tdisable: function(state){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisable form controls according to the supplied state object\r\n\t\t\t//\t\treturning the previous state.\r\n\t\t\t// state: Object?\r\n\t\t\t//\t\tOptional. If a name-value dictionary, the value is true\r\n\t\t\t//\t\tto enable and false to disable. If an array, all names in the\r\n\t\t\t//\t\tarray will be disabled. If omitted, disables all.\r\n\t\t\tvar oldState = this.gatherEnableState();\r\n\t\t\tthis.enable(state, false);\r\n\t\t\treturn oldState;\t// Object\r\n\t\t}\r\n\t});\r\n});\r\n"]}