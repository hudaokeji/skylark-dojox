{"version":3,"sources":["form/MultiComboBox.js"],"names":["define","kernel","ValidationTextBox","ComboBoxMixin","declare","experimental","delimiter","_previousMatches","_setValueAttr","value","this","length","arguments","_addPreviousMatches","inherited","text","match","RegExp","_cleanupDelimiters","replace","_autoCompleteText","_startSearch","re"],"mappings":";;;;;;;AAAAA,QACC,oBACA,+BACA,2BACA,sBACE,SAASC,EAAQC,EAAmBC,EAAeC,GAGtD,OAFAH,EAAOI,aAAa,4BAEbD,EAAQ,4BAA6BF,EAAmBC,IAM9DG,UAAW,IAEXC,kBAAkB,EAElBC,cAAe,SAASC,GACpBC,KAAKJ,WAA6B,GAAhBG,EAAME,SAC1BF,EAAQA,EAAMC,KAAKJ,UAAU,IAC7BM,UAAU,GAAKF,KAAKG,oBAAoBJ,IAEzCC,KAAKI,UAAUF,YAGhBC,oBAAqB,SAAoBE,GAOxC,OANGL,KAAKH,mBACHQ,EAAKC,MAAM,IAAIC,OAAO,IAAIP,KAAKH,qBAClCQ,EAAOL,KAAKH,iBAAiBQ,GAE9BA,EAAOL,KAAKQ,mBAAmBH,IAEzBA,GAGRG,mBAAoB,SAAoBH,GAMvC,OALGL,KAAKJ,YAGPS,GADAA,GADAA,EAAOA,EAAKI,QAAQ,IAAIF,OAAO,OAAQ,MAC3BE,QAAQ,IAAIF,OAAO,MAAMP,KAAKJ,UAAU,OAAQ,KAChDa,QAAQ,IAAIF,OAAOP,KAAKJ,UAAU,KAAKI,KAAKJ,WAAYI,KAAKJ,YAEnES,GAGRK,kBAAmB,SAAoBL,GACtCH,UAAU,GAAKF,KAAKG,oBAAoBE,GACxCL,KAAKI,UAAUF,YAGhBS,aAAc,SAAoBN,GACjCA,EAAOL,KAAKQ,mBAAmBH,GAC/B,IAAIO,EAAK,IAAIL,OAAO,MAAMP,KAAKJ,UAAU,OAErCI,KAAKH,iBAAmBQ,EAAKC,MAAMM,MACtCV,UAAU,GAAKG,EAAKI,QAAQG,EAAI,KAEjCZ,KAAKI,UAAUF","file":"../../form/MultiComboBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dijit/form/ValidationTextBox\",\r\n\t\"dijit/form/ComboBoxMixin\",\r\n\t\"dojo/_base/declare\"\r\n], function(kernel, ValidationTextBox, ComboBoxMixin, declare){\r\nkernel.experimental(\"dojox.form.MultiComboBox\");\r\n\r\nreturn declare(\"dojox.form.MultiComboBox\", [ValidationTextBox, ComboBoxMixin],{\r\n\t// summary:\r\n\t//\t\tA ComboBox that accepts multiple inputs on a single line\r\n\r\n\t// delimiter: String\r\n\t//\t\tThe character to use to separate items in the ComboBox input\r\n\tdelimiter: \",\",\r\n\r\n\t_previousMatches: false,\r\n\r\n\t_setValueAttr: function(value){\r\n\t\tif(this.delimiter && value.length != 0){\r\n\t\t\tvalue = value+this.delimiter+\" \";\r\n\t\t\targuments[0] = this._addPreviousMatches(value);\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\t_addPreviousMatches: function(/*String*/ text){\r\n\t\tif(this._previousMatches){\r\n\t\t\tif(!text.match(new RegExp(\"^\"+this._previousMatches))){\r\n\t\t\t\ttext = this._previousMatches+text;\r\n\t\t\t}\r\n\t\t\ttext = this._cleanupDelimiters(text);\r\n\t\t}\r\n\t\treturn text; // String\r\n\t},\r\n\r\n\t_cleanupDelimiters: function(/*String*/ text){\r\n\t\tif(this.delimiter){\r\n\t\t\ttext = text.replace(new RegExp(\"  +\"), \" \");\r\n\t\t\ttext = text.replace(new RegExp(\"^ *\"+this.delimiter+\"* *\"), \"\");\r\n\t\t\ttext = text.replace(new RegExp(this.delimiter+\" *\"+this.delimiter), this.delimiter);\r\n\t\t}\r\n\t\treturn text;\r\n\t},\r\n\r\n\t_autoCompleteText: function(/*String*/ text){\r\n\t\targuments[0] = this._addPreviousMatches(text);\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\t_startSearch: function(/*String*/ text){\r\n\t\ttext = this._cleanupDelimiters(text);\r\n\t\tvar re = new RegExp(\"^.*\"+this.delimiter+\" *\");\r\n\r\n\t\tif((this._previousMatches = text.match(re))){\r\n\t\t\targuments[0] = text.replace(re, \"\");\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n});"]}