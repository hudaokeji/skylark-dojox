{"version":3,"sources":["form/TriStateCheckBox.js"],"names":["define","kernel","declare","array","lang","event","query","domAttr","template","Button","_ToggleButtonMixin","templateString","baseClass","type","states","_stateLabels","stateValue","_currentState","_stateType","readOnly","checked","_aria_attr","constructor","this","False","True","Mixed","stateValues","_fillContent","source","postCreate","set","stateLabelNode","inherited","arguments","startup","params","_setIconClassAttr","_setCheckedAttr","priorityChange","stateIndex","indexOf","_getStateType","focusNode","console","warn","setChecked","deprecated","_setStatesAttr","isArray","_set","isString","map","true","false","mixed","split","i","length","undefined","_setReadOnlyAttr","value","_setValueAttr","newValue","_created","_setValuesAttr","newValues","_getValueAttr","reset","_hasBeenBlurred","values","_onFocus","id","addClass","_onBlur","removeClass","mouseFocus","_onClick","e","disabled","stop","click","onClick","fixState","oldState","state","_onMouseDown"],"mappings":";;;;;;;AAAAA,QACC,oBACA,qBACA,mBACA,kBACA,mBACA,aACA,gBACA,8CACA,oBACA,gCACA,qBACE,SAASC,EAAQC,EAASC,EAAOC,EAAMC,EAAOC,EAAOC,EAASC,EAAUC,EAAQC,GAEnF,OAAOR,EAAQ,+BAAgCO,EAAQC,IAIrDC,eAAgBH,EAEhBI,UAAW,wBAKXC,KAAM,WAMNC,OAAQ,GAMPC,aAAc,KAKfC,WAAY,KAIZC,cAAe,EAKfC,WAAY,QAMZC,UAAU,EAIVC,QAAS,GAGTC,WAAY,eAEZC,YAAa,WAKZC,KAAKT,SAAU,EAAO,SAAS,GAC/BS,KAAKH,SAAU,EACfG,KAAKR,cACJS,MAAS,UACTC,KAAQ,UACRC,MAAS,WAEVH,KAAKI,aACJH,OAAS,EACTC,KAAQ,KACRC,MAAS,UAIXE,aAAc,SAAqBC,KAKnCC,WAAY,WACXvB,EAAQwB,IAAIR,KAAKS,eAAgB,YAAaT,KAAKR,aAAaQ,KAAKL,aACrEK,KAAKU,UAAUC,YAGhBC,QAAS,WACRZ,KAAKQ,IAAI,UAAWR,KAAKa,OAAOhB,SAAWG,KAAKT,OAAOS,KAAKN,gBAC5DV,EAAQwB,IAAIR,KAAKS,eAAgB,YAAaT,KAAKR,aAAaQ,KAAKL,aACrEK,KAAKU,UAAUC,YAIhBG,kBAAmB,KAEnBC,gBAAiB,SAA4BlB,EAAsBmB,GAUlE,IAAIC,EAAarC,EAAMsC,QAAQlB,KAAKT,OAAQM,GACzCoB,GAAc,GAChBjB,KAAKN,cAAgBuB,EACrBjB,KAAKL,WAAaK,KAAKmB,cAActB,GACrCb,EAAQwB,IAAIR,KAAKoB,UAAW,QAASpB,KAAKI,YAAYJ,KAAKL,aAC3DX,EAAQwB,IAAIR,KAAKS,eAAgB,YAAaT,KAAKR,aAAaQ,KAAKL,aACrEK,KAAKU,UAAUC,YAEfU,QAAQC,KAAK,mBAIfC,WAAY,SAA4B1B,GAGvCnB,EAAO8C,WAAW,cAAc3B,EAAQ,sCAAsCA,EAAQ,aAAc,GAAI,OACxGG,KAAKQ,IAAI,UAAWX,IAGrB4B,eAAgB,SAA0BlC,GACzC,GAAGV,EAAK6C,QAAQnC,GACfS,KAAK2B,KAAK,SAAUpC,QACf,GAAGV,EAAK+C,SAASrC,GAAQ,CAC9B,IAAIsC,GACHC,MAAQ,EACRC,OAAS,EACTC,MAAS,SAEVzC,EAASA,EAAO0C,MAAM,WACtB,IAAI,IAAIC,EAAI,EAAGA,EAAI3C,EAAO4C,OAAQD,IACjC3C,EAAO2C,QAAwBE,IAAnBP,EAAItC,EAAO2C,KAAoBL,EAAItC,EAAO2C,IAEvDlC,KAAK2B,KAAK,SAAUpC,KAItB8C,iBAAkB,SAAqBC,GACtCtC,KAAK2B,KAAK,WAAYW,GACtBtD,EAAQwB,IAAIR,KAAKoB,UAAW,WAAYkB,IAGzCC,cAAe,SAA4BC,EAAsBxB,GAY1C,iBAAZwB,GAAyB5D,EAAMsC,QAAQlB,KAAKT,OAAQiD,GAAY,IAC1D,IAAZA,IACFA,EAAW,MAEZxC,KAAKI,YAAkB,KAAIoC,EAC3BA,GAAW,GAETxC,KAAKyC,WACPzC,KAAKN,cAAgBd,EAAMsC,QAAQlB,KAAKT,OAAQiD,GAChDxC,KAAKQ,IAAI,UAAWgC,EAAUxB,GAC9BhC,EAAQwB,IAAIR,KAAKoB,UAAW,QAASpB,KAAKI,YAAYJ,KAAKL,eAI7D+C,eAAgB,SAAmBC,GAWlC3C,KAAKI,YAAkB,KAAIuC,EAAU,GAAKA,EAAU,GAAK3C,KAAKI,YAAkB,KAChFJ,KAAKI,YAAmB,MAAIuC,EAAU,GAAKA,EAAU,GAAK3C,KAAKI,YAAmB,OAGnFwC,cAAe,WAKd,OAAO5C,KAAKI,YAAYJ,KAAKL,aAG9BkD,MAAO,WACN7C,KAAK8C,iBAAkB,EACvB9C,KAAKQ,IAAI,SAAUR,KAAKa,OAAOtB,UAAW,EAAO,SAAS,IAC1DS,KAAKI,YAAcJ,KAAKa,OAAOT,cAC9BH,OAAU,EACVC,KAAS,KACTC,MAAU,SAEXH,KAAKQ,IAAI,SAAUR,KAAKa,OAAOkC,YAC/B/C,KAAKQ,IAAI,UAAWR,KAAKa,OAAOhB,SAAWG,KAAKT,OAAO,KAGxDyD,SAAU,WACNhD,KAAKiD,IACPlE,EAAM,cAAciB,KAAKiD,GAAG,MAAMC,SAAS,qBAE5ClD,KAAKU,UAAUC,YAGhBwC,QAAS,WACLnD,KAAKiD,IACPlE,EAAM,cAAciB,KAAKiD,GAAG,MAAMG,YAAY,qBAE/CpD,KAAKqD,YAAa,EAClBrD,KAAKU,UAAUC,YAGhB2C,SAAU,SAAmBC,GAI5B,OAAGvD,KAAKJ,UAAYI,KAAKwD,UACxB1E,EAAM2E,KAAKF,IACJ,IAERvD,KAAK0D,QACE1D,KAAK2D,QAAQJ,KAGrBG,MAAO,WAIH1D,KAAKN,eAAiBM,KAAKT,OAAO4C,OAAS,EAC7CnC,KAAKN,cAAgB,GAEK,GAAvBM,KAAKN,cACPM,KAAK4D,WAEL5D,KAAKN,gBAGP,IAAImE,EAAW7D,KAAKN,cACpBM,KAAKQ,IAAI,UAAWR,KAAKT,OAAOS,KAAKN,gBACrCM,KAAKN,cAAgBmE,EACrB7E,EAAQwB,IAAIR,KAAKS,eAAgB,YAAaT,KAAKR,aAAaQ,KAAKL,cAGtEiE,SAAU,WAGT5D,KAAKN,cAAgBM,KAAKT,OAAO4C,OAAS,GAG3ChB,cAAe,SAA4B2C,GAO1C,OAAOA,EAAkB,SAATA,EAAmB,QAAU,OAAU,SAGxDC,aAAc,WACb/D,KAAKqD,YAAa","file":"../../form/TriStateCheckBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/array\", // array.indexOf\r\n\t\"dojo/_base/lang\", // lang.isArray, lang.isString\r\n\t\"dojo/_base/event\", // event.stop\r\n\t\"dojo/query\", // query()\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/text!./resources/TriStateCheckBox.html\",\r\n\t\"dijit/form/Button\",\r\n\t\"dijit/form/_ToggleButtonMixin\",\r\n\t\"dojo/NodeList-dom\" // NodeList.addClass/removeClass\r\n], function(kernel, declare, array, lang, event, query, domAttr, template, Button, _ToggleButtonMixin){\r\n\r\nreturn declare(\"dojox.form.TriStateCheckBox\", [Button, _ToggleButtonMixin], {\r\n\t// summary:\r\n\t//\t\tCheckbox with three states\r\n\t\r\n\t\ttemplateString: template,\r\n\r\n\t\tbaseClass: \"dojoxTriStateCheckBox\",\r\n\r\n\t\t// type: [private] String\r\n\t\t//\t\ttype attribute on `<input>` node.\r\n\t\t//\t\tOverrides `dijit/form/Button.type`.  Users should not change this value.\r\n\t\ttype: \"checkbox\",\r\n\r\n\t\t// states: Array\r\n\t\t//\t\tStates of TriStateCheckBox.\r\n\t\t//\t\tThe value of This.checked should be one of these three states:\r\n\t\t//\t\t[false, true, \"mixed\"]\r\n\t\tstates: \"\",\r\n\r\n\t\t// _stateLabels: Object\r\n\t\t//\t\tThese characters are used to replace the image to show\r\n\t\t//\t\tcurrent state of TriStateCheckBox in high contrast mode. This is an associate array of\r\n\t\t//      states with their corresponding replacing characters. State can either be \"False\", \"True\" or \"Mixed\".\r\n\t\t _stateLabels: null,\r\n\r\n\t\t// stateValues: Object\r\n\t\t//\t\tThe values of the TriStateCheckBox in corresponding states. This is an associate array of\r\n\t\t//      states with their corresponding values. State can either be \"False\", \"True\" or \"Mixed\".\r\n\t\tstateValue: null,\r\n\r\n\t\t// _currentState: Integer\r\n\t\t//\t\tThe current state of the TriStateCheckBox\r\n\t\t_currentState: 0,\r\n\r\n\t\t// _stateType: String\r\n\t\t//\t\tThe current state type of the TriStateCheckBox\r\n\t\t//\t\tCould be \"False\", \"True\" or \"Mixed\"\r\n\t\t_stateType: \"False\",\r\n\r\n\t\t// readOnly: Boolean\r\n\t\t//\t\tShould this widget respond to user input?\r\n\t\t//\t\tIn markup, this is specified as \"readOnly\".\r\n\t\t//\t\tSimilar to disabled except readOnly form values are submitted.\r\n\t\treadOnly: false,\r\n\r\n\t\t// checked: Boolean|String\r\n\t\t//\t\tCurrent check state of the check box.\r\n\t\tchecked: \"\",\r\n\t\t\r\n\t\t// aria-pressed for toggle buttons, and aria-checked for checkboxes\r\n\t\t_aria_attr: \"aria-checked\",\r\n\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRuns on widget initialization to setup arrays etc.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.states = [false, \"mixed\", true];\r\n\t\t\tthis.checked = false;\r\n\t\t\tthis._stateLabels = {\r\n\t\t\t\t\"False\": '&#9633;',\r\n\t\t\t\t\"True\": '&#8730;',\r\n\t\t\t\t\"Mixed\": '&#9632;'\r\n\t\t\t};\r\n\t\t\tthis.stateValues = {\r\n\t\t\t\t\"False\": false,\r\n\t\t\t\t\"True\": \"on\",\r\n\t\t\t\t\"Mixed\": \"mixed\"\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t_fillContent: function(/*DomNode*/ source){\r\n\t\t\t// Override Button::_fillContent() since it doesn't make sense for CheckBox,\r\n\t\t\t// since CheckBox doesn't even have a container\r\n\t\t},\r\n\t\t\r\n\t\tpostCreate: function(){\r\n\t\t\tdomAttr.set(this.stateLabelNode, 'innerHTML', this._stateLabels[this._stateType]);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\t\t\r\n\t\tstartup: function(){\r\n\t\t\tthis.set(\"checked\", this.params.checked || this.states[this._currentState]);\r\n\t\t\tdomAttr.set(this.stateLabelNode, 'innerHTML', this._stateLabels[this._stateType]);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\t\t\r\n\t\t// Override behavior from Button, since we don't have an iconNode\r\n\t\t_setIconClassAttr: null,\r\n\t\t\r\n\t\t_setCheckedAttr: function(/*String|Boolean*/ checked, /*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for checked = attribute to constructor, and also calls to\r\n\t\t\t//\t\tset('checked', val).\r\n\t\t\t// checked:\r\n\t\t\t//\t\ttrue, false or 'mixed'\r\n\t\t\t// description:\r\n\t\t\t//\t\tControls the state of the TriStateCheckBox. Set this.checked,\r\n\t\t\t//\t\tthis._currentState, value attribute of the `<input type=checkbox>`\r\n\t\t\t//\t\taccording to the value of 'checked'.\t\t\t\r\n\t\t\tvar stateIndex = array.indexOf(this.states, checked), changed = false;\r\n\t\t\tif(stateIndex >= 0){\r\n\t\t\t\tthis._currentState = stateIndex;\r\n\t\t\t\tthis._stateType = this._getStateType(checked);\r\n\t\t\t\tdomAttr.set(this.focusNode, \"value\", this.stateValues[this._stateType]);\r\n\t\t\t\tdomAttr.set(this.stateLabelNode, 'innerHTML', this._stateLabels[this._stateType]);\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}else{\r\n\t\t\t\tconsole.warn(\"Invalid state!\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetChecked: function(/*String|Boolean*/ checked){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use set('checked', true/false) instead.\r\n\t\t\tkernel.deprecated(\"setChecked(\"+checked+\") is deprecated. Use set('checked',\"+checked+\") instead.\", \"\", \"2.0\");\r\n\t\t\tthis.set('checked', checked);\r\n\t\t},\r\n\r\n\t\t_setStatesAttr: function(/*Array|String*/ states){\r\n\t\t\tif(lang.isArray(states)){\r\n\t\t\t\tthis._set(\"states\", states);\r\n\t\t\t}else if(lang.isString(states)){\r\n\t\t\t\tvar map = {\r\n\t\t\t\t\t\"true\": true,\r\n\t\t\t\t\t\"false\": false,\r\n\t\t\t\t\t\"mixed\": \"mixed\"\r\n\t\t\t\t};\r\n\t\t\t\tstates = states.split(/\\s*,\\s*/);\r\n\t\t\t\tfor(var i = 0; i < states.length; i++){\r\n\t\t\t\t\tstates[i] = map[states[i]] !== undefined ? map[states[i]] : false;\r\n\t\t\t\t}\r\n\t\t\t\tthis._set(\"states\", states);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_setReadOnlyAttr: function(/*Boolean*/ value){\r\n\t\t\tthis._set(\"readOnly\", value);\r\n\t\t\tdomAttr.set(this.focusNode, \"readOnly\", value);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String|Boolean*/ newValue, /*Boolean*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for value = attribute to constructor, and also calls to\r\n\t\t\t//\t\tset('value', val).\r\n\t\t\t// description:\r\n\t\t\t//\t\tDuring initialization, just saves as attribute to the `<input type=checkbox>`.\r\n\t\t\t//\r\n\t\t\t//\t\tAfter initialization,\r\n\t\t\t//\t\twhen passed a boolean or the string 'mixed', controls the state of the\r\n\t\t\t//\t\tTriStateCheckBox.\r\n\t\t\t//\t\tIf passed a string except 'mixed', changes the value attribute of the\r\n\t\t\t//\t\tTriStateCheckBox. Sets the state of the TriStateCheckBox to checked.\r\n\t\t\tif(typeof newValue == \"string\" && (array.indexOf(this.states, newValue) < 0)){\r\n\t\t\t\tif(newValue == \"\"){\r\n\t\t\t\t\tnewValue = \"on\";\r\n\t\t\t\t}\r\n\t\t\t\tthis.stateValues[\"True\"] = newValue;\r\n\t\t\t\tnewValue = true;\r\n\t\t\t}\r\n\t\t\tif(this._created){\r\n\t\t\t\tthis._currentState = array.indexOf(this.states, newValue);\r\n\t\t\t\tthis.set('checked', newValue, priorityChange);\r\n\t\t\t\tdomAttr.set(this.focusNode, \"value\", this.stateValues[this._stateType]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setValuesAttr: function(/*Array*/ newValues){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for values = attribute to constructor, and also calls to\r\n\t\t\t//\t\tset('values', val).\r\n\t\t\t// newValues:\r\n\t\t\t//\t\tIf the length of newValues is 1, it will replace the value of\r\n\t\t\t//\t\tthe TriStateCheckBox in true state. Otherwise, the values of\r\n\t\t\t//\t\tthe TriStateCheckBox in true state and 'mixed' state will be\r\n\t\t\t//\t\treplaced by the first two values in newValues.\r\n\t\t\t// description:\r\n\t\t\t//\t\tChange the value of the TriStateCheckBox in 'mixed' and true states.\r\n\t\t\tthis.stateValues[\"True\"] = newValues[0] ? newValues[0] : this.stateValues[\"True\"];\r\n\t\t\tthis.stateValues[\"Mixed\"] = newValues[1] ? newValues[1] : this.stateValues[\"Mixed\"];\r\n\t\t},\r\n\r\n\t\t_getValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so get('value') works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tReturns value according to current state of the TriStateCheckBox.\r\n\t\t\treturn this.stateValues[this._stateType];\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\tthis._hasBeenBlurred = false;\r\n\t\t\tthis.set(\"states\", this.params.states || [false, \"mixed\", true]);\r\n\t\t\tthis.stateValues = this.params.stateValues || {\r\n\t\t\t\t\"False\" : false,\r\n\t\t\t\t\"True\" : \"on\",\r\n\t\t\t\t\"Mixed\" : \"mixed\"\r\n\t\t\t};\r\n\t\t\tthis.set(\"values\", this.params.values || []);\r\n\t\t\tthis.set('checked', this.params.checked || this.states[0]);\r\n\t\t},\r\n\r\n\t\t_onFocus: function(){\r\n\t\t\tif(this.id){\r\n\t\t\t\tquery(\"label[for='\"+this.id+\"']\").addClass(\"dijitFocusedLabel\");\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_onBlur: function(){\r\n\t\t\tif(this.id){\r\n\t\t\t\tquery(\"label[for='\"+this.id+\"']\").removeClass(\"dijitFocusedLabel\");\r\n\t\t\t}\r\n\t\t\tthis.mouseFocus = false;\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_onClick: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to handle click actions - need to check\r\n\t\t\t//\t\treadOnly and disabled\r\n\t\t\tif(this.readOnly || this.disabled){\r\n\t\t\t\tevent.stop(e);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.click();\r\n\t\t\treturn this.onClick(e); // user click actions\r\n\t\t},\r\n\r\n\t\tclick: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEmulate a click on the check box, but will not trigger the\r\n\t\t\t//\t\tonClick method.\r\n\t\t\tif(this._currentState >= this.states.length - 1){\r\n\t\t\t\tthis._currentState = 0;\r\n\t\t\t}else{\r\n\t\t\t\tif(this._currentState == -1){\r\n\t\t\t\t\tthis.fixState();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._currentState++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar oldState = this._currentState;\r\n\t\t\tthis.set(\"checked\", this.states[this._currentState]);\r\n\t\t\tthis._currentState = oldState;\r\n\t\t\tdomAttr.set(this.stateLabelNode, 'innerHTML', this._stateLabels[this._stateType]);\r\n\t\t},\r\n\t\t\r\n\t\tfixState: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFix _currentState property if it's out of bound.\r\n\t\t\tthis._currentState = this.states.length - 1;\r\n\t\t},\r\n\t\t\r\n\t\t_getStateType: function(/*String|Boolean*/ state){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to return the type of a certain state:\r\n\t\t\t//\r\n\t\t\t//\t\t- false: False\r\n\t\t\t//\t\t- true: True\r\n\t\t\t//\t\t- \"mixed\": Mixed\r\n\t\t\treturn state ? (state == \"mixed\" ? \"Mixed\" : \"True\") : \"False\";\r\n\t\t},\r\n\t\t\r\n\t\t_onMouseDown: function(){\r\n\t\t\tthis.mouseFocus = true;\r\n\t\t}\r\n\t});\r\n\r\n});\r\n"]}