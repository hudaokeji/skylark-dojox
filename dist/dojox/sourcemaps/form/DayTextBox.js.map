{"version":3,"sources":["form/DayTextBox.js"],"names":["define","kernel","lang","DailyCalendar","TextBox","DateTextBox","declare","experimental","popupClass","parse","displayVal","format","value","getDate","validator","num","Number","isInt","test","String","_setValueAttr","priorityChange","formattedValue","prototype","call","this","openDropDown","inherited","arguments","dropDown","onValueSelected","hitch","focus","setTimeout"],"mappings":";;;;;;;AAAAA,QACC,oBACA,kBACA,6BACA,qBACA,gBACA,sBACG,SAASC,EAAQC,EAAMC,EAAeC,EAASC,EAAaC,GAE/D,OADCL,EAAOM,aAAa,yBACdD,EAAQ,wBAAyBD,GAOtCG,WAAYL,EAEZM,MAAO,SAASC,GACf,OAAOA,GAGRC,OAAQ,SAASC,GAChB,OAAOA,EAAMC,QAAUD,EAAMC,UAAYD,GAE1CE,UAAW,SAASF,GACnB,IAAIG,EAAMC,OAAOJ,GACbK,EAAQ,cAAcC,KAAKC,OAAOP,IACtC,MAAgB,IAATA,GAAwB,MAATA,GAAkBK,GAASF,GAAO,GAAKA,GAAO,IAGrEK,cAAe,SAASR,EAAOS,EAAgBC,GAC3CV,GACCA,EAAMC,UACRD,EAAQA,EAAMC,WAGhBT,EAAQmB,UAAUH,cAAcI,KAAKC,KAAMb,EAAOS,EAAgBC,IAGnEI,aAAc,WACbD,KAAKE,UAAUC,WAEfH,KAAKI,SAASC,gBAAkB5B,EAAK6B,MAAMN,KAAM,SAASb,GACzDa,KAAKO,QACLC,WAAW/B,EAAK6B,MAAMN,KAAM,iBAAkB,GAE9CrB,EAAQmB,UAAUH,cAAcI,KAAKC,KAAMN,OAAOP,EAAMC,YAAY,EAAMM,OAAOP,EAAMC","file":"../../form/DayTextBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojox/widget/DailyCalendar\",\r\n\t\"dijit/form/TextBox\",\r\n\t\"./DateTextBox\",\r\n\t\"dojo/_base/declare\"\r\n\t], function(kernel, lang, DailyCalendar, TextBox, DateTextBox, declare){\r\n\t\tkernel.experimental(\"dojox/form/DayTextBox\");\r\n\treturn declare(\"dojox.form.DayTextBox\", DateTextBox,\r\n\t\t{\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA validating, serializable, range-bound date text box with a popup calendar that contains just months.\r\n\r\n\t\t\t// popupClass: String\r\n\t\t\t//\t\tThe popup widget to use. In this case, a calendar with just a Month view.\r\n\t\t\tpopupClass: DailyCalendar,\r\n\r\n\t\t\tparse: function(displayVal){\r\n\t\t\t\treturn displayVal;\r\n\t\t\t},\r\n\r\n\t\t\tformat: function(value){\r\n\t\t\t\treturn value.getDate ? value.getDate() : value;\r\n\t\t\t},\r\n\t\t\tvalidator: function(value){\r\n\t\t\t\tvar num = Number(value);\r\n\t\t\t\tvar isInt = /(^-?\\d\\d*$)/.test(String(value));\r\n\t\t\t\treturn value == \"\" || value == null || (isInt && num >= 1 && num <= 31);\r\n\t\t\t},\r\n\r\n\t\t\t_setValueAttr: function(value, priorityChange, formattedValue){\r\n\t\t\t\tif(value){\r\n\t\t\t\t\tif(value.getDate){\r\n\t\t\t\t\t\tvalue = value.getDate();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tTextBox.prototype._setValueAttr.call(this, value, priorityChange, formattedValue);\r\n\t\t\t},\r\n\r\n\t\t\topenDropDown: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t\tthis.dropDown.onValueSelected = lang.hitch(this, function(value){\r\n\t\t\t\t\tthis.focus(); // focus the textbox before the popup closes to avoid reopening the popup\r\n\t\t\t\t\tsetTimeout(lang.hitch(this, \"closeDropDown\"), 1); // allow focus time to take\r\n\r\n\t\t\t\t\tTextBox.prototype._setValueAttr.call(this, String(value.getDate()), true, String(value.getDate()));\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n});\r\n"]}