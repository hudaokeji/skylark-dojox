{"version":3,"sources":["form/Rating.js"],"names":["define","declare","lang","domAttr","domClass","mouse","on","string","query","FormWidget","templateString","numStars","value","buildRendering","params","rendered","i","this","substitute","stars","inherited","arguments","postCreate","_renderStars","own","list","selector","hitch","leave","_onMouse","evt","hoverValue","get","target","onMouseOver","hover","domNode","forEach","star","remove","add","onStarClick","newVal","setAttribute","onChange","key","set","_setValueAttr","val","focusNode","_set"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,gBACA,iBACA,aACA,UACA,cACA,aACA,0BACE,SAASC,EAASC,EAAMC,EAASC,EAAUC,EAAOC,EAAIC,EAAQC,EAAOC,GAGvE,OAAOR,EAAQ,oBAAqBQ,GAUnCC,eAAgB,KAIhBC,SAAU,EAIVC,MAAO,EAEPC,eAAgB,SAAoBC,GAYnC,IANA,IAKIC,EAAW,GACPC,EAAI,EAAGA,EAAIC,KAAKN,SAAUK,IACjCD,GAAYR,EAAOW,WAHN,kEAG2BN,MAAMI,EAAI,IAEnDC,KAAKP,eAAiBH,EAAOW,WATnB,qLASoCC,MAAMJ,IAEpDE,KAAKG,UAAUC,YAGhBC,WAAY,WACXL,KAAKG,UAAUC,WACfJ,KAAKM,aAAaN,KAAKL,OACvBK,KAAKO,IAEJlB,EAAGW,KAAKQ,KAAMnB,EAAGoB,SAAS,mBAAoB,aAAcxB,EAAKyB,MAAMV,KAAM,aAC7EX,EAAGW,KAAKQ,KAAMnB,EAAGoB,SAAS,mBAAoB,SAAUxB,EAAKyB,MAAMV,KAAM,gBACzEX,EAAGW,KAAKQ,KAAMpB,EAAMuB,MAAO1B,EAAKyB,MAAMV,KAAM,WAE3CA,KAAKM,aAAaN,KAAKL,YAK1BiB,SAAU,SAASC,GAGlB,IAAIC,GAAc5B,EAAQ6B,IAAIF,EAAIG,OAAQ,SAC1ChB,KAAKM,aAAaQ,GAAY,GAC9Bd,KAAKiB,YAAYJ,EAAKC,IAGvBR,aAAc,SAASX,EAAOuB,GAG7B3B,EAAM,mBAAoBS,KAAKmB,SAASC,QAAQ,SAASC,EAAMtB,GAC3DA,EAAI,EAAIJ,GACVR,EAASmC,OAAOD,EAAM,wBACtBlC,EAASmC,OAAOD,EAAM,4BAEtBlC,EAASmC,OAAOD,EAAM,mBAAqBH,EAAQ,UAAY,UAC/D/B,EAASoC,IAAIF,EAAM,mBAAqBH,EAAQ,QAAU,gBAK7DM,YAAa,SAAmBX,GAK/B,IAAIY,GAAUvC,EAAQ6B,IAAIF,EAAIG,OAAQ,SACtChB,KAAK0B,aAAa,QAASD,GAAUzB,KAAKL,MAAQ,EAAI8B,GACtDzB,KAAKM,aAAaN,KAAKL,OACvBK,KAAK2B,SAAS3B,KAAKL,QAGpBsB,YAAa,aAKbS,aAAc,SAAoBE,EAAgBjC,GAGjDK,KAAK6B,IAAID,EAAKjC,IAGfmC,cAAe,SAASC,GACvB/B,KAAKgC,UAAUrC,MAAQoC,EACvB/B,KAAKiC,KAAK,QAASF,GACnB/B,KAAKM,aAAayB,GAClB/B,KAAK2B,SAASI","file":"../../form/Rating.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/mouse\",\r\n\t\"dojo/on\",\r\n\t\"dojo/string\",\r\n\t\"dojo/query\",\r\n\t\"dijit/form/_FormWidget\"\r\n], function(declare, lang, domAttr, domClass, mouse, on, string, query, FormWidget){\r\n\r\n\r\n\treturn declare(\"dojox.form.Rating\", FormWidget, {\r\n\t\t// summary:\r\n\t\t//\t\tA widget for rating using stars.\r\n\r\n\t\t/*=====\r\n\t\t// required: Boolean\r\n\t\t//\t\tTODO: Can be true or false, default is false.\r\n\t\trequired: false,\r\n\t\t=====*/\r\n\r\n\t\ttemplateString: null,\r\n\r\n\t\t// numStars: Integer|Float\r\n\t\t//\t\tThe number of stars to show, default is 3.\r\n\t\tnumStars: 3,\r\n\r\n\t\t// value: Integer|Float\r\n\t\t//\t\tThe current value of the Rating\r\n\t\tvalue: 0,\r\n\r\n\t\tbuildRendering: function(/*Object*/ params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tBuild the templateString. The number of stars is given by this.numStars,\r\n\t\t\t//\t\twhich is normally an attribute to the widget node.\r\n\r\n\t\t\t// The hidden value node is attached as \"focusNode\" because tabIndex, id, etc. are getting mapped there.\r\n\t\t\tvar tpl = '<div dojoAttachPoint=\"domNode\" class=\"dojoxRating dijitInline\">' +\r\n\t\t\t\t'<input type=\"hidden\" value=\"0\" dojoAttachPoint=\"focusNode\" /><ul data-dojo-attach-point=\"list\">${stars}</ul>' +\r\n\t\t\t\t'</div>';\r\n\t\t\t// The value-attribute is used to \"read\" the value for processing in the widget class\r\n\t\t\tvar starTpl = '<li class=\"dojoxRatingStar dijitInline\" value=\"${value}\"></li>';\r\n\t\t\tvar rendered = \"\";\r\n\t\t\tfor(var i = 0; i < this.numStars; i++){\r\n\t\t\t\trendered += string.substitute(starTpl, {value:i + 1});\r\n\t\t\t}\r\n\t\t\tthis.templateString = string.substitute(tpl, {stars:rendered});\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._renderStars(this.value);\r\n\t\t\tthis.own(\r\n\t\t\t\t// Fire when mouse is moved over one of the stars.\r\n\t\t\t\ton(this.list, on.selector(\".dojoxRatingStar\", \"mouseover\"), lang.hitch(this, \"_onMouse\")),\r\n\t\t\t\ton(this.list, on.selector(\".dojoxRatingStar\", \"click\"), lang.hitch(this, \"onStarClick\")),\r\n\t\t\t\ton(this.list, mouse.leave, lang.hitch(this, function(){\r\n\t\t\t\t\t// go from hover display back to dormant display\r\n\t\t\t\t\tthis._renderStars(this.value);\r\n\t\t\t\t}))\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\t_onMouse: function(evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when mouse is moved over one of the stars\r\n\t\t\tvar hoverValue = +domAttr.get(evt.target, \"value\");\r\n\t\t\tthis._renderStars(hoverValue, true);\r\n\t\t\tthis.onMouseOver(evt, hoverValue);\r\n\t\t},\r\n\r\n\t\t_renderStars: function(value, hover){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender the stars depending on the value.\r\n\t\t\tquery(\".dojoxRatingStar\", this.domNode).forEach(function(star, i){\r\n\t\t\t\tif(i + 1 > value){\r\n\t\t\t\t\tdomClass.remove(star, \"dojoxRatingStarHover\");\r\n\t\t\t\t\tdomClass.remove(star, \"dojoxRatingStarChecked\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdomClass.remove(star, \"dojoxRatingStar\" + (hover ? \"Checked\" : \"Hover\"));\r\n\t\t\t\t\tdomClass.add(star, \"dojoxRatingStar\" + (hover ? \"Hover\" : \"Checked\"));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tonStarClick: function(/*Event*/ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect on this method to get noticed when a star was clicked.\r\n\t\t\t// example:\r\n\t\t\t//\t|\tconnect(widget, \"onStarClick\", function(event){ ... })\r\n\t\t\tvar newVal = +domAttr.get(evt.target, \"value\");\r\n\t\t\tthis.setAttribute(\"value\", newVal == this.value ? 0 : newVal);\r\n\t\t\tthis._renderStars(this.value);\r\n\t\t\tthis.onChange(this.value); // Do I have to call this by hand?\r\n\t\t},\r\n\r\n\t\tonMouseOver: function(/*=====evt, value=====*/ ){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect here, the value is passed to this function as the second parameter!\r\n\t\t},\r\n\r\n\t\tsetAttribute: function(/*String*/ key, /*Number*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.   Use set(\"value\", ...) instead.\r\n\t\t\tthis.set(key, value);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(val){\r\n\t\t\tthis.focusNode.value = val;\t\t// reflect the value in our hidden field, for form submission\r\n\t\t\tthis._set(\"value\", val);\r\n\t\t\tthis._renderStars(val);\r\n\t\t\tthis.onChange(val); // Do I really have to call this by hand? :-(\r\n\t\t}\r\n\t});\r\n});\r\n"]}