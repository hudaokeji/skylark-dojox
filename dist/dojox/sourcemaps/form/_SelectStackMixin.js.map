{"version":3,"sources":["form/_SelectStackMixin.js"],"names":["define","lang","array","manager","connect","declare","stackId","stackPrefix","_paneIdFromOption","oVal","this","_optionValFromPane","id","sp","indexOf","substring","length","_togglePane","pane","shown","undefined","_shown","widgets","filter","getDescendants","savedStates","_savedStates","forEach","w","state","set","disabled","_connectTitle","value","fx","hitch","title","updateOption","label","_setTitleAttr","attr","val","arguments","onAddChild","insertIndex","_panes","v","addOption","onShow","onHide","_setValueAttr","inherited","name","_savedValue","onRemoveChild","removeOption","onSelectChild","onStartup","info","selPane","selected","map","children","c","toAdd","i","_this","stack","byId","sel","disconnect","postMixInProperties","postCreate","_subscriptions","subscribe","_started","getChildren","selectedChildWidget","destroy","unsubscribe","_handleSelfOnChange","s","_transition","selectChild"],"mappings":"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","file":"../../form/_SelectStackMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dijit/_base/manager\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, array, manager, connect, declare){\r\n\r\nreturn declare(\"dojox.form._SelectStackMixin\", null, {\r\n\t// summary:\r\n\t//\t\tMix this class in to a dijit.form._FormSelectWidget in order to\r\n\t//\t\tprovide support for \"selectable\" multiforms.  The widget is pointed\r\n\t//\t\tto a dijit.layout.StackContainer and will handle displaying and\r\n\t//\t\tsubmitting the values of only the appropriate pane.\r\n\t//\r\n\t//\t\tThe options for this widget will be automatically set - based on\r\n\t//\t\tthe panes that are in the stack container.  The \"title\" attribute of\r\n\t//\t\tthe pane will be used for the display of the option.  The \"id\" attribute\r\n\t//\t\tof the pane will be used as the value of the option.  In order to\r\n\t//\t\tavoid running into unique ID constraint issues, a stackPrefix mechanism\r\n\t//\t\tis provided.\r\n\r\n\t// stackId: String\r\n\t//\t\tThe id of the stack that this widget is supposed to control\r\n\tstackId: \"\",\r\n\r\n\t// stackPrefix: String\r\n\t//\t\tA prefix to remove from our stack pane ids when setting our options.\r\n\t//\t\tThis exists so that we won't run into unique ID constraints.  For\r\n\t//\t\texample, if stackPrefix is set to \"foo_\", and there are three panes\r\n\t//\t\tin our stack with ids of \"foo_a\", \"foo_b\", and \"foo_c\", then the values\r\n\t//\t\tof the options created for the stack controller widget will be \"a\",\r\n\t//\t\t\"b\", and \"c\".  This allows you to have multiple select stack widgets\r\n\t//\t\twith the same values - without having to have the panes require the\r\n\t//\t\tsame ids.\r\n\tstackPrefix: \"\",\r\n\r\n\t_paneIdFromOption: function(/*String*/ oVal){\r\n\t\t// summary:\r\n\t\t//\t\tGets the pane ID given an option value\r\n\t\treturn (this.stackPrefix || \"\") + oVal; // String\r\n\t},\r\n\r\n\t_optionValFromPane: function(/*String*/ id){\r\n\t\t// summary:\r\n\t\t//\t\tGets the option value given a pane ID\r\n\t\tvar sp = this.stackPrefix;\r\n\t\tif(sp && id.indexOf(sp) === 0){\r\n\t\t\treturn id.substring(sp.length); // String\r\n\t\t}\r\n\t\treturn id; // String\r\n\t},\r\n\r\n\t_togglePane: function(/*dijit._Widget*/ pane, /*Boolean*/ shown){\r\n\t\t// summary:\r\n\t\t//\t\tcalled when a pane is either shown or hidden (so that\r\n\t\t//\t\twe can toggle the widgets on it)\r\n\r\n\t\tif(pane._shown != undefined && pane._shown == shown){ return; }\r\n\t\tvar widgets = array.filter(pane.getDescendants(), \"return item.name;\");\r\n\t\tif(!shown){\r\n\t\t\t// We are hiding - save the current state and then disable them\r\n\t\t\tsavedStates = {};\r\n\t\t\tarray.forEach(widgets, function(w){\r\n\t\t\t\tsavedStates[w.id] = w.disabled;\r\n\t\t\t\tw.set(\"disabled\", true);\r\n\t\t\t});\r\n\t\t\tpane._savedStates = savedStates;\r\n\t\t}else{\r\n\t\t\t// We are showing - restore our saved states\r\n\t\t\tvar savedStates = pane._savedStates||{};\r\n\t\t\tarray.forEach(widgets, function(w){\r\n\t\t\t\tvar state = savedStates[w.id];\r\n\t\t\t\tif(state == undefined){\r\n\t\t\t\t\tstate = false;\r\n\t\t\t\t}\r\n\t\t\t\tw.set(\"disabled\", state);\r\n\t\t\t});\r\n\t\t\tdelete pane._savedStates;\r\n\t\t}\r\n\t\tpane._shown = shown;\r\n\t},\r\n\r\n\t_connectTitle: function(/*dijit._Widget*/ pane, /*String*/ value){\r\n\t\tvar fx = lang.hitch(this, function(title){\r\n\t\t\tthis.updateOption({value: value, label: title});\r\n\t\t});\r\n\t\tif(pane._setTitleAttr){\r\n\t\t\tthis.connect(pane, \"_setTitleAttr\", fx);\r\n\t\t}else{\r\n\t\t\tthis.connect(pane, \"attr\", function(attr, val){\r\n\t\t\t\tif(attr == \"title\" && arguments.length > 1){\r\n\t\t\t\t\tfx(val);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\tonAddChild: function(/*dijit._Widget*/ pane, /*Integer?*/ insertIndex){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when the stack container adds a new pane\r\n\t\tif(!this._panes[pane.id]){\r\n\t\t\tthis._panes[pane.id] = pane;\r\n\t\t\tvar v = this._optionValFromPane(pane.id);\r\n\t\t\tthis.addOption({value: v, label: pane.title});\r\n\t\t\tthis._connectTitle(pane, v);\r\n\t\t}\r\n\t\tif(!pane.onShow || !pane.onHide || pane._shown == undefined){\r\n\t\t\tpane.onShow = lang.hitch(this, \"_togglePane\", pane, true);\r\n\t\t\tpane.onHide = lang.hitch(this, \"_togglePane\", pane, false);\r\n\t\t\tpane.onHide();\r\n\t\t}\r\n\t},\r\n\r\n\t_setValueAttr: function(v){\r\n\t\tif(\"_savedValue\" in this){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\tattr: function(/*String|Object*/ name, /*Object?*/ value){\r\n\t\tif(name == \"value\" && arguments.length == 2 && \"_savedValue\" in this){\r\n\t\t\tthis._savedValue = value;\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\r\n\tonRemoveChild: function(/*dijit._Widget*/ pane){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when the stack container removes a pane\r\n\t\tif(this._panes[pane.id]){\r\n\t\t\tdelete this._panes[pane.id];\r\n\t\t\tthis.removeOption(this._optionValFromPane(pane.id));\r\n\t\t}\r\n\t},\r\n\r\n\tonSelectChild: function(/*dijit._Widget*/ pane){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when the stack container selects a new pane\r\n\t\tthis._setValueAttr(this._optionValFromPane(pane.id));\r\n\t},\r\n\r\n\tonStartup: function(/*Object*/ info){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when the stack container is started up\r\n\t\tvar selPane = info.selected;\r\n\t\tthis.addOption(array.filter(array.map(info.children, function(c){\r\n\t\t\tvar v = this._optionValFromPane(c.id);\r\n\t\t\tthis._connectTitle(c, v);\r\n\t\t\tvar toAdd = null;\r\n\t\t\tif(!this._panes[c.id]){\r\n\t\t\t\tthis._panes[c.id] = c;\r\n\t\t\t\ttoAdd = {value: v, label: c.title};\r\n\t\t\t}\r\n\t\t\tif(!c.onShow || !c.onHide || c._shown == undefined){\r\n\t\t\t\tc.onShow = lang.hitch(this, \"_togglePane\", c, true);\r\n\t\t\t\tc.onHide = lang.hitch(this, \"_togglePane\", c, false);\r\n\t\t\t\tc.onHide();\r\n\t\t\t}\r\n\t\t\tif(\"_savedValue\" in this && v === this._savedValue){\r\n\t\t\t\tselPane = c;\r\n\t\t\t}\r\n\t\t\treturn toAdd;\r\n\t\t}, this), function(i){ return i;}));\r\n\t\tvar _this = this;\r\n\t\tvar fx = function(){\r\n\t\t\t// This stuff needs to be run after we show our child, if\r\n\t\t\t// the stack is going to show a different child than is\r\n\t\t\t// selected - see trac #9396\r\n\t\t\tdelete _this._savedValue;\r\n\t\t\t_this.onSelectChild(selPane);\r\n\t\t\tif(!selPane._shown){\r\n\t\t\t\t_this._togglePane(selPane, true);\r\n\t\t\t}\r\n\t\t};\r\n\t\tif(selPane !== info.selected){\r\n\t\t\tvar stack = manager.byId(this.stackId);\r\n\t\t\tvar c = this.connect(stack, \"_showChild\", function(sel){\r\n\t\t\t\tthis.disconnect(c);\r\n\t\t\t\tfx();\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tfx();\r\n\t\t}\r\n\t},\r\n\r\n\tpostMixInProperties: function(){\r\n\t\tthis._savedValue = this.value;\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.connect(this, \"onChange\", \"_handleSelfOnChange\");\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._panes = {};\r\n\t\tthis._subscriptions = [\r\n\t\t\tconnect.subscribe(this.stackId + \"-startup\", this, \"onStartup\"),\r\n\t\t\tconnect.subscribe(this.stackId + \"-addChild\", this, \"onAddChild\"),\r\n\t\t\tconnect.subscribe(this.stackId + \"-removeChild\", this, \"onRemoveChild\"),\r\n\t\t\tconnect.subscribe(this.stackId + \"-selectChild\", this, \"onSelectChild\")\r\n\t\t];\r\n\t\tvar stack = manager.byId(this.stackId);\r\n\t\tif(stack && stack._started){\r\n\t\t\t// If we have a stack, and it's already started, call our onStartup now\r\n\t\t\tthis.onStartup({children: stack.getChildren(), selected: stack.selectedChildWidget});\r\n\t\t}\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\tarray.forEach(this._subscriptions, connect.unsubscribe);\r\n\t\tdelete this._panes; // Fixes memory leak in IE\r\n\t\tthis.inherited(\"destroy\", arguments);\r\n\t},\r\n\r\n\t_handleSelfOnChange: function(/*String*/ val){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when form select widget's value has changed\r\n\t\tvar pane = this._panes[this._paneIdFromOption(val)];\r\n\t\tif(pane){\r\n\t\t\tvar s = manager.byId(this.stackId);\r\n\t\t\tif(pane == s.selectedChildWidget){\r\n\t\t\t\ts._transition(pane);\r\n\t\t\t}else{\r\n\t\t\t\ts.selectChild(pane);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n});\r\n"]}