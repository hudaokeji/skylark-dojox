{"version":3,"sources":["form/TimeSpinner.js"],"names":["define","lang","event","Spinner","keys","dateUtil","dateLocale","dateStamp","declare","required","adjust","val","delta","add","isValid","smallDelta","largeDelta","timeoutChangeRate","parse","time","locale","selector","formatLength","format","isString","serialize","toISOString","value","_onKeyDown","e","keyCode","HOME","END","ctrlKey","altKey","metaKey","this","get","constraints","_setValueAttr","stop"],"mappings":";;;;;;;AAAAA,QACC,kBACA,mBACA,sBACA,YACA,YACA,mBACA,kBACA,sBACE,SAASC,EAAMC,EAAOC,EAASC,EAAMC,EAAUC,EAAYC,EAAWC,GAEzE,OAAOA,EAAQ,yBAA0BL,GAOxCM,UAAU,EAEVC,OAAQ,SAAoBC,EAAgBC,GAC3C,OAAOP,EAASQ,IAAIF,EAAK,SAAUC,IAIpCE,QAAS,WAAW,OAAO,GAE3BC,WAAY,EAEZC,WAAY,GAEZC,kBAAmB,GAEnBC,MAAO,SAASC,EAAMC,GACrB,OAAOd,EAAWY,MAAMC,GAAOE,SAAS,OAAQC,aAAa,WAG9DC,OAAQ,SAASJ,EAAMC,GACtB,OAAGnB,EAAKuB,SAASL,GAAeA,EACzBb,EAAWiB,OAAOJ,GAAOE,SAAS,OAAQC,aAAa,WAG/DG,UAAWlB,EAAUmB,YAErBC,MAAO,WAELC,WAAY,SAASC,GAEtB,IAAIA,EAAEC,SAAW1B,EAAK2B,MAAQF,EAAEC,SAAW1B,EAAK4B,QAAUH,EAAEI,SAAWJ,EAAEK,QAAUL,EAAEM,eACtD,IAArBC,KAAKC,IAAI,SAAiF,CACnG,IAAIV,EAAQS,KAAKE,YAAaT,EAAEC,SAAW1B,EAAK2B,KAAO,MAAQ,OAC5DJ,GACFS,KAAKG,cAAcZ,GAAM,GAG1BzB,EAAMsC,KAAKX","file":"../../form/TimeSpinner.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dijit/form/_Spinner\",\r\n\t\"dojo/keys\",\r\n\t\"dojo/date\",\r\n\t\"dojo/date/locale\",\r\n\t\"dojo/date/stamp\",\r\n\t\"dojo/_base/declare\"\r\n], function(lang, event, Spinner, keys, dateUtil, dateLocale, dateStamp, declare){\r\n\r\nreturn declare(\"dojox.form.TimeSpinner\", Spinner,\r\n{\r\n\t// summary:\r\n\t//\t\tTime Spinner\r\n\t// description:\r\n\t//\t\tThis widget is the same as a normal NumberSpinner, but for the time component of a date object instead\r\n\r\n\trequired: false,\r\n\r\n\tadjust: function(/*Object*/ val, /*Number*/ delta){\r\n\t\treturn dateUtil.add(val, \"minute\", delta)\r\n\t},\r\n\r\n\t//FIXME should we allow for constraints in this widget?\r\n\tisValid: function(){return true;},\r\n\r\n\tsmallDelta: 5,\r\n\r\n\tlargeDelta: 30,\r\n\r\n\ttimeoutChangeRate: 0.50,\r\n\r\n\tparse: function(time, locale){\r\n\t\treturn dateLocale.parse(time, {selector:\"time\", formatLength:\"short\"});\r\n\t},\r\n\r\n\tformat: function(time, locale){\r\n\t\tif(lang.isString(time)){ return time; }\r\n\t\treturn dateLocale.format(time, {selector:\"time\", formatLength:\"short\"});\r\n\t},\r\n\r\n\tserialize: dateStamp.toISOString,\r\n\r\n\tvalue: \"12:00 AM\",\r\n\r\n   _onKeyDown: function(e){\r\n\t   // TODO: this code is just copied from NumberSpinner\r\n\t\tif((e.keyCode == keys.HOME || e.keyCode == keys.END) && !(e.ctrlKey || e.altKey || e.metaKey)\r\n\t\t&& typeof this.get('value') != 'undefined' /* gibberish, so HOME and END are default editing keys*/){\r\n\t\t\tvar value = this.constraints[(e.keyCode == keys.HOME ? \"min\" : \"max\")];\r\n\t\t\tif(value){\r\n\t\t\t\tthis._setValueAttr(value,true);\r\n\t\t\t}\r\n\t\t\t// eat home or end key whether we change the value or not\r\n\t\t\tevent.stop(e);\r\n\t\t}\r\n\t}\r\n});\r\n});\r\n"]}