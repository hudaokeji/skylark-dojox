{"version":3,"sources":["lang/tests/curry.js"],"names":["dojo","provide","require","df","dojox","lang","functional","add5","curry","sub3","fun","lambda","tests","register","t","assertEqual","partial","arg"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,0BAEbD,KAAKE,QAAQ,+BAEb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WAAYC,EAAOJ,EAAGK,MAAM,IAATL,CAAc,GAAIM,EAAON,EAAGK,MAAM,OAAQE,EAAMP,EAAGQ,OAAO,oBACjGC,MAAMC,SAAS,0BACd,SAAoBC,GAAIA,EAAEC,YAAYZ,EAAGK,MAAM,IAATL,CAAc,EAAG,GAAI,IAC3D,SAAoBW,GAAIA,EAAEC,YAAYZ,EAAGK,MAAM,IAATL,CAAc,EAAdA,CAAiB,GAAI,IAC3D,SAAoBW,GAAIA,EAAEC,YAAYZ,EAAGK,MAAM,IAATL,CAAc,EAAG,EAAG,GAAI,IAC9D,SAAoBW,GAAIA,EAAEC,YAAYR,EAAK,GAAI,IAC/C,SAAoBO,GAAIA,EAAEC,YAAYR,EAAK,GAAI,IAC/C,SAAoBO,GAAIA,EAAEC,YAAYR,EAAK,GAAI,KAC/C,SAAoBO,GAAIA,EAAEC,YAAYN,EAAK,IAAK,IAChD,SAAoBK,GAAIA,EAAEC,YAAYN,EAAK,GAAI,IAC/C,SAAoBK,GAAIA,EAAEC,YAAYN,EAAK,GAAI,IAE/C,SAAsBK,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAK,EAAG,EAAG,EAAtBP,GAA4B,MACpE,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAK,EAAG,EAAGP,EAAGc,IAAzBd,CAA8B,GAAI,MAC1E,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAK,EAAGP,EAAGc,IAAK,EAA3Bd,CAA8B,GAAI,MAC1E,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAK,EAAGP,EAAGc,IAAKd,EAAGc,IAA9Bd,CAAmC,EAAG,GAAI,MAClF,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAKP,EAAGc,IAAK,EAAG,EAA3Bd,CAA8B,GAAI,MAC1E,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAKP,EAAGc,IAAK,EAAGd,EAAGc,IAA9Bd,CAAmC,EAAG,GAAI,MAClF,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAKP,EAAGc,IAAKd,EAAGc,IAAK,EAAhCd,CAAmC,EAAG,GAAI,MAClF,SAAsBW,GAAIA,EAAEC,YAAYZ,EAAGa,QAAQN,EAAKP,EAAGc,IAAKd,EAAGc,IAAKd,EAAGc,IAAnCd,CAAwC,EAAG,EAAG,GAAI,QApB5F","file":"../../../lang/tests/curry.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.curry\");\r\n\r\ndojo.require(\"dojox.lang.functional.curry\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional, add5 = df.curry(\"+\")(5), sub3 = df.curry(\"_-3\"), fun = df.lambda(\"100*a + 10*b + c\");\r\n\ttests.register(\"dojox.lang.tests.curry\", [\r\n\t\tfunction testCurry1(t){ t.assertEqual(df.curry(\"+\")(1, 2), 3); },\r\n\t\tfunction testCurry2(t){ t.assertEqual(df.curry(\"+\")(1)(2), 3); },\r\n\t\tfunction testCurry3(t){ t.assertEqual(df.curry(\"+\")(1, 2, 3), 3); },\r\n\t\tfunction testCurry4(t){ t.assertEqual(add5(1), 6); },\r\n\t\tfunction testCurry5(t){ t.assertEqual(add5(3), 8); },\r\n\t\tfunction testCurry6(t){ t.assertEqual(add5(5), 10); },\r\n\t\tfunction testCurry7(t){ t.assertEqual(sub3(1), -2); },\r\n\t\tfunction testCurry8(t){ t.assertEqual(sub3(3), 0); },\r\n\t\tfunction testCurry9(t){ t.assertEqual(sub3(5), 2); },\r\n\t\t\r\n\t\tfunction testPartial1(t){ t.assertEqual(df.partial(fun, 1, 2, 3)(), 123); },\r\n\t\tfunction testPartial2(t){ t.assertEqual(df.partial(fun, 1, 2, df.arg)(3), 123); },\r\n\t\tfunction testPartial3(t){ t.assertEqual(df.partial(fun, 1, df.arg, 3)(2), 123); },\r\n\t\tfunction testPartial4(t){ t.assertEqual(df.partial(fun, 1, df.arg, df.arg)(2, 3), 123); },\r\n\t\tfunction testPartial5(t){ t.assertEqual(df.partial(fun, df.arg, 2, 3)(1), 123); },\r\n\t\tfunction testPartial6(t){ t.assertEqual(df.partial(fun, df.arg, 2, df.arg)(1, 3), 123); },\r\n\t\tfunction testPartial7(t){ t.assertEqual(df.partial(fun, df.arg, df.arg, 3)(1, 2), 123); },\r\n\t\tfunction testPartial8(t){ t.assertEqual(df.partial(fun, df.arg, df.arg, df.arg)(1, 2, 3), 123); }\r\n\t]);\r\n})();\r\n"]}