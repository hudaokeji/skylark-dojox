{"version":3,"sources":["lang/tests/misc.js"],"names":["dojo","provide","require","df","dojox","lang","functional","fun","lambda","tests","register","t","assertEqual","zip","unzip","mixer","flip","reverse"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,yBAEbD,KAAKE,QAAQ,6BAEb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WAAYC,EAAMJ,EAAGK,OAAO,oBAEhDC,MAAMC,SAAS,yBACd,SAAkBC,GAAIA,EAAEC,YAAYT,EAAGU,KAAK,EAAG,EAAG,IAAK,EAAG,EAAG,MAAO,EAAG,IAAK,EAAG,IAAK,EAAG,MACvF,SAAkBF,GAAIA,EAAEC,YAAYT,EAAGU,KAAK,EAAG,IAAK,EAAG,IAAK,EAAG,MAAO,EAAG,EAAG,IAAK,EAAG,EAAG,MAEvF,SAAoBF,GAAIA,EAAEC,YAAYT,EAAGW,QAAQ,EAAG,IAAK,EAAG,IAAK,EAAG,OAAQ,EAAG,EAAG,IAAK,EAAG,EAAG,MAC7F,SAAoBH,GAAIA,EAAEC,YAAYT,EAAGW,QAAQ,EAAG,EAAG,IAAK,EAAG,EAAG,OAAQ,EAAG,IAAK,EAAG,IAAK,EAAG,MAE7F,SAAmBH,GAAIA,EAAEC,YAAYT,EAAGY,MAAMR,GAAM,EAAG,EAAG,GAArBJ,CAAyB,EAAG,EAAG,GAAI,MACxE,SAAkBQ,GAAIA,EAAEC,YAAYT,EAAGa,KAAKT,EAARJ,CAAa,EAAG,EAAG,GAAI,MAE3D,SAAsBQ,GAAIA,EAAEC,YAAYT,EAAGK,QAAQ,KAAM,MAAjBL,CAAwB,GAAI,KACpE,SAAsBQ,GAAIA,EAAEC,YAAYT,EAAGK,QAAQ,KAAM,MAAMS,UAAvBd,CAAkC,GAAI,OAdhF","file":"../../../lang/tests/misc.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.misc\");\r\n\r\ndojo.require(\"dojox.lang.functional.zip\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional, fun = df.lambda(\"100*a + 10*b + c\");\r\n\t\r\n\ttests.register(\"dojox.lang.tests.misc\", [\r\n\t\tfunction testZip1(t){ t.assertEqual(df.zip([1, 2, 3], [4, 5, 6]), [[1, 4], [2, 5], [3, 6]]); },\r\n\t\tfunction testZip2(t){ t.assertEqual(df.zip([1, 2], [3, 4], [5, 6]), [[1, 3, 5], [2, 4, 6]]); },\r\n\t\t\r\n\t\tfunction testUnzip1(t){ t.assertEqual(df.unzip([[1, 4], [2, 5], [3, 6]]), [[1, 2, 3], [4, 5, 6]]); },\r\n\t\tfunction testUnzip2(t){ t.assertEqual(df.unzip([[1, 3, 5], [2, 4, 6]]), [[1, 2], [3, 4], [5, 6]]); },\r\n\t\t\r\n\t\tfunction testMixer(t){ t.assertEqual(df.mixer(fun, [1, 2, 0])(3, 1, 2), 123); },\r\n\t\tfunction testFlip(t){ t.assertEqual(df.flip(fun)(3, 2, 1), 123); },\r\n\t\t\r\n\t\tfunction testCompose1(t){ t.assertEqual(df.lambda([\"+5\", \"*3\"])(8), 8 * 3 + 5); },\r\n\t\tfunction testCompose2(t){ t.assertEqual(df.lambda([\"+5\", \"*3\"].reverse())(8), (8 + 5) * 3); }\r\n\t]);\r\n})();\r\n"]}