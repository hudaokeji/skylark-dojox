{"version":3,"sources":["lang/tests/fold.js"],"names":["dojo","provide","require","df","dojox","lang","functional","a","arg","x","b","c","revArrayIter","array","this","position","length","extend","hasNext","lambda","next","tests","register","t","assertEqual","foldl","foldl1","partial","Math","max","min","iter","foldr","foldr1","repeat","unfold","until","scanl","scanl1","values","scanr","scanr1"],"mappings":"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","file":"../../../lang/tests/fold.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.fold\");\r\n\r\ndojo.require(\"dojox.lang.functional.fold\");\r\ndojo.require(\"dojox.lang.functional.scan\");\r\ndojo.require(\"dojox.lang.functional.curry\");\r\ndojo.require(\"dojox.lang.functional.sequence\");\r\ndojo.require(\"dojox.lang.functional.listcomp\");\r\ndojo.require(\"dojox.lang.functional.object\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional, a = df.arg, x = {a: 1, b: 2, c: 3};\r\n\r\n\tvar revArrayIter = function(array){\r\n\t\tthis.array    = array;\r\n\t\tthis.position = array.length - 1;\r\n\t};\r\n\tdojo.extend(revArrayIter, {\r\n\t\thasNext:\tdf.lambda(\"this.position >= 0\"),\r\n\t\tnext:\t\tdf.lambda(\"this.array[this.position--]\")\r\n\t});\r\n\r\n\ttests.register(\"dojox.lang.tests.fold\", [\r\n\t\tfunction testFoldl1(t){ t.assertEqual(df.foldl([1, 2, 3], \"+\", 0), 6); },\r\n\t\tfunction testFoldl2(t){ t.assertEqual(df.foldl1([1, 2, 3], \"*\"), 6); },\r\n\t\tfunction testFoldl3(t){ t.assertEqual(df.foldl1([1, 2, 3], \"/\"), 1/6); },\r\n\t\tfunction testFoldl4(t){ t.assertEqual(df.foldl1([1, 2, 3], df.partial(Math.max, a, a)), 3); },\r\n\t\tfunction testFoldl5(t){ t.assertEqual(df.foldl1([1, 2, 3], df.partial(Math.min, a, a)), 1); },\r\n\t\t\r\n\t\tfunction testFoldlIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.foldl(iter, \"+\", 0), 6);\r\n\t\t},\r\n\t\tfunction testFoldl1Iter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.foldl1(iter, \"/\"), 3/2);\r\n\t\t},\r\n\r\n\t\tfunction testFoldlObj(t){ t.assertEqual(df.foldl(x, \"*\", 2), 12); },\r\n\t\tfunction testFoldl1Obj(t){ t.assertEqual(df.foldl1(x, \"+\"), 6); },\r\n\t\t\r\n\t\tfunction testFoldr1(t){ t.assertEqual(df.foldr([1, 2, 3], \"+\", 0), 6); },\r\n\t\tfunction testFoldr2(t){ t.assertEqual(df.foldr1([1, 2, 3], \"*\"), 6); },\r\n\t\tfunction testFoldr3(t){ t.assertEqual(df.foldr1([1, 2, 3], \"/\"), 3/2); },\r\n\t\tfunction testFoldr4(t){ t.assertEqual(df.foldr1([1, 2, 3], df.partial(Math.max, a, a)), 3); },\r\n\t\tfunction testFoldr5(t){ t.assertEqual(df.foldr1([1, 2, 3], df.partial(Math.min, a, a)), 1); },\r\n\t\t\r\n\t\tfunction testUnfold1(t){\r\n\t\t\t// simulate df.repeat()\r\n\t\t\tt.assertEqual(\r\n\t\t\t\tdf.repeat(10, \"2*\", 1),\r\n\t\t\t\tdf.unfold(\"x[0] >= 10\", \"x[1]\", \"[x[0] + 1, 2 * x[1]]\", [0, 1])\r\n\t\t\t);\r\n\t\t},\r\n\t\tfunction testUnfold2(t){\r\n\t\t\t// simulate df.until()\r\n\t\t\tt.assertEqual(\r\n\t\t\t\tdf.until(\">1024\", \"2*\", 1),\r\n\t\t\t\tdf.unfold(\">1024\", \"x\", \"2*\", 1)\r\n\t\t\t);\r\n\t\t},\r\n\t\t\r\n\t\tfunction testScanl1(t){ t.assertEqual(df.scanl([1, 2, 3], \"+\", 0), [0, 1, 3, 6]); },\r\n\t\tfunction testScanl2(t){ t.assertEqual(df.scanl1([1, 2, 3], \"*\"), [1, 2, 6]); },\r\n\t\tfunction testScanl3(t){ t.assertEqual(df.scanl1([1, 2, 3], df.partial(Math.max, a, a)), [1, 2, 3]); },\r\n\t\tfunction testScanl4(t){ t.assertEqual(df.scanl1([1, 2, 3], df.partial(Math.min, a, a)), [1, 1, 1]); },\r\n\r\n\t\tfunction testScanlIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.scanl(iter, \"+\", 0), [0, 3, 5, 6]);\r\n\t\t},\r\n\t\tfunction testScanl1Iter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.scanl1(iter, \"*\"), [3, 6, 6]);\r\n\t\t},\r\n\t\t\r\n\t\tfunction testScanlObj(t){ t.assertEqual(df.scanl(x, \"+\", 0), df.scanl(df.values(x), \"+\", 0)); },\r\n\t\tfunction testScanl1Obj(t){ t.assertEqual(df.scanl1(x, \"*\"), df.scanl1(df.values(x), \"*\")); },\r\n\r\n\t\tfunction testScanr1(t){ t.assertEqual(df.scanr([1, 2, 3], \"+\", 0), [6, 5, 3, 0]); },\r\n\t\tfunction testScanr2(t){ t.assertEqual(df.scanr1([1, 2, 3], \"*\"), [6, 6, 3]); },\r\n\t\tfunction testScanr3(t){ t.assertEqual(df.scanr1([1, 2, 3], df.partial(Math.max, a, a)), [3, 3, 3]); },\r\n\t\tfunction testScanr4(t){ t.assertEqual(df.scanr1([1, 2, 3], df.partial(Math.min, a, a)), [1, 2, 3]); }\r\n\t]);\r\n})();\r\n"]}