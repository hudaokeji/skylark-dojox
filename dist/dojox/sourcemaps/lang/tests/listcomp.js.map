{"version":3,"sources":["lang/tests/listcomp.js"],"names":["dojo","provide","require","df","dojox","lang","functional","tests","register","t","assertEqual","repeat","n","until","listcomp"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,6BAEbD,KAAKE,QAAQ,kCACbF,KAAKE,QAAQ,kCAEb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WACpBC,MAAMC,SAAS,6BACd,SAAuBC,GAAIA,EAAEC,YAAYP,EAAGQ,OAAO,EAAG,SAASC,GAAI,OAAOA,EAAI,GAAM,IAAK,EAAG,EAAG,KAC/F,SAAuBH,GAAIA,EAAEC,YAAYP,EAAGQ,OAAO,EAAG,SAASC,GAAI,OAAW,EAAJA,GAAU,IAAK,EAAG,EAAG,KAC/F,SAAuBH,GAAIA,EAAEC,YAAYP,EAAGU,MAAM,SAASD,GAAI,OAAOA,EAAI,IAAO,SAASA,GAAI,OAAW,EAAJA,GAAU,IAAK,EAAG,EAAG,KAE1H,SAAuBH,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,6BAA8B,EAAG,EAAG,KACzF,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,sDAAuD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACpI,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,iEAAkE,EAAG,EAAG,KAC7H,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,sDAAuD,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACpI,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,iEAAkE,EAAG,EAAG,KAC7H,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,yBAA0B,EAAG,EAAG,KACrF,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,8CAA+C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC5H,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,yDAA0D,EAAG,EAAG,KACrH,SAAuBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,8CAA+C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC5H,SAAwBL,GAAIA,EAAEC,YAAYP,EAAGW,SAAS,yDAA0D,EAAG,EAAG,OAhBxH","file":"../../../lang/tests/listcomp.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.listcomp\");\r\n\r\ndojo.require(\"dojox.lang.functional.listcomp\");\r\ndojo.require(\"dojox.lang.functional.sequence\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional;\r\n\ttests.register(\"dojox.lang.tests.listcomp\", [\r\n\t\tfunction testIterator1(t){ t.assertEqual(df.repeat(3, function(n){ return n + 1; }, 0), [0, 1, 2]); },\r\n\t\tfunction testIterator2(t){ t.assertEqual(df.repeat(3, function(n){ return n * 3; }, 1), [1, 3, 9]); },\r\n\t\tfunction testIterator3(t){ t.assertEqual(df.until(function(n){ return n > 10; }, function(n){ return n * 3; }, 1), [1, 3, 9]); },\r\n\t\t\r\n\t\tfunction testListcomp1(t){ t.assertEqual(df.listcomp(\"i for(var i=0; i<3; ++i)\"), [0, 1, 2]); },\r\n\t\tfunction testListcomp2(t){ t.assertEqual(df.listcomp(\"i*j for(var i=0; i<3; ++i) for(var j=0; j<3; ++j)\"), [0, 0, 0, 0, 1, 2, 0, 2, 4]); },\r\n\t\tfunction testListcomp3(t){ t.assertEqual(df.listcomp(\"i*j for(var i=0; i<3; ++i) if(i%2==1) for(var j=0; j<3; ++j)\"), [0, 1, 2]); },\r\n\t\tfunction testListcomp4(t){ t.assertEqual(df.listcomp(\"i+j for(var i=0; i<3; ++i) for(var j=0; j<3; ++j)\"), [0, 1, 2, 1, 2, 3, 2, 3, 4]); },\r\n\t\tfunction testListcomp5(t){ t.assertEqual(df.listcomp(\"i+j for(var i=0; i<3; ++i) if(i%2==1) for(var j=0; j<3; ++j)\"), [1, 2, 3]); },\r\n\t\tfunction testListcomp6(t){ t.assertEqual(df.listcomp(\"i for(i=0; i<3; ++i)\"), [0, 1, 2]); },\r\n\t\tfunction testListcomp7(t){ t.assertEqual(df.listcomp(\"i*j for(i=0; i<3; ++i) for(j=0; j<3; ++j)\"), [0, 0, 0, 0, 1, 2, 0, 2, 4]); },\r\n\t\tfunction testListcomp8(t){ t.assertEqual(df.listcomp(\"i*j for(i=0; i<3; ++i) if(i%2==1) for(j=0; j<3; ++j)\"), [0, 1, 2]); },\r\n\t\tfunction testListcomp9(t){ t.assertEqual(df.listcomp(\"i+j for(i=0; i<3; ++i) for(j=0; j<3; ++j)\"), [0, 1, 2, 1, 2, 3, 2, 3, 4]); },\r\n\t\tfunction testListcomp10(t){ t.assertEqual(df.listcomp(\"i+j for(i=0; i<3; ++i) if(i%2==1) for(j=0; j<3; ++j)\"), [1, 2, 3]); }\r\n\t]);\r\n})();\r\n"]}