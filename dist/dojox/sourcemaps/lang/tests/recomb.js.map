{"version":3,"sources":["lang/tests/recomb.js"],"names":["dojo","provide","require","df","dojox","lang","functional","fact","n","fib","seq","listcomp","factTable","map","fibTable","tests","register","t","linrec","assertEqual","lambda","numrec","multirec","fact2","tailrec","binrec","fib2"],"mappings":"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","file":"../../../lang/tests/recomb.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.recomb\");\r\n\r\ndojo.require(\"dojox.lang.functional\");\r\ndojo.require(\"dojox.lang.functional.listcomp\");\r\n\r\ndojo.require(\"dojox.lang.functional.linrec\");\r\ndojo.require(\"dojox.lang.functional.numrec\");\r\ndojo.require(\"dojox.lang.functional.tailrec\");\r\ndojo.require(\"dojox.lang.functional.binrec\");\r\ndojo.require(\"dojox.lang.functional.multirec\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional,\r\n\t\t\r\n\t\t// define the standard factorial function to compare with\r\n\t\tfact = function(n){ return n <= 1 ? 1 : n * fact(n - 1); },\r\n\r\n\t\t// define the standard fibonacci function to compare with\r\n\t\tfib  = function(n){ return n <= 1 ? 1 : fib(n - 1) + fib(n - 2); },\r\n\t\t\r\n\t\t// prepare the sequence of arguments for comparison\r\n\t\tseq = df.listcomp(\"i for(i = 0; i < 15; ++i)\"),\r\n\t\t\r\n\t\t// build a set of results for our argument list using the standard factorial function\r\n\t\tfactTable = df.map(seq, fact),\r\n\r\n\t\t// build a set of results for our argument list using the standard fibonacci function\r\n\t\tfibTable  = df.map(seq, fib);\r\n\t\r\n\ttests.register(\"dojox.lang.tests.recomb\", [\r\n\t\tfunction testFactLinrec1(t){\r\n\t\t\tvar fact = df.linrec(\"<= 1\", \"1\", \"[n - 1]\", \"a * b[0]\");\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactLinrec2(t){\r\n\t\t\tvar fact = df.linrec(df.lambda(\"<= 1\"), df.lambda(\"1\"), df.lambda(\"[n - 1]\"), df.lambda(\"a * b[0]\"));\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactNumrec1(t){\r\n\t\t\tvar fact = df.numrec(1, \"*\");\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactNumrec2(t){\r\n\t\t\tvar fact = df.numrec(1, df.lambda(\"*\"));\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactMultirec1(t){\r\n\t\t\tvar fact = df.multirec(\"<= 1\", \"1\", \"[[n - 1]]\", \"a[0] * b[0]\");\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactMultirec2(t){\r\n\t\t\tvar fact = df.multirec(df.lambda(\"<= 1\"), df.lambda(\"1\"), df.lambda(\"[[n - 1]]\"), df.lambda(\"a[0] * b[0]\"));\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactTailrec1(t){\r\n\t\t\tvar fact2 = df.tailrec(\"<= 1\", \"n, acc -> acc\", \"[n - 1, n * acc]\"),\r\n\t\t\t\tfact  = function(n){ return fact2(n, 1); };\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFactTailrec2(t){\r\n\t\t\tvar fact2 = df.tailrec(df.lambda(\"<= 1\"), df.lambda(\"n, acc -> acc\"), df.lambda(\"[n - 1, n * acc]\")),\r\n\t\t\t\tfact  = function(n){ return fact2(n, 1); };\r\n\t\t\tt.assertEqual(df.map(seq, fact), factTable);\r\n\t\t},\r\n\t\tfunction testFibBinrec1(t){\r\n\t\t\tvar fib = df.binrec(\"<= 1\", \"1\", \"[[n - 1], [n - 2]]\", \"+\");\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t},\r\n\t\tfunction testFibBinrec2(t){\r\n\t\t\tvar fib = df.binrec(df.lambda(\"<= 1\"), df.lambda(\"1\"), df.lambda(\"[[n - 1], [n - 2]]\"), df.lambda(\"+\"));\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t},\r\n\t\tfunction testFibTailrec1(t){\r\n\t\t\tvar fib2 = df.tailrec(\"<= 0\", \"n, next, result -> result\", \"[n - 1, next + result, next]\"),\r\n\t\t\t\tfib  = function(n){ return fib2(n, 1, 1); };\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t},\r\n\t\tfunction testFibTailrec2(t){\r\n\t\t\tvar fib2 = df.tailrec(df.lambda(\"<= 0\"), df.lambda(\"n, next, result -> result\"), df.lambda(\"[n - 1, next + result, next]\")),\r\n\t\t\t\tfib  = function(n){ return fib2(n, 1, 1); };\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t},\r\n\t\tfunction testFibMultirec1(t){\r\n\t\t\tvar fib = df.multirec(\"<= 1\", \"1\", \"[[n - 1], [n - 2]]\", \"a[0] + a[1]\");\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t},\r\n\t\tfunction testFibMultirec2(t){\r\n\t\t\tvar fib = df.multirec(df.lambda(\"<= 1\"), df.lambda(\"1\"), df.lambda(\"[[n - 1], [n - 2]]\"), df.lambda(\"a[0] + a[1]\"));\r\n\t\t\tt.assertEqual(df.map(seq, fib), fibTable);\r\n\t\t}\r\n\t]);\r\n})();\r\n"]}