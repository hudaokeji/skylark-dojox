{"version":3,"sources":["lang/tests/array.js"],"names":["dojo","provide","require","v","df","dojox","lang","functional","x","a","b","c","revArrayIter","array","this","position","length","extend","hasNext","lambda","next","tests","register","t","assertEqual","filter","iter","filterRev","forEach","push","forEachRev","map","mapRev","assertFalse","every","assertTrue","everyRev","some","someRev","reduce","reduceRight"],"mappings":"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","file":"../../../lang/tests/array.js","sourcesContent":["dojo.provide(\"dojox.lang.tests.array\");\r\n\r\ndojo.require(\"dojox.lang.functional\");\r\ndojo.require(\"dojox.lang.functional.fold\");\r\ndojo.require(\"dojox.lang.functional.reversed\");\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional, v, isOdd = \"%2\", x = {a: 1, b: 2, c: 3};\r\n\t\r\n\tvar revArrayIter = function(array){\r\n\t\tthis.array    = array;\r\n\t\tthis.position = array.length - 1;\r\n\t};\r\n\tdojo.extend(revArrayIter, {\r\n\t\thasNext:\tdf.lambda(\"this.position >= 0\"),\r\n\t\tnext:\t\tdf.lambda(\"this.array[this.position--]\")\r\n\t});\r\n\t\r\n\ttests.register(\"dojox.lang.tests.array\", [\r\n\t\tfunction testFilter1(t){ t.assertEqual(df.filter([1, 2, 3], isOdd), [1, 3]); },\r\n\t\tfunction testFilter2(t){ t.assertEqual(df.filter([1, 2, 3], \"%2==0\"), [2]); },\r\n\t\tfunction testFilterIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.filter(iter, isOdd), [3, 1]);\r\n\t\t},\r\n\t\tfunction testFilterRev(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.filter(iter, isOdd), df.filterRev([1, 2, 3], isOdd));\r\n\t\t},\r\n\t\t\r\n\t\tfunction testForEach(t){\r\n\t\t\tt.assertEqual((v = [], df.forEach([1, 2, 3], function(x){ v.push(x); }), v), [1, 2, 3]);\r\n\t\t},\r\n\t\tfunction testForEachIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual((v = [], df.forEach(iter, function(x){ v.push(x); }), v), [3, 2, 1]);\r\n\t\t},\r\n\t\tfunction testForEachRev(t){\r\n\t\t\tt.assertEqual((v = [], df.forEachRev([1, 2, 3], function(x){ v.push(x); }), v), [3, 2, 1]);\r\n\t\t},\r\n\t\t\r\n\t\tfunction testMap(t){ t.assertEqual(df.map([1, 2, 3], \"+3\"), [4, 5, 6]); },\r\n\t\tfunction testMapIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.map(iter, \"+3\"), [6, 5, 4]);\r\n\t\t},\r\n\t\tfunction testMapRev(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertEqual(df.map(iter, \"+3\"), df.mapRev([1, 2, 3], \"+3\"));\r\n\t\t},\r\n\t\t\r\n\t\tfunction testEvery1(t){ t.assertFalse(df.every([1, 2, 3], isOdd)); },\r\n\t\tfunction testEvery2(t){ t.assertTrue(df.every([1, 3, 5], isOdd)); },\r\n\t\tfunction testEveryIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 3, 5]);\r\n\t\t\tt.assertTrue(df.every(iter, isOdd));\r\n\t\t},\r\n\t\tfunction testEveryObj(t){ t.assertFalse(df.every(x, \"%2\")); },\r\n\t\tfunction testEveryRev1(t){ t.assertFalse(df.everyRev([1, 2, 3], isOdd)); },\r\n\t\tfunction testEveryRev2(t){ t.assertTrue(df.everyRev([1, 3, 5], isOdd)); },\r\n\r\n\t\tfunction testSome1(t){ t.assertFalse(df.some([2, 4, 6], isOdd)); },\r\n\t\tfunction testSome2(t){ t.assertTrue(df.some([1, 2, 3], isOdd)); },\r\n\t\tfunction testSomeIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 3]);\r\n\t\t\tt.assertTrue(df.some(iter, isOdd));\r\n\t\t},\r\n\t\tfunction testSomeObj(t){ t.assertTrue(df.some(x, \"%2\")); },\r\n\t\tfunction testSomeRev1(t){ t.assertFalse(df.someRev([2, 4, 6], isOdd)); },\r\n\t\tfunction testSomeRev2(t){ t.assertTrue(df.someRev([1, 2, 3], isOdd)); },\r\n\r\n\t\tfunction testReduce1(t){ t.assertEqual(df.reduce([4, 2, 1], \"x-y\"), 1); },\r\n\t\tfunction testReduce2(t){ t.assertEqual(df.reduce([4, 2, 1], \"x-y\", 8), 1); },\r\n\t\tfunction testReduceIter(t){\r\n\t\t\tvar iter = new revArrayIter([1, 2, 4]);\r\n\t\t\tt.assertEqual(df.reduce(iter, \"x-y\"), 1);\r\n\t\t},\r\n\t\t\r\n\t\tfunction testReduceRight1(t){ t.assertEqual(df.reduceRight([4, 2, 1], \"x-y\"), -5); },\r\n\t\tfunction testReduceRight2(t){ t.assertEqual(df.reduceRight([4, 2, 1], \"x-y\", 8), 1); }\r\n\t]);\r\n})();\r\n"]}