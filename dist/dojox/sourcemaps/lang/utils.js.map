{"version":3,"sources":["lang/utils.js"],"names":["define","dojox","lang","du","getObject","empty","opts","Object","prototype","toString","clone","o","call","slice","delegate","mixin","coerceType","target","source","Number","eval","String","Boolean","updateWithObject","conv","x","t","updateWithPattern","pattern","merge","object","i","l","m","otype","mtype","Array","Math","max","length"],"mappings":";;;;;;;AAAAA,QAAQ,KAAM,mBACZ,SAASC,MAAOC,MACjB,IAAIC,GAAKD,KAAKE,UAAU,cAAc,EAAMH,OAExCI,SAAYC,KAAOC,OAAOC,UAAUC,SAEpCC,MAAQ,SAASC,GACpB,GAAGA,EACF,OAAOL,KAAKM,KAAKD,IAChB,IAAK,iBACJ,OAAOA,EAAEE,MAAM,GAChB,IAAK,kBACJ,OAAOX,KAAKY,SAASH,GAGxB,OAAOA,GAwGR,OArGAT,KAAKa,MAAMZ,IACVa,WAAY,SAASC,OAAQC,QAO5B,cAAcD,QACb,IAAK,SAAU,OAAOE,OAAOC,KAAK,IAAMF,OAAS,MACjD,IAAK,SAAU,OAAOG,OAAOH,QAC7B,IAAK,UAAW,OAAOI,QAAQF,KAAK,IAAMF,OAAS,MAEpD,OAAOE,KAAK,IAAMF,OAAS,MAG5BK,iBAAkB,SAASN,EAAQC,EAAQM,GAS1C,IAAIN,EAAS,OAAOD,EACpB,IAAI,IAAIQ,KAAKR,EACZ,GAAGQ,KAAKP,KAAYO,KAAKpB,OAAO,CAC/B,IAAIqB,EAAIT,EAAOQ,GACZC,GAAiB,iBAALA,EACdvB,GAAGoB,iBAAiBG,EAAGR,EAAOO,GAAID,GAElCP,EAAOQ,GAAKD,EAAOrB,GAAGa,WAAWU,EAAGR,EAAOO,IAAMf,MAAMQ,EAAOO,IAIjE,OAAOR,GAGRU,kBAAmB,SAASV,EAAQC,EAAQU,EAASJ,GAWpD,IAAIN,IAAWU,EAAU,OAAOX,EAChC,IAAI,IAAIQ,KAAKG,EACTH,KAAKP,KAAYO,KAAKpB,SACxBY,EAAOQ,GAAKD,EAAOrB,GAAGa,WAAWY,EAAQH,GAAIP,EAAOO,IAAMf,MAAMQ,EAAOO,KAGzE,OAAOR,GAGRY,MAAO,SAASC,EAAQf,GAOvB,GAAGA,EAAM,CACR,IAAyDW,EAAGK,EAAGC,EAAGC,EAA9DC,EAAQ5B,KAAKM,KAAKkB,GAASK,EAAQ7B,KAAKM,KAAKG,GACjD,OAAOoB,GACN,IAAK,iBACJ,GAAGA,GAASD,EAAM,CAEjB,IAAIH,EAAI,EAAGC,GADXN,EAAI,IAAIU,MAAMC,KAAKC,IAAIR,EAAOS,OAAQxB,EAAMwB,UAC3BA,OAAQR,EAAIC,IAAKD,EACjCL,EAAEK,GAAK5B,GAAG0B,MAAMC,EAAOC,GAAIhB,EAAMgB,IAElC,OAAOL,EAER,OAAOX,EAAMF,MAAM,GACpB,IAAK,kBACJ,GAAGsB,GAASD,GAASJ,EAAO,CAE3B,IAAIC,KADJL,EAAIxB,KAAKY,SAASgB,GACTf,EACLgB,KAAKD,GACPE,EAAIF,EAAOC,IACXE,EAAIlB,EAAMgB,MACDC,IACRN,EAAEK,GAAK5B,GAAG0B,MAAMG,EAAGC,KAGpBP,EAAEK,GAAK7B,KAAKQ,MAAMK,EAAMgB,IAG1B,OAAOL,EAER,OAAOxB,KAAKQ,MAAMK,IAGrB,OAAOA,KAIFZ","file":"../../lang/utils.js","sourcesContent":["define([\"..\", \"dojo/_base/lang\"], \r\n  function(dojox, lang){\r\n\tvar du = lang.getObject(\"lang.utils\", true, dojox);\r\n\t\r\n\tvar empty = {}, opts = Object.prototype.toString;\r\n\r\n\tvar clone = function(o){\r\n\t\tif(o){\r\n\t\t\tswitch(opts.call(o)){\r\n\t\t\t\tcase \"[object Array]\":\r\n\t\t\t\t\treturn o.slice(0);\r\n\t\t\t\tcase \"[object Object]\":\r\n\t\t\t\t\treturn lang.delegate(o);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn o;\r\n\t}\r\n\t\r\n\tlang.mixin(du, {\r\n\t\tcoerceType: function(target, source){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCoerces one object to the type of another.\r\n\t\t\t// target: Object\r\n\t\t\t//\t\tobject, which typeof result is used to coerce \"source\" object.\r\n\t\t\t// source: Object\r\n\t\t\t//\t\tobject, which will be forced to change type.\r\n\t\t\tswitch(typeof target){\r\n\t\t\t\tcase \"number\":\treturn Number(eval(\"(\" + source + \")\"));\r\n\t\t\t\tcase \"string\":\treturn String(source);\r\n\t\t\t\tcase \"boolean\":\treturn Boolean(eval(\"(\" + source + \")\"));\r\n\t\t\t}\r\n\t\t\treturn eval(\"(\" + source + \")\");\r\n\t\t},\r\n\t\t\r\n\t\tupdateWithObject: function(target, source, conv){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates an existing object in place with properties from an \"source\" object.\r\n\t\t\t// target: Object\r\n\t\t\t//\t\tthe \"target\" object to be updated\r\n\t\t\t// source: Object\r\n\t\t\t//\t\tthe \"source\" object, whose properties will be used to source the existed object.\r\n\t\t\t// conv: Boolean?\r\n\t\t\t//\t\tforce conversion to the original type\r\n\t\t\tif(!source){ return target; }\r\n\t\t\tfor(var x in target){\r\n\t\t\t\tif(x in source && !(x in empty)){\r\n\t\t\t\t\tvar t = target[x];\r\n\t\t\t\t\tif(t && typeof t == \"object\"){\r\n\t\t\t\t\t\tdu.updateWithObject(t, source[x], conv);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\ttarget[x] = conv ? du.coerceType(t, source[x]) : clone(source[x]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn target;\t// Object\r\n\t\t},\r\n\t\r\n\t\tupdateWithPattern: function(target, source, pattern, conv){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates an existing object in place with properties from an \"source\" object.\r\n\t\t\t// target: Object\r\n\t\t\t//\t\tthe \"target\" object to be updated\r\n\t\t\t// source: Object\r\n\t\t\t//\t\tthe \"source\" object, whose properties will be used to source the existed object.\r\n\t\t\t// pattern: Object\r\n\t\t\t//\t\tobject, whose properties will be used to pull values from the \"source\"\r\n\t\t\t// conv: Boolean?\r\n\t\t\t//\t\tforce conversion to the original type\r\n\t\t\tif(!source || !pattern){ return target; }\r\n\t\t\tfor(var x in pattern){\r\n\t\t\t\tif(x in source && !(x in empty)){\r\n\t\t\t\t\ttarget[x] = conv ? du.coerceType(pattern[x], source[x]) : clone(source[x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn target;\t// Object\r\n\t\t},\r\n\t\t\r\n\t\tmerge: function(object, mixin){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMerge two objects structurally, mixin properties will override object's properties.\r\n\t\t\t// object: Object\r\n\t\t\t//\t\toriginal object.\r\n\t\t\t// mixin: Object\r\n\t\t\t//\t\tadditional object, which properties will override object's properties.\r\n\t\t\tif(mixin){\r\n\t\t\t\tvar otype = opts.call(object), mtype = opts.call(mixin), t, i, l, m;\r\n\t\t\t\tswitch(mtype){\r\n\t\t\t\t\tcase \"[object Array]\":\r\n\t\t\t\t\t\tif(mtype == otype){\r\n\t\t\t\t\t\t\tt = new Array(Math.max(object.length, mixin.length));\r\n\t\t\t\t\t\t\tfor(i = 0, l = t.length; i < l; ++i){\r\n\t\t\t\t\t\t\t\tt[i] = du.merge(object[i], mixin[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn t;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn mixin.slice(0);\r\n\t\t\t\t\tcase \"[object Object]\":\r\n\t\t\t\t\t\tif(mtype == otype && object){\r\n\t\t\t\t\t\t\tt = lang.delegate(object);\r\n\t\t\t\t\t\t\tfor(i in mixin){\r\n\t\t\t\t\t\t\t\tif(i in object){\r\n\t\t\t\t\t\t\t\t\tl = object[i];\r\n\t\t\t\t\t\t\t\t\tm = mixin[i];\r\n\t\t\t\t\t\t\t\t\tif(m !== l){\r\n\t\t\t\t\t\t\t\t\t\tt[i] = du.merge(l, m);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tt[i] = lang.clone(mixin[i]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn t;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn lang.clone(mixin);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn mixin;\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn du;\r\n});\r\n"]}