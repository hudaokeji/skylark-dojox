{"version":3,"sources":["lang/aspect/memoizer.js"],"names":["dojo","provide","aop","dojox","lang","aspect","memoize1","around","key","t","u","ctx","getContext","self","joinPoint","that","instance","__memoizerCache","targetName","ret","proceed","apply","arguments","memoizer","keyMaker","length","memoizeN"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,8BAEb,WACC,IAAIC,EAAMC,MAAMC,KAAKC,OAEjBC,GACHC,OAAQ,SAASC,GAChB,IAAuEC,EAAGC,EAAtEC,EAAMT,EAAIU,aAAcC,EAAOF,EAAIG,UAAWC,EAAOJ,EAAIK,SAC7D,IAAIP,EAAIM,EAAKE,mBAAqBR,EAAIA,EAAEI,EAAKK,cAAiBV,KAAOC,EACpE,OAAOA,EAAED,GAEV,IAAIW,EAAMjB,EAAIkB,QAAQC,MAAM,KAAMC,WAGlC,OAFKb,EAAIM,EAAKE,mBAAmBR,EAAIM,EAAKE,qBACrCP,EAAID,EAAEI,EAAKK,eAAeR,EAAID,EAAEI,EAAKK,gBACnCR,EAAEF,GAAOW,IAoBlBjB,EAAIqB,SAAW,SAAuBC,GAQrC,OAA2B,GAApBF,UAAUG,OAAcnB,EAxBjB,SAAqBkB,GACnC,OACCjB,OAAQ,WACP,IAAuEE,EAAGC,EAAtEC,EAAMT,EAAIU,aAAcC,EAAOF,EAAIG,UAAWC,EAAOJ,EAAIK,SAC5DR,EAAOgB,EAASH,MAAMN,EAAMO,WAC7B,IAAIb,EAAIM,EAAKE,mBAAqBR,EAAIA,EAAEI,EAAKK,cAAiBV,KAAOC,EACpE,OAAOA,EAAED,GAEV,IAAIW,EAAMjB,EAAIkB,QAAQC,MAAM,KAAMC,WAGlC,OAFKb,EAAIM,EAAKE,mBAAmBR,EAAIM,EAAKE,qBACrCP,EAAID,EAAEI,EAAKK,eAAeR,EAAID,EAAEI,EAAKK,gBACnCR,EAAEF,GAAOW,IAawBO,CAASF,IAxCrD","file":"../../../lang/aspect/memoizer.js","sourcesContent":["dojo.provide(\"dojox.lang.aspect.memoizer\");\r\n\r\n(function(){\r\n\tvar aop = dojox.lang.aspect;\r\n\r\n\tvar memoize1 = {\r\n\t\taround: function(key){\r\n\t\t\tvar ctx = aop.getContext(), self = ctx.joinPoint, that = ctx.instance, t, u, ret;\r\n\t\t\tif((t = that.__memoizerCache) && (t = t[self.targetName]) && (key in t)){\r\n\t\t\t\treturn t[key];\r\n\t\t\t}\r\n\t\t\tvar ret = aop.proceed.apply(null, arguments);\r\n\t\t\tif(!(t = that.__memoizerCache)){ t = that.__memoizerCache = {}; }\r\n\t\t\tif(!(u = t[self.targetName])){ u = t[self.targetName] = {}; }\r\n\t\t\treturn u[key] = ret;\r\n\t\t}\r\n\t};\r\n\r\n\tvar memoizeN = function(/*Function*/keyMaker){\r\n\t\treturn {\r\n\t\t\taround: function(/*arguments*/){\r\n\t\t\t\tvar ctx = aop.getContext(), self = ctx.joinPoint, that = ctx.instance, t, u, ret,\r\n\t\t\t\t\tkey  = keyMaker.apply(that, arguments);\r\n\t\t\t\tif((t = that.__memoizerCache) && (t = t[self.targetName]) && (key in t)){\r\n\t\t\t\t\treturn t[key];\r\n\t\t\t\t}\r\n\t\t\t\tvar ret = aop.proceed.apply(null, arguments);\r\n\t\t\t\tif(!(t = that.__memoizerCache)){ t = that.__memoizerCache = {}; }\r\n\t\t\t\tif(!(u = t[self.targetName])){ u = t[self.targetName] = {}; }\r\n\t\t\t\treturn u[key] = ret;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\taop.memoizer = function(/*Function?*/ keyMaker){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an object, which can be used to count calls to methods.\r\n\t\t//\r\n\t\t// keyMaker:\r\n\t\t//\t\tthe function, which takes method's arguments and returns a key,\r\n\t\t//\t\twhich can be used to index the result.\r\n\r\n\t\treturn arguments.length == 0 ? memoize1 : memoizeN(keyMaker);\t// Object\r\n\t};\r\n})();"]}