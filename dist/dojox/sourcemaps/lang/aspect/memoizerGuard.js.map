{"version":3,"sources":["lang/aspect/memoizerGuard.js"],"names":["dojo","provide","aop","dojox","lang","aspect","memoizerGuard","method","after","t","that","getContext","instance","__memoizerCache","arguments","length","isArray","forEach","m","reset"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,mCAEb,WACC,IAAIC,EAAMC,MAAMC,KAAKC,OAcrBH,EAAII,cAAgB,SAA2BC,GAW9C,OACCC,MAAO,YAzBA,SAA2BD,GAClC,IAAsCE,EAAlCC,EAAOR,EAAIS,aAAaC,UACvBH,EAAIC,EAAKG,mBACS,GAApBC,UAAUC,cACLL,EAAKG,gBACJb,KAAKgB,QAAQT,GACrBP,KAAKiB,QAAQV,EAAQ,SAASW,UAAWT,EAAES,YAEpCT,EAAEF,IAiBSY,CAAMZ,MA3B5B","file":"../../../lang/aspect/memoizerGuard.js","sourcesContent":["dojo.provide(\"dojox.lang.aspect.memoizerGuard\");\r\n\r\n(function(){\r\n\tvar aop = dojox.lang.aspect,\r\n\t\treset = function(/*String|Array?*/ method){\r\n\t\t\tvar that = aop.getContext().instance, t;\r\n\t\t\tif(!(t = that.__memoizerCache)){ return; }\r\n\t\t\tif(arguments.length == 0){\r\n\t\t\t\tdelete that.__memoizerCache;\r\n\t\t\t}else if(dojo.isArray(method)){\r\n\t\t\t\tdojo.forEach(method, function(m){ delete t[m]; });\r\n\t\t\t}else{\r\n\t\t\t\tdelete t[method];\r\n\t\t\t}\r\n\t\t};\r\n\r\n\r\n\taop.memoizerGuard = function(/*String|Array?*/ method){\r\n\t\t// summary:\r\n\t\t//\t\tInvalidates the memoizer's cache (see dojox.lang.aspect.memoizer)\r\n\t\t//\t\tafter calling certain methods.\r\n\t\t//\r\n\t\t// method:\r\n\t\t//\t\tOptional method's name to be guarded: only cache for\r\n\t\t//\t\tthis method will be invalidated on call. Can be a string\r\n\t\t//\t\tor an array of method names. If omitted the whole cache\r\n\t\t//\t\twill be invalidated.\r\n\r\n\t\treturn {\t// Object\r\n\t\t\tafter: function(){ reset(method); }\r\n\t\t};\r\n\t};\r\n})();"]}