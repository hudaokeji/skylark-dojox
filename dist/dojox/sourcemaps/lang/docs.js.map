{"version":3,"sources":["lang/docs.js"],"names":["dojo","provide","error","console","log","initialized","declaredClasses","requiredModules","_docs","dojox","lang","docs","_loadedDocs","schemifyClass","clazz","name","getType","typeDef","typeObj","dontModify","type","optional","array","replace","match","toLowerCase","getObject","items","test","tags","readonly","actualSchemifyClass","docForClass","description","properties","methods","props","i","l","length","scope","summary","methodDef","parameters","j","k","param","paramDef","usage","ret","returns","superclass","requireDocs","moduleName","push","defaultDeclare","declare","apply","this","arguments","mixin","defaultRequire","require","init","async","loadFullDocs","xhrGet","sync","url","baseUrl","handleAs","addCallbacks","obj","Function","e","getSplitDocs","addCallback","firstMod","shift","forEach","mod"],"mappings":"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","file":"../../lang/docs.js","sourcesContent":["dojo.provide(\"dojox.lang.docs\");\r\n\r\n// Extracts information from the API docs to apply a schema representation to dojo classes.\r\n// This can be utilized for runtime metadata retrieval and type checking\r\n(function(){\r\n\tfunction error(error){\r\n\t\tconsole.log(\"Warning, the API docs must be available at ../util/docscripts/api.json \"+\r\n\t\t\"or ../util/docscripts/api/*.json \"+\r\n\t\t\"in order for dojox.lang.docs to supply schema information, but it could not be loaded: \" + error);\r\n\t}\r\n\r\n\tvar declaredClasses = {};\r\n\tvar requiredModules = [];\r\n\tvar _docs = dojox.lang.docs._loadedDocs = {};\r\n\r\n\tvar schemifyClass = function(clazz, name){\r\n\t\t// initial implementation records classes until they are ready\r\n\t\tdeclaredClasses[name] = clazz;\r\n\t};\r\n\tvar getType = function(typeDef){\r\n\t\tvar type = typeDef.type || '';\r\n\t\tvar typeObj, optional = false, array = false, dontModify;\r\n\t\ttype = type.replace(/\\?/, function(){\r\n\t\t\toptional = true;\r\n\t\t\treturn '';\r\n\t\t});\r\n\t\ttype = type.replace(/\\[\\]/, function(){\r\n\t\t\tarray = true;\r\n\t\t\treturn '';\r\n\t\t});\r\n\t\tif(type.match(/HTML/)){\r\n\t\t\t// HTML String and other \"types\" of strings are really just strings\r\n\t\t\ttype = \"string\";\r\n\t\t}else if(type == 'String' || type == 'Number' ||\r\n\t\t\t\ttype == 'Boolean' || type == 'Object' ||\r\n\t\t\t\ttype == 'Array' || type == 'Integer' || type == \"Function\"){\r\n\t\t\ttype = type.toLowerCase();\r\n\t\t}else if(type == \"bool\"){\r\n\t\t\ttype = \"boolean\";\r\n\t\t}else if(type){\r\n\t\t\ttypeObj = dojo.getObject(type) || {};\r\n\t\t\tdontModify = true;\r\n\t\t}else{\r\n\t\t\ttypeObj = {};\r\n\t\t}\r\n\t\ttypeObj = typeObj || {type:type};\r\n\t\tif(array){\r\n\t\t\ttypeObj = {items:typeObj, type:\"array\"};\r\n\t\t\tdontModify = false;\r\n\t\t}\r\n\t\tif(!dontModify){\r\n\t\t\tif(optional){\r\n\t\t\t\ttypeObj.optional = true;\r\n\t\t\t}\r\n\t\t\tif(/const/.test(typeDef.tags)){\r\n\t\t\t\ttypeObj.readonly = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn typeObj;\r\n\t};\r\n\tvar actualSchemifyClass = function(clazz, name){\r\n\t\tvar docForClass = _docs[name];\r\n\t\tif(docForClass){\r\n\t\t\tclazz.description = docForClass.description;\r\n\t\t\tclazz.properties = {};\r\n\t\t\tclazz.methods = {};\r\n\r\n\t\t\tif(docForClass.properties){\r\n\t\t\t\tvar props = docForClass.properties;\r\n\t\t\t\tfor(var i=0, l=props.length; i<l; i++){\r\n\t\t\t\t\tif(props[i].scope == \"prototype\"){\r\n\t\t\t\t\t\tvar propDef = clazz.properties[props[i].name] = getType(props[i]);\r\n\t\t\t\t\t\tpropDef.description = props[i].summary;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// translate the methods to JSON Schema\r\n\t\t\tif(docForClass.methods){\r\n\t\t\t\tvar methods = docForClass.methods;\r\n\t\t\t\tfor(i=0, l=methods.length; i<l; i++){\r\n\t\t\t\t\tname = methods[i].name;\r\n\t\t\t\t\tif(name && methods[i].scope == \"prototype\"){\r\n\t\t\t\t\t\tvar methodDef = clazz.methods[name] = {};\r\n\t\t\t\t\t\tmethodDef.description = methods[i].summary;\r\n\t\t\t\t\t\tvar parameters = methods[i].parameters;\r\n\t\t\t\t\t\tif(parameters){\r\n\t\t\t\t\t\t\tmethodDef.parameters = [];\r\n\t\t\t\t\t\t\tfor(var j=0, k=parameters.length; j<k; j++){\r\n\t\t\t\t\t\t\t\tvar param = parameters[j];\r\n\t\t\t\t\t\t\t\tvar paramDef = methodDef.parameters[j] = getType(param);\r\n\t\t\t\t\t\t\t\tparamDef.name = param.name;\r\n\t\t\t\t\t\t\t\tparamDef.optional = \"optional\" == param.usage;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar ret = methods[i]['return-types'];\r\n\t\t\t\t\t\tif(ret && ret[0]){\r\n\t\t\t\t\t\t\tvar returns = getType(ret[0]);\r\n\t\t\t\t\t\t\tif(returns.type){\r\n\t\t\t\t\t\t\t\tmethodDef.returns = returns;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar superclass = docForClass.superclass;\r\n\t\t\tif(superclass){\r\n\t\t\t\tclazz[\"extends\"] = dojo.getObject(superclass);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvar requireDocs = function(moduleName){\r\n\t\trequiredModules.push(moduleName);\r\n\t};\r\n\r\n\t// hook into all declared classes\r\n\tvar defaultDeclare = dojo.declare;\r\n\tdojo.declare = function(name){\r\n\t\tvar clazz = defaultDeclare.apply(this, arguments);\r\n\t\tschemifyClass(clazz, name);\r\n\t\treturn clazz;\r\n\t};\r\n\tdojo.mixin(dojo.declare, defaultDeclare);\r\n\tvar initialized;\r\n\r\n\t// hook into dojo.require\r\n\tvar defaultRequire = dojo.require;\r\n\tdojo.require = function(moduleName){\r\n\t\trequireDocs(moduleName);\r\n\t\tvar module = defaultRequire.apply(this, arguments);\r\n\t\treturn module;\r\n\t};\r\n\r\n\tdojox.lang.docs.init = function(/*Boolean*/async){\r\n\t\t// summary:\r\n\t\t//\t\tLoads the documentation and applies it to the previously defined classes\r\n\t\t//\t\tand any future defined classes\r\n\t\t// async:\r\n\t\t//\t\t If true, the documentation will be loaded asynchronously\r\n\t\tfunction loadFullDocs(){\r\n\t\t\tdojo.require = defaultRequire;\r\n\t\t\trequiredModules = null;\r\n\t\t\ttry{\r\n\t\t\t\tdojo.xhrGet({\r\n\t\t\t\t\tsync:!async,\r\n\t\t\t\t\turl: dojo.baseUrl + '../util/docscripts/api.json',\r\n\t\t\t\t\thandleAs: 'text'\r\n\t\t\t\t}).addCallbacks(function(obj){\r\n\t\t\t\t\t_docs = (new Function(\"return \" + obj))();\r\n\t\t\t\t\tobj = null;\r\n\t\t\t\t\tschemifyClass = actualSchemifyClass;\r\n\r\n\t\t\t\t\tfor(var i in declaredClasses){\r\n\t\t\t\t\t\tschemifyClass(declaredClasses[i], i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdeclaredClasses = null;\r\n\t\t\t\t}, error);\r\n\t\t\t}catch(e){\r\n\t\t\t\terror(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(initialized){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tinitialized = true;\r\n\r\n\t\tvar getSplitDocs = function(moduleName, sync){\r\n\t\t\treturn dojo.xhrGet({\r\n\t\t\t\tsync: sync||!async,\r\n\t\t\t\turl: dojo.baseUrl + '../util/docscripts/api/' + moduleName + '.json',\r\n\t\t\t\thandleAs: 'text'\r\n\t\t\t}).addCallback(function(obj){\r\n\t\t\t\tobj = (new Function(\"return \" + obj))();\r\n\t\t\t\tfor(var clazz in obj){\r\n\t\t\t\t\tif(!_docs[clazz]){\r\n\t\t\t\t\t\t_docs[clazz] = obj[clazz];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\ttry{\r\n\t\t\tvar firstMod = requiredModules.shift();\r\n\t\t\tgetSplitDocs(firstMod, true).addCallbacks(function(){\r\n\t\t\t\trequireDocs = function(moduleName){\r\n\t\t\t\t\tif(!_docs[moduleName]){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tgetSplitDocs(moduleName);\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t_docs[moduleName] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t//console.log(requiredModules);\r\n\t\t\t\tdojo.forEach(requiredModules, function(mod){\r\n\t\t\t\t\trequireDocs(mod);\r\n\t\t\t\t});\r\n\t\t\t\trequiredModules = null;\r\n\r\n\t\t\t\tschemifyClass = actualSchemifyClass;\r\n\r\n\t\t\t\tfor(i in declaredClasses){\r\n\t\t\t\t\tschemifyClass(declaredClasses[i], i);\r\n\t\t\t\t}\r\n\t\t\t\tdeclaredClasses = null;\r\n\t\t\t},loadFullDocs);\r\n\t\t}catch(e){\r\n\t\t\tloadFullDocs();\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n})();\r\n"]}