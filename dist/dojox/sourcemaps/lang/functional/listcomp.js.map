{"version":3,"sources":["lang/functional/listcomp.js"],"names":["dojo","provide","g_re","listcomp","s","frag","split","act","match","head","tail","i","l","length","a","f","test","replace","push","join","mixin","dojox","lang","functional","buildListcomp","compileListcomp","Function"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,kCASb,WACC,IAAIC,EAAO,mBAEPC,EAAW,SAAoBC,GAGlC,IAFA,IAAIC,EAAOD,EAAEE,MAAMJ,GAAOK,EAAMH,EAAEI,MAAMN,GACvCO,GAAQ,eAAgBC,KAAWC,EAAI,EAAGC,EAAIL,EAAIM,OAC7CF,EAAIC,GAAE,CACX,IAAIE,EAAIP,EAAII,GAAII,EAAIV,IAAOM,GACnB,OAALG,GAAe,mBAAmBE,KAAKD,KACzCA,EAAIA,EAAEE,QAAQ,SAAU,UAEzBR,EAAKS,KAAKJ,EAAGC,EAAG,KAChBL,EAAKQ,KAAK,KAEX,OAAOT,EAAKU,KAAK,IAAM,UAAYd,EAAK,GAAK,KAAOK,EAAKS,KAAK,IAAM,aAGrEnB,KAAKoB,MAAMC,MAAMC,KAAKC,YACrBC,cAAe,SAAoBpB,GASlC,MAAO,cAAgBD,EAASC,GAAK,KAEtCqB,gBAAiB,SAAoBrB,GAQpC,OAAO,IAAIsB,YAAavB,EAASC,KAElCD,SAAU,SAAoBC,GAG7B,OAAO,IAAKsB,YAAavB,EAASC,GAA3B,MA1CV","file":"../../../lang/functional/listcomp.js","sourcesContent":["dojo.provide(\"dojox.lang.functional.listcomp\");\r\n\r\n// This module adds high-level functions and related constructs:\r\n//\t- list comprehensions similar to JavaScript 1.7\r\n\r\n// Notes:\r\n//\t- listcomp() produces functions, which after the compilation step are\r\n//\t\tas fast as regular JS functions (at least theoretically).\r\n\r\n(function(){\r\n\tvar g_re = /\\bfor\\b|\\bif\\b/gm;\r\n\r\n\tvar listcomp = function(/*String*/ s){\r\n\t\tvar frag = s.split(g_re), act = s.match(g_re),\r\n\t\t\thead = [\"var r = [];\"], tail = [], i = 0, l = act.length;\r\n\t\twhile(i < l){\r\n\t\t\tvar a = act[i], f = frag[++i];\r\n\t\t\tif(a == \"for\" && !/^\\s*\\(\\s*(;|var)/.test(f)){\r\n\t\t\t\tf = f.replace(/^\\s*\\(/, \"(var \");\r\n\t\t\t}\r\n\t\t\thead.push(a, f, \"{\");\r\n\t\t\ttail.push(\"}\");\r\n\t\t}\r\n\t\treturn head.join(\"\") + \"r.push(\" + frag[0] + \");\" + tail.join(\"\") + \"return r;\";\t// String\r\n\t};\r\n\r\n\tdojo.mixin(dojox.lang.functional, {\r\n\t\tbuildListcomp: function(/*String*/ s){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuilds a function from a text snippet, which represents a valid\r\n\t\t\t//\t\tJS 1.7 list comprehension, returns a string, which represents the function.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method returns a textual representation of a function\r\n\t\t\t//\t\tbuilt from the list comprehension text snippet (conformant to JS 1.7).\r\n\t\t\t//\t\tIt is meant to be evaled in the proper context, so local variable can be\r\n\t\t\t//\t\tpulled from the environment.\r\n\t\t\treturn \"function(){\" + listcomp(s) + \"}\";\t// String\r\n\t\t},\r\n\t\tcompileListcomp: function(/*String*/ s){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuilds a function from a text snippet, which represents a valid\r\n\t\t\t//\t\tJS 1.7 list comprehension, returns a function object.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method returns a function built from the list\r\n\t\t\t//\t\tcomprehension text snippet (conformant to JS 1.7). It is meant to be\r\n\t\t\t//\t\treused several times.\r\n\t\t\treturn new Function([], listcomp(s));\t// Function\r\n\t\t},\r\n\t\tlistcomp: function(/*String*/ s){\r\n\t\t\t// summary:\r\n\t\t\t//\t\texecutes the list comprehension building an array.\r\n\t\t\treturn (new Function([], listcomp(s)))();\t// Array\r\n\t\t}\r\n\t});\r\n})();\r\n"]}