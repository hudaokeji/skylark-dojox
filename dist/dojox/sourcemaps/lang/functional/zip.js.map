{"version":3,"sources":["lang/functional/zip.js"],"names":["dojo","provide","df","dojox","lang","functional","mixin","zip","j","p","n","arguments","length","m","i","t","Array","Math","min","unzip","a","apply"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,6BAQb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WAEpBL,KAAKM,MAAMJ,GAEVK,IAAK,WAUJ,IADA,IAA4EC,EAAGC,EAA3EC,EAAIC,UAAU,GAAGC,OAAQC,EAAIF,UAAUC,OAAQE,EAAI,EAAGC,EAAI,IAAIC,MAAMN,GAClEI,EAAID,EAAGH,EAAIO,KAAKC,IAAIR,EAAGC,UAAUG,KAAKF,SAC5C,IAAIE,EAAI,EAAGA,EAAIJ,IAAKI,EAAE,CAErB,IADAL,EAAI,IAAIO,MAAMH,GACVL,EAAI,EAAGA,EAAIK,EAAGJ,EAAED,GAAKG,UAAUH,GAAGM,KAAMN,GAC5CO,EAAED,GAAKL,EAER,OAAOM,GAERI,MAAO,SAAmBC,GASzB,OAAOlB,EAAGK,IAAIc,MAAM,KAAMD,MAhC7B","file":"../../../lang/functional/zip.js","sourcesContent":["dojo.provide(\"dojox.lang.functional.zip\");\r\n\r\n// This module adds high-level functions and related constructs:\r\n//\t- zip combiners\r\n\r\n// Defined methods:\r\n//\t- operate on dense arrays\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional;\r\n\r\n\tdojo.mixin(df, {\r\n\t\t// combiners\r\n\t\tzip: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns an array of arrays, where the i-th array\r\n\t\t\t//\t\tcontains the i-th element from each of the argument arrays.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis is the venerable zip combiner (for example,\r\n\t\t\t//\t\tsee Python documentation for general details). The returned\r\n\t\t\t//\t\tarray is truncated to match the length of the shortest input\r\n\t\t\t//\t\tarray.\r\n\t\t\tvar n = arguments[0].length, m = arguments.length, i = 1, t = new Array(n), j, p;\r\n\t\t\tfor(; i < m; n = Math.min(n, arguments[i++].length));\r\n\t\t\tfor(i = 0; i < n; ++i){\r\n\t\t\t\tp = new Array(m);\r\n\t\t\t\tfor(j = 0; j < m; p[j] = arguments[j][i], ++j);\r\n\t\t\t\tt[i] = p;\r\n\t\t\t}\r\n\t\t\treturn t;\t// Array\r\n\t\t},\r\n\t\tunzip: function(/*Array*/ a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsimilar to dojox.lang.functional.zip(), but takes\r\n\t\t\t//\t\ta single array of arrays as the input.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis function is similar to dojox.lang.functional.zip()\r\n\t\t\t//\t\tand can be used to unzip objects packed by\r\n\t\t\t//\t\tdojox.lang.functional.zip(). It is here mostly to provide\r\n\t\t\t//\t\ta short-cut for the different method signature.\r\n\t\t\treturn df.zip.apply(null, a);\t// Array\r\n\t\t}\r\n\t});\r\n})();\r\n"]}