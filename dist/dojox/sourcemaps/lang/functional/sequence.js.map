{"version":3,"sources":["lang/functional/sequence.js"],"names":["define","kernel","lang","df","mixin","repeat","n","f","z","o","global","lambda","t","Array","i","call","until","pr","push"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,kBAAmB,YAAa,SAASC,EAAQC,EAAMC,GAkCnF,OAvBAD,EAAKE,MAAMD,GAEVE,OAAQ,SAAoBC,EAA6BC,EAAcC,EAAeC,GAIrFA,EAAIA,GAAKR,EAAOS,OAAQH,EAAIJ,EAAGQ,OAAOJ,GACtC,IAAIK,EAAI,IAAIC,MAAMP,GAAIQ,EAAI,EAE1B,IADAF,EAAE,GAAKJ,EACDM,EAAIR,EAAGM,EAAEE,GAAKN,EAAID,EAAEQ,KAAKN,EAAGD,KAAMM,GACxC,OAAOF,GAERI,MAAO,SAAmCC,EAA8BV,EAAcC,EAAeC,GAIpGA,EAAIA,GAAKR,EAAOS,OAAQH,EAAIJ,EAAGQ,OAAOJ,GAAIU,EAAKd,EAAGQ,OAAOM,GAEzD,IADA,IAAIL,MACGK,EAAGF,KAAKN,EAAGD,GAAII,EAAEM,KAAKV,GAAIA,EAAID,EAAEQ,KAAKN,EAAGD,IAC/C,OAAOI,KAIFT","file":"../../../lang/functional/sequence.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"./lambda\"], function(kernel, lang, df){\r\n\r\n// This module adds high-level functions and related constructs:\r\n//\t- sequence generators\r\n\r\n// If you want more general sequence builders check out listcomp.js and\r\n// unfold() (in fold.js).\r\n\r\n// Defined methods:\r\n//\t- take any valid lambda argument as the functional argument\r\n\r\n\tlang.mixin(df, {\r\n\t\t// sequence generators\r\n\t\trepeat: function(/*Number*/ n, /*Function|String|Array*/ f, /*Object*/ z, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuilds an array by repeatedly applying a unary function N times\r\n\t\t\t//\t\twith a seed value Z. N should be greater than 0.\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar t = new Array(n), i = 1;\r\n\t\t\tt[0] = z;\r\n\t\t\tfor(; i < n; t[i] = z = f.call(o, z), ++i);\r\n\t\t\treturn t;\t// Array\r\n\t\t},\r\n\t\tuntil: function(/*Function|String|Array*/ pr, /*Function|String|Array*/ f, /*Object*/ z, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuilds an array by repeatedly applying a unary function with\r\n\t\t\t//\t\ta seed value Z until the predicate is satisfied.\r\n\t\t\to = o || kernel.global; f = df.lambda(f); pr = df.lambda(pr);\r\n\t\t\tvar t = [];\r\n\t\t\tfor(; !pr.call(o, z); t.push(z), z = f.call(o, z));\r\n\t\t\treturn t;\t// Array\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn df;\r\n});\r\n"]}