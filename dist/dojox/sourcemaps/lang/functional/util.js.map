{"version":3,"sources":["lang/functional/util.js"],"names":["dojo","provide","require","df","dojox","lang","functional","mixin","inlineLambda","lambda","init","add2dict","s","rawLambda","forEach","args","i","ap","n","length","Math","min","a","Array","j","body","join"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,8BAEbD,KAAKE,QAAQ,gCAKb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WAEpBN,KAAKO,MAAMJ,GACVK,aAAc,SAAoBC,EAAyBC,EAAoBC,GAc9E,IAAIC,EAAIT,EAAGU,UAAUJ,GAClBE,GACFR,EAAGW,QAAQF,EAAEG,KAAMJ,GAEpB,IAE2BK,EAFvBC,EAAoB,iBAARP,EACfQ,EAAID,EAAKL,EAAEG,KAAKI,OAASC,KAAKC,IAAIT,EAAEG,KAAKI,OAAQT,EAAKS,QACtDG,EAAI,IAAIC,MAAM,EAAIL,EAAI,GAAOM,EAAI,EAClC,IAAIR,EAAI,EAAGA,EAAIE,IAAKF,EACnBM,EAAEE,KAAOZ,EAAEG,KAAKC,GAChBM,EAAEE,KAAO,IACTF,EAAEE,KAAOP,EAAKP,EAAO,IAAMM,EAAI,IAAKN,EAAKM,GACzCM,EAAEE,KAAO,IAMV,OAJAF,EAAE,GAAK,IACPA,EAAEE,KAAO,IACTF,EAAEE,KAAOZ,EAAEa,KACXH,EAAEE,GAAK,KACAF,EAAEI,KAAK,OAnCjB","file":"../../../lang/functional/util.js","sourcesContent":["dojo.provide(\"dojox.lang.functional.util\");\r\n\r\ndojo.require(\"dojox.lang.functional.lambda\");\r\n\r\n// This module provides helpers:\r\n//\t- inlining string lambda functions.\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional;\r\n\r\n\tdojo.mixin(df, {\r\n\t\tinlineLambda: function(/*String*/ lambda, /*String|Array*/ init, /*Function?*/ add2dict){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates the inlined version of a string lambda.\r\n\t\t\t// lambda:\r\n\t\t\t//\t\tThe String variable representing the lambda function.\r\n\t\t\t// init:\r\n\t\t\t//\t\tConveys how to initialize parameters. If it is a String, then the apply() method\r\n\t\t\t//\t\twould be emulated treating \"init\" as a list of input parameters.\r\n\t\t\t//\t\tIt it is an Array, then the call() method is emulated treating array members\r\n\t\t\t//\t\tas input parameters.\r\n\t\t\t// add2dict:\r\n\t\t\t//\t\tThe optional function, which is used to record names of lambda parameters.\r\n\t\t\t//\t\tIf supplied, this function is called with a name of every parameter.\r\n\r\n\t\t\tvar s = df.rawLambda(lambda);\r\n\t\t\tif(add2dict){\r\n\t\t\t\tdf.forEach(s.args, add2dict);\r\n\t\t\t}\r\n\t\t\tvar ap = typeof init == \"string\",\t// apply or call?\r\n\t\t\t\tn = ap ? s.args.length : Math.min(s.args.length, init.length),\r\n\t\t\t\ta = new Array(4 * n + 4), i, j = 1;\r\n\t\t\tfor(i = 0; i < n; ++i){\r\n\t\t\t\ta[j++] = s.args[i];\r\n\t\t\t\ta[j++] = \"=\";\r\n\t\t\t\ta[j++] = ap ? init + \"[\" + i + \"]\": init[i];\r\n\t\t\t\ta[j++] = \",\";\r\n\t\t\t}\r\n\t\t\ta[0] = \"(\";\r\n\t\t\ta[j++] = \"(\";\r\n\t\t\ta[j++] = s.body;\r\n\t\t\ta[j] = \"))\";\r\n\t\t\treturn a.join(\"\");\t// String\r\n\t\t}\r\n\t});\r\n})();\r\n"]}