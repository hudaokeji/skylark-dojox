{"version":3,"sources":["lang/functional/curry.js"],"names":["dojo","provide","require","df","dojox","lang","functional","ap","Array","prototype","currying","info","args","concat","slice","call","arguments","length","arity","func","apply","this","mixin","curry","f","lambda","arg","partial","t","a","l","p","i","push","mixer","mix","flip"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,+BAEbD,KAAKE,QAAQ,gCAcb,WACC,IAAIC,EAAKC,MAAMC,KAAKC,WAAYC,EAAKC,MAAMC,UAEvCC,EAAW,SAAoBC,GAClC,OAAO,WACN,IAAIC,EAAOD,EAAKC,KAAKC,OAAON,EAAGO,MAAMC,KAAKC,UAAW,IACrD,OAAGA,UAAUC,OAASN,EAAKC,KAAKK,OAASN,EAAKO,MACtCR,GAAUS,KAAMR,EAAKQ,KAAMD,MAAOP,EAAKO,MAAON,KAAMA,IAErDD,EAAKQ,KAAKC,MAAMC,KAAMT,KAI/BZ,KAAKsB,MAAMnB,GAEVoB,MAAO,SAAmCC,EAAeN,GAMxD,OAFAM,EAAIrB,EAAGsB,OAAOD,GACdN,EAAwB,iBAATA,EAAoBA,EAAQM,EAAEP,OACtCP,GAAUS,KAAMK,EAAGN,MAAOA,EAAON,WAEzCc,OACAC,QAAS,SAAmCH,GAS3C,IAAyEI,EAArEC,EAAIb,UAAWc,EAAID,EAAEZ,OAAQL,EAAO,IAAIJ,MAAMsB,EAAI,GAAIC,KAAQC,EAAI,EAEtE,IADAR,EAAIrB,EAAGsB,OAAOD,GACRQ,EAAIF,IAAKE,EACdJ,EAAIC,EAAEG,GACNpB,EAAKoB,EAAI,GAAKJ,EACXA,IAAMzB,EAAGuB,KACXK,EAAEE,KAAKD,EAAI,GAGb,OAAO,WAGN,IAFA,IAAIJ,EAAIrB,EAAGO,MAAMC,KAAKH,EAAM,GAC3BoB,EAAI,EAAGF,EAAIC,EAAEd,OACRe,EAAIF,IAAKE,EACdJ,EAAEG,EAAEC,IAAMhB,UAAUgB,GAErB,OAAOR,EAAEJ,MAAMC,KAAMO,KAIvBM,MAAO,SAAmCV,EAAaW,GAMtD,OADAX,EAAIrB,EAAGsB,OAAOD,GACP,WAEN,IADA,IAAII,EAAI,IAAIpB,MAAM2B,EAAIlB,QAASe,EAAI,EAAGF,EAAIK,EAAIlB,OACxCe,EAAIF,IAAKE,EACdJ,EAAEI,GAAKhB,UAAUmB,EAAIH,IAEtB,OAAOR,EAAEJ,MAAMC,KAAMO,KAGvBQ,KAAM,SAAmCZ,GAKxC,OADAA,EAAIrB,EAAGsB,OAAOD,GACP,WAGN,IADA,IAAIK,EAAIb,UAAWc,EAAID,EAAEZ,OAAS,EAAGW,EAAI,IAAIpB,MAAMsB,EAAI,GAAIE,EAAI,EACzDA,GAAKF,IAAKE,EACfJ,EAAEE,EAAIE,GAAKH,EAAEG,GAEd,OAAOR,EAAEJ,MAAMC,KAAMO,OA7EzB","file":"../../../lang/functional/curry.js","sourcesContent":["dojo.provide(\"dojox.lang.functional.curry\");\r\n\r\ndojo.require(\"dojox.lang.functional.lambda\");\r\n\r\n// This module adds high-level functions and related constructs:\r\n//\t- currying and partial functions\r\n//\t- argument pre-processing: mixer and flip\r\n\r\n// Acknowledgements:\r\n//\t- partial() is based on work by Oliver Steele\r\n//\t\t(http://osteele.com/sources/javascript/functional/functional.js)\r\n//\t\twhich was published under MIT License\r\n\r\n// Defined methods:\r\n//\t- take any valid lambda argument as the functional argument\r\n\r\n(function(){\r\n\tvar df = dojox.lang.functional, ap = Array.prototype;\r\n\r\n\tvar currying = function(/*Object*/ info){\r\n\t\treturn function(){\t// Function\r\n\t\t\tvar args = info.args.concat(ap.slice.call(arguments, 0));\r\n\t\t\tif(arguments.length + info.args.length < info.arity){\r\n\t\t\t\treturn currying({func: info.func, arity: info.arity, args: args});\r\n\t\t\t}\r\n\t\t\treturn info.func.apply(this, args);\r\n\t\t};\r\n\t};\r\n\r\n\tdojo.mixin(df, {\r\n\t\t// currying and partial functions\r\n\t\tcurry: function(/*Function|String|Array*/ f, /*Number?*/ arity){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcurries a function until the arity is satisfied, at\r\n\t\t\t//\t\twhich point it returns the calculated value.\r\n\t\t\tf = df.lambda(f);\r\n\t\t\tarity = typeof arity == \"number\" ? arity : f.length;\r\n\t\t\treturn currying({func: f, arity: arity, args: []});\t// Function\r\n\t\t},\r\n\t\targ: {},\t// marker for missing arguments\r\n\t\tpartial: function(/*Function|String|Array*/ f){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a function where some arguments are bound, and\r\n\t\t\t//\t\tsome arguments (marked as dojox.lang.functional.arg) are will be\r\n\t\t\t//\t\taccepted by the final function in the order they are encountered.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method is used to produce partially bound\r\n\t\t\t//\t\tfunctions. If you want to change the order of arguments, use\r\n\t\t\t//\t\tdojox.lang.functional.mixer() or dojox.lang.functional.flip().\r\n\t\t\tvar a = arguments, l = a.length, args = new Array(l - 1), p = [], i = 1, t;\r\n\t\t\tf = df.lambda(f);\r\n\t\t\tfor(; i < l; ++i){\r\n\t\t\t\tt = a[i];\r\n\t\t\t\targs[i - 1] = t;\r\n\t\t\t\tif(t === df.arg){\r\n\t\t\t\t\tp.push(i - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn function(){\t// Function\r\n\t\t\t\tvar t = ap.slice.call(args, 0), // clone the array\r\n\t\t\t\t\ti = 0, l = p.length;\r\n\t\t\t\tfor(; i < l; ++i){\r\n\t\t\t\t\tt[p[i]] = arguments[i];\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(this, t);\r\n\t\t\t};\r\n\t\t},\r\n\t\t// argument pre-processing\r\n\t\tmixer: function(/*Function|String|Array*/ f, /*Array*/ mix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tchanges the order of arguments using an array of\r\n\t\t\t//\t\tnumbers mix --- i-th argument comes from mix[i]-th place\r\n\t\t\t//\t\tof supplied arguments.\r\n\t\t\tf = df.lambda(f);\r\n\t\t\treturn function(){\t// Function\r\n\t\t\t\tvar t = new Array(mix.length), i = 0, l = mix.length;\r\n\t\t\t\tfor(; i < l; ++i){\r\n\t\t\t\t\tt[i] = arguments[mix[i]];\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(this, t);\r\n\t\t\t};\r\n\t\t},\r\n\t\tflip: function(/*Function|String|Array*/ f){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tchanges the order of arguments by reversing their\r\n\t\t\t//\t\torder.\r\n\t\t\tf = df.lambda(f);\r\n\t\t\treturn function(){\t// Function\r\n\t\t\t\t// reverse arguments\r\n\t\t\t\tvar a = arguments, l = a.length - 1, t = new Array(l + 1), i = 0;\r\n\t\t\t\tfor(; i <= l; ++i){\r\n\t\t\t\t\tt[l - i] = a[i];\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(this, t);\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n})();\r\n"]}