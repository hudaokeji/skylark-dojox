{"version":3,"sources":["lang/functional/reversed.js"],"names":["define","lang","kernel","df","mixin","filterRev","a","f","o","split","global","lambda","v","t","i","length","call","push","forEachRev","mapRev","n","Array","j","everyRev","someRev"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,oBAAqB,YAC/C,SAASC,EAAMC,EAAQC,GA0EvB,OA7DAF,EAAKG,MAAMD,GAGVE,UAAW,SAA0BC,EAA6BC,EAAeC,GAIjE,iBAALF,IAAgBA,EAAIA,EAAEG,MAAM,KACtCD,EAAIA,GAAKN,EAAOQ,OAAQH,EAAIJ,EAAGQ,OAAOJ,GAEtC,IADA,IAAYK,EAARC,KAAWC,EAAIR,EAAES,OAAS,EACxBD,GAAK,IAAKA,EACfF,EAAIN,EAAEQ,GACHP,EAAES,KAAKR,EAAGI,EAAGE,EAAGR,IAAKO,EAAEI,KAAKL,GAEhC,OAAOC,GAERK,WAAY,SAA0BZ,EAA6BC,EAAeC,GAGlE,iBAALF,IAAgBA,EAAIA,EAAEG,MAAM,KACtCD,EAAIA,GAAKN,EAAOQ,OAAQH,EAAIJ,EAAGQ,OAAOJ,GACtC,IAAI,IAAIO,EAAIR,EAAES,OAAS,EAAGD,GAAK,EAAGP,EAAES,KAAKR,EAAGF,EAAEQ,GAAIA,EAAGR,KAAMQ,KAE5DK,OAAQ,SAA0Bb,EAA6BC,EAAeC,GAI9D,iBAALF,IAAgBA,EAAIA,EAAEG,MAAM,KACtCD,EAAIA,GAAKN,EAAOQ,OAAQH,EAAIJ,EAAGQ,OAAOJ,GAEtC,IADA,IAAIa,EAAId,EAAES,OAAQF,EAAI,IAAIQ,MAAMD,GAAIN,EAAIM,EAAI,EAAGE,EAAI,EAC7CR,GAAK,EAAGD,EAAES,KAAOf,EAAES,KAAKR,EAAGF,EAAEQ,GAAIA,EAAGR,KAAMQ,GAChD,OAAOD,GAERU,SAAU,SAA0BjB,EAA6BC,EAAeC,GAIhE,iBAALF,IAAgBA,EAAIA,EAAEG,MAAM,KACtCD,EAAIA,GAAKN,EAAOQ,OAAQH,EAAIJ,EAAGQ,OAAOJ,GACtC,IAAI,IAAIO,EAAIR,EAAES,OAAS,EAAGD,GAAK,IAAKA,EACnC,IAAIP,EAAES,KAAKR,EAAGF,EAAEQ,GAAIA,EAAGR,GACtB,OAAO,EAGT,OAAO,GAERkB,QAAS,SAA0BlB,EAA6BC,EAAeC,GAI/D,iBAALF,IAAgBA,EAAIA,EAAEG,MAAM,KACtCD,EAAIA,GAAKN,EAAOQ,OAAQH,EAAIJ,EAAGQ,OAAOJ,GACtC,IAAI,IAAIO,EAAIR,EAAES,OAAS,EAAGD,GAAK,IAAKA,EACnC,GAAGP,EAAES,KAAKR,EAAGF,EAAEQ,GAAIA,EAAGR,GACrB,OAAO,EAGT,OAAO,KAIFH","file":"../../../lang/functional/reversed.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/kernel\" ,\"./lambda\"],\r\n\tfunction(lang, kernel, df){\r\n// This module adds high-level functions and related constructs:\r\n//\t- reversed versions of array-processing functions similar to standard JS functions\r\n\r\n// Notes:\r\n//\t- this module provides reversed versions of standard array-processing functions:\r\n//\t\tforEachRev, mapRev, filterRev\r\n\r\n// Defined methods:\r\n//\t- take any valid lambda argument as the functional argument\r\n//\t- operate on dense arrays\r\n//\t- take a string as the array argument\r\n\r\n\tlang.mixin(df, {\r\n\t\t// JS 1.6 standard array functions, which can take a lambda as a parameter.\r\n\t\t// Consider using dojo._base.array functions, if you don't need the lambda support.\r\n\t\tfilterRev: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a new array with all elements that pass the test\r\n\t\t\t//\t\timplemented by the provided function.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar t = [], v, i = a.length - 1;\r\n\t\t\tfor(; i >= 0; --i){\r\n\t\t\t\tv = a[i];\r\n\t\t\t\tif(f.call(o, v, i, a)){ t.push(v); }\r\n\t\t\t}\r\n\t\t\treturn t;\t// Array\r\n\t\t},\r\n\t\tforEachRev: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\texecutes a provided function once per array element.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tfor(var i = a.length - 1; i >= 0; f.call(o, a[i], i, a), --i);\r\n\t\t},\r\n\t\tmapRev: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a new array with the results of calling\r\n\t\t\t//\t\ta provided function on every element in this array.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar n = a.length, t = new Array(n), i = n - 1, j = 0;\r\n\t\t\tfor(; i >= 0; t[j++] = f.call(o, a[i], i, a), --i);\r\n\t\t\treturn t;\t// Array\r\n\t\t},\r\n\t\teveryRev: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ttests whether all elements in the array pass the test\r\n\t\t\t//\t\timplemented by the provided function.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tfor(var i = a.length - 1; i >= 0; --i){\r\n\t\t\t\tif(!f.call(o, a[i], i, a)){\r\n\t\t\t\t\treturn false;\t// Boolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\t// Boolean\r\n\t\t},\r\n\t\tsomeRev: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ttests whether some element in the array passes the test\r\n\t\t\t//\t\timplemented by the provided function.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tfor(var i = a.length - 1; i >= 0; --i){\r\n\t\t\t\tif(f.call(o, a[i], i, a)){\r\n\t\t\t\t\treturn true;\t// Boolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\t// Boolean\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn df;\r\n});\r\n"]}