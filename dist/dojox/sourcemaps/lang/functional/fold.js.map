{"version":3,"sources":["lang/functional/fold.js"],"names":["define","lang","arr","kernel","df","empty","mixin","foldl","a","f","z","o","i","n","split","global","lambda","isArray","length","call","hasNext","next","foldl1","first","foldr","foldr1","reduce","arguments","reduceRight","unfold","pr","g","t","push"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,mBAAoB,oBAAqB,YACnE,SAASC,EAAMC,EAAKC,EAAQC,GAkB5B,IAAIC,KAEJJ,EAAKK,MAAMF,GAEVG,MAAO,SAAiCC,EAAgBC,EAAcC,EAAeC,GAOpF,IAAIC,EAAGC,EACP,GAHe,iBAALL,IAAgBA,EAAIA,EAAEM,MAAM,KACtCH,EAAIA,GAAKR,EAAOY,OAAQN,EAAIL,EAAGY,OAAOP,GAEnCR,EAAKgB,QAAQT,GAEf,IAAII,EAAI,EAAGC,EAAIL,EAAEU,OAAQN,EAAIC,EAAGH,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,KAAMI,QAC3D,GAAuB,mBAAbJ,EAAEY,SAA0C,mBAAVZ,EAAEa,KAEnD,IAAIT,EAAI,EAAGJ,EAAEY,UAAWV,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEa,OAAQT,IAAKJ,SAGxD,IAAII,KAAKJ,EACHI,KAAKP,IACTK,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,IAI7B,OAAOE,GAERY,OAAQ,SAAiCd,EAA6BC,EAAeE,GAMpF,IAAID,EAAGE,EAAGC,EACV,GAHe,iBAALL,IAAgBA,EAAIA,EAAEM,MAAM,KACtCH,EAAIA,GAAKR,EAAOY,OAAQN,EAAIL,EAAGY,OAAOP,GAEnCR,EAAKgB,QAAQT,GAGf,IADAE,EAAIF,EAAE,GACFI,EAAI,EAAGC,EAAIL,EAAEU,OAAQN,EAAIC,EAAGH,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,KAAMI,QAC3D,GAAuB,mBAAbJ,EAAEY,SAA0C,mBAAVZ,EAAEa,MAEnD,GAAGb,EAAEY,UAEJ,IADAV,EAAIF,EAAEa,OACFT,EAAI,EAAGJ,EAAEY,UAAWV,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEa,OAAQT,IAAKJ,SAErD,CAEJ,IAAIe,GAAQ,EACZ,IAAIX,KAAKJ,EACHI,KAAKP,IACNkB,GACFb,EAAIF,EAAEI,GACNW,GAAQ,GAERb,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,IAK9B,OAAOE,GAERc,MAAO,SAA0BhB,EAA6BC,EAAcC,EAAeC,GAK3E,iBAALH,IAAgBA,EAAIA,EAAEM,MAAM,KACtCH,EAAIA,GAAKR,EAAOY,OAAQN,EAAIL,EAAGY,OAAOP,GACtC,IAAI,IAAIG,EAAIJ,EAAEU,OAAQN,EAAI,IAAKA,EAAGF,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,IAC5D,OAAOE,GAERe,OAAQ,SAA0BjB,EAA6BC,EAAeE,GAI9D,iBAALH,IAAgBA,EAAIA,EAAEM,MAAM,KACtCH,EAAIA,GAAKR,EAAOY,OAAQN,EAAIL,EAAGY,OAAOP,GAEtC,IADA,IAAII,EAAIL,EAAEU,OAAQR,EAAIF,EAAEK,EAAI,GAAID,EAAIC,EAAI,EAClCD,EAAI,IAAKA,EAAGF,EAAID,EAAEU,KAAKR,EAAGD,EAAGF,EAAEI,GAAIA,EAAGJ,IAC5C,OAAOE,GAGRgB,OAAQ,SAAiClB,EAA6BC,EAAeC,GAIpF,OAAOiB,UAAUT,OAAS,EAAId,EAAGkB,OAAOd,EAAGC,GAAKL,EAAGG,MAAMC,EAAGC,EAAGC,IAEhEkB,YAAa,SAA0BpB,EAA6BC,EAAeC,GAIlF,OAAOiB,UAAUT,OAAS,EAAId,EAAGqB,OAAOjB,EAAGC,GAAKL,EAAGoB,MAAMhB,EAAGC,EAAGC,IAGhEmB,OAAQ,SAAmCC,EAA8BrB,EAC3CsB,EAAcrB,EAAeC,GAG1DA,EAAIA,GAAKR,EAAOY,OAAQN,EAAIL,EAAGY,OAAOP,GAAIsB,EAAI3B,EAAGY,OAAOe,GAAID,EAAK1B,EAAGY,OAAOc,GAE3E,IADA,IAAIE,MACGF,EAAGX,KAAKR,EAAGD,GAAIsB,EAAEC,KAAKxB,EAAEU,KAAKR,EAAGD,IAAKA,EAAIqB,EAAEZ,KAAKR,EAAGD,IAC1D,OAAOsB","file":"../../../lang/functional/fold.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/array\", \"dojo/_base/kernel\", \"./lambda\"],\r\n\tfunction(lang, arr, kernel, df){\r\n\r\n// This module adds high-level functions and related constructs:\r\n//\t- \"fold\" family of functions\r\n\r\n// Notes:\r\n//\t- missing high-level functions are provided with the compatible API:\r\n//\t\tfoldl, foldl1, foldr, foldr1\r\n//\t- missing JS standard functions are provided with the compatible API:\r\n//\t\treduce, reduceRight\r\n//\t- the fold's counterpart: unfold\r\n\r\n// Defined methods:\r\n//\t- take any valid lambda argument as the functional argument\r\n//\t- operate on dense arrays\r\n//\t- take a string as the array argument\r\n//\t- take an iterator objects as the array argument (only foldl, foldl1, and reduce)\r\n\r\n\tvar empty = {};\r\n\r\n\tlang.mixin(df, {\r\n\t\t// classic reduce-class functions\r\n\t\tfoldl: function(/*Array|String|Object*/ a, /*Function*/ f, /*Object*/ z, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trepeatedly applies a binary function to an array from left\r\n\t\t\t//\t\tto right using a seed value as a starting point; returns the final\r\n\t\t\t//\t\tvalue.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar i, n;\r\n\t\t\tif(lang.isArray(a)){\r\n\t\t\t\t// array\r\n\t\t\t\tfor(i = 0, n = a.length; i < n; z = f.call(o, z, a[i], i, a), ++i);\r\n\t\t\t}else if(typeof a.hasNext == \"function\" && typeof a.next == \"function\"){\r\n\t\t\t\t// iterator\r\n\t\t\t\tfor(i = 0; a.hasNext(); z = f.call(o, z, a.next(), i++, a));\r\n\t\t\t}else{\r\n\t\t\t\t// object/dictionary\r\n\t\t\t\tfor(i in a){\r\n\t\t\t\t\tif(!(i in empty)){\r\n\t\t\t\t\t\tz = f.call(o, z, a[i], i, a);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn z;\t// Object\r\n\t\t},\r\n\t\tfoldl1: function(/*Array|String|Object*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trepeatedly applies a binary function to an array from left\r\n\t\t\t//\t\tto right; returns the final value.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar z, i, n;\r\n\t\t\tif(lang.isArray(a)){\r\n\t\t\t\t// array\r\n\t\t\t\tz = a[0];\r\n\t\t\t\tfor(i = 1, n = a.length; i < n; z = f.call(o, z, a[i], i, a), ++i);\r\n\t\t\t}else if(typeof a.hasNext == \"function\" && typeof a.next == \"function\"){\r\n\t\t\t\t// iterator\r\n\t\t\t\tif(a.hasNext()){\r\n\t\t\t\t\tz = a.next();\r\n\t\t\t\t\tfor(i = 1; a.hasNext(); z = f.call(o, z, a.next(), i++, a));\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t// object/dictionary\r\n\t\t\t\tvar first = true;\r\n\t\t\t\tfor(i in a){\r\n\t\t\t\t\tif(!(i in empty)){\r\n\t\t\t\t\t\tif(first){\r\n\t\t\t\t\t\t\tz = a[i];\r\n\t\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tz = f.call(o, z, a[i], i, a);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn z;\t// Object\r\n\t\t},\r\n\t\tfoldr: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object*/ z, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trepeatedly applies a binary function to an array from right\r\n\t\t\t//\t\tto left using a seed value as a starting point; returns the final\r\n\t\t\t//\t\tvalue.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tfor(var i = a.length; i > 0; --i, z = f.call(o, z, a[i], i, a));\r\n\t\t\treturn z;\t// Object\r\n\t\t},\r\n\t\tfoldr1: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trepeatedly applies a binary function to an array from right\r\n\t\t\t//\t\tto left; returns the final value.\r\n\t\t\tif(typeof a == \"string\"){ a = a.split(\"\"); }\r\n\t\t\to = o || kernel.global; f = df.lambda(f);\r\n\t\t\tvar n = a.length, z = a[n - 1], i = n - 1;\r\n\t\t\tfor(; i > 0; --i, z = f.call(o, z, a[i], i, a));\r\n\t\t\treturn z;\t// Object\r\n\t\t},\r\n\t\t// JS 1.8 standard array functions, which can take a lambda as a parameter.\r\n\t\treduce: function(/*Array|String|Object*/ a, /*Function|String|Array*/ f, /*Object?*/ z){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapply a function simultaneously against two values of the array\r\n\t\t\t//\t\t(from left-to-right) as to reduce it to a single value.\r\n\t\t\treturn arguments.length < 3 ? df.foldl1(a, f) : df.foldl(a, f, z);\t// Object\r\n\t\t},\r\n\t\treduceRight: function(/*Array|String*/ a, /*Function|String|Array*/ f, /*Object?*/ z){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapply a function simultaneously against two values of the array\r\n\t\t\t//\t\t(from right-to-left) as to reduce it to a single value.\r\n\t\t\treturn arguments.length < 3 ? df.foldr1(a, f) : df.foldr(a, f, z);\t// Object\r\n\t\t},\r\n\t\t// the fold's counterpart: unfold\r\n\t\tunfold: function(/*Function|String|Array*/ pr, /*Function|String|Array*/ f,\r\n\t\t\t\t\t\t/*Function|String|Array*/ g, /*Object*/ z, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuilds an array by unfolding a value\r\n\t\t\to = o || kernel.global; f = df.lambda(f); g = df.lambda(g); pr = df.lambda(pr);\r\n\t\t\tvar t = [];\r\n\t\t\tfor(; !pr.call(o, z); t.push(f.call(o, z)), z = g.call(o, z));\r\n\t\t\treturn t;\t// Array\r\n\t\t}\r\n\t});\r\n});\r\n"]}