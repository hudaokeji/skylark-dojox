{"version":3,"sources":["lang/oo/mixin.js"],"names":["dojo","provide","experimental","require","oo","dojox","lang","Filter","Decorator","empty","defaultFilter","name","defaultDecorator","newValue","oldValue","defaultMixer","target","extraNames","_extraNames","extraLen","length","applyDecorator","decorator","d","value","__mixin","source","filter","mixer","targetName","prop","i","mixin","l","arguments","bag"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,uBAEbD,KAAKE,aAAa,uBAElBF,KAAKG,QAAQ,wBACbH,KAAKG,QAAQ,2BAEb,WACC,IAAIC,EAAKC,MAAMC,KAAKF,GAAIG,EAASH,EAAGG,OAAQC,EAAYJ,EAAGI,UAAWC,KACrEC,EAAgB,SAASC,GAAO,OAAOA,GACvCC,EAAmB,SAASD,EAAME,EAAUC,GAAW,OAAOD,GAC9DE,EAAe,SAASC,EAAQL,EAAME,EAAUC,GAAWE,EAAOL,GAAQE,GAE1EI,EAAajB,KAAKkB,YAAaC,EAAWF,EAAWG,OAErDC,EAAiBjB,EAAGiB,eAAiB,SAASC,EAAWX,EAAME,EAAUC,GAaxE,OAAGD,aAAoBL,GAGfe,EAFCV,EAASS,WAERX,EADTE,EAAWQ,EAAeC,EAAWX,EAAME,EAASW,MAAOV,GAClCA,GAEnBQ,EAAUX,EAAME,EAAUC,IAgBnCV,EAAGqB,QAAU,SAAST,EAAQU,EAAQJ,EAAWK,EAAQC,GAYxD,IAAIjB,EAAMkB,EAAYC,EAAMjB,EAAUC,EAAUiB,EAGhD,IAAIpB,KAAQe,EACXI,EAAOJ,EAAOf,GACTA,KAAQF,GAAUA,EAAME,KAAUmB,KACtCD,EAAaF,EAAOhB,EAAMK,EAAQU,EAAQI,KACtBD,KAAcb,GAAaa,KAAcpB,GAAUA,EAAMoB,KAAgBC,IAE5FhB,EAAWE,EAAOa,OAClBhB,EAAWQ,EAAeC,EAAWO,EAAYC,EAAMhB,KAEtDc,EAAMZ,EAAQa,EAAYhB,EAAUC,GAKxC,GAAGK,EACF,IAAIY,EAAI,EAAGA,EAAIZ,IAAYY,EAG1BD,EAAOJ,EAFPf,EAAOM,EAAWc,IAGbpB,KAAQF,GAAUA,EAAME,KAAUmB,KACtCD,EAAaF,EAAOhB,EAAMK,EAAQU,EAAQI,KACtBD,KAAcb,GAAaa,KAAcpB,GAAUA,EAAMoB,KAAgBC,IAE5FhB,EAAWE,EAAOa,OAClBhB,EAAWQ,EAAeC,EAAWO,EAAYC,EAAMhB,KAEtDc,EAAMZ,EAAQa,EAAYhB,EAAUC,GAOzC,OAAOE,GAGRZ,EAAG4B,MAAQ,SAAShB,EAAQU,GAY3B,IADA,IAAIJ,EAAWK,EAAQI,EAAI,EAAGE,EAAIC,UAAUd,OACtCW,EAAIE,IAAKF,GACdL,EAASQ,UAAUH,cACExB,GACpBoB,EAASD,EAAOC,OAChBD,EAASA,EAAOS,KAEhBR,EAASjB,EAEPgB,aAAkBlB,GACpBc,EAAYI,EAAOJ,UACnBI,EAASA,EAAOF,OAEhBF,EAAYV,EAEbR,EAAGqB,QAAQT,EAAQU,EAAQJ,EAAWK,EAAQZ,GAE/C,OAAOC,GAzHT","file":"../../../lang/oo/mixin.js","sourcesContent":["dojo.provide(\"dojox.lang.oo.mixin\");\r\n\r\ndojo.experimental(\"dojox.lang.oo.mixin\");\r\n\r\ndojo.require(\"dojox.lang.oo.Filter\");\r\ndojo.require(\"dojox.lang.oo.Decorator\");\r\n\r\n(function(){\r\n\tvar oo = dojox.lang.oo, Filter = oo.Filter, Decorator = oo.Decorator, empty = {},\r\n\t\tdefaultFilter = function(name){ return name; },\r\n\t\tdefaultDecorator = function(name, newValue, oldValue){ return newValue; },\r\n\t\tdefaultMixer = function(target, name, newValue, oldValue){ target[name] = newValue; },\r\n\t\tdefaults = {},\t// for the internal use in the mixin()\r\n\t\textraNames = dojo._extraNames, extraLen = extraNames.length,\r\n\r\n\t\tapplyDecorator = oo.applyDecorator = function(decorator, name, newValue, oldValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a decorator unraveling all embedded decorators\r\n\t\t\t// decorator: Function\r\n\t\t\t//\t\ttop-level decorator to apply\r\n\t\t\t// name: String\r\n\t\t\t//\t\tname of the property\r\n\t\t\t// newValue: Object\r\n\t\t\t//\t\tnew value of the property\r\n\t\t\t// oldValue: Object\r\n\t\t\t//\t\told value of the property\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\treturns the final value of the property\r\n\t\t\tif(newValue instanceof Decorator){\r\n\t\t\t\tvar d = newValue.decorator;\r\n\t\t\t\tnewValue = applyDecorator(decorator, name, newValue.value, oldValue);\r\n\t\t\t\treturn d(name, newValue, oldValue);\r\n\t\t\t}\r\n\t\t\treturn decorator(name, newValue, oldValue);\r\n\t\t};\r\n\r\n\t/*=====\r\n\tdojox.lang.oo.__MixinDefaults = {\r\n\t\t// summary:\r\n\t\t//\t\ta dict of default parameters for dojox.lang.oo._mixin\r\n\t\t// decorator: Function\r\n\t\t//\t\ta decorator function to be used in absence of other decorators\r\n\t\t// filter: Function\r\n\t\t//\t\ta filter function to be used in absence of other filters\r\n\t\t// mixer: Function\r\n\t\t//\t\ta mixer function to be used to mix in new properties\r\n\t};\r\n\t=====*/\r\n\r\n\too.__mixin = function(target, source, decorator, filter, mixer){\r\n\t\t// summary:\r\n\t\t//\t\tmixes in two objects processing decorators and filters\r\n\t\t// target: Object\r\n\t\t//\t\ttarget to receive new/updated properties\r\n\t\t// source: Object\r\n\t\t//\t\tsource of properties\r\n\t\t// defaults: dojox.lang.oo.__MixinDefaults?\r\n\t\t//\t\tdefault functions for various aspects of mixing\r\n\t\t// returns: Object\r\n\t\t//\t\ttarget\r\n\r\n\t\tvar name, targetName, prop, newValue, oldValue, i;\r\n\r\n\t\t// start mixing in properties\r\n\t\tfor(name in source){\r\n\t\t\tprop = source[name];\r\n\t\t\tif(!(name in empty) || empty[name] !== prop){\r\n\t\t\t\ttargetName = filter(name, target, source, prop);\r\n\t\t\t\tif(targetName && (!(targetName in target) || !(targetName in empty) || empty[targetName] !== prop)){\r\n\t\t\t\t\t// name is accepted\r\n\t\t\t\t\toldValue = target[targetName];\r\n\t\t\t\t\tnewValue = applyDecorator(decorator, targetName, prop, oldValue);\r\n\t\t\t\t\tif(oldValue !== newValue){\r\n\t\t\t\t\t\tmixer(target, targetName, newValue, oldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(extraLen){\r\n\t\t\tfor(i = 0; i < extraLen; ++i){\r\n\t\t\t\tname = extraNames[i];\r\n\t\t\t\t// repeating the body above\r\n\t\t\t\tprop = source[name];\r\n\t\t\t\tif(!(name in empty) || empty[name] !== prop){\r\n\t\t\t\t\ttargetName = filter(name, target, source, prop);\r\n\t\t\t\t\tif(targetName && (!(targetName in target) || !(targetName in empty) || empty[targetName] !== prop)){\r\n\t\t\t\t\t\t// name is accepted\r\n\t\t\t\t\t\toldValue = target[targetName];\r\n\t\t\t\t\t\tnewValue = applyDecorator(decorator, targetName, prop, oldValue);\r\n\t\t\t\t\t\tif(oldValue !== newValue){\r\n\t\t\t\t\t\t\tmixer(target, targetName, newValue, oldValue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn target;\t// Object\r\n\t};\r\n\r\n\too.mixin = function(target, source){\r\n\t\t// summary:\r\n\t\t//\t\tmixes in two or more objects processing decorators and filters\r\n\t\t//\t\tusing defaults as a fallback\r\n\t\t// target: Object\r\n\t\t//\t\ttarget to receive new/updated properties\r\n\t\t// source: Object...\r\n\t\t//\t\tsource of properties, more than one source is allowed\r\n\t\t// returns: Object\r\n\t\t//\t\ttarget\r\n\r\n\t\tvar decorator, filter, i = 1, l = arguments.length;\r\n\t\tfor(; i < l; ++i){\r\n\t\t\tsource = arguments[i];\r\n\t\t\tif(source instanceof Filter){\r\n\t\t\t\tfilter = source.filter;\r\n\t\t\t\tsource = source.bag;\r\n\t\t\t}else{\r\n\t\t\t\tfilter = defaultFilter;\r\n\t\t\t}\r\n\t\t\tif(source instanceof Decorator){\r\n\t\t\t\tdecorator = source.decorator;\r\n\t\t\t\tsource = source.value;\r\n\t\t\t}else{\r\n\t\t\t\tdecorator = defaultDecorator;\r\n\t\t\t}\r\n\t\t\too.__mixin(target, source, decorator, filter, defaultMixer);\r\n\t\t}\r\n\t\treturn target;\t// Object\r\n\t};\r\n})();\r\n"]}