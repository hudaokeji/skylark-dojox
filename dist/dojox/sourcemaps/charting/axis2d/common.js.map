{"version":3,"sources":["charting/axis2d/common.js"],"names":["define","lang","win","domGeom","g","has","common","getObject","clearNode","s","marginLeft","marginTop","marginRight","marginBottom","paddingLeft","paddingTop","paddingRight","paddingBottom","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","mixin","createText","gfx","chart","creator","x","y","align","text","font","fontColor","setFont","setFill","html","labelWidth","boxWidth","p","doc","createElement","style","getTextDir","dir","innerHTML","String","replace","color","position","left","body","appendChild","size","normalizedLength","splitFontString","n","bcr","getBoundingClientRect","width","right","getMarginBox","w","getBoxWidth","removeChild","textAlign","Math","floor","top","whiteSpace","wrap","height","node","insertBefore","firstChild","htmlElementsRegistry","push"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,oBAAqB,oBAAqB,YAAa,YACjF,SAASC,EAAMC,EAAKC,EAASC,EAAGC,GAEhC,IAAIC,EAASL,EAAKM,UAAU,gCAAgC,GAExDC,EAAY,SAASC,GACxBA,EAAEC,WAAe,MACjBD,EAAEE,UAAe,MACjBF,EAAEG,YAAe,MACjBH,EAAEI,aAAe,MACjBJ,EAAEK,YAAgB,MAClBL,EAAEM,WAAgB,MAClBN,EAAEO,aAAgB,MAClBP,EAAEQ,cAAgB,MAClBR,EAAES,gBAAoB,MACtBT,EAAEU,eAAoB,MACtBV,EAAEW,iBAAoB,MACtBX,EAAEY,kBAAoB,OAavB,OAAOpB,EAAKqB,MAAMhB,GAGjBiB,YACCC,IAAK,SAASC,EAAOC,EAASC,EAAGC,EAAGC,EAAOC,EAAMC,EAAMC,GAqBtD,OAAON,EAAQH,YACdI,EAAGA,EAAGC,EAAGA,EAAGE,KAAMA,EAAMD,MAAOA,IAC7BI,QAAQF,GAAMG,QAAQF,IAE1BG,KAAM,SAASV,EAAOC,EAASC,EAAGC,EAAGC,EAAOC,EAAMC,EAAMC,EAAWI,GAyBlE,IAAmDC,EAA/CC,EAAIpC,EAAIqC,IAAIC,cAAc,OAAQ/B,EAAI6B,EAAEG,MAEzChB,EAAMiB,aACRJ,EAAEK,IAAMlB,EAAMiB,WAAWZ,IAE1BtB,EAAUC,GACVA,EAAEsB,KAAOA,EACTO,EAAEM,UAAYC,OAAOf,GAAMgB,QAAQ,MAAO,UAC1CrC,EAAEsC,MAAQf,EAEVvB,EAAEuC,SAAW,WACbvC,EAAEwC,KAAO,WACT/C,EAAIgD,OAAOC,YAAYb,GACvB,IAAIc,EAAOhD,EAAEiD,iBAAiBjD,EAAEkD,gBAAgBvB,GAAMqB,MAgBtD,GAbIhB,IACHC,EAjFc,SAASkB,GAE1B,GAAGA,EAAyB,sBAAE,CAC7B,IAAIC,EAAMD,EAAEE,wBACZ,OAAOD,EAAIE,OAAUF,EAAIG,MAAQH,EAAIP,KAErC,OAAO9C,EAAQyD,aAAaL,GAAGM,EA2ElBC,CAAYxB,IAIZ,OAATA,EAAEK,MACJhB,GAAKS,GAA0BC,GAIhCnC,EAAIgD,OAAOa,YAAYzB,GAEvB7B,EAAEuC,SAAW,WACVZ,EAGF,OAFA3B,EAAEiD,MAAQtB,EAAa,KAEhBP,GACN,IAAK,SACJpB,EAAEuD,UAAY,SACdvD,EAAEwC,KAAQtB,EAAIS,EAAa,EAAK,KAChC,MACD,IAAK,MACJ3B,EAAEuD,UAAY,QACdvD,EAAEwC,KAAQtB,EAAIS,EAAc,KAC5B,MACD,QACC3B,EAAEwC,KAAOtB,EAAI,KACblB,EAAEuD,UAAY,YAIhB,OAAOnC,GACN,IAAK,SACJpB,EAAEwC,KAAOgB,KAAKC,MAAMvC,EAAIU,EAAW,GAAK,KAExC,MACD,IAAK,MACJ5B,EAAEwC,KAAOgB,KAAKC,MAAMvC,EAAIU,GAAY,KAEpC,MAED,QACC5B,EAAEwC,KAAOgB,KAAKC,MAAMvC,GAAK,KAI5BlB,EAAE0D,IAAMF,KAAKC,MAAMtC,EAAIwB,GAAQ,KAC/B3C,EAAE2D,WAAa,SAEf,IAAIC,EAAOnE,EAAIqC,IAAIC,cAAc,OAAQqB,EAAIQ,EAAK5B,MAUlD,OATAjC,EAAUqD,GACVA,EAAEH,MAAQ,MACVG,EAAES,OAAS,MAEXD,EAAKlB,YAAYb,GACjBb,EAAM8C,KAAKC,aAAaH,EAAM5C,EAAM8C,KAAKE,YACtCpE,EAAI,cACNoB,EAAMiD,qBAAqBC,MAAMN,EAAM1C,EAAGC,EAAGC,EAAOC,EAAMC,EAAMC,IAE1DqC","file":"../../../charting/axis2d/common.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/window\", \"dojo/dom-geometry\", \"dojox/gfx\", \"dojo/has\"],\r\n\tfunction(lang, win, domGeom, g, has){\r\n\r\n\tvar common = lang.getObject(\"dojox.charting.axis2d.common\", true);\r\n\t\r\n\tvar clearNode = function(s){\r\n\t\ts.marginLeft   = \"0px\";\r\n\t\ts.marginTop    = \"0px\";\r\n\t\ts.marginRight  = \"0px\";\r\n\t\ts.marginBottom = \"0px\";\r\n\t\ts.paddingLeft   = \"0px\";\r\n\t\ts.paddingTop    = \"0px\";\r\n\t\ts.paddingRight  = \"0px\";\r\n\t\ts.paddingBottom = \"0px\";\r\n\t\ts.borderLeftWidth   = \"0px\";\r\n\t\ts.borderTopWidth    = \"0px\";\r\n\t\ts.borderRightWidth  = \"0px\";\r\n\t\ts.borderBottomWidth = \"0px\";\r\n\t};\r\n\r\n\tvar getBoxWidth = function(n){\r\n\t\t// marginBox is incredibly slow, so avoid it if we can\r\n\t\tif(n[\"getBoundingClientRect\"]){\r\n\t\t\tvar bcr = n.getBoundingClientRect();\r\n\t\t\treturn bcr.width || (bcr.right - bcr.left);\r\n\t\t}else{\r\n\t\t\treturn domGeom.getMarginBox(n).w;\r\n\t\t}\r\n\t};\r\n\r\n\treturn lang.mixin(common, {\r\n\t\t// summary:\r\n\t\t//\t\tCommon methods to be used by any axis.  This is considered \"static\".\r\n\t\tcreateText: {\r\n\t\t\tgfx: function(chart, creator, x, y, align, text, font, fontColor){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tUse dojox.gfx to create any text.\r\n\t\t\t\t// chart: dojox.charting.Chart\r\n\t\t\t\t//\t\tThe chart to create the text into.\r\n\t\t\t\t// creator: dojox.gfx.Surface\r\n\t\t\t\t//\t\tThe graphics surface to use for creating the text.\r\n\t\t\t\t// x: Number\r\n\t\t\t\t//\t\tWhere to create the text along the x axis (CSS left).\r\n\t\t\t\t// y: Number\r\n\t\t\t\t//\t\tWhere to create the text along the y axis (CSS top).\r\n\t\t\t\t// align: String\r\n\t\t\t\t//\t\tHow to align the text.  Can be \"left\", \"right\", \"center\".\r\n\t\t\t\t// text: String\r\n\t\t\t\t//\t\tThe text to render.\r\n\t\t\t\t// font: String\r\n\t\t\t\t//\t\tThe font definition, a la CSS \"font\".\r\n\t\t\t\t// fontColor: String|dojo.Color\r\n\t\t\t\t//\t\tThe color of the resultant text.\r\n\t\t\t\t// returns: dojox.gfx.Text\r\n\t\t\t\t//\t\tThe resultant GFX object.\r\n\t\t\t\treturn creator.createText({\r\n\t\t\t\t\tx: x, y: y, text: text, align: align\r\n\t\t\t\t}).setFont(font).setFill(fontColor);\t//\tdojox.gfx.Text\r\n\t\t\t},\r\n\t\t\thtml: function(chart, creator, x, y, align, text, font, fontColor, labelWidth){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tUse the HTML DOM to create any text.\r\n\t\t\t\t// chart: dojox.charting.Chart\r\n\t\t\t\t//\t\tThe chart to create the text into.\r\n\t\t\t\t// creator: dojox.gfx.Surface\r\n\t\t\t\t//\t\tThe graphics surface to use for creating the text.\r\n\t\t\t\t// x: Number\r\n\t\t\t\t//\t\tWhere to create the text along the x axis (CSS left).\r\n\t\t\t\t// y: Number\r\n\t\t\t\t//\t\tWhere to create the text along the y axis (CSS top).\r\n\t\t\t\t// align: String\r\n\t\t\t\t//\t\tHow to align the text.  Can be \"left\", \"right\", \"center\".\r\n\t\t\t\t// text: String\r\n\t\t\t\t//\t\tThe text to render.\r\n\t\t\t\t// font: String\r\n\t\t\t\t//\t\tThe font definition, a la CSS \"font\".\r\n\t\t\t\t// fontColor: String|dojo.Color\r\n\t\t\t\t//\t\tThe color of the resultant text.\r\n\t\t\t\t// labelWidth: Number?\r\n\t\t\t\t//\t\tThe maximum width of the resultant DOM node.\r\n\t\t\t\t// returns: DOMNode\r\n\t\t\t\t//\t\tThe resultant DOMNode (a \"div\" element).\r\n\r\n\t\t\t\t// setup the text node\r\n\t\t\t\tvar p = win.doc.createElement(\"div\"), s = p.style, boxWidth;\r\n\t\t\t\t// bidi support, if this function exists the module was loaded \r\n\t\t\t\tif(chart.getTextDir){\r\n\t\t\t\t\tp.dir = chart.getTextDir(text);\r\n\t\t\t\t}\r\n\t\t\t\tclearNode(s);\r\n\t\t\t\ts.font = font;\r\n\t\t\t\tp.innerHTML = String(text).replace(/\\s/g, \"&nbsp;\");\r\n\t\t\t\ts.color = fontColor;\r\n\t\t\t\t// measure the size\r\n\t\t\t\ts.position = \"absolute\";\r\n\t\t\t\ts.left = \"-10000px\";\r\n\t\t\t\twin.body().appendChild(p);\r\n\t\t\t\tvar size = g.normalizedLength(g.splitFontString(font).size);\r\n\r\n\t\t\t\t// do we need to calculate the label width?\r\n\t\t\t\tif(!labelWidth){\r\n\t\t\t\t\tboxWidth = getBoxWidth(p);\r\n\t\t\t\t}\r\n\t\t\t\t// when the textDir is rtl, but the UI ltr needs\r\n\t\t\t\t// to recalculate the starting point\r\n\t\t\t\tif(p.dir == \"rtl\"){\r\n\t\t\t\t\tx += labelWidth ? labelWidth : boxWidth;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// new settings for the text node\r\n\t\t\t\twin.body().removeChild(p);\r\n\r\n\t\t\t\ts.position = \"relative\";\r\n\t\t\t\tif(labelWidth){\r\n\t\t\t\t\ts.width = labelWidth + \"px\";\r\n\t\t\t\t\t// s.border = \"1px dotted grey\";\r\n\t\t\t\t\tswitch(align){\r\n\t\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\t\ts.textAlign = \"center\";\r\n\t\t\t\t\t\t\ts.left = (x - labelWidth / 2) + \"px\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"end\":\r\n\t\t\t\t\t\t\ts.textAlign = \"right\";\r\n\t\t\t\t\t\t\ts.left = (x - labelWidth) + \"px\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\ts.left = x + \"px\";\r\n\t\t\t\t\t\t\ts.textAlign = \"left\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tswitch(align){\r\n\t\t\t\t\t\tcase \"middle\":\r\n\t\t\t\t\t\t\ts.left = Math.floor(x - boxWidth / 2) + \"px\";\r\n\t\t\t\t\t\t\t// s.left = Math.floor(x - p.offsetWidth / 2) + \"px\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"end\":\r\n\t\t\t\t\t\t\ts.left = Math.floor(x - boxWidth) + \"px\";\r\n\t\t\t\t\t\t\t// s.left = Math.floor(x - p.offsetWidth) + \"px\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//case \"start\":\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\ts.left = Math.floor(x) + \"px\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ts.top = Math.floor(y - size) + \"px\";\r\n\t\t\t\ts.whiteSpace = \"nowrap\";\t// hack for WebKit\r\n\t\t\t\t// setup the wrapper node\r\n\t\t\t\tvar wrap = win.doc.createElement(\"div\"), w = wrap.style;\r\n\t\t\t\tclearNode(w);\r\n\t\t\t\tw.width = \"0px\";\r\n\t\t\t\tw.height = \"0px\";\r\n\t\t\t\t// insert nodes\r\n\t\t\t\twrap.appendChild(p);\r\n\t\t\t\tchart.node.insertBefore(wrap, chart.node.firstChild);\r\n\t\t\t\tif(has(\"dojo-bidi\")){\r\n\t\t\t\t\tchart.htmlElementsRegistry.push([wrap, x, y, align, text, font, fontColor]);\r\n\t\t\t\t}\r\n\t\t\t\treturn wrap;\t//\tDOMNode\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}