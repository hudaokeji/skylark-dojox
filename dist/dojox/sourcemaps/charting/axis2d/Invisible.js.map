{"version":3,"sources":["charting/axis2d/Invisible.js"],"names":["define","lang","declare","Base","lin","du","defaultParams","vertical","fixUpper","fixLower","natural","leftBottom","includeZero","fixed","optionalParams","min","max","from","to","majorTickStep","minorTickStep","microTickStep","constructor","chart","kwArgs","this","opt","clone","updateWithObject","updateWithPattern","dependOnData","clear","scaler","ticks","dirty","initialized","setWindow","scale","offset","getWindowScale","getWindowOffset","calculate","span","o","labels","buildScaler","tsb","bounds","lower","upper","isFinite","isNaN","getScaler","getTicks"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,SAAU,mBAC1D,oBACA,SAASC,EAAMC,EAASC,EAAMC,EAAKC,GAuCnC,OAAOH,EAAQ,kCAAmCC,GAmCjDG,eACCC,UAAa,EACbC,SAAa,OACbC,SAAa,OACbC,SAAa,EACbC,YAAa,EACbC,aAAa,EACbC,OAAa,GAEdC,gBACCC,IAAO,EACPC,IAAO,EACPC,KAAQ,EACRC,GAAO,EACPC,cAAe,EACfC,cAAe,EACfC,cAAe,GAGhBC,YAAa,SAASC,EAAOC,GAO5BC,KAAKC,IAAMzB,EAAK0B,MAAMF,KAAKnB,eAClBD,EAAGuB,iBAAiBH,KAAKC,IAAKF,GACvCnB,EAAGwB,kBAAkBJ,KAAKC,IAAKF,EAAQC,KAAKX,iBAE7CgB,aAAc,WAGb,QAAS,QAASL,KAAKC,KAAU,QAASD,KAAKC,MAEhDK,MAAO,WAQN,cAHON,KAAKO,cACLP,KAAKQ,MACZR,KAAKS,OAAQ,EACNT,MAERU,YAAa,WAKZ,MAAO,WAAYV,QAAUA,KAAKS,OAAST,KAAKK,iBAEjDM,UAAW,SAASC,EAAOC,GAW1B,OAFAb,KAAKY,MAASA,EACdZ,KAAKa,OAASA,EACPb,KAAKM,SAEbQ,eAAgB,WAGf,MAAO,UAAWd,KAAOA,KAAKY,MAAQ,GAEvCG,gBAAiB,WAGhB,MAAO,WAAYf,KAAOA,KAAKa,OAAS,GAEzCG,UAAW,SAAS1B,EAAKC,EAAK0B,GAW7B,GAAGjB,KAAKU,cACP,OAAOV,KAER,IAAIkB,EAAIlB,KAAKC,IAGbD,KAAKmB,OAASD,EAAEC,OAChBnB,KAAKO,OAAS5B,EAAIyC,YAAY9B,EAAKC,EAAK0B,EAAMC,GAG9C,IAAIG,EAAMrB,KAAKO,OAAOe,OAsCtB,MArCG,UAAWtB,OAEbkB,EAAE1B,KAAO6B,EAAIE,MAAQvB,KAAKa,OAC1BK,EAAEzB,IAAQ4B,EAAIG,MAAQH,EAAIE,OAASvB,KAAKY,MAAQM,EAAE1B,MAE7CiC,SAASP,EAAE1B,OACfkC,MAAMR,EAAE1B,QACPiC,SAASP,EAAEzB,KACZiC,MAAMR,EAAEzB,KACRyB,EAAEzB,GAAKyB,EAAE1B,MAAQ6B,EAAIG,MAAQH,EAAIE,cAG1BL,EAAE1B,YACF0B,EAAEzB,UACFO,KAAKY,aACLZ,KAAKa,SAGTK,EAAE1B,KAAO6B,EAAIE,OACfL,EAAEzB,IAAM4B,EAAIE,MAAQL,EAAE1B,KACtB0B,EAAE1B,KAAO6B,EAAIE,OACLL,EAAEzB,GAAK4B,EAAIG,QACnBN,EAAE1B,MAAQ6B,EAAIG,MAAQN,EAAEzB,GACxByB,EAAEzB,GAAK4B,EAAIG,OAGZxB,KAAKa,OAASK,EAAE1B,KAAO6B,EAAIE,OAG5BvB,KAAKO,OAAS5B,EAAIyC,YAAY9B,EAAKC,EAAK0B,EAAMC,GAC9CG,EAAMrB,KAAKO,OAAOe,OAED,GAAdtB,KAAKY,OAA6B,GAAfZ,KAAKa,gBACnBb,KAAKY,aACLZ,KAAKa,SAGPb,MAER2B,UAAW,WAGV,OAAO3B,KAAKO,QAEbqB,SAAU,WAGT,OAAO5B,KAAKQ","file":"../../../charting/axis2d/Invisible.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"./Base\", \"../scaler/linear\",\r\n\t\"dojox/lang/utils\"],\r\n\tfunction(lang, declare, Base, lin, du){\r\n\r\n/*=====\r\n\tvar __InvisibleAxisCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tOptional arguments used in the definition of an invisible axis.\r\n\t\t// vertical: Boolean?\r\n\t\t//\t\tA flag that says whether an axis is vertical (i.e. y axis) or horizontal. Default is false (horizontal).\r\n\t\t// fixUpper: String?\r\n\t\t//\t\tAlign the greatest value on the axis with the specified tick level. Options are \"major\", \"minor\", \"micro\", or \"none\".  Defaults to \"none\".\r\n\t\t// fixLower: String?\r\n\t\t//\t\tAlign the smallest value on the axis with the specified tick level. Options are \"major\", \"minor\", \"micro\", or \"none\".  Defaults to \"none\".\r\n\t\t// natural: Boolean?\r\n\t\t//\t\tEnsure tick marks are made on \"natural\" numbers. Defaults to false.\r\n\t\t// leftBottom: Boolean?\r\n\t\t//\t\tThe position of a vertical axis; if true, will be placed against the left-bottom corner of the chart.  Defaults to true.\r\n\t\t// includeZero: Boolean?\r\n\t\t//\t\tInclude 0 on the axis rendering.  Default is false.\r\n\t\t// fixed: Boolean?\r\n\t\t//\t\tForce all axis labels to be fixed numbers.  Default is true.\r\n\t\t// min: Number?\r\n\t\t//\t\tThe smallest value on an axis. Default is 0.\r\n\t\t// max: Number?\r\n\t\t//\t\tThe largest value on an axis. Default is 1.\r\n\t\t// from: Number?\r\n\t\t//\t\tForce the chart to render data visible from this value. Default is 0.\r\n\t\t// to: Number?\r\n\t\t//\t\tForce the chart to render data visible to this value. Default is 1.\r\n\t\t// majorTickStep: Number?\r\n\t\t//\t\tThe amount to skip before a major tick is drawn. When not set the major ticks step is computed from\r\n\t\t//\t\tthe data range.\r\n\t\t// minorTickStep: Number?\r\n\t\t//\t\tThe amount to skip before a minor tick is drawn. When not set the minor ticks step is computed from\r\n\t\t//\t\tthe data range.\r\n\t\t// microTickStep: Number?\r\n\t\t//\t\tThe amount to skip before a micro tick is drawn. When not set the micro ticks step is computed from\r\n\t};\r\n=====*/\r\n\r\n\treturn declare(\"dojox.charting.axis2d.Invisible\", Base, {\r\n\t\t// summary:\r\n\t\t//\t\tA axis object used in dojox.charting.  You can use that axis if you want the axis to be invisible.\r\n\t\t//\t\tSee dojox.charting.Chart.addAxis for details.\r\n\t\t//\r\n\t\t// defaultParams: Object\r\n\t\t//\t\tThe default parameters used to define any axis.\r\n\t\t// optionalParams: Object\r\n\t\t//\t\tAny optional parameters needed to define an axis.\r\n\r\n\t\t/*\r\n\t\t// TODO: the documentation tools need these to be pre-defined in order to pick them up\r\n\t\t//\tcorrectly, but the code here is partially predicated on whether or not the properties\r\n\t\t//\tactually exist.  For now, we will leave these undocumented but in the code for later. -- TRT\r\n\r\n\t\t// opt: Object\r\n\t\t//\t\tThe actual options used to define this axis, created at initialization.\r\n\t\t// scaler: Object\r\n\t\t//\t\tThe calculated helper object to tell charts how to draw an axis and any data.\r\n\t\t// ticks: Object\r\n\t\t//\t\tThe calculated tick object that helps a chart draw the scaling on an axis.\r\n\t\t// dirty: Boolean\r\n\t\t//\t\tThe state of the axis (whether it needs to be redrawn or not)\r\n\t\t// scale: Number\r\n\t\t//\t\tThe current scale of the axis.\r\n\t\t// offset: Number\r\n\t\t//\t\tThe current offset of the axis.\r\n\r\n\t\topt: null,\r\n\t\tscaler: null,\r\n\t\tticks: null,\r\n\t\tdirty: true,\r\n\t\tscale: 1,\r\n\t\toffset: 0,\r\n\t\t*/\r\n\t\tdefaultParams: {\r\n\t\t\tvertical:    false,\t\t// true for vertical axis\r\n\t\t\tfixUpper:    \"none\",\t// align the upper on ticks: \"major\", \"minor\", \"micro\", \"none\"\r\n\t\t\tfixLower:    \"none\",\t// align the lower on ticks: \"major\", \"minor\", \"micro\", \"none\"\r\n\t\t\tnatural:     false,\t\t// all tick marks should be made on natural numbers\r\n\t\t\tleftBottom:  true,\t\t// position of the axis, used with \"vertical\"\r\n\t\t\tincludeZero: false,\t\t// 0 should be included\r\n\t\t\tfixed:       true\t\t// all labels are fixed numbers\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\tmin:\t\t\t0,\t// minimal value on this axis\r\n\t\t\tmax:\t\t\t1,\t// maximal value on this axis\r\n\t\t\tfrom:\t\t\t0,\t// visible from this value\r\n\t\t\tto:\t\t\t\t1,\t// visible to this value\r\n\t\t\tmajorTickStep:\t4,\t// major tick step\r\n\t\t\tminorTickStep:\t2,\t// minor tick step\r\n\t\t\tmicroTickStep:\t1\t// micro tick step\r\n\t\t},\r\n\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe constructor for an invisible axis.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart the axis belongs to.\r\n\t\t\t// kwArgs: __InvisibleAxisCtorArgs?\r\n\t\t\t//\t\tAny optional keyword arguments to be used to define this axis.\r\n\t\t\tthis.opt = lang.clone(this.defaultParams);\r\n            du.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t},\r\n\t\tdependOnData: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFind out whether or not the axis options depend on the data in the axis.\r\n\t\t\treturn !(\"min\" in this.opt) || !(\"max\" in this.opt);\t//\tBoolean\r\n\t\t},\r\n\t\tclear: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClear out all calculated properties on this axis;\r\n\t\t\t// returns: dojox/charting/axis2d/Invisible\r\n\t\t\t//\t\tThe reference to the axis for functional chaining.\r\n\t\t\tdelete this.scaler;\r\n\t\t\tdelete this.ticks;\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/axis2d/Invisible\r\n\t\t},\r\n\t\tinitialized: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFinds out if this axis has been initialized or not.\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tWhether a scaler has been calculated and if the axis is not dirty.\r\n\t\t\treturn \"scaler\" in this && !(this.dirty && this.dependOnData());\r\n\t\t},\r\n\t\tsetWindow: function(scale, offset){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the drawing \"window\" for the axis.\r\n\t\t\t// scale: Number\r\n\t\t\t//\t\tThe new scale for the axis.\r\n\t\t\t// offset: Number\r\n\t\t\t//\t\tThe new offset for the axis.\r\n\t\t\t// returns: dojox/charting/axis2d/Invisible\r\n\t\t\t//\t\tThe reference to the axis for functional chaining.\r\n\t\t\tthis.scale  = scale;\r\n\t\t\tthis.offset = offset;\r\n\t\t\treturn this.clear();\t//\tdojox/charting/axis2d/Invisible\r\n\t\t},\r\n\t\tgetWindowScale: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the current windowing scale of the axis.\r\n\t\t\treturn \"scale\" in this ? this.scale : 1;\t//\tNumber\r\n\t\t},\r\n\t\tgetWindowOffset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the current windowing offset for the axis.\r\n\t\t\treturn \"offset\" in this ? this.offset : 0;\t//\tNumber\r\n\t\t},\r\n\t\tcalculate: function(min, max, span){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPerform all calculations needed to render this axis.\r\n\t\t\t// min: Number\r\n\t\t\t//\t\tThe smallest value represented on this axis.\r\n\t\t\t// max: Number\r\n\t\t\t//\t\tThe largest value represented on this axis.\r\n\t\t\t// span: Number\r\n\t\t\t//\t\tThe span in pixels over which axis calculations are made.\r\n\t\t\t// returns: dojox/charting/axis2d/Invisible\r\n\t\t\t//\t\tThe reference to the axis for functional chaining.\r\n\t\t\tif(this.initialized()){\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tvar o = this.opt;\r\n\t\t\t// we used to have a 4th function parameter to reach labels but\r\n\t\t\t// nobody was calling it with 4 parameters.\r\n\t\t\tthis.labels = o.labels;\r\n\t\t\tthis.scaler = lin.buildScaler(min, max, span, o);\r\n\t\t\t// store the absolute major tick start, this will be useful when dropping a label every n labels\r\n\t\t\t// TODO: if o.lower then it does not work\r\n\t\t\tvar tsb = this.scaler.bounds;\r\n\t\t\tif(\"scale\" in this){\r\n\t\t\t\t// calculate new range\r\n\t\t\t\to.from = tsb.lower + this.offset;\r\n\t\t\t\to.to   = (tsb.upper - tsb.lower) / this.scale + o.from;\r\n\t\t\t\t// make sure that bounds are correct\r\n\t\t\t\tif( !isFinite(o.from) ||\r\n\t\t\t\t\tisNaN(o.from) ||\r\n\t\t\t\t\t!isFinite(o.to) ||\r\n\t\t\t\t\tisNaN(o.to) ||\r\n\t\t\t\t\to.to - o.from >= tsb.upper - tsb.lower\r\n\t\t\t\t){\r\n\t\t\t\t\t// any error --- remove from/to bounds\r\n\t\t\t\t\tdelete o.from;\r\n\t\t\t\t\tdelete o.to;\r\n\t\t\t\t\tdelete this.scale;\r\n\t\t\t\t\tdelete this.offset;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// shift the window, if we are out of bounds\r\n\t\t\t\t\tif(o.from < tsb.lower){\r\n\t\t\t\t\t\to.to += tsb.lower - o.from;\r\n\t\t\t\t\t\to.from = tsb.lower;\r\n\t\t\t\t\t}else if(o.to > tsb.upper){\r\n\t\t\t\t\t\to.from += tsb.upper - o.to;\r\n\t\t\t\t\t\to.to = tsb.upper;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// update the offset\r\n\t\t\t\t\tthis.offset = o.from - tsb.lower;\r\n\t\t\t\t}\r\n\t\t\t\t// re-calculate the scaler\r\n\t\t\t\tthis.scaler = lin.buildScaler(min, max, span, o);\r\n\t\t\t\ttsb = this.scaler.bounds;\r\n\t\t\t\t// cleanup\r\n\t\t\t\tif(this.scale == 1 && this.offset == 0){\r\n\t\t\t\t\tdelete this.scale;\r\n\t\t\t\t\tdelete this.offset;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/axis2d/Invisible\r\n\t\t},\r\n\t\tgetScaler: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the pre-calculated scaler object.\r\n\t\t\treturn this.scaler;\t//\tObject\r\n\t\t},\r\n\t\tgetTicks: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the pre-calculated ticks object.\r\n\t\t\treturn this.ticks;\t//\tObject\r\n\t\t}\r\n\t});\r\n});\r\n"]}