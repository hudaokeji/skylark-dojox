{"version":3,"sources":["charting/Theme.js"],"names":["define","lang","declare","Color","SimpleTheme","colorX","Palette","Theme","mixin","defineColors","kwArgs","l","c","n","num","colors","length","i","push","hue","s","saturation","st","low","high","generate","fromHsv","generator","base","generateGradient","fillPattern","colorFrom","colorTo","fill","delegate","offset","color","generateHslColor","luminance","hsl","toHsl","result","fromHsl","h","a","generateHslGradient","lumFrom","lumTo","defaultMarkers","defaultColors","defaultTheme"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,mBAAoB,gBAChE,oBAAqB,sBAAuB,uBAChD,SAASC,EAAMC,EAASC,EAAOC,EAAaC,EAAQC,GAEpD,IAAIC,EAAQL,EAAQ,uBAAwBE,MAkH5C,OArFAH,EAAKO,MAAMD,GAEVE,aAAc,SAASC,GAuBtB,IAAIC,EAAGC,KAAQC,GADfH,EAASA,OACiBI,KAAO,EACjC,GAAGJ,EAAOK,OAAO,CAEhBJ,EAAID,EAAOK,OAAOC,OAClB,IAAI,IAAIC,EAAI,EAAGA,EAAIJ,EAAGI,IACrBL,EAAEM,KAAKR,EAAOK,OAAOE,EAAIN,IAE1B,OAAOC,EAER,GAAGF,EAAOS,IAAI,CAEb,IAAIC,EAAIV,EAAOW,YAAc,IAC5BC,EAAKZ,EAAOa,KAAO,GAKpB,OAFAZ,IAFOD,EAAOc,MAAQ,IAEXF,GAAM,EAEVhB,EAAQmB,SACdpB,EAAOqB,QAAQhB,EAAOS,IAAKC,EAAGT,GAAI,iBACjCI,OAEH,OAAGL,EAAOiB,UAEFtB,EAAOC,QAAQmB,SAASf,EAAOkB,KAAMlB,EAAOiB,WAAWZ,OAExDH,GAGRiB,iBAAkB,SAASC,EAAaC,EAAWC,GAClD,IAAIC,EAAOhC,EAAKiC,SAASJ,GAKzB,OAJAG,EAAKlB,SACHoB,OAAQ,EAAGC,MAAOL,IAClBI,OAAQ,EAAGC,MAAOJ,IAEbC,GAGRI,iBAAkB,SAASD,EAAOE,GAEjC,IAAIC,GADJH,EAAQ,IAAIjC,EAAMiC,IACCI,QAClBC,EAASpC,EAAOqC,QAAQH,EAAII,EAAGJ,EAAInB,EAAGkB,GAEvC,OADAG,EAAOG,EAAIR,EAAMQ,EACVH,GAGRI,oBAAqB,SAAST,EAAON,EAAagB,EAASC,GAE1D,IAAIR,GADJH,EAAQ,IAAIjC,EAAMiC,IACII,QACrBT,EAAY1B,EAAOqC,QAAQH,EAAII,EAAGJ,EAAInB,EAAG0B,GACzCd,EAAY3B,EAAOqC,QAAQH,EAAII,EAAGJ,EAAInB,EAAG2B,GAE1C,OADAhB,EAAUa,EAAIZ,EAAQY,EAAIR,EAAMQ,EACzBrC,EAAMsB,iBAAiBC,EAAaC,EAAWC,MAKxDzB,EAAMyC,eAAiB5C,EAAY4C,eACnCzC,EAAM0C,cAAgB7C,EAAY6C,cAClC1C,EAAM2C,aAAe9C,EAAY8C,aAE1B3C","file":"../../charting/Theme.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/Color\", \"./SimpleTheme\",\r\n\t    \"dojox/color/_base\", \"dojox/color/Palette\", \"dojox/gfx/gradutils\"],\r\n\tfunction(lang, declare, Color, SimpleTheme, colorX, Palette){\r\n\t\r\n\tvar Theme = declare(\"dojox.charting.Theme\", SimpleTheme, {\r\n\t// summary:\r\n\t//\t\tA Theme is a pre-defined object, primarily JSON-based, that makes up the definitions to\r\n\t//\t\tstyle a chart. It extends SimpleTheme with additional features like color definition by\r\n\t//\t\tpalettes and gradients definition.\r\n\t});\r\n\r\n\t/*=====\r\n\tvar __DefineColorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tThe arguments object that can be passed to define colors for a theme.\r\n\t\t// num: Number?\r\n\t\t//\t\tThe number of colors to generate.  Defaults to 5.\r\n\t\t// colors: String[]|dojo/_base/Color[]?\r\n\t\t//\t\tA pre-defined set of colors; this is passed through to the Theme directly.\r\n\t\t// hue: Number?\r\n\t\t//\t\tA hue to base the generated colors from (a number from 0 - 359).\r\n\t\t// saturation: Number?\r\n\t\t//\t\tIf a hue is passed, this is used for the saturation value (0 - 100).\r\n\t\t// low: Number?\r\n\t\t//\t\tAn optional value to determine the lowest value used to generate a color (HSV model)\r\n\t\t// high: Number?\r\n\t\t//\t\tAn optional value to determine the highest value used to generate a color (HSV model)\r\n\t\t// base: String|dojo/_base/Color?\r\n\t\t//\t\tA base color to use if we are defining colors using dojox.color.Palette\r\n\t\t// generator: String?\r\n\t\t//\t\tThe generator function name from dojox/color/Palette.\r\n\t};\r\n\t=====*/\r\n\tlang.mixin(Theme, {\r\n\r\n\t\tdefineColors: function(kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGenerate a set of colors for the theme based on keyword\r\n\t\t\t//\t\targuments.\r\n\t\t\t// kwArgs: __DefineColorArgs\r\n\t\t\t//\t\tThe arguments object used to define colors.\r\n\t\t\t// returns: dojo/_base/Color[]\r\n\t\t\t//\t\tAn array of colors for use in a theme.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t|\tvar colors = Theme.defineColors({\r\n\t\t\t//\t|\t\tbase: \"#369\",\r\n\t\t\t//\t|\t\tgenerator: \"compound\"\r\n\t\t\t//\t|\t});\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t|\tvar colors = Theme.defineColors({\r\n\t\t\t//\t|\t\thue: 60,\r\n\t\t\t//\t|\t\tsaturation: 90,\r\n\t\t\t//\t|\t\tlow: 30,\r\n\t\t\t//\t|\t\thigh: 80\r\n\t\t\t//\t|\t});\r\n\t\t\tkwArgs = kwArgs || {};\r\n\t\t\tvar l, c = [], n = kwArgs.num || 5;\t// the number of colors to generate\r\n\t\t\tif(kwArgs.colors){\r\n\t\t\t\t// we have an array of colors predefined, so fix for the number of series.\r\n\t\t\t\tl = kwArgs.colors.length;\r\n\t\t\t\tfor(var i = 0; i < n; i++){\r\n\t\t\t\t\tc.push(kwArgs.colors[i % l]);\r\n\t\t\t\t}\r\n\t\t\t\treturn c;\t//\tdojo.Color[]\r\n\t\t\t}\r\n\t\t\tif(kwArgs.hue){\r\n\t\t\t\t// single hue, generate a set based on brightness\r\n\t\t\t\tvar s = kwArgs.saturation || 100,\t// saturation\r\n\t\t\t\t\tst = kwArgs.low || 30,\r\n\t\t\t\t\tend = kwArgs.high || 90;\r\n\t\t\t\t// we'd like it to be a little on the darker side.\r\n\t\t\t\tl = (end + st) / 2;\r\n\t\t\t\t// alternately, use \"shades\"\r\n\t\t\t\treturn Palette.generate(\r\n\t\t\t\t\tcolorX.fromHsv(kwArgs.hue, s, l), \"monochromatic\"\r\n\t\t\t\t).colors;\r\n\t\t\t}\r\n\t\t\tif(kwArgs.generator){\r\n\t\t\t\t//\tpass a base color and the name of a generator\r\n\t\t\t\treturn colorX.Palette.generate(kwArgs.base, kwArgs.generator).colors;\r\n\t\t\t}\r\n\t\t\treturn c;\t//\tdojo.Color[]\r\n\t\t},\r\n\r\n\t\tgenerateGradient: function(fillPattern, colorFrom, colorTo){\r\n\t\t\tvar fill = lang.delegate(fillPattern);\r\n\t\t\tfill.colors = [\r\n\t\t\t\t{offset: 0, color: colorFrom},\r\n\t\t\t\t{offset: 1, color: colorTo}\r\n\t\t\t];\r\n\t\t\treturn fill;\r\n\t\t},\r\n\r\n\t\tgenerateHslColor: function(color, luminance){\r\n\t\t\tcolor = new Color(color);\r\n\t\t\tvar hsl    = color.toHsl(),\r\n\t\t\t\tresult = colorX.fromHsl(hsl.h, hsl.s, luminance);\r\n\t\t\tresult.a = color.a;\t// add missing opacity\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\tgenerateHslGradient: function(color, fillPattern, lumFrom, lumTo){\r\n\t\t\tcolor = new Color(color);\r\n\t\t\tvar hsl       = color.toHsl(),\r\n\t\t\t\tcolorFrom = colorX.fromHsl(hsl.h, hsl.s, lumFrom),\r\n\t\t\t\tcolorTo   = colorX.fromHsl(hsl.h, hsl.s, lumTo);\r\n\t\t\tcolorFrom.a = colorTo.a = color.a;\t// add missing opacity\r\n\t\t\treturn Theme.generateGradient(fillPattern, colorFrom, colorTo);\t// Object\r\n\t\t}\r\n\t});\r\n\r\n\t// for compatibility\r\n\tTheme.defaultMarkers = SimpleTheme.defaultMarkers;\r\n\tTheme.defaultColors = SimpleTheme.defaultColors;\r\n\tTheme.defaultTheme = SimpleTheme.defaultTheme;\r\n\r\n\treturn Theme;\r\n});\r\n"]}