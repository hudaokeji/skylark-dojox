{"version":3,"sources":["charting/scaler/primitive.js"],"names":["define","lang","primitive","getObject","mixin","buildScaler","min","max","span","kwArgs","bounds","lower","upper","from","to","scale","scaler","buildTicks","major","minor","micro","getTransformerFromModel","offset","x","getTransformerFromPlot"],"mappings":";;;;;;;AAAAA,QAAQ,mBACN,SAASC,GACV,IAAIC,EAAYD,EAAKE,UAAU,mCAAmC,GAClE,OAAOF,EAAKG,MAAMF,GACjBG,YAAa,SAAoBC,EAAgBC,EAAgBC,EAAiBC,GAOjF,OANGH,GAAOC,IAETD,GAAO,GACPC,GAAO,KAIPG,QACCC,MAAOL,EACPM,MAAOL,EACPM,KAAOP,EACPQ,GAAOP,EACPQ,MAAOP,GAAQD,EAAMD,GACrBE,KAAOA,GAERQ,OAAQd,IAGVe,WAAY,SAAoBD,EAAmBP,GAClD,OAAQS,SAAWC,SAAWC,WAE/BC,wBAAyB,SAAoBL,GAC5C,IAAIM,EAASN,EAAON,OAAOG,KAAME,EAAQC,EAAON,OAAOK,MACvD,OAAO,SAASQ,GAAI,OAAQA,EAAID,GAAUP,IAE3CS,uBAAwB,SAAoBR,GAC3C,IAAIM,EAASN,EAAON,OAAOG,KAAME,EAAQC,EAAON,OAAOK,MACvD,OAAO,SAASQ,GAAI,OAAOA,EAAIR,EAAQO","file":"../../../charting/scaler/primitive.js","sourcesContent":["define([\"dojo/_base/lang\"], \r\n  function(lang){\r\n\tvar primitive = lang.getObject(\"dojox.charting.scaler.primitive\", true);\r\n\treturn lang.mixin(primitive, {\r\n\t\tbuildScaler: function(/*Number*/ min, /*Number*/ max, /*Number*/ span, /*Object*/ kwArgs){\r\n\t\t\tif(min == max){\r\n\t\t\t\t// artificially extend bounds\r\n\t\t\t\tmin -= 0.5;\r\n\t\t\t\tmax += 0.5;\r\n\t\t\t\t// now the line will be centered\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tbounds: {\r\n\t\t\t\t\tlower: min,\r\n\t\t\t\t\tupper: max,\r\n\t\t\t\t\tfrom:  min,\r\n\t\t\t\t\tto:    max,\r\n\t\t\t\t\tscale: span / (max - min),\r\n\t\t\t\t\tspan:  span\r\n\t\t\t\t},\r\n\t\t\t\tscaler: primitive\r\n\t\t\t};\r\n\t\t},\r\n\t\tbuildTicks: function(/*Object*/ scaler, /*Object*/ kwArgs){\r\n\t\t\treturn {major: [], minor: [], micro: []};\t// Object\r\n\t\t},\r\n\t\tgetTransformerFromModel: function(/*Object*/ scaler){\r\n\t\t\tvar offset = scaler.bounds.from, scale = scaler.bounds.scale;\r\n\t\t\treturn function(x){ return (x - offset) * scale; };\t// Function\r\n\t\t},\r\n\t\tgetTransformerFromPlot: function(/*Object*/ scaler){\r\n\t\t\tvar offset = scaler.bounds.from, scale = scaler.bounds.scale;\r\n\t\t\treturn function(x){ return x / scale + offset; };\t// Function\r\n\t\t}\r\n\t});\r\n});\r\n"]}