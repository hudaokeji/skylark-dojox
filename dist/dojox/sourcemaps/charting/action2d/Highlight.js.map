{"version":3,"sources":["charting/action2d/Highlight.js"],"names":["define","lang","declare","Color","hub","c","PlotAction","dfe","dgf","hl","color","a","x","toHsl","s","l","rcolor","fromHsl","spiderhl","r","defaultParams","duration","easing","backOut","optionalParams","highlight","constructor","chart","plot","kwArgs","this","colorFunc","isFunction","connect","process","o","shape","type","overOutEvents","element","anim","runName","run","name","index","action","stop","getFill","start","end","t","animateFill","play"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,mBAAoB,qBAAsB,oBACzF,eAAgB,iBAAkB,gBACnC,SAASC,EAAMC,EAASC,EAAOC,EAAKC,EAAGC,EAAYC,EAAKC,GAgBxD,IAOCC,EAAK,SAASC,GACb,IAAIC,EAAI,IAAIN,EAAEF,MAAMO,GACnBE,EAAID,EAAEE,QACG,GAAPD,EAAEE,EACJF,EAAEG,EAAIH,EAAEG,EAAI,GAAK,IAAM,GAEvBH,EAAEE,EAbqB,IAcpBF,EAAEG,EAZe,GAanBH,EAAEG,EAdiB,GAeXH,EAAEG,EAfS,GAgBnBH,EAAEG,EAfiB,GAiBnBH,EAAEG,EAAIH,EAAEG,EAjBW,GADA,GAkBqCH,EAAEG,EAjBvC,GADA,IAsBrB,IAAIC,EAASX,EAAEY,QAAQL,GAEvB,OADAI,EAAOL,EAAIA,EAAEA,EACNK,GAGRE,EAAW,SAASR,GACnB,IAAIS,EAAIV,EAAGC,GAEX,OADAS,EAAER,EAAI,GACCQ,GAGT,OAAOjB,EAAQ,oCAAqCI,GAMnDc,eACCC,SAAU,IACVC,OAAUf,EAAIgB,SAEfC,gBACCC,UAAW,OAIZC,YAAa,SAASC,EAAOC,EAAMC,GASlC,IAvDanB,EAuDTC,EAAIkB,GAAUA,EAAOJ,UACzBK,KAAKC,UAAYpB,EAAKV,EAAK+B,WAAWrB,GAAKA,GAxD9BD,EAwDqCC,EAvD3C,WAAY,OAAOD,IAuD8BD,EACxDqB,KAAKG,WAGNC,QAAS,SAASC,GAKjB,GAAIA,EAAEC,OAAWD,EAAEE,QAAQP,KAAKQ,eAGhB,iBAAbH,EAAEI,SAA2C,eAAbJ,EAAEI,QAArC,CAEsB,eAAbJ,EAAEI,SAA4BT,KAAKC,WAAatB,IAGxDqB,KAAKC,UAAYb,GAGlB,IAA2CsB,EAAvCC,EAAUN,EAAEO,IAAIC,KAAMC,EAAQT,EAAES,MAQpC,GANGH,KAAWX,KAAKU,KAClBA,EAAOV,KAAKU,KAAKC,GAASG,GAE1Bd,KAAKU,KAAKC,MAGRD,EACFA,EAAKK,OAAOC,MAAK,OACb,CACJ,IAAIpC,EAAQyB,EAAEC,MAAMW,UACpB,KAAIrC,GAAWA,aAAiBP,GAC/B,OAED2B,KAAKU,KAAKC,GAASG,GAASJ,GAC3BQ,MAAOtC,EACPuC,IAAOnB,KAAKC,UAAUrB,IAIxB,IAAIsC,EAAQR,EAAKQ,MAAOC,EAAMT,EAAKS,IACnC,GAAa,cAAVd,EAAEE,KAAqB,CAEzB,IAAIa,EAAIF,EACRA,EAAQC,EACRA,EAAMC,EAGPV,EAAKK,OAASrC,EAAI2C,aACjBf,MAAUD,EAAEC,MACZf,SAAUS,KAAKT,SACfC,OAAUQ,KAAKR,OACfZ,OAAWsC,MAAOA,EAAOC,IAAKA,KAElB,cAAVd,EAAEE,MACJjC,EAAI6B,QAAQO,EAAKK,OAAQ,QAASf,KAAM,WACpCA,KAAKU,KAAKC,WACLX,KAAKU,KAAKC,GAASG,KAI7BJ,EAAKK,OAAOO","file":"../../../charting/action2d/Highlight.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/Color\", \"dojo/_base/connect\", \"dojox/color/_base\",\r\n\t\t\"./PlotAction\", \"dojo/fx/easing\", \"dojox/gfx/fx\"], \r\n\tfunction(lang, declare, Color, hub, c, PlotAction, dfe, dgf){\r\n\r\n\t/*=====\r\n\tvar __HighlightCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tAdditional arguments for highlighting actions.\r\n\t\t// duration: Number?\r\n\t\t//\t\tThe amount of time in milliseconds for an animation to last.  Default is 400.\r\n\t\t// easing: dojo/fx/easing/*?\r\n\t\t//\t\tAn easing object (see dojo.fx.easing) for use in an animation.  The\r\n\t\t//\t\tdefault is dojo.fx.easing.backOut.\r\n\t\t// highlight: String|dojo/_base/Color|Function?\r\n\t\t//\t\tEither a color or a function that creates a color when highlighting happens.\r\n\t};\r\n\t=====*/\r\n\t\r\n\tvar DEFAULT_SATURATION  = 100,\t// %\r\n\t\tDEFAULT_LUMINOSITY1 = 75,\t// %\r\n\t\tDEFAULT_LUMINOSITY2 = 50,\t// %\r\n\t\tcc = function(color){\r\n\t\t\treturn function(){ return color; };\r\n\t\t},\r\n\r\n\t\thl = function(color){\r\n\t\t\tvar a = new c.Color(color),\r\n\t\t\t\tx = a.toHsl();\r\n\t\t\tif(x.s == 0){\r\n\t\t\t\tx.l = x.l < 50 ? 100 : 0;\r\n\t\t\t}else{\r\n\t\t\t\tx.s = DEFAULT_SATURATION;\r\n\t\t\t\tif(x.l < DEFAULT_LUMINOSITY2){\r\n\t\t\t\t\tx.l = DEFAULT_LUMINOSITY1;\r\n\t\t\t\t}else if(x.l > DEFAULT_LUMINOSITY1){\r\n\t\t\t\t\tx.l = DEFAULT_LUMINOSITY2;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tx.l = x.l - DEFAULT_LUMINOSITY2 > DEFAULT_LUMINOSITY1 - x.l ?\r\n\t\t\t\t\t\tDEFAULT_LUMINOSITY2 : DEFAULT_LUMINOSITY1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar rcolor = c.fromHsl(x);\r\n\t\t\trcolor.a = a.a;\r\n\t\t\treturn rcolor;\r\n\t\t},\r\n\r\n\t\tspiderhl = function(color){\r\n\t\t\tvar r = hl(color);\r\n\t\t\tr.a = 0.7;\r\n\t\t\treturn r;\r\n\t\t}\r\n\r\n\treturn declare(\"dojox.charting.action2d.Highlight\", PlotAction, {\r\n\t\t// summary:\r\n\t\t//\t\tCreates a highlighting action on a plot, where an element on that plot\r\n\t\t//\t\thas a highlight on it.\r\n\r\n\t\t// the data description block for the widget parser\r\n\t\tdefaultParams: {\r\n\t\t\tduration: 400,\t// duration of the action in ms\r\n\t\t\teasing:   dfe.backOut\t// easing for the action\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\thighlight: \"red\"\t// name for the highlight color\r\n\t\t\t\t\t\t\t\t// programmatic instantiation can use functions and color objects\r\n\t\t},\r\n\r\n\t\tconstructor: function(chart, plot, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the highlighting action and connect it to the plot.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this action belongs to.\r\n\t\t\t// plot: String?\r\n\t\t\t//\t\tThe plot this action is attached to.  If not passed, \"default\" is assumed.\r\n\t\t\t// kwArgs: __HighlightCtorArgs?\r\n\t\t\t//\t\tOptional keyword arguments object for setting parameters.\r\n\t\t\tvar a = kwArgs && kwArgs.highlight;\r\n\t\t\tthis.colorFunc = a ? (lang.isFunction(a) ? a : cc(a)) : hl;\r\n\t\t\tthis.connect();\r\n\t\t},\r\n\r\n\t\tprocess: function(o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProcess the action on the given object.\r\n\t\t\t// o: dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe object on which to process the highlighting action.\r\n\t\t\tif(!o.shape || !(o.type in this.overOutEvents)){ return; }\r\n\r\n\t\t\t// if spider let's deal only with poly\r\n\t\t\tif(o.element == \"spider_circle\" || o.element == \"spider_plot\"){\r\n\t\t\t\treturn;\r\n\t\t\t}else if(o.element == \"spider_poly\" && this.colorFunc == hl){\r\n\t\t\t\t// hardcode alpha for compatibility reasons\r\n\t\t\t\t// TODO to remove in 2.0\r\n\t\t\t\tthis.colorFunc = spiderhl;\r\n\t\t\t}\r\n\r\n\t\t\tvar runName = o.run.name, index = o.index, anim;\r\n\r\n\t\t\tif(runName in this.anim){\r\n\t\t\t\tanim = this.anim[runName][index];\r\n\t\t\t}else{\r\n\t\t\t\tthis.anim[runName] = {};\r\n\t\t\t}\r\n\r\n\t\t\tif(anim){\r\n\t\t\t\tanim.action.stop(true);\r\n\t\t\t}else{\r\n\t\t\t\tvar color = o.shape.getFill();\r\n\t\t\t\tif(!color || !(color instanceof Color)){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.anim[runName][index] = anim = {\r\n\t\t\t\t\tstart: color,\r\n\t\t\t\t\tend:   this.colorFunc(color)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tvar start = anim.start, end = anim.end;\r\n\t\t\tif(o.type == \"onmouseout\"){\r\n\t\t\t\t// swap colors\r\n\t\t\t\tvar t = start;\r\n\t\t\t\tstart = end;\r\n\t\t\t\tend = t;\r\n\t\t\t}\r\n\r\n\t\t\tanim.action = dgf.animateFill({\r\n\t\t\t\tshape:    o.shape,\r\n\t\t\t\tduration: this.duration,\r\n\t\t\t\teasing:   this.easing,\r\n\t\t\t\tcolor:    {start: start, end: end}\r\n\t\t\t});\r\n\t\t\tif(o.type == \"onmouseout\"){\r\n\t\t\t\thub.connect(anim.action, \"onEnd\", this, function(){\r\n\t\t\t\t\tif(this.anim[runName]){\r\n\t\t\t\t\t\tdelete this.anim[runName][index];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tanim.action.play();\r\n\t\t}\r\n\t});\r\n\t\r\n});\r\n"]}