{"version":3,"sources":["charting/action2d/TouchIndicator.js"],"names":["define","lang","declare","eventUtil","has","touch","dconnect","ChartAction","IndicatorElement","du","defaultParams","series","dualIndicator","vertical","autoScroll","fixed","precision","lines","labels","markers","optionalParams","lineStroke","outlineStroke","shadowStroke","lineFill","stroke","outline","shadow","fill","fillFunc","labelFunc","font","fontColor","markerStroke","markerOutline","markerShadow","markerFill","markerSymbol","offset","start","constructor","chart","plot","kwArgs","this","_listeners","eventName","methodName","press","move","cancel","opt","clone","updateWithObject","updateWithPattern","_uName","connect","inherited","arguments","addPlot","type","inter","disconnect","getPlot","pageCoord","onTouchEnd","removePlot","onChange","event","onTouchStart","touches","length","_onTouchDual","_onTouchSingle","onTouchMove","delayed","_onTouchEndHandler","node","ownerDocument","release","_delayedRenderHandle","render","x","pageX","y","pageY","dirty","delayedRender","stop","secondCoord","stopTrack"],"mappings":"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","file":"../../../charting/action2d/TouchIndicator.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/event\", \"dojo/has\", \"dojo/touch\", \"dojo/_base/connect\", \"./ChartAction\", \"./_IndicatorElement\", \"dojox/lang/utils\"],\r\n\tfunction(lang, declare, eventUtil, has, touch, dconnect, ChartAction, IndicatorElement, du){\r\n\t\r\n\t/*=====\r\n\tvar __TouchIndicatorCtorArgs = {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdditional arguments for touch indicator.\r\n\t\t\t// series: String\r\n\t\t\t//\t\tTarget series name for this action.\r\n\t\t\t// autoScroll: Boolean?\r\n\t\t\t//\t\tWhether when moving indicator the chart is automatically scrolled. Default is true.\r\n\t\t\t// lines: Boolean?\r\n\t\t\t//\t\tWhether the indicator lines are visible or not. Default is true.\r\n\t\t\t// labels: Boolean?\r\n\t\t\t//\t\tWhether the indicator label is visible or not. Default is true.\r\n\t\t\t// markers: Boolean?\r\n\t\t\t//\t\tWhether the indicator markers are visible or not. Default is true.\r\n\t\t\t// offset: {x, y}?\r\n\t\t\t//\t\tA pair of (x, y) pixel coordinate to specify the offset between the end of the indicator line and the\r\n\t\t\t//\t\tposition at which the labels are rendered. Default is no offset which means it is automatically computed.\r\n\t\t\t// start: Boolean?\r\n\t\t\t//\t\tWhether the label is rendered at the start or end of the indicator. Default is false meaning end of\r\n\t\t\t//\t\tthe line.\r\n\t\t\t// vertical: Boolean?\r\n\t\t\t//\t\tWhether the indicator is vertical or not. Default is true.\r\n\t\t\t// fixed: Boolean?\r\n\t\t\t//\t\tWhether a fixed precision must be applied to data values for display. Default is true.\r\n\t\t\t// precision: Number?\r\n\t\t\t//\t\tThe precision at which to round data values for display. Default is 0.\r\n\t\t\t// lineStroke: dojo/gfx/Stroke?\r\n\t\t\t//\t\tAn optional stroke to use for indicator line.\r\n\t\t\t// lineOutline: dojo/gfx/Stroke?\r\n\t\t\t//\t\tAn optional outline to use for indicator line.\r\n\t\t\t// lineShadow: dojo/gfx/Stroke?\r\n\t\t\t//\t\tAn optional shadow to use for indicator line.\r\n\t\t\t// stroke: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional stroke to use for indicator label background.\r\n\t\t\t// outline: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional outline to use for indicator label background.\r\n\t\t\t// shadow: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional shadow to use for indicator label background.\r\n\t\t\t// fill: dojo.gfx.Fill?\r\n\t\t\t//\t\tAn optional fill to use for indicator label background.\r\n\t\t\t// fillFunc: Function?\r\n\t\t\t//\t\tAn optional function to use to compute label background fill. It takes precedence over\r\n\t\t\t//\t\tfill property when available.\r\n\t\t\t// labelFunc: Function?\r\n\t\t\t//\t\tAn optional function to use to compute label text. It takes precedence over\r\n\t\t\t//\t\tthe default text when available.\r\n\t\t\t//\t|\t\tfunction labelFunc(firstDataPoint, secondDataPoint, fixed, precision) {}\r\n\t\t\t//\t\t`firstDataPoint` is the `{x, y}` data coordinates pointed by the touch point.\r\n\t\t\t//\t\t`secondDataPoint` is the data coordinates pointed by the second touch point.\r\n\t\t\t//\t\t`fixed` is true if fixed precision must be applied.\r\n\t\t\t//\t\t`precision` is the requested precision to be applied.\r\n\t\t\t// font: String?\r\n\t\t\t//\t\tA font definition to use for indicator label background.\r\n\t\t\t// fontColor: String|dojo.Color?\r\n\t\t\t//\t\tThe color to use for indicator label background.\r\n\t\t\t// markerStroke: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional stroke to use for indicator marker.\r\n\t\t\t// markerOutline: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional outline to use for indicator marker.\r\n\t\t\t// markerShadow: dojo.gfx.Stroke?\r\n\t\t\t//\t\tAn optional shadow to use for indicator marker.\r\n\t\t\t// markerFill: dojo.gfx.Fill?\r\n\t\t\t//\t\tAn optional fill to use for indicator marker.\r\n\t\t\t// markerSymbol: String?\r\n\t\t\t//\t\tAn optional symbol string to use for indicator marker.\r\n\t\t};\r\n\t=====*/\r\n\t\t\r\n\treturn declare(\"dojox.charting.action2d.TouchIndicator\", ChartAction, {\r\n\t\t// summary:\r\n\t\t//\t\tCreate a touch indicator action. You can touch over the chart to display a data indicator.\r\n\r\n\t\t// the data description block for the widget parser\r\n\t\tdefaultParams: {\r\n\t\t\tseries: \"\",\r\n\t\t\tdualIndicator: false,\r\n\t\t\tvertical: true,\r\n\t\t\tautoScroll: true,\r\n\t\t\tfixed: true,\r\n\t\t\tprecision: 0,\r\n\t\t\tlines: true,\r\n\t\t\tlabels: true,\r\n\t\t\tmarkers: true\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\tlineStroke: {},\r\n\t\t\toutlineStroke: {},\r\n\t\t\tshadowStroke: {},\r\n\t\t\tlineFill: {},\r\n\t\t\tstroke:\t\t{},\r\n\t\t\toutline:\t{},\r\n\t\t\tshadow:\t\t{},\r\n\t\t\tfill:\t\t{},\r\n\t\t\tfillFunc:  null,\r\n\t\t\tlabelFunc: null,\r\n\t\t\tfont:\t\t\"\",\r\n\t\t\tfontColor:\t\"\",\r\n\t\t\tmarkerStroke:\t\t{},\r\n\t\t\tmarkerOutline:\t\t{},\r\n\t\t\tmarkerShadow:\t\t{},\r\n\t\t\tmarkerFill:\t\t\t{},\r\n\t\t\tmarkerSymbol:\t\t\"\",\r\n\t\t\toffset: {},\r\n\t\t\tstart: false\r\n\t\t},\t\r\n\r\n\t\tconstructor: function(chart, plot, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a new touch indicator action and connect it.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this action applies to.\r\n\t\t\t// kwArgs: __TouchIndicatorCtorArgs?\r\n\t\t\t//\t\tOptional arguments for the chart action.\r\n\r\n\t\t\t// we should not have to do that, but dojo/touch is causing performances issue\r\n\t\t\t// we have to workaround here for now\r\n\t\t\tif(has(\"touch-events\")){\r\n\t\t\t\tthis._listeners = [\r\n\t\t\t\t\t{eventName: \"touchstart\", methodName: \"onTouchStart\"},\r\n\t\t\t\t\t{eventName: \"touchmove\", methodName: \"onTouchMove\"},\r\n\t\t\t\t\t{eventName: \"touchend\", methodName: \"onTouchEnd\"},\r\n\t\t\t\t\t{eventName: \"touchcancel\", methodName: \"onTouchEnd\"}\r\n\t\t\t\t];\r\n\t\t\t} else {\r\n\t\t\t\tthis._listeners = [\r\n\t\t\t\t\t{eventName: touch.press, methodName: \"onTouchStart\"},\r\n\t\t\t\t\t{eventName: touch.move, methodName: \"onTouchMove\"},\r\n\t\t\t\t\t{eventName: touch.cancel, methodName: \"onTouchEnd\"}\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\tthis.opt = lang.clone(this.defaultParams);\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t\tthis._uName = \"touchIndicator\"+this.opt.series;\r\n\t\t\tthis.connect();\r\n\t\t},\r\n\t\t\r\n\t\tconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect this action to the chart. This adds a indicator plot\r\n\t\t\t//\t\tto the chart that's why Chart.render() must be called after connect.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// add plot with unique name\r\n\t\t\tthis.chart.addPlot(this._uName, {type: IndicatorElement, inter: this});\r\n\t\t},\r\n\r\n\t\tdisconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisconnect this action from the chart.\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tif(plot.pageCoord){\r\n\t\t\t\t// we might still have something drawn on the screen\r\n\t\t\t\tthis.onTouchEnd();\r\n\t\t\t}\r\n\t\t\tthis.chart.removePlot(this._uName);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tonChange: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the indicator value changed.\r\n\t\t\t// event:\r\n\t\t\t//\t\tAn event with a start and end properties containing the {x, y} data points of the first and\r\n\t\t\t//\t\tsecond (if available) touch indicators. It also contains a label property containing the displayed\r\n\t\t\t//\t\ttext.\r\n\t\t},\r\n\r\n\t\tonTouchStart: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is started on the chart.\r\n\t\t\tif(!event.touches || event.touches.length == 1){\r\n\t\t\t\tthis._onTouchSingle(event, true);\r\n\t\t\t}else if(this.opt.dualIndicator && event.touches.length == 2){\r\n\t\t\t\tthis._onTouchDual(event);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonTouchMove: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is moved on the chart.\r\n\t\t\tif(!event.touches || event.touches.length == 1){\r\n\t\t\t\tthis._onTouchSingle(event);\r\n\t\t\t}else if(this.opt.dualIndicator && event.touches.length == 2){\r\n\t\t\t\tthis._onTouchDual(event);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onTouchSingle: function(event, delayed){\r\n\t\t\tif(!has(\"touch-events\") && !this._onTouchEndHandler){\r\n\t\t\t\tthis._onTouchEndHandler =\r\n\t\t\t\t\tdconnect.connect(this.chart.node.ownerDocument, touch.release, this, \"onTouchEnd\");\r\n\t\t\t}\r\n\t\t\tif(this.chart._delayedRenderHandle && !delayed){\r\n\t\t\t\t// we have pending rendering from a previous call, let's sync\r\n\t\t\t\tthis.chart.render();\r\n\t\t\t}\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tplot.pageCoord  = {x: event.touches?event.touches[0].pageX:event.pageX, y: event.touches?event.touches[0].pageY:event.pageY};\r\n\t\t\tplot.dirty = true;\r\n\t\t\tif(delayed){\r\n\t\t\t\tthis.chart.delayedRender();\r\n\t\t\t}else{\r\n\t\t\t\tthis.chart.render();\r\n\t\t\t}\r\n\t\t\teventUtil.stop(event);\r\n\t\t},\r\n\r\n\t\t_onTouchDual: function(event){\r\n\t\t\t// sync\r\n\t\t\tif(!has(\"touch-events\") && !this._onTouchEndHandler){\r\n\t\t\t\tthis._onTouchEndHandler =\r\n\t\t\t\t\tdconnect.connect(this.chart.node.ownerDocument, touch.release, this, \"onTouchEnd\");\r\n\t\t\t}\r\n\t\t\tif(this.chart._delayedRenderHandle){\r\n\t\t\t\t// we have pending rendering from a previous call, let's sync\r\n\t\t\t\tthis.chart.render();\r\n\t\t\t}\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tplot.pageCoord = {x: event.touches[0].pageX, y: event.touches[0].pageY};\r\n\t\t\tplot.secondCoord = {x: event.touches[1].pageX, y: event.touches[1].pageY};\r\n\t\t\tplot.dirty = true;\r\n\t\t\tthis.chart.render();\r\n\t\t\teventUtil.stop(event);\r\n\t\t},\r\n\r\n\t\tonTouchEnd: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is ended or canceled on the chart.\r\n\t\t\tif(!has(\"touch-events\") && this._onTouchEndHandler){\r\n\t\t\t\tdconnect.disconnect(this._onTouchEndHandler);\r\n\t\t\t\tthis._onTouchEndHandler = null;\r\n\t\t\t}\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tplot.stopTrack();\r\n\t\t\tplot.pageCoord = null;\r\n\t\t\tplot.secondCoord = null;\r\n\t\t\tplot.dirty = true;\r\n\t\t\tthis.chart.delayedRender();\r\n\t\t}\r\n\t});\r\n});\r\n"]}