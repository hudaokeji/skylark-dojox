{"version":3,"sources":["charting/action2d/MoveSlice.js"],"names":["define","hub","declare","array","PlotAction","dfe","m","gf","df","defaultParams","duration","easing","backOut","scale","shift","optionalParams","constructor","chart","plot","kwArgs","this","connect","process","o","shape","element","type","overOutEvents","angles","startAngle","_degToRad","opt","run","data","map","scanl","foldl","item","anim","startScale","endScale","startOffset","endOffset","index","angle","rotateTo0","rotateAt","cx","cy","rotateBack","action","stop","animateTransform","transform","name","start","end","play","reset"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,qBAAsB,mBAAoB,eAAgB,iBAAkB,mBACzG,eAAgB,wBAAyB,6BAA8B,8BACvE,SAASC,EAAKC,EAASC,EAAOC,EAAYC,EAAKC,EAAGC,EAAIC,GAqBtD,OAAON,EAAQ,oCAAqCE,GAKnDK,eACCC,SAAU,IACVC,OAAUN,EAAIO,QACdC,MAXkB,KAYlBC,MAXe,GAahBC,kBAEAC,YAAa,SAASC,EAAOC,EAAMC,GAS9BA,IAASA,MACbC,KAAKP,MAA+B,iBAAhBM,EAAON,MAAoBM,EAAON,MA1BpC,KA2BlBO,KAAKN,MAA+B,iBAAhBK,EAAOL,MAAoBK,EAAOL,MA1BvC,EA4BfM,KAAKC,WAGNC,QAAS,SAASC,GAKjB,GAAIA,EAAEC,OAAsB,SAAbD,EAAEE,SAAwBF,EAAEG,QAAQN,KAAKO,cAAxD,CAEA,IAAIP,KAAKQ,OAAO,CAEf,IAAIC,EAAavB,EAAEwB,UAAUP,EAAEL,KAAKa,IAAIF,YACb,iBAAjBN,EAAES,IAAIC,KAAK,GACpBb,KAAKQ,OAASpB,EAAG0B,IAAI1B,EAAG2B,MAAMZ,EAAES,IAAIC,KAAM,IAAK,GAC9C,uBAAwBzB,EAAG4B,MAAMb,EAAES,IAAIC,KAAM,IAAK,IAEnDb,KAAKQ,OAASpB,EAAG0B,IAAI1B,EAAG2B,MAAMZ,EAAES,IAAIC,KAAM,UAAW,GACpD,uBAAwBzB,EAAG4B,MAAMb,EAAES,IAAIC,KAAM,UAAW,IAE1Db,KAAKQ,OAASzB,EAAM+B,IAAId,KAAKQ,OAAQ,SAASS,GAC7C,OAAOA,EAAOR,IAIhB,IAAqBS,EAAMC,EAAYC,EAAUC,EAAaC,EAA1DC,EAAQpB,EAAEoB,MACbC,GAASxB,KAAKQ,OAAOe,GAASvB,KAAKQ,OAAOe,EAAQ,IAAM,EACxDE,EAAavC,EAAEwC,UAAUF,EAAOrB,EAAEwB,GAAIxB,EAAEyB,IACxCC,EAAa3C,EAAEwC,SAAUF,EAAOrB,EAAEwB,GAAIxB,EAAEyB,KAEzCV,EAAOlB,KAAKkB,KAAKK,IAGhBL,EAAKY,OAAOC,MAAK,GAEjB/B,KAAKkB,KAAKK,GAASL,KAGP,eAAVf,EAAEG,MACJe,EAAc,EACdC,EAActB,KAAKN,MACnByB,EAAc,EACdC,EAAcpB,KAAKP,QAEnB4B,EAAcrB,KAAKN,MACnB4B,EAAc,EACdH,EAAcnB,KAAKP,MACnB2B,EAAc,GAGfF,EAAKY,OAAS3C,EAAG6C,kBAChB5B,MAAUD,EAAEC,MACZd,SAAUU,KAAKV,SACfC,OAAUS,KAAKT,OACf0C,WACCJ,GACCK,KAAM,YAAaC,OAAQd,EAAa,GAAIe,KAAMd,EAAW,KAC7DY,KAAM,UAAaC,OAAQhB,EAAYhB,EAAEwB,GAAIxB,EAAEyB,IAAMQ,KAAMhB,EAAUjB,EAAEwB,GAAIxB,EAAEyB,KAC9EH,KAIW,cAAVtB,EAAEG,MACJzB,EAAIoB,QAAQiB,EAAKY,OAAQ,QAAS9B,KAAM,kBAChCA,KAAKkB,KAAKK,KAGnBL,EAAKY,OAAOO,SAGbC,MAAO,kBACCtC,KAAKQ","file":"../../../charting/action2d/MoveSlice.js","sourcesContent":["define([\"dojo/_base/connect\", \"dojo/_base/declare\", \"dojo/_base/array\", \"./PlotAction\", \"dojo/fx/easing\", \"dojox/gfx/matrix\",\r\n\t\"dojox/gfx/fx\", \"dojox/lang/functional\", \"dojox/lang/functional/scan\", \"dojox/lang/functional/fold\"],\r\n\tfunction(hub, declare, array, PlotAction, dfe, m, gf, df){\r\n\r\n\t/*=====\r\n\tvar __MoveSliceCtorArgs = {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdditional arguments for move slice actions.\r\n\t\t\t// duration: Number?\r\n\t\t\t//\t\tThe amount of time in milliseconds for an animation to last.  Default is 400.\r\n\t\t\t// easing: dojo/fx/easing/*?\r\n\t\t\t//\t\tAn easing object (see dojo.fx.easing) for use in an animation.  The\r\n\t\t\t//\t\tdefault is dojo.fx.easing.backOut.\r\n\t\t\t// scale: Number?\r\n\t\t\t//\t\tThe amount to scale the pie slice.  Default is 1.05.\r\n\t\t\t// shift: Number?\r\n\t\t\t//\t\tThe amount in pixels to shift the pie slice.  Default is 7.\r\n\t};\r\n\t=====*/\r\n\t\r\n\tvar DEFAULT_SCALE = 1.05,\r\n\t\tDEFAULT_SHIFT = 7;\t// px\r\n\r\n\treturn declare(\"dojox.charting.action2d.MoveSlice\", PlotAction, {\r\n\t\t// summary:\r\n\t\t//\t\tCreate an action for a pie chart that moves and scales a pie slice.\r\n\r\n\t\t// the data description block for the widget parser\r\n\t\tdefaultParams: {\r\n\t\t\tduration: 400,\t// duration of the action in ms\r\n\t\t\teasing:   dfe.backOut,\t// easing for the action\r\n\t\t\tscale:    DEFAULT_SCALE,\t// scale of magnification\r\n\t\t\tshift:    DEFAULT_SHIFT\t\t// shift of the slice\r\n\t\t},\r\n\t\toptionalParams: {},\t// no optional parameters\r\n\r\n\t\tconstructor: function(chart, plot, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the slice moving action and connect it to the plot.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this action belongs to.\r\n\t\t\t// plot: String?\r\n\t\t\t//\t\tThe plot this action is attached to.  If not passed, \"default\" is assumed.\r\n\t\t\t// kwArgs: __MoveSliceCtorArgs?\r\n\t\t\t//\t\tOptional keyword arguments object for setting parameters.\r\n\t\t\tif(!kwArgs){ kwArgs = {}; }\r\n\t\t\tthis.scale = typeof kwArgs.scale == \"number\" ? kwArgs.scale : DEFAULT_SCALE;\r\n\t\t\tthis.shift = typeof kwArgs.shift == \"number\" ? kwArgs.shift : DEFAULT_SHIFT;\r\n\r\n\t\t\tthis.connect();\r\n\t\t},\r\n\r\n\t\tprocess: function(o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProcess the action on the given object.\r\n\t\t\t// o: dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe object on which to process the slice moving action.\r\n\t\t\tif(!o.shape || o.element != \"slice\" || !(o.type in this.overOutEvents)){ return; }\r\n\r\n\t\t\tif(!this.angles){\r\n\t\t\t\t// calculate the running total of slice angles\r\n\t\t\t\tvar startAngle = m._degToRad(o.plot.opt.startAngle);\r\n\t\t\t\tif(typeof o.run.data[0] == \"number\"){\r\n\t\t\t\t\tthis.angles = df.map(df.scanl(o.run.data, \"+\", 0),\r\n\t\t\t\t\t\t\"* 2 * Math.PI / this\", df.foldl(o.run.data, \"+\", 0));\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.angles = df.map(df.scanl(o.run.data, \"a + b.y\", 0),\r\n\t\t\t\t\t\t\"* 2 * Math.PI / this\", df.foldl(o.run.data, \"a + b.y\", 0));\r\n\t\t\t\t}\r\n\t\t\t\tthis.angles = array.map(this.angles, function(item){\r\n\t\t\t\t\treturn item + startAngle;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar index = o.index, anim, startScale, endScale, startOffset, endOffset,\r\n\t\t\t\tangle = (this.angles[index] + this.angles[index + 1]) / 2,\r\n\t\t\t\trotateTo0  = m.rotateAt(-angle, o.cx, o.cy),\r\n\t\t\t\trotateBack = m.rotateAt( angle, o.cx, o.cy);\r\n\r\n\t\t\tanim = this.anim[index];\r\n\r\n\t\t\tif(anim){\r\n\t\t\t\tanim.action.stop(true);\r\n\t\t\t}else{\r\n\t\t\t\tthis.anim[index] = anim = {};\r\n\t\t\t}\r\n\r\n\t\t\tif(o.type == \"onmouseover\"){\r\n\t\t\t\tstartOffset = 0;\r\n\t\t\t\tendOffset   = this.shift;\r\n\t\t\t\tstartScale  = 1;\r\n\t\t\t\tendScale    = this.scale;\r\n\t\t\t}else{\r\n\t\t\t\tstartOffset = this.shift;\r\n\t\t\t\tendOffset   = 0;\r\n\t\t\t\tstartScale  = this.scale;\r\n\t\t\t\tendScale    = 1;\r\n\t\t\t}\r\n\r\n\t\t\tanim.action = gf.animateTransform({\r\n\t\t\t\tshape:    o.shape,\r\n\t\t\t\tduration: this.duration,\r\n\t\t\t\teasing:   this.easing,\r\n\t\t\t\ttransform: [\r\n\t\t\t\t\trotateBack,\r\n\t\t\t\t\t{name: \"translate\", start: [startOffset, 0], end: [endOffset, 0]},\r\n\t\t\t\t\t{name: \"scaleAt\",   start: [startScale, o.cx, o.cy],  end: [endScale, o.cx, o.cy]},\r\n\t\t\t\t\trotateTo0\r\n\t\t\t\t]\r\n\t\t\t});\r\n\r\n\t\t\tif(o.type == \"onmouseout\"){\r\n\t\t\t\thub.connect(anim.action, \"onEnd\", this, function(){\r\n\t\t\t\t\tdelete this.anim[index];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tanim.action.play();\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\tdelete this.angles;\r\n\t\t}\r\n\t});\r\n});\r\n"]}