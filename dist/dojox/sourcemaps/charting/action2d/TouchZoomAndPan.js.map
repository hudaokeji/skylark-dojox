{"version":3,"sources":["charting/action2d/TouchZoomAndPan.js"],"names":["define","lang","declare","eventUtil","has","ChartAction","Element","touch","common","BidiTouchZoomAndPan","GlassView","constructor","chart","render","this","isDirty","cleanGroup","group","createRect","width","dim","height","setFill","clear","dirty","stack","movePlotToFront","name","getSeriesStats","delegate","defaultStats","initializeScalers","TouchZoomAndPan","defaultParams","axis","scaleFactor","maxScale","enableScroll","enableZoom","optionalParams","plot","kwArgs","_listeners","eventName","press","methodName","move","release","undefined","_uName","connect","inherited","arguments","surface","declaredClass","indexOf","addPlot","type","disconnect","removePlot","onTouchStart","event","getAxis","length","touches","coord","prevPageCoord","_startPageCoord","x","pageX","y","pageY","_delayedRenderHandle","_startTime","_endPageCoord","middlePageCoord","scaler","getScaler","_initScale","getWindowScale","t","_initData","toData","_middleCoord","_startCoord","bounds","from","_endCoord","to","Date","getTime","Math","abs","onDoubleTap","_startScroll","stop","onTouchMove","pAttr","vertical","attr","newMiddlePageCoord","scale","newMiddleCoord","newStart","newEnd","zoomIn","delta","_getDelta","setAxisWindow","_lastScale","_initOffset","_lastFactor","delayedRender","onTouchEnd","getWindowOffset","span","upper","lower","start","end","oldMiddle","newMiddle"],"mappings":"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","file":"../../../charting/action2d/TouchZoomAndPan.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/event\", \"dojo/sniff\",\r\n\t\"./ChartAction\", \"../Element\", \"dojo/touch\", \"../plot2d/common\", \"dojo/has!dojo-bidi?../bidi/action2d/ZoomAndPan\"],\r\n\tfunction(lang, declare, eventUtil, has, ChartAction, Element, touch, common, BidiTouchZoomAndPan){\r\n\tvar GlassView = declare(Element, {\r\n\t\t// summary:\r\n\t\t//\t\tPrivate internal class used by TouchZoomAndPan actions.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tconstructor: function(chart){\r\n\t\t},\r\n\t\trender: function(){\r\n\t\t\tif(!this.isDirty()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.cleanGroup();\r\n\t\t\tthis.group.createRect({width: this.chart.dim.width, height: this.chart.dim.height}).setFill(\"rgba(0,0,0,0)\");\r\n\t\t},\r\n\t\tclear: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClear out any parameters set on this plot.\r\n\t\t\t// returns: GlassView\r\n\t\t\t//\t\tThe reference to this plot for functional chaining.\r\n\t\t\tthis.dirty = true;\r\n\t\t\t// glass view needs to be above\r\n\t\t\tif(this.chart.stack[0] != this){\r\n\t\t\t\tthis.chart.movePlotToFront(this.name);\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tGlassView\r\n\t\t},\r\n\t\tgetSeriesStats: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns default stats (irrelevant for this type of plot).\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\t{hmin, hmax, vmin, vmax} min/max in both directions.\r\n\t\t\treturn lang.delegate(common.defaultStats);\r\n\t\t},\r\n\t\tinitializeScalers: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDoes nothing (irrelevant for this type of plot).\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tisDirty: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn whether or not this plot needs to be redrawn.\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tIf this plot needs to be rendered, this will return true.\r\n\t\t\treturn this.dirty;\r\n\t\t}\r\n\t});\r\n\r\n\t/*=====\r\n\tvar __TouchZoomAndPanCtorArgs = {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdditional arguments for touch zoom and pan actions.\r\n\t\t\t// axis: String?\r\n\t\t\t//\t\tTarget axis name for this action.  Default is \"x\".\r\n\t\t\t// scaleFactor: Number?\r\n\t\t\t//\t\tThe scale factor applied on mouse wheel zoom.  Default is 1.2.\r\n\t\t\t// maxScale: Number?\r\n\t\t\t//\t\tThe max scale factor accepted by this chart action.  Default is 100.\r\n\t\t\t// enableScroll: Boolean?\r\n\t\t\t//\t\tWhether touch drag gesture should scroll the chart.  Default is true.\r\n\t\t\t// enableZoom: Boolean?\r\n\t\t\t//\t\tWhether touch pinch and spread gesture should zoom out or in the chart.  Default is true.\r\n\t};\r\n\t=====*/\r\n\r\n\tvar TouchZoomAndPan = declare(has(\"dojo-bidi\")? \"dojox.charting.action2d.NonBidiTouchZoomAndPan\" : \"dojox.charting.action2d.TouchZoomAndPan\", ChartAction, {\r\n\t\t// summary:\r\n\t\t//\t\tCreate a touch zoom and pan action.\r\n\t\t//\t\tYou can zoom out or in the data window with pinch and spread gestures except on Android 2.x and WP8 devices.\r\n\t\t// \t\tYou can scroll using drag gesture.\r\n\t\t//\t\tFinally this is possible to navigate between a fit window and a zoom one using double tap gesture.\r\n\r\n\t\t// the data description block for the widget parser\r\n\t\tdefaultParams: {\r\n\t\t\taxis: \"x\",\r\n\t\t\tscaleFactor: 1.2,\r\n\t\t\tmaxScale: 100,\r\n\t\t\tenableScroll: true,\r\n\t\t\tenableZoom: true\r\n\t\t},\r\n\t\toptionalParams: {},\t// no optional parameters\r\n\r\n\t\tconstructor: function(chart, plot, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a new touch zoom and pan action and connect it.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this action applies to.\r\n\t\t\t// kwArgs: __TouchZoomAndPanCtorArgs?\r\n\t\t\t//\t\tOptional arguments for the action.\r\n\t\t\tthis._listeners = [\r\n\t\t\t\t{eventName: touch.press, methodName: \"onTouchStart\"},\r\n\t\t\t\t{eventName: touch.move, methodName: \"onTouchMove\"},\r\n\t\t\t\t{eventName: touch.release, methodName: \"onTouchEnd\"}\r\n\t\t\t];\r\n\t\t\tif(!kwArgs){ kwArgs = {}; }\r\n\t\t\tthis.axis = kwArgs.axis ? kwArgs.axis : \"x\";\r\n\t\t\tthis.scaleFactor = kwArgs.scaleFactor ? kwArgs.scaleFactor : 1.2;\r\n\t\t\tthis.maxScale = kwArgs.maxScale ? kwArgs.maxScale : 100;\r\n\t\t\tthis.enableScroll = kwArgs.enableScroll != undefined ? kwArgs.enableScroll : true;\r\n\t\t\tthis.enableZoom = kwArgs.enableScroll != undefined ? kwArgs.enableZoom : true;\r\n\t\t\tthis._uName = \"touchZoomPan\"+this.axis;\r\n\t\t\tthis.connect();\r\n\t\t},\r\n\r\n\t\tconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect this action to the chart. On iOS this adds a new glass view plot\r\n\t\t\t//\t\tto the chart that's why Chart.render() must be called after connect.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// this is needed to workaround issue on iOS Safari + SVG, because a touch start action\r\n\t\t\t// started above a item that is removed during the touch action will stop\r\n\t\t\t// dispatching touch events!\r\n\t\t\tif(this.chart.surface.declaredClass.indexOf(\"svg\")!=-1){\r\n\t\t\t\tthis.chart.addPlot(this._uName, {type: GlassView});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdisconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisconnect this action from the chart.\r\n\t\t\tif(this.chart.surface.declaredClass.indexOf(\"svg\")!=-1){\r\n\t\t\t\tthis.chart.removePlot(this._uName);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tonTouchStart: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is started on the chart.\r\n\r\n\t\t\t// we always want to be above regular plots and not clipped\r\n\t\t\tvar chart = this.chart, axis = chart.getAxis(this.axis);\r\n\t\t\tvar length = event.touches ? event.touches.length : 1;\r\n\t\t\tvar coord = event.touches ? event.touches[0] : event;\r\n\t\t\t// in case we have a double tap register previous coord\r\n\t\t\tvar prevPageCoord = this._startPageCoord;\r\n\t\t\tthis._startPageCoord = {x: coord.pageX, y: coord.pageY};\r\n\t\t\tif((this.enableZoom || this.enableScroll) && chart._delayedRenderHandle){\r\n\t\t\t\t// we have pending rendering from a scroll, let's sync\r\n\t\t\t\tchart.render();\r\n\t\t\t}\r\n\t\t\tif(this.enableZoom && length >= 2){\r\n\t\t\t\t// we reset double tap\r\n\t\t\t\tthis._startTime = 0;\r\n\t\t\t\tthis._endPageCoord =  {x: event.touches[1].pageX, y: event.touches[1].pageY};\r\n\t\t\t\tvar middlePageCoord = {x: (this._startPageCoord.x + this._endPageCoord.x) / 2,\r\n\t\t\t\t\t\t\t\t\t\ty: (this._startPageCoord.y + this._endPageCoord.y) / 2};\r\n\t\t\t\tvar scaler = axis.getScaler();\r\n\t\t\t\tthis._initScale = axis.getWindowScale();\r\n\t\t\t\tvar t = this._initData =  this.plot.toData();\r\n\t\t\t\tthis._middleCoord = t(middlePageCoord)[this.axis];\r\n\t\t\t\tthis._startCoord = scaler.bounds.from;\r\n\t\t\t\tthis._endCoord = scaler.bounds.to;\r\n\t\t\t}else{\r\n\t\t\t\t// double tap is only for single touch\r\n\t\t\t\tif(!event.touches || event.touches.length == 1){\r\n\t\t\t\t\tif(!this._startTime){\r\n\t\t\t\t\t\tthis._startTime = new Date().getTime();\r\n\t\t\t\t\t}else if((new Date().getTime() - this._startTime) < 250 &&\r\n\t\t\t\t\t\tMath.abs(this._startPageCoord.x - prevPageCoord.x) < 30 &&\r\n\t\t\t\t\t\tMath.abs(this._startPageCoord.y - prevPageCoord.y) < 30){\r\n\t\t\t\t\t\tthis._startTime = 0;\r\n\t\t\t\t\t\tthis.onDoubleTap(event);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// we missed the doubletap, we need to re-init for next time\r\n\t\t\t\t\t\tthis._startTime = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// we missed the doubletap, we need to re-init for next time\r\n\t\t\t\t\tthis._startTime = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.enableScroll){\r\n\t\t\t\t\tthis._startScroll(axis);\r\n\t\t\t\t\t// needed for Android, otherwise will get a touch cancel while swiping\r\n\t\t\t\t\teventUtil.stop(event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonTouchMove: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is moved on the chart.\r\n\t\t\tvar chart = this.chart, axis = chart.getAxis(this.axis);\r\n\t\t\tvar length = event.touches ? event.touches.length : 1;\r\n\t\t\tvar pAttr = axis.vertical?\"pageY\":\"pageX\",\r\n\t\t\t\t\tattr = axis.vertical?\"y\":\"x\";\r\n\t\t\t// any move action cancel double tap\r\n\t\t\tthis._startTime = 0;\r\n\t\t\tif(this.enableZoom && length >= 2){\r\n\t\t\t\tvar newMiddlePageCoord = {x: (event.touches[1].pageX + event.touches[0].pageX) / 2,\r\n\t\t\t\t\t\t\t\t\t\t\ty: (event.touches[1].pageY + event.touches[0].pageY) / 2};\r\n\t\t\t\tvar scale = (this._endPageCoord[attr] - this._startPageCoord[attr]) /\r\n\t\t\t\t\t(event.touches[1][pAttr] - event.touches[0][pAttr]);\r\n\r\n\t\t\t\tif(this._initScale / scale > this.maxScale){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar newMiddleCoord = this._initData(newMiddlePageCoord)[this.axis];\r\n\r\n\t\t\t\tvar newStart = scale * (this._startCoord - newMiddleCoord)  + this._middleCoord,\r\n\t\t\t\tnewEnd = scale * (this._endCoord - newMiddleCoord) + this._middleCoord;\r\n\t\t\t\tchart.zoomIn(this.axis, [newStart, newEnd]);\r\n\t\t\t\t// avoid browser pan\r\n\t\t\t\teventUtil.stop(event);\r\n\t\t\t}else if(this.enableScroll){\r\n\t\t\t\tvar delta = this._getDelta(event);\r\n\t\t\t\tchart.setAxisWindow(this.axis, this._lastScale, this._initOffset - delta / this._lastFactor / this._lastScale);\r\n\t\t\t\tchart.delayedRender();\r\n\t\t\t\t// avoid browser pan\r\n\t\t\t\teventUtil.stop(event);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonTouchEnd: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when touch is ended on the chart.\r\n\t\t\tvar chart = this.chart, axis = chart.getAxis(this.axis);\r\n\t\t\tif((!event.touches || event.touches.length == 1) && this.enableScroll){\r\n\t\t\t\t// still one touch available, let's start back from here for\r\n\t\t\t\t// potential pan\r\n\t\t\t\tvar coord = event.touches ? event.touches[0] : event;\r\n\t\t\t\tthis._startPageCoord = {x: coord.pageX, y: coord.pageY};\r\n\t\t\t\tthis._startScroll(axis);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_startScroll: function(axis){\r\n\t\t\tvar bounds = axis.getScaler().bounds;\r\n\t\t\tthis._initOffset = axis.getWindowOffset();\r\n\t\t\t// we keep it because of delay rendering we might now always have access to the\r\n\t\t\t// information to compute it\r\n\t\t\tthis._lastScale = axis.getWindowScale();\r\n\t\t\tthis._lastFactor = bounds.span / (bounds.upper - bounds.lower);\r\n\t\t},\r\n\r\n\t\tonDoubleTap: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when double tap is performed on the chart.\r\n\t\t\tvar chart = this.chart, axis = chart.getAxis(this.axis);\r\n\t\t\tvar scale = 1 / this.scaleFactor;\r\n\t\t\t// are we fit?\r\n\t\t\tif(axis.getWindowScale()==1){\r\n\t\t\t\t// fit => zoom\r\n\t\t\t\tvar scaler = axis.getScaler(), start = scaler.bounds.from, end = scaler.bounds.to,\r\n\t\t\t\toldMiddle = (start + end) / 2, newMiddle = this.plot.toData(this._startPageCoord)[this.axis],\r\n\t\t\t\tnewStart = scale * (start - oldMiddle) + newMiddle, newEnd = scale * (end - oldMiddle) + newMiddle;\r\n\t\t\t\tchart.zoomIn(this.axis, [newStart, newEnd]);\r\n\t\t\t}else{\r\n\t\t\t\t// non fit => fit\r\n\t\t\t\tchart.setAxisWindow(this.axis, 1, 0);\r\n\t\t\t\tchart.render();\r\n\t\t\t}\r\n\t\t\teventUtil.stop(event);\r\n\t\t},\r\n\t\t\r\n\t\t_getDelta: function(event){\r\n\t\t\tvar axis = this.chart.getAxis(this.axis),\r\n\t\t\t    pAttr = axis.vertical?\"pageY\":\"pageX\",\r\n\t\t\t\tattr = axis.vertical?\"y\":\"x\";\r\n\t\t\tvar coord = event.touches?event.touches[0]:event;\r\n\t\t\treturn axis.vertical?(this._startPageCoord[attr] - coord[pAttr]):\r\n\t\t\t\t(coord[pAttr] - this._startPageCoord[attr]);\r\n\t\t}\r\n\t});\r\n\treturn has(\"dojo-bidi\")? declare(\"dojox.charting.action2d.TouchZoomAndPan\", [TouchZoomAndPan, BidiTouchZoomAndPan]) : TouchZoomAndPan;\r\n});\r\n"]}