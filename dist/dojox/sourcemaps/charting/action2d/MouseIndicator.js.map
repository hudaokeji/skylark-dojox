{"version":3,"sources":["charting/action2d/MouseIndicator.js"],"names":["define","lang","declare","hub","win","has","ChartAction","IndicatorElement","du","eventUtil","arr","defaultParams","series","vertical","autoScroll","fixed","precision","lines","labels","markers","optionalParams","lineStroke","outlineStroke","shadowStroke","lineFill","stroke","outline","shadow","fill","fillFunc","labelFunc","font","fontColor","markerStroke","markerOutline","markerShadow","markerFill","markerSymbol","offset","start","mouseOver","constructor","chart","plot","kwArgs","this","opt","clone","updateWithObject","updateWithPattern","_listeners","eventName","methodName","_uName","_handles","connect","_disconnectHandles","node","releaseCapture","forEach","disconnect","inherited","arguments","addPlot","type","inter","_isMouseDown","onMouseUp","removePlot","onChange","event","onMouseDown","push","setCapture","doc","_onMouseSingle","onMouseMove","getPlot","pageCoord","x","pageX","y","pageY","dirty","render","stop","stopTrack"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,qBAAsB,oBAAqB,aAC3F,gBAAiB,sBAAuB,mBAAoB,mBAAmB,oBAC/E,SAASC,EAAMC,EAASC,EAAKC,EAAKC,EAAKC,EAAaC,EAAkBC,EAAIC,EAAWC,GAwErF,OAAOR,EAAQ,yCAA0CI,GAKxDK,eACCC,OAAQ,GACRC,UAAU,EACVC,YAAY,EACZC,OAAO,EACPC,UAAW,EACXC,OAAO,EACPC,QAAQ,EACRC,SAAS,GAEVC,gBACCC,cACAC,iBACAC,gBACAC,YACAC,UACAC,WACAC,UACAC,QACAC,SAAW,KACXC,UAAW,KACXC,KAAO,GACPC,UAAW,GACXC,gBACAC,iBACAC,gBACAC,cACAC,aAAe,GACfC,UACAC,OAAO,EACPC,WAAW,GAGZC,YAAa,SAASC,EAAOC,EAAMC,GAOlCC,KAAKC,IAAM7C,EAAK8C,MAAMF,KAAKlC,eAC3BH,EAAGwC,iBAAiBH,KAAKC,IAAKF,GAC9BpC,EAAGyC,kBAAkBJ,KAAKC,IAAKF,EAAQC,KAAKzB,gBAC5CyB,KAAKK,WAAaL,KAAKC,IAAIN,YAAYW,UAAW,cAAeC,WAAY,kBAC1ED,UAAW,cAAeC,WAAY,gBACzCP,KAAKQ,OAAS,iBAAiBR,KAAKC,IAAIlC,OACxCiC,KAAKS,YACLT,KAAKU,WAGNC,mBAAoB,WAChBnD,EAAI,OACNwC,KAAKH,MAAMe,KAAKC,iBAEjBhD,EAAIiD,QAAQd,KAAKS,SAAUnD,EAAIyD,YAC/Bf,KAAKS,aAGNC,QAAS,WAIRV,KAAKgB,UAAUC,WAEfjB,KAAKH,MAAMqB,QAAQlB,KAAKQ,QAASW,KAAMzD,EAAkB0D,MAAOpB,QAGjEe,WAAY,WAGRf,KAAKqB,cACPrB,KAAKsB,YAENtB,KAAKH,MAAM0B,WAAWvB,KAAKQ,QAC3BR,KAAKgB,UAAUC,WACfjB,KAAKW,sBAGNa,SAAU,SAASC,KAQnBC,YAAa,SAASD,GAGrBzB,KAAKqB,cAAe,EAIjB7D,EAAI,OACNwC,KAAKS,SAASkB,KAAKrE,EAAIoD,QAAQV,KAAKH,MAAMe,KAAM,cAAeZ,KAAM,gBACrEA,KAAKS,SAASkB,KAAKrE,EAAIoD,QAAQV,KAAKH,MAAMe,KAAM,YAAaZ,KAAM,cACnEA,KAAKH,MAAMe,KAAKgB,eAEhB5B,KAAKS,SAASkB,KAAKrE,EAAIoD,QAAQnD,EAAIsE,IAAK,cAAe7B,KAAM,gBAC7DA,KAAKS,SAASkB,KAAKrE,EAAIoD,QAAQnD,EAAIsE,IAAK,YAAa7B,KAAM,eAG5DA,KAAK8B,eAAeL,IAGrBM,YAAa,SAASN,IAGlBzB,KAAKqB,cAAgBrB,KAAKC,IAAIN,YAChCK,KAAK8B,eAAeL,IAItBK,eAAgB,SAASL,GACxB,IAAI3B,EAAOE,KAAKH,MAAMmC,QAAQhC,KAAKQ,QACnCV,EAAKmC,WAAcC,EAAGT,EAAMU,MAAOC,EAAGX,EAAMY,OAC5CvC,EAAKwC,OAAQ,EACbtC,KAAKH,MAAM0C,SACX3E,EAAU4E,KAAKf,IAGhBH,UAAW,SAASG,GAGnB,IAAI3B,EAAOE,KAAKH,MAAMmC,QAAQhC,KAAKQ,QACnCV,EAAK2C,YACLzC,KAAKqB,cAAe,EACpBrB,KAAKW,qBACLb,EAAKmC,UAAY,KACjBnC,EAAKwC,OAAQ,EACbtC,KAAKH,MAAM0C","file":"../../../charting/action2d/MouseIndicator.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/connect\", \"dojo/_base/window\", \"dojo/sniff\",\r\n\t\"./ChartAction\", \"./_IndicatorElement\", \"dojox/lang/utils\", \"dojo/_base/event\",\"dojo/_base/array\"],\r\n\tfunction(lang, declare, hub, win, has, ChartAction, IndicatorElement, du, eventUtil, arr){ \r\n\r\n\t/*=====\r\n\tvar __MouseIndicatorCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tAdditional arguments for mouse indicator.\r\n\t\t// series: String\r\n\t\t//\t\tTarget series name for this action.\r\n\t\t// autoScroll: Boolean?\r\n\t\t//\t\tWhether when moving indicator the chart is automatically scrolled. Default is true.\r\n\t\t// lines: Boolean?\r\n\t\t//\t\tWhether the indicator lines are visible or not. Default is true.\r\n\t\t// labels: Boolean?\r\n\t\t//\t\tWhether the indicator label is visible or not. Default is true.\r\n\t\t// markers: Boolean?\r\n\t\t//\t\tWhether the indicator markers are visible or not. Default is true.\r\n\t\t// offset: {x, y}?\r\n\t\t//\t\tA pair of (x, y) pixel coordinate to specify the offset between the end of the indicator line and the\r\n\t\t//\t\tposition at which the labels are rendered. Default is no offset which means it is automatically computed.\r\n\t\t// start: Boolean?\r\n\t\t//\t\tWhether the label is rendered at the start or end of the indicator. Default is false meaning end of\r\n\t\t//\t\tthe line.\r\n\t\t// vertical: Boolean?\r\n\t\t//\t\tWhether the indicator is vertical or not. Default is true.\r\n\t\t// fixed: Boolean?\r\n\t\t//\t\tWhether a fixed precision must be applied to data values for display. Default is true.\r\n\t\t// precision: Number?\r\n\t\t//\t\tThe precision at which to round data values for display. Default is 0.\r\n\t\t// lineStroke: dojo/gfx/Stroke?\r\n\t\t//\t\tAn optional stroke to use for indicator line.\r\n\t\t// lineOutline: dojo/gfx/Stroke?\r\n\t\t//\t\tAn optional outline to use for indicator line.\r\n\t\t// lineShadow: dojo/gfx/Stroke?\r\n\t\t//\t\tAn optional shadow to use for indicator line.\r\n\t\t// stroke: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional stroke to use for indicator label background.\r\n\t\t// outline: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional outline to use for indicator label background.\r\n\t\t// shadow: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional shadow to use for indicator label background.\r\n\t\t// fill: dojo.gfx.Fill?\r\n\t\t//\t\tAn optional fill to use for indicator label background.\r\n\t\t// fillFunc: Function?\r\n\t\t//\t\tAn optional function to use to compute label background fill. It takes precedence over\r\n\t\t//\t\tfill property when available.\r\n\t\t// labelFunc: Function?\r\n\t\t//\t\tAn optional function to use to compute label text. It takes precedence over\r\n\t\t//\t\tthe default text when available.\r\n\t\t//\t|\t\tfunction labelFunc(firstDataPoint, secondDataPoint, fixed, precision) {}\r\n\t\t//\t\t`firstDataPoint` is the `{x, y}` data coordinates pointed by the mouse.\r\n\t\t//\t\t`secondDataPoint` is only useful for dual touch indicators not mouse indicators.\r\n\t\t//\t\t`fixed` is true if fixed precision must be applied.\r\n\t\t//\t\t`precision` is the requested precision to be applied.\r\n\t\t// font: String?\r\n\t\t//\t\tA font definition to use for indicator label background.\r\n\t\t// fontColor: String|dojo.Color?\r\n\t\t//\t\tThe color to use for indicator label background.\r\n\t\t// markerStroke: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional stroke to use for indicator marker.\r\n\t\t// markerOutline: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional outline to use for indicator marker.\r\n\t\t// markerShadow: dojo.gfx.Stroke?\r\n\t\t//\t\tAn optional shadow to use for indicator marker.\r\n\t\t// markerFill: dojo.gfx.Fill?\r\n\t\t//\t\tAn optional fill to use for indicator marker.\r\n\t\t// markerSymbol: String?\r\n\t\t//\t\tAn optional symbol string to use for indicator marker.\r\n\t\t// mouseOver: Boolean?\r\n\t\t//\t\tWhether the mouse indicator is enabled on mouse over or on mouse drag. Default is false.\r\n\t};\r\n\t=====*/\r\n\r\n\treturn declare(\"dojox.charting.action2d.MouseIndicator\", ChartAction, {\r\n\t\t// summary:\r\n\t\t//\t\tCreate a mouse indicator action. You can drag mouse over the chart to display a data indicator.\r\n\r\n\t\t// the data description block for the widget parser\r\n\t\tdefaultParams: {\r\n\t\t\tseries: \"\",\r\n\t\t\tvertical: true,\r\n\t\t\tautoScroll: true,\r\n\t\t\tfixed: true,\r\n\t\t\tprecision: 0,\r\n\t\t\tlines: true,\r\n\t\t\tlabels: true,\r\n\t\t\tmarkers: true\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\tlineStroke: {},\r\n\t\t\toutlineStroke: {},\r\n\t\t\tshadowStroke: {},\r\n\t\t\tlineFill: {},\r\n\t\t\tstroke:\t\t{},\r\n\t\t\toutline:\t{},\r\n\t\t\tshadow:\t\t{},\r\n\t\t\tfill:\t\t{},\r\n\t\t\tfillFunc:  null,\r\n\t\t\tlabelFunc: null,\r\n\t\t\tfont:\t\t\"\",\r\n\t\t\tfontColor:\t\"\",\r\n\t\t\tmarkerStroke:\t\t{},\r\n\t\t\tmarkerOutline:\t\t{},\r\n\t\t\tmarkerShadow:\t\t{},\r\n\t\t\tmarkerFill:\t\t\t{},\r\n\t\t\tmarkerSymbol:\t\t\"\",\r\n\t\t\toffset: {},\r\n\t\t\tstart: false,\r\n\t\t\tmouseOver: false\r\n\t\t},\t\r\n\r\n\t\tconstructor: function(chart, plot, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate an mouse indicator action and connect it.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this action applies to.\r\n\t\t\t// kwArgs: __MouseIndicatorCtorArgs?\r\n\t\t\t//\t\tOptional arguments for the chart action.\r\n\t\t\tthis.opt = lang.clone(this.defaultParams);\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t\tthis._listeners = this.opt.mouseOver?[{eventName: \"onmousemove\", methodName: \"onMouseMove\"}]:\r\n\t\t\t\t[{eventName: \"onmousedown\", methodName: \"onMouseDown\"}];\r\n\t\t\tthis._uName = \"mouseIndicator\"+this.opt.series;\r\n\t\t\tthis._handles = [];\r\n\t\t\tthis.connect();\r\n\t\t},\r\n\t\t\r\n\t\t_disconnectHandles: function(){\r\n\t\t\tif(has(\"ie\")){\r\n\t\t\t\tthis.chart.node.releaseCapture();\r\n\t\t\t}\r\n\t\t\tarr.forEach(this._handles, hub.disconnect);\r\n\t\t\tthis._handles = [];\r\n\t\t},\r\n\r\n\t\tconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect this action to the chart. This adds a indicator plot\r\n\t\t\t//\t\tto the chart that's why Chart.render() must be called after connect.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// add plot with unique name\r\n\t\t\tthis.chart.addPlot(this._uName, {type: IndicatorElement, inter: this });\r\n\t\t},\r\n\r\n\t\tdisconnect: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisconnect this action from the chart.\r\n\t\t\tif(this._isMouseDown){\r\n\t\t\t\tthis.onMouseUp();\r\n\t\t\t}\r\n\t\t\tthis.chart.removePlot(this._uName);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._disconnectHandles();\r\n\t\t},\r\n\r\n\t\tonChange: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the indicator value changed.\r\n\t\t\t// event:\r\n\t\t\t//\t\tAn event with a start property containing the {x, y} data points of the mouse indicator. It also\r\n\t\t\t// \t\tcontains a label property containing the displayed text.\r\n\t\t},\r\n\r\n\t\tonMouseDown: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when mouse is down on the chart.\r\n\t\t\tthis._isMouseDown = true;\r\n\t\t\t\r\n\t\t\t// we now want to capture mouse move events everywhere to avoid\r\n\t\t\t// stop scrolling when going out of the chart window\r\n\t\t\tif(has(\"ie\")){\r\n\t\t\t\tthis._handles.push(hub.connect(this.chart.node, \"onmousemove\", this, \"onMouseMove\"));\r\n\t\t\t\tthis._handles.push(hub.connect(this.chart.node, \"onmouseup\", this, \"onMouseUp\"));\r\n\t\t\t\tthis.chart.node.setCapture();\r\n\t\t\t}else{\r\n\t\t\t\tthis._handles.push(hub.connect(win.doc, \"onmousemove\", this, \"onMouseMove\"));\r\n\t\t\t\tthis._handles.push(hub.connect(win.doc, \"onmouseup\", this, \"onMouseUp\"));\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tthis._onMouseSingle(event);\r\n\t\t},\r\n\r\n\t\tonMouseMove: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the mouse is moved on the chart.\r\n\t\t\tif(this._isMouseDown || this.opt.mouseOver){\r\n\t\t\t\tthis._onMouseSingle(event);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onMouseSingle: function(event){\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tplot.pageCoord  = {x: event.pageX, y: event.pageY};\r\n\t\t\tplot.dirty = true;\r\n\t\t\tthis.chart.render();\r\n\t\t\teventUtil.stop(event);\r\n\t\t},\r\n\r\n\t\tonMouseUp: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when mouse is up on the chart.\r\n\t\t\tvar plot = this.chart.getPlot(this._uName);\r\n\t\t\tplot.stopTrack();\r\n\t\t\tthis._isMouseDown = false;\r\n\t\t\tthis._disconnectHandles();\r\n\t\t\tplot.pageCoord = null;\r\n\t\t\tplot.dirty = true;\r\n\t\t\tthis.chart.render();\r\n\t\t}\r\n\t});\r\n});\r\n"]}