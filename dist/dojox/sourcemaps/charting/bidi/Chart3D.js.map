{"version":3,"sources":["charting/bidi/Chart3D.js"],"names":["define","declare","domStyle","domAttr","utils","direction","isMirrored","postscript","node","lights","camera","theme","chartDir","has","get","this","chartBaseDirection","generate","inherited","arguments","applyMirroring","plot","dim","offsets","reverseMatrix","dir","set","setDir","isRightToLeft"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,iBAAkB,gBAAiB,gBAChE,SAASC,EAASC,EAAUC,EAASC,GAGrC,OAAOH,EAAQ,MASdI,UAAW,GACXC,YAAY,EAEZC,WAAY,SAASC,EAAMC,EAAQC,EAAQC,EAAON,GAcjD,IAAIO,EAAW,MACZT,EAAQU,IAAIL,EAAM,eACpBI,EAAWT,EAAQW,IAAIN,EAAM,cAE9BO,KAAKC,mBAAqBX,GAAwBO,GAEnDK,SAAU,WAGT,OAFAF,KAAKG,UAAUC,WACfJ,KAAKT,YAAa,EACXS,MAERK,eAAgB,SAASC,EAAMC,EAAKC,GASnC,OALGR,KAAKT,YACPF,EAAMoB,cAAcH,EAAMC,EAAKC,EAAqB,OAAZR,KAAKU,KAG9CvB,EAASwB,IAAIX,KAAKP,KAAM,YAAa,OAC9BO,MAERY,OAAQ,SAASF,GAahB,MANU,OAAPA,GAAuB,OAAPA,IACfV,KAAKU,KAAOA,IACdV,KAAKT,YAAa,GAEnBS,KAAKU,IAAMA,GAELV,MAERa,cAAe,WAMd,MAAmB,OAAZb,KAAKU","file":"../../../charting/bidi/Chart3D.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/dom-style\", \"dojo/dom-attr\", \"./_bidiutils\"],\r\n\tfunction(declare, domStyle, domAttr, utils){\r\n\t// module:\r\n\t//\t\tdojox/charting/bidi/Chart3D\r\n\treturn declare(null, {\r\n\t\t// direction: String\r\n\t\t//\t\tMirroring support,\tthe main variable which is responsible for the direction of the chart.\r\n\t\t//\r\n\t\t//\t\tAllowed values:\r\n\t\t//\t\t1. \"ltr\"\r\n\t\t//\t\t2. \"rtl\"\r\n\t\t//\r\n\t\t//\t\tBy default is ltr.\r\n\t\tdirection: \"\",\r\n\t\tisMirrored: false,\r\n\t\t\r\n\t\tpostscript: function(node, lights, camera, theme, direction){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe keyword arguments that can be passed in a Chart constructor.\r\n\t\t\t//\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tThe DOM node to construct the chart on.\r\n\t\t\t// lights:\r\n\t\t\t//\t\tLighting properties for the 3d scene\r\n\t\t\t// camera: Object\r\n\t\t\t//\t\tCamera properties describing the viewing camera position.\r\n\t\t\t// theme: Object\r\n\t\t\t//\t\tCharting theme to use for coloring chart elements.\r\n\t\t\t// direction:String\r\n\t\t\t//\t\tthe direction used to render the chart values[rtl/ltr]\r\n\t\t\tvar chartDir = \"ltr\";\r\n\t\t\tif(domAttr.has(node, \"direction\")){\r\n\t\t\t\tchartDir = domAttr.get(node, \"direction\");\r\n\t\t\t}\r\n\t\t\tthis.chartBaseDirection = direction ? direction : chartDir;\r\n\t\t},\r\n\t\tgenerate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.isMirrored = false;\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tapplyMirroring: function(plot, dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapply the mirroring operation to the current chart plots.\r\n\t\t\t//\r\n\t\t\tif(this.isMirrored){\r\n\t\t\t\tutils.reverseMatrix(plot, dim, offsets, this.dir == \"rtl\");\r\n\t\t\t}\r\n\t\t\t//force the direction of the node to be ltr to properly render the axes and the plots labels.\r\n\t\t\tdomStyle.set(this.node, \"direction\", \"ltr\");\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tsetDir: function(dir){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetter for the chartBaseDirection attribute.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAllows dynamically set the chartBaseDirection attribute, which will used to  \r\n\t\t\t//\t\tupdates the chart rendering direction.\r\n\t\t\t//\tdir : the desired chart direction [rtl: for right to left ,ltr: for left to right]\r\n\t\t\tif(dir == \"rtl\" || dir == \"ltr\"){\r\n\t\t\t\tif(this.dir != dir){\r\n\t\t\t\t\tthis.isMirrored = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.dir = dir;\r\n\t\t\t}\r\n\t\t\treturn this; \r\n\t\t},\r\n\t\tisRightToLeft: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcheck the Direction of the chart.\r\n\t\t\t// description:\r\n\t\t\t//\t\tcheck the chartBaseDirection attribute to determine the rendering direction\r\n\t\t\t//\t\tof the chart.\r\n\t\t\treturn this.dir == \"rtl\";\r\n        }\r\n\t});\r\n});\r\n\r\n"]}