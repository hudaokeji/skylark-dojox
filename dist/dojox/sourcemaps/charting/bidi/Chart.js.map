{"version":3,"sources":["charting/bidi/Chart.js"],"names":["define","dojox","declare","lang","domStyle","arr","has","dom","domConstruct","g","gBidi","da","BidiEngine","df","domAttr","utils","bidiEngine","getObject","validateTextDir","textDir","test","dir","isMirrored","getTextDir","text","this","checkContextual","get","node","postscript","args","surface","htmlElementsRegistry","truncatedLabelsRegistry","chartDir","setDir","setTextDir","newTextDir","obj","forEach","elem","tDir","setShape","axesKeyArr","keys","axes","length","key","index","axis","htmlElements","dirty","render","dim","offsets","title","labelType","renderer","tsize","normalizedLength","splitFontString","titleFont","size","destroy","chartTitle","createText","width","titlePos","margins","t","height","b","titleFontColor","children","isRightToLeft","applyMirroring","plot","reverseMatrix","set","formatTruncatedLabel","element","label","truncateBidi","push","inherited","arguments","_resetLeftBottom","vertical","opt","leftBottom"],"mappings":"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","file":"../../../charting/bidi/Chart.js","sourcesContent":["define([\"dojox/main\", \"dojo/_base/declare\", \"dojo/_base/lang\", \"dojo/dom-style\", \"dojo/_base/array\", \"dojo/sniff\",\r\n\t\"dojo/dom\",\"dojo/dom-construct\",\r\n\t\"dojox/gfx\", \"dojox/gfx/_gfxBidiSupport\", \"../axis2d/common\", \"dojox/string/BidiEngine\",\r\n\t\"dojox/lang/functional\",\"dojo/dom-attr\",\"./_bidiutils\"],\r\n\tfunction(dojox, declare, lang, domStyle, arr, has, dom, domConstruct, g, gBidi, da, BidiEngine, df, domAttr,utils){\r\n\t// module:\r\n\t//\t\tdojox/charting/bidi/Chart\t\t\t\t\t\t\t\r\n\tvar bidiEngine = new BidiEngine();\r\n\tvar dc = lang.getObject(\"charting\", true, dojox);\r\n\tfunction validateTextDir(textDir){\r\n\t\treturn /^(ltr|rtl|auto)$/.test(textDir) ? textDir : null;\r\n\t};\r\n\t\r\n\treturn declare(null, {\r\n\t\t// textDir: String\r\n\t\t//\t\tBi-directional support,\tthe main variable which is responsible for the direction of the text.\r\n\t\t//\t\tThe text direction can be different than the GUI direction by using this parameter.\r\n\t\t//\t\tAllowed values:\r\n\t\t//\r\n\t\t//\t\t1. \"ltr\"\r\n\t\t//\t\t2. \"rtl\"\r\n\t\t//\t\t3. \"auto\" - contextual the direction of a text defined by first strong letter.\r\n\t\t//\r\n\t\t//\t\tBy default is as the page direction.\r\n\t\ttextDir:\"\",\r\n\t\t\r\n\t\t// dir: String\r\n\t\t//\t\tMirroring support,\tthe main variable which is responsible for the direction of the chart.\r\n\t\t//\r\n\t\t//\t\tAllowed values:\r\n\t\t//\t\t1. \"ltr\"\r\n\t\t//\t\t2. \"rtl\"\r\n\t\t//\r\n\t\t//\t\tBy default is ltr.\r\n\t\tdir: \"\",\r\n\t\tisMirrored: false,\r\n\t\t\r\n\t\tgetTextDir: function(text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn direction of the text. \r\n\t\t\t// description:\r\n\t\t\t//\t\tIf textDir is ltr or rtl returns the value.\r\n\t\t\t//\t\tIf it's auto, calls to another function that responsible \r\n\t\t\t//\t\tfor checking the value, and defining the direction.\t\t\t\r\n\t\t\t// text:\r\n\t\t\t//\t\tUsed in case textDir is \"auto\", this case the direction is according to the first\r\n\t\t\t//\t\tstrong (directionally - which direction is strong defined) letter.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected.\r\n\t\t\tvar textDir = this.textDir == \"auto\" ? bidiEngine.checkContextual(text) : this.textDir;\r\n\t\t\t// providing default value\r\n\t\t\tif(!textDir){\r\n\t\t\t\ttextDir = domStyle.get(this.node, \"direction\");\r\n\t\t\t}\r\n\t\t\treturn textDir;\r\n\t\t},\r\n\r\n\t\tpostscript: function(node,args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tKicks off chart instantiation.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUsed for setting the textDir of the chart. \r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\t// validate textDir\r\n\t\t\tvar textDir = args ? (args[\"textDir\"] ? validateTextDir(args[\"textDir\"]) : \"\") : \"\";\r\n\t\t\t// if textDir wasn't defined or was defined wrong, apply default value\r\n\t\t\ttextDir = textDir ? textDir : domStyle.get(this.node, \"direction\");\r\n\t\t\tthis.textDir = textDir;\r\n\r\n\t\t\tthis.surface.textDir = textDir;\r\n\t\t\t\r\n\t\t\t// two data structures, used for storing data for further enablement to change\r\n\t\t\t// textDir dynamically\r\n\t\t\tthis.htmlElementsRegistry = [];\r\n\t\t\tthis.truncatedLabelsRegistry = [];\r\n\t\t\t// chart mirroring starts\r\n\t\t\tvar chartDir = \"ltr\";\r\n\t\t\tif(domAttr.has(node, \"direction\")){\r\n\t\t\t\tchartDir = domAttr.get(node, \"direction\");\r\n\t\t\t}\r\n\t\t\tthis.setDir(args ? (args.dir ? args.dir: chartDir) : chartDir);\r\n\t\t\t// chart mirroring ends\r\n\t\t},\r\n\r\n\t\tsetTextDir: function(newTextDir, obj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetter for the textDir attribute.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAllows dynamically set the textDir, goes over all the text-children and  \r\n\t\t\t//\t\tupdates their base text direction.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tpublic\r\n\t\t\r\n\t\t\tif(newTextDir == this.textDir){\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tif(validateTextDir(newTextDir) != null){\r\n\t\t\t\tthis.textDir = newTextDir;\r\n\t\t\t\t\r\n\t\t\t\t// set automatically all the gfx objects that were created by this surface\r\n\t\t\t\t// (groups, text objects)\r\n\t\t\t\tthis.surface.setTextDir(newTextDir);\r\n\t\t\t\r\n\t\t\t\t// truncated labels that were created with gfx creator need to recalculate dir\r\n\t\t\t\t// for case like: \"111111A\" (A stands for bidi character) and the truncation\r\n\t\t\t\t// is \"111...\" If the textDir is auto, the display should be: \"...111\" but in gfx\r\n\t\t\t\t// case we will get \"111...\". Because this.surface.setTextDir will calculate the dir of truncated\r\n\t\t\t\t// label, which value is \"111...\" but th real is \"111111A\".\r\n\t\t\t\t// each time we created a gfx truncated label we stored it in the truncatedLabelsRegistry, so update now \r\n\t\t\t\t// the registry.\r\n\t\t\t\tif(this.truncatedLabelsRegistry && newTextDir == \"auto\"){\r\n\t\t\t\t\tarr.forEach(this.truncatedLabelsRegistry, function(elem){\r\n\t\t\t\t\t\tvar tDir = this.getTextDir(elem[\"label\"]);\r\n\t\t\t\t\t\tif(elem[\"element\"].textDir != tDir){\r\n\t\t\t\t\t\t\telem[\"element\"].setShape({textDir: tDir});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// re-render axes with html labels. for recalculation of the labels\r\n\t\t\t\t// positions etc.\r\n\t\t\t\t// create array of keys for all the axis in chart \r\n\t\t\t\tvar axesKeyArr = df.keys(this.axes);\r\n\t\t\t\tif(axesKeyArr.length > 0){\r\n\t\t\t\t\t// iterate over the axes, and for each that have html labels render it.\r\n\t\t\t\t\tarr.forEach(axesKeyArr, function(key, index, arr){\r\n\t\t\t\t\t\t// get the axis \r\n\t\t\t\t\t\tvar axis = this.axes[key];\r\n\t\t\t\t\t\t// if the axis has html labels \r\n\t\t\t\t\t\tif(axis.htmlElements[0]){\r\n\t\t\t\t\t\t\taxis.dirty = true;\r\n\t\t\t\t\t\t\taxis.render(this.dim, this.offsets);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},this);\r\n\t\t\t\t\t\r\n\t\t\t\t\t// recreate title\r\n\t\t\t\t\tif(this.title){\r\n\t\t\t\t\t\tvar forceHtmlLabels = (g.renderer == \"canvas\"),\r\n\t\t\t\t\t\t\tlabelType = forceHtmlLabels || !has(\"ie\") && !has(\"opera\") ? \"html\" : \"gfx\",\r\n\t\t\t\t\t\t\ttsize = g.normalizedLength(g.splitFontString(this.titleFont).size);\r\n\t\t\t\t\t\t// remove the title\r\n\t\t\t\t\t\tdomConstruct.destroy(this.chartTitle);\r\n\t\t\t\t\t\tthis.chartTitle =null;\r\n\t\t\t\t\t\t// create the new title\r\n\t\t\t\t\t\tthis.chartTitle = da.createText[labelType](\r\n\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\tthis.surface,\r\n\t\t\t\t\t\t\tthis.dim.width/2,\r\n\t\t\t\t\t\t\tthis.titlePos==\"top\" ? tsize + this.margins.t : this.dim.height - this.margins.b,\r\n\t\t\t\t\t\t\t\"middle\",\r\n\t\t\t\t\t\t\tthis.title,\r\n\t\t\t\t\t\t\tthis.titleFont,\r\n\t\t\t\t\t\t\tthis.titleFontColor\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// case of pies, spiders etc.\r\n\t\t\t\t\tarr.forEach(this.htmlElementsRegistry, function(elem, index, arr){\r\n\t\t\t\t\t\tvar tDir = newTextDir == \"auto\" ? this.getTextDir(elem[4]) : newTextDir;\r\n\t\t\t\t\t\tif(elem[0].children[0] && elem[0].children[0].dir != tDir){\r\n\t\t\t\t\t\t\tdomConstruct.destroy(elem[0].children[0]);\r\n\t\t\t\t\t\t\telem[0].children[0] = da.createText[\"html\"]\r\n\t\t\t\t\t\t\t\t\t(this, this.surface, elem[1], elem[2], elem[3], elem[4], elem[5], elem[6]).children[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\tsetDir : function(dir){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetter for the dir attribute.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAllows dynamically set the dri attribute, which will used to\r\n\t\t\t//\t\tupdates the chart rendering direction.\r\n\t\t\t//\tdir : the desired chart direction [rtl: for right to left ,ltr: for left to right]\r\n \r\n\t\t\tif(dir == \"rtl\" || dir == \"ltr\"){\r\n\t\t\t\tif(this.dir != dir){\r\n\t\t\t\t\tthis.isMirrored = true;\r\n\t\t\t\t\tthis.dirty = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.dir = dir;\r\n\t\t\t}\t\t\t\r\n\t\t\treturn this; \r\n\t\t},\r\n\t\t\r\n\t\tisRightToLeft: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcheck the direction of the chart.\r\n\t\t\t// description:\r\n\t\t\t//\t\tcheck the dir attribute to determine the rendering direction\r\n\t\t\t//\t\tof the chart.\r\n\t\t\treturn this.dir == \"rtl\";\r\n        },\r\n        \r\n\t\tapplyMirroring: function(plot, dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapply the mirroring operation to the current chart plots.\r\n\t\t\t//\r\n\t\t\tutils.reverseMatrix(plot, dim, offsets, this.dir == \"rtl\");\r\n\t\t\t//force the direction of the node to be ltr to properly render the axes and the plots labels.\r\n\t\t\tdomStyle.set(this.node, \"direction\", \"ltr\");\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\tformatTruncatedLabel: function(element, label, labelType){\r\n\t\t\tthis.truncateBidi(element, label, labelType);\r\n\t\t},\r\n\r\n\t\ttruncateBidi: function(elem, label, labelType){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEnables bidi support for truncated labels.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCan be two types of labels: html or gfx.\r\n\t\t\t//\r\n\t\t\t//\t\t####gfx labels:\r\n\t\t\t//\r\n\t\t\t//\t\tNeed to be stored in registry to be used when the textDir will be set dynamically.\r\n\t\t\t//\t\tAdditional work on truncated labels is needed for case as 111111A (A stands for \"bidi\" character rtl directioned).\r\n\t\t\t//\t\tlet's say in this case the truncation is \"111...\" If the textDir is auto, the display should be: \"...111\" but in gfx\r\n\t\t\t//\t\tcase we will get \"111...\". Because this.surface.setTextDir will calculate the dir of truncated\r\n\t\t\t//\t\tlabel, which value is \"111...\" but th real is \"111111A\".\r\n\t\t\t//\t\teach time we created a gfx truncated label we store it in the truncatedLabelsRegistry.\r\n\t\t\t//\r\n\t\t\t//\t\t####html labels:\r\n\t\t\t//\r\n\t\t\t//\t\tno need for repository (stored in another place). Here we only need to update the current dir according to textDir.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\r\n\t\t\tif(labelType == \"gfx\"){\r\n\t\t\t\t// store truncated gfx labels in the data structure.\r\n\t\t\t\tthis.truncatedLabelsRegistry.push({element: elem, label: label});\r\n\t\t\t\tif(this.textDir == \"auto\"){\r\n\t\t\t\t\telem.setShape({textDir: this.getTextDir(label)});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(labelType == \"html\" && this.textDir == \"auto\"){\r\n\t\t\t\telem.children[0].dir = this.getTextDir(label);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\trender: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.isMirrored = false;\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t\r\n\t\t_resetLeftBottom: function(axis){\r\n\t\t\tif(axis.vertical && this.isMirrored){\r\n\t\t\t\taxis.opt.leftBottom = !axis.opt.leftBottom;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t});\r\n});\r\n\r\n"]}