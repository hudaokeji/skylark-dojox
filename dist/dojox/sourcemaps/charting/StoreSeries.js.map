{"version":3,"sources":["charting/StoreSeries.js"],"names":["define","arr","declare","Deferred","constructor","store","kwArgs","value","this","object","o","key","data","_initialRendering","fetch","destroy","observeHandle","remove","setSeriesObject","series","self","results","query","update","map","objects","_pushDataChanges","when","observe","chart","updateSeries","name","delayedRender"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,qBAAsB,uBAChD,SAASC,EAAKC,EAASC,GAExB,OAAOD,EAAQ,6BAA8B,MAC5CE,YAAa,SAASC,EAAOC,EAAQC,GAepCC,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EAIZE,KAAKD,MAFJA,EACiB,mBAATA,EACIA,EACW,iBAATA,EACF,SAASE,GACrB,IAAIC,KACJ,IAAI,IAAIC,KAAOJ,EACdG,EAAEC,GAAOF,EAAOF,EAAMI,IAEvB,OAAOD,GAGK,SAASD,GACrB,OAAOA,EAAOF,IAIH,SAASE,GACrB,OAAOA,EAAOF,OAIhBC,KAAKI,QAELJ,KAAKK,mBAAoB,EACzBL,KAAKM,SAGNC,QAAS,WAGLP,KAAKQ,eACPR,KAAKQ,cAAcC,UAIrBC,gBAAiB,SAASC,GAKzBX,KAAKW,OAASA,GAKfL,MAAO,WAGN,IAAIM,EAAOZ,KACRA,KAAKQ,eACPR,KAAKQ,cAAcC,SAEpB,IAAII,EAAUb,KAAKH,MAAMiB,MAAMd,KAAKF,OAAOgB,MAAOd,KAAKF,QAQvD,SAASiB,IACRH,EAAKR,KAAOX,EAAIuB,IAAIJ,EAAKK,QAAS,SAAShB,GAC1C,OAAOW,EAAKb,MAAME,EAAQW,EAAKf,SAEhCe,EAAKM,mBAXNvB,EAASwB,KAAKN,EAAS,SAASI,GAC/BL,EAAKK,QAAUA,EACfF,MAEEF,EAAQO,UACVpB,KAAKQ,cAAgBK,EAAQO,QAAQL,GAAQ,KAU/CG,iBAAkB,WACdlB,KAAKW,SACPX,KAAKW,OAAOU,MAAMC,aAAatB,KAAKW,OAAOY,KAAMvB,KAAMA,KAAKK,mBAC5DL,KAAKK,mBAAoB,EACzBL,KAAKW,OAAOU,MAAMG","file":"../../charting/StoreSeries.js","sourcesContent":["define([\"dojo/_base/array\", \"dojo/_base/declare\", \"dojo/_base/Deferred\"], \r\n  function(arr, declare, Deferred){\r\n\t\r\n\treturn declare(\"dojox.charting.StoreSeries\", null, {\r\n\t\tconstructor: function(store, kwArgs, value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSeries adapter for dojo object stores (dojo.store).\r\n\t\t\t// store: Object\r\n\t\t\t//\t\tA dojo object store.\r\n\t\t\t// kwArgs: Object\r\n\t\t\t//\t\tA store-specific keyword parameters used for querying objects.\r\n\t\t\t//\t\tSee dojo.store docs\r\n\t\t\t// value: Function|Object|String\r\n\t\t\t//\t\tFunction, which takes an object handle, and\r\n\t\t\t//\t\tproduces an output possibly inspecting the store's item. Or\r\n\t\t\t//\t\ta dictionary object, which tells what names to extract from\r\n\t\t\t//\t\tan object and how to map them to an output. Or a string, which\r\n\t\t\t//\t\tis a numeric field name to use for plotting. If undefined, null\r\n\t\t\t//\t\tor empty string (the default), \"value\" field is extracted.\r\n\t\t\tthis.store = store;\r\n\t\t\tthis.kwArgs = kwArgs;\r\n\t\r\n\t\t\tif(value){\r\n\t\t\t\tif(typeof value == \"function\"){\r\n\t\t\t\t\tthis.value = value;\r\n\t\t\t\t}else if(typeof value == \"object\"){\r\n\t\t\t\t\tthis.value = function(object){\r\n\t\t\t\t\t\tvar o = {};\r\n\t\t\t\t\t\tfor(var key in value){\r\n\t\t\t\t\t\t\to[key] = object[value[key]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn o;\r\n\t\t\t\t\t};\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.value = function(object){\r\n\t\t\t\t\t\treturn object[value];\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.value = function(object){\r\n\t\t\t\t\treturn object.value;\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.data = [];\r\n\r\n\t\t\tthis._initialRendering = true;\r\n\t\t\tthis.fetch();\r\n\t\t},\r\n\t\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClean up before GC.\r\n\t\t\tif(this.observeHandle){\r\n\t\t\t\tthis.observeHandle.remove();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tsetSeriesObject: function(series){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets a dojox.charting.Series object we will be working with.\r\n\t\t\t// series: dojox/charting/Series\r\n\t\t\t//\t\tOur interface to the chart.\r\n\t\t\tthis.series = series;\r\n\t\t},\r\n\t\r\n\t\t// store fetch loop\r\n\t\r\n\t\tfetch: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFetches data from the store and updates a chart.\r\n\t\t\tvar self = this;\r\n\t\t\tif(this.observeHandle){\r\n\t\t\t\tthis.observeHandle.remove();\r\n\t\t\t}\r\n\t\t\tvar results = this.store.query(this.kwArgs.query, this.kwArgs);\r\n\t\t\tDeferred.when(results, function(objects){\r\n\t\t\t\tself.objects = objects;\r\n\t\t\t\tupdate();\r\n\t\t\t});\r\n\t\t\tif(results.observe){\r\n\t\t\t\tthis.observeHandle = results.observe(update, true);\r\n\t\t\t}\r\n\t\t\tfunction update(){\r\n\t\t\t\tself.data = arr.map(self.objects, function(object){\r\n\t\t\t\t\treturn self.value(object, self.store);\r\n\t\t\t\t});\r\n\t\t\t\tself._pushDataChanges();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t_pushDataChanges: function(){\r\n\t\t\tif(this.series){\r\n\t\t\t\tthis.series.chart.updateSeries(this.series.name, this, this._initialRendering);\r\n\t\t\t\tthis._initialRendering = false;\r\n\t\t\t\tthis.series.chart.delayedRender();\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t});\r\n});\r\n"]}