{"version":3,"sources":["charting/plot2d/Base.js"],"names":["define","declare","arr","gfx","Element","common","ac","has","Base","constructor","chart","kwArgs","tooltipFunc","this","clear","series","dirty","setAxis","axis","assignAxes","axes","forEach","addSeries","run","push","getSeriesStats","collectSimpleStats","calculateAxes","dim","initializeScalers","isDataDirty","some","item","render","offsets","renderLabel","group","x","y","label","theme","block","align","elem","createText","opt","htmlLabels","renderer","font","fontColor","style","pointerEvents","rawNode","htmlElements","getRequiredColors","length","_getLabel","number","getLabel","fixed","precision","extend","_checkOrientation","applyMirroring"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,mBAAoB,YAChD,aAAc,WAAY,mBAAoB,YAC/C,SAASC,EAASC,EAAKC,EAAKC,EAASC,EAAQC,EAAIC,GAiBjD,IAAIC,EAAOP,EAAQ,6BAA8BG,GAGhDK,YAAa,SAASC,EAAOC,GASzBA,GAAUA,EAAOC,cACnBC,KAAKD,YAAcD,EAAOC,cAG5BE,MAAO,WAON,OAFAD,KAAKE,UACLF,KAAKG,OAAQ,EACNH,MAERI,QAAS,SAASC,GAOjB,OAAOL,MAERM,WAAY,SAASC,GAQpBlB,EAAImB,QAAQR,KAAKO,KAAM,SAASF,GAC5BL,KAAKK,IACPL,KAAKI,QAAQG,EAAKP,KAAKK,MAEtBL,OAEJS,UAAW,SAASC,GAQnB,OADAV,KAAKE,OAAOS,KAAKD,GACVV,MAERY,eAAgB,WAKf,OAAOpB,EAAOqB,mBAAmBb,KAAKE,SAEvCY,cAAe,SAASC,GAQvB,OADAf,KAAKgB,kBAAkBD,EAAKf,KAAKY,kBAC1BZ,MAERgB,kBAAmB,WAGlB,OAAOhB,MAERiB,YAAa,WAKZ,OAAO5B,EAAI6B,KAAKlB,KAAKE,OAAQ,SAASiB,GAAO,OAAOA,EAAKhB,SAE1DiB,OAAQ,SAASL,EAAKM,GASrB,OAAOrB,MAERsB,YAAa,SAASC,EAAOC,EAAGC,EAAGC,EAAOC,EAAOC,EAAOC,GACvD,IAAIC,EAAOrC,EAAGsC,WAAW/B,KAAKgC,IAAIC,YAA8B,OAAhB3C,EAAI4C,SAAoB,OAAS,OAC/ElC,KAAKH,MAAO0B,EAAOC,EAAGC,EAAGI,GAAY,SAAUH,EAAOC,EAAMzB,OAAOiC,KAAMR,EAAMzB,OAAOkC,WAoBxF,OAjBGR,IAIC5B,KAAKgC,IAAIC,YAA8B,OAAhB3C,EAAI4C,SAE7BJ,EAAKO,MAAMC,cAAgB,OACnBR,EAAKS,UAEbT,EAAKS,QAAQF,MAAMC,cAAgB,SAIlCtC,KAAKgC,IAAIC,YAA8B,OAAhB3C,EAAI4C,UAC7BlC,KAAKwC,aAAa7B,KAAKmB,GAGjBA,GAERW,kBAAmB,WAKlB,OAAOzC,KAAKE,OAAOwC,QAEpBC,UAAW,SAASC,GACnB,OAAOpD,EAAOqD,SAASD,EAAQ5C,KAAKgC,IAAIc,MAAO9C,KAAKgC,IAAIe,cAU1D,OAPGrD,EAAI,cACNC,EAAKqD,QACJC,kBAAmB,SAAS1B,EAAOR,EAAKM,GACvCrB,KAAKH,MAAMqD,eAAelD,KAAKuB,MAAOR,EAAKM,MAIvC1B","file":"../../../charting/plot2d/Base.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/_base/array\", \"dojox/gfx\",\r\n\t\t\"../Element\", \"./common\", \"../axis2d/common\", \"dojo/has\"],\r\n\tfunction(declare, arr, gfx, Element, common, ac, has){\r\n/*=====\r\ndojox.charting.plot2d.__PlotCtorArgs = {\r\n\t// summary:\r\n\t//\t\tThe base keyword arguments object for plot constructors.\r\n\t//\t\tNote that the parameters for this may change based on the\r\n\t//\t\tspecific plot type (see the corresponding plot type for\r\n\t//\t\tdetails).\r\n\r\n\t// tooltipFunc: Function?\r\n\t//\t\tAn optional function used to compute tooltip text for this plot. It takes precedence over\r\n\t//\t\tthe default function when available.\r\n\t//\t|\t\tfunction tooltipFunc(o) { return \"text\"; }\r\n\t//\t\t`o`is the event object that triggered the tooltip.\r\n\ttooltipFunc: null\r\n};\r\n=====*/\r\n\tvar Base = declare(\"dojox.charting.plot2d.Base\", Element, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for all plot types.\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a base plot for charting.\r\n\t\t\t// chart: dojox/chart/Chart\r\n\t\t\t//\t\tThe chart this plot belongs to.\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__PlotCtorArgs?\r\n\t\t\t//\t\tAn optional arguments object to help define the plot.\r\n\t\r\n\t\t\t// TODO does not work in markup\r\n\t\t\tif(kwArgs && kwArgs.tooltipFunc){\r\n\t\t\t\tthis.tooltipFunc = kwArgs.tooltipFunc;\r\n\t\t\t}\r\n\t\t},\r\n\t\tclear: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClear out all of the information tied to this plot.\r\n\t\t\t// returns: dojox.charting.plot2d.Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.series = [];\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Base\r\n\t\t},\r\n\t\tsetAxis: function(axis){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet an axis for this plot.\r\n\t\t\t// axis: dojox.charting.axis2d.Base\r\n\t\t\t//\t\tThe axis to set.\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Base\r\n\t\t},\r\n\t\tassignAxes: function(axes){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFrom an array of axes pick the ones that correspond to this plot and\r\n\t\t\t//\t\tassign them to the plot using setAxis method.\r\n\t\t\t// axes: Array\r\n\t\t\t//\t\tAn array of dojox/charting/axis2d/Base\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tarr.forEach(this.axes, function(axis){\r\n\t\t\t\tif(this[axis]){\r\n\t\t\t\t\tthis.setAxis(axes[this[axis]]);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\taddSeries: function(run){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a data series to this plot.\r\n\t\t\t// run: dojox.charting.Series\r\n\t\t\t//\t\tThe series to be added.\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.series.push(run);\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Base\r\n\t\t},\r\n\t\tgetSeriesStats: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the min/max on all attached series in both directions.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\t{hmin, hmax, vmin, vmax} min/max in both directions.\r\n\t\t\treturn common.collectSimpleStats(this.series);\r\n\t\t},\r\n\t\tcalculateAxes: function(dim){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStub function for running the axis calculations (deprecated).\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object of the form { width, height }\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.initializeScalers(dim, this.getSeriesStats());\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Base\r\n\t\t},\r\n\t\tinitializeScalers: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDoes nothing.\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\tisDataDirty: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns whether or not any of this plot's data series need to be rendered.\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tFlag indicating if any of this plot's series are invalid and need rendering.\r\n\t\t\treturn arr.some(this.series, function(item){ return item.dirty; });\t//\tBoolean\r\n\t\t},\r\n\t\trender: function(dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender the plot on the chart.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object of the form { width, height }.\r\n\t\t\t// offsets: Object\r\n\t\t\t//\t\tAn object of the form { l, r, t, b }.\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Base\r\n\t\t},\r\n\t\trenderLabel: function(group, x, y, label, theme, block, align){\r\n\t\t\tvar elem = ac.createText[this.opt.htmlLabels && gfx.renderer != \"vml\" ? \"html\" : \"gfx\"]\r\n\t\t\t\t(this.chart, group, x, y, align?align:\"middle\", label, theme.series.font, theme.series.fontColor);\r\n\t\t\t// if the label is inside we need to avoid catching events on it this would prevent action on\r\n\t\t\t// chart elements\r\n\t\t\tif(block){\r\n\t\t\t\t// TODO this won't work in IE neither in VML nor in HTML\r\n\t\t\t\t// a solution would be to catch the event on the label and refire it to the element\r\n\t\t\t\t// possibly using elementFromPoint or having it already available\r\n\t\t\t\tif(this.opt.htmlLabels && gfx.renderer != \"vml\"){\r\n\t\t\t\t\t// we have HTML labels, let's use pointEvents on the HTML node\r\n\t\t\t\t\telem.style.pointerEvents = \"none\";\r\n\t\t\t\t}else if(elem.rawNode){\r\n\t\t\t\t\t// we have SVG labels, let's use pointerEvents on the SVG or VML node\r\n\t\t\t\t\telem.rawNode.style.pointerEvents = \"none\";\r\n\t\t\t\t}\r\n\t\t\t\t// else we have Canvas, we need do nothing, as Canvas text won't catch events\r\n\t\t\t}\r\n\t\t\tif(this.opt.htmlLabels && gfx.renderer != \"vml\"){\r\n\t\t\t\tthis.htmlElements.push(elem);\r\n\t\t\t}\r\n\r\n\t\t\treturn elem;\r\n\t\t},\r\n\t\tgetRequiredColors: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet how many data series we have, so we know how many colors to use.\r\n\t\t\t// returns: Number\r\n\t\t\t//\t\tThe number of colors needed.\r\n\t\t\treturn this.series.length;\t//\tNumber\r\n\t\t},\r\n\t\t_getLabel: function(number){\r\n\t\t\treturn common.getLabel(number, this.opt.fixed, this.opt.precision);\r\n\t\t}\r\n\t});\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tBase.extend({\r\n\t\t\t_checkOrientation: function(group, dim, offsets){\r\n\t\t\t\tthis.chart.applyMirroring(this.group, dim, offsets);\r\n\t\t\t}\t\t\r\n\t\t});\r\n\t}\r\n\treturn Base;\r\n});\r\n"]}