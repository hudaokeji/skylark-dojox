{"version":3,"sources":["charting/plot2d/Bars.js"],"names":["define","lang","arr","declare","has","CartesianBase","_PlotEvents","dc","fx","du","df","dfr","purgeGroup","lambda","defaultParams","gap","animate","enableCache","optionalParams","minBarSize","maxBarSize","stroke","outline","shadow","fill","filter","styleFunc","font","fontColor","constructor","chart","kwArgs","this","opt","clone","mixin","updateWithObject","updateWithPattern","renderingOptions","shape-rendering","getSeriesStats","t","stats","collectSimpleStats","series","hmin","hmax","vmin","vmax","createRect","run","creator","params","rect","_rectFreePool","length","pop","setShape","add","_rectUsePool","push","createLabel","group","value","bbox","theme","labels","labelStyle","y","height","x","width","labelOffset","renderLabel","_getLabel","isNaN","inherited","arguments","render","dim","offsets","zoom","isDataDirty","performZoom","s","dirty","isDirty","resetEvents","forEach","_eventSeries","cleanGroup","getGroup","forEachRev","item","ht","_hScaler","scaler","getTransformerFromModel","vt","_vScaler","baseline","Math","max","bounds","lower","baselineWidth","events","bar","getBarProperties","actualLength","serie","hidden","z","i","concat","next","dyn","eventSeries","Array","data","indexed","some","hasOwnProperty","min","floor","from","ceil","to","j","finalTheme","sshape","val","getValue","hv","w","abs","tMixin","addMixin","post","l","b","thickness","srect","dx","dy","setFill","color","setStroke","_animateBar","specialFill","_plotFill","_shapeFill","shape","setFilter","getFill","getStroke","o","element","index","cx","cy","_connectEvents","py","name","skip","_reconnectEvents","_checkOrientation","seriesIndex","f","calculateBarSize","scale","size","hoffset","hsize","animateTransform","delegate","duration","transform","start","end","play"],"mappings":"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","file":"../../../charting/plot2d/Bars.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/array\", \"dojo/_base/declare\", \"dojo/has\", \"./CartesianBase\", \"./_PlotEvents\", \"./common\",\r\n\t\"dojox/gfx/fx\", \"dojox/lang/utils\", \"dojox/lang/functional\", \"dojox/lang/functional/reversed\"], \r\n\tfunction(lang, arr, declare, has, CartesianBase, _PlotEvents, dc, fx, du, df, dfr){\r\n\t\t\r\n\t/*=====\r\n\tdeclare(\"dojox.charting.plot2d.__BarCtorArgs\", dojox.charting.plot2d.__DefaultCtorArgs, {\r\n\t\t// summary:\r\n\t\t//\t\tAdditional keyword arguments for bar charts.\r\n\t\r\n\t\t// minBarSize: Number?\r\n\t\t//\t\tThe minimum size for a bar in pixels.  Default is 1.\r\n\t\tminBarSize: 1,\r\n\t\r\n\t\t// maxBarSize: Number?\r\n\t\t//\t\tThe maximum size for a bar in pixels.  Default is 1.\r\n\t\tmaxBarSize: 1,\r\n\r\n\t\t// stroke: dojox.gfx.Stroke?\r\n\t\t//\t\tAn optional stroke to use for any series on the plot.\r\n\t\tstroke:\t\t{},\r\n\r\n\t\t// outline: dojox.gfx.Stroke?\r\n\t\t//\t\tAn optional stroke used to outline any series on the plot.\r\n\t\toutline:\t{},\r\n\r\n\t\t// shadow: dojox.gfx.Stroke?\r\n\t\t//\t\tAn optional stroke to use to draw any shadows for a series on a plot.\r\n\t\tshadow:\t\t{},\r\n\r\n\t\t// fill: dojox.gfx.Fill?\r\n\t\t//\t\tAny fill to be used for elements on the plot.\r\n\t\tfill:\t\t{},\r\n\r\n\t\t// filter: dojox.gfx.Filter?\r\n\t \t//\t\tAn SVG filter to be used for elements on the plot. gfx SVG renderer must be used and dojox/gfx/svgext must\r\n\t \t//\t\tbe required for this to work.\r\n\t \tfilter:\t\t{},\r\n\r\n\t\t// styleFunc: Function?\r\n\t\t//\t\tA function that returns a styling object for the a given data item.\r\n\t\tstyleFunc:\tnull,\r\n\r\n\t\t// font: String?\r\n\t\t//\t\tA font definition to be used for labels and other text-based elements on the plot.\r\n\t\tfont:\t\t\"\",\r\n\r\n\t\t// fontColor: String|dojo.Color?\r\n\t\t//\t\tThe color to be used for any text-based elements on the plot.\r\n\t\tfontColor:\t\"\",\r\n\t\t\r\n\t\t// enableCache: Boolean?\r\n\t\t//\t\tWhether the bars rect are cached from one rendering to another. This improves the rendering performance of\r\n\t\t//\t\tsuccessive rendering but penalize the first rendering.  Default false.\r\n\t\tenableCache: false\r\n\t});\r\n\t=====*/\r\n\tvar purgeGroup = dfr.lambda(\"item.purgeGroup()\");\r\n\r\n\treturn declare(\"dojox.charting.plot2d.Bars\", [CartesianBase, _PlotEvents], {\r\n\t\t// summary:\r\n\t\t//\t\tThe plot object representing a bar chart (horizontal bars).\r\n\t\tdefaultParams: {\r\n\t\t\tgap:\t0,\t\t// gap between columns in pixels\r\n\t\t\tanimate: null,   // animate bars into place\r\n\t\t\tenableCache: false\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\tminBarSize:\t1,\t// minimal bar width in pixels\r\n\t\t\tmaxBarSize:\t1,\t// maximal bar width in pixels\r\n\t\t\t// theme component\r\n\t\t\tstroke:\t\t{},\r\n\t\t\toutline:\t{},\r\n\t\t\tshadow:\t\t{},\r\n\t\t\tfill:\t\t{},\r\n\t\t\tfilter:\t    {},\r\n\t\t\tstyleFunc:  null,\r\n\t\t\tfont:\t\t\"\",\r\n\t\t\tfontColor:\t\"\"\r\n\t\t},\r\n\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe constructor for a bar chart.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this plot belongs to.\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__BarCtorArgs?\r\n\t\t\t//\t\tAn optional keyword arguments object to help define the plot.\r\n\t\t\tthis.opt = lang.clone(lang.mixin(this.opt, this.defaultParams));\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t\tthis.animate = this.opt.animate;\r\n\t\t\tthis.renderingOptions = { \"shape-rendering\": \"crispEdges\" };\r\n\t\t},\r\n\r\n\t\tgetSeriesStats: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the min/max on all attached series in both directions.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\t{hmin, hmax, vmin, vmax} min/max in both directions.\r\n\t\t\tvar stats = dc.collectSimpleStats(this.series), t;\r\n\t\t\tstats.hmin -= 0.5;\r\n\t\t\tstats.hmax += 0.5;\r\n\t\t\tt = stats.hmin, stats.hmin = stats.vmin, stats.vmin = t;\r\n\t\t\tt = stats.hmax, stats.hmax = stats.vmax, stats.vmax = t;\r\n\t\t\treturn stats; // Object\r\n\t\t},\r\n\t\t\r\n\t\tcreateRect: function(run, creator, params){\r\n\t\t\tvar rect;\r\n\t\t\tif(this.opt.enableCache && run._rectFreePool.length > 0){\r\n\t\t\t\trect = run._rectFreePool.pop();\r\n\t\t\t\trect.setShape(params);\r\n\t\t\t\t// was cleared, add it back\r\n\t\t\t\tcreator.add(rect);\r\n\t\t\t}else{\r\n\t\t\t\trect = creator.createRect(params);\r\n\t\t\t}\r\n\t\t\tif(this.opt.enableCache){\r\n\t\t\t\trun._rectUsePool.push(rect);\r\n\t\t\t}\r\n\t\t\treturn rect;\r\n\t\t},\r\n\r\n\t\tcreateLabel: function(group, value, bbox, theme){\r\n\t\t\tif(this.opt.labels && this.opt.labelStyle == \"outside\"){\r\n\t\t\t\tvar y = bbox.y + bbox.height / 2;\r\n\t\t\t\tvar x = bbox.x + bbox.width + this.opt.labelOffset;\r\n\t\t\t\tthis.renderLabel(group, x, y, this._getLabel(isNaN(value.y)?value:value.y), theme, \"start\");\r\n          \t}else{\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trender: function(dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun the calculations for any axes for this plot.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object in the form of { width, height }\r\n\t\t\t// offsets: Object\r\n\t\t\t//\t\tAn object of the form { l, r, t, b}.\r\n\t\t\t// returns: dojox/charting/plot2d/Bars\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tif(this.zoom && !this.isDataDirty()){\r\n\t\t\t\treturn this.performZoom(dim, offsets); // dojox/charting/plot2d/Bars\r\n\t\t\t}\r\n\t\t\tthis.dirty = this.isDirty();\r\n\t\t\tthis.resetEvents();\r\n\t\t\tvar s;\r\n\t\t\tif(this.dirty){\r\n\t\t\t\tarr.forEach(this.series, purgeGroup);\r\n\t\t\t\tthis._eventSeries = {};\r\n\t\t\t\tthis.cleanGroup();\r\n\t\t\t\ts = this.getGroup();\r\n\t\t\t\tdf.forEachRev(this.series, function(item){ item.cleanGroup(s); });\r\n\t\t\t}\r\n\t\t\tvar t = this.chart.theme,\r\n\t\t\t\tht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),\r\n\t\t\t\tvt = this._vScaler.scaler.getTransformerFromModel(this._vScaler),\r\n\t\t\t\tbaseline = Math.max(0, this._hScaler.bounds.lower),\r\n\t\t\t\tbaselineWidth = ht(baseline),\r\n\t\t\t\tevents = this.events();\r\n\t\t\tvar bar = this.getBarProperties();\r\n\r\n\t\t\tvar actualLength = this.series.length;\r\n\t\t\tarr.forEach(this.series, function(serie){if(serie.hidden){actualLength--;}});\r\n\t\t\tvar z = actualLength;\r\n\t\t\tfor(var i = this.series.length - 1; i >= 0; --i){\r\n\t\t\t\tvar run = this.series[i];\r\n\t\t\t\tif(!this.dirty && !run.dirty){\r\n\t\t\t\t\tt.skip();\r\n\t\t\t\t\tthis._reconnectEvents(run.name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\trun.cleanGroup();\r\n\t\t\t\tif(this.opt.enableCache){\r\n\t\t\t\t\trun._rectFreePool = (run._rectFreePool?run._rectFreePool:[]).concat(run._rectUsePool?run._rectUsePool:[]);\r\n\t\t\t\t\trun._rectUsePool = [];\r\n\t\t\t\t}\r\n\t\t\t\tvar theme = t.next(\"bar\", [this.opt, run]);\r\n\t\t\t\tif(run.hidden){\r\n\t\t\t\t\trun.dyn.fill = theme.series.fill;\r\n\t\t\t\t\trun.dyn.stroke = theme.series.stroke;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tz--;\r\n\r\n\t\t\t\tvar\teventSeries = new Array(run.data.length);\r\n\t\t\t\ts = run.group;\t\r\n\t\t\t\tvar indexed = arr.some(run.data, function(item){\r\n\t\t\t\t\treturn typeof item == \"number\" || (item && !item.hasOwnProperty(\"x\"));\r\n\t\t\t\t});\r\n\t\t\t\t// on indexed charts we can easily just interate from the first visible to the last visible\r\n\t\t\t\t// data point to save time\r\n\t\t\t\tvar min = indexed?Math.max(0, Math.floor(this._vScaler.bounds.from - 1)):0;\r\n\t\t\t\tvar max = indexed?Math.min(run.data.length, Math.ceil(this._vScaler.bounds.to)):run.data.length;\r\n\t\t\t\tfor(var j = min; j < max; ++j){\r\n\t\t\t\t\tvar value = run.data[j];\r\n\t\t\t\t\tif(value != null){\r\n\t\t\t\t\t\tvar val = this.getValue(value, j, i, indexed),\r\n\t\t\t\t\t\t\thv = ht(val.y),\r\n\t\t\t\t\t\t\tw = Math.abs(hv - baselineWidth),\r\n\t\t\t\t\t\t\tfinalTheme,\r\n\t\t\t\t\t\t\tsshape;\r\n\t\t\t\t\t\tif(this.opt.styleFunc || typeof value != \"number\"){\r\n\t\t\t\t\t\t\tvar tMixin = typeof value != \"number\" ? [value] : [];\r\n\t\t\t\t\t\t\tif(this.opt.styleFunc){\r\n\t\t\t\t\t\t\t\ttMixin.push(this.opt.styleFunc(value));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfinalTheme = t.addMixin(theme, \"bar\", tMixin, true);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfinalTheme = t.post(theme, \"bar\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(w >= 0 && bar.height >= 1){\r\n\t\t\t\t\t\t\tvar rect = {\r\n\t\t\t\t\t\t\t\tx: offsets.l + (val.y < baseline ? hv : baselineWidth),\r\n\t\t\t\t\t\t\t\ty: dim.height - offsets.b - vt(val.x + 1.5) + bar.gap + bar.thickness * (actualLength - z - 1),\r\n\t\t\t\t\t\t\t\t// y: dim.height - offsets.b - vt(val.x + 1.5) + bar.gap + bar.thickness * z,\r\n\t\t\t\t\t\t\t\twidth: w,\r\n\t\t\t\t\t\t\t\theight: bar.height\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tif(finalTheme.series.shadow){\r\n\t\t\t\t\t\t\t\tvar srect = lang.clone(rect);\r\n\t\t\t\t\t\t\t\tsrect.x += finalTheme.series.shadow.dx;\r\n\t\t\t\t\t\t\t\tsrect.y += finalTheme.series.shadow.dy;\r\n\t\t\t\t\t\t\t\tsshape = this.createRect(run, s, srect).setFill(finalTheme.series.shadow.color).setStroke(finalTheme.series.shadow);\r\n\t\t\t\t\t\t\t\tif(this.animate){\r\n\t\t\t\t\t\t\t\t\tthis._animateBar(sshape, offsets.l + baselineWidth, -w);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tvar specialFill = this._plotFill(finalTheme.series.fill, dim, offsets);\r\n\t\t\t\t\t\t\tspecialFill = this._shapeFill(specialFill, rect);\r\n\t\t\t\t\t\t\tvar shape = this.createRect(run, s, rect).setFill(specialFill).setStroke(finalTheme.series.stroke);\r\n\t\t\t\t\t\t\tif(shape.setFilter && finalTheme.series.filter){\r\n\t\t\t\t\t\t\t\tshape.setFilter(finalTheme.series.filter);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\trun.dyn.fill   = shape.getFill();\r\n\t\t\t\t\t\t\trun.dyn.stroke = shape.getStroke();\r\n\t\t\t\t\t\t\tif(events){\r\n\t\t\t\t\t\t\t\tvar o = {\r\n\t\t\t\t\t\t\t\t\telement: \"bar\",\r\n\t\t\t\t\t\t\t\t\tindex:   j,\r\n\t\t\t\t\t\t\t\t\trun:     run,\r\n\t\t\t\t\t\t\t\t\tshape:   shape,\r\n\t\t\t\t\t\t\t\t\tshadow:\t sshape,\r\n\t\t\t\t\t\t\t\t\tcx:      val.y,\r\n\t\t\t\t\t\t\t\t\tcy:      val.x + 1.5,\r\n\t\t\t\t\t\t\t\t\tx:\t     indexed?j:run.data[j].x,\r\n\t\t\t\t\t\t\t\t\ty:\t \t indexed?run.data[j]:run.data[j].y\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tthis._connectEvents(o);\r\n\t\t\t\t\t\t\t\teventSeries[j] = o;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// if val.py is here, this means we are stacking and we need to subtract previous\r\n\t\t\t\t\t\t\t// value to get the high in which we will lay out the label\r\n\t\t\t\t\t\t\tif(!isNaN(val.py) && val.py > baseline){\r\n\t\t\t\t\t\t\t\trect.x += ht(val.py);\r\n\t\t\t\t\t\t\t\trect.width -= ht(val.py);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.createLabel(s, value, rect, finalTheme);\r\n\t\t\t\t\t\t\tif(this.animate){\r\n\t\t\t\t\t\t\t\tthis._animateBar(shape, offsets.l + baselineWidth, -w);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._eventSeries[run.name] = eventSeries;\r\n\t\t\t\trun.dirty = false;\r\n\t\t\t}\r\n\t\t\tthis.dirty = false;\r\n\t\t\t// chart mirroring starts\r\n\t\t\tif(has(\"dojo-bidi\")){\r\n\t\t\t\tthis._checkOrientation(this.group, dim, offsets);\r\n\t\t\t}\r\n\t\t\t// chart mirroring ends\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Bars\r\n\t\t},\r\n\t\tgetValue: function(value, j, seriesIndex, indexed){\r\n\t\t\tvar y, x;\r\n\t\t\tif(indexed){\r\n\t\t\t\tif(typeof value == \"number\"){\r\n\t\t\t\t\ty = value;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ty = value.y;\r\n\t\t\t\t}\r\n\t\t\t\tx = j;\r\n\t\t\t}else{\r\n\t\t\t\ty = value.y;\r\n\t\t\t\tx = value.x -1;\r\n\t\t\t}\r\n\t\t\treturn {y:y, x:x};\r\n\t\t},\t\r\n\t\tgetBarProperties: function(){\r\n\t\t\tvar f = dc.calculateBarSize(this._vScaler.bounds.scale, this.opt);\r\n\t\t\treturn {gap: f.gap, height: f.size, thickness: 0};\r\n\t\t},\r\n\t\t_animateBar: function(shape, hoffset, hsize){\r\n\t\t\tif(hsize==0){\r\n\t\t\t\thsize = 1;\r\n\t\t\t}\r\n\t\t\tfx.animateTransform(lang.delegate({\r\n\t\t\t\tshape: shape,\r\n\t\t\t\tduration: 1200,\r\n\t\t\t\ttransform: [\r\n\t\t\t\t\t{name: \"translate\", start: [hoffset - (hoffset/hsize), 0], end: [0, 0]},\r\n\t\t\t\t\t{name: \"scale\", start: [1/hsize, 1], end: [1, 1]},\r\n\t\t\t\t\t{name: \"original\"}\r\n\t\t\t\t]\r\n\t\t\t}, this.animate)).play();\r\n\t\t}\r\n\t});\r\n});\r\n"]}