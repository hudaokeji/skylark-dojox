{"version":3,"sources":["charting/plot2d/CartesianBase.js"],"names":["define","lang","declare","hub","has","Base","primitive","gfx","fx","du","baseParams","hAxis","vAxis","labels","labelOffset","fixed","precision","labelStyle","htmlLabels","omitLabels","labelFunc","constructor","chart","kwArgs","this","axes","zoom","zoomQueue","lastWindow","vscale","hscale","xoffset","yoffset","series","opt","clone","updateWithObject","clear","inherited","arguments","_hAxis","_vAxis","cleanGroup","creator","noClip","_nativeClip","offsets","dim","w","Math","max","width","l","r","h","height","t","b","group","setClip","x","y","_clippedGroup","createGroup","purgeGroup","getGroup","setAxis","axis","vertical","toPage","coord","ah","av","sh","getScaler","sv","th","scaler","getTransformerFromModel","tv","c","getCoords","o","name","toData","getTransformerFromPlot","isDirty","dirty","createLabel","value","bbox","theme","label","apply","_getLabel","isNaN","lbox","_base","_getTextBox","font","renderLabel","performZoom","vs","scale","hs","vOffset","hBounds","_hScaler","bounds","xOffset","from","lower","vBounds","_vScaler","yOffset","rVScale","rHScale","rXOffset","rYOffset","shape","anim","animateTransform","delegate","duration","transform","start","end","mixin","push","connect","shift","length","play","initializeScalers","stats","initialized","calculate","hmin","hmax","buildScaler","vmin","vmax"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,qBAAsB,WACrE,SAAU,sBAAuB,YAAa,eAAgB,oBAC/D,SAASC,EAAMC,EAASC,EAAKC,EAAKC,EAAMC,EAAWC,EAAKC,EAAIC,GAqD5D,OAAOP,EAAQ,sCAAuCG,GACrDK,YACCC,MAAU,IACVC,MAAU,IACVC,QAAU,EACVC,YAAgB,GAChBC,OAAS,EACTC,UAAY,EACZC,WAAa,SACbC,YAAa,EACbC,YAAa,EACbC,UAAY,MAKbC,YAAa,SAASC,EAAOC,GAO5BC,KAAKC,MAAQ,QAAS,SACtBD,KAAKE,KAAO,KACZF,KAAKG,aACLH,KAAKI,YAAcC,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,EAAGC,QAAS,GAC9DR,KAAKb,MAASY,GAAUA,EAAOZ,OAAU,IACzCa,KAAKZ,MAASW,GAAUA,EAAOX,OAAU,IACzCY,KAAKS,UACLT,KAAKU,IAAMjC,EAAKkC,MAAMX,KAAKd,YAC3BD,EAAG2B,iBAAiBZ,KAAKU,IAAKX,IAE/Bc,MAAO,WAQN,OAHAb,KAAKc,UAAUC,WACff,KAAKgB,OAAS,KACdhB,KAAKiB,OAAS,KACPjB,MAERkB,WAAY,SAASC,EAASC,GAE7B,GADApB,KAAKc,UAAUC,YACXK,GAAUpB,KAAKF,MAAMuB,YAAY,CACpC,IAAIC,EAAUtB,KAAKF,MAAMwB,QAASC,EAAMvB,KAAKF,MAAMyB,IAC/CC,EAAIC,KAAKC,IAAI,EAAGH,EAAII,MAASL,EAAQM,EAAIN,EAAQO,GACpDC,EAAIL,KAAKC,IAAI,EAAGH,EAAIQ,OAAST,EAAQU,EAAIV,EAAQW,GAClDjC,KAAKkC,MAAMC,SAAUC,EAAGd,EAAQM,EAAGS,EAAGf,EAAQU,EAAGL,MAAOH,EAAGO,OAAQD,IAC/D9B,KAAKsC,gBACRtC,KAAKsC,cAAgBtC,KAAKkC,MAAMK,iBAInCC,WAAY,WACXxC,KAAKc,UAAUC,WACff,KAAKsC,cAAgB,MAEtBG,SAAU,WACT,OAAOzC,KAAKsC,eAAiBtC,KAAKkC,OAEnCQ,QAAS,SAASC,GAUjB,OAHGA,IACF3C,KAAK2C,EAAKC,SAAW,SAAW,UAAYD,GAEtC3C,MAER6C,OAAQ,SAASC,GAUhB,IAAIC,EAAK/C,KAAKgB,OAAQgC,EAAKhD,KAAKiB,OAC/BgC,EAAKF,EAAGG,YAAaC,EAAKH,EAAGE,YAC7BE,EAAKH,EAAGI,OAAOC,wBAAwBL,GACvCM,EAAKJ,EAAGE,OAAOC,wBAAwBH,GACvCK,EAAIxD,KAAKF,MAAM2D,YACfC,EAAI1D,KAAKF,MAAMwB,QAASC,EAAMvB,KAAKF,MAAMyB,IACtCS,EAAI,SAASc,GAChB,IAAIjB,KAGJ,OAFAA,EAAEO,EAAIgB,EAAGN,EAAMC,EAAGY,OAASH,EAAEpB,EAAIsB,EAAE9B,EACnCC,EAAEQ,EAAImB,EAAEnB,EAAId,EAAIQ,OAAS2B,EAAEzB,EAAIsB,EAAGT,EAAME,EAAGW,OACpC9B,GAIR,OAAOiB,EAAMd,EAAEc,GAAOd,GAEvB4B,OAAQ,SAASd,GAUhB,IAAIC,EAAK/C,KAAKgB,OAAQgC,EAAKhD,KAAKiB,OAC/BgC,EAAKF,EAAGG,YAAaC,EAAKH,EAAGE,YAC7BE,EAAKH,EAAGI,OAAOQ,uBAAuBZ,GACtCM,EAAKJ,EAAGE,OAAOQ,uBAAuBV,GACtCK,EAAIxD,KAAKF,MAAM2D,YACfC,EAAI1D,KAAKF,MAAMwB,QAASC,EAAMvB,KAAKF,MAAMyB,IACtCS,EAAI,SAASc,GAChB,IAAIjB,KAGJ,OAFAA,EAAEkB,EAAGY,MAAQP,EAAGN,EAAMV,EAAIoB,EAAEpB,EAAIsB,EAAE9B,GAClCC,EAAEmB,EAAGW,MAAQJ,EAAGC,EAAEnB,EAAId,EAAIQ,OAASe,EAAMT,EAAKqB,EAAEzB,GACzCJ,GAIR,OAAOiB,EAAMd,EAAEc,GAAOd,GAEvB8B,QAAS,WAKR,OAAO9D,KAAK+D,OAAS/D,KAAKgB,QAAUhB,KAAKgB,OAAO+C,OAAS/D,KAAKiB,QAAUjB,KAAKiB,OAAO8C,OAErFC,YAAa,SAAS9B,EAAO+B,EAAOC,EAAMC,GACzC,GAAGnE,KAAKU,IAAIrB,OAAO,CAClB,IAAI+C,EAAGC,EAAG+B,EAAQpE,KAAKU,IAAId,UAAUI,KAAKU,IAAId,UAAUyE,MAAMrE,MAAOiE,EAAOjE,KAAKU,IAAInB,MAAOS,KAAKU,IAAIlB,YACpGQ,KAAKsE,UAAUC,MAAMN,EAAM5B,GAAG4B,EAAMA,EAAM5B,GAC3C,GAA0B,UAAvBrC,KAAKU,IAAIjB,WAAuB,CAClC,IAAI+E,EAAOzF,EAAI0F,MAAMC,YAAYN,GAASO,KAAMR,EAAM1D,OAAOkE,OAG7D,GAFAvC,EAAI8B,EAAK9B,EAAI8B,EAAKvC,MAAQ,EAC1BU,EAAI6B,EAAK7B,EAAI6B,EAAKnC,OAAS,EAAIyC,EAAK1C,EAAI,EACrC0C,EAAKhD,EAAI0C,EAAKvC,OAAS6C,EAAK1C,EAAIoC,EAAKnC,OACvC,YAIDK,EAAI8B,EAAK9B,EAAI8B,EAAKvC,MAAQ,EAC1BU,EAAI6B,EAAK7B,EAAIrC,KAAKU,IAAIpB,YAEvBU,KAAK4E,YAAY1C,EAAOE,EAAGC,EAAG+B,EAAOD,EAA8B,UAAvBnE,KAAKU,IAAIjB,cAGvDoF,YAAa,SAAStD,EAAKD,GAW1B,IAAIwD,EAAK9E,KAAKiB,OAAO8D,OAAS,EAC7BC,EAAKhF,KAAKgB,OAAO+D,OAAS,EAC1BE,EAAU1D,EAAIQ,OAAST,EAAQW,EAC/BiD,EAAUlF,KAAKmF,SAASC,OACxBC,GAAWH,EAAQI,KAAOJ,EAAQK,OAASL,EAAQH,MACnDS,EAAUxF,KAAKyF,SAASL,OACxBM,GAAWF,EAAQF,KAAOE,EAAQD,OAASC,EAAQT,MAEnDY,EAAUb,EAAK9E,KAAKI,WAAWC,OAC/BuF,EAAUZ,EAAKhF,KAAKI,WAAWE,OAC/BuF,GAAY7F,KAAKI,WAAWG,QAAU8E,IACT,GAA1BrF,KAAKI,WAAWE,OAAc0E,EAAKhF,KAAKI,WAAWE,QACtDwF,GAAYJ,EAAU1F,KAAKI,WAAWI,UACT,GAA1BR,KAAKI,WAAWC,OAAcyE,EAAK9E,KAAKI,WAAWC,QAEtD0F,EAAQ/F,KAAKyC,WACbuD,EAAOhH,EAAGiH,iBAAiBxH,EAAKyH,UAC/BH,MAAOA,EACPI,SAAU,KACVC,YACEzC,KAAK,YAAa0C,OAAO,EAAG,GAAIC,KAAMhF,EAAQM,GAAK,EAAIgE,GAAUX,GAAW,EAAIU,MAChFhC,KAAK,QAAS0C,OAAO,EAAG,GAAIC,KAAMV,EAASD,KAC3ChC,KAAK,aACLA,KAAK,YAAa0C,OAAQ,EAAG,GAAIC,KAAMT,EAAUC,MAC/C9F,KAAKE,OAiBX,OAfAzB,EAAK8H,MAAMvG,KAAKI,YAAaC,OAAQyE,EAAIxE,OAAQ0E,EAAIzE,QAAS8E,EAAS7E,QAASkF,IAGhF1F,KAAKG,UAAUqG,KAAKR,GAEpBrH,EAAI8H,QAAQT,EAAM,QAAShG,KAAM,WAChCA,KAAKE,KAAO,KACZF,KAAKG,UAAUuG,QACZ1G,KAAKG,UAAUwG,OAAS,GAC1B3G,KAAKG,UAAU,GAAGyG,SAGQ,GAAzB5G,KAAKG,UAAUwG,QACjB3G,KAAKG,UAAU,GAAGyG,OAEZ5G,MAER6G,kBAAmB,SAAStF,EAAKuF,GAyBhC,OAhBG9G,KAAKgB,QACHhB,KAAKgB,OAAO+F,eACf/G,KAAKgB,OAAOgG,UAAUF,EAAMG,KAAMH,EAAMI,KAAM3F,EAAII,OAEnD3B,KAAKmF,SAAWnF,KAAKgB,OAAOkC,aAE5BlD,KAAKmF,SAAWrG,EAAUqI,YAAYL,EAAMG,KAAMH,EAAMI,KAAM3F,EAAII,OAEhE3B,KAAKiB,QACHjB,KAAKiB,OAAO8F,eACf/G,KAAKiB,OAAO+F,UAAUF,EAAMM,KAAMN,EAAMO,KAAM9F,EAAIQ,QAEnD/B,KAAKyF,SAAWzF,KAAKiB,OAAOiC,aAE5BlD,KAAKyF,SAAW3G,EAAUqI,YAAYL,EAAMM,KAAMN,EAAMO,KAAM9F,EAAIQ,QAE5D/B","file":"../../../charting/plot2d/CartesianBase.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/connect\", \"dojo/has\",\r\n\t\t\"./Base\", \"../scaler/primitive\", \"dojox/gfx\", \"dojox/gfx/fx\", \"dojox/lang/utils\"], \r\n\tfunction(lang, declare, hub, has, Base, primitive, gfx, fx, du){\r\n\t/*=====\r\n\tdeclare(\"dojox.charting.plot2d.__CartesianCtorArgs\", dojox.charting.plot2d.__PlotCtorArgs, {\r\n\t\t// hAxis: String?\r\n\t\t//\t\tThe horizontal axis name.\r\n\t\thAxis: \"x\",\r\n\r\n\t\t// vAxis: String?\r\n\t\t//\t\tThe vertical axis name\r\n\t\tvAxis: \"y\",\r\n\r\n\t\t// labels: Boolean?\r\n\t\t//\t\tFor plots that support labels, whether or not to draw labels for each data item.  Default is false.\r\n\t\tlabels:\t\t\tfalse,\r\n\r\n\t\t// fixed: Boolean?\r\n        //\t\tWhether a fixed precision must be applied to data values for display. Default is true.\r\n\t\tfixed:\t\t\ttrue,\r\n\r\n\t\t// precision: Number?\r\n        //\t\tThe precision at which to round data values for display. Default is 0.\r\n\t\tprecision:\t\t1,\r\n\r\n\t\t// labelOffset: Number?\r\n\t\t//\t\tThe amount in pixels by which to offset labels when using \"outside\" labelStyle.  Default is 10.\r\n\t\tlabelOffset:\t10,\r\n\r\n\t\t// labelStyle: String?\r\n\t\t//\t\tOptions as to where to draw labels.  This must be either \"inside\" or \"outside\". By default\r\n\t\t//      the labels are drawn \"inside\" the shape representing the data point (a column rectangle for a Columns plot\r\n\t\t//      or a marker for a Line plot for instance). When \"outside\" is used the labels are drawn above the data point shape.\r\n\t\tlabelStyle:\t\t\"inside\",\r\n\r\n\t\t// htmlLabels: Boolean?\r\n\t\t//\t\tWhether or not to use HTML to render slice labels. Default is true.\r\n\t\thtmlLabels:\t\ttrue,\r\n\r\n\t\t// omitLabels: Boolean?\r\n\t\t//\t\tWhether labels that do not fit in an item render are omitted or not.\tThis applies only when labelStyle\r\n\t\t//\t\tis \"inside\".\tDefault is false.\r\n\t\tomitLabels: true,\r\n\r\n\t\t// labelFunc: Function?\r\n\t\t//\t\tAn optional function to use to compute label text. It takes precedence over\r\n\t\t//\t\tthe default text when available.\r\n\t\t//\t|\t\tfunction labelFunc(value, fixed, precision) {}\r\n\t\t//\t\t`value` is the data value to display\r\n\t\t//\t\t`fixed` is true if fixed precision must be applied.\r\n\t\t//\t\t`precision` is the requested precision to be applied.\r\n\t\tlabelFunc: null\r\n\t});\r\n\t=====*/\r\n\r\n\treturn declare(\"dojox.charting.plot2d.CartesianBase\", Base, {\r\n\t\tbaseParams: {\r\n\t\t\thAxis: \t\t\t\"x\",\r\n\t\t\tvAxis: \t\t\t\"y\",\r\n\t\t\tlabels:\t\t\tfalse,\r\n\t\t\tlabelOffset:    10,\r\n\t\t\tfixed:\t\t\ttrue,\r\n\t\t\tprecision:\t\t1,\r\n\t\t\tlabelStyle:\t\t\"inside\",\r\n\t\t\thtmlLabels:\t\ttrue,\t\t// use HTML to draw labels\r\n\t\t\tomitLabels:\t\ttrue,\r\n\t\t\tlabelFunc:\t\tnull\r\n        },\r\n\r\n\t\t// summary:\r\n\t\t//\t\tBase class for cartesian plot types.\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a cartesian base plot for cartesian charts.\r\n\t\t\t// chart: dojox/chart/Chart\r\n\t\t\t//\t\tThe chart this plot belongs to.\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__CartesianCtorArgs?\r\n\t\t\t//\t\tAn optional arguments object to help define the plot.\r\n\t\t\tthis.axes = [\"hAxis\", \"vAxis\"];\r\n\t\t\tthis.zoom = null;\r\n\t\t\tthis.zoomQueue = [];\t// zooming action task queue\r\n\t\t\tthis.lastWindow = {vscale: 1, hscale: 1, xoffset: 0, yoffset: 0};\r\n\t\t\tthis.hAxis = (kwArgs && kwArgs.hAxis) || \"x\";\r\n\t\t\tthis.vAxis = (kwArgs && kwArgs.vAxis) || \"y\";\r\n\t\t\tthis.series = [];\r\n\t\t\tthis.opt = lang.clone(this.baseParams);\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t},\r\n\t\tclear: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClear out all of the information tied to this plot.\r\n\t\t\t// returns: dojox/charting/plot2d/CartesianBase\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._hAxis = null;\r\n\t\t\tthis._vAxis = null;\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/CartesianBase\r\n\t\t},\r\n\t\tcleanGroup: function(creator, noClip){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!noClip && this.chart._nativeClip){\r\n\t\t\t\tvar offsets = this.chart.offsets, dim = this.chart.dim;\r\n\t\t\t\tvar w = Math.max(0, dim.width  - offsets.l - offsets.r),\r\n\t\t\t\t\th = Math.max(0, dim.height - offsets.t - offsets.b);\r\n\t\t\t\tthis.group.setClip({ x: offsets.l, y: offsets.t, width: w, height: h });\r\n\t\t\t\tif(!this._clippedGroup){\r\n\t\t\t\t\tthis._clippedGroup = this.group.createGroup();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tpurgeGroup: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._clippedGroup = null;\r\n\t\t},\r\n\t\tgetGroup: function(){\r\n\t\t\treturn this._clippedGroup || this.group;\r\n\t\t},\r\n\t\tsetAxis: function(axis){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet an axis for this plot.\r\n\t\t\t// axis: dojox/charting/axis2d/Base\r\n\t\t\t//\t\tThe axis to set.\r\n\t\t\t// returns: dojox/charting/plot2d/CartesianBase\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tif(axis){\r\n\t\t\t\tthis[axis.vertical ? \"_vAxis\" : \"_hAxis\"] = axis;\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/CartesianBase\r\n\t\t},\r\n\t\ttoPage: function(coord){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCompute page coordinates from plot axis data coordinates.\r\n\t\t\t// coord: Object?\r\n\t\t\t//\t\tThe coordinates in plot axis data coordinate space. For cartesian charts that is of the following form:\r\n\t\t\t//\t\t`{ hAxisName: 50, vAxisName: 200 }`\r\n\t\t\t//\t\tIf not provided return the transform method instead of the result of the transformation.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe resulting page pixel coordinates. That is of the following form:\r\n\t\t\t//\t\t`{ x: 50, y: 200 }`\r\n\t\t\tvar ah = this._hAxis, av = this._vAxis,\r\n\t\t\t\tsh = ah.getScaler(), sv = av.getScaler(),\r\n\t\t\t\tth = sh.scaler.getTransformerFromModel(sh),\r\n\t\t\t\ttv = sv.scaler.getTransformerFromModel(sv),\r\n\t\t\t\tc = this.chart.getCoords(),\r\n\t\t\t\to = this.chart.offsets, dim = this.chart.dim;\r\n\t\t\tvar t = function(coord){\r\n\t\t\t\tvar r = {};\r\n\t\t\t\tr.x = th(coord[ah.name]) + c.x + o.l;\r\n\t\t\t\tr.y = c.y + dim.height - o.b - tv(coord[av.name]);\r\n\t\t\t\treturn r;\r\n\t\t\t};\r\n\t\t\t// if no coord return the function so that we can capture the current transforms\r\n\t\t\t// and reuse them later on\r\n\t\t\treturn coord?t(coord):t; // Object\r\n\t\t},\r\n\t\ttoData: function(coord){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCompute plot axis data coordinates from page coordinates.\r\n\t\t\t// coord: Object\r\n\t\t\t//\t\tThe pixel coordinate in page coordinate space. That is of the following form:\r\n\t\t\t//\t\t`{ x: 50, y: 200 }`\r\n\t\t\t//\t\tIf not provided return the tranform method instead of the result of the transformation.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe resulting plot axis data coordinates. For cartesian charts that is of the following form:\r\n\t\t\t//\t\t`{ hAxisName: 50, vAxisName: 200 }`\r\n\t\t\tvar ah = this._hAxis, av = this._vAxis,\r\n\t\t\t\tsh = ah.getScaler(), sv = av.getScaler(),\r\n\t\t\t\tth = sh.scaler.getTransformerFromPlot(sh),\r\n\t\t\t\ttv = sv.scaler.getTransformerFromPlot(sv),\r\n\t\t\t\tc = this.chart.getCoords(),\r\n\t\t\t\to = this.chart.offsets, dim = this.chart.dim;\r\n\t\t\tvar t = function(coord){\r\n\t\t\t\tvar r = {};\r\n\t\t\t\tr[ah.name] = th(coord.x - c.x - o.l);\r\n\t\t\t\tr[av.name] = tv(c.y + dim.height - coord.y  - o.b);\r\n\t\t\t\treturn r;\r\n\t\t\t};\r\n\t\t\t// if no coord return the function so that we can capture the current transforms\r\n\t\t\t// and reuse them later on\r\n\t\t\treturn coord?t(coord):t; // Object\r\n\t\t},\r\n\t\tisDirty: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns whether or not this plot needs to be rendered.\r\n\t\t\t// returns: Boolean\r\n\t\t\t//\t\tThe state of the plot.\r\n\t\t\treturn this.dirty || this._hAxis && this._hAxis.dirty || this._vAxis && this._vAxis.dirty;\t//\tBoolean\r\n\t\t},\r\n\t\tcreateLabel: function(group, value, bbox, theme){\r\n\t\t\tif(this.opt.labels){\r\n\t\t\t\tvar x, y, label = this.opt.labelFunc?this.opt.labelFunc.apply(this, [value, this.opt.fixed, this.opt.precision]):\r\n\t\t\t\t\tthis._getLabel(isNaN(value.y)?value:value.y);\r\n\t\t\t\tif(this.opt.labelStyle == \"inside\"){\r\n\t\t\t\t\tvar lbox = gfx._base._getTextBox(label, { font: theme.series.font } );\r\n\t\t\t\t\tx = bbox.x + bbox.width / 2;\r\n\t\t\t\t\ty = bbox.y + bbox.height / 2 + lbox.h / 4;\r\n\t\t\t\t\tif(lbox.w > bbox.width || lbox.h > bbox.height){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}else{\r\n\t\t\t\t\tx = bbox.x + bbox.width / 2;\r\n\t\t\t\t\ty = bbox.y - this.opt.labelOffset;\r\n\t\t\t\t}\r\n\t\t\t\tthis.renderLabel(group, x, y, label, theme, this.opt.labelStyle == \"inside\");\r\n\t\t\t}\r\n\t\t},\r\n\t\tperformZoom: function(dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate/alter any zooming windows on this plot.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object of the form { width, height }.\r\n\t\t\t// offsets: Object\r\n\t\t\t//\t\tAn object of the form { l, r, t, b }.\r\n\t\t\t// returns: dojox/charting/plot2d/CartesianBase\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\r\n\t\t\t// get current zooming various\r\n\t\t\tvar vs = this._vAxis.scale || 1,\r\n\t\t\t\ths = this._hAxis.scale || 1,\r\n\t\t\t\tvOffset = dim.height - offsets.b,\r\n\t\t\t\thBounds = this._hScaler.bounds,\r\n\t\t\t\txOffset = (hBounds.from - hBounds.lower) * hBounds.scale,\r\n\t\t\t\tvBounds = this._vScaler.bounds,\r\n\t\t\t\tyOffset = (vBounds.from - vBounds.lower) * vBounds.scale,\r\n\t\t\t\t// get incremental zooming various\r\n\t\t\t\trVScale = vs / this.lastWindow.vscale,\r\n\t\t\t\trHScale = hs / this.lastWindow.hscale,\r\n\t\t\t\trXOffset = (this.lastWindow.xoffset - xOffset)/\r\n\t\t\t\t\t((this.lastWindow.hscale == 1)? hs : this.lastWindow.hscale),\r\n\t\t\t\trYOffset = (yOffset - this.lastWindow.yoffset)/\r\n\t\t\t\t\t((this.lastWindow.vscale == 1)? vs : this.lastWindow.vscale),\r\n\r\n\t\t\t\tshape = this.getGroup(),\r\n\t\t\t\tanim = fx.animateTransform(lang.delegate({\r\n\t\t\t\t\tshape: shape,\r\n\t\t\t\t\tduration: 1200,\r\n\t\t\t\t\ttransform:[\r\n\t\t\t\t\t\t{name:\"translate\", start:[0, 0], end: [offsets.l * (1 - rHScale), vOffset * (1 - rVScale)]},\r\n\t\t\t\t\t\t{name:\"scale\", start:[1, 1], end: [rHScale, rVScale]},\r\n\t\t\t\t\t\t{name:\"original\"},\r\n\t\t\t\t\t\t{name:\"translate\", start: [0, 0], end: [rXOffset, rYOffset]}\r\n\t\t\t\t\t]}, this.zoom));\r\n\r\n\t\t\tlang.mixin(this.lastWindow, {vscale: vs, hscale: hs, xoffset: xOffset, yoffset: yOffset});\r\n\t\t\t//add anim to zooming action queue,\r\n\t\t\t//in order to avoid several zooming action happened at the same time\r\n\t\t\tthis.zoomQueue.push(anim);\r\n\t\t\t//perform each anim one by one in zoomQueue\r\n\t\t\thub.connect(anim, \"onEnd\", this, function(){\r\n\t\t\t\tthis.zoom = null;\r\n\t\t\t\tthis.zoomQueue.shift();\r\n\t\t\t\tif(this.zoomQueue.length > 0){\r\n\t\t\t\t\tthis.zoomQueue[0].play();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(this.zoomQueue.length == 1){\r\n\t\t\t\tthis.zoomQueue[0].play();\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/CartesianBase\r\n\t\t},\r\n\t\tinitializeScalers: function(dim, stats){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitializes scalers using attached axes.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tSize of a plot area in pixels as {width, height}.\r\n\t\t\t// stats: Object\r\n\t\t\t//\t\tMin/max of data in both directions as {hmin, hmax, vmin, vmax}.\r\n\t\t\t// returns: dojox/charting/plot2d/CartesianBase\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tif(this._hAxis){\r\n\t\t\t\tif(!this._hAxis.initialized()){\r\n\t\t\t\t\tthis._hAxis.calculate(stats.hmin, stats.hmax, dim.width);\r\n\t\t\t\t}\r\n\t\t\t\tthis._hScaler = this._hAxis.getScaler();\r\n\t\t\t}else{\r\n\t\t\t\tthis._hScaler = primitive.buildScaler(stats.hmin, stats.hmax, dim.width);\r\n\t\t\t}\r\n\t\t\tif(this._vAxis){\r\n\t\t\t\tif(!this._vAxis.initialized()){\r\n\t\t\t\t\tthis._vAxis.calculate(stats.vmin, stats.vmax, dim.height);\r\n\t\t\t\t}\r\n\t\t\t\tthis._vScaler = this._vAxis.getScaler();\r\n\t\t\t}else{\r\n\t\t\t\tthis._vScaler = primitive.buildScaler(stats.vmin, stats.vmax, dim.height);\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/CartesianBase\r\n\t\t}\r\n\t});\r\n});\r\n"]}