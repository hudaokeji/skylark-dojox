{"version":3,"sources":["charting/plot2d/Scatter.js"],"names":["define","lang","arr","declare","has","CartesianBase","_PlotEvents","dc","df","dfr","du","fx","gradutils","purgeGroup","lambda","defaultParams","shadows","animate","optionalParams","markerStroke","markerOutline","markerShadow","markerFill","markerFont","markerFontColor","styleFunc","constructor","chart","kwArgs","this","opt","clone","mixin","updateWithObject","updateWithPattern","render","dim","offsets","zoom","isDataDirty","performZoom","s","resetEvents","dirty","isDirty","forEach","series","_eventSeries","cleanGroup","getGroup","forEachRev","item","t","theme","events","i","length","run","data","lpoly","next","ht","_hScaler","scaler","getTransformerFromModel","vt","_vScaler","hidden","dyn","marker","symbol","fill","stroke","group","map","v","x","l","y","height","b","shadowMarkers","Array","frontMarkers","outlineMarkers","c","finalTheme","value","tMixin","push","addMixin","post","path","shadow","createPath","dx","dy","setStroke","setFill","color","_animateScatter","outline","makeStroke","width","_plotFill","type","getColor","labels","markerBox","getBoundingBox","createLabel","getStroke","getFill","eventSeries","o","element","index","shape","cx","cy","_connectEvents","name","skip","_reconnectEvents","_checkOrientation","offset","animateTransform","delegate","duration","transform","start","end","play"],"mappings":"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","file":"../../../charting/plot2d/Scatter.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/array\", \"dojo/_base/declare\", \"dojo/has\", \"./CartesianBase\", \"./_PlotEvents\", \"./common\",\r\n\t\"dojox/lang/functional\", \"dojox/lang/functional/reversed\", \"dojox/lang/utils\", \"dojox/gfx/fx\", \"dojox/gfx/gradutils\"],\r\n\tfunction(lang, arr, declare, has, CartesianBase, _PlotEvents, dc, df, dfr, du, fx, gradutils){\r\n\r\n\tvar purgeGroup = dfr.lambda(\"item.purgeGroup()\");\r\n\r\n\treturn declare(\"dojox.charting.plot2d.Scatter\", [CartesianBase, _PlotEvents], {\r\n\t\t// summary:\r\n\t\t//\t\tA plot object representing a typical scatter chart.\r\n\t\tdefaultParams: {\r\n\t\t\tshadows: null,\t// draw shadows\r\n\t\t\tanimate: null\t// animate chart to place\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\t// theme component\r\n\t\t\tmarkerStroke:\t\t{},\r\n\t\t\tmarkerOutline:\t\t{},\r\n\t\t\tmarkerShadow:\t\t{},\r\n\t\t\tmarkerFill:\t\t\t{},\r\n\t\t\tmarkerFont:\t\t\t\"\",\r\n\t\t\tmarkerFontColor:\t\"\",\r\n\t\t\tstyleFunc:\t\t\tnull\r\n\t\t},\r\n\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the scatter plot.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this plot belongs to.\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__DefaultCtorArgs?\r\n\t\t\t//\t\tAn optional keyword arguments object to help define this plot's parameters.\r\n\t\t\tthis.opt = lang.clone(lang.mixin(this.opt, this.defaultParams));\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t\tthis.animate = this.opt.animate;\r\n\t\t},\r\n\r\n\t\trender: function(dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun the calculations for any axes for this plot.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object in the form of { width, height }\r\n\t\t\t// offsets: Object\r\n\t\t\t//\t\tAn object of the form { l, r, t, b}.\r\n\t\t\t// returns: dojox/charting/plot2d/Scatter\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tif(this.zoom && !this.isDataDirty()){\r\n\t\t\t\treturn this.performZoom(dim, offsets);\r\n\t\t\t}\r\n\t\t\tthis.resetEvents();\r\n\t\t\tthis.dirty = this.isDirty();\r\n\t\t\tvar s;\r\n\t\t\tif(this.dirty){\r\n\t\t\t\tarr.forEach(this.series, purgeGroup);\r\n\t\t\t\tthis._eventSeries = {};\r\n\t\t\t\tthis.cleanGroup();\r\n\t\t\t\ts = this.getGroup();\r\n\t\t\t\tdf.forEachRev(this.series, function(item){ item.cleanGroup(s); });\r\n\t\t\t}\r\n\t\t\tvar t = this.chart.theme, events = this.events();\r\n\t\t\tfor(var i = this.series.length - 1; i >= 0; --i){\r\n\t\t\t\tvar run = this.series[i];\r\n\t\t\t\tif(!this.dirty && !run.dirty){\r\n\t\t\t\t\tt.skip();\r\n\t\t\t\t\tthis._reconnectEvents(run.name);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\trun.cleanGroup();\r\n\t\t\t\tif(!run.data.length){\r\n\t\t\t\t\trun.dirty = false;\r\n\t\t\t\t\tt.skip();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar theme = t.next(\"marker\", [this.opt, run]), lpoly,\r\n\t\t\t\t\tht = this._hScaler.scaler.getTransformerFromModel(this._hScaler),\r\n\t\t\t\t\tvt = this._vScaler.scaler.getTransformerFromModel(this._vScaler);\r\n\t\t\t\tif(run.hidden){\r\n\t\t\t\t\trun.dyn.marker = theme.symbol;\r\n\t\t\t\t\trun.dyn.markerFill = theme.marker.fill;\r\n\t\t\t\t\trun.dyn.markerStroke = theme.marker.stroke;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\ts = run.group;\r\n\t\t\t\tif(typeof run.data[0] == \"number\"){\r\n\t\t\t\t\tlpoly = arr.map(run.data, function(v, i){\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tx: ht(i + 1) + offsets.l,\r\n\t\t\t\t\t\t\ty: dim.height - offsets.b - vt(v)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tlpoly = arr.map(run.data, function(v, i){\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tx: ht(v.x) + offsets.l,\r\n\t\t\t\t\t\t\ty: dim.height - offsets.b - vt(v.y)\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar shadowMarkers  = new Array(lpoly.length),\r\n\t\t\t\t\tfrontMarkers   = new Array(lpoly.length),\r\n\t\t\t\t\toutlineMarkers = new Array(lpoly.length);\r\n\r\n\t\t\t\tarr.forEach(lpoly, function(c, i){\r\n\t\t\t\t\tvar value = run.data[i], finalTheme;\r\n\t\t\t\t\tif(this.opt.styleFunc || typeof value != \"number\"){\r\n\t\t\t\t\t\tvar tMixin = typeof value != \"number\" ? [value] : [];\r\n\t\t\t\t\t\tif(this.opt.styleFunc){\r\n\t\t\t\t\t\t\ttMixin.push(this.opt.styleFunc(value));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfinalTheme = t.addMixin(theme, \"marker\", tMixin, true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tfinalTheme = t.post(theme, \"marker\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar path = \"M\" + c.x + \" \" + c.y + \" \" + finalTheme.symbol;\r\n\t\t\t\t\tif(finalTheme.marker.shadow){\r\n\t\t\t\t\t\tshadowMarkers[i] = s.createPath(\"M\" + (c.x + finalTheme.marker.shadow.dx) + \" \" +\r\n\t\t\t\t\t\t\t(c.y + finalTheme.marker.shadow.dy) + \" \" + finalTheme.symbol).\r\n\t\t\t\t\t\t\tsetStroke(finalTheme.marker.shadow).setFill(finalTheme.marker.shadow.color);\r\n\t\t\t\t\t\tif(this.animate){\r\n\t\t\t\t\t\t\tthis._animateScatter(shadowMarkers[i], dim.height - offsets.b);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(finalTheme.marker.outline){\r\n\t\t\t\t\t\tvar outline = dc.makeStroke(finalTheme.marker.outline);\r\n\t\t\t\t\t\toutline.width = 2 * outline.width + finalTheme.marker.stroke.width;\r\n\t\t\t\t\t\toutlineMarkers[i] = s.createPath(path).setStroke(outline);\r\n\t\t\t\t\t\tif(this.animate){\r\n\t\t\t\t\t\t\tthis._animateScatter(outlineMarkers[i], dim.height - offsets.b);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar stroke = dc.makeStroke(finalTheme.marker.stroke),\r\n\t\t\t\t\t\tfill = this._plotFill(finalTheme.marker.fill, dim, offsets);\r\n\t\t\t\t\tif(fill && (fill.type === \"linear\" || fill.type == \"radial\")){\r\n\t\t\t\t\t\tvar color = gradutils.getColor(fill, {x: c.x, y: c.y});\r\n\t\t\t\t\t\tif(stroke){\r\n\t\t\t\t\t\t\tstroke.color = color;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfrontMarkers[i] = s.createPath(path).setStroke(stroke).setFill(color);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tfrontMarkers[i] = s.createPath(path).setStroke(stroke).setFill(fill);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this.opt.labels){\r\n\t\t\t\t\t\tvar markerBox = frontMarkers[i].getBoundingBox();\r\n\t\t\t\t\t\tthis.createLabel(s, value, markerBox, finalTheme);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this.animate){\r\n\t\t\t\t\t\tthis._animateScatter(frontMarkers[i], dim.height - offsets.b);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t\tif(frontMarkers.length){\r\n\t\t\t\t\trun.dyn.marker = theme.symbol;\r\n\t\t\t\t\trun.dyn.markerStroke = frontMarkers[frontMarkers.length - 1].getStroke();\r\n\t\t\t\t\trun.dyn.markerFill   = frontMarkers[frontMarkers.length - 1].getFill();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(events){\r\n\t\t\t\t\tvar eventSeries = new Array(frontMarkers.length);\r\n\t\t\t\t\tarr.forEach(frontMarkers, function(s, i){\r\n\t\t\t\t\t\tvar o = {\r\n\t\t\t\t\t\t\telement: \"marker\",\r\n\t\t\t\t\t\t\tindex:   i,\r\n\t\t\t\t\t\t\trun:     run,\r\n\t\t\t\t\t\t\tshape:   s,\r\n\t\t\t\t\t\t\toutline: outlineMarkers && outlineMarkers[i] || null,\r\n\t\t\t\t\t\t\tshadow:  shadowMarkers && shadowMarkers[i] || null,\r\n\t\t\t\t\t\t\tcx:      lpoly[i].x,\r\n\t\t\t\t\t\t\tcy:      lpoly[i].y\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tif(typeof run.data[0] == \"number\"){\r\n\t\t\t\t\t\t\to.x = i + 1;\r\n\t\t\t\t\t\t\to.y = run.data[i];\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\to.x = run.data[i].x;\r\n\t\t\t\t\t\t\to.y = run.data[i].y;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis._connectEvents(o);\r\n\t\t\t\t\t\teventSeries[i] = o;\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\tthis._eventSeries[run.name] = eventSeries;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdelete this._eventSeries[run.name];\r\n\t\t\t\t}\r\n\t\t\t\trun.dirty = false;\r\n\t\t\t}\r\n\t\t\tthis.dirty = false;\r\n\t\t\t// chart mirroring starts\r\n\t\t\tif(has(\"dojo-bidi\")){\r\n\t\t\t\tthis._checkOrientation(this.group, dim, offsets);\r\n\t\t\t}\r\n\t\t\t// chart mirroring ends\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Scatter\r\n\t\t},\r\n\t\t_animateScatter: function(shape, offset){\r\n\t\t\tfx.animateTransform(lang.delegate({\r\n\t\t\t\tshape: shape,\r\n\t\t\t\tduration: 1200,\r\n\t\t\t\ttransform: [\r\n\t\t\t\t\t{name: \"translate\", start: [0, offset], end: [0, 0]},\r\n\t\t\t\t\t{name: \"scale\", start: [0, 0], end: [1, 1]},\r\n\t\t\t\t\t{name: \"original\"}\r\n\t\t\t\t]\r\n\t\t\t}, this.animate)).play();\r\n\t\t}\r\n\t});\r\n});\r\n"]}