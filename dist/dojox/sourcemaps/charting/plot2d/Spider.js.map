{"version":3,"sources":["charting/plot2d/Spider.js"],"names":["define","lang","declare","hub","arr","domGeom","baseFx","coreFx","has","Base","PlotEvents","dc","da","g","m","gfxfx","df","du","easing","defaultParams","labels","ticks","fixed","precision","labelOffset","labelStyle","htmlLabels","startAngle","divisions","axisColor","axisWidth","spiderColor","spiderWidth","seriesWidth","seriesFillAlpha","spiderOrigin","markerSize","spiderType","animationType","backOut","animate","axisTickFont","axisTickFontColor","axisFont","axisFontColor","optionalParams","radius","font","fontColor","constructor","chart","kwArgs","this","opt","clone","updateWithObject","updateWithPattern","dyn","datas","labelKey","oldSeriePoints","animations","clear","inherited","arguments","axes","setAxis","axis","undefined","min","name","max","addSeries","run","key","series","push","data","val","vlist","Math","axisKey","length","getSeriesStats","collectSimpleStats","render","dim","offsets","dirty","cleanGroup","s","group","t","theme","resetEvents","shift","labelR","outerPoints","innerPoints","divisionPoints","divisionRadius","labelPoints","i","j","point","len","fontWidth","serieEntry","distance","o","ta","rx","width","l","r","ry","height","b","majorTick","tick","titleFont","titleFontColor","stroke","asize","normalizedLength","splitFontString","size","start","_degToRad","ro","dv","ms","spt","at","lboffset","map","foldl1","label","_base","_getTextBox","w","circle","cx","cy","_getObjectLength","_buildPoints","skip","axisGroup","createGroup","axisStroke","color","spiderStroke","st","x","y","nd","createLine","x1","y1","x2","y2","setStroke","_drawArrow","labelGroup","renderer","elem","createText","isBodyLtr","htmlElements","spiderGroup","createPolyline","createCircle","textGroup","k","end","PI","text","_getCoordinate","_getLabel","seriesShapes","next","f","normalizeColor","fill","sk","a","hidden","seriePoints","tipData","entry","sname","polygonBoundRect","_getBoundary","ts","osps","cs","_createSeriesEntry","po","element","index","id","plot","shape","poly","parent","brect","cr","_connectEvents","so","forEach","circles","c","co","tdata","sps","initpoints","spoly","setFill","scircle","anims","np","sp","anim","Animation","delegate","duration","curve","spl","sc","connect","pshape","getShape","points","setShape","cshape","anims1","combine","concat","play","plotEvent","type","moveToFront","tooltipFunc","xmax","xmin","ymax","ymin","sqrt","pow","sin","cos","point2","point3","count","angle","recursive","isRightToLeft","obj","isObject","number","getLabel"],"mappings":"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","file":"../../../charting/plot2d/Spider.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/connect\", \"dojo/_base/array\",\r\n\t\"dojo/dom-geometry\", \"dojo/_base/fx\", \"dojo/fx\", \"dojo/sniff\",\r\n\t\"./Base\", \"./_PlotEvents\", \"./common\", \"../axis2d/common\",\r\n\t\"dojox/gfx\", \"dojox/gfx/matrix\", \"dojox/gfx/fx\", \"dojox/lang/functional\",\r\n\t\"dojox/lang/utils\", \"dojo/fx/easing\"],\r\n\tfunction(lang, declare, hub, arr, domGeom, baseFx, coreFx, has,\r\n\t\t\tBase, PlotEvents, dc, da, g, m, gfxfx, df, du, easing){\r\n\r\n\tvar FUDGE_FACTOR = 0.2; // use to overlap fans\r\n\r\n\tvar Spider = declare(\"dojox.charting.plot2d.Spider\", [Base, PlotEvents], {\r\n\t\t// summary:\r\n\t\t//\t\tThe plot that represents a typical Spider chart.\r\n\t\tdefaultParams: {\r\n\t\t\tlabels:\t\t\ttrue,\r\n\t\t\tticks:\t\t\tfalse,\r\n\t\t\tfixed:\t\t\ttrue,\r\n\t\t\tprecision:\t\t1,\r\n\t\t\tlabelOffset:\t-10,\r\n\t\t\tlabelStyle:\t\t\"default\",\t// default/rows/auto\r\n\t\t\thtmlLabels:\t\ttrue,\t\t// use HTML to draw labels\r\n\t\t\tstartAngle:\t\t-90,\t\t// start angle for slices in degrees\r\n\t\t\tdivisions:\t\t 3,\t\t\t// radius tick count\r\n\t\t\taxisColor:\t\t \"\",\t\t// spider axis color\r\n\t\t\taxisWidth:\t\t 0,\t\t\t// spider axis stroke width\r\n\t\t\tspiderColor:\t \"\",\t\t// spider web color\r\n\t\t\tspiderWidth:\t 0,\t\t\t// spider web stroke width\r\n\t\t\tseriesWidth:\t 0,\t\t\t// plot border with\r\n\t\t\tseriesFillAlpha: 0.2,\t\t// plot fill alpha\r\n\t\t\tspiderOrigin:\t 0.16,\r\n\t\t\tmarkerSize:\t\t 3,\t\t\t// radius of plot vertex (px)\r\n\t\t\tspiderType:\t\t \"polygon\", //\"circle\"\r\n\t\t\tanimationType:\t easing.backOut,\r\n\t\t\tanimate: null,\r\n\t\t\taxisTickFont:\t\t\"\",\r\n\t\t\taxisTickFontColor:\t\"\",\r\n\t\t\taxisFont:\t\t\t\"\",\r\n\t\t\taxisFontColor:\t\t\"\"\r\n\t\t},\r\n\t\toptionalParams: {\r\n\t\t\tradius:\t\t0,\r\n\t\t\tfont:\t\t\"\",\r\n\t\t\tfontColor:\t\"\"\r\n\t\t},\r\n\r\n\t\tconstructor: function(chart, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a Spider plot.\r\n\t\t\t// chart: dojox/charting/Chart\r\n\t\t\t//\t\tThe chart this plot belongs to.\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__DefaultCtorArgs?\r\n\t\t\t//\t\tAn optional keyword arguments object to help define this plot's parameters.\r\n\t\t\tthis.opt = lang.clone(this.defaultParams);\r\n\t\t\tdu.updateWithObject(this.opt, kwArgs);\r\n\t\t\tdu.updateWithPattern(this.opt, kwArgs, this.optionalParams);\r\n\t\t\tthis.dyn = [];\r\n\t\t\tthis.datas = {};\r\n\t\t\tthis.labelKey = [];\r\n\t\t\tthis.oldSeriePoints = {};\r\n\t\t\tthis.animate = this.opt.animate === null ? {} : this.opt.animate;\r\n\t\t\tthis.animations = {};\r\n\t\t},\r\n\t\tclear: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClear out all of the information tied to this plot.\r\n\t\t\t// returns: dojox/charting/plot2d/Spider\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.dyn = [];\r\n\t\t\tthis.axes = [];\r\n\t\t\tthis.datas = {};\r\n\t\t\tthis.labelKey = [];\r\n\t\t\tthis.oldSeriePoints = {};\r\n\t\t\tthis.animations = {};\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Spider\r\n\t\t},\r\n\t\tsetAxis: function(axis){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOptionally set axis min and max property.\r\n\t\t\t// returns: dojox/charting/plot2d/Spider\r\n\t\t\t//\t\tThe reference to this plot for functional chaining.\r\n\r\n\t\t\t// override the computed min/max with provided values if any\r\n\t\t\tif(axis){\r\n\t\t\t\tif(axis.opt.min != undefined){\r\n\t\t\t\t\tthis.datas[axis.name].min = axis.opt.min;\r\n\t\t\t\t}\r\n\t\t\t\tif(axis.opt.max != undefined){\r\n\t\t\t\t\tthis.datas[axis.name].max = axis.opt.max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Spider\r\n\t\t},\r\n\t\taddSeries: function(run){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a data series to this plot.\r\n\t\t\t// run: dojox.charting.Series\r\n\t\t\t//\t\tThe series to be added.\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tthis.series.push(run);\r\n\t\t\tvar key;\r\n\t\t\tfor(key in run.data){\r\n\t\t\t\tvar val = run.data[key],\r\n\t\t\t\t\tdata = this.datas[key];\r\n\t\t\t\tif(data){\r\n\t\t\t\t\tdata.vlist.push(val);\r\n\t\t\t\t\tdata.min = Math.min(data.min, val);\r\n\t\t\t\t\tdata.max = Math.max(data.max, val);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar axisKey = \"__\"+key;\r\n\t\t\t\t\tthis.axes.push(axisKey);\r\n\t\t\t\t\tthis[axisKey] = key;\r\n\t\t\t\t\tthis.datas[key] = {min: val, max: val, vlist: [val]};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.labelKey.length <= 0){\r\n\t\t\t\tfor(key in run.data){\r\n\t\t\t\t\tthis.labelKey.push(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox.charting.plot2d.Base\r\n\t\t},\r\n\t\tgetSeriesStats: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the min/max on all attached series in both directions.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\t{hmin, hmax, vmin, vmax} min/max in both directions.\r\n\t\t\treturn dc.collectSimpleStats(this.series); // Object\r\n\t\t},\r\n\t\trender: function(dim, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender the plot on the chart.\r\n\t\t\t// dim: Object\r\n\t\t\t//\t\tAn object of the form { width, height }.\r\n\t\t\t// offsets: Object\r\n\t\t\t//\t\tAn object of the form { l, r, t, b }.\r\n\t\t\t// returns: dojox/charting/plot2d/Spider\r\n\t\t\t//\t\tA reference to this plot for functional chaining.\r\n\t\t\tif(!this.dirty){ return this; }\r\n\t\t\tthis.dirty = false;\r\n\t\t\tthis.cleanGroup();\r\n\t\t\tvar s = this.group, t = this.chart.theme;\r\n\t\t\tthis.resetEvents();\r\n\r\n\t\t\tif(!this.series || !this.series.length){\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\r\n\t\t\t// calculate the geometry\r\n\t\t\tvar o = this.opt, ta = t.axis,\r\n\t\t\t\trx = (dim.width\t - offsets.l - offsets.r) / 2,\r\n\t\t\t\try = (dim.height - offsets.t - offsets.b) / 2,\r\n\t\t\t\tr  = Math.min(rx, ry),\r\n\t\t\t\taxisTickFont = o.font || (ta.majorTick && ta.majorTick.font) || (ta.tick && ta.tick.font) || \"normal normal normal 7pt Tahoma\",\r\n\t\t\t\taxisFont = o.axisFont || (ta.tick && ta.tick.titleFont) || \"normal normal normal 11pt Tahoma\",\r\n\t\t\t\taxisTickFontColor = o.axisTickFontColor || (ta.majorTick && ta.majorTick.fontColor) || (ta.tick && ta.tick.fontColor) || \"silver\",\r\n\t\t\t\taxisFontColor = o.axisFontColor || (ta.tick && ta.tick.titleFontColor) || \"black\",\r\n\t\t\t\taxisColor = o.axisColor || (ta.tick && ta.tick.axisColor) || \"silver\",\r\n\t\t\t\tspiderColor = o.spiderColor || (ta.tick && ta.tick.spiderColor) || \"silver\",\r\n\t\t\t\taxisWidth = o.axisWidth || (ta.stroke && ta.stroke.width) || 2,\r\n\t\t\t\tspiderWidth = o.spiderWidth || (ta.stroke && ta.stroke.width) || 2,\r\n\t\t\t\tseriesWidth = o.seriesWidth || (ta.stroke && ta.stroke.width) || 2,\r\n\t\t\t\tasize = g.normalizedLength(g.splitFontString(axisFont).size),\r\n\t\t\t\tstartAngle = m._degToRad(o.startAngle),\r\n\t\t\t\tstart = startAngle, labels, shift, labelR,\r\n\t\t\t\touterPoints, innerPoints, divisionPoints, divisionRadius, labelPoints,\r\n\t\t\t\tro = o.spiderOrigin, dv = o.divisions >= 3 ? o.divisions : 3, ms = o.markerSize,\r\n\t\t\t\tspt = o.spiderType, at = o.animationType, lboffset = o.labelOffset < -10 ? o.labelOffset : -10,\r\n\t\t\t\taxisExtra = 0.2,\r\n\t\t\t\ti, j, point, len, fontWidth, render, serieEntry, run, data, min, max, distance;\r\n\t\t\t\r\n\t\t\tif(o.labels){\r\n\t\t\t\tlabels = arr.map(this.series, function(s){\r\n\t\t\t\t\treturn s.name;\r\n\t\t\t\t}, this);\r\n\t\t\t\tshift = df.foldl1(df.map(labels, function(label){\r\n\t\t\t\t\tvar font = t.series.font;\r\n\t\t\t\t\treturn g._base._getTextBox(label, {\r\n\t\t\t\t\t\tfont: font\r\n\t\t\t\t\t}).w;\r\n\t\t\t\t}, this), \"Math.max(a, b)\") / 2;\r\n\t\t\t\tr = Math.min(rx - 2 * shift, ry - asize) + lboffset;\r\n\t\t\t\tlabelR = r - lboffset;\r\n\t\t\t}\r\n\t\t\tif(\"radius\" in o){\r\n\t\t\t\tr = o.radius;\r\n\t\t\t\tlabelR = r - lboffset;\r\n\t\t\t}\r\n\t\t\tr /= (1+axisExtra);\r\n\t\t\tvar circle = {\r\n\t\t\t\tcx: offsets.l + rx,\r\n\t\t\t\tcy: offsets.t + ry,\r\n\t\t\t\tr: r\r\n\t\t\t};\r\n\r\n\t\t\tfor (i = this.series.length - 1; i >= 0; i--){\r\n\t\t\t\tserieEntry = this.series[i];\r\n\t\t\t\tif(!this.dirty && !serieEntry.dirty){\r\n\t\t\t\t\tt.skip();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tserieEntry.cleanGroup();\r\n\t\t\t\trun = serieEntry.data;\r\n\t\t\t\tif(run !== null){\r\n\t\t\t\t\tlen = this._getObjectLength(run);\r\n\t\t\t\t\t//construct connect points\r\n\t\t\t\t\tif(!outerPoints || outerPoints.length <= 0){\r\n\t\t\t\t\t\touterPoints = [], innerPoints = [], labelPoints = [];\r\n\t\t\t\t\t\tthis._buildPoints(outerPoints, len, circle, r, start, true, dim);\r\n\t\t\t\t\t\tthis._buildPoints(innerPoints, len, circle, r*ro, start, true, dim);\r\n\t\t\t\t\t\tthis._buildPoints(labelPoints, len, circle, labelR, start, false, dim);\r\n\t\t\t\t\t\tif(dv > 2){\r\n\t\t\t\t\t\t\tdivisionPoints = [], divisionRadius = [];\r\n\t\t\t\t\t\t\tfor (j = 0; j < dv - 2; j++){\r\n\t\t\t\t\t\t\t\tdivisionPoints[j] = [];\r\n\t\t\t\t\t\t\t\tthis._buildPoints(divisionPoints[j], len, circle, r*(ro + (1-ro)*(j+1)/(dv-1)), start, true, dim);\r\n\t\t\t\t\t\t\t\tdivisionRadius[j] = r*(ro + (1-ro)*(j+1)/(dv-1));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//draw Spider\r\n\t\t\t//axis\r\n\t\t\tvar axisGroup = s.createGroup(), axisStroke = {color: axisColor, width: axisWidth},\r\n\t\t\t\tspiderStroke = {color: spiderColor, width: spiderWidth};\r\n\t\t\tfor (j = outerPoints.length - 1; j >= 0; --j){\r\n\t\t\t\tpoint = outerPoints[j];\r\n\t\t\t\tvar st = {\r\n\t\t\t\t\t\tx: point.x + (point.x - circle.cx) * axisExtra,\r\n\t\t\t\t\t\ty: point.y + (point.y - circle.cy) * axisExtra\r\n\t\t\t\t\t},\r\n\t\t\t\t\tnd = {\r\n\t\t\t\t\t\tx: point.x + (point.x - circle.cx) * axisExtra / 2,\r\n\t\t\t\t\t\ty: point.y + (point.y - circle.cy) * axisExtra / 2\r\n\t\t\t\t\t};\r\n\t\t\t\taxisGroup.createLine({\r\n\t\t\t\t\tx1: circle.cx,\r\n\t\t\t\t\ty1: circle.cy,\r\n\t\t\t\t\tx2: st.x,\r\n\t\t\t\t\ty2: st.y\r\n\t\t\t\t}).setStroke(axisStroke);\r\n\t\t\t\t//arrow\r\n\t\t\t\tthis._drawArrow(axisGroup, st, nd, axisStroke);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// draw the label\r\n\t\t\tvar labelGroup = s.createGroup();\r\n\t\t\tfor (j = labelPoints.length - 1; j >= 0; --j){\r\n\t\t\t\tpoint = labelPoints[j];\r\n\t\t\t\tfontWidth = g._base._getTextBox(this.labelKey[j], {font: axisFont}).w || 0;\r\n\t\t\t\trender = this.opt.htmlLabels && g.renderer != \"vml\" ? \"html\" : \"gfx\";\r\n\t\t\t\tvar elem = da.createText[render](this.chart, labelGroup, (!domGeom.isBodyLtr() && render == \"html\") ? (point.x + fontWidth - dim.width) : point.x, point.y,\r\n\t\t\t\t\t\t\t\"middle\", this.labelKey[j], axisFont, axisFontColor);\r\n\t\t\t\tif(this.opt.htmlLabels){\r\n\t\t\t\t\tthis.htmlElements.push(elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//spider web: polygon or circle\r\n\t\t\tvar spiderGroup = s.createGroup();\r\n\t\t\tif(spt == \"polygon\"){\r\n\t\t\t\tspiderGroup.createPolyline(outerPoints).setStroke(spiderStroke);\r\n\t\t\t\tspiderGroup.createPolyline(innerPoints).setStroke(spiderStroke);\r\n\t\t\t\tif(divisionPoints.length > 0){\r\n\t\t\t\t\tfor (j = divisionPoints.length - 1; j >= 0; --j){\r\n\t\t\t\t\t\tspiderGroup.createPolyline(divisionPoints[j]).setStroke(spiderStroke);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{//circle\r\n\t\t\t\tspiderGroup.createCircle({cx: circle.cx, cy: circle.cy, r: r}).setStroke(spiderStroke);\r\n\t\t\t\tspiderGroup.createCircle({cx: circle.cx, cy: circle.cy, r: r*ro}).setStroke(spiderStroke);\r\n\t\t\t\tif(divisionRadius.length > 0){\r\n\t\t\t\t\tfor (j = divisionRadius.length - 1; j >= 0; --j){\r\n\t\t\t\t\t\tspiderGroup.createCircle({cx: circle.cx, cy: circle.cy, r: divisionRadius[j]}).setStroke(spiderStroke);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//text\r\n\t\t\tlen = this._getObjectLength(this.datas);\r\n\t\t\tvar textGroup = s.createGroup(), k = 0;\r\n\t\t\tfor(var key in this.datas){\r\n\t\t\t\tdata = this.datas[key];\r\n\t\t\t\tmin = data.min;\r\n\t\t\t\tmax = data.max;\r\n\t\t\t\tdistance = max - min;\r\n\t\t\t\t\tend = start + 2 * Math.PI * k / len;\r\n\t\t\t\tfor (i = 0; i < dv; i++){\r\n\t\t\t\t\tvar text = min + distance*i/(dv-1);\r\n\t\t\t\t\tpoint = this._getCoordinate(circle, r*(ro + (1-ro)*i/(dv-1)), end, dim);\r\n\t\t\t\t\ttext = this._getLabel(text);\r\n\t\t\t\t\tfontWidth = g._base._getTextBox(text, {font: axisTickFont}).w || 0;\r\n\t\t\t\t\t\trender = this.opt.htmlLabels && g.renderer != \"vml\" ? \"html\" : \"gfx\";\r\n\t\t\t\t\tif(this.opt.htmlLabels){\r\n\t\t\t\t\t\tthis.htmlElements.push(da.createText[render]\r\n\t\t\t\t\t\t\t(this.chart, textGroup, (!domGeom.isBodyLtr() && render == \"html\") ? (point.x + fontWidth - dim.width) : point.x, point.y,\r\n\t\t\t\t\t\t\t\t\"start\", text, axisTickFont, axisTickFontColor));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tk++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//draw series (animation)\r\n\t\t\tthis.chart.seriesShapes = {};\r\n\t\t\tfor (i = this.series.length - 1; i >= 0; i--){\r\n\t\t\t\tserieEntry = this.series[i];\r\n\t\t\t\trun = serieEntry.data;\r\n\t\t\t\tif(run !== null){\r\n\t\t\t\t\tvar theme = t.next(\"spider\", [o, serieEntry]),\r\n\t\t\t\t\t\tf = g.normalizeColor(theme.series.fill), \r\n\t\t\t\t\t\tsk = {color: theme.series.fill, width: seriesWidth};\r\n\t\t\t\t\tf.a = o.seriesFillAlpha;\r\n\t\t\t\t\tserieEntry.dyn = {fill: f, stroke: sk};\r\n\t\t\t\t\tif(serieEntry.hidden){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//series polygon\r\n\t\t\t\t\tvar seriePoints = [], tipData = [];\r\n\t\t\t\t\tk = 0;\r\n\t\t\t\t\tfor(key in run){\r\n\t\t\t\t\t\tdata = this.datas[key];\r\n\t\t\t\t\t\tmin = data.min;\r\n\t\t\t\t\t\tmax = data.max;\r\n\t\t\t\t\t\tdistance = max - min;\r\n\t\t\t\t\t\tvar entry = run[key], end = start + 2 * Math.PI * k / len;\r\n\t\t\t\t\t\t\tpoint = this._getCoordinate(circle, r*(ro + (1-ro)*(entry-min)/distance), end, dim);\r\n\t\t\t\t\t\tseriePoints.push(point);\r\n\t\t\t\t\t\ttipData.push({sname: serieEntry.name, key: key, data: entry});\r\n\t\t\t\t\t\tk++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseriePoints[seriePoints.length] = seriePoints[0];\r\n\t\t\t\t\ttipData[tipData.length] = tipData[0];\r\n\t\t\t\t\tvar polygonBoundRect = this._getBoundary(seriePoints),\r\n\t\t\t\t\t\tts = serieEntry.group;\r\n\t\t\t         \r\n\t\t\t\t\t\r\n\t\t\t\t\tvar osps = this.oldSeriePoints[serieEntry.name];\r\n\t\t\t\t\tvar cs = this._createSeriesEntry(ts, (osps || innerPoints), seriePoints, f, sk, r, ro, ms, at);\r\n\t\t\t\t\tthis.chart.seriesShapes[serieEntry.name] = cs;\r\n\t\t\t\t\tthis.oldSeriePoints[serieEntry.name] = seriePoints;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar po = {\r\n\t\t\t\t\t\telement: \"spider_poly\",\r\n\t\t\t\t\t\tindex:\t i,\r\n\t\t\t\t\t\tid:\t\t \"spider_poly_\"+serieEntry.name,\r\n\t\t\t\t\t\trun:\t serieEntry,\r\n\t\t\t\t\t\tplot:\t this,\r\n\t\t\t\t\t\tshape:\t cs.poly,\r\n\t\t\t\t\t\tparent:\t ts,\r\n\t\t\t\t\t\tbrect:\t polygonBoundRect,\r\n\t\t\t\t\t\tcx:\t\t circle.cx,\r\n\t\t\t\t\t\tcy:\t\t circle.cy,\r\n\t\t\t\t\t\tcr:\t\t r,\r\n\t\t\t\t\t\tf:\t\t f,\r\n\t\t\t\t\t\ts:\t\t s\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis._connectEvents(po);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar so = {\r\n\t\t\t\t\t\telement: \"spider_plot\",\r\n\t\t\t\t\t\tindex:\t i,\r\n\t\t\t\t\t\tid:\t\t \"spider_plot_\"+serieEntry.name,\r\n\t\t\t\t\t\trun:\t serieEntry,\r\n\t\t\t\t\t\tplot:\t this,\r\n\t\t\t\t\t\tshape:\t serieEntry.group\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis._connectEvents(so);\r\n\t\t\t\t\t\r\n\t\t\t\t\tarr.forEach(cs.circles, function(c, i){\r\n\t\t\t\t\t\tvar co = {\r\n\t\t\t\t\t\t\t\telement: \"spider_circle\",\r\n\t\t\t\t\t\t\t\tindex:\t i,\r\n\t\t\t\t\t\t\t\tid:\t\t \"spider_circle_\"+serieEntry.name+i,\r\n\t\t\t\t\t\t\t\trun:\t serieEntry,\r\n\t\t\t\t\t\t\t\tplot:\t this,\r\n\t\t\t\t\t\t\t\tshape:\t c,\r\n\t\t\t\t\t\t\t\tparent:\t ts,\r\n\t\t\t\t\t\t\t\ttdata:\t tipData[i],\r\n\t\t\t\t\t\t\t\tcx:\t\t seriePoints[i].x,\r\n\t\t\t\t\t\t\t\tcy:\t\t seriePoints[i].y,\r\n\t\t\t\t\t\t\t\tf:\t\t f,\r\n\t\t\t\t\t\t\t\ts:\t\t s\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis._connectEvents(co);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/plot2d/Spider\r\n\t\t},\r\n\t\t_createSeriesEntry: function(ts, osps, sps, f, sk, r, ro, ms, at){\r\n\t\t\t//polygon\r\n\t\t\tvar initpoints = this.animate?osps:sps;\r\n\t\t\tvar spoly = ts.createPolyline(initpoints).setFill(f).setStroke(sk), scircle = [];\r\n\t\t\tfor (var j = 0; j < initpoints.length; j++){\r\n\t\t\t\tvar point = initpoints[j], cr = ms;\r\n\t\t\t\tvar circle = ts.createCircle({cx: point.x, cy: point.y, r: cr}).setFill(f).setStroke(sk);\r\n\t\t\t\tscircle.push(circle);\r\n\t\t\t}\r\n\t\t\tif(this.animate) {\r\n\t\t\t\tvar anims = arr.map(sps, function (np, j) {\r\n\t\t\t\t\t// create animation\r\n\t\t\t\t\tvar sp = osps[j],\r\n\t\t\t\t\t\tanim = new baseFx.Animation(lang.delegate({\r\n\t\t\t\t\t\t\tduration: 1000,\r\n\t\t\t\t\t\t\teasing: at,\r\n\t\t\t\t\t\t\tcurve: [sp.y, np.y]\r\n\t\t\t\t\t\t}, this.animate));\r\n\t\t\t\t\tvar spl = spoly, sc = scircle[j];\r\n\t\t\t\t\thub.connect(anim, \"onAnimate\", function (y) {\r\n\t\t\t\t\t\t//apply poly\r\n\t\t\t\t\t\tvar pshape = spl.getShape();\r\n\t\t\t\t\t\tpshape.points[j].y = y;\r\n\t\t\t\t\t\tspl.setShape(pshape);\r\n\t\t\t\t\t\t//apply circle\r\n\t\t\t\t\t\tvar cshape = sc.getShape();\r\n\t\t\t\t\t\tcshape.cy = y;\r\n\t\t\t\t\t\tsc.setShape(cshape);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn anim;\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tvar anims1 = arr.map(sps, function (np, j) {\r\n\t\t\t\t\t// create animation\r\n\t\t\t\t\tvar sp = osps[j],\r\n\t\t\t\t\t\tanim = new baseFx.Animation(lang.delegate({\r\n\t\t\t\t\t\t\tduration: 1000,\r\n\t\t\t\t\t\t\teasing: at,\r\n\t\t\t\t\t\t\tcurve: [sp.x, np.x]\r\n\t\t\t\t\t\t}, this.animate));\r\n\t\t\t\t\tvar spl = spoly, sc = scircle[j];\r\n\t\t\t\t\thub.connect(anim, \"onAnimate\", function (x) {\r\n\t\t\t\t\t\t//apply poly\r\n\t\t\t\t\t\tvar pshape = spl.getShape();\r\n\t\t\t\t\t\tpshape.points[j].x = x;\r\n\t\t\t\t\t\tspl.setShape(pshape);\r\n\t\t\t\t\t\t//apply circle\r\n\t\t\t\t\t\tvar cshape = sc.getShape();\r\n\t\t\t\t\t\tcshape.cx = x;\r\n\t\t\t\t\t\tsc.setShape(cshape);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn anim;\r\n\t\t\t\t}, this);\r\n\t\t\t\tvar masterAnimation = coreFx.combine(anims.concat(anims1)); //dojo.fx.chain(anims);\r\n\t\t\t\tmasterAnimation.play();\r\n\t\t\t}\r\n\t\t\treturn {group :ts, poly: spoly, circles: scircle};\r\n\t\t},\r\n\t\tplotEvent: function(o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStub function for use by specific plots.\r\n\t\t\t// o: Object\r\n\t\t\t//\t\tAn object intended to represent event parameters.\r\n\t\t\tif(o.element == \"spider_plot\"){\r\n\t\t\t\t//dojo gfx function \"moveToFront\" not work in IE\r\n\t\t\t\tif(o.type == \"onmouseover\" && !has(\"ie\")){\r\n\t\t\t\t\to.shape.moveToFront();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttooltipFunc: function(o){\r\n\t\t\tif(o.element == \"spider_circle\"){\r\n\t\t\t\treturn o.tdata.sname + \"<br/>\" + o.tdata.key + \"<br/>\" + o.tdata.data;\r\n\t\t\t}else{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getBoundary: function(points){\r\n\t\t\tvar xmax = points[0].x,\r\n\t\t\t\txmin = points[0].x,\r\n\t\t\t\tymax = points[0].y,\r\n\t\t\t\tymin = points[0].y;\r\n\t\t\tfor(var i = 0; i < points.length; i++){\r\n\t\t\t\tvar point = points[i];\r\n\t\t\t\txmax = Math.max(point.x, xmax);\r\n\t\t\t\tymax = Math.max(point.y, ymax);\r\n\t\t\t\txmin = Math.min(point.x, xmin);\r\n\t\t\t\tymin = Math.min(point.y, ymin);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tx: xmin,\r\n\t\t\t\ty: ymin,\r\n\t\t\t\twidth: xmax - xmin,\r\n\t\t\t\theight: ymax - ymin\r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\t_drawArrow: function(s, start, end, stroke){\r\n\t\t\tvar len = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2)),\r\n\t\t\t\tsin = (end.y - start.y)/len, cos = (end.x - start.x)/len,\r\n\t\t\t\tpoint2 = {x: end.x + (len/3)*(-sin), y: end.y + (len/3)*cos},\r\n\t\t\t\tpoint3 = {x: end.x + (len/3)*sin, y: end.y + (len/3)*(-cos)};\r\n\t\t\ts.createPolyline([start, point2, point3]).setFill(stroke.color).setStroke(stroke);\r\n\t\t},\r\n\t\t\r\n\t\t_buildPoints: function(points, count, circle, radius, angle, recursive, dim){\r\n\t\t\tfor(var i = 0; i < count; i++){\r\n\t\t\t\tvar end = angle + 2 * Math.PI * i / count;\r\n\t\t\t\tpoints.push(this._getCoordinate(circle, radius, end, dim));\r\n\t\t\t}\r\n\t\t\tif(recursive){\r\n\t\t\t\tpoints.push(this._getCoordinate(circle, radius, angle + 2 * Math.PI, dim));\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_getCoordinate: function(circle, radius, angle, dim){\r\n\t\t\tvar x = circle.cx + radius * Math.cos(angle);\r\n\t\t\tif(has(\"dojo-bidi\") && this.chart.isRightToLeft() && dim){\r\n\t\t\t\tx = dim.width - x;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tx: x,\r\n\t\t\t\ty: circle.cy + radius * Math.sin(angle)\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_getObjectLength: function(obj){\r\n\t\t\tvar count = 0;\r\n\t\t\tif(lang.isObject(obj)){\r\n\t\t\t\tfor(var key in obj){\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn count;\r\n\t\t},\r\n\r\n\t\t// utilities\r\n\t\t_getLabel: function(number){\r\n\t\t\treturn dc.getLabel(number, this.opt.fixed, this.opt.precision);\r\n\t\t}\r\n\t});\r\n\r\n\treturn Spider; // dojox/plot2d/Spider\r\n});\r\n"]}