{"version":3,"sources":["charting/Chart.js"],"names":["define","dojox","lang","arr","declare","domStyle","dom","domGeom","domConstruct","Color","has","Element","SimpleTheme","Series","common","shape","g","BidiChart","func","dc","getObject","clear","lambda","purge","destroy","makeClean","makeDirty","getName","Chart","constructor","node","kwArgs","this","margins","l","t","r","b","stroke","fill","delayInMs","title","titleGap","titlePos","titleFont","titleFontColor","chartTitle","htmlLabels","theme","axes","stack","plots","series","runs","dirty","byId","box","getMarginBox","surface","createSurface","w","h","declaredClass","indexOf","_nativeClip","forEach","forIn","tagName","getCoords","s","getComputedStyle","coords","abs","position","x","y","setTheme","clone","addAxis","name","axis","axisType","type","axis2d","Error","getAxis","removeAxis","addPlot","plot","plotType","plot2d","length","push","getPlot","removePlot","index","splice","idx","ns","filter","run","getPlotOrder","map","setPlotOrder","newOrder","names","order","newStack","i","movePlotToFront","unshift","movePlotToBack","addSeries","data","ymin","min","ymax","max","getSeries","removeSeries","updateSeries","offsets","update","_invalidateDependentPlots","getSeriesOrder","plotName","setSeriesOrder","newSeries","concat","moveSeriesToFront","moveSeriesToBack","resize","width","height","arguments","setMarginBox","d","getDimensions","setDimensions","render","getGeometry","ret","initialized","vertical","scaler","ticks","setAxisWindow","scale","offset","zoom","setWindow","hAxis","vAxis","sx","sy","dx","dy","calculateGeometry","bounds","getScaler","span","upper","lower","zoomIn","range","delayed","Math","delayedRender","fullGeometry","calculateAxes","plotArea","_makeDirty","Default","assignAxes","dim","normalizedLength","self","_resetLeftBottom","getOffsets","o","chart","tsize","splitFontString","size","_delayedRenderHandle","clearTimeout","fullRender","forEachRev","_makeClean","children","dispose","_renderChartBackground","_renderPlotBackground","foldr","z","labelType","renderer","createText","rect","undefined","get","a","document","documentElement","parentNode","prototype","_shapeFill","_plotFill","createRect","setFill","setStroke","plotarea","setTimeout","hitch","connectToPlot","object","method","connect","fireEvent","seriesName","eventName","verticalAxis","axisName","dependOnData","p","setDir","dir","formatTruncatedLabel","element","label","combineStats","target","source","stats","getSeriesStats","hmin","hmax","hSection","vmin","vmax","vSection","hReplace","v","vReplace","initializeScalers"],"mappings":"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","file":"../../charting/Chart.js","sourcesContent":["define([\"../main\", \"dojo/_base/lang\", \"dojo/_base/array\",\"dojo/_base/declare\", \"dojo/dom-style\",\r\n\t\"dojo/dom\", \"dojo/dom-geometry\", \"dojo/dom-construct\",\"dojo/_base/Color\", \"dojo/sniff\",\r\n\t\"./Element\", \"./SimpleTheme\", \"./Series\", \"./axis2d/common\", \"dojox/gfx/shape\",\r\n\t\"dojox/gfx\", \"dojo/has!dojo-bidi?./bidi/Chart\", \"dojox/lang/functional\", \"dojox/lang/functional/fold\", \"dojox/lang/functional/reversed\"],\r\n\tfunction(dojox, lang, arr, declare, domStyle,\r\n\t \t\t dom, domGeom, domConstruct, Color, has,\r\n\t \t\t Element, SimpleTheme, Series, common, shape,\r\n\t \t\t g, BidiChart, func){\r\n\t/*=====\r\n\tvar __ChartCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tThe keyword arguments that can be passed in a Chart constructor.\r\n\t\t// margins: Object?\r\n\t\t//\t\tOptional margins for the chart, in the form of { l, t, r, b}.\r\n\t\t// stroke: dojox.gfx.Stroke?\r\n\t\t//\t\tAn optional outline/stroke for the chart.\r\n\t\t// fill: dojox.gfx.Fill?\r\n\t\t//\t\tAn optional fill for the chart.\r\n\t\t// delayInMs: Number\r\n\t\t//\t\tDelay in ms for delayedRender(). Default: 200.\r\n\t};\r\n\t=====*/\r\n\r\n\t/*=====\r\n\tvar __SeriesCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tAn optional arguments object that can be used in the Series constructor.\r\n\t\t// plot: String?\r\n\t\t//\t\tThe plot (by name) that this series belongs to.\r\n\t};\r\n\t=====*/\r\n\r\n\t/*=====\r\n\tvar __BaseAxisCtorArgs = {\r\n\t\t// summary:\r\n\t\t//\t\tOptional arguments used in the definition of an invisible axis.\r\n\t\t// vertical: Boolean?\r\n\t\t//\t\tA flag that says whether an axis is vertical (i.e. y axis) or horizontal. Default is false (horizontal).\r\n\t\t// min: Number?\r\n\t\t//\t\tThe smallest value on an axis. Default is 0.\r\n\t\t// max: Number?\r\n\t\t//\t\tThe largest value on an axis. Default is 1.\r\n\t};\r\n\t=====*/\r\n\r\n\tvar dc = lang.getObject(\"charting\", true, dojox),\r\n\t\tclear = func.lambda(\"item.clear()\"),\r\n\t\tpurge = func.lambda(\"item.purgeGroup()\"),\r\n\t\tdestroy = func.lambda(\"item.destroy()\"),\r\n\t\tmakeClean = func.lambda(\"item.dirty = false\"),\r\n\t\tmakeDirty = func.lambda(\"item.dirty = true\"),\r\n\t\tgetName = func.lambda(\"item.name\");\r\n\r\n\tvar Chart = declare(has(\"dojo-bidi\")? \"dojox.charting.NonBidiChart\" : \"dojox.charting.Chart\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tThe main chart object in dojox.charting.  This will create a two dimensional\r\n\t\t//\t\tchart based on dojox.gfx.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tdojox.charting.Chart is the primary object used for any kind of charts.  It\r\n\t\t//\t\tis simple to create--just pass it a node reference, which is used as the\r\n\t\t//\t\tcontainer for the chart--and a set of optional keyword arguments and go.\r\n\t\t//\r\n\t\t//\t\tNote that like most of dojox.gfx, most of dojox.charting.Chart's methods are\r\n\t\t//\t\tdesigned to return a reference to the chart itself, to allow for functional\r\n\t\t//\t\tchaining.  This makes defining everything on a Chart very easy to do.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tCreate an area chart, with smoothing.\r\n\t\t//\t|\trequire([\"dojox/charting/Chart\", \"dojox/charting/themes/Shrooms\", \"dojox/charting/plot2d/Areas\", ...],\r\n\t\t// \t|\t\tfunction(Chart, Shrooms, Areas, ...){\r\n\t\t//\t|\t\tnew Chart(node)\r\n\t\t//\t|\t\t\t.addPlot(\"default\", { type: Areas, tension: \"X\" })\r\n\t\t//\t|\t\t\t.setTheme(Shrooms)\r\n\t\t//\t|\t\t\t.addSeries(\"Series A\", [1, 2, 0.5, 1.5, 1, 2.8, 0.4])\r\n\t\t//\t|\t\t\t.addSeries(\"Series B\", [2.6, 1.8, 2, 1, 1.4, 0.7, 2])\r\n\t\t//\t|\t\t\t.addSeries(\"Series C\", [6.3, 1.8, 3, 0.5, 4.4, 2.7, 2])\r\n\t\t//\t|\t\t\t.render();\r\n\t\t//\t|\t});\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tThe form of data in a data series can take a number of forms: a simple array,\r\n\t\t//\t\tan array of objects {x,y}, or something custom (as determined by the plot).\r\n\t\t//\t\tHere's an example of a Candlestick chart, which expects an object of\r\n\t\t//\t\t{ open, high, low, close }.\r\n\t\t//\t|\trequire([\"dojox/charting/Chart\", \"dojox/charting/plot2d/Candlesticks\", ...],\r\n\t\t// \t|\t\tfunction(Chart, Candlesticks, ...){\r\n\t\t//\t|\t\tnew Chart(node)\r\n\t\t//\t|\t\t\t.addPlot(\"default\", {type: Candlesticks, gap: 1})\r\n\t\t//\t|\t\t\t.addAxis(\"x\", {fixLower: \"major\", fixUpper: \"major\", includeZero: true})\r\n\t\t//\t|\t\t\t.addAxis(\"y\", {vertical: true, fixLower: \"major\", fixUpper: \"major\", natural: true})\r\n\t\t//\t|\t\t\t.addSeries(\"Series A\", [\r\n\t\t//\t|\t\t\t\t\t{ open: 20, close: 16, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 22, high: 26, low: 6, mid: 18 },\r\n\t\t//\t|\t\t\t\t\t{ open: 22, close: 18, high: 22, low: 11, mid: 21 },\r\n\t\t//\t|\t\t\t\t\t{ open: 18, close: 29, high: 32, low: 14, mid: 27 },\r\n\t\t//\t|\t\t\t\t\t{ open: 29, close: 24, high: 29, low: 13, mid: 27 },\r\n\t\t//\t|\t\t\t\t\t{ open: 24, close: 8, high: 24, low: 5 },\r\n\t\t//\t|\t\t\t\t\t{ open: 8, close: 16, high: 22, low: 2 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 12, high: 19, low: 7 },\r\n\t\t//\t|\t\t\t\t\t{ open: 12, close: 20, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 20, close: 16, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 22, high: 26, low: 6, mid: 18 },\r\n\t\t//\t|\t\t\t\t\t{ open: 22, close: 18, high: 22, low: 11, mid: 21 },\r\n\t\t//\t|\t\t\t\t\t{ open: 18, close: 29, high: 32, low: 14, mid: 27 },\r\n\t\t//\t|\t\t\t\t\t{ open: 29, close: 24, high: 29, low: 13, mid: 27 },\r\n\t\t//\t|\t\t\t\t\t{ open: 24, close: 8, high: 24, low: 5 },\r\n\t\t//\t|\t\t\t\t\t{ open: 8, close: 16, high: 22, low: 2 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 12, high: 19, low: 7 },\r\n\t\t//\t|\t\t\t\t\t{ open: 12, close: 20, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 20, close: 16, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 22, high: 26, low: 6 },\r\n\t\t//\t|\t\t\t\t\t{ open: 22, close: 18, high: 22, low: 11 },\r\n\t\t//\t|\t\t\t\t\t{ open: 18, close: 29, high: 32, low: 14 },\r\n\t\t//\t|\t\t\t\t\t{ open: 29, close: 24, high: 29, low: 13 },\r\n\t\t//\t|\t\t\t\t\t{ open: 24, close: 8, high: 24, low: 5 },\r\n\t\t//\t|\t\t\t\t\t{ open: 8, close: 16, high: 22, low: 2 },\r\n\t\t//\t|\t\t\t\t\t{ open: 16, close: 12, high: 19, low: 7 },\r\n\t\t//\t|\t\t\t\t\t{ open: 12, close: 20, high: 22, low: 8 },\r\n\t\t//\t|\t\t\t\t\t{ open: 20, close: 16, high: 22, low: 8 }\r\n\t\t//\t|\t\t\t\t],\r\n\t\t//\t|\t\t\t\t{ stroke: { color: \"green\" }, fill: \"lightgreen\" }\r\n\t\t//\t|\t\t\t)\r\n\t\t//\t|\t\t\t.render();\r\n\t\t//\t|\t});\r\n\t\t\r\n\t\t// theme: dojox/charting/SimpleTheme?\r\n\t\t//\t\tAn optional theme to use for styling the chart.\r\n\t\t// axes: dojox/charting/axis2d/Base{}?\r\n\t\t//\t\tA map of axes for use in plotting a chart.\r\n\t\t// stack: dojox/charting/plot2d/Base[]\r\n\t\t//\t\tA stack of plotters.\r\n\t\t// plots: dojox/charting/plot2d/Base{}\r\n\t\t//\t\tA map of plotter indices\r\n\t\t// series: dojox/charting/Series[]\r\n\t\t//\t\tThe stack of data runs used to create plots.\r\n\t\t// runs: dojox/charting/Series{}\r\n\t\t//\t\tA map of series indices\r\n\t\t// margins: Object?\r\n\t\t//\t\tThe margins around the chart. Default is { l:10, t:10, r:10, b:10 }.\r\n\t\t// stroke: dojox.gfx.Stroke?\r\n\t\t//\t\tThe outline of the chart (stroke in vector graphics terms).\r\n\t\t// fill: dojox.gfx.Fill?\r\n\t\t//\t\tThe color for the chart.\r\n\t\t// node: DOMNode\r\n\t\t//\t\tThe container node passed to the constructor.\r\n\t\t// surface: dojox/gfx/shape.Surface\r\n\t\t//\t\tThe main graphics surface upon which a chart is drawn.\r\n\t\t// dirty: Boolean\r\n\t\t//\t\tA boolean flag indicating whether or not the chart needs to be updated/re-rendered.\r\n\t\t// htmlLabels: Boolean\r\n\t\t//\t\tA boolean flag indicating whether or not it should try to use HTML-based labels for the title or not.\r\n\t\t//\t\tThe default is true.  The only caveat is IE and Opera browsers will always use GFX-based labels.\r\n\r\n\t\tconstructor: function(/* DOMNode */node, /* __ChartCtorArgs? */kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe constructor for a new Chart.  Initializes all parameters used for a chart.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tThe newly created chart.\r\n\r\n\t\t\t// initialize parameters\r\n\t\t\tif(!kwArgs){ kwArgs = {}; }\r\n\t\t\tthis.margins   = kwArgs.margins ? kwArgs.margins : {l: 10, t: 10, r: 10, b: 10};\r\n\t\t\tthis.stroke    = kwArgs.stroke;\r\n\t\t\tthis.fill      = kwArgs.fill;\r\n\t\t\tthis.delayInMs = kwArgs.delayInMs || 200;\r\n\t\t\tthis.title     = kwArgs.title;\r\n\t\t\tthis.titleGap  = kwArgs.titleGap;\r\n\t\t\tthis.titlePos  = kwArgs.titlePos;\r\n\t\t\tthis.titleFont = kwArgs.titleFont;\r\n\t\t\tthis.titleFontColor = kwArgs.titleFontColor;\r\n\t\t\tthis.chartTitle = null;\r\n\t\t\tthis.htmlLabels = true;\r\n\t\t\tif(\"htmlLabels\" in kwArgs){\r\n\t\t\t\tthis.htmlLabels = kwArgs.htmlLabels;\r\n\t\t\t}\r\n\r\n\t\t\t// default initialization\r\n\t\t\tthis.theme = null;\r\n\t\t\tthis.axes = {};\t\t// map of axes\r\n\t\t\tthis.stack = [];\t// stack of plotters\r\n\t\t\tthis.plots = {};\t// map of plotter indices\r\n\t\t\tthis.series = [];\t// stack of data runs\r\n\t\t\tthis.runs = {};\t\t// map of data run indices\r\n\t\t\tthis.dirty = true;\r\n\r\n\t\t\t// create a surface\r\n\t\t\tthis.node = dom.byId(node);\r\n\t\t\tvar box = domGeom.getMarginBox(node);\r\n\t\t\tthis.surface = g.createSurface(this.node, box.w || 400, box.h || 300);\r\n\t\t\tif(this.surface.declaredClass.indexOf(\"vml\") == -1){\r\n\t\t\t\t// except if vml use native clipping\r\n\t\t\t\tthis._nativeClip = true;\r\n\t\t\t}\r\n\t\t},\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCleanup when a chart is to be destroyed.\r\n\t\t\t// returns: void\r\n\t\t\tarr.forEach(this.series, destroy);\r\n\t\t\tarr.forEach(this.stack,  destroy);\r\n\t\t\tfunc.forIn(this.axes, destroy);\r\n\t\t\tthis.surface.destroy();\r\n\t\t\tif(this.chartTitle && this.chartTitle.tagName){\r\n\t\t\t\t// destroy title if it is a DOM node\r\n\t\t\t\tdomConstruct.destroy(this.chartTitle);\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetCoords: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the coordinates and dimensions of the containing DOMNode, as\r\n\t\t\t//\t\treturned by dojo.coords.\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tThe resulting coordinates of the chart.  See dojo.coords for details.\r\n\t\t\tvar node = this.node;\r\n\t\t\tvar s = domStyle.getComputedStyle(node), coords = domGeom.getMarginBox(node, s);\r\n\t\t\tvar abs = domGeom.position(node, true);\r\n\t\t\tcoords.x = abs.x;\r\n\t\t\tcoords.y = abs.y;\r\n\t\t\treturn coords;\t//\tObject\r\n\t\t},\r\n\t\tsetTheme: function(theme){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet a theme of the chart.\r\n\t\t\t// theme: dojox/charting/SimpleTheme\r\n\t\t\t//\t\tThe theme to be used for visual rendering.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tthis.theme = theme.clone();\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\taddAxis: function(name, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd an axis to the chart, for rendering.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the axis.\r\n\t\t\t// kwArgs: __BaseAxisCtorArgs?\r\n\t\t\t//\t\tAn optional keyword arguments object for use in defining details of an axis.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar axis, axisType = kwArgs && kwArgs.type || \"Default\";\r\n\t\t\tif(typeof axisType == \"string\"){\r\n\t\t\t\tif(!dc.axis2d || !dc.axis2d[axisType]){\r\n\t\t\t\t\tthrow Error(\"Can't find axis: \" + axisType + \" - Check \" + \"require() dependencies.\");\r\n\t\t\t\t}\r\n\t\t\t\taxis = new dc.axis2d[axisType](this, kwArgs);\r\n\t\t\t}else{\r\n\t\t\t\taxis = new axisType(this, kwArgs);\r\n\t\t\t}\r\n\t\t\taxis.name = name;\r\n\t\t\taxis.dirty = true;\r\n\t\t\tif(name in this.axes){\r\n\t\t\t\tthis.axes[name].destroy();\r\n\t\t\t}\r\n\t\t\tthis.axes[name] = axis;\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tgetAxis: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the given axis, by name.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name the axis was defined by.\r\n\t\t\t// returns: dojox/charting/axis2d/Default\r\n\t\t\t//\t\tThe axis as stored in the chart's axis map.\r\n\t\t\treturn this.axes[name];\t//\tdojox/charting/axis2d/Default\r\n\t\t},\r\n\t\tremoveAxis: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove the axis that was defined using name.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe axis name, as defined in addAxis.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.axes){\r\n\t\t\t\t// destroy the axis\r\n\t\t\t\tthis.axes[name].destroy();\r\n\t\t\t\tdelete this.axes[name];\r\n\t\t\t\t// mark the chart as dirty\r\n\t\t\t\tthis.dirty = true;\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\taddPlot: function(name, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a new plot to the chart, defined by name and using the optional keyword arguments object.\r\n\t\t\t//\t\tNote that dojox.charting assumes the main plot to be called \"default\"; if you do not have\r\n\t\t\t//\t\ta plot called \"default\" and attempt to add data series to the chart without specifying the\r\n\t\t\t//\t\tplot to be rendered on, you WILL get errors.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the plot to be added to the chart.  If you only plan on using one plot, call it \"default\".\r\n\t\t\t// kwArgs: dojox.charting.plot2d.__PlotCtorArgs\r\n\t\t\t//\t\tAn object with optional parameters for the plot in question.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar plot, plotType = kwArgs && kwArgs.type || \"Default\";\r\n\t\t\tif(typeof plotType == \"string\"){\r\n\t\t\t\tif(!dc.plot2d || !dc.plot2d[plotType]){\r\n\t\t\t\t\tthrow Error(\"Can't find plot: \" + plotType + \" - didn't you forget to dojo\" + \".require() it?\");\r\n\t\t\t\t}\r\n\t\t\t\tplot = new dc.plot2d[plotType](this, kwArgs);\r\n\t\t\t}else{\r\n\t\t\t\tplot = new plotType(this, kwArgs);\r\n\t\t\t}\r\n\t\t\tplot.name = name;\r\n\t\t\tplot.dirty = true;\r\n\t\t\tif(name in this.plots){\r\n\t\t\t\tthis.stack[this.plots[name]].destroy();\r\n\t\t\t\tthis.stack[this.plots[name]] = plot;\r\n\t\t\t}else{\r\n\t\t\t\tthis.plots[name] = this.stack.length;\r\n\t\t\t\tthis.stack.push(plot);\r\n\t\t\t}\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tgetPlot: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the given plot, by name.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name the plot was defined by.\r\n\t\t\t// returns: dojox/charting/plot2d/Base\r\n\t\t\t//\t\tThe plot.\r\n\t\t\treturn this.stack[this.plots[name]];\r\n\t\t},\r\n\t\tremovePlot: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove the plot defined using name from the chart's plot stack.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the plot as defined using addPlot.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.plots){\r\n\t\t\t\t// get the index and remove the name\r\n\t\t\t\tvar index = this.plots[name];\r\n\t\t\t\tdelete this.plots[name];\r\n\t\t\t\t// destroy the plot\r\n\t\t\t\tthis.stack[index].destroy();\r\n\t\t\t\t// remove the plot from the stack\r\n\t\t\t\tthis.stack.splice(index, 1);\r\n\t\t\t\t// update indices to reflect the shift\r\n\t\t\t\tfunc.forIn(this.plots, function(idx, name, plots){\r\n\t\t\t\t\tif(idx > index){\r\n\t\t\t\t\t\tplots[name] = idx - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// remove all related series\r\n\t\t\t\tvar ns = arr.filter(this.series, function(run){ return run.plot != name; });\r\n\t\t\t\tif(ns.length < this.series.length){\r\n\t\t\t\t\t// kill all removed series\r\n\t\t\t\t\tarr.forEach(this.series, function(run){\r\n\t\t\t\t\t\tif(run.plot == name){\r\n\t\t\t\t\t\t\trun.destroy();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// rebuild all necessary data structures\r\n\t\t\t\t\tthis.runs = {};\r\n\t\t\t\t\tarr.forEach(ns, function(run, index){\r\n\t\t\t\t\t\tthis.runs[run.plot] = index;\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\tthis.series = ns;\r\n\t\t\t\t}\r\n\t\t\t\t// mark the chart as dirty\r\n\t\t\t\tthis.dirty = true;\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tgetPlotOrder: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array of plot names in the current order\r\n\t\t\t//\t\t(the top-most plot is the first).\r\n\t\t\t// returns: Array\r\n\t\t\treturn func.map(this.stack, getName); // Array\r\n\t\t},\r\n\t\tsetPlotOrder: function(newOrder){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets new order of plots. newOrder cannot add or remove\r\n\t\t\t//\t\tplots. Wrong names, or dups are ignored.\r\n\t\t\t// newOrder: Array\r\n\t\t\t//\t\tArray of plot names compatible with getPlotOrder().\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar names = {},\r\n\t\t\t\torder = func.filter(newOrder, function(name){\r\n\t\t\t\t\tif(!(name in this.plots) || (name in names)){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnames[name] = 1;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}, this);\r\n\t\t\tif(order.length < this.stack.length){\r\n\t\t\t\tfunc.forEach(this.stack, function(plot){\r\n\t\t\t\t\tvar name = plot.name;\r\n\t\t\t\t\tif(!(name in names)){\r\n\t\t\t\t\t\torder.push(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tvar newStack = func.map(order, function(name){\r\n\t\t\t\t\treturn this.stack[this.plots[name]];\r\n\t\t\t\t}, this);\r\n\t\t\tfunc.forEach(newStack, function(plot, i){\r\n\t\t\t\tthis.plots[plot.name] = i;\r\n\t\t\t}, this);\r\n\t\t\tthis.stack = newStack;\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tmovePlotToFront: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMoves a given plot to front.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tPlot's name to move.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.plots){\r\n\t\t\t\tvar index = this.plots[name];\r\n\t\t\t\tif(index){\r\n\t\t\t\t\tvar newOrder = this.getPlotOrder();\r\n\t\t\t\t\tnewOrder.splice(index, 1);\r\n\t\t\t\t\tnewOrder.unshift(name);\r\n\t\t\t\t\treturn this.setPlotOrder(newOrder);\t//\tdojox/charting/Chart\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tmovePlotToBack: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMoves a given plot to back.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tPlot's name to move.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.plots){\r\n\t\t\t\tvar index = this.plots[name];\r\n\t\t\t\tif(index < this.stack.length - 1){\r\n\t\t\t\t\tvar newOrder = this.getPlotOrder();\r\n\t\t\t\t\tnewOrder.splice(index, 1);\r\n\t\t\t\t\tnewOrder.push(name);\r\n\t\t\t\t\treturn this.setPlotOrder(newOrder);\t//\tdojox/charting/Chart\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\taddSeries: function(name, data, kwArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a data series to the chart for rendering.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the data series to be plotted.\r\n\t\t\t// data: Array|Object\r\n\t\t\t//\t\tThe array of data points (either numbers or objects) that\r\n\t\t\t//\t\trepresents the data to be drawn. Or it can be an object. In\r\n\t\t\t//\t\tthe latter case, it should have a property \"data\" (an array),\r\n\t\t\t//\t\tdestroy(), and setSeriesObject().\r\n\t\t\t// kwArgs: __SeriesCtorArgs?\r\n\t\t\t//\t\tAn optional keyword arguments object that will be mixed into\r\n\t\t\t//\t\tthe resultant series object.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar run = new Series(this, data, kwArgs);\r\n\t\t\trun.name = name;\r\n\t\t\tif(name in this.runs){\r\n\t\t\t\tthis.series[this.runs[name]].destroy();\r\n\t\t\t\tthis.series[this.runs[name]] = run;\r\n\t\t\t}else{\r\n\t\t\t\tthis.runs[name] = this.series.length;\r\n\t\t\t\tthis.series.push(run);\r\n\t\t\t}\r\n\t\t\tthis.dirty = true;\r\n\t\t\t// fix min/max\r\n\t\t\tif(!(\"ymin\" in run) && \"min\" in run){ run.ymin = run.min; }\r\n\t\t\tif(!(\"ymax\" in run) && \"max\" in run){ run.ymax = run.max; }\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tgetSeries: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the given series, by name.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name the series was defined by.\r\n\t\t\t// returns: dojox/charting/Series\r\n\t\t\t//\t\tThe series.\r\n\t\t\treturn this.series[this.runs[name]];\r\n\t\t},\r\n\t\tremoveSeries: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove the series defined by name from the chart.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the series as defined by addSeries.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.runs){\r\n\t\t\t\t// get the index and remove the name\r\n\t\t\t\tvar index = this.runs[name];\r\n\t\t\t\tdelete this.runs[name];\r\n\t\t\t\t// destroy the run\r\n\t\t\t\tthis.series[index].destroy();\r\n\t\t\t\t// remove the run from the stack of series\r\n\t\t\t\tthis.series.splice(index, 1);\r\n\t\t\t\t// update indices to reflect the shift\r\n\t\t\t\tfunc.forIn(this.runs, function(idx, name, runs){\r\n\t\t\t\t\tif(idx > index){\r\n\t\t\t\t\t\truns[name] = idx - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis.dirty = true;\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tupdateSeries: function(name, data, offsets){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the given series with a new set of data points.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the series as defined in addSeries.\r\n\t\t\t// data: Array|Object\r\n\t\t\t//\t\tThe array of data points (either numbers or objects) that\r\n\t\t\t//\t\trepresents the data to be drawn. Or it can be an object. In\r\n\t\t\t//\t\tthe latter case, it should have a property \"data\" (an array),\r\n\t\t\t//\t\tdestroy(), and setSeriesObject().\r\n\t\t\t// offsets: Boolean?\r\n\t\t\t//\t\tIf true recomputes the offsets of the chart based on the new\r\n\t\t\t//\t\tdata. This is useful if the range of data is drastically changing\r\n\t\t\t//\t\tand offsets need to be recomputed.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.runs){\r\n\t\t\t\tvar run = this.series[this.runs[name]];\r\n\t\t\t\trun.update(data);\r\n\t\t\t\tif(offsets){\r\n\t\t\t\t\tthis.dirty = true;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._invalidateDependentPlots(run.plot, false);\r\n\t\t\t\t\tthis._invalidateDependentPlots(run.plot, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tgetSeriesOrder: function(plotName){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array of series names in the current order\r\n\t\t\t//\t\t(the top-most series is the first) within a plot.\r\n\t\t\t// plotName: String\r\n\t\t\t//\t\tPlot's name.\r\n\t\t\t// returns: Array\r\n\t\t\treturn func.map(func.filter(this.series, function(run){\r\n\t\t\t\t\treturn run.plot == plotName;\r\n\t\t\t\t}), getName);\r\n\t\t},\r\n\t\tsetSeriesOrder: function(newOrder){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets new order of series within a plot. newOrder cannot add\r\n\t\t\t//\t\tor remove series. Wrong names, or dups are ignored.\r\n\t\t\t// newOrder: Array\r\n\t\t\t//\t\tArray of series names compatible with getPlotOrder(). All\r\n\t\t\t//\t\tseries should belong to the same plot.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar plotName, names = {},\r\n\t\t\t\torder = func.filter(newOrder, function(name){\r\n\t\t\t\t\tif(!(name in this.runs) || (name in names)){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar run = this.series[this.runs[name]];\r\n\t\t\t\t\tif(plotName){\r\n\t\t\t\t\t\tif(run.plot != plotName){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tplotName = run.plot;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnames[name] = 1;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}, this);\r\n\t\t\tfunc.forEach(this.series, function(run){\r\n\t\t\t\tvar name = run.name;\r\n\t\t\t\tif(!(name in names) && run.plot == plotName){\r\n\t\t\t\t\torder.push(name);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar newSeries = func.map(order, function(name){\r\n\t\t\t\t\treturn this.series[this.runs[name]];\r\n\t\t\t\t}, this);\r\n\t\t\tthis.series = newSeries.concat(func.filter(this.series, function(run){\r\n\t\t\t\treturn run.plot != plotName;\r\n\t\t\t}));\r\n\t\t\tfunc.forEach(this.series, function(run, i){\r\n\t\t\t\tthis.runs[run.name] = i;\r\n\t\t\t}, this);\r\n\t\t\tthis.dirty = true;\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tmoveSeriesToFront: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMoves a given series to front of a plot.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tSeries' name to move.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.runs){\r\n\t\t\t\tvar index = this.runs[name],\r\n\t\t\t\t\tnewOrder = this.getSeriesOrder(this.series[index].plot);\r\n\t\t\t\tif(name != newOrder[0]){\r\n\t\t\t\t\tnewOrder.splice(index, 1);\r\n\t\t\t\t\tnewOrder.unshift(name);\r\n\t\t\t\t\treturn this.setSeriesOrder(newOrder);\t//\tdojox/charting/Chart\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tmoveSeriesToBack: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMoves a given series to back of a plot.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tSeries' name to move.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(name in this.runs){\r\n\t\t\t\tvar index = this.runs[name],\r\n\t\t\t\t\tnewOrder = this.getSeriesOrder(this.series[index].plot);\r\n\t\t\t\tif(name != newOrder[newOrder.length - 1]){\r\n\t\t\t\t\tnewOrder.splice(index, 1);\r\n\t\t\t\t\tnewOrder.push(name);\r\n\t\t\t\t\treturn this.setSeriesOrder(newOrder);\t//\tdojox/charting/Chart\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tresize: function(width, height){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResize the chart to the dimensions of width and height.\r\n\t\t\t// description:\r\n\t\t\t//\t\tResize the chart and its surface to the width and height dimensions.\r\n\t\t\t//\t\tIf a single argument of the form {w: value1, h: value2} is provided take that argument as the dimensions to use.\r\n\t\t\t//\t\tFinally if no argument is provided, resize the surface to the marginBox of the chart.\r\n\t\t\t// width: Number|Object?\r\n\t\t\t//\t\tThe new width of the chart or the box definition.\r\n\t\t\t// height: Number?\r\n\t\t\t//\t\tThe new height of the chart.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\t// case 0, do not resize the div, just the surface\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t// argument, override node box\r\n\t\t\t\t\tdomGeom.setMarginBox(this.node, width);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// argument, override node box\r\n\t\t\t\t\tdomGeom.setMarginBox(this.node, {w: width, h: height});\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// in all cases take back the computed box\r\n\t\t\tvar box = domGeom.getMarginBox(this.node);\r\n\t\t\tvar d = this.surface.getDimensions();\r\n\t\t\tif(d.width != box.w || d.height != box.h){\r\n\t\t\t\t// and set it on the surface\r\n\t\t\t\tthis.surface.setDimensions(box.w, box.h);\r\n\t\t\t\tthis.dirty = true;\r\n\t\t\t\treturn this.render();\t//\tdojox/charting/Chart\r\n\t\t\t}else{\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetGeometry: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a map of information about all axes in a chart and what they represent\r\n\t\t\t//\t\tin terms of scaling (see dojox.charting.axis2d.Default.getScaler).\r\n\t\t\t// returns: Object\r\n\t\t\t//\t\tAn map of geometry objects, a one-to-one mapping of axes.\r\n\t\t\tvar ret = {};\r\n\t\t\tfunc.forIn(this.axes, function(axis){\r\n\t\t\t\tif(axis.initialized()){\r\n\t\t\t\t\tret[axis.name] = {\r\n\t\t\t\t\t\tname:\t\taxis.name,\r\n\t\t\t\t\t\tvertical:\taxis.vertical,\r\n\t\t\t\t\t\tscaler:\t\taxis.scaler,\r\n\t\t\t\t\t\tticks:\t\taxis.ticks\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn ret;\t//\tObject\r\n\t\t},\r\n\t\tsetAxisWindow: function(name, scale, offset, zoom){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tZooms an axis and all dependent plots. Can be used to zoom in 1D.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the axis as defined by addAxis.\r\n\t\t\t// scale: Number\r\n\t\t\t//\t\tThe scale on the target axis.\r\n\t\t\t// offset: Number\r\n\t\t\t//\t\tAny offest, as measured by axis tick\r\n\t\t\t// zoom: Boolean|Object?\r\n\t\t\t//\t\tThe chart zooming animation trigger.  This is null by default,\r\n\t\t\t//\t\te.g. {duration: 1200}, or just set true.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tvar axis = this.axes[name];\r\n\t\t\tif(axis){\r\n\t\t\t\taxis.setWindow(scale, offset);\r\n\t\t\t\tarr.forEach(this.stack,function(plot){\r\n\t\t\t\t\tif(plot.hAxis == name || plot.vAxis == name){\r\n\t\t\t\t\t\tplot.zoom = zoom;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tsetWindow: function(sx, sy, dx, dy, zoom){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tZooms in or out any plots in two dimensions.\r\n\t\t\t// sx: Number\r\n\t\t\t//\t\tThe scale for the x axis.\r\n\t\t\t// sy: Number\r\n\t\t\t//\t\tThe scale for the y axis.\r\n\t\t\t// dx: Number\r\n\t\t\t//\t\tThe pixel offset on the x axis.\r\n\t\t\t// dy: Number\r\n\t\t\t//\t\tThe pixel offset on the y axis.\r\n\t\t\t// zoom: Boolean|Object?\r\n\t\t\t//\t\tThe chart zooming animation trigger.  This is null by default,\r\n\t\t\t//\t\te.g. {duration: 1200}, or just set true.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(!(\"plotArea\" in this)){\r\n\t\t\t\tthis.calculateGeometry();\r\n\t\t\t}\r\n\t\t\tfunc.forIn(this.axes, function(axis){\r\n\t\t\t\tvar scale, offset, bounds = axis.getScaler().bounds,\r\n\t\t\t\t\ts = bounds.span / (bounds.upper - bounds.lower);\r\n\t\t\t\tif(axis.vertical){\r\n\t\t\t\t\tscale  = sy;\r\n\t\t\t\t\toffset = dy / s / scale;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tscale  = sx;\r\n\t\t\t\t\toffset = dx / s / scale;\r\n\t\t\t\t}\r\n\t\t\t\taxis.setWindow(scale, offset);\r\n\t\t\t});\r\n\t\t\tarr.forEach(this.stack, function(plot){ plot.zoom = zoom; });\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tzoomIn:\tfunction(name, range, delayed){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tZoom the chart to a specific range on one axis.  This calls render()\r\n\t\t\t//\t\tdirectly as a convenience method.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the axis as defined by addAxis.\r\n\t\t\t// range: Array\r\n\t\t\t//\t\tThe end points of the zoom range, measured in axis ticks.\r\n\t\t\tvar axis = this.axes[name];\r\n\t\t\tif(axis){\r\n\t\t\t\tvar scale, offset, bounds = axis.getScaler().bounds;\r\n\t\t\t\tvar lower = Math.min(range[0],range[1]);\r\n\t\t\t\tvar upper = Math.max(range[0],range[1]);\r\n\t\t\t\tlower = range[0] < bounds.lower ? bounds.lower : lower;\r\n\t\t\t\tupper = range[1] > bounds.upper ? bounds.upper : upper;\r\n\t\t\t\tscale = (bounds.upper - bounds.lower) / (upper - lower);\r\n\t\t\t\toffset = lower - bounds.lower;\r\n\t\t\t\tthis.setAxisWindow(name, scale, offset);\r\n\t\t\t\tif(delayed){\r\n\t\t\t\t\tthis.delayedRender();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.render();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tcalculateGeometry: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the geometry of the chart based on the defined axes of\r\n\t\t\t//\t\ta chart.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(this.dirty){\r\n\t\t\t\treturn this.fullGeometry();\r\n\t\t\t}\r\n\r\n\t\t\t// calculate geometry\r\n\t\t\tvar dirty = arr.filter(this.stack, function(plot){\r\n\t\t\t\t\treturn plot.dirty ||\r\n\t\t\t\t\t\t(plot.hAxis && this.axes[plot.hAxis].dirty) ||\r\n\t\t\t\t\t\t(plot.vAxis && this.axes[plot.vAxis].dirty);\r\n\t\t\t\t}, this);\r\n\t\t\tcalculateAxes(dirty, this.plotArea);\r\n\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tfullGeometry: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the full geometry of the chart.  This includes passing\r\n\t\t\t//\t\tover all major elements of a chart (plots, axes, series, container)\r\n\t\t\t//\t\tin order to ensure proper rendering.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tthis._makeDirty();\r\n\r\n\t\t\t// clear old values\r\n\t\t\tarr.forEach(this.stack, clear);\r\n\r\n\t\t\t// rebuild new connections, and add defaults\r\n\r\n\t\t\t// set up a theme\r\n\t\t\tif(!this.theme){\r\n\t\t\t\tthis.setTheme(new SimpleTheme());\r\n\t\t\t}\r\n\r\n\t\t\t// assign series\r\n\t\t\tarr.forEach(this.series, function(run){\r\n\t\t\t\tif(!(run.plot in this.plots)){\r\n\t\t\t\t\t// TODO remove auto-assignment\r\n\t\t\t\t\tif(!dc.plot2d || !dc.plot2d.Default){\r\n\t\t\t\t\t\tthrow Error(\"Can't find plot: Default - didn't you forget to dojo\" + \".require() it?\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar plot = new dc.plot2d.Default(this, {});\r\n\t\t\t\t\tplot.name = run.plot;\r\n\t\t\t\t\tthis.plots[run.plot] = this.stack.length;\r\n\t\t\t\t\tthis.stack.push(plot);\r\n\t\t\t\t}\r\n\t\t\t\tthis.stack[this.plots[run.plot]].addSeries(run);\r\n\t\t\t}, this);\r\n\t\t\t// assign axes\r\n\t\t\tarr.forEach(this.stack, function(plot){\r\n\t\t\t\tif(plot.assignAxes){\r\n\t\t\t\t\tplot.assignAxes(this.axes);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\t// calculate geometry\r\n\r\n\t\t\t// 1st pass\r\n\t\t\tvar dim = this.dim = this.surface.getDimensions();\r\n\t\t\tdim.width  = g.normalizedLength(dim.width);\r\n\t\t\tdim.height = g.normalizedLength(dim.height);\r\n\t\t\tfunc.forIn(this.axes, clear);\r\n\t\t\tcalculateAxes(this.stack, dim);\r\n\r\n\t\t\t// assumption: we don't have stacked axes yet\r\n\t\t\tvar offsets = this.offsets = {l: 0, r: 0, t: 0, b: 0};\r\n\t\t\t// chart mirroring starts\r\n\t\t\tvar self = this;\r\n\t\t\tfunc.forIn(this.axes, function(axis){\r\n\t\t\t\tif(has(\"dojo-bidi\")){\r\n\t\t\t\t\tself._resetLeftBottom(axis);\r\n\t\t\t\t}\r\n\t\t\t\tfunc.forIn(axis.getOffsets(), function(o, i){ offsets[i] = Math.max(o, offsets[i]); });\r\n\t\t\t});\r\n\t\t\t// chart mirroring ends\r\n\t\t\t// add title area\r\n\t\t\tif(this.title){\r\n\t\t\t\tthis.titleGap = (this.titleGap==0) ? 0 : this.titleGap || this.theme.chart.titleGap || 20;\r\n\t\t\t\tthis.titlePos = this.titlePos || this.theme.chart.titlePos || \"top\";\r\n\t\t\t\tthis.titleFont = this.titleFont || this.theme.chart.titleFont;\r\n\t\t\t\tthis.titleFontColor = this.titleFontColor || this.theme.chart.titleFontColor || \"black\";\r\n\t\t\t\tvar tsize = g.normalizedLength(g.splitFontString(this.titleFont).size);\r\n\t\t\t\toffsets[this.titlePos == \"top\" ? \"t\" : \"b\"] += (tsize + this.titleGap);\r\n\t\t\t}\r\n\t\t\t// add margins\r\n\t\t\tfunc.forIn(this.margins, function(o, i){ offsets[i] += o; });\r\n\r\n\t\t\t// 2nd pass with realistic dimensions\r\n\t\t\tthis.plotArea = {\r\n\t\t\t\twidth: dim.width - offsets.l - offsets.r,\r\n\t\t\t\theight: dim.height - offsets.t - offsets.b\r\n\t\t\t};\r\n\t\t\tfunc.forIn(this.axes, clear);\r\n\t\t\tcalculateAxes(this.stack, this.plotArea);\r\n\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\trender: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRender the chart according to the current information defined.  This should\r\n\t\t\t//\t\tbe the last call made when defining/creating a chart, or if data within the\r\n\t\t\t//\t\tchart has been changed.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\r\n\t\t\t// do we have a delayed renderer pending? If yes we need to clear it\r\n\t\t\tif(this._delayedRenderHandle){\r\n\t\t\t\tclearTimeout(this._delayedRenderHandle);\r\n\t\t\t\tthis._delayedRenderHandle = null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this.theme){\r\n\t\t\t\tthis.theme.clear();\r\n\t\t\t}\r\n\r\n\t\t\tif(this.dirty){\r\n\t\t\t\treturn this.fullRender();\r\n\t\t\t}\r\n\r\n\t\t\tthis.calculateGeometry();\r\n\r\n\t\t\t// go over the stack backwards\r\n\t\t\tfunc.forEachRev(this.stack, function(plot){ plot.render(this.dim, this.offsets); }, this);\r\n\r\n\t\t\t// go over axes\r\n\t\t\tfunc.forIn(this.axes, function(axis){ axis.render(this.dim, this.offsets); }, this);\r\n\r\n\t\t\tthis._makeClean();\r\n\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tfullRender: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tForce a full rendering of the chart, including full resets on the chart itself.\r\n\t\t\t//\t\tYou should not call this method directly unless absolutely necessary.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\r\n\t\t\t// calculate geometry\r\n\t\t\tthis.fullGeometry();\r\n\t\t\tvar offsets = this.offsets, dim = this.dim;\r\n\t\t\tvar w = Math.max(0, dim.width  - offsets.l - offsets.r),\r\n\t\t\t\th = Math.max(0, dim.height - offsets.t - offsets.b);\r\n\r\n\t\t\t// get required colors\r\n\t\t\t//var requiredColors = func.foldl(this.stack, \"z + plot.getRequiredColors()\", 0);\r\n\t\t\t//this.theme.defineColors({num: requiredColors, cache: false});\r\n\r\n\t\t\t// clear old shapes\r\n\t\t\tarr.forEach(this.series, purge);\r\n\t\t\tfunc.forIn(this.axes, purge);\r\n\t\t\tarr.forEach(this.stack,  purge);\r\n\t\t\tvar children = this.surface.children;\r\n\t\t\t// starting with 1.9 the registry is optional and thus dispose is\r\n\t\t\tif(shape.dispose){\r\n\t\t\t\tfor(var i = 0; i < children.length;++i){\r\n\t\t\t\t\tshape.dispose(children[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.chartTitle && this.chartTitle.tagName){\r\n\t\t\t\t// destroy title if it is a DOM node\r\n\t\t\t    domConstruct.destroy(this.chartTitle);\r\n\t\t\t}\r\n\t\t\tthis.surface.clear();\r\n\t\t\tthis.chartTitle = null;\r\n\r\n\t\t\tthis._renderChartBackground(dim, offsets);\r\n\t\t\tif(this._nativeClip){\r\n\t\t\t\tthis._renderPlotBackground(dim, offsets, w, h);\r\n\t\t\t}else{\r\n\t\t\t\t// VML\r\n\t\t\t\tthis._renderPlotBackground(dim, offsets, w, h);\r\n\t\t\t}\r\n\r\n\t\t\t// go over the stack backwards\r\n\t\t\tfunc.foldr(this.stack, function(z, plot){ return plot.render(dim, offsets), 0; }, 0);\r\n\r\n\t\t\tif(!this._nativeClip){\r\n\t\t\t\t// VML, matting-clipping\r\n\t\t\t\tthis._renderChartBackground(dim, offsets);\r\n\t\t\t}\r\n\r\n\t\t\t//create title: Whether to make chart title as a widget which extends dojox.charting.Element?\r\n\t\t\tif(this.title){\r\n\t\t\t\tvar forceHtmlLabels = (g.renderer == \"canvas\") && this.htmlLabels,\r\n\t\t\t\t\tlabelType = forceHtmlLabels || !has(\"ie\") && !has(\"opera\") && this.htmlLabels ? \"html\" : \"gfx\",\r\n\t\t\t\t\ttsize = g.normalizedLength(g.splitFontString(this.titleFont).size);\r\n\t\t\t\tthis.chartTitle = common.createText[labelType](\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\tthis.surface,\r\n\t\t\t\t\tdim.width/2,\r\n\t\t\t\t\tthis.titlePos==\"top\" ? tsize + this.margins.t : dim.height - this.margins.b,\r\n\t\t\t\t\t\"middle\",\r\n\t\t\t\t\tthis.title,\r\n\t\t\t\t\tthis.titleFont,\r\n\t\t\t\t\tthis.titleFontColor\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// go over axes\r\n\t\t\tfunc.forIn(this.axes, function(axis){ axis.render(dim, offsets); });\r\n\r\n\t\t\tthis._makeClean();\r\n\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\t_renderChartBackground: function(dim, offsets){\r\n\t\t\tvar t = this.theme, rect;\r\n\t\t\t// chart background\r\n\t\t\tvar fill   = this.fill   !== undefined ? this.fill   : (t.chart && t.chart.fill);\r\n\t\t\tvar stroke = this.stroke !== undefined ? this.stroke : (t.chart && t.chart.stroke);\r\n\r\n\t\t\t// TRT: support for \"inherit\" as a named value in a theme.\r\n\t\t\tif(fill == \"inherit\"){\r\n\t\t\t\t//\tfind the background color of the nearest ancestor node, and use that explicitly.\r\n\t\t\t\tvar node = this.node;\r\n\t\t\t\tfill = new Color(domStyle.get(node, \"backgroundColor\"));\r\n\t\t\t\twhile(fill.a==0 && node!=document.documentElement){\r\n\t\t\t\t\tfill = new Color(domStyle.get(node, \"backgroundColor\"));\r\n\t\t\t\t\tnode = node.parentNode;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(fill){\r\n\t\t\t\tif(this._nativeClip){\r\n\t\t\t\t\tfill = Element.prototype._shapeFill(Element.prototype._plotFill(fill, dim),\r\n\t\t\t\t\t\t{ x:0, y: 0, width: dim.width + 1, height: dim.height + 1 });\r\n\t\t\t\t\tthis.surface.createRect({ width: dim.width + 1, height: dim.height + 1 }).setFill(fill);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// VML\r\n\t\t\t\t\tfill = Element.prototype._plotFill(fill, dim, offsets);\r\n\t\t\t\t\tif(offsets.l){\t// left\r\n\t\t\t\t\t\trect = {\r\n\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\twidth:  offsets.l,\r\n\t\t\t\t\t\t\theight: dim.height + 1\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.surface.createRect(rect).setFill(Element.prototype._shapeFill(fill, rect));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(offsets.r){\t// right\r\n\t\t\t\t\t\trect = {\r\n\t\t\t\t\t\t\tx: dim.width - offsets.r,\r\n\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\twidth:  offsets.r + 1,\r\n\t\t\t\t\t\t\theight: dim.height + 2\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.surface.createRect(rect).setFill(Element.prototype._shapeFill(fill, rect));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(offsets.t){\t// top\r\n\t\t\t\t\t\trect = {\r\n\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\ty: 0,\r\n\t\t\t\t\t\t\twidth:  dim.width + 1,\r\n\t\t\t\t\t\t\theight: offsets.t\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.surface.createRect(rect).setFill(Element.prototype._shapeFill(fill, rect));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(offsets.b){\t// bottom\r\n\t\t\t\t\t\trect = {\r\n\t\t\t\t\t\t\tx: 0,\r\n\t\t\t\t\t\t\ty: dim.height - offsets.b,\r\n\t\t\t\t\t\t\twidth:  dim.width + 1,\r\n\t\t\t\t\t\t\theight: offsets.b + 2\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.surface.createRect(rect).setFill(Element.prototype._shapeFill(fill, rect));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(stroke){\r\n\t\t\t\tthis.surface.createRect({\r\n\t\t\t\t\twidth:  dim.width - 1,\r\n\t\t\t\t\theight: dim.height - 1\r\n\t\t\t\t}).setStroke(stroke);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_renderPlotBackground: function(dim, offsets, w, h){\r\n\t\t\tvar t = this.theme;\r\n\r\n\t\t\t// draw a plot background\r\n\t\t\tvar fill   = t.plotarea && t.plotarea.fill;\r\n\t\t\tvar stroke = t.plotarea && t.plotarea.stroke;\r\n\t\t\t// size might be neg if offsets are bigger that chart size this happens quite often at\r\n\t\t\t// initialization time if the chart widget is used in a BorderContainer\r\n\t\t\t// this will fail on IE/VML\r\n\t\t\tvar rect = {\r\n\t\t\t\tx: offsets.l - 1, y: offsets.t - 1,\r\n\t\t\t\twidth:  w + 2,\r\n\t\t\t\theight: h + 2\r\n\t\t\t};\r\n\t\t\tif(fill){\r\n\t\t\t\tfill = Element.prototype._shapeFill(Element.prototype._plotFill(fill, dim, offsets), rect);\r\n\t\t\t\tthis.surface.createRect(rect).setFill(fill);\r\n\t\t\t}\r\n\t\t\tif(stroke){\r\n\t\t\t\tthis.surface.createRect({\r\n\t\t\t\t\tx: offsets.l, y: offsets.t,\r\n\t\t\t\t\twidth:  w + 1,\r\n\t\t\t\t\theight: h + 1\r\n\t\t\t\t}).setStroke(stroke);\r\n\t\t\t}\r\n\t\t},\r\n\t\tdelayedRender: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDelayed render, which is used to collect multiple updates\r\n\t\t\t//\t\twithin a delayInMs time window.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\r\n\t\t\tif(!this._delayedRenderHandle){\r\n\t\t\t\tthis._delayedRenderHandle = setTimeout(\r\n\t\t\t\t\tlang.hitch(this, function(){\r\n\t\t\t\t\t\tthis.render();\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tthis.delayInMs\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\tconnectToPlot: function(name, object, method){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA convenience method to connect a function to a plot.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the plot as defined by addPlot.\r\n\t\t\t// object: Object\r\n\t\t\t//\t\tThe object to be connected.\r\n\t\t\t// method: Function\r\n\t\t\t//\t\tThe function to be executed.\r\n\t\t\t// returns: Array\r\n\t\t\t//\t\tA handle to the connection, as defined by dojo.connect (see dojo.connect).\r\n\t\t\treturn name in this.plots ? this.stack[this.plots[name]].connect(object, method) : null;\t//\tArray\r\n\t\t},\r\n\t\tfireEvent: function(seriesName, eventName, index){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires a synthetic event for a series item.\r\n\t\t\t// seriesName: String\r\n\t\t\t//\t\tSeries name.\r\n\t\t\t// eventName: String\r\n\t\t\t//\t\tEvent name to simulate: onmouseover, onmouseout, onclick.\r\n\t\t\t// index: Number\r\n\t\t\t//\t\tValid data value index for the event.\r\n\t\t\t// returns: dojox/charting/Chart\r\n\t\t\t//\t\tA reference to the current chart for functional chaining.\r\n\t\t\tif(seriesName in this.runs){\r\n\t\t\t\tvar plotName = this.series[this.runs[seriesName]].plot;\r\n\t\t\t\tif(plotName in this.plots){\r\n\t\t\t\t\tvar plot = this.stack[this.plots[plotName]];\r\n\t\t\t\t\tif(plot){\r\n\t\t\t\t\t\tplot.fireEvent(seriesName, eventName, index);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this;\t//\tdojox/charting/Chart\r\n\t\t},\r\n\t\t_makeClean: function(){\r\n\t\t\t// reset dirty flags\r\n\t\t\tarr.forEach(this.axes,   makeClean);\r\n\t\t\tarr.forEach(this.stack,  makeClean);\r\n\t\t\tarr.forEach(this.series, makeClean);\r\n\t\t\tthis.dirty = false;\r\n\t\t},\r\n\t\t_makeDirty: function(){\r\n\t\t\t// reset dirty flags\r\n\t\t\tarr.forEach(this.axes,   makeDirty);\r\n\t\t\tarr.forEach(this.stack,  makeDirty);\r\n\t\t\tarr.forEach(this.series, makeDirty);\r\n\t\t\tthis.dirty = true;\r\n\t\t},\r\n\t\t_invalidateDependentPlots: function(plotName, /* Boolean */ verticalAxis){\r\n\t\t\tif(plotName in this.plots){\r\n\t\t\t\tvar plot = this.stack[this.plots[plotName]], axis,\r\n\t\t\t\t\taxisName = verticalAxis ? \"vAxis\" : \"hAxis\";\r\n\t\t\t\tif(plot[axisName]){\r\n\t\t\t\t\taxis = this.axes[plot[axisName]];\r\n\t\t\t\t\tif(axis && axis.dependOnData()){\r\n\t\t\t\t\t\taxis.dirty = true;\r\n\t\t\t\t\t\t// find all plots and mark them dirty\r\n\t\t\t\t\t\tarr.forEach(this.stack, function(p){\r\n\t\t\t\t\t\t\tif(p[axisName] && p[axisName] == plot[axisName]){\r\n\t\t\t\t\t\t\t\tp.dirty = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tplot.dirty = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetDir : function(dir){\r\n\t\t\treturn this; \r\n\t\t},\r\n\t\t_resetLeftBottom: function(axis){\r\n\t\t},\r\n\t\tformatTruncatedLabel: function(element, label, labelType){\t\t\t\r\n\t\t}\r\n\t});\r\n\r\n\tfunction hSection(stats){\r\n\t\treturn {min: stats.hmin, max: stats.hmax};\r\n\t}\r\n\r\n\tfunction vSection(stats){\r\n\t\treturn {min: stats.vmin, max: stats.vmax};\r\n\t}\r\n\r\n\tfunction hReplace(stats, h){\r\n\t\tstats.hmin = h.min;\r\n\t\tstats.hmax = h.max;\r\n\t}\r\n\r\n\tfunction vReplace(stats, v){\r\n\t\tstats.vmin = v.min;\r\n\t\tstats.vmax = v.max;\r\n\t}\r\n\r\n\tfunction combineStats(target, source){\r\n\t\tif(target && source){\r\n\t\t\ttarget.min = Math.min(target.min, source.min);\r\n\t\t\ttarget.max = Math.max(target.max, source.max);\r\n\t\t}\r\n\t\treturn target || source;\r\n\t}\r\n\r\n\tfunction calculateAxes(stack, plotArea){\r\n\t\tvar plots = {}, axes = {};\r\n\t\tarr.forEach(stack, function(plot){\r\n\t\t\tvar stats = plots[plot.name] = plot.getSeriesStats();\r\n\t\t\tif(plot.hAxis){\r\n\t\t\t\taxes[plot.hAxis] = combineStats(axes[plot.hAxis], hSection(stats));\r\n\t\t\t}\r\n\t\t\tif(plot.vAxis){\r\n\t\t\t\taxes[plot.vAxis] = combineStats(axes[plot.vAxis], vSection(stats));\r\n\t\t\t}\r\n\t\t});\r\n\t\tarr.forEach(stack, function(plot){\r\n\t\t\tvar stats = plots[plot.name];\r\n\t\t\tif(plot.hAxis){\r\n\t\t\t\thReplace(stats, axes[plot.hAxis]);\r\n\t\t\t}\r\n\t\t\tif(plot.vAxis){\r\n\t\t\t\tvReplace(stats, axes[plot.vAxis]);\r\n\t\t\t}\r\n\t\t\tplot.initializeScalers(plotArea, stats);\r\n\t\t});\r\n\t}\r\n\t\r\n\treturn has(\"dojo-bidi\")? declare(\"dojox.charting.Chart\", [Chart, BidiChart]) : Chart;\r\n});\r\n"]}