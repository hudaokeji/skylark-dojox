{"version":3,"sources":["gfx3d/vector.js"],"names":["define","lang","arrayUtil","gfx3d","vector","sum","v","x","y","z","forEach","arguments","item","center","l","length","substract","a","b","_crossProduct","u","w","crossProduct","c","d","e","f","every","_dotProduct","dotProduct","normalize","m","n","Array"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,mBAAoB,WAAW,SAASC,EAAMC,EAAWC,GAkInF,OAhIDA,EAAMC,QAELC,IAAK,WAGJ,IAAIC,GAAKC,EAAG,EAAGC,EAAG,EAAGC,EAAE,GAEvB,OADAP,EAAUQ,QAAQC,UAAW,SAASC,GAAON,EAAEC,GAAKK,EAAKL,EAAGD,EAAEE,GAAKI,EAAKJ,EAAGF,EAAEG,GAAKG,EAAKH,IAChFH,GAGRO,OAAQ,WAGP,IAAIC,EAAIH,UAAUI,OAClB,GAAQ,GAALD,EACF,OAAQP,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAExB,IAAIH,EAAIH,EAAMC,OAAOC,IAAIM,WACzB,OAAQJ,EAAGD,EAAEC,EAAEO,EAAGN,EAAGF,EAAEE,EAAEM,EAAGL,EAAGH,EAAEG,EAAEK,IAGpCE,UAAW,SAAsBC,EAAgBC,GAChD,OAASX,EAAGU,EAAEV,EAAIW,EAAEX,EAAGC,EAAGS,EAAET,EAAIU,EAAEV,EAAGC,EAAGQ,EAAER,EAAIS,EAAET,IAGjDU,cAAe,SAASZ,EAAGC,EAAGC,EAAGW,EAAGd,EAAGe,GAetC,OAAQd,EAAGC,EAAIa,EAAIZ,EAAIH,EAAGE,EAAGC,EAAIW,EAAIb,EAAIc,EAAGZ,EAAGF,EAAID,EAAIE,EAAIY,IAG5DE,aAAc,SAA6BL,EAAuBC,EAA0BK,EAA0BC,EAA0BC,EAA0BC,GAiBzK,OAAuB,GAApBf,UAAUI,QAAeb,EAAUyB,MAAMhB,UAAW,SAASC,GAAO,MAAsB,iBAARA,IAC7ET,EAAMC,OAAOe,cAAcF,EAAGC,EAAGK,EAAGC,EAAGC,EAAGC,GAG3CvB,EAAMC,OAAOe,cAAcF,EAAEV,EAAGU,EAAET,EAAGS,EAAER,EAAGS,EAAEX,EAAGW,EAAEV,EAAGU,EAAET,IAG9DmB,YAAa,SAASrB,EAAGC,EAAGC,EAAGW,EAAGd,EAAGe,GAepC,OAAOd,EAAIa,EAAIZ,EAAIF,EAAIG,EAAIY,GAE5BQ,WAAY,SAASZ,EAAGC,EAAGK,EAAGC,EAAGC,EAAGC,GAiBnC,OAAuB,GAApBf,UAAUI,QAAeb,EAAUyB,MAAMhB,UAAW,SAASC,GAAO,MAAsB,iBAARA,IAC7ET,EAAMC,OAAOwB,YAAYX,EAAGC,EAAGK,EAAGC,EAAGC,EAAGC,GAEzCvB,EAAMC,OAAOwB,YAAYX,EAAEV,EAAGU,EAAET,EAAGS,EAAER,EAAGS,EAAEX,EAAGW,EAAEV,EAAGU,EAAET,IAG5DqB,UAAW,SAA2Bb,EAAeC,EAAeK,GASnE,IAAIT,EAAGiB,EAAGC,EACPf,aAAagB,OACfnB,EAAIG,EAAE,GAAIc,EAAId,EAAE,GAAIe,EAAIf,EAAE,KAE1BH,EAAIG,EAAGc,EAAIb,EAAGc,EAAIT,GAGnB,IAAIH,EAAIjB,EAAMC,OAAOY,UAAUe,EAAGjB,GAC9BR,EAAIH,EAAMC,OAAOY,UAAUgB,EAAGlB,GAClC,OAAOX,EAAMC,OAAOkB,aAAaF,EAAGd,KAG9BH,EAAMC","file":"../../gfx3d/vector.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/array\", \"./_base\"],function(lang, arrayUtil, gfx3d) {\r\n\r\ngfx3d.vector =  {\r\n\t\r\n\tsum: function(){\r\n\t\t// summary:\r\n\t\t//\t\tsum of the vectors\r\n\t\tvar v = {x: 0, y: 0, z:0};\r\n\t\tarrayUtil.forEach(arguments, function(item){ v.x += item.x; v.y += item.y; v.z += item.z; });\r\n\t\treturn v;\r\n\t},\r\n\r\n\tcenter: function(){\r\n\t\t// summary:\r\n\t\t//\t\tcenter of the vectors\r\n\t\tvar l = arguments.length;\r\n\t\tif(l == 0){\r\n\t\t\treturn {x: 0, y: 0, z: 0};\r\n\t\t}\r\n\t\tvar v = gfx3d.vector.sum(arguments);\r\n\t\treturn {x: v.x/l, y: v.y/l, z: v.z/l};\r\n\t},\r\n\r\n\tsubstract: function(/* Pointer */a, /* Pointer */b){\r\n\t\treturn  {x: a.x - b.x, y: a.y - b.y, z: a.z - b.z};\r\n\t},\r\n\r\n\t_crossProduct: function(x, y, z, u, v, w){\r\n\t\t// summary:\r\n\t\t//\t\tapplies a cross product of two vectors, (x, y, z) and (u, v, w)\r\n\t\t// x: Number\r\n\t\t//\t\tx coordinate of first vector\r\n\t\t// y: Number\r\n\t\t//\t\ty coordinate of first vector\r\n\t\t// z: Number\r\n\t\t//\t\tz coordinate of first vector\r\n\t\t// u: Number\r\n\t\t//\t\tx coordinate of second vector\r\n\t\t// v: Number\r\n\t\t//\t\ty coordinate of second vector\r\n\t\t// w: Number\r\n\t\t//\t\tz coordinate of second vector\r\n\t\treturn {x: y * w - z * v, y: z * u - x * w, z: x * v - y * u}; // Object\r\n\t},\r\n\r\n\tcrossProduct: function(/* Number||Point */ a, /* Number||Point */ b, /* Number, optional */ c, /* Number, optional */ d, /* Number, optional */ e, /* Number, optional */ f){\r\n\t\t// summary:\r\n\t\t//\t\tapplies a matrix to a point\r\n\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t//\t\ta 3D matrix object to be applied\r\n\t\t// a: Number|Point\r\n\t\t//\t\tx coordinate of first point, or the whole first point\r\n\t\t// b: Number|Point\r\n\t\t//\t\ty coordinate of first point, or the whole second point\r\n\t\t// c: Number\r\n\t\t//\t\tz coordinate of first point\r\n\t\t// d: Number\r\n\t\t//\t\tx coordinate of second point\r\n\t\t// e: Number\r\n\t\t//\t\ty coordinate of second point\r\n\t\t// f: Number\r\n\t\t//\t\tz coordinate of second point\r\n\t\tif(arguments.length == 6 && arrayUtil.every(arguments, function(item){ return typeof item == \"number\"; })){\r\n\t\t\treturn gfx3d.vector._crossProduct(a, b, c, d, e, f); // Object\r\n\t\t}\r\n\r\n\t\treturn gfx3d.vector._crossProduct(a.x, a.y, a.z, b.x, b.y, b.z); // Object\r\n\t},\r\n\r\n\t_dotProduct: function(x, y, z, u, v, w){\r\n\t\t// summary:\r\n\t\t//\t\tapplies a cross product of two vectors, (x, y, z) and (u, v, w)\r\n\t\t// x: Number\r\n\t\t//\t\tx coordinate of first point\r\n\t\t// y: Number\r\n\t\t//\t\ty coordinate of first point\r\n\t\t// z: Number\r\n\t\t//\t\tz coordinate of first point\r\n\t\t// u: Number\r\n\t\t//\t\tx coordinate of second point\r\n\t\t// v: Number\r\n\t\t//\t\ty coordinate of second point\r\n\t\t// w: Number\r\n\t\t//\t\tz coordinate of second point\r\n\t\treturn x * u + y * v + z * w; // Number\r\n\t},\r\n\tdotProduct: function(a, b, c, d, e, f){\r\n\t\t// summary:\r\n\t\t//\t\tapplies a matrix to a point\r\n\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t//\t\ta 3D matrix object to be applied\r\n\t\t// a: Number|Point\r\n\t\t//\t\tx coordinate of first point, or the whole first Point\r\n\t\t// b: Number|Point\r\n\t\t//\t\ty coordinate of first Point, or the whole second Point\r\n\t\t// c: Number?\r\n\t\t//\t\tz coordinate of first point\r\n\t\t// d: Number?\r\n\t\t//\t\tx coordinate of second point\r\n\t\t// e: Number?\r\n\t\t//\t\ty coordinate of second point\r\n\t\t// f: Number?\r\n\t\t//\t\tz coordinate of second point\r\n\t\tif(arguments.length == 6 && arrayUtil.every(arguments, function(item){ return typeof item == \"number\"; })){\r\n\t\t\treturn gfx3d.vector._dotProduct(a, b, c, d, e, f); // Object\r\n\t\t}\r\n\t\treturn gfx3d.vector._dotProduct(a.x, a.y, a.z, b.x, b.y, b.z); // Object\r\n\t},\r\n\r\n\tnormalize: function(/* Point||Array*/ a, /* Point */ b, /* Point */ c){\r\n\t\t// summary:\r\n\t\t//\t\tfind the normal of the implicit surface\r\n\t\t// a: Object\r\n\t\t//\t\ta point\r\n\t\t// b: Object\r\n\t\t//\t\ta point\r\n\t\t// c: Object\r\n\t\t//\t\ta point\r\n\t\tvar l, m, n;\r\n\t\tif(a instanceof Array){\r\n\t\t\tl = a[0]; m = a[1]; n = a[2];\r\n\t\t}else{\r\n\t\t\tl = a; m = b; n = c;\r\n\t\t}\r\n\r\n\t\tvar u = gfx3d.vector.substract(m, l);\r\n\t\tvar v = gfx3d.vector.substract(n, l);\r\n\t\treturn gfx3d.vector.crossProduct(u, v);\r\n\t}\r\n};\r\n\treturn gfx3d.vector;\r\n});\r\n"]}