{"version":3,"sources":["gfx3d/gradient.js"],"names":["define","lang","m","v","gfx3d","getObject","dist","a","b","Math","sqrt","pow","x","y","gradient","model","material","center","radius","from","to","matrix","mx","normalize","f","multiplyPoint","cos","sin","z","t","c","step","r","mod","type","fin","finish","pmt","color","colors","offset","call","substract","p","df","dt","push","x1","y1","x2","y2"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAkB,WAAW,YACpC,SAASC,EAAKC,EAAEC,GAEhB,IAAIC,EAAQH,EAAKI,UAAU,eAAc,GAErCC,EAAO,SAASC,EAAGC,GAAI,OAAOC,KAAKC,KAAKD,KAAKE,IAAIH,EAAEI,EAAIL,EAAEK,EAAG,GAAKH,KAAKE,IAAIH,EAAEK,EAAIN,EAAEM,EAAG,KAwCzF,OArCAT,EAAMU,SAAW,SAASC,EAAOC,EAAUC,EAAQC,EAAQC,EAAMC,EAAIC,GA2BpE,IAPA,IAAIC,EAAKpB,EAAEqB,UAAUF,GACpBG,EAAItB,EAAEuB,cAAcH,EAAIJ,EAAST,KAAKiB,IAAIP,GAAQF,EAAOL,EAAGM,EAAST,KAAKkB,IAAIR,GAAQF,EAAOJ,EAAGI,EAAOW,GACvGC,EAAI3B,EAAEuB,cAAcH,EAAIJ,EAAST,KAAKiB,IAAIN,GAAQH,EAAOL,EAAGM,EAAST,KAAKkB,IAAIP,GAAQH,EAAOJ,EAAGI,EAAOW,GACvGE,EAAI5B,EAAEuB,cAAcH,EAAIL,EAAOL,EAAGK,EAAOJ,EAAGI,EAAOW,GAAIG,GAAQX,EAAKD,GAzB9D,GAyByEa,EAAI1B,EAAKkB,EAAGK,GAAK,EAChGI,EAAMlB,EAAMC,EAASkB,MAAOC,EAAMnB,EAASoB,OAAQC,EAAMrB,EAASsB,MAClEC,IAAWC,OAAQ,EAAGF,MAAOL,EAAIQ,KAAK1B,EAAOZ,EAAEuC,UAAUlB,EAAGM,GAAIK,EAAKE,KAE9D9B,EAAIY,EAAOY,EAAMxB,EAAIa,EAAIb,GAAKwB,EAAK,CAC1C,IAAIY,EAAIzC,EAAEuB,cAAcH,EAAIJ,EAAST,KAAKiB,IAAInB,GAAKU,EAAOL,EAAGM,EAAST,KAAKkB,IAAIpB,GAAKU,EAAOJ,EAAGI,EAAOW,GACpGgB,EAAKtC,EAAKkB,EAAGmB,GAAIE,EAAKvC,EAAKuB,EAAGc,GAC/BJ,EAAOO,MAAMN,OAAQI,GAAMA,EAAKC,GAAKP,MAAOL,EAAIQ,KAAK1B,EAAOZ,EAAEuC,UAAUC,EAAGb,GAAIK,EAAKE,KAIrF,OAFAE,EAAOO,MAAMN,OAAQ,EAAGF,MAAOL,EAAIQ,KAAK1B,EAAOZ,EAAEuC,UAAUb,EAAGC,GAAIK,EAAKE,MAE/DH,KAAM,SAAUa,GAAI,EAAGC,IAAKhB,EAAGiB,GAAI,EAAGC,GAAIlB,EAAGO,OAAQA,IAGvDnC,EAAMU","file":"../../gfx3d/gradient.js","sourcesContent":["define([\"dojo/_base/lang\",\"./matrix\",\"./vector\"], \r\n\tfunction(lang,m,v){\r\n\r\n\tvar gfx3d = lang.getObject(\"dojox.gfx3d\",true);\r\n\r\n\tvar dist = function(a, b){ return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2)); };\r\n\tvar N = 32;\r\n\r\n\tgfx3d.gradient = function(model, material, center, radius, from, to, matrix){\r\n\t\t// summary:\r\n\t\t//\t\tcalculate a cylindrical gradient\r\n\t\t// model: dojox.gfx3d.lighting.Model\r\n\t\t//\t\tcolor model\r\n\t\t// material: Object\r\n\t\t//\t\tdefines visual properties\r\n\t\t// center: Object\r\n\t\t//\t\tcenter of the cylinder's bottom\r\n\t\t// radius: Number\r\n\t\t//\t\tradius of the cylinder\r\n\t\t// from: Number\r\n\t\t//\t\tfrom position in radians\r\n\t\t// to: Number\r\n\t\t//\t\tfrom position in radians\r\n\t\t// matrix: dojox.gfx3d.Matrix3D\r\n\t\t//\t\tthe cumulative transformation matrix\r\n\t\t// tolerance: Number\r\n\t\t//\t\ttolerable difference in colors between gradient steps\r\n\r\n\t\tvar mx = m.normalize(matrix),\r\n\t\t\tf = m.multiplyPoint(mx, radius * Math.cos(from) + center.x, radius * Math.sin(from) + center.y, center.z),\r\n\t\t\tt = m.multiplyPoint(mx, radius * Math.cos(to)   + center.x, radius * Math.sin(to)   + center.y, center.z),\r\n\t\t\tc = m.multiplyPoint(mx, center.x, center.y, center.z), step = (to - from) / N, r = dist(f, t) / 2,\r\n\t\t\tmod = model[material.type], fin = material.finish, pmt = material.color,\r\n\t\t\tcolors = [{offset: 0, color: mod.call(model, v.substract(f, c), fin, pmt)}];\r\n\r\n\t\tfor(var a = from + step; a < to; a += step){\r\n\t\t\tvar p = m.multiplyPoint(mx, radius * Math.cos(a) + center.x, radius * Math.sin(a) + center.y, center.z),\r\n\t\t\t\tdf = dist(f, p), dt = dist(t, p);\r\n\t\t\tcolors.push({offset: df / (df + dt), color: mod.call(model, v.substract(p, c), fin, pmt)});\r\n\t\t}\r\n\t\tcolors.push({offset: 1, color: mod.call(model, v.substract(t, c), fin, pmt)});\r\n\r\n\t\treturn {type: \"linear\", x1: 0, y1: -r, x2: 0, y2: r, colors: colors};\r\n\t};\r\n\r\n\treturn gfx3d.gradient;\r\n});"]}