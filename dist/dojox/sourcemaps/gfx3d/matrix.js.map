{"version":3,"sources":["gfx3d/matrix.js"],"names":["define","lang","gfx3d","matrix","_degToRad","degree","Math","PI","_radToDeg","radian","Matrix3D","arg","this","xx","yy","zz","Array","length","m","normalize","i","l","r","xy","yx","xz","zx","zy","yz","dx","dy","dz","mixin","extend","identity","translate","a","b","c","arguments","x","y","z","scale","rotateX","angle","cos","s","sin","rotateXg","rotateY","rotateYg","rotateZ","rotateZg","cameraTranslate","cameraRotateX","cameraRotateXg","cameraRotateY","cameraRotateYg","dojox","cameraRotateZ","cameraRotateZg","clone","obj","invert","D","_multiplyPoint","multiplyPoint","multiply","_project","project"],"mappings":"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","file":"../../gfx3d/matrix.js","sourcesContent":["define([\"dojo/_base/lang\", \"./_base\"], function(lang, gfx3d){\r\n\t\r\n\t// candidates for dojox.math:\r\n\tgfx3d.matrix = {\r\n\t\t_degToRad : function(degree){ return Math.PI * degree / 180; },\r\n\t\t_radToDeg : function(radian){ return radian / Math.PI * 180; }\r\n\t};\r\n\t\r\n\tgfx3d.matrix.Matrix3D = function(arg){\r\n\t\t// summary:\r\n\t\t//\t\ta 3D matrix object\r\n\t\t// description:\r\n\t\t//\t\tNormalizes a 3D matrix-like object. If arrays is passed,\r\n\t\t//\t\tall objects of the array are normalized and multiplied sequentially.\r\n\t\t// arg: Object\r\n\t\t//\t\ta 3D matrix-like object, a number, or an array of such objects\r\n\t\tif(arg){\r\n\t\t\tif(typeof arg == \"number\"){\r\n\t\t\t\tthis.xx = this.yy = this.zz = arg;\r\n\t\t\t}else if(arg instanceof Array){\r\n\t\t\t\tif(arg.length > 0){\r\n\t\t\t\t\tvar m = gfx3d.matrix.normalize(arg[0]);\r\n\t\t\t\t\t// combine matrices\r\n\t\t\t\t\tfor(var i = 1; i < arg.length; ++i){\r\n\t\t\t\t\t\tvar l = m;\r\n\t\t\t\t\t\tvar r = gfx3d.matrix.normalize(arg[i]);\r\n\t\t\t\t\t\tm = new gfx3d.matrix.Matrix3D();\r\n\t\t\t\t\t\tm.xx = l.xx * r.xx + l.xy * r.yx + l.xz * r.zx;\r\n\t\t\t\t\t\tm.xy = l.xx * r.xy + l.xy * r.yy + l.xz * r.zy;\r\n\t\t\t\t\t\tm.xz = l.xx * r.xz + l.xy * r.yz + l.xz * r.zz;\r\n\t\t\t\t\t\tm.yx = l.yx * r.xx + l.yy * r.yx + l.yz * r.zx;\r\n\t\t\t\t\t\tm.yy = l.yx * r.xy + l.yy * r.yy + l.yz * r.zy;\r\n\t\t\t\t\t\tm.yz = l.yx * r.xz + l.yy * r.yz + l.yz * r.zz;\r\n\t\t\t\t\t\tm.zx = l.zx * r.xx + l.zy * r.yx + l.zz * r.zx;\r\n\t\t\t\t\t\tm.zy = l.zx * r.xy + l.zy * r.yy + l.zz * r.zy;\r\n\t\t\t\t\t\tm.zz = l.zx * r.xz + l.zy * r.yz + l.zz * r.zz;\r\n\t\t\t\t\t\tm.dx = l.xx * r.dx + l.xy * r.dy + l.xz * r.dz + l.dx;\r\n\t\t\t\t\t\tm.dy = l.yx * r.dx + l.yy * r.dy + l.yz * r.dz + l.dy;\r\n\t\t\t\t\t\tm.dz = l.zx * r.dx + l.zy * r.dy + l.zz * r.dz + l.dz;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlang.mixin(this, m);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tlang.mixin(this, arg);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t// the default (identity) matrix, which is used to fill in missing values\r\n\tlang.extend(gfx3d.matrix.Matrix3D, {xx: 1, xy: 0, xz: 0, yx: 0, yy: 1, yz: 0, zx: 0, zy: 0, zz: 1, dx: 0, dy: 0, dz: 0});\r\n\t\r\n\tlang.mixin(gfx3d.matrix, {\r\n\t\t// summary:\r\n\t\t//\t\tclass constants, and methods of dojox.gfx3d.matrix\r\n\t\t\r\n\t\t// matrix constants\r\n\t\t\r\n\t\t// identity: dojox.gfx3d.matrix.Matrix3D\r\n\t\t//\t\tan identity matrix constant: identity * (x, y, z) == (x, y, z)\r\n\t\tidentity: new gfx3d.matrix.Matrix3D(),\r\n\t\t\r\n\t\t// matrix creators\r\n\t\t\r\n\t\ttranslate: function(a, b, c){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number|Object\r\n\t\t\t//\t\tan x coordinate value, or a point-like object, which specifies offsets for 3 dimensions\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// c: Number?\r\n\t\t\t//\t\ta z coordinate value\r\n\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn new gfx3d.matrix.Matrix3D({dx: a, dy: b, dz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t}\r\n\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({dx: a.x, dy: a.y, dz: a.z}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tscale: function(a, b, c){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number|Object\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for the all coordinates,\r\n\t\t\t//\t\tor a point-like object, which specifies scale factors for 3 dimensions\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number?\r\n\t\t\t//\t\ta scaling factor used for the z coordinate\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn new gfx3d.matrix.Matrix3D({xx: a, yy: b, zz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t}\r\n\t\t\tif(typeof a == \"number\"){\r\n\t\t\t\treturn new gfx3d.matrix.Matrix3D({xx: a, yy: a, zz: a}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t}\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({xx: a.x, yy: a.y, zz: a.z}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateX: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the x axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(angle);\r\n\t\t\tvar s = Math.sin(angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({yy: c, yz: -s, zy: s, zz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateXg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the x axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateX(gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateY: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the y axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(angle);\r\n\t\t\tvar s = Math.sin(angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({xx: c, xz: s, zx: -s, zz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateYg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the y axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateY(gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateZ: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the z axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(angle);\r\n\t\t\tvar s = Math.sin(angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({xx: c, xy: -s, yx: s, yy: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\trotateZg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the z axis)\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateZ() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateZ(gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\r\n\t\t// camera transformation\r\n\t\tcameraTranslate: function(a, b, c){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number|Object\r\n\t\t\t//\t\tan x coordinate value, or a point-like object, which specifies offsets for 3 dimensions\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// c: Number?\r\n\t\t\t//\t\ta z coordinate value\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn new gfx3d.matrix.Matrix3D({dx: -a, dy: -b, dz: -c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t}\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({dx: -a.x, dy: -a.y, dz: -a.z}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateX: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the x axis) in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(-angle);\r\n\t\t\tvar s = Math.sin(-angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({yy: c, yz: -s, zy: s, zz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateXg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the x axis)in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateX(gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateY: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the y axis) in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(-angle);\r\n\t\t\tvar s = Math.sin(-angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({xx: c, xz: s, zx: -s, zz: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateYg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the y axis) in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateY(dojox.gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateZ: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the z axis) in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\tvar c = Math.cos(-angle);\r\n\t\t\tvar s = Math.sin(-angle);\r\n\t\t\treturn new gfx3d.matrix.Matrix3D({xx: c, xy: -s, yx: s, yy: c}); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tcameraRotateZg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix (about the z axis) in cameraTransform manner\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox.gfx3d.matrix.rotateZ() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\treturn gfx3d.matrix.rotateZ(gfx3d.matrix._degToRad(degree)); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\r\n\t\t// ensure matrix 3D conformance\r\n\t\tnormalize: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts an object to a matrix, if necessary\r\n\t\t\t// description:\r\n\t\t\t//\t\tConverts any 3D matrix-like object or an array of\r\n\t\t\t//\t\tsuch objects to a valid dojox.gfx3d.matrix.Matrix3D object.\r\n\t\t\t// matrix: Object\r\n\t\t\t//\t\tan object, which is converted to a matrix, if necessary\r\n\t\t\treturn (matrix instanceof gfx3d.matrix.Matrix3D) ? matrix : new gfx3d.matrix.Matrix3D(matrix); // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\t\r\n\t\t// common operations\r\n\t\t\r\n\t\tclone: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a copy of a 3D matrix\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix-like object to be cloned\r\n\t\t\tvar obj = new gfx3d.matrix.Matrix3D();\r\n\t\t\tfor(var i in matrix){\r\n\t\t\t\tif(typeof(matrix[i]) == \"number\" && typeof(obj[i]) == \"number\" && obj[i] != matrix[i]) obj[i] = matrix[i];\r\n\t\t\t}\r\n\t\t\treturn obj; // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\tinvert: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tinverts a 2D matrix\r\n\t\t\t// matrix: dojox.gfx.matrix.Matrix3D\r\n\t\t\t//\t\ta 2D matrix-like object to be inverted\r\n\t\t\tvar m = gfx3d.matrix.normalize(matrix);\r\n\t\t\tvar D = m.xx * m.yy * m.zz + m.xy * m.yz * m.zx + m.xz * m.yx * m.zy - m.xx * m.yz * m.zy - m.xy * m.yx * m.zz - m.xz * m.yy * m.zx;\r\n\t\t\tvar M = new gfx3d.matrix.Matrix3D({\r\n\t\t\t\txx: (m.yy * m.zz - m.yz * m.zy) / D,\r\n\t\t\t\txy: (m.xz * m.zy - m.xy * m.zz) / D,\r\n\t\t\t\txz: (m.xy * m.yz - m.xz * m.yy) / D,\r\n\t\t\t\tyx: (m.yz * m.zx - m.yx * m.zz) / D,\r\n\t\t\t\tyy: (m.xx * m.zz - m.xz * m.zx) / D,\r\n\t\t\t\tyz: (m.xz * m.yx - m.xx * m.yz) / D,\r\n\t\t\t\tzx: (m.yx * m.zy - m.yy * m.zx) / D,\r\n\t\t\t\tzy: (m.xy * m.zx - m.xx * m.zy) / D,\r\n\t\t\t\tzz: (m.xx * m.yy - m.xy * m.yx) / D,\r\n\t\t\t\tdx: -1 * (m.xy * m.yz * m.dz + m.xz * m.dy * m.zy + m.dx * m.yy * m.zz - m.xy * m.dy * m.zz - m.xz * m.yy * m.dz - m.dx * m.yz * m.zy) / D,\r\n\t\t\t\tdy: (m.xx * m.yz * m.dz + m.xz * m.dy * m.zx + m.dx * m.yx * m.zz - m.xx * m.dy * m.zz - m.xz * m.yx * m.dz - m.dx * m.yz * m.zx) / D,\r\n\t\t\t\tdz: -1 * (m.xx * m.yy * m.dz + m.xy * m.dy * m.zx + m.dx * m.yx * m.zy - m.xx * m.dy * m.zy - m.xy * m.yx * m.dz - m.dx * m.yy * m.zx) / D\r\n\t\t\t});\r\n\t\t\treturn M; // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\t_multiplyPoint: function(m, x, y, z){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix object to be applied\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x coordinate of a point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// z: Number\r\n\t\t\t//\t\ta z coordinate of a point\r\n\t\t\treturn {x: m.xx * x + m.xy * y + m.xz * z + m.dx, y: m.yx * x + m.yy * y + m.yz * z + m.dy, z: m.zx * x + m.zy * y + m.zz * z + m.dz}; // Object\r\n\t\t},\r\n\t\tmultiplyPoint: function(matrix, a,  b, c){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix object to be applied\r\n\t\t\t// a: Number|Object\r\n\t\t\t//\t\tan x coordinate of a point, or an Object specifying the whole point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// c: Number?\r\n\t\t\t//\t\ta z coordinate of a point\r\n\t\t\tvar m = gfx3d.matrix.normalize(matrix);\r\n\t\t\tif(typeof a == \"number\" && typeof b == \"number\" && typeof c == \"number\"){\r\n\t\t\t\treturn gfx3d.matrix._multiplyPoint(m, a, b, c); // Object\r\n\t\t\t}\r\n\t\t\treturn gfx3d.matrix._multiplyPoint(m, a.x, a.y, a.z); // Object\r\n\t\t},\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\t\t\tvar m = gfx3d.matrix.normalize(matrix);\r\n\t\t\t// combine matrices\r\n\t\t\tfor(var i = 1; i < arguments.length; ++i){\r\n\t\t\t\tvar l = m;\r\n\t\t\t\tvar r = gfx3d.matrix.normalize(arguments[i]);\r\n\t\t\t\tm = new gfx3d.matrix.Matrix3D();\r\n\t\t\t\tm.xx = l.xx * r.xx + l.xy * r.yx + l.xz * r.zx;\r\n\t\t\t\tm.xy = l.xx * r.xy + l.xy * r.yy + l.xz * r.zy;\r\n\t\t\t\tm.xz = l.xx * r.xz + l.xy * r.yz + l.xz * r.zz;\r\n\t\t\t\tm.yx = l.yx * r.xx + l.yy * r.yx + l.yz * r.zx;\r\n\t\t\t\tm.yy = l.yx * r.xy + l.yy * r.yy + l.yz * r.zy;\r\n\t\t\t\tm.yz = l.yx * r.xz + l.yy * r.yz + l.yz * r.zz;\r\n\t\t\t\tm.zx = l.zx * r.xx + l.zy * r.yx + l.zz * r.zx;\r\n\t\t\t\tm.zy = l.zx * r.xy + l.zy * r.yy + l.zz * r.zy;\r\n\t\t\t\tm.zz = l.zx * r.xz + l.zy * r.yz + l.zz * r.zz;\r\n\t\t\t\tm.dx = l.xx * r.dx + l.xy * r.dy + l.xz * r.dz + l.dx;\r\n\t\t\t\tm.dy = l.yx * r.dx + l.yy * r.dy + l.yz * r.dz + l.dy;\r\n\t\t\t\tm.dz = l.zx * r.dx + l.zy * r.dy + l.zz * r.dz + l.dz;\r\n\t\t\t}\r\n\t\t\treturn m; // dojox.gfx3d.matrix.Matrix3D\r\n\t\t},\r\n\t\r\n\t\t_project: function(m, x, y, z){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix object to be applied\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x coordinate of a point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// z: Number\r\n\t\t\t//\t\ta z coordinate of a point\r\n\t\t\treturn {\t// Object\r\n\t\t\t\tx: m.xx * x + m.xy * y + m.xz * z + m.dx,\r\n\t\t\t\ty: m.yx * x + m.yy * y + m.yz * z + m.dy,\r\n\t\t\t\tz: m.zx * x + m.zy * y + m.zz * z + m.dz};\r\n\t\t},\r\n\t\tproject: function(matrix, a, b, c){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox.gfx3d.matrix.Matrix3D\r\n\t\t\t//\t\ta 3D matrix object to be applied\r\n\t\t\t// a: Number|Point\r\n\t\t\t//\t\tan x coordinate of a point, or an Object specifying the whole point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// c: Number?\r\n\t\t\t//\t\ta z coordinate of a point\r\n\t\t\tvar m = gfx3d.matrix.normalize(matrix);\r\n\t\t\tif(typeof a == \"number\" && typeof b == \"number\" && typeof c == \"number\"){\r\n\t\t\t\treturn gfx3d.matrix._project(m, a, b, c); // Object\r\n\t\t\t}\r\n\t\t\treturn gfx3d.matrix._project(m, a.x, a.y, a.z); // Object\r\n\t\t}\r\n\t});\r\n\t\r\n\t// propagate matrix up\r\n\tgfx3d.Matrix3D = gfx3d.matrix.Matrix3D;\r\n\t\r\n\treturn gfx3d.matrix;\r\n});"]}