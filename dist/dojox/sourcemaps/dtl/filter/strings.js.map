{"version":3,"sources":["dtl/filter/strings.js"],"names":["define","lang","array","Tokenize","Sprintf","htmlstrings","dd","strings","getObject","mixin","_urlquote","url","safe","token","indexOf","hex","charCodeAt","toString","toUpperCase","length","join","addslashes","value","replace","capfirst","charAt","substring","center","arg","diff","i","cut","RegExp","_fix_ampersands","fix_ampersands","floatformat","parseInt","parseFloat","toFixed","Math","abs","iriencode","linenumbers","line","df","dojox","dtl","filter","lines","split","output","width","push","ljust","_base","escape","lower","toLowerCase","make_list","key","rjust","slugify","_strings","stringformat","strs","Formatter","format","title","last","current","_truncatewords","truncatewords","j","count","test","_truncate_words","_truncate_tag","_truncate_singlets","br","col","link","base","img","param","area","hr","input","truncatewords_html","words","open","all","word","tag","match","closing","tagname","slice","unshift","upper","urlencode","_urlize","_urlize2","urlize","urlizetrunc","matches","exec","middle","startsWww","hasAt","hasColon","startsHttp","startsHttps","firstAlpha","last4","trimmed","wordcount","trim","wordwrap","parts","shift","pos","lastIndexOf"],"mappings":"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","file":"../../../dtl/filter/strings.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojox/string/tokenize\",\r\n\t\"dojox/string/sprintf\",\r\n\t\"../filter/htmlstrings\",\r\n\t\"../_base\"\r\n], function(lang,array,Tokenize,Sprintf,htmlstrings,dd){\r\n\r\n\tvar strings = lang.getObject(\"filter.strings\", true, dd);\r\n\t/*=====\r\n\t strings = {\r\n\t \t// TODO: summary\r\n\t };\r\n\t =====*/\r\n\r\n\tlang.mixin(strings, {\r\n\t\t_urlquote: function(/*String*/ url, /*String?*/ safe){\r\n\t\t\tif(!safe){\r\n\t\t\t\tsafe = \"/\";\r\n\t\t\t}\r\n\t\t\treturn Tokenize(url, /([^\\w-_.])/g, function(token){\r\n\t\t\t\tif(safe.indexOf(token) == -1){\r\n\t\t\t\t\tif(token == \" \"){\r\n\t\t\t\t\t\treturn \"+\";\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tvar hex = token.charCodeAt(0).toString(16).toUpperCase();\r\n\t\t\t\t\t\twhile(hex.length < 2){\r\n\t\t\t\t\t\t\thex = \"0\" + hex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn \"%\" + hex;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn token;\r\n\t\t\t}).join(\"\");\r\n\t\t},\r\n\t\taddslashes: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds slashes - useful for passing strings to JavaScript, for example.\r\n\t\t\treturn value.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\r\n\t\t},\r\n\t\tcapfirst: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCapitalizes the first character of the value\r\n\t\t\tvalue = \"\" + value;\r\n\t\t\treturn value.charAt(0).toUpperCase() + value.substring(1);\r\n\t\t},\r\n\t\tcenter: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCenters the value in a field of a given width\r\n\t\t\targ = arg || value.length;\r\n\t\t\tvalue = value + \"\";\r\n\t\t\tvar diff = arg - value.length;\r\n\t\t\tif(diff % 2){\r\n\t\t\t\tvalue = value + \" \";\r\n\t\t\t\tdiff -= 1;\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < diff; i += 2){\r\n\t\t\t\tvalue = \" \" + value + \" \";\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\tcut: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves all values of arg from the given string\r\n\t\t\targ = arg + \"\" || \"\";\r\n\t\t\tvalue = value + \"\";\r\n\t\t\treturn value.replace(new RegExp(arg, \"g\"), \"\");\r\n\t\t},\r\n\t\t_fix_ampersands: /&(?!(\\w+|#\\d+);)/g,\r\n\t\tfix_ampersands: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReplaces ampersands with ``&amp;`` entities\r\n\t\t\treturn value.replace(strings._fix_ampersands, \"&amp;\");\r\n\t\t},\r\n\t\tfloatformat: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFormat a number according to arg\r\n\t\t\t// description:\r\n\t\t\t//\t\tIf called without an argument, displays a floating point\r\n\t\t\t//\t\tnumber as 34.2 -- but only if there's a point to be displayed.\r\n\t\t\t//\t\tWith a positive numeric argument, it displays that many decimal places\r\n\t\t\t//\t\talways.\r\n\t\t\t//\t\tWith a negative numeric argument, it will display that many decimal\r\n\t\t\t//\t\tplaces -- but only if there's places to be displayed.\r\n\t\t\targ = parseInt(arg || -1, 10);\r\n\t\t\tvalue = parseFloat(value);\r\n\t\t\tvar m = value - value.toFixed(0);\r\n\t\t\tif(!m && arg < 0){\r\n\t\t\t\treturn value.toFixed();\r\n\t\t\t}\r\n\t\t\tvalue = value.toFixed(Math.abs(arg));\r\n\t\t\treturn (arg < 0) ? parseFloat(value) + \"\" : value;\r\n\t\t},\r\n\t\tiriencode: function(value){\r\n\t\t\treturn strings._urlquote(value, \"/#%[]=:;$&()+,!\");\r\n\t\t},\r\n\t\tlinenumbers: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisplays text with line numbers\r\n\t\t\tvar df = dojox.dtl.filter;\r\n\t\t\tvar lines = value.split(\"\\n\");\r\n\t\t\tvar output = [];\r\n\t\t\tvar width = (lines.length + \"\").length;\r\n\t\t\tfor(var i = 0, line; i < lines.length; i++){\r\n\t\t\t\tline = lines[i];\r\n\t\t\t\toutput.push(df.strings.ljust(i + 1, width) + \". \" + dojox.dtl._base.escape(line));\r\n\t\t\t}\r\n\t\t\treturn output.join(\"\\n\");\r\n\t\t},\r\n\t\tljust: function(value, arg){\r\n\t\t\tvalue = value + \"\";\r\n\t\t\targ = parseInt(arg, 10);\r\n\t\t\twhile(value.length < arg){\r\n\t\t\t\tvalue = value + \" \";\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\tlower: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts a string into all lowercase\r\n\t\t\treturn (value + \"\").toLowerCase();\r\n\t\t},\r\n\t\tmake_list: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the value turned into a list. For an integer, it's a list of\r\n\t\t\t//\t\tdigits. For a string, it's a list of characters.\r\n\t\t\tvar output = [];\r\n\t\t\tif(typeof value == \"number\"){\r\n\t\t\t\tvalue = value + \"\";\r\n\t\t\t}\r\n\t\t\tif(value.charAt){\r\n\t\t\t\tfor(var i = 0; i < value.length; i++){\r\n\t\t\t\t\toutput.push(value.charAt(i));\r\n\t\t\t\t}\r\n\t\t\t\treturn output;\r\n\t\t\t}\r\n\t\t\tif(typeof value == \"object\"){\r\n\t\t\t\tfor(var key in value){\r\n\t\t\t\t\toutput.push(value[key]);\r\n\t\t\t\t}\r\n\t\t\t\treturn output;\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t},\r\n\t\trjust: function(value, arg){\r\n\t\t\tvalue = value + \"\";\r\n\t\t\targ = parseInt(arg, 10);\r\n\t\t\twhile(value.length < arg){\r\n\t\t\t\tvalue = \" \" + value;\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\tslugify: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts to lowercase, removes\r\n\t\t\t//\t\tnon-alpha chars and converts spaces to hyphens\r\n\t\t\tvalue = value.replace(/[^\\w\\s-]/g, \"\").toLowerCase();\r\n\t\t\treturn value.replace(/[\\-\\s]+/g, \"-\");\r\n\t\t},\r\n\t\t_strings: {},\r\n\t\tstringformat: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFormats the variable according to the argument, a string formatting specifier.\r\n\t\t\t//\t\tThis specifier uses Python string formatting syntax, with the exception that\r\n\t\t\t//\t\tthe leading \"%\" is dropped.\r\n\t\t\targ = \"\" + arg;\r\n\t\t\tvar strs = strings._strings;\r\n\t\t\tif(!strs[arg]){\r\n\t\t\t\tstrs[arg] = new Sprintf.Formatter(\"%\" + arg);\r\n\t\t\t}\r\n\t\t\treturn strs[arg].format(value);\r\n\t\t},\r\n\t\ttitle: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts a string into titlecase\r\n\t\t\tvar last, title = \"\";\r\n\t\t\tfor(var i = 0, current; i < value.length; i++){\r\n\t\t\t\tcurrent = value.charAt(i);\r\n\t\t\t\tif(last == \" \" || last == \"\\n\" || last == \"\\t\" || !last){\r\n\t\t\t\t\ttitle += current.toUpperCase();\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttitle += current.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tlast = current;\r\n\t\t\t}\r\n\t\t\treturn title;\r\n\t\t},\r\n\t\t_truncatewords: /[ \\n\\r\\t]/,\r\n\t\ttruncatewords: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTruncates a string after a certain number of words\r\n\t\t\t// arg: Integer\r\n\t\t\t//\t\tNumber of words to truncate after\r\n\t\t\targ = parseInt(arg, 10);\r\n\t\t\tif(!arg){\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t\tfor(var i = 0, j = value.length, count = 0, current, last; i < value.length; i++){\r\n\t\t\t\tcurrent = value.charAt(i);\r\n\t\t\t\tif(strings._truncatewords.test(last)){\r\n\t\t\t\t\tif(!strings._truncatewords.test(current)){\r\n\t\t\t\t\t\t++count;\r\n\t\t\t\t\t\tif(count == arg){\r\n\t\t\t\t\t\t\treturn value.substring(0, j + 1) + ' ...';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(!strings._truncatewords.test(current)){\r\n\t\t\t\t\tj = i;\r\n\t\t\t\t}\r\n\t\t\t\tlast = current;\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t},\r\n\t\t_truncate_words: /(&.*?;|<.*?>|(\\w[\\w\\-]*))/g,\r\n\t\t_truncate_tag: /<(\\/)?([^ ]+?)(?: (\\/)| .*?)?>/,\r\n\t\t_truncate_singlets: { br: true, col: true, link: true, base: true, img: true, param: true, area: true, hr: true, input: true },\r\n\t\ttruncatewords_html: function(value, arg){\r\n\t\t\targ = parseInt(arg, 10);\r\n\r\n\t\t\tif(arg <= 0){\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\r\n\t\t\tvar words = 0;\r\n\t\t\tvar open = [];\r\n\r\n\t\t\tvar output = Tokenize(value, strings._truncate_words, function(all, word){\r\n\t\t\t\tif(word){\r\n\t\t\t\t\t// It's an actual non-HTML word\r\n\t\t\t\t\t++words;\r\n\t\t\t\t\tif(words < arg){\r\n\t\t\t\t\t\treturn word;\r\n\t\t\t\t\t}else if(words == arg){\r\n\t\t\t\t\t\treturn word + \" ...\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Check for tag\r\n\t\t\t\tvar tag = all.match(strings._truncate_tag);\r\n\t\t\t\tif(!tag || words >= arg){\r\n\t\t\t\t\t// Don't worry about non tags or tags after our truncate point\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar closing = tag[1];\r\n\t\t\t\tvar tagname = tag[2].toLowerCase();\r\n\t\t\t\tvar selfclosing = tag[3];\r\n\t\t\t\tif(closing || strings._truncate_singlets[tagname]){\r\n\t\t\t\t}else if(closing){\r\n\t\t\t\t\tvar i = array.indexOf(open, tagname);\r\n\t\t\t\t\tif(i != -1){\r\n\t\t\t\t\t\topen = open.slice(i + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\topen.unshift(tagname);\r\n\t\t\t\t}\r\n\t\t\t\treturn all;\r\n\t\t\t}).join(\"\");\r\n\r\n\t\t\toutput = output.replace(/\\s+$/g, \"\");\r\n\r\n\t\t\tfor(var i = 0, tag; tag = open[i]; i++){\r\n\t\t\t\toutput += \"</\" + tag + \">\";\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\t\t},\r\n\t\tupper: function(value){\r\n\t\t\treturn value.toUpperCase();\r\n\t\t},\r\n\t\turlencode: function(value){\r\n\t\t\treturn strings._urlquote(value);\r\n\t\t},\r\n\t\t_urlize: /^((?:[(>]|&lt;)*)(.*?)((?:[.,)>\\n]|&gt;)*)$/,\r\n\t\t_urlize2: /^\\S+@[a-zA-Z0-9._-]+\\.[a-zA-Z0-9._-]+$/,\r\n\t\turlize: function(value){\r\n\t\t\treturn strings.urlizetrunc(value);\r\n\t\t},\r\n\t\turlizetrunc: function(value, arg){\r\n\t\t\targ = parseInt(arg);\r\n\t\t\treturn Tokenize(value, /(\\S+)/g, function(word){\r\n\t\t\t\tvar matches = strings._urlize.exec(word);\r\n\t\t\t\tif(!matches){\r\n\t\t\t\t\treturn word;\r\n\t\t\t\t}\r\n\t\t\t\tvar lead = matches[1];\r\n\t\t\t\tvar middle = matches[2];\r\n\t\t\t\tvar trail = matches[3];\r\n\r\n\t\t\t\tvar startsWww = middle.indexOf(\"www.\") == 0;\r\n\t\t\t\tvar hasAt = middle.indexOf(\"@\") != -1;\r\n\t\t\t\tvar hasColon = middle.indexOf(\":\") != -1;\r\n\t\t\t\tvar startsHttp = middle.indexOf(\"http://\") == 0;\r\n\t\t\t\tvar startsHttps = middle.indexOf(\"https://\") == 0;\r\n\t\t\t\tvar firstAlpha = /[a-zA-Z0-9]/.test(middle.charAt(0));\r\n\t\t\t\tvar last4 = middle.substring(middle.length - 4);\r\n\r\n\t\t\t\tvar trimmed = middle;\r\n\t\t\t\tif(arg > 3){\r\n\t\t\t\t\ttrimmed = trimmed.substring(0, arg - 3) + \"...\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(startsWww || (!hasAt && !startsHttp && middle.length && firstAlpha && (last4 == \".org\" || last4 == \".net\" || last4 == \".com\"))){\r\n\t\t\t\t\treturn '<a href=\"http://' + middle + '\" rel=\"nofollow\">' + trimmed + '</a>';\r\n\t\t\t\t}else if(startsHttp || startsHttps){\r\n\t\t\t\t\treturn '<a href=\"' + middle + '\" rel=\"nofollow\">' + trimmed + '</a>';\r\n\t\t\t\t}else if(hasAt && !startsWww && !hasColon && strings._urlize2.test(middle)){\r\n\t\t\t\t\treturn '<a href=\"mailto:' + middle + '\">' + middle + '</a>';\r\n\t\t\t\t}\r\n\t\t\t\treturn word;\r\n\t\t\t}).join(\"\");\r\n\t\t},\r\n\t\twordcount: function(value){\r\n\t\t\tvalue = lang.trim(value);\r\n\t\t\tif(!value){ return 0; }\r\n\t\t\treturn value.split(/\\s+/g).length;\r\n\t\t},\r\n\t\twordwrap: function(value, arg){\r\n\t\t\targ = parseInt(arg);\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWraps words at specified line length\r\n\t\t\tvar output = [];\r\n\t\t\tvar parts = value.split(/\\s+/g);\r\n\t\t\tif(parts.length){\r\n\t\t\t\tvar word = parts.shift();\r\n\t\t\t\toutput.push(word);\r\n\t\t\t\tvar pos = word.length - word.lastIndexOf(\"\\n\") - 1;\r\n\t\t\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\t\t\tword = parts[i];\r\n\t\t\t\t\tif(word.indexOf(\"\\n\") != -1){\r\n\t\t\t\t\t\tvar lines = word.split(/\\n/g);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tvar lines = [word];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpos += lines[0].length + 1;\r\n\t\t\t\t\tif(arg && pos > arg){\r\n\t\t\t\t\t\toutput.push(\"\\n\");\r\n\t\t\t\t\t\tpos = lines[lines.length - 1].length;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\toutput.push(\" \");\r\n\t\t\t\t\t\tif(lines.length > 1){\r\n\t\t\t\t\t\t\tpos = lines[lines.length - 1].length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput.push(word);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn output.join(\"\");\r\n\t\t}\r\n\t});\r\n\r\n\treturn strings;\r\n});"]}