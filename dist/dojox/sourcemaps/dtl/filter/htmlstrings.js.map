{"version":3,"sources":["dtl/filter/htmlstrings.js"],"names":["define","lang","dd","htmlstrings","getObject","mixin","_linebreaksrn","_linebreaksn","_linebreakss","_linebreaksbr","_removetagsfind","_striptags","linebreaks","value","output","dh","parts","replace","split","i","length","part","push","join","linebreaksbr","removetags","arg","group","tags","exec","RegExp","striptags","dojox","dtl","filter"],"mappings":";;;;;;;AAAAA,QACC,kBACA,YACE,SAASC,EAAKC,GAEhB,IAAIC,EAAcF,EAAKG,UAAU,sBAAsB,EAAMF,GAqD7D,OA9CAD,EAAKI,MAAMF,GACVG,cAAe,eACfC,aAAc,UACdC,aAAc,eACdC,cAAe,MACfC,gBAAiB,aACjBC,WAAY,YACZC,WAAY,SAASC,GAOpB,IAJA,IAAIC,KACAC,EAAKZ,EAELa,GADJH,EAAQA,EAAMI,QAAQF,EAAGT,cAAe,OACtBY,MAAMH,EAAGR,cACnBY,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAI,CACpC,IAAIE,EAAOL,EAAMG,GAAGF,QAAQF,EAAGP,aAAc,IAAIS,QAAQF,EAAGN,cAAe,UAC3EK,EAAOQ,KAAK,MAAQD,EAAO,QAG5B,OAAOP,EAAOS,KAAK,SAEpBC,aAAc,SAASX,GAGtB,IAAIE,EAAKZ,EACT,OAAOU,EAAMI,QAAQF,EAAGT,cAAe,MAAMW,QAAQF,EAAGN,cAAe,WAExEgB,WAAY,SAASZ,EAAOa,GAM3B,IAHA,IAEIC,EAFAZ,EAAKZ,EACLyB,KAEED,EAAQZ,EAAGL,gBAAgBmB,KAAKH,IACrCE,EAAKN,KAAKK,EAAM,IAGjB,OADAC,EAAO,IAAMA,EAAKL,KAAK,KAAO,IACvBV,EAAMI,QAAQ,IAAIa,OAAO,QAAWF,EAAO,WAAa,MAAO,KAEvEG,UAAW,SAASlB,GAGnB,OAAOA,EAAMI,QAAQe,MAAMC,IAAIC,OAAO/B,YAAYQ,WAAY,OAIzDR","file":"../../../dtl/filter/htmlstrings.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"../_base\"\r\n], function(lang,dd){\r\n\r\n\tvar htmlstrings = lang.getObject(\"filter.htmlstrings\", true, dd);\r\n/*=====\r\n\thtmlstrings = {\r\n\t\t// TODO: summary\r\n\t};\r\n=====*/\r\n\r\n\tlang.mixin(htmlstrings, {\r\n\t\t_linebreaksrn: /(\\r\\n|\\n\\r)/g,\r\n\t\t_linebreaksn: /\\n{2,}/g,\r\n\t\t_linebreakss: /(^\\s+|\\s+$)/g,\r\n\t\t_linebreaksbr: /\\n/g,\r\n\t\t_removetagsfind: /[a-z0-9]+/g,\r\n\t\t_striptags: /<[^>]*?>/g,\r\n\t\tlinebreaks: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts newlines into `<p>` and `<br />`s\r\n\t\t\tvar output = [];\r\n\t\t\tvar dh = htmlstrings;\r\n\t\t\tvalue = value.replace(dh._linebreaksrn, \"\\n\");\r\n\t\t\tvar parts = value.split(dh._linebreaksn);\r\n\t\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\t\tvar part = parts[i].replace(dh._linebreakss, \"\").replace(dh._linebreaksbr, \"<br />\");\r\n\t\t\t\toutput.push(\"<p>\" + part + \"</p>\");\r\n\t\t\t}\r\n\r\n\t\t\treturn output.join(\"\\n\\n\");\r\n\t\t},\r\n\t\tlinebreaksbr: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts newlines into `<br />`s\r\n\t\t\tvar dh = htmlstrings;\r\n\t\t\treturn value.replace(dh._linebreaksrn, \"\\n\").replace(dh._linebreaksbr, \"<br />\");\r\n\t\t},\r\n\t\tremovetags: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves a space separated list of [X]HTML tags from the output\"\r\n\t\t\tvar dh = htmlstrings;\r\n\t\t\tvar tags = [];\r\n\t\t\tvar group;\r\n\t\t\twhile(group = dh._removetagsfind.exec(arg)){\r\n\t\t\t\ttags.push(group[0]);\r\n\t\t\t}\r\n\t\t\ttags = \"(\" + tags.join(\"|\") + \")\";\r\n\t\t\treturn value.replace(new RegExp(\"</?\\s*\" + tags + \"\\s*[^>]*>\", \"gi\"), \"\");\r\n\t\t},\r\n\t\tstriptags: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStrips all [X]HTML tags\r\n\t\t\treturn value.replace(dojox.dtl.filter.htmlstrings._striptags, \"\");\r\n\t\t}\r\n\t});\r\n\r\n\treturn htmlstrings;\r\n});"]}