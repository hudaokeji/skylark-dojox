{"version":3,"sources":["dtl/filter/integers.js"],"names":["define","lang","dd","integers","getObject","mixin","add","value","arg","parseInt","isNaN","get_digit","length","charAt"],"mappings":";;;;;;;AAAAA,QACC,kBACA,YACE,SAASC,EAAKC,GAEhB,IAAIC,EAAWF,EAAKG,UAAU,mBAAmB,EAAMF,GAkCvD,OA3BAD,EAAKI,MAAMF,GACVG,IAAK,SAASC,EAAOC,GAGpB,OAFAD,EAAQE,SAASF,EAAO,IACxBC,EAAMC,SAASD,EAAK,IACbE,MAAMF,GAAOD,EAAQA,EAAQC,GAErCG,UAAW,SAASJ,EAAOC,GAiB1B,OAVAD,EAAQE,SAASF,EAAO,KACxBC,EAAMC,SAASD,EAAK,IAAM,IAChB,IAGRD,EADEC,GADHD,GAAS,IACMK,OACNH,SAASF,EAAMM,OAAOL,GAAM,IAE5B,GAGFE,MAAMH,GAAS,EAAIA,KAItBJ","file":"../../../dtl/filter/integers.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"../_base\"\r\n], function(lang,dd){\r\n\r\n\tvar integers = lang.getObject(\"filter.integers\", true, dd);\r\n\t/*=====\r\n\t integers = {\r\n\t \t// TODO: summary\r\n\t };\r\n\t =====*/\r\n\r\n\tlang.mixin(integers, {\r\n\t\tadd: function(value, arg){\r\n\t\t\tvalue = parseInt(value, 10);\r\n\t\t\targ = parseInt(arg, 10);\r\n\t\t\treturn isNaN(arg) ? value : value + arg;\r\n\t\t},\r\n\t\tget_digit: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGiven a whole number, returns the 1-based requested digit of it\r\n\t\t\t// desciprtion:\r\n\t\t\t//\t\t1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the\r\n\t\t\t//\t\toriginal value for invalid input (if input or argument is not an integer,\r\n\t\t\t//\t\tor if argument is less than 1). Otherwise, output is always an integer.\r\n\t\t\tvalue = parseInt(value, 10);\r\n\t\t\targ = parseInt(arg, 10) - 1;\r\n\t\t\tif(arg >= 0){\r\n\t\t\t\tvalue += \"\";\r\n\t\t\t\tif(arg < value.length){\r\n\t\t\t\t\tvalue = parseInt(value.charAt(arg), 10);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn (isNaN(value) ? 0 : value);\r\n\t\t}\r\n\t});\r\n\r\n\treturn integers;\r\n});"]}