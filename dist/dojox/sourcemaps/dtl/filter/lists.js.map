{"version":3,"sources":["dtl/filter/lists.js"],"names":["define","lang","dd","lists","getObject","mixin","_dictsort","a","b","dictsort","value","arg","i","item","items","isArray","obj","key","push","length","dojox","dtl","_Filter","resolve","_Context","var","sort","filter","output","dictsortreversed","reverse","first","join","isNaN","length_is","parseInt","random","Math","floor","slice","parts","split","bits","_unordered_list","tabs","ddl","indent","recurse","unordered_list"],"mappings":";;;;;;;AAAAA,QACC,kBACA,YACE,SAASC,EAAKC,GAEhB,IAAIC,EAAQF,EAAKG,UAAU,gBAAgB,EAAMF,GAqJjD,OA9IAD,EAAKI,MAAMF,GACVG,UAAW,SAASC,EAAGC,GACtB,OAAGD,EAAE,IAAMC,EAAE,GACL,EAEAD,EAAE,GAAKC,EAAE,IAAO,EAAI,GAE7BC,SAAU,SAASC,EAAOC,GAGzB,IAAIA,EACH,OAAOD,EAGR,IAAIE,EAAGC,EAAMC,KACb,IAAIb,EAAKc,QAAQL,GAAO,CACvB,IAAIM,EAAMN,EAAOA,KACjB,IAAI,IAAIO,KAAOD,EACdN,EAAMQ,KAAKF,EAAIC,IAGjB,IAAIL,EAAI,EAAGA,EAAIF,EAAMS,OAAQP,IAC5BE,EAAMI,MAAM,IAAIE,MAAMC,IAAIC,QAAQ,OAASX,GAAKY,QAAQ,IAAIH,MAAMC,IAAIG,UAAWC,IAAQf,EAAME,MAAOF,EAAME,KAE7GE,EAAMY,KAAKN,MAAMC,IAAIM,OAAOxB,MAAMG,WAClC,IAAIsB,KACJ,IAAIhB,EAAI,EAAGC,EAAOC,EAAMF,GAAIA,IAC3BgB,EAAOV,KAAKL,EAAK,IAElB,OAAOe,GAERC,iBAAkB,SAASnB,EAAOC,GAGjC,OAAIA,EAEWS,MAAMC,IAAIM,OAAOxB,MAAMM,SAASC,EAAOC,GACtCmB,UAHApB,GAKjBqB,MAAO,SAASrB,GAGf,OAAQA,EAAY,OAAIA,EAAM,GAAK,IAEpCsB,KAAM,SAAStB,EAAOC,GAOrB,OAAOD,EAAMsB,KAAKrB,GAAO,MAE1BQ,OAAQ,SAAST,GAGhB,OAAQuB,MAAMvB,EAAMS,SAAYT,EAAQ,IAAIS,OAAST,EAAMS,QAE5De,UAAW,SAASxB,EAAOC,GAG1B,OAAOD,EAAMS,QAAUgB,SAASxB,IAEjCyB,OAAQ,SAAS1B,GAGhB,OAAOA,EAAM2B,KAAKC,MAAMD,KAAKD,SAAW1B,EAAMS,UAE/CoB,MAAO,SAAS7B,EAAOC,GAWtB,IAFA,IAAI6B,GADJ7B,EAAMA,GAAO,IACG8B,MAAM,KAClBC,KACI9B,EAAI,EAAGA,EAAI4B,EAAMrB,OAAQP,IAC5B4B,EAAM5B,GAAGO,OAGZuB,EAAKxB,KAAKiB,SAASK,EAAM5B,KAFzB8B,EAAKxB,KAAK,MAmBZ,OAbe,OAAZwB,EAAK,KACPA,EAAK,GAAK,GAERA,EAAK,GAAK,IACZA,EAAK,GAAKhC,EAAMS,OAASuB,EAAK,KAE5BA,EAAKvB,OAAS,GAAiB,OAAZuB,EAAK,MAC1BA,EAAK,GAAKhC,EAAMS,QAEduB,EAAK,GAAK,IACZA,EAAK,GAAKhC,EAAMS,OAASuB,EAAK,IAGxBhC,EAAM6B,MAAMG,EAAK,GAAIA,EAAK,KAElCC,gBAAiB,SAASjC,EAAOkC,GAChC,IACIhC,EADAiC,EAAMzB,MAAMC,IAAIM,OAAOxB,MACpB2C,EAAS,GAChB,IAAIlC,EAAI,EAAGA,EAAIgC,EAAMhC,IACpBkC,GAAU,KAEX,GAAGpC,EAAM,IAAMA,EAAM,GAAGS,OAAO,CAC9B,IAAI4B,KACJ,IAAInC,EAAI,EAAGA,EAAIF,EAAM,GAAGS,OAAQP,IAC/BmC,EAAQ7B,KAAK2B,EAAIF,gBAAgBjC,EAAM,GAAGE,GAAIgC,EAAO,IAEtD,OAAOE,EAAS,OAASpC,EAAM,GAAK,KAAOoC,EAAS,SAAWC,EAAQf,KAAK,MAAQ,KAAOc,EAAS,UAAYA,EAAS,QAEzH,OAAOA,EAAS,OAASpC,EAAM,GAAK,SAGtCsC,eAAgB,SAAStC,GAoBxB,OAAOP,EAAMwC,gBAAgBjC,EAAO,MAI/BP","file":"../../../dtl/filter/lists.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"../_base\"\r\n], function(lang,dd){\r\n\r\n\tvar lists = lang.getObject(\"filter.lists\", true, dd);\r\n\t/*=====\r\n\t lists = {\r\n\t \t// TODO: summary\r\n\t };\r\n\t =====*/\r\n\r\n\tlang.mixin(lists, {\r\n\t\t_dictsort: function(a, b){\r\n\t\t\tif(a[0] == b[0]){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn (a[0] < b[0]) ? -1 : 1;\r\n\t\t},\r\n\t\tdictsort: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a list of dicts, returns that list sorted by the property given in the argument.\r\n\t\t\tif(!arg){\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\r\n\t\t\tvar i, item, items = [];\r\n\t\t\tif(!lang.isArray(value)){\r\n\t\t\t\tvar obj = value, value = [];\r\n\t\t\t\tfor(var key in obj){\r\n\t\t\t\t\tvalue.push(obj[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < value.length; i++){\r\n\t\t\t\titems.push([new dojox.dtl._Filter('var.' + arg).resolve(new dojox.dtl._Context({ 'var' : value[i]})), value[i]]);\r\n\t\t\t}\r\n\t\t\titems.sort(dojox.dtl.filter.lists._dictsort);\r\n\t\t\tvar output = [];\r\n\t\t\tfor(i = 0; item = items[i]; i++){\r\n\t\t\t\toutput.push(item[1]);\r\n\t\t\t}\r\n\t\t\treturn output;\r\n\t\t},\r\n\t\tdictsortreversed: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a list of dicts, returns that list sorted in reverse order by the property given in the argument.\r\n\t\t\tif(!arg) return value;\r\n\r\n\t\t\tvar dictsort = dojox.dtl.filter.lists.dictsort(value, arg);\r\n\t\t\treturn dictsort.reverse();\r\n\t\t},\r\n\t\tfirst: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the first item in a list\r\n\t\t\treturn (value.length) ? value[0] : \"\";\r\n\t\t},\r\n\t\tjoin: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tJoins a list with a string, like Python's ``str.join(list)``\r\n\t\t\t// description:\r\n\t\t\t//\t\tDjango throws a compile error, but JS can't do arg checks\r\n\t\t\t//\t\tso we're left with run time errors, which aren't wise for something\r\n\t\t\t//\t\tas trivial here as an empty arg.\r\n\t\t\treturn value.join(arg || \",\");\r\n\t\t},\r\n\t\tlength: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the length of the value - useful for lists\r\n\t\t\treturn (isNaN(value.length)) ? (value + \"\").length : value.length;\r\n\t\t},\r\n\t\tlength_is: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a boolean of whether the value's length is the argument\r\n\t\t\treturn value.length == parseInt(arg);\r\n\t\t},\r\n\t\trandom: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a random item from the list\r\n\t\t\treturn value[Math.floor(Math.random() * value.length)];\r\n\t\t},\r\n\t\tslice: function(value, arg){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a slice of the list.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUses the same syntax as Python's list slicing; see\r\n\t\t\t//\t\thttp://www.diveintopython.net/native_data_types/lists.html#odbchelper.list.slice\r\n\t\t\t//\t\tfor an introduction.\r\n\t\t\t//\t\tAlso uses the optional third value to denote every X item.\r\n\t\t\targ = arg || \"\";\r\n\t\t\tvar parts = arg.split(\":\");\r\n\t\t\tvar bits = [];\r\n\t\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\t\tif(!parts[i].length){\r\n\t\t\t\t\tbits.push(null);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbits.push(parseInt(parts[i]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(bits[0] === null){\r\n\t\t\t\tbits[0] = 0;\r\n\t\t\t}\r\n\t\t\tif(bits[0] < 0){\r\n\t\t\t\tbits[0] = value.length + bits[0];\r\n\t\t\t}\r\n\t\t\tif(bits.length < 2 || bits[1] === null){\r\n\t\t\t\tbits[1] = value.length;\r\n\t\t\t}\r\n\t\t\tif(bits[1] < 0){\r\n\t\t\t\tbits[1] = value.length + bits[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn value.slice(bits[0], bits[1]);\r\n\t\t},\r\n\t\t_unordered_list: function(value, tabs){\r\n\t\t\tvar ddl = dojox.dtl.filter.lists;\r\n\t\t\tvar i, indent = \"\";\r\n\t\t\tfor(i = 0; i < tabs; i++){\r\n\t\t\t\tindent += \"\\t\";\r\n\t\t\t}\r\n\t\t\tif(value[1] && value[1].length){\r\n\t\t\t\tvar recurse = [];\r\n\t\t\t\tfor(i = 0; i < value[1].length; i++){\r\n\t\t\t\t\trecurse.push(ddl._unordered_list(value[1][i], tabs + 1))\r\n\t\t\t\t}\r\n\t\t\t\treturn indent + \"<li>\" + value[0] + \"\\n\" + indent + \"<ul>\\n\" + recurse.join(\"\\n\") + \"\\n\" + indent + \"</ul>\\n\" + indent + \"</li>\";\r\n\t\t\t}else{\r\n\t\t\t\treturn indent + \"<li>\" + value[0] + \"</li>\";\r\n\t\t\t}\r\n\t\t},\r\n\t\tunordered_list: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRecursively takes a self-nested list and returns an HTML unordered list --\r\n\t\t\t//\t\tWITHOUT opening and closing `<ul>` tags.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe list is assumed to be in the proper format. For example, if ``var`` contains\r\n\t\t\t//\t\t``['States', [['Kansas', [['Lawrence', []], ['Topeka', []]]], ['Illinois', []]]]``,\r\n\t\t\t//\t\tthen ``{{ var|unordered_list }}`` would return::\r\n\t\t\t//\r\n\t\t\t//\t\t|\t<li>States\r\n\t\t\t//\t\t|\t<ul>\r\n\t\t\t//\t\t|\t\t<li>Kansas\r\n\t\t\t//\t\t|\t\t<ul>\r\n\t\t\t//\t\t|\t\t\t<li>Lawrence</li>\r\n\t\t\t//\t\t|\t\t\t<li>Topeka</li>\r\n\t\t\t//\t\t|\t\t</ul>\r\n\t\t\t//\t\t|\t\t</li>\r\n\t\t\t//\t\t|\t\t<li>Illinois</li>\r\n\t\t\t//\t\t|\t</ul>\r\n\t\t\t//\t\t|\t</li>\r\n\t\t\treturn lists._unordered_list(value, 1);\r\n\t\t}\r\n\t});\r\n\r\n\treturn lists;\r\n});"]}