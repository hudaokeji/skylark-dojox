{"version":3,"sources":["dtl/tag/loop.js"],"names":["define","lang","array","json","dd","Tokenize","ddtl","getObject","CycleNode","extend","cyclevars","name","text","shared","this","contents","counter","map","render","context","buffer","forloop","counter0","value","length","_Filter","resolve","set","unrender","clone","constructor","IfChangedNode","nodes","vars","_vars","last","item","dojox","dtl","change","toJson","dummyRender","firstloop","push","ifchanged","pop","RegroupNode","expression","key","alias","_expression","_push","container","grouper","stack","list","i","id","mixin","cycle","parser","token","args","split_contents","Error","indexOf","split","_namedCycleNodes","node","slice","create_text_node","parts","parse","delete_first_token","regroup","tokens","spaces","join"],"mappings":"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","file":"../../../dtl/tag/loop.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/json\",\r\n\t\"../_base\",\r\n\t\"dojox/string/tokenize\"\r\n], function(lang,array,json,dd,Tokenize){\r\n\r\n\tvar ddtl = lang.getObject(\"tag.loop\", true, dd);\r\n\t/*=====\r\n\t ddtl = {\r\n\t \t// TODO: summary\r\n\t };\r\n\t =====*/\r\n\r\n\tddtl.CycleNode = lang.extend(function(cyclevars, name, text, shared){\r\n\t\tthis.cyclevars = cyclevars;\r\n\t\tthis.name = name;\r\n\t\tthis.contents = text;\r\n\t\tthis.shared = shared || {counter: -1, map: {}};\r\n\t},\r\n\t{\r\n\t\trender: function(context, buffer){\r\n\t\t\tif(context.forloop && !context.forloop.counter0){\r\n\t\t\t\tthis.shared.counter = -1;\r\n\t\t\t}\r\n\r\n\t\t\t++this.shared.counter;\r\n\t\t\tvar value = this.cyclevars[this.shared.counter % this.cyclevars.length];\r\n\r\n\t\t\tvar map = this.shared.map;\r\n\t\t\tif(!map[value]){\r\n\t\t\t\tmap[value] = new dd._Filter(value);\r\n\t\t\t}\r\n\t\t\tvalue = map[value].resolve(context, buffer);\r\n\r\n\t\t\tif(this.name){\r\n\t\t\t\tcontext[this.name] = value;\r\n\t\t\t}\r\n\t\t\tthis.contents.set(value);\r\n\t\t\treturn this.contents.render(context, buffer);\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\treturn this.contents.unrender(context, buffer);\r\n\t\t},\r\n\t\tclone: function(buffer){\r\n\t\t\treturn new this.constructor(this.cyclevars, this.name, this.contents.clone(buffer), this.shared);\r\n\t\t}\r\n\t});\r\n\r\n\tddtl.IfChangedNode = lang.extend(function(nodes, vars, shared){\r\n\t\tthis.nodes = nodes;\r\n\t\tthis._vars = vars;\r\n\t\tthis.shared = shared || {last: null, counter: 0};\r\n\t\tthis.vars = array.map(vars, function(item){\r\n\t\t\treturn new dojox.dtl._Filter(item);\r\n\t\t});\r\n\t}, {\r\n\t\trender: function(context, buffer){\r\n\t\t\tif(context.forloop){\r\n\t\t\t\tif(context.forloop.counter <= this.shared.counter){\r\n\t\t\t\t\tthis.shared.last = null;\r\n\t\t\t\t}\r\n\t\t\t\tthis.shared.counter = context.forloop.counter;\r\n\t\t\t}\r\n\r\n\t\t\tvar change;\r\n\t\t\tif(this.vars.length){\r\n\t\t\t\tchange = json.toJson(array.map(this.vars, function(item){\r\n\t\t\t\t\treturn item.resolve(context);\r\n\t\t\t\t}));\r\n\t\t\t}else{\r\n\t\t\t\tchange = this.nodes.dummyRender(context, buffer);\r\n\t\t\t}\r\n\r\n\t\t\tif(change != this.shared.last){\r\n\t\t\t\tvar firstloop = (this.shared.last === null);\r\n\t\t\t\tthis.shared.last = change;\r\n\t\t\t\tcontext = context.push();\r\n\t\t\t\tcontext.ifchanged = {firstloop: firstloop};\r\n\t\t\t\tbuffer = this.nodes.render(context, buffer);\r\n\t\t\t\tcontext = context.pop();\r\n\t\t\t}else{\r\n\t\t\t\tbuffer = this.nodes.unrender(context, buffer);\r\n\t\t\t}\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\treturn this.nodes.unrender(context, buffer);\r\n\t\t},\r\n\t\tclone: function(buffer){\r\n\t\t\treturn new this.constructor(this.nodes.clone(buffer), this._vars, this.shared);\r\n\t\t}\r\n\t});\r\n\r\n\tddtl.RegroupNode = lang.extend(function(expression, key, alias){\r\n\t\tthis._expression = expression;\r\n\t\tthis.expression = new dd._Filter(expression);\r\n\t\tthis.key = key;\r\n\t\tthis.alias = alias;\r\n\t},\r\n\t{\r\n\t\t_push: function(container, grouper, stack){\r\n\t\t\tif(stack.length){\r\n\t\t\t\tcontainer.push({ grouper: grouper, list: stack });\r\n\t\t\t}\r\n\t\t},\r\n\t\trender: function(context, buffer){\r\n\t\t\tcontext[this.alias] = [];\r\n\t\t\tvar list = this.expression.resolve(context);\r\n\t\t\tif(list){\r\n\t\t\t\tvar last = null;\r\n\t\t\t\tvar stack = [];\r\n\t\t\t\tfor(var i = 0; i < list.length; i++){\r\n\t\t\t\t\tvar id = list[i][this.key];\r\n\t\t\t\t\tif(last !== id){\r\n\t\t\t\t\t\tthis._push(context[this.alias], last, stack);\r\n\t\t\t\t\t\tlast = id;\r\n\t\t\t\t\t\tstack = [list[i]];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tstack.push(list[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._push(context[this.alias], last, stack);\r\n\t\t\t}\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tclone: function(context, buffer){\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\tlang.mixin(ddtl, {\r\n\t\tcycle: function(parser, token){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCycle among the given strings each time this tag is encountered\r\n\t\t\tvar args = token.split_contents();\r\n\r\n\t\t\tif(args.length < 2){\r\n\t\t\t\tthrow new Error(\"'cycle' tag requires at least two arguments\");\r\n\t\t\t}\r\n\r\n\t\t\tif(args[1].indexOf(\",\") != -1){\r\n\t\t\t\tvar vars = args[1].split(\",\");\r\n\t\t\t\targs = [args[0]];\r\n\t\t\t\tfor(var i = 0; i < vars.length; i++){\r\n\t\t\t\t\targs.push('\"' + vars[i] + '\"');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(args.length == 2){\r\n\t\t\t\tvar name = args[args.length - 1];\r\n\r\n\t\t\t\tif(!parser._namedCycleNodes){\r\n\t\t\t\t\tthrow new Error(\"No named cycles in template: '\" + name + \"' is not defined\");\r\n\t\t\t\t}\r\n\t\t\t\tif(!parser._namedCycleNodes[name]){\r\n\t\t\t\t\tthrow new Error(\"Named cycle '\" + name + \"' does not exist\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn parser._namedCycleNodes[name];\r\n\t\t\t}\r\n\r\n\t\t\tif(args.length > 4 && args[args.length - 2] == \"as\"){\r\n\t\t\t\tvar name = args[args.length - 1];\r\n\r\n\t\t\t\tvar node = new ddtl.CycleNode(args.slice(1, args.length - 2), name, parser.create_text_node());\r\n\r\n\t\t\t\tif(!parser._namedCycleNodes){\r\n\t\t\t\t\tparser._namedCycleNodes = {};\r\n\t\t\t\t}\r\n\t\t\t\tparser._namedCycleNodes[name] = node;\r\n\t\t\t}else{\r\n\t\t\t\tnode = new ddtl.CycleNode(args.slice(1), null, parser.create_text_node());\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\tifchanged: function(parser, token){\r\n\t\t\tvar parts = token.contents.split();\r\n\t\t\tvar nodes = parser.parse([\"endifchanged\"]);\r\n\t\t\tparser.delete_first_token();\r\n\t\t\treturn new ddtl.IfChangedNode(nodes, parts.slice(1));\r\n\t\t},\r\n\t\tregroup: function(parser, token){\r\n\t\t\tvar tokens = Tokenize(token.contents, /(\\s+)/g, function(spaces){\r\n\t\t\t\treturn spaces;\r\n\t\t\t});\r\n\t\t\tif(tokens.length < 11 || tokens[tokens.length - 3] != \"as\" || tokens[tokens.length - 7] != \"by\"){\r\n\t\t\t\tthrow new Error(\"Expected the format: regroup list by key as newList\");\r\n\t\t\t}\r\n\t\t\tvar expression = tokens.slice(2, -8).join(\"\");\r\n\t\t\tvar key = tokens[tokens.length - 5];\r\n\t\t\tvar alias = tokens[tokens.length - 1];\r\n\t\t\treturn new ddtl.RegroupNode(expression, key, alias);\r\n\t\t}\r\n\t});\r\n\r\n\treturn ddtl;\r\n});"]}