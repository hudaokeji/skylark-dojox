{"version":3,"sources":["dtl/utils/date.js"],"names":["define","lang","ddp","dd","date","getObject","DateFormat","extend","prototype","f","this","getMinutes","g","i","N","_months_ap","getMonth","P","getHours","a","mixin","dojox","dtl","utils","format","timesince","d","now","Date","year","month","day","chunk","delta","Math","abs","getTime","_chunks","count","floor","n"],"mappings":";;;;;;;AAAAA,QACC,kBACA,iBACA,YACE,SAASC,EAAKC,EAAIC,GAEpB,IAAIC,EAAOH,EAAKI,UAAU,cAAc,EAAMF,GA2E9C,OApEAC,EAAKE,WAAaJ,EAAII,WACtBL,EAAKM,OAAOH,EAAKE,WAAYJ,EAAII,WAAWE,WAC3CC,EAAG,WAMF,OAASC,KAAKN,KAAKO,aAA2BD,KAAKE,IAAM,IAAMF,KAAKG,IAAjCH,KAAKE,KAEzCE,EAAG,WAGF,OAAOV,EAAKW,WAAWL,KAAKN,KAAKY,aAElCC,EAAG,WAOF,OAAIP,KAAKN,KAAKO,cAAiBD,KAAKN,KAAKc,WAGrCR,KAAKN,KAAKO,cAAwC,IAAxBD,KAAKN,KAAKc,WAGjCR,KAAKD,IAAM,IAAMC,KAAKS,IAFrB,OAHA,cASVlB,EAAKmB,MAAMC,MAAMC,IAAIC,MAAMnB,MAC1BoB,OAAQ,SAAkBpB,EAAiBoB,GAE1C,OADS,IAAIH,MAAMC,IAAIC,MAAMnB,KAAKE,WAAWkB,GACnCA,OAAOpB,IAElBqB,UAAW,SAASC,EAAGC,GAMjBD,aAAaE,OACjBF,EAAI,IAAIE,KAAKF,EAAEG,KAAMH,EAAEI,MAAOJ,EAAEK,MAE7BJ,IACHA,EAAM,IAAIC,MAIX,IADA,IACeI,EADXC,EAAQC,KAAKC,IAAIR,EAAIS,UAAYV,EAAEU,WAC/BvB,EAAI,EAAUmB,EAAQX,MAAMC,IAAIC,MAAMnB,KAAKiC,QAAQxB,GAAIA,IAAI,CAClE,IAAIyB,EAAQJ,KAAKK,MAAMN,EAAQD,EAAM,IACrC,GAAGM,EAAO,MAEX,OAAOA,EAAQ,IAAMN,EAAM,GAAGM,IAE/BD,UACE,QAA2B,SAASG,GAAI,OAAa,GAALA,EAAU,OAAS,WACnE,OAA0B,SAASA,GAAI,OAAa,GAALA,EAAU,QAAU,YACnE,OAAyB,SAASA,GAAI,OAAa,GAALA,EAAU,OAAS,WACjE,MAAqB,SAASA,GAAI,OAAa,GAALA,EAAU,MAAQ,UAC5D,KAAgB,SAASA,GAAI,OAAa,GAALA,EAAU,OAAS,WACxD,IAAW,SAASA,GAAI,OAAa,GAALA,EAAU,SAAW,aAEvDzB,YAAa,OAAQ,OAAQ,QAAS,QAAS,MAAO,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,UAGjGX","file":"../../../dtl/utils/date.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojox/date/php\",\r\n\t\"../_base\"\r\n], function(lang,ddp,dd){\r\n\r\n\tvar date = lang.getObject(\"utils.date\", true, dd);\r\n\t/*=====\r\n\t date = {\r\n\t \t// TODO: summary\r\n\t };\r\n\t =====*/\r\n\r\n\tdate.DateFormat = ddp.DateFormat;\r\n\tlang.extend(date.DateFormat, ddp.DateFormat.prototype, {\r\n\t\tf: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTime, in 12-hour hours and minutes, with minutes left off if they're zero.\r\n\t\t\t// description:\r\n\t\t\t//\t\tExamples: '1', '1:30', '2:05', '2'\r\n\t\t\t//\t\tProprietary extension.\r\n\t\t\treturn (!this.date.getMinutes()) ? this.g() : this.g() + \":\" + this.i();\r\n\t\t},\r\n\t\tN: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMonth abbreviation in Associated Press style. Proprietary extension.\r\n\t\t\treturn date._months_ap[this.date.getMonth()];\r\n\t\t},\r\n\t\tP: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTime, in 12-hour hours, minutes and 'a.m.'/'p.m.', with minutes left off\r\n\t\t\t//\t\tif they're zero and the strings 'midnight' and 'noon' if appropriate.\r\n\t\t\t// description:\r\n\t\t\t//\t\tExamples: '1 a.m.', '1:30 p.m.', 'midnight', 'noon', '12:30 p.m.'\r\n\t\t\t//\t\tProprietary extension.\r\n\t\t\tif(!this.date.getMinutes() && !this.date.getHours()){\r\n\t\t\t\treturn 'midnight';\r\n\t\t\t}\r\n\t\t\tif(!this.date.getMinutes() && this.date.getHours() == 12){\r\n\t\t\t\treturn 'noon';\r\n\t\t\t}\r\n\t\t\treturn this.f() + \" \" + this.a();\r\n\t\t}\r\n\t});\r\n\r\n\tlang.mixin(dojox.dtl.utils.date, {\r\n\t\tformat: function(/*Date*/ date, /*String*/ format){\r\n\t\t\tvar df = new dojox.dtl.utils.date.DateFormat(format);\r\n\t\t\treturn df.format(date);\r\n\t\t},\r\n\t\ttimesince: function(d, now){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes two datetime objects and returns the time between then and now\r\n\t\t\t//\t\tas a nicely formatted string, e.g \"10 minutes\"\r\n\t\t\t// description:\r\n\t\t\t//\t\tAdapted from http://blog.natbat.co.uk/archive/2003/Jun/14/time_since\r\n\t\t\tif(!(d instanceof Date)){\r\n\t\t\t\td = new Date(d.year, d.month, d.day);\r\n\t\t\t}\r\n\t\t\tif(!now){\r\n\t\t\t\tnow = new Date();\r\n\t\t\t}\r\n\r\n\t\t\tvar delta = Math.abs(now.getTime() - d.getTime());\r\n\t\t\tfor(var i = 0, chunk; chunk = dojox.dtl.utils.date._chunks[i]; i++){\r\n\t\t\t\tvar count = Math.floor(delta / chunk[0]);\r\n\t\t\t\tif(count) break;\r\n\t\t\t}\r\n\t\t\treturn count + \" \" + chunk[1](count);\r\n\t\t},\r\n\t\t_chunks: [\r\n\t\t\t[60 * 60 * 24 * 365 * 1000, function(n){ return (n == 1) ? 'year' : 'years'; }],\r\n\t\t\t[60 * 60 * 24 * 30 * 1000, function(n){ return (n == 1) ? 'month' : 'months'; }],\r\n\t\t\t[60 * 60 * 24 * 7 * 1000, function(n){ return (n == 1) ? 'week' : 'weeks'; }],\r\n\t\t\t[60 * 60 * 24 * 1000, function(n){ return (n == 1) ? 'day' : 'days'; }],\r\n\t\t\t[60 * 60 * 1000, function(n){ return (n == 1) ? 'hour' : 'hours'; }],\r\n\t\t\t[60 * 1000, function(n){ return (n == 1) ? 'minute' : 'minutes'; }]\r\n\t\t],\r\n\t\t_months_ap: [\"Jan.\", \"Feb.\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"]\r\n\t});\r\n\r\n\treturn date;\r\n});\r\n"]}