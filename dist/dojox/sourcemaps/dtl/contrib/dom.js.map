{"version":3,"sources":["dtl/contrib/dom.js"],"names":["define","kernel","lang","connect","domStyle","domConstruct","dd","dddom","ddch","getObject","simple","render","this","contents","StyleNode","extend","styles","key","_current","_styles","indexOf","node","Template","delegate","context","buffer","value","set","getParent","unrender","clone","constructor","BufferNode","nodelist","options","_swap","type","swapped","parent","parentNode","nodeType","text","onAddNode","disconnect","onRemoveNode","onChangeAttribute","onChangeData","cloneNode","replaceChild","hitch","destroy","mixin","parser","token","parts","split","slice","found","i","length","parse","next_token","html","deprecated","create_variable_node","style_","rule","rules","replace","trim","register","tags","dom"],"mappings":"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","file":"../../../dtl/contrib/dom.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-construct\",\r\n\t\"../_base\",\r\n\t\"../dom\"\r\n], function(kernel,lang,connect,domStyle,domConstruct,dd,dddom){\r\n\r\n\tvar ddch = lang.getObject(\"contrib.dom\", true, dd);\r\n/*=====\r\n\tddch = {\r\n\t\t// TODO: summary\r\n\t};\r\n=====*/\r\n\r\n\tvar simple = {render: function(){ return this.contents; }};\r\n\r\n\tddch.StyleNode = lang.extend(function(styles){\r\n\t\tthis.contents = {};\r\n\t\tthis._current = {};\r\n\t\tthis._styles = styles;\r\n\t\tfor(var key in styles){\r\n\t\t\tif(styles[key].indexOf(\"{{\") != -1){\r\n\t\t\t\tvar node = new dd.Template(styles[key]);\r\n\t\t\t}else{\r\n\t\t\t\tvar node = lang.delegate(simple);\r\n\t\t\t\tnode.contents = styles[key];\r\n\t\t\t}\r\n\t\t\tthis.contents[key] = node;\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\trender: function(context, buffer){\r\n\t\t\tfor(var key in this.contents){\r\n\t\t\t\tvar value = this.contents[key].render(context);\r\n\t\t\t\tif(this._current[key] != value){\r\n\t\t\t\t\tdomStyle.set(buffer.getParent(), key, this._current[key] = value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\tthis._current = {};\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tclone: function(buffer){\r\n\t\t\treturn new this.constructor(this._styles);\r\n\t\t}\r\n\t});\r\n\r\n\tddch.BufferNode = lang.extend(function(nodelist, options){\r\n\t\tthis.nodelist = nodelist;\r\n\t\tthis.options = options;\r\n\t},\r\n\t{\r\n\t\t_swap: function(type, node){\r\n\t\t\tif(!this.swapped && this.parent.parentNode){\r\n\t\t\t\tif(type == \"node\"){\r\n\t\t\t\t\tif((node.nodeType == 3 && !this.options.text) || (node.nodeType == 1 && !this.options.node)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(type == \"class\"){\r\n\t\t\t\t\tif(type != \"class\"){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.onAddNode && connect.disconnect(this.onAddNode);\r\n\t\t\t\tthis.onRemoveNode && connect.disconnect(this.onRemoveNode);\r\n\t\t\t\tthis.onChangeAttribute && connect.disconnect(this.onChangeAttribute);\r\n\t\t\t\tthis.onChangeData && connect.disconnect(this.onChangeData);\r\n\r\n\t\t\t\tthis.swapped = this.parent.cloneNode(true);\r\n\t\t\t\tthis.parent.parentNode.replaceChild(this.swapped, this.parent);\r\n\t\t\t}\r\n\t\t},\r\n\t\trender: function(context, buffer){\r\n\t\t\tthis.parent = buffer.getParent();\r\n\t\t\tif(this.options.node){\r\n\t\t\t\tthis.onAddNode = connect.connect(buffer, \"onAddNode\", lang.hitch(this, \"_swap\", \"node\"));\r\n\t\t\t\tthis.onRemoveNode = connect.connect(buffer, \"onRemoveNode\", lang.hitch(this, \"_swap\", \"node\"));\r\n\t\t\t}\r\n\t\t\tif(this.options.text){\r\n\t\t\t\tthis.onChangeData = connect.connect(buffer, \"onChangeData\", lang.hitch(this, \"_swap\", \"node\"));\r\n\t\t\t}\r\n\t\t\tif(this.options[\"class\"]){\r\n\t\t\t\tthis.onChangeAttribute = connect.connect(buffer, \"onChangeAttribute\", lang.hitch(this, \"_swap\", \"class\"));\r\n\t\t\t}\r\n\r\n\t\t\tbuffer = this.nodelist.render(context, buffer);\r\n\r\n\t\t\tif(this.swapped){\r\n\t\t\t\tthis.swapped.parentNode.replaceChild(this.parent, this.swapped);\r\n\t\t\t\tdomConstruct.destroy(this.swapped);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onAddNode && connect.disconnect(this.onAddNode);\r\n\t\t\t\tthis.onRemoveNode && connect.disconnect(this.onRemoveNode);\r\n\t\t\t\tthis.onChangeAttribute && connect.disconnect(this.onChangeAttribute);\r\n\t\t\t\tthis.onChangeData && connect.disconnect(this.onChangeData);\r\n\t\t\t}\r\n\r\n\t\t\tdelete this.parent;\r\n\t\t\tdelete this.swapped;\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\treturn this.nodelist.unrender(context, buffer);\r\n\t\t},\r\n\t\tclone: function(buffer){\r\n\t\t\treturn new this.constructor(this.nodelist.clone(buffer), this.options);\r\n\t\t}\r\n\t});\r\n\r\n\tlang.mixin(ddch, {\r\n\t\tbuffer: function(parser, token){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tBuffer large DOM manipulations during re-render.\r\n\t\t\t// description:\r\n\t\t\t//\t\tWhen using DomTemplate, wrap any content\r\n\t\t\t//\t\tthat you expect to change often during\r\n\t\t\t//\t\tre-rendering. It will then remove its parent\r\n\t\t\t//\t\tfrom the main document while it re-renders that\r\n\t\t\t//\t\tsection of code. It will only remove it from\r\n\t\t\t//\t\tthe main document if a mainpulation of somes sort\r\n\t\t\t//\t\thappens. ie It won't swap out if it diesn't have to.\r\n\t\t\t// example:\r\n\t\t\t//\t\tBy default, it considers only node addition/removal\r\n\t\t\t//\t\tto be \"changing\"\r\n\t\t\t//\r\n\t\t\t//\t\t|\t{% buffer %}{% for item in items %}<li>{{ item }}</li>{% endfor %}{% endbuffer %}\r\n\t\t\t// example:\r\n\t\t\t//\t\tYou can explicitly declare options:\r\n\t\t\t//\r\n\t\t\t//\t\t- node: Watch node removal/addition\r\n\t\t\t//\t\t- class: Watch for a classname to be changed\r\n\t\t\t//\t\t- text: Watch for any text to be changed\r\n\t\t\t//\r\n\t\t\t//\t|\t{% buffer node class %}{% for item in items %}<li>{{ item }}</li>{% endfor %}{% endbuffer %}\r\n\t\t\tvar parts = token.contents.split().slice(1);\r\n\t\t\tvar options = {};\r\n\t\t\tvar found = false;\r\n\t\t\tfor(var i = parts.length; i--;){\r\n\t\t\t\tfound = true;\r\n\t\t\t\toptions[parts[i]] = true;\r\n\t\t\t}\r\n\t\t\tif(!found){\r\n\t\t\t\toptions.node = true;\r\n\t\t\t}\r\n\t\t\tvar nodelist = parser.parse([\"endbuffer\"]);\r\n\t\t\tparser.next_token();\r\n\t\t\treturn new ddch.BufferNode(nodelist, options);\r\n\t\t},\r\n\t\thtml: function(parser, token){\r\n\t\t\tkernel.deprecated(\"{% html someVariable %}\", \"Use {{ someVariable|safe }} instead\");\r\n\t\t\treturn parser.create_variable_node(token.contents.slice(5) + \"|safe\");\r\n\t\t},\r\n\t\tstyle_: function(parser, token){\r\n\t\t\tvar styles = {};\r\n\t\t\ttoken = token.contents.replace(/^style\\s+/, \"\");\r\n\t\t\tvar rules = token.split(/\\s*;\\s*/g);\r\n\t\t\tfor(var i = 0, rule; rule = rules[i]; i++){\r\n\t\t\t\tvar parts = rule.split(/\\s*:\\s*/g);\r\n\t\t\t\tvar key = parts[0];\r\n\t\t\t\tvar value = lang.trim(parts[1]);\r\n\t\t\t\tif(value){\r\n\t\t\t\t\tstyles[key] = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new ddch.StyleNode(styles);\r\n\t\t}\r\n\t});\r\n\r\n\tdd.register.tags(\"dojox.dtl.contrib\", {\r\n\t\t\"dom\": [\"html\", \"attr:style\", \"buffer\"]\r\n\t});\r\n\r\n\treturn ddch;\r\n});"]}