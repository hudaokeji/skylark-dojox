{"version":3,"sources":["dtl/contrib/data.js"],"names":["define","kernel","lang","dd","array","ddcd","getObject","first","_BoundItem","extend","item","store","this","get","key","getLabel","getAttributes","getIdentity","hasAttribute","slice","deprecated","values","getValues","isArray","map","value","isObject","isItem","_get","prototype","safe","BindDataNode","items","query","alias","_Filter","render","context","buffer","resolve","getFeatures","Error","sync","fetch","scope","onComplete","it","list","i","push","unrender","clone","mixin","length","bind_data","parser","token","parts","contents","split","bind_query","register","tags","data"],"mappings":"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","file":"../../../dtl/contrib/data.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"../_base\",\r\n\t\"dojo/_base/array\"\r\n], function(kernel,lang,dd,array){\r\n\r\n\tvar ddcd = lang.getObject(\"contrib.data\", true, dd);\r\n/*=====\r\n\tddcd = {\r\n\t\t// TODO: summary\r\n\t};\r\n=====*/\r\n\r\n\tvar first = true;\r\n\r\n\tddcd._BoundItem = lang.extend(function(item, store){\r\n\t\tthis.item = item;\r\n\t\tthis.store = store;\r\n\t},\r\n\t{\r\n\t\tget: function(key){\r\n\t\t\tvar store = this.store;\r\n\t\t\tvar item = this.item;\r\n\r\n\t\t\tif(key == \"getLabel\"){\r\n\t\t\t\treturn store.getLabel(item);\r\n\t\t\t}else if(key == \"getAttributes\"){\r\n\t\t\t\treturn store.getAttributes(item);\r\n\t\t\t}else if(key == \"getIdentity\"){\r\n\t\t\t\tif(store.getIdentity){\r\n\t\t\t\t\treturn store.getIdentity(item);\r\n\t\t\t\t}\r\n\t\t\t\treturn \"Store has no identity API\";\r\n\t\t\t}else{\r\n\t\t\t\tif(!store.hasAttribute(item, key)){\r\n\t\t\t\t\tif(key.slice(-1) == \"s\"){\r\n\t\t\t\t\t\tif(first){\r\n\t\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\t\tkernel.deprecated(\"You no longer need an extra s to call getValues, it can be figured out automatically\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tkey = key.slice(0, -1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!store.hasAttribute(item, key)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar values = store.getValues(item, key);\r\n\t\t\t\tif(!values){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(!lang.isArray(values)){\r\n\t\t\t\t\treturn new ddcd._BoundItem(values, store);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvalues = array.map(values, function(value){\r\n\t\t\t\t\tif(lang.isObject(value) && store.isItem(value)){\r\n\t\t\t\t\t\treturn new ddcd._BoundItem(value, store);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t});\r\n\t\t\t\tvalues.get = ddcd._get;\r\n\t\t\t\treturn values;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tddcd._BoundItem.prototype.get.safe = true;\r\n\r\n\tddcd.BindDataNode = lang.extend(function(items, query, store, alias){\r\n\t\tthis.items = items && new dd._Filter(items);\r\n\t\tthis.query = query && new dd._Filter(query);\r\n\t\tthis.store = new dd._Filter(store);\r\n\t\tthis.alias = alias;\r\n\t},\r\n\t{\r\n\t\trender: function(context, buffer){\r\n\t\t\tvar items = this.items && this.items.resolve(context);\r\n\t\t\tvar query = this.query && this.query.resolve(context);\r\n\t\t\tvar store = this.store.resolve(context);\r\n\t\t\tif(!store || !store.getFeatures){\r\n\t\t\t\tthrow new Error(\"data_bind didn't receive a store\");\r\n\t\t\t}\r\n\r\n\t\t\tif(query){\r\n\t\t\t\tvar sync = false;\r\n\r\n\t\t\t\tstore.fetch({\r\n\t\t\t\t\tquery: query,\r\n\t\t\t\t\tsync: true,\r\n\t\t\t\t\tscope: this,\r\n\t\t\t\t\tonComplete: function(it){\r\n\t\t\t\t\t\tsync = true;\r\n\t\t\t\t\t\titems = it;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif(!sync){\r\n\t\t\t\t\tthrow new Error(\"The bind_data tag only works with a query if the store executed synchronously\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar list = [];\r\n\r\n\t\t\tif(items){\r\n\t\t\t\tfor(var i = 0, item; item = items[i]; i++){\r\n\t\t\t\t\tlist.push(new ddcd._BoundItem(item, store));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcontext[this.alias] = list;\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tunrender: function(context, buffer){\r\n\t\t\treturn buffer;\r\n\t\t},\r\n\t\tclone: function(){\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\tlang.mixin(ddcd, {\r\n\t\t_get: function(key){\r\n\t\t\tif(this.length){\r\n\t\t\t\treturn (this[0] instanceof ddcd._BoundItem) ? this[0].get(key) : this[0][key];\r\n\t\t\t}\r\n\t\t},\r\n\t\tbind_data: function(parser, token){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTurns a list of data store items into DTL compatible items\r\n\t\t\t// example:\r\n\t\t\t//\t\t`contextItems` and `contextStore` should be an item list\r\n\t\t\t//\t\tand a data store that get assigned to `newVariable`\r\n\t\t\t//\r\n\t\t\t//\t|\t{% bind_data contextItems to contextStore as newVariable %}\r\n\t\t\tvar parts = token.contents.split();\r\n\r\n\t\t\tif(parts[2] != 'to' || parts[4] != 'as' || !parts[5]){\r\n\t\t\t\tthrow new Error(\"data_bind expects the format: 'data_bind items to store as varName'\");\r\n\t\t\t}\r\n\r\n\t\t\treturn new ddcd.BindDataNode(parts[1], null, parts[3], parts[5]);\r\n\t\t},\r\n\t\tbind_query: function(parser, token){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tQueries a data store and makes the returned items DTL compatible\r\n\t\t\t// example:\r\n\t\t\t//\t\tYou can only use this with data stores that work in a synchronous\r\n\t\t\t//\t\tway (meaning that `onComplete` is fired during the `fetch` call).\r\n\t\t\t//\t\tA `sync` flag is sent to the fetch call so that stores that usually\r\n\t\t\t//\t\twork asynchronously make themselves syncrhonous if possible.\r\n\t\t\t//\t|\t{% bind_query contextQuery to contextStore as newVariable %}\r\n\t\t\tvar parts = token.contents.split();\r\n\r\n\t\t\tif(parts[2] != 'to' || parts[4] != 'as' || !parts[5]){\r\n\t\t\t\tthrow new Error(\"data_bind expects the format: 'bind_query query to store as varName'\");\r\n\t\t\t}\r\n\r\n\t\t\treturn new ddcd.BindDataNode(null, parts[1], parts[3], parts[5]);\r\n\t\t}\r\n\t});\r\n\tddcd._get.safe = true;\r\n\r\n\tdd.register.tags(\"dojox.dtl.contrib\", {\r\n\t\t\"data\": [\"bind_data\", \"bind_query\"]\r\n\t});\r\n\r\n\treturn ddcd;\r\n});"]}