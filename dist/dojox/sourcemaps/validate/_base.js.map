{"version":3,"sources":["validate/_base.js"],"names":["define","lang","regexp","number","xregexp","validate","getObject","isText","value","flags","test","length","minlength","maxlength","_isInRangeCache","isInRange","parse","isNaN","max","Infinity","min","dec","decimal","cache","cacheIdx","isNumberFormat","RegExp","numberFormat","isValidLuhn","parity","curDigit","sum","isString","String","replace","i","parseInt","charAt"],"mappings":";;;;;;;AAAAA,QACC,kBACA,cACA,cACA,YACE,SAASC,EAAMC,EAAQC,EAAQC,GAElC,IAAIC,EAAWJ,EAAKK,UAAU,kBAAkB,GAgIhD,OA9HAD,EAASE,OAAS,SAASC,EAAOC,GAejC,OAHAA,EAAyB,iBAATA,EAAqBA,MAGlC,QAAQC,KAAKF,MAGU,iBAAhBC,EAAME,QAAsBF,EAAME,QAAUH,EAAMG,YAC/B,iBAAnBF,EAAMG,WAAyBH,EAAMG,UAAYJ,EAAMG,WACpC,iBAAnBF,EAAMI,WAAyBJ,EAAMI,UAAYL,EAAMG,WAMlEN,EAASS,mBACTT,EAASU,UAAY,SAASP,EAAOC,GAapC,GADAD,EAAQL,EAAOa,MAAMR,EAAOC,GACzBQ,MAAMT,GACR,OAAO,EAKR,IAAIU,EAA2B,iBAD/BT,EAAyB,iBAATA,EAAqBA,MACbS,IAAmBT,EAAMS,IAAMC,EAAAA,EACtDC,EAA2B,iBAAbX,EAAMW,IAAmBX,EAAMW,KAAOD,EAAAA,EACpDE,EAA+B,iBAAjBZ,EAAMa,QAAuBb,EAAMa,QAAU,IAE3DC,EAAQlB,EAASS,gBACjBU,EAAWhB,EAAQ,MAAQU,EAAM,MAAQE,EAAM,MAAQC,EAExD,YAA6B,IAAnBE,EAAMC,GACRD,EAAMC,IAGdD,EAAMC,KAAchB,EAAQY,GAAOZ,EAAQU,GACpCK,EAAMC,KAIdnB,EAASoB,eAAiB,SAASjB,EAAOC,GAkCzC,OADS,IAAIiB,OAAO,IAAMtB,EAAQuB,aAAalB,GAAS,IAAK,KACnDC,KAAKF,IAGhBH,EAASuB,YAAc,SAAqBpB,GAO3C,IAAaqB,EAAQC,EAAjBC,EAAM,EACN9B,EAAK+B,SAASxB,KACjBA,EAAQyB,OAAOzB,IAGhBqB,GADArB,EAAQA,EAAM0B,QAAQ,QAAQ,KACfvB,OAAS,EAExB,IAAI,IAAIwB,EAAI,EAAGA,EAAI3B,EAAMG,OAAQwB,IAChCL,EAAWM,SAAS5B,EAAM6B,OAAOF,IAC9BA,EAAI,GAAKN,IACXC,GAAY,GAEVA,EAAW,IACbA,GAAY,GAEbC,GAAOD,EAER,QAASC,EAAM,KAGT1B","file":"../../validate/_base.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/regexp\", // dojo core expressions\r\n\t\"dojo/number\", // dojo number expressions\r\n\t\"./regexp\" // additional expressions\r\n], function(lang, regexp, number, xregexp) {\r\n\r\nvar validate = lang.getObject(\"dojox.validate\", true);\r\n\r\nvalidate.isText = function(value, flags){\r\n\t// summary:\r\n\t//\t\tChecks if a string has non whitespace characters.\r\n\t//\t\tParameters allow you to constrain the length.\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t{length: Number, minlength: Number, maxlength: Number}\r\n\t//\r\n\t//\t\t- flags.length  If set, checks if there are exactly flags.length number of characters.\r\n\t//\t\t- flags.minlength  If set, checks if there are at least flags.minlength number of characters.\r\n\t//\t\t- flags.maxlength  If set, checks if there are at most flags.maxlength number of characters.\r\n\t\r\n\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\r\n\t// test for text\r\n\tif(/^\\s*$/.test(value)){ return false; } // Boolean\r\n\t\r\n\t// length tests\r\n\tif(typeof flags.length == \"number\" && flags.length != value.length){ return false; } // Boolean\r\n\tif(typeof flags.minlength == \"number\" && flags.minlength > value.length){ return false; } // Boolean\r\n\tif(typeof flags.maxlength == \"number\" && flags.maxlength < value.length){ return false; } // Boolean\r\n\t\r\n\treturn true; // Boolean\r\n\r\n};\r\n\r\nvalidate._isInRangeCache = {};\r\nvalidate.isInRange = function(value, flags){\r\n\t// summary:\r\n\t//\t\tValidates whether a string denoting a number\r\n\t//\t\tis between a max and min.\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t{max:Number, min:Number, decimal:String}\r\n\t//\r\n\t//\t\t- flags.max  A number, which the value must be less than or equal to for the validation to be true.\r\n\t//\t\t- flags.min  A number, which the value must be greater than or equal to for the validation to be true.\r\n\t//\t\t- flags.decimal  The character used for the decimal point.  Default is \".\".\r\n\t\r\n\tvalue = number.parse(value, flags);\r\n\tif(isNaN(value)){\r\n\t\treturn false; // Boolean\r\n\t}\r\n    \r\n\t// assign default values to missing parameters\r\n\tflags = (typeof flags == \"object\") ? flags : {};\r\n\tvar max = (typeof flags.max == \"number\") ? flags.max : Infinity,\r\n\t\tmin = (typeof flags.min == \"number\") ? flags.min : -Infinity,\r\n\t\tdec = (typeof flags.decimal == \"string\") ? flags.decimal : \".\",\r\n\t\r\n\t\tcache = validate._isInRangeCache,\r\n\t\tcacheIdx = value + \"max\" + max + \"min\" + min + \"dec\" + dec\r\n\t;\r\n\tif(typeof cache[cacheIdx] != \"undefined\"){\r\n\t\treturn cache[cacheIdx];\r\n\t}\r\n\r\n\tcache[cacheIdx] = !(value < min || value > max);\r\n\treturn cache[cacheIdx]; // Boolean\r\n\r\n};\r\n\r\nvalidate.isNumberFormat = function(value, flags){\r\n\t// summary:\r\n\t//\t\tValidates any sort of number based format\r\n\t// description:\r\n\t//\t\tValidates any sort of number based format. Use it for phone numbers,\r\n\t//\t\tsocial security numbers, zip-codes, etc. The value can be validated\r\n\t//\t\tagainst one format or one of multiple formats.\r\n\t//\r\n\t//\t\tFormat Definition\r\n\t//\t\t|   #        Stands for a digit, 0-9.\r\n\t//\t\t|   ?        Stands for an optional digit, 0-9 or nothing.\r\n\t//\t\tAll other characters must appear literally in the expression.\r\n\t// example:\r\n\t// |  \"(###) ###-####\"       ->   (510) 542-9742\r\n\t// |  \"(###) ###-#### x#???\" ->   (510) 542-9742 x153\r\n\t// |  \"###-##-####\"          ->   506-82-1089       i.e. social security number\r\n\t// |  \"#####-####\"           ->   98225-1649        i.e. zip code\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t- flags.format  A string or an Array of strings for multiple formats.\r\n\t// example:\r\n\t// |\trequire([\"dojox/validate/_base\"], function(validate){\r\n\t// |\t\t// returns true:\r\n\t// |\t\tvalidate.isNumberFormat(\"123-45\", { format:\"###-##\" });\r\n\t// |\t});\t\t\r\n\t// example:\r\n\t//\t\tCheck Multiple formats:\r\n\t// |\trequire([\"dojox/validate/_base\"], function(validate){\r\n\t// |\t\tvalidate.isNumberFormat(\"123-45\", {\r\n\t// |\t\t\tformat:[\"### ##\",\"###-##\",\"## ###\"]\r\n\t// |\t});\r\n\t//\r\n\r\n\tvar re = new RegExp(\"^\" + xregexp.numberFormat(flags) + \"$\", \"i\");\r\n\treturn re.test(value); // Boolean\r\n};\r\n\r\nvalidate.isValidLuhn = function(/* String */value){\r\n\t// summary:\r\n\t//\t\tValidate a String value against the Luhn algorithm.\r\n\t// description:\r\n\t//\t\tValidate a String value against the Luhn algorithm to verify\r\n\t//\t\tits integrity.\r\n\t\r\n\tvar sum = 0, parity, curDigit;\r\n\tif(!lang.isString(value)){\r\n\t\tvalue = String(value);\r\n\t}\r\n\tvalue = value.replace(/[- ]/g,''); //ignore dashes and whitespaces\r\n\tparity = value.length % 2;\r\n\r\n\tfor(var i = 0; i < value.length; i++){\r\n\t\tcurDigit = parseInt(value.charAt(i));\r\n\t\tif(i % 2 == parity){\r\n\t\t\tcurDigit *= 2;\r\n\t\t}\r\n\t\tif(curDigit > 9){\r\n\t\t\tcurDigit -= 9;\r\n\t\t}\r\n\t\tsum += curDigit;\r\n\t}\r\n\treturn !(sum % 10); // Boolean\r\n};\r\n\r\nreturn validate;\r\n\r\n});\r\n"]}