{"version":3,"sources":["validate/br.js"],"names":["define","lang","validate","br","getObject","isValidCnpj","value","isString","length","isNumberFormat","format","replace","i","j","tmp","cgc","dv","push","parseInt","charAt","base","reverse","sum","dv0","calcDv","computeCnpjDv","isValidCpf","cpf","computeCpfDv"],"mappings":"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","file":"../../validate/br.js","sourcesContent":["define([\"dojo/_base/lang\", \"./_base\"], function(lang, validate){\r\n\r\nvar br = lang.getObject(\"br\", true, validate);\r\nbr.isValidCnpj = function(/*String*/value){\r\n\t// summary:\r\n\t//\t\tValidates a CNPJ/CGC number\r\n\t// value: String\r\n\t//\t\tThe CNPJ/CGC number in ##.###.###/####-##, ########/####-##,\r\n\t//\t\t############-## or ############## format\r\n\tif(!lang.isString(value)){\r\n\t\tif(!value){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvalue = value + \"\";\r\n\t\twhile(value.length < 14){\r\n\t\t\tvalue = \"0\" + value;\r\n\t\t}\r\n\t}\r\n\tvar flags = {\r\n\t\tformat: [\r\n\t\t\t\"##.###.###/####-##\",\r\n\t\t\t\"########/####-##\",\r\n\t\t\t\"############-##\",\r\n\t\t\t\"##############\"\r\n\t\t]\r\n\t};\r\n\tif(validate.isNumberFormat(value, flags)){\r\n\t\t// Matched the initial test, so break this down into the\r\n\t\t// parts to be validated.\r\n\t\tvalue = value.replace(\"/\", \"\").replace(/\\./g, \"\").replace(\"-\", \"\");\r\n\t\tvar cgc = [];\r\n\t\tvar dv = [];\r\n\t\tvar i, j, tmp;\r\n\r\n\t\t// Check for obvious bad combos\r\n\t\t// all 0s to all 9's.\r\n\t\tfor(i = 0; i < 10; i++){\r\n\t\t\ttmp = \"\";\r\n\t\t\tfor(j = 0; j < value.length; j++){\r\n\t\t\t\ttmp += \"\" + i;\r\n\t\t\t}\r\n\t\t\tif(value === tmp){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Split out the DV from the main number.\r\n\t\tfor(i = 0; i < 12; i++){\r\n\t\t\tcgc.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\tfor(i = 12; i < 14; i++){\r\n\t\t\tdv.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\t\r\n\t\tvar base = [9,8,7,6,5,4,3,2,9,8,7,6].reverse();\r\n\t\tvar sum = 0;\r\n\t\tfor(i = 0; i < cgc.length; i++){\r\n\t\t\tsum += cgc[i] * base[i];\r\n\t\t}\r\n\t\tvar dv0 = calcDv(sum);\r\n\t\tif(dv0 == dv[0]){\r\n\t\t\t// Still seems valid, keep going.\r\n\t\t\tsum = 0;\r\n\t\t\tbase = [9,8,7,6,5,4,3,2,9,8,7,6,5].reverse();\r\n\t\t\tcgc.push(dv0);\r\n\t\t\tfor(i = 0; i < cgc.length; i++){\r\n\t\t\t\tsum += cgc[i] * base[i];\r\n\t\t\t}\r\n\t\t\tvar dv1 = calcDv(sum);\r\n\t\t\tif(dv1 === dv[1]){\r\n\t\t\t\t// Whew, looks valid.\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nbr.computeCnpjDv = function(/*String*/value){\r\n\t// summary:\r\n\t//\t\tGenerate the DV code (checksum part) for a Cnpj number\r\n\t// value:\r\n\t//\t\tThe CGC number in ##.###.###/#### or ############ format\r\n\tif(!lang.isString(value)){\r\n\t\tif(!value){\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tvalue = value + \"\";\r\n\t\twhile(value.length < 12){\r\n\t\t\tvalue = \"0\" + value;\r\n\t\t}\r\n\t}\r\n\tvar flags = {\r\n\t\tformat: [\r\n\t\t\t\"##.###.###/####\",\r\n\t\t\t\"########/####\",\r\n\t\t\t\"############\"\r\n\t\t]\r\n\t};\r\n\tif(validate.isNumberFormat(value, flags)){\r\n\t\t// Matched the initial test, so break this down into the\r\n\t\t// parts to compute the DV.\r\n\t\tvalue = value.replace(\"/\", \"\").replace(/\\./g, \"\");\r\n\t\tvar cgc = [];\r\n\t\tvar i, j, tmp;\r\n\r\n\t\t// Check for obvious bad combos\r\n\t\t// all 0s to all 9's.\r\n\t\tfor(i = 0; i < 10; i++){\r\n\t\t\ttmp = \"\";\r\n\t\t\tfor(j = 0; j < value.length; j++){\r\n\t\t\t\ttmp += \"\" + i;\r\n\t\t\t}\r\n\t\t\tif(value === tmp){\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i < value.length; i++){\r\n\t\t\tcgc.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\tvar base = [9,8,7,6,5,4,3,2,9,8,7,6].reverse();\r\n\t\tvar sum = 0;\r\n\t\tfor(i = 0; i < cgc.length; i++){\r\n\t\t\tsum += cgc[i] * base[i];\r\n\t\t}\r\n\t\tvar dv0 = calcDv(sum);\r\n\t\tsum = 0;\r\n\t\tbase = [9,8,7,6,5,4,3,2,9,8,7,6,5].reverse();\r\n\t\tcgc.push(dv0);\r\n\t\tfor(i = 0; i < cgc.length; i++){\r\n\t\t\tsum += cgc[i] * base[i];\r\n\t\t}\r\n\t\tvar dv1 = calcDv(sum);\r\n\t\treturn (\"\" + dv0) + dv1;\r\n\t}\r\n\treturn \"\";\r\n};\r\n\r\n\r\nbr.isValidCpf = function(/*String*/value){\r\n\t// summary:\r\n\t//\t\tValidates a CPF number\r\n\t// value: String\r\n\t//\t\tThe CPF number in #########-## or ###########,\r\n\t//\t\tformat\r\n\tif(!lang.isString(value)){\r\n\t\tif(!value){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvalue = value + \"\";\r\n\t\twhile(value.length < 11){\r\n\t\t\tvalue = \"0\" + value;\r\n\t\t}\r\n\t}\r\n\tvar flags = {\r\n\t\tformat: [\r\n\t\t\t\"###.###.###-##\",\r\n\t\t\t\"#########-##\",\r\n\t\t\t\"###########\"\r\n\t\t]\r\n\t};\r\n\tif(validate.isNumberFormat(value, flags)){\r\n\t\t// Matched the initial test, so break this down into the\r\n\t\t// parts to be validated.\r\n\t\tvalue = value.replace(\"-\", \"\").replace(/\\./g, \"\");\r\n\t\tvar cpf = [];\r\n\t\tvar dv = [];\r\n\t\tvar i, j, tmp;\r\n\r\n\t\t// Check for obvious bad combos\r\n\t\t// all 0s to all 9's.\r\n\t\tfor(i = 0; i < 10; i++){\r\n\t\t\ttmp = \"\";\r\n\t\t\tfor(j = 0; j < value.length; j++){\r\n\t\t\t\ttmp += \"\" + i;\r\n\t\t\t}\r\n\t\t\tif(value === tmp){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Split out the DV from the main number.\r\n\t\tfor(i = 0; i < 9; i++){\r\n\t\t\tcpf.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\tfor(i = 9; i < 12; i++){\r\n\t\t\tdv.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\t\r\n\t\tvar base = [9,8,7,6,5,4,3,2,1].reverse();\r\n\t\tvar sum = 0;\r\n\t\tfor(i = 0; i < cpf.length; i++){\r\n\t\t\tsum += cpf[i] * base[i];\r\n\t\t}\r\n\t\tvar dv0 = calcDv(sum);\r\n\t\tif(dv0 == dv[0]){\r\n\t\t\t// Still seems valid, keep going.\r\n\t\t\tsum = 0;\r\n\t\t\tbase = [9,8,7,6,5,4,3,2,1,0].reverse();\r\n\t\t\tcpf.push(dv0);\r\n\t\t\tfor(i = 0; i < cpf.length; i++){\r\n\t\t\t\tsum += cpf[i] * base[i];\r\n\t\t\t}\r\n\t\t\tvar dv1 = calcDv(sum);\r\n\t\t\tif(dv1 === dv[1]){\r\n\t\t\t\t// Whew, looks valid.\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n};\r\n\r\nbr.computeCpfDv = function(/*String*/value){\r\n\t// summary:\r\n\t//\t\tGenerate the DV code (checksum part) for a CPF number\r\n\t// value: String\r\n\t//\t\tThe CPF number in ######### format\r\n\tif(!lang.isString(value)){\r\n\t\tif(!value){\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tvalue = value + \"\";\r\n\t\twhile(value.length < 9){\r\n\t\t\tvalue = \"0\" + value;\r\n\t\t}\r\n\t}\r\n\tvar flags = {\r\n\t\tformat: [\r\n\t\t\t\"###.###.###\",\r\n\t\t\t\"#########\"\r\n\t\t]\r\n\t};\r\n\tif(validate.isNumberFormat(value, flags)){\r\n\t\t// Matched the initial test, so break this down into the\r\n\t\t// parts to compute the DV.\r\n\t\tvalue = value.replace(/\\./g, \"\");\r\n\t\tvar cpf = [];\r\n\t\t\r\n\t\t// Check for obvious bad combos\r\n\t\t// all 0s to all 9's.\r\n\t\tfor(i = 0; i < 10; i++){\r\n\t\t\ttmp = \"\";\r\n\t\t\tfor(j = 0; j < value.length; j++){\r\n\t\t\t\ttmp += \"\" + i;\r\n\t\t\t}\r\n\t\t\tif(value === tmp){\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(i = 0; i < value.length; i++){\r\n\t\t\tcpf.push(parseInt(value.charAt(i), 10));\r\n\t\t}\r\n\t\tvar base = [9,8,7,6,5,4,3,2,1].reverse();\r\n\t\tvar sum = 0;\r\n\t\tfor(i = 0; i < cpf.length; i++){\r\n\t\t\tsum += cpf[i] * base[i];\r\n\t\t}\r\n\t\tvar dv0 = calcDv(sum);\r\n\t\tsum = 0;\r\n\t\tbase = [9,8,7,6,5,4,3,2,1,0].reverse();\r\n\t\tcpf.push(dv0);\r\n\t\tfor(i = 0; i < cpf.length; i++){\r\n\t\t\tsum += cpf[i] * base[i];\r\n\t\t}\r\n\t\tvar dv1 = calcDv(sum);\r\n\t\treturn (\"\" + dv0) + dv1;\r\n\t}\r\n\treturn \"\";\r\n};\r\n\r\nvar calcDv = function(/*Number*/sum) {\r\n\tvar dv = sum % 11;\r\n\t//If dv is 10, it is represented as 0:\r\n\tif (dv === 10) {\r\n\t\tdv = 0;\r\n\t}\r\n\treturn dv;\r\n};\r\n\r\nreturn br;\r\n});\r\n"]}