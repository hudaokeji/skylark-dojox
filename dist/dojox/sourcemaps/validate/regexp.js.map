{"version":3,"sources":["validate/regexp.js"],"names":["define","lang","regexp","dojox","dxregexp","getObject","validate","ipAddress","flags","allowDottedDecimal","allowDottedHex","allowDottedOctal","allowDecimal","allowHex","allowIPv6","allowHybrid","a","push","ipAddressRE","length","join","host","allowIP","allowLocal","allowPort","allowNamed","portRE","hostNameRE","url","scheme","buildGroupRE","q","emailAddress","allowCruft","emailAddressRE","usernameRE","emailAddressList","listSeparator","numberFormat","format","escapeString","replace","ca","postalCode","province","us","state","allowTerritories","allowMilitary","statesRE"],"mappings":"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","file":"../../validate/regexp.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/regexp\", \"dojox/main\"], \r\n  function(lang, regexp, dojox){\r\n\r\nvar dxregexp = lang.getObject(\"validate.regexp\", true, dojox);\r\ndxregexp = dojox.validate.regexp = {\r\n\t\r\n\tipAddress: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a RE that matches an IP Address\r\n\t\t// description:\r\n\t\t//\t\tSupports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal.\r\n\t\t//\t\tSupports 2 formats for Ipv6.\r\n\t\t// flags: Object?\r\n\t\t//\t\tAll flags are boolean with default = true.\r\n\t\t//\r\n\t\t//\t\t- flags.allowDottedDecimal  Example, 207.142.131.235.  No zero padding.\r\n\t\t//\t\t- flags.allowDottedHex  Example, 0x18.0x11.0x9b.0x28.  Case insensitive.  Zero padding allowed.\r\n\t\t//\t\t- flags.allowDottedOctal  Example, 0030.0021.0233.0050.  Zero padding allowed.\r\n\t\t//\t\t- flags.allowDecimal  Example, 3482223595.  A decimal number between 0-4294967295.\r\n\t\t//\t\t- flags.allowHex  Example, 0xCF8E83EB.  Hexadecimal number between 0x0-0xFFFFFFFF.\r\n\t\t//\t\t  Case insensitive.  Zero padding allowed.\r\n\t\t//\t\t- flags.allowIPv6   IPv6 address written as eight groups of four hexadecimal digits.\r\n\t\t\r\n\t\t//\tFIXME: ipv6 can be written multiple ways IIRC\r\n\t\t//\t\t- flags.allowHybrid   IPv6 address written as six groups of four hexadecimal digits\r\n\t\t//\t\t-   followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\tif(typeof flags.allowDottedDecimal != \"boolean\"){ flags.allowDottedDecimal = true; }\r\n\t\tif(typeof flags.allowDottedHex != \"boolean\"){ flags.allowDottedHex = true; }\r\n\t\tif(typeof flags.allowDottedOctal != \"boolean\"){ flags.allowDottedOctal = true; }\r\n\t\tif(typeof flags.allowDecimal != \"boolean\"){ flags.allowDecimal = true; }\r\n\t\tif(typeof flags.allowHex != \"boolean\"){ flags.allowHex = true; }\r\n\t\tif(typeof flags.allowIPv6 != \"boolean\"){ flags.allowIPv6 = true; }\r\n\t\tif(typeof flags.allowHybrid != \"boolean\"){ flags.allowHybrid = true; }\r\n\r\n\t\t// decimal-dotted IP address RE.\r\n\t\tvar dottedDecimalRE =\r\n\t\t\t// Each number is between 0-255.  Zero padding is not allowed.\r\n\t\t\t\"((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\";\r\n\r\n\t\t// dotted hex IP address RE.  Each number is between 0x0-0xff.  Zero padding is allowed, e.g. 0x00.\r\n\t\tvar dottedHexRE = \"(0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]\\\\.){3}0[xX]0*[\\\\da-fA-F]?[\\\\da-fA-F]\";\r\n\r\n\t\t// dotted octal IP address RE.  Each number is between 0000-0377.\r\n\t\t// Zero padding is allowed, but each number must have at least 4 characters.\r\n\t\tvar dottedOctalRE = \"(0+[0-3][0-7][0-7]\\\\.){3}0+[0-3][0-7][0-7]\";\r\n\r\n\t\t// decimal IP address RE.  A decimal number between 0-4294967295.\r\n\t\tvar decimalRE =  \"(0|[1-9]\\\\d{0,8}|[1-3]\\\\d{9}|4[01]\\\\d{8}|42[0-8]\\\\d{7}|429[0-3]\\\\d{6}|\" +\r\n\t\t\t\"4294[0-8]\\\\d{5}|42949[0-5]\\\\d{4}|429496[0-6]\\\\d{3}|4294967[01]\\\\d{2}|42949672[0-8]\\\\d|429496729[0-5])\";\r\n\r\n\t\t// hexadecimal IP address RE.\r\n\t\t// A hexadecimal number between 0x0-0xFFFFFFFF. Case insensitive.  Zero padding is allowed.\r\n\t\tvar hexRE = \"0[xX]0*[\\\\da-fA-F]{1,8}\";\r\n\r\n\t\t// IPv6 address RE.\r\n\t\t// The format is written as eight groups of four hexadecimal digits, x:x:x:x:x:x:x:x,\r\n\t\t// where x is between 0000-ffff. Zero padding is optional. Case insensitive.\r\n\t\tvar ipv6RE = \"([\\\\da-fA-F]{1,4}\\\\:){7}[\\\\da-fA-F]{1,4}\";\r\n\r\n\t\t// IPv6/IPv4 Hybrid address RE.\r\n\t\t// The format is written as six groups of four hexadecimal digits,\r\n\t\t// followed by the 4 dotted decimal IPv4 format. x:x:x:x:x:x:d.d.d.d\r\n\t\tvar hybridRE = \"([\\\\da-fA-F]{1,4}\\\\:){6}\" +\r\n\t\t\t\"((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.){3}(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\";\r\n\r\n\t\t// Build IP Address RE\r\n\t\tvar a = [];\r\n\t\tif(flags.allowDottedDecimal){ a.push(dottedDecimalRE); }\r\n\t\tif(flags.allowDottedHex){ a.push(dottedHexRE); }\r\n\t\tif(flags.allowDottedOctal){ a.push(dottedOctalRE); }\r\n\t\tif(flags.allowDecimal){ a.push(decimalRE); }\r\n\t\tif(flags.allowHex){ a.push(hexRE); }\r\n\t\tif(flags.allowIPv6){ a.push(ipv6RE); }\r\n\t\tif(flags.allowHybrid){ a.push(hybridRE); }\r\n\r\n\t\tvar ipAddressRE = \"\";\r\n\t\tif(a.length > 0){\r\n\t\t\tipAddressRE = \"(\" + a.join(\"|\") + \")\";\r\n\t\t}\r\n\t\treturn ipAddressRE; // String\r\n\t},\r\n\r\n\thost: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a RE that matches a host\r\n\t\t// description:\r\n\t\t//\t\tA host is a named host (A-z0-9_- but not starting with -), a domain name or an IP address, possibly followed by a port number.\r\n\t\t// flags: Object?\r\n\t\t//\t\t- flags.allowNamed Allow a named host for local networks. Default is false.\r\n\t\t//\t\t- flags.allowIP  Allow an IP address for hostname.  Default is true.\r\n\t\t//\t\t- flags.allowLocal  Allow the host to be \"localhost\".  Default is false.\r\n\t\t//\t\t- flags.allowPort  Allow a port number to be present.  Default is true.\r\n\t\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\r\n\t\tif(typeof flags.allowIP != \"boolean\"){ flags.allowIP = true; }\r\n\t\tif(typeof flags.allowLocal != \"boolean\"){ flags.allowLocal = false; }\r\n\t\tif(typeof flags.allowPort != \"boolean\"){ flags.allowPort = true; }\r\n\t\tif(typeof flags.allowNamed != \"boolean\"){ flags.allowNamed = false; }\r\n\r\n\t\t//TODO: support unicode hostnames?\r\n\t\t// Domain name labels can not end with a dash.\r\n\t\tvar domainLabelRE = \"(?:[\\\\da-zA-Z](?:[-\\\\da-zA-Z]{0,61}[\\\\da-zA-Z])?)\";\r\n\t\tvar domainNameRE = \"(?:[a-zA-Z](?:[-\\\\da-zA-Z]{0,6}[\\\\da-zA-Z])?)\"; // restricted version to allow backwards compatibility with allowLocal, allowIP\r\n\r\n\t\t// port number RE\r\n\t\tvar portRE = flags.allowPort ? \"(\\\\:\\\\d+)?\" : \"\";\r\n\r\n\t\t// build host RE\r\n\t\tvar hostNameRE = \"((?:\" + domainLabelRE + \"\\\\.)+\" + domainNameRE + \"\\\\.?)\";\r\n\t\tif(flags.allowIP){ hostNameRE += \"|\" +  dxregexp.ipAddress(flags); }\r\n\t\tif(flags.allowLocal){ hostNameRE += \"|localhost\"; }\r\n\t\tif(flags.allowNamed){ hostNameRE += \"|^[^-][a-zA-Z0-9_-]*\"; }\r\n\t\treturn \"(\" + hostNameRE + \")\" + portRE; // String\r\n\r\n\t},\r\n\r\n\turl: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a regular expression that matches a URL\r\n\t\t// flags: Object?\r\n\t\t//\t\t- flags.scheme  Can be true, false, or [true, false].\r\n\t\t//\t\t-   This means: required, not allowed, or match either one.\r\n\t\t//\t\t- flags in regexp.host can be applied.\r\n\t\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\tif(!(\"scheme\" in flags)){ flags.scheme = [true, false]; }\r\n\r\n\t\t// Scheme RE\r\n\t\tvar protocolRE = regexp.buildGroupRE(flags.scheme,\r\n\t\t\tfunction(q){ if(q){ return \"(https?|ftps?)\\\\://\"; } return \"\"; }\r\n\t\t);\r\n\r\n\t\t// Path and query and anchor RE\r\n\t\tvar pathRE = \"(/(?:[^?#\\\\s/]+/)*(?:[^?#\\\\s/]+(?:\\\\?[^?#\\\\s/]*)?(?:#[A-Za-z][\\\\w.:-]*)?)?)?\";\r\n\r\n\t\treturn protocolRE + dxregexp.host(flags) + pathRE;\r\n\t},\r\n\r\n\temailAddress: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a regular expression that matches an email address\r\n\t\t// flags: Object?\r\n\t\t//\t\t- flags.allowCruft  Allow address like `<mailto:foo@yahoo.com>`.  Default is false.\r\n\t\t//\t\t- flags in regexp.host can be applied.\r\n\t\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\tif (typeof flags.allowCruft != \"boolean\") { flags.allowCruft = false; }\r\n\t\tflags.allowPort = false; // invalid in email addresses\r\n\r\n\t\t// user name RE per rfc5322\r\n\t\tvar usernameRE = \"([!#-'*+\\\\-\\\\/-9=?A-Z^-~]+[.])*[!#-'*+\\\\-\\\\/-9=?A-Z^-~]+\";\r\n\r\n\t\t// build emailAddress RE\r\n\t\tvar emailAddressRE = usernameRE + \"@\" + dxregexp.host(flags);\r\n\r\n\t\t// Allow email addresses with cruft\r\n\t\tif ( flags.allowCruft ) {\r\n\t\t\temailAddressRE = \"<?(mailto\\\\:)?\" + emailAddressRE + \">?\";\r\n\t\t}\r\n\r\n\t\treturn emailAddressRE; // String\r\n\t},\r\n\r\n\temailAddressList: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a regular expression that matches a list of email addresses.\r\n\t\t// flags: Object?\r\n\t\t//\t\t- flags.listSeparator  The character used to separate email addresses.  Default is \";\", \",\", \"\\n\" or \" \".\r\n\t\t//\t\t- flags in regexp.emailAddress can be applied.\r\n\t\t//\t\t- flags in regexp.host can be applied.\r\n\t\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\tif(typeof flags.listSeparator != \"string\"){ flags.listSeparator = \"\\\\s;,\"; }\r\n\r\n\t\t// build a RE for an Email Address List\r\n\t\tvar emailAddressRE = dxregexp.emailAddress(flags);\r\n\t\tvar emailAddressListRE = \"(\" + emailAddressRE + \"\\\\s*[\" + flags.listSeparator + \"]\\\\s*)*\" +\r\n\t\t\temailAddressRE + \"\\\\s*[\" + flags.listSeparator + \"]?\\\\s*\";\r\n\r\n\t\treturn emailAddressListRE; // String\r\n\t},\r\n\t\r\n\tnumberFormat: function(flags){\r\n\t\t// summary:\r\n\t\t//\t\tBuilds a regular expression to match any sort of number based format\r\n\t\t// description:\r\n\t\t//\t\tUse this method for phone numbers, social security numbers, zip-codes, etc.\r\n\t\t//\t\tThe RE can match one format or one of multiple formats.\r\n\t\t//\r\n\t\t//\t\tFormat:\r\n\t\t//\r\n\t\t//\t\t- #        Stands for a digit, 0-9.\r\n\t\t//\t\t- ?        Stands for an optional digit, 0-9 or nothing.\r\n\t\t//\t\t- All other characters must appear literally in the expression.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\t- \"(###) ###-####\"\t\t-    ->   (510) 542-9742\r\n\t\t//\t\t- \"(###) ###-#### x#???\" ->   (510) 542-9742 x153\r\n\t\t//\t\t- \"###-##-####\"\t\t- \t\t-   ->   506-82-1089\t\t-    i.e. social security number\r\n\t\t//\t\t- \"#####-####\"\t\t- \t\t-    ->   98225-1649\t\t- \t\t- i.e. zip code\r\n\t\t//\r\n\t\t// flags:  Object?\r\n\t\t//\t\t- flags.format  A string or an Array of strings for multiple formats.\r\n\r\n\t\t// assign default values to missing parameters\r\n\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\tif(typeof flags.format == \"undefined\"){ flags.format = \"###-###-####\"; }\r\n\r\n\t\t// Converts a number format to RE.\r\n\t\tvar digitRE = function(format){\r\n\t\t\t// escape all special characters, except '?'\r\n\t\t\treturn regexp.escapeString(format, \"?\")\r\n\t\t\t\t// Now replace '?' with Regular Expression\r\n\t\t\t\t.replace(/\\?/g, \"\\\\d?\")\r\n\t\t\t\t// replace # with Regular Expression\r\n\t\t\t\t.replace(/#/g, \"\\\\d\")\r\n\t\t\t;\r\n\t\t};\r\n\r\n\t\t// build RE for multiple number formats\r\n\t\treturn regexp.buildGroupRE(flags.format, digitRE); //String\r\n\t},\r\n\t\r\n\tca: {\r\n\r\n\t\tpostalCode: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tString regular Express to match Canadain Postal Codes\r\n\t\t\treturn \"([A-Z][0-9][A-Z] [0-9][A-Z][0-9])\";\r\n\t\t},\r\n\r\n\t\tprovince: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ta regular expression to match Canadian Province Abbreviations\r\n\t\t\treturn \"(AB|BC|MB|NB|NL|NS|NT|NU|ON|PE|QC|SK|YT)\";\r\n\t\t}\r\n\r\n\t},\r\n\t\r\n\tus:{\r\n\t\tstate: function(flags){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA regular expression to match US state and territory abbreviations\r\n\t\t\t// flags: Object?\r\n\t\t\t//\t\t- flags.allowTerritories  Allow Guam, Puerto Rico, etc.  Default is true.\r\n\t\t\t//\t\t- flags.allowMilitary  Allow military 'states', e.g. Armed Forces Europe (AE).  Default is true.\r\n\r\n\t\t\t// assign default values to missing parameters\r\n\t\t\tflags = (typeof flags == \"object\") ? flags : {};\r\n\t\t\tif(typeof flags.allowTerritories != \"boolean\"){ flags.allowTerritories = true; }\r\n\t\t\tif(typeof flags.allowMilitary != \"boolean\"){ flags.allowMilitary = true; }\r\n\r\n\t\t\t// state RE\r\n\t\t\tvar statesRE =\r\n\t\t\t\t\"AL|AK|AZ|AR|CA|CO|CT|DE|DC|FL|GA|HI|ID|IL|IN|IA|KS|KY|LA|ME|MD|MA|MI|MN|MS|MO|MT|\" +\r\n\t\t\t\t\"NE|NV|NH|NJ|NM|NY|NC|ND|OH|OK|OR|PA|RI|SC|SD|TN|TX|UT|VT|VA|WA|WV|WI|WY\";\r\n\r\n\t\t\t// territories RE\r\n\t\t\tvar territoriesRE = \"AS|FM|GU|MH|MP|PW|PR|VI\";\r\n\r\n\t\t\t// military states RE\r\n\t\t\tvar militaryRE = \"AA|AE|AP\";\r\n\r\n\t\t\t// Build states and territories RE\r\n\t\t\tif(flags.allowTerritories){ statesRE += \"|\" + territoriesRE; }\r\n\t\t\tif(flags.allowMilitary){ statesRE += \"|\" + militaryRE; }\r\n\r\n\t\t\treturn \"(\" + statesRE + \")\"; // String\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n};\r\n\r\nreturn dxregexp;\r\n\r\n});\r\n"]}