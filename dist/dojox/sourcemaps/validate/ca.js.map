{"version":3,"sources":["validate/ca.js"],"names":["define","lang","validate","xregexp","us","ca","getObject","mixin","isPhoneNumber","value","isProvince","RegExp","province","test","isSocialInsuranceNumber","isNumberFormat","format","isPostalCode","postalCode"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,UAAW,WAAY,QACjD,SAASC,EAAMC,EAAUC,EAASC,GAEnC,IAAIC,EAAKJ,EAAKK,UAAU,MAAM,EAAMJ,GAiDpC,OAzCAD,EAAKM,MAAMF,GAEVG,cAAe,SAAqBC,GAGnC,OAAOL,EAAGI,cAAcC,IAGzBC,WAAY,SAAwBD,GAInC,OADS,IAAIE,OAAO,IAAMR,EAAQE,GAAGO,WAAa,IAAK,KAC7CC,KAAKJ,IAGhBK,wBAAyB,SAAqBL,GAS7C,OAAOP,EAASa,eAAeN,GADjBO,QAAU,cAAe,cAAe,gBAIvDC,aAAc,SAASR,GAStB,OADS,IAAIE,OAAO,IAAMR,EAAQE,GAAGa,aAAe,IAAK,KAC/CL,KAAKJ,MAKVJ","file":"../../validate/ca.js","sourcesContent":["define([\"dojo/_base/lang\", \"./_base\", \"./regexp\", \"./us\"], \r\n function(lang, validate, xregexp, us){\r\n\r\nvar ca = lang.getObject(\"ca\", true, validate);\r\n/*=====\r\nca = {\r\n\t// summary:\r\n\t//\t\tModule which includes Canadian-specific methods for dojox.validate\r\n};\r\n=====*/\r\n\r\nlang.mixin(ca, {\r\n\t\r\n\tisPhoneNumber: function(/* String */value){\r\n\t\t// summary:\r\n\t\t//\t\tValidates Canadian 10-digit phone number for several common formats\r\n\t\treturn us.isPhoneNumber(value);  // Boolean\r\n\t},\r\n\r\n\tisProvince: function(/* String[2] */value) {\r\n\t\t// summary:\r\n\t\t//\t\tValidates Canadian province abbreviations (2 characters)\r\n\t\tvar re = new RegExp(\"^\" + xregexp.ca.province() + \"$\", \"i\");\r\n\t\treturn re.test(value); // Boolean\r\n\t},\r\n \r\n\tisSocialInsuranceNumber: function(/* String */value) {\r\n\t\t// summary:\r\n\t\t//\t\tValidates Canadian 9 digit social insurance number for several\r\n\t\t//\t\tcommon formats\r\n\t\t// description:\r\n\t\t//\t\tValidates Canadian 9 digit social insurance number for several\r\n\t\t//\t\tcommon formats. This routine only pattern matches and does not\r\n\t\t//\t\tuse the Luhn Algorithm to validate number.\r\n\t\tvar flags = { format: [ \"###-###-###\", \"### ### ###\", \"#########\" ]};\r\n\t\treturn validate.isNumberFormat(value, flags); // Boolean\r\n\t},\r\n\r\n\tisPostalCode: function(value) {\r\n\t\t// summary:\r\n\t\t//\t\tValidates Canadian 6 digit postal code\r\n\t\t// description:\r\n\t\t//\t\tValidates Canadian 6 digit postal code.\r\n\t\t//\t\tCanadian postal codes are in the format ANA NAN,\r\n\t\t//\t\twhere A is a letter and N is a digit, with a space\r\n\t\t//\t\tseparating the third and fourth characters.\r\n\t\tvar re = new RegExp(\"^\" + xregexp.ca.postalCode() + \"$\", \"i\");\r\n\t\treturn re.test(value); // Boolean\r\n\t}\r\n\r\n});\r\n\r\nreturn ca;\r\n});\r\n"]}