{"version":3,"sources":["validate/creditCard.js"],"names":["define","lang","validate","_cardInfo","mc","ec","vi","ax","dc","bl","di","jcb","er","isValidCreditCard","value","ccType","toLowerCase","isValidLuhn","isValidCreditCardNumber","String","replace","cardinfo","results","expr","match","p","push","length","join","isValidCvv","format","isString","isNumberFormat"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,WAAY,SAASC,EAAMC,GAiHtD,OAvGAA,EAASC,WAsBRC,GAAK,kBACLC,GAAK,kBACLC,GAAK,2BACLC,GAAK,iBACLC,GAAK,qCACLC,GAAK,qCACLC,GAAK,gBACLC,IAAM,sCACNC,GAAK,yBAGNV,EAASW,kBAAoB,SAASC,EAAOC,GAgB5C,OAAiC,MAAxBA,EAAOC,eAAyBd,EAASe,YAAYH,KAC5DZ,EAASgB,wBAAwBJ,EAAOC,EAAOC,gBAGlDd,EAASgB,wBAA0B,SAASJ,EAAOC,GAUlDD,EAAQK,OAAOL,GAAOM,QAAQ,QAAQ,IAEtC,IAAIC,EAAWnB,EAASC,UAAWmB,KACnC,GAAGP,EAAO,CACT,IAAIQ,EAAO,IAAMF,EAASN,EAAOC,eAAiB,IAClD,QAAOO,KAAST,EAAMU,MAAMD,GAG7B,IAAI,IAAIE,KAAKJ,EACTP,EAAMU,MAAM,IAAMH,EAASI,GAAK,MAClCH,EAAQI,KAAKD,GAGf,QAAOH,EAAQK,QAASL,EAAQM,KAAK,MAGtC1B,EAAS2B,WAAa,SAAyBf,EAAmBC,GAOjE,IAAIe,EACJ,OAJI7B,EAAK8B,SAASjB,KACjBA,EAAQK,OAAOL,IAGRC,EAAOC,eACd,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACJc,EAAS,MACT,MACD,IAAK,KACJA,EAAS,OAIX,QAASA,GAAUhB,EAAMa,QAAUzB,EAAS8B,eAAelB,GAASgB,OAAQA,KAItE5B","file":"../../validate/creditCard.js","sourcesContent":["define([\"dojo/_base/lang\", \"./_base\"], function(lang, validate){\r\n\r\n/*=====\r\n\treturn {\r\n\t\t// summary:\r\n\t\t//\t\tModule provides validation functions for Credit Cards, using account number\r\n\t\t//\t\trules in conjunction with the Luhn algorigthm, with a pluggable card info database.\r\n\t};\r\n=====*/\r\n\r\nvalidate._cardInfo = {\r\n\t// summary:\r\n\t//\t\tA dictionary list of credit card abbreviations\r\n\t// description:\r\n\t//\t\tA hash of valid CC abbreviations and regular expressions\r\n\t//\r\n\t//\t\t- mc: Mastercard\r\n\t//\t\t- ec: Eurocard\r\n\t//\t\t- vi: Visa\r\n\t//\t\t- ax: American Express\r\n\t//\t\t- dc: Diners Club\r\n\t//\t\t- bl: Carte Blanch\r\n\t//\t\t- di: Discover\r\n\t//\t\t- jcb: JCB\r\n\t//\t\t- er: Enroute\r\n\t// example:\r\n\t//\t\tDefine your own card, gift-card, whatever. Starts with 7,\r\n\t//\t\tis 15 total length.\r\n\t//\t| dojo.mixin(dojox.validate._cardInfo, {\r\n\t//\t| \t\"my\":\"7[0-9]{14}\"\r\n\t//\t| });\r\n\t\r\n\t'mc':'5[1-5][0-9]{14}',\r\n\t'ec':'5[1-5][0-9]{14}',\r\n\t'vi':'4(?:[0-9]{12}|[0-9]{15})',\r\n\t'ax':'3[47][0-9]{13}',\r\n\t'dc':'3(?:0[0-5][0-9]{11}|[68][0-9]{12})',\r\n\t'bl':'3(?:0[0-5][0-9]{11}|[68][0-9]{12})',\r\n\t'di':'6011[0-9]{12}',\r\n\t'jcb':'(?:3[0-9]{15}|(2131|1800)[0-9]{11})',\r\n\t'er':'2(?:014|149)[0-9]{11}'\r\n};\r\n\r\nvalidate.isValidCreditCard = function(value, ccType){\r\n\t// summary:\r\n\t//\t\tValidate a credit card number by type with Luhn checking.\r\n\t// description:\r\n\t//\t\tChecks if a credit card type matches the # scheme in a passed value, and if\r\n\t//\t\tthe Luhn checksum is accurate (unless its an Enroute card, in which case\r\n\t//\t\tthe checkSum is skipped), returning a Boolean to check against.\r\n\t// value: String|Int\r\n\t//\t\tA Value (credit card number) to validate\r\n\t// ccType: String\r\n\t//\t\tA credit-card abbreviation.\r\n\t// example:\r\n\t// |\tif(dojox.validate.isValidCreditCard(\"12345\", \"mc\")){\r\n\t// |\t\tconsole.log('inconceivable');\r\n\t// |\t}\r\n\t\r\n\treturn ((ccType.toLowerCase() == 'er' || validate.isValidLuhn(value)) &&\r\n\t\t\tvalidate.isValidCreditCardNumber(value, ccType.toLowerCase())); // Boolean\r\n};\r\n\r\nvalidate.isValidCreditCardNumber = function(value, ccType){\r\n\t// summary:\r\n\t//\t\tChecks if value matches the pattern for that card or any card types if none is specified\r\n\t// value: String|Int\r\n\t//\t\tCC #, white spaces and dashes are ignored\r\n\t// ccType: String?\r\n\t//\t\tOne of the abbreviation values in `dojox.validate._cardInfo` --\r\n\t//\t\tif Omitted, function returns a `|` delimited string of matching card types,\r\n\t//\t\tor false if no matches found.\r\n\r\n\tvalue = String(value).replace(/[- ]/g,''); //ignore dashes and whitespaces\r\n\r\n\tvar cardinfo = validate._cardInfo, results = [];\r\n\tif(ccType){\r\n\t\tvar expr = '^' + cardinfo[ccType.toLowerCase()] + '$';\r\n\t\treturn expr ? !!value.match(expr) : false; // boolean\r\n\t}\r\n\r\n\tfor(var p in cardinfo){\r\n\t\tif(value.match('^' + cardinfo[p] + '$')){\r\n\t\t\tresults.push(p);\r\n\t\t}\r\n\t}\r\n\treturn results.length ? results.join('|') : false; // String|Boolean\r\n};\r\n\r\nvalidate.isValidCvv = function(/* String|Int */value, /* String */ccType) {\r\n\t// summary:\r\n\t//\t\tValidate the security code (CCV) for a passed credit-card type.\r\n\t\r\n\tif(!lang.isString(value)){\r\n\t\tvalue = String(value);\r\n\t}\r\n\tvar format;\r\n\tswitch (ccType.toLowerCase()){\r\n\t\tcase 'mc':\r\n\t\tcase 'ec':\r\n\t\tcase 'vi':\r\n\t\tcase 'di':\r\n\t\t\tformat = '###';\r\n\t\t\tbreak;\r\n\t\tcase 'ax':\r\n\t\t\tformat = '####';\r\n\t\t\tbreak;\r\n\t}\r\n\t\r\n\treturn !!format && value.length && validate.isNumberFormat(value, { format: format }); // Boolean\r\n};\r\n\r\n// TODO: return functions defined in this module, rather than sticking them into \"validate\"\r\nreturn validate;\r\n});\r\n"]}