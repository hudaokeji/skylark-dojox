{"version":3,"sources":["validate/web.js"],"names":["define","validate","xregexp","isIpAddress","value","flags","RegExp","ipAddress","test","isUrl","url","isEmailAddress","emailAddress","isEmailAddressList","emailAddressList","getEmailAddressList","listSeparator","split"],"mappings":";;;;;;;AAAAA,QAAQ,UAAW,YAAa,SAASC,EAAUC,GAwFnD,OAtFAD,EAASE,YAAc,SAASC,EAAOC,GAqBtC,OADS,IAAIC,OAAO,IAAMJ,EAAQK,UAAUF,GAAS,IAAK,KAChDG,KAAKJ,IAIhBH,EAASQ,MAAQ,SAASL,EAAOC,GAYhC,OADS,IAAIC,OAAO,IAAMJ,EAAQQ,IAAIL,GAAS,IAAK,KAC1CG,KAAKJ,IAGhBH,EAASU,eAAiB,SAASP,EAAOC,GAWzC,OADS,IAAIC,OAAO,IAAMJ,EAAQU,aAAaP,GAAS,IAAK,KACnDG,KAAKJ,IAGhBH,EAASY,mBAAqB,SAAST,EAAOC,GAY7C,OADS,IAAIC,OAAO,IAAMJ,EAAQY,iBAAiBT,GAAS,IAAK,KACvDG,KAAKJ,IAGhBH,EAASc,oBAAsB,SAASX,EAAOC,GAW9C,OAHIA,IAASA,MACTA,EAAMW,gBAAiBX,EAAMW,cAAgB,SAE5Cf,EAASY,mBAAmBT,EAAOC,GAChCD,EAAMa,MAAM,IAAIX,OAAO,QAAUD,EAAMW,cAAgB,cAKzDf","file":"../../validate/web.js","sourcesContent":["define([\"./_base\", \"./regexp\"], function(validate, xregexp){\r\n\r\nvalidate.isIpAddress = function(value, flags) {\r\n\t// summary:\r\n\t//\t\tValidates an IP address\r\n\t// description:\r\n\t//\t\tSupports 5 formats for IPv4: dotted decimal, dotted hex, dotted octal, decimal and hexadecimal.\r\n\t//\t\tSupports 2 formats for Ipv6.\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\tAll flags are boolean with default = true.\r\n\t//\r\n\t//\t\t- flags.allowDottedDecimal  Example, 207.142.131.235.  No zero padding.\r\n\t//\t\t- flags.allowDottedHex  Example, 0x18.0x11.0x9b.0x28.  Case insensitive.  Zero padding allowed.\r\n\t//\t\t- flags.allowDottedOctal  Example, 0030.0021.0233.0050.  Zero padding allowed.\r\n\t//\t\t- flags.allowDecimal  Example, 3482223595.  A decimal number between 0-4294967295.\r\n\t//\t\t- flags.allowHex  Example, 0xCF8E83EB.  Hexadecimal number between 0x0-0xFFFFFFFF.\r\n\t//\t\t  Case insensitive.  Zero padding allowed.\r\n\t//\t\t- flags.allowIPv6   IPv6 address written as eight groups of four hexadecimal digits.\r\n\t//\t\t- flags.allowHybrid   IPv6 address written as six groups of four hexadecimal digits\r\n\t//\t\t  followed by the usual 4 dotted decimal digit notation of IPv4. x:x:x:x:x:x:d.d.d.d\r\n\r\n\tvar re = new RegExp(\"^\" + xregexp.ipAddress(flags) + \"$\", \"i\");\r\n\treturn re.test(value); // Boolean\r\n};\r\n\r\n\r\nvalidate.isUrl = function(value, flags) {\r\n\t// summary:\r\n\t//\t\tChecks if a string could be a valid URL\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t- flags.scheme  Can be true, false, or [true, false].\r\n\t//\t\t  This means: required, not allowed, or either.\r\n\t//\t\t- flags in regexp.host can be applied.\r\n\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\t//\t\t- flags in regexp.tld can be applied.\r\n\r\n\tvar re = new RegExp(\"^\" + xregexp.url(flags) + \"$\", \"i\");\r\n\treturn re.test(value); // Boolean\r\n};\r\n\r\nvalidate.isEmailAddress = function(value, flags) {\r\n\t// summary:\r\n\t//\t\tChecks if a string could be a valid email address\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t- flags.allowCruft  Allow address like `<mailto:foo@yahoo.com>`.  Default is false.\r\n\t//\t\t- flags in regexp.host can be applied.\r\n\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\t//\t\t- flags in regexp.tld can be applied.\r\n\r\n\tvar re = new RegExp(\"^\" + xregexp.emailAddress(flags) + \"$\", \"i\");\r\n\treturn re.test(value); // Boolean\r\n};\r\n\r\nvalidate.isEmailAddressList = function(value, flags) {\r\n\t// summary:\r\n\t//\t\tChecks if a string could be a valid email address list.\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\t- flags.listSeparator  The character used to separate email addresses.  Default is \";\", \",\", \"\\n\" or \" \".\r\n\t//\t\t- flags in regexp.emailAddress can be applied.\r\n\t//\t\t- flags in regexp.host can be applied.\r\n\t//\t\t- flags in regexp.ipAddress can be applied.\r\n\t//\t\t- flags in regexp.tld can be applied.\r\n\r\n\tvar re = new RegExp(\"^\" + xregexp.emailAddressList(flags) + \"$\", \"i\");\r\n\treturn re.test(value); // Boolean\r\n};\r\n\r\nvalidate.getEmailAddressList = function(value, flags) {\r\n\t// summary:\r\n\t//\t\tCheck if value is an email address list. If an empty list\r\n\t//\t\tis returned, the value didn't pass the test or it was empty.\r\n\t// value: String\r\n\t// flags: Object?\r\n\t//\t\tAn object (same as dojo.validate.isEmailAddressList)\r\n\r\n\tif(!flags) { flags = {}; }\r\n\tif(!flags.listSeparator) { flags.listSeparator = \"\\\\s;,\"; }\r\n\r\n\tif ( validate.isEmailAddressList(value, flags) ) {\r\n\t\treturn value.split(new RegExp(\"\\\\s*[\" + flags.listSeparator + \"]\\\\s*\")); // Array\r\n\t}\r\n\treturn []; // Array\r\n};\r\n\r\nreturn validate;\r\n});\r\n"]}