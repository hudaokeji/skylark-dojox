{"version":3,"sources":["gesture/tap.js"],"names":["define","kernel","declare","lang","Base","dojox","experimental","clz","defaultEvent","subEvents","holdThreshold","doubleTapTimeout","tapRadius","press","data","e","touches","length","clearTimeout","tapTimeOut","context","target","this","_initTap","setTimeout","hitch","_isTap","fire","type","release","c","x","y","t","ct","Date","getTime","screenX","screenY","dx","Math","abs","dy","gesture","tap","Tap"],"mappings":";;;;;;;AAAAA,QACC,oBACA,qBACA,kBACA,SACA,WACE,SAASC,EAAQC,EAASC,EAAMC,EAAMC,GA2CzCJ,EAAOK,aAAa,qBAIpB,IAAIC,EAAML,EAA4CE,GAGrDI,aAAc,MAKdC,WAAY,OAAQ,aAIpBC,cAAe,IAIfC,iBAAkB,IAIlBC,UAAW,GAEXC,MAAO,SAAmBC,EAAeC,GAGxC,GAAGA,EAAEC,SAAWD,EAAEC,QAAQC,QAAU,EAInC,OAFAC,aAAaJ,EAAKK,wBACXL,EAAKM,QAGb,IAAIC,EAASN,EAAEM,OACfC,KAAKC,SAAST,EAAMC,GACpBD,EAAKK,WAAaK,WAAWrB,EAAKsB,MAAMH,KAAM,WAC1CA,KAAKI,OAAOZ,EAAMC,IACpBO,KAAKK,KAAKN,GAASO,KAAM,oBAEnBd,EAAKM,UACTE,KAAKZ,gBAEVmB,QAAS,SAAmBf,EAAeC,GAG1C,GAAID,EAAKM,QAAT,CAIA,GAAGE,KAAKI,OAAOZ,EAAMC,GACpB,OAAOD,EAAKM,QAAQU,GACpB,KAAK,EACJR,KAAKK,KAAKZ,EAAEM,QAASO,KAAM,QAC3B,MACD,KAAK,EACJN,KAAKK,KAAKZ,EAAEM,QAASO,KAAM,kBAI7BV,aAAaJ,EAAKK,iBAbjBD,aAAaJ,EAAKK,aAepBI,SAAU,SAAmBT,EAAeC,GAGvCD,EAAKM,UACRN,EAAKM,SAAWW,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGH,EAAG,IAEtC,IAAII,GAAK,IAAIC,MAAOC,UACjBF,EAAKpB,EAAKM,QAAQa,GAAKX,KAAKX,iBAC9BG,EAAKM,QAAQU,KAEbhB,EAAKM,QAAQU,EAAI,EACjBhB,EAAKM,QAAQW,EAAIhB,EAAEsB,QACnBvB,EAAKM,QAAQY,EAAIjB,EAAEuB,SAEpBxB,EAAKM,QAAQa,EAAIC,GAElBR,OAAQ,SAAmBZ,EAAeC,GAGzC,IAAIwB,EAAKC,KAAKC,IAAI3B,EAAKM,QAAQW,EAAIhB,EAAEsB,SACjCK,EAAKF,KAAKC,IAAI3B,EAAKM,QAAQY,EAAIjB,EAAEuB,SACrC,OAAOC,GAAMjB,KAAKV,WAAa8B,GAAMpB,KAAKV,aAS5C,OAJAP,EAAMsC,QAAQC,IAAM,IAAIrC,EAExBF,EAAMsC,QAAQC,IAAIC,IAAMtC,EAEjBF,EAAMsC,QAAQC","file":"../../gesture/tap.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"./Base\",\r\n\t\"../main\"\r\n], function(kernel, declare, lang, Base, dojox){\r\n// module:\r\n//\t\tdojox/gesture/tap\r\n\t\r\n/*=====\r\n\tdojox.gesture.tap = {\r\n\t\t// summary:\r\n\t\t//\t\tThis module provides tap gesture event handlers:\r\n\t\t//\r\n\t\t//\t\t1. dojox.gesture.tap: 'tap' event\r\n\t\t//\r\n\t\t//\t\t2. dojox.gesture.tap.hold: 'tap.hold' event\r\n\t\t//\r\n\t\t//\t\t3. dojox.gesture.tap.doubletap: 'tap.doubletap' event\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tA. Used with dojo.connect()\r\n\t\t//\t\t|\tdojo.connect(node, dojox.gesture.tap, function(e){});\r\n\t\t//\t\t|\tdojo.connect(node, dojox.gesture.tap.hold, function(e){});\r\n\t\t//\t\t|\tdojo.connect(node, dojox.gesture.tap.doubletap, function(e){});\r\n\t\t//\r\n\t\t//\t\tB. Used with dojo.on\r\n\t\t//\t\t|\tdefine(['dojo/on', 'dojox/gesture/tap'], function(on, tap){\r\n\t\t//\t\t|\t\ton(node, tap, function(e){});\r\n\t\t//\t\t|\t\ton(node, tap.hold, function(e){});\r\n\t\t//\t\t|\t\ton(node, tap.doubletap, function(e){});\r\n\t\t//\r\n\t\t//\t\tC. Used with dojox.gesture.tap.* directly\r\n\t\t//\t\t|\tdojox.gesture.tap(node, function(e){});\r\n\t\t//\t\t|\tdojox.gesture.tap.hold(node, function(e){});\r\n\t\t//\t\t|\tdojox.gesture.tap.doubletap(node, function(e){});\r\n\t\t//\r\n\t\t//\t\tThough there is always a default gesture instance after being required, e.g\r\n\t\t//\t\t|\trequire(['dojox/gesture/tap'], function(){...});\r\n\t\t//\r\n\t\t//\t\tIt's possible to create a new one with different parameter setting:\r\n\t\t//\t\t|\tvar myTap = new dojox.gesture.tap.Tap({holdThreshold: 300});\r\n\t\t//\t\t|\tdojo.connect(node, myTap, function(e){});\r\n\t\t//\t\t|\tdojo.connect(node, myTap.hold, function(e){});\r\n\t\t//\t\t|\tdojo.connect(node, myTap.doubletap, function(e){});\r\n\t};\r\n=====*/\r\n\r\nkernel.experimental(\"dojox.gesture.tap\");\r\n\r\n// Declare an internal anonymous class which will only be exported\r\n// by module return value e.g. dojox.gesture.tap.Tap\r\nvar clz = declare(/*===== \"dojox.gesture.tap\", =====*/Base, {\r\n\t// defaultEvent: [readonly] String\r\n\t//\t\tDefault event - 'tap'\r\n\tdefaultEvent: \"tap\",\r\n\r\n\t// subEvents: [readonly] Array\r\n\t//\t\tList of sub events, used by being\r\n\t//\t\tcombined with defaultEvent as 'tap.hold', 'tap.doubletap'.\r\n\tsubEvents: [\"hold\", \"doubletap\"],\r\n\r\n\t// holdThreshold: Integer\r\n\t//\t\tThreshold(in milliseconds) for 'tap.hold'\r\n\tholdThreshold: 500,\r\n\r\n\t// holdThreshold: Integer\r\n\t//\t\tTimeout (in milliseconds) for 'tap.doubletap'\r\n\tdoubleTapTimeout: 250,\r\n\r\n\t// tapRadius: Integer\r\n\t//\t\tValid tap radius from previous touch point\r\n\ttapRadius: 10,\r\n\r\n\tpress: function(/*Object*/data, /*Event*/e){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten, record initial tap info and register a timeout checker for 'tap.hold'\r\n\t\tif(e.touches && e.touches.length >= 2){\r\n\t\t\t//tap gesture is only for single touch\r\n\t\t\tclearTimeout(data.tapTimeOut); \r\n\t\t\tdelete data.context;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar target = e.target;\r\n\t\tthis._initTap(data, e);\r\n\t\tdata.tapTimeOut = setTimeout(lang.hitch(this, function(){\r\n\t\t\tif(this._isTap(data, e)){\r\n\t\t\t\tthis.fire(target, {type: \"tap.hold\"});\r\n\t\t\t}\r\n\t\t\tdelete data.context;\r\n\t\t}), this.holdThreshold);\r\n\t},\r\n\trelease: function(/*Object*/data, /*Event*/e){\r\n\t\t// summary:\r\n\t\t//\t\tOverwritten, fire matched 'tap' or 'tap.doubletap' during touchend\r\n\t\tif(!data.context){\r\n\t\t\tclearTimeout(data.tapTimeOut);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(this._isTap(data, e)){\r\n\t\t\tswitch(data.context.c){\r\n\t\t\tcase 1: \r\n\t\t\t\tthis.fire(e.target, {type: \"tap\"});\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tthis.fire(e.target, {type: \"tap.doubletap\"});\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tclearTimeout(data.tapTimeOut);\r\n\t},\r\n\t_initTap: function(/*Object*/data, /*Event*/e){\r\n\t\t// summary:\r\n\t\t//\t\tUpdate the gesture data with new tap info \r\n\t\tif(!data.context){\r\n\t\t\tdata.context = {x: 0, y: 0, t: 0, c: 0};\r\n\t\t}\r\n\t\tvar ct = new Date().getTime();\r\n\t\tif(ct - data.context.t <= this.doubleTapTimeout){\r\n\t\t\tdata.context.c++;\r\n\t\t}else{\r\n\t\t\tdata.context.c = 1;\r\n\t\t\tdata.context.x = e.screenX;\r\n\t\t\tdata.context.y = e.screenY;\r\n\t\t}\r\n\t\tdata.context.t = ct;\r\n\t},\r\n\t_isTap: function(/*Object*/data, /*Event*/e){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether it's an valid tap\r\n\t\tvar dx = Math.abs(data.context.x - e.screenX);\r\n\t\tvar dy = Math.abs(data.context.y - e.screenY);\r\n\t\treturn dx <= this.tapRadius && dy <= this.tapRadius;\r\n\t}\r\n});\r\n\r\n// the default tap instance for handy use\r\ndojox.gesture.tap = new clz();\r\n// Class for creating a new Tap instance\r\ndojox.gesture.tap.Tap = clz;\r\n\r\nreturn dojox.gesture.tap;\r\n\r\n});"]}