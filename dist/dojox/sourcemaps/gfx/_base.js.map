{"version":3,"sources":["gfx/_base.js"],"names":["define","kernel","lang","Color","has","win","arr","dom","domConstruct","domGeom","g","getObject","b","_base","_hasClass","node","classStr","cls","getAttribute","indexOf","_addClass","setAttribute","_removeClass","replace","RegExp","_getFontMeasurements","p","oldStyle","heights","1em","1ex","100%","12pt","16px","xx-small","x-small","small","medium","large","x-large","xx-large","doc","documentElement","style","fontSize","div","create","position","left","top","width","height","borderWidth","margin","padding","outline","lineHeight","overflow","body","Math","round","offsetHeight","removeChild","fontMeasurements","_getCachedFontMeasurements","recalculate","measuringNode","empty","_getTextBox","text","className","m","s","i","box","al","arguments","length","visibility","innerHTML","getBoundingClientRect","bcr","l","t","w","right","h","bottom","getMarginBox","_computeTextLocation","textShape","fixHeight","loc","align","x","c","y","_computeTextBoundingBox","_isRendered","getShape","font","getFont","defaultFont","getTextWidth","normalizedLength","size","parent","getParent","typeCtorCache","uniqueId","_getUniqueId","id","_scopeName","byId","_fixMsTouchAction","surface","r","rawNode","msTouchAction","mixin","defaultPath","type","path","defaultPolyline","points","defaultRect","defaultEllipse","cx","cy","rx","ry","defaultCircle","defaultLine","x1","y1","x2","y2","defaultImage","src","defaultText","decoration","rotated","kerning","defaultTextPath","defaultStroke","color","cap","join","defaultLinearGradient","colors","offset","defaultRadialGradient","defaultPattern","variant","weight","family","getDefault","Function","prototype","normalizeColor","normalizeParameters","existed","update","makeParameters","defaults","delegate","result","clone","formatNumber","addSpace","val","toString","toFixed","point","makeFontString","splitFontString","str","split","substring","j","charAt","slice","cm_in_pt","mm_in_pt","px_in_pt","pt2px","len","px2pt","parseFloat","pathVmlRegExp","pathSvgRegExp","equalSources","a","switchTo","renderer","ns","forEach","name","some","Surface"],"mappings":"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","file":"../../gfx/_base.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/Color\", \"dojo/_base/sniff\", \"dojo/_base/window\",\r\n\t    \"dojo/_base/array\",\"dojo/dom\", \"dojo/dom-construct\",\"dojo/dom-geometry\"],\r\nfunction(kernel, lang, Color, has, win, arr, dom, domConstruct, domGeom){\r\n\t// module:\r\n\t//\t\tdojox/gfx\r\n\t// summary:\r\n\t//\t\tThis module contains common core Graphics API used by different graphics renderers.\r\n\r\n\tvar g = lang.getObject(\"dojox.gfx\", true),\r\n\t\tb = g._base = {};\r\n\t\r\n\t// candidates for dojox.style (work on VML and SVG nodes)\r\n\tg._hasClass = function(/*DomNode*/node, /*String*/classStr){\r\n\t\t// summary:\r\n\t\t//\t\tReturns whether or not the specified classes are a portion of the\r\n\t\t//\t\tclass list currently applied to the node.\r\n\t\t\r\n\t\t// return (new RegExp('(^|\\\\s+)'+classStr+'(\\\\s+|$)')).test(node.className)\t// Boolean\r\n\t\tvar cls = node.getAttribute(\"className\");\r\n\t\treturn cls && (\" \" + cls + \" \").indexOf(\" \" + classStr + \" \") >= 0;  // Boolean\r\n\t};\r\n\tg._addClass = function(/*DomNode*/node, /*String*/classStr){\r\n\t\t// summary:\r\n\t\t//\t\tAdds the specified classes to the end of the class list on the\r\n\t\t//\t\tpassed node.\r\n\t\tvar cls = node.getAttribute(\"className\") || \"\";\r\n\t\tif(!cls || (\" \" + cls + \" \").indexOf(\" \" + classStr + \" \") < 0){\r\n\t\t\tnode.setAttribute(\"className\", cls + (cls ? \" \" : \"\") + classStr);\r\n\t\t}\r\n\t};\r\n\tg._removeClass = function(/*DomNode*/node, /*String*/classStr){\r\n\t\t// summary:\r\n\t\t//\t\tRemoves classes from node.\r\n\t\tvar cls = node.getAttribute(\"className\");\r\n\t\tif(cls){\r\n\t\t\tnode.setAttribute(\r\n\t\t\t\t\"className\",\r\n\t\t\t\tcls.replace(new RegExp('(^|\\\\s+)' + classStr + '(\\\\s+|$)'), \"$1$2\")\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t// candidate for dojox.html.metrics (dynamic font resize handler is not implemented here)\r\n\r\n\t//\t\tderived from Morris John's emResized measurer\r\n\tb._getFontMeasurements = function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an object that has pixel equivilents of standard font\r\n\t\t//\t\tsize values.\r\n\t\tvar heights = {\r\n\t\t\t'1em': 0, '1ex': 0, '100%': 0, '12pt': 0, '16px': 0, 'xx-small': 0,\r\n\t\t\t'x-small': 0, 'small': 0, 'medium': 0, 'large': 0, 'x-large': 0,\r\n\t\t\t'xx-large': 0\r\n\t\t};\r\n\t\tvar p, oldStyle;\t\r\n\t\tif(has(\"ie\")){\r\n\t\t\t//\tWe do a font-size fix if and only if one isn't applied already.\r\n\t\t\t// NOTE: If someone set the fontSize on the HTML Element, this will kill it.\r\n\t\t\toldStyle = win.doc.documentElement.style.fontSize || \"\";\r\n\t\t\tif(!oldStyle){\r\n\t\t\t\twin.doc.documentElement.style.fontSize=\"100%\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//\t\tset up the measuring node.\r\n\t\tvar div = domConstruct.create(\"div\", {style: {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tleft: \"0\",\r\n\t\t\t\ttop: \"-100px\",\r\n\t\t\t\twidth: \"30px\",\r\n\t\t\t\theight: \"1000em\",\r\n\t\t\t\tborderWidth: \"0\",\r\n\t\t\t\tmargin: \"0\",\r\n\t\t\t\tpadding: \"0\",\r\n\t\t\t\toutline: \"none\",\r\n\t\t\t\tlineHeight: \"1\",\r\n\t\t\t\toverflow: \"hidden\"\r\n\t\t\t}}, win.body());\r\n\r\n\t\t//\t\tdo the measurements.\r\n\t\tfor(p in heights){\r\n\t\t\tdiv.style.fontSize = p;\r\n\t\t\theights[p] = Math.round(div.offsetHeight * 12/16) * 16/12 / 1000;\r\n\t\t}\r\n\r\n\t\tif(has(\"ie\")){\r\n\t\t\t// Restore the font to its old style.\r\n\t\t\twin.doc.documentElement.style.fontSize = oldStyle;\r\n\t\t}\r\n\t\twin.body().removeChild(div);\r\n\t\treturn heights; //object\r\n\t};\r\n\r\n\tvar fontMeasurements = null;\r\n\r\n\tb._getCachedFontMeasurements = function(recalculate){\r\n\t\tif(recalculate || !fontMeasurements){\r\n\t\t\tfontMeasurements = b._getFontMeasurements();\r\n\t\t}\r\n\t\treturn fontMeasurements;\r\n\t};\r\n\r\n\t// candidate for dojox.html.metrics\r\n\r\n\tvar measuringNode = null, empty = {};\r\n\tb._getTextBox = function(\t/*String*/ text,\r\n\t\t\t\t\t\t\t\t/*Object*/ style,\r\n\t\t\t\t\t\t\t\t/*String?*/ className){\r\n\t\tvar m, s, al = arguments.length;\r\n\t\tvar i, box;\r\n\t\tif(!measuringNode){\r\n\t\t\tmeasuringNode = domConstruct.create(\"div\", {style: {\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\ttop: \"-10000px\",\r\n\t\t\t\tleft: \"0\",\r\n\t\t\t\tvisibility: \"hidden\"\r\n\t\t\t}}, win.body());\r\n\t\t}\r\n\t\tm = measuringNode;\r\n\t\t// reset styles\r\n\t\tm.className = \"\";\r\n\t\ts = m.style;\r\n\t\ts.borderWidth = \"0\";\r\n\t\ts.margin = \"0\";\r\n\t\ts.padding = \"0\";\r\n\t\ts.outline = \"0\";\r\n\t\t// set new style\r\n\t\tif(al > 1 && style){\r\n\t\t\tfor(i in style){\r\n\t\t\t\tif(i in empty){ continue; }\r\n\t\t\t\ts[i] = style[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// set classes\r\n\t\tif(al > 2 && className){\r\n\t\t\tm.className = className;\r\n\t\t}\r\n\t\t// take a measure\r\n\t\tm.innerHTML = text;\r\n\r\n\t\tif(m.getBoundingClientRect){\r\n\t\t\tvar bcr = m.getBoundingClientRect();\r\n\t\t\tbox = {l: bcr.left, t: bcr.top, w: bcr.width || (bcr.right - bcr.left), h: bcr.height || (bcr.bottom - bcr.top)};\r\n\t\t}else{\r\n\t\t\tbox = domGeom.getMarginBox(m);\r\n\t\t}\r\n\t\tm.innerHTML = \"\";\r\n\t\treturn box;\r\n\t};\r\n\r\n\tb._computeTextLocation = function(/*g.defaultTextShape*/textShape, /*Number*/width, /*Number*/height, /*Boolean*/fixHeight) {\r\n\t\tvar loc = {}, align = textShape.align;\r\n\t\tswitch (align) {\r\n\t\t\tcase 'end':\r\n\t\t\t\tloc.x = textShape.x - width;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'middle':\r\n\t\t\t\tloc.x = textShape.x - width / 2;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tloc.x = textShape.x;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tvar c = fixHeight ? 0.75 : 1;\r\n\t\tloc.y = textShape.y - height*c; // **rough** approximation of the ascent...\r\n\t\treturn loc;\r\n\t};\r\n\tb._computeTextBoundingBox = function(/*shape.Text*/s){\r\n\t\t// summary:\r\n\t\t//\t\tCompute the bbox of the given shape.Text instance. Note that this method returns an\r\n\t\t//\t\tapproximation of the bbox, and should be used when the underlying renderer cannot provide precise metrics.\r\n\t\tif(!g._base._isRendered(s)){\r\n\t\t\treturn {x:0, y:0, width:0, height:0};\r\n\t\t}\r\n\t\tvar loc, textShape = s.getShape(),\r\n\t\t\tfont = s.getFont() || g.defaultFont,\r\n\t\t\tw = s.getTextWidth(),\r\n\t\t\th = g.normalizedLength(font.size);\r\n\t\tloc = b._computeTextLocation(textShape, w, h, true);\r\n\t\treturn {\r\n\t\t\tx: loc.x,\r\n\t\t\ty: loc.y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t};\r\n\t};\r\n\tb._isRendered = function(/*Shape*/s){\r\n\t\tvar p = s.parent;\r\n\t\twhile(p && p.getParent){\r\n\t\t\tp = p.parent;\r\n\t\t}\r\n\t\treturn p !== null;\r\n\t};\r\n\r\n\t// candidate for dojo.dom\r\n\r\n\tvar uniqueId = 0;\r\n\tb._getUniqueId = function(){\r\n\t\t// summary:\r\n\t\t//\t\treturns a unique string for use with any DOM element\r\n\t\tvar id;\r\n\t\tdo{\r\n\t\t\tid = kernel._scopeName + \"xUnique\" + (++uniqueId);\r\n\t\t}while(dom.byId(id));\r\n\t\treturn id;\r\n\t};\r\n\r\n\t// IE10\r\n\r\n\tb._fixMsTouchAction = function(/*dojox/gfx/shape.Surface*/surface){\r\n\t\tvar r = surface.rawNode;\r\n\t\tif (typeof r.style.msTouchAction != 'undefined')\r\n\t\t\tr.style.msTouchAction = \"none\";\r\n\t};\r\n\r\n\t/*=====\r\n\tg.Stroke = {\r\n\t\t// summary:\r\n\t\t//\t\tA stroke defines stylistic properties that are used when drawing a path.\r\n\r\n\t\t// color: String\r\n\t\t//\t\tThe color of the stroke, default value 'black'.\r\n\t\tcolor: \"black\",\r\n\r\n\t\t// style: String\r\n\t\t//\t\tThe style of the stroke, one of 'solid', ... . Default value 'solid'.\r\n\t\tstyle: \"solid\",\r\n\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of a stroke, default value 1.\r\n\t\twidth: 1,\r\n\r\n\t\t// cap: String\r\n\t\t//\t\tThe endcap style of the path. One of 'butt', 'round', ... . Default value 'butt'.\r\n\t\tcap: \"butt\",\r\n\r\n\t\t// join: Number\r\n\t\t//\t\tThe join style to use when combining path segments. Default value 4.\r\n\t\tjoin: 4\r\n\t};\r\n\t\r\n\tg.Fill = {\r\n\t\t// summary:\r\n\t\t//\t\tDefines how to fill a shape. Four types of fills can be used: solid, linear gradient, radial gradient and pattern.\r\n\t\t//\t\tSee dojox/gfx.LinearGradient, dojox/gfx.RadialGradient and dojox/gfx.Pattern respectively for more information about the properties supported by each type.\r\n\t\t\r\n\t\t// type: String?\r\n\t\t//\t\tThe type of fill. One of 'linear', 'radial', 'pattern' or undefined. If not specified, a solid fill is assumed.\r\n\t\ttype:\"\",\r\n\t\t\r\n\t\t// color: String|dojo/Color?\r\n\t\t//\t\tThe color of a solid fill type.\r\n\t\tcolor:null,\r\n\t\t\r\n\t};\r\n\t\r\n\tg.LinearGradient = {\r\n\t\t// summary:\r\n\t\t//\t\tAn object defining the default stylistic properties used for Linear Gradient fills.\r\n\t\t//\t\tLinear gradients are drawn along a virtual line, which results in appearance of a rotated pattern in a given direction/orientation.\r\n\r\n\t\t// type: String\r\n\t\t//\t\tSpecifies this object is a Linear Gradient, value 'linear'\r\n\t\ttype: \"linear\",\r\n\r\n\t\t// x1: Number\r\n\t\t//\t\tThe X coordinate of the start of the virtual line along which the gradient is drawn, default value 0.\r\n\t\tx1: 0,\r\n\r\n\t\t// y1: Number\r\n\t\t//\t\tThe Y coordinate of the start of the virtual line along which the gradient is drawn, default value 0.\r\n\t\ty1: 0,\r\n\r\n\t\t// x2: Number\r\n\t\t//\t\tThe X coordinate of the end of the virtual line along which the gradient is drawn, default value 100.\r\n\t\tx2: 100,\r\n\r\n\t\t// y2: Number\r\n\t\t//\t\tThe Y coordinate of the end of the virtual line along which the gradient is drawn, default value 100.\r\n\t\ty2: 100,\r\n\r\n\t\t// colors: Array\r\n\t\t//\t\tAn array of colors at given offsets (from the start of the line).  The start of the line is\r\n\t\t//\t\tdefined at offest 0 with the end of the line at offset 1.\r\n\t\t//\t\tDefault value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.\r\n\t\tcolors: []\r\n\t};\r\n\t\r\n\tg.RadialGradient = {\r\n\t\t// summary:\r\n\t\t//\t\tSpecifies the properties for RadialGradients using in fills patterns.\r\n\r\n\t\t// type: String\r\n\t\t//\t\tSpecifies this is a RadialGradient, value 'radial'\r\n\t\ttype: \"radial\",\r\n\r\n\t\t// cx: Number\r\n\t\t//\t\tThe X coordinate of the center of the radial gradient, default value 0.\r\n\t\tcx: 0,\r\n\r\n\t\t// cy: Number\r\n\t\t//\t\tThe Y coordinate of the center of the radial gradient, default value 0.\r\n\t\tcy: 0,\r\n\r\n\t\t// r: Number\r\n\t\t//\t\tThe radius to the end of the radial gradient, default value 100.\r\n\t\tr: 100,\r\n\r\n\t\t// colors: Array\r\n\t\t//\t\tAn array of colors at given offsets (from the center of the radial gradient).\r\n\t\t//\t\tThe center is defined at offest 0 with the outer edge of the gradient at offset 1.\r\n\t\t//\t\tDefault value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.\r\n\t\tcolors: []\r\n\t};\r\n\t\r\n\tg.Pattern = {\r\n\t\t// summary:\r\n\t\t//\t\tAn object specifying the default properties for a Pattern using in fill operations.\r\n\r\n\t\t// type: String\r\n\t\t//\t\tSpecifies this object is a Pattern, value 'pattern'.\r\n\t\ttype: \"pattern\",\r\n\r\n\t\t// x: Number\r\n\t\t//\t\tThe X coordinate of the position of the pattern, default value is 0.\r\n\t\tx: 0,\r\n\r\n\t\t// y: Number\r\n\t\t//\t\tThe Y coordinate of the position of the pattern, default value is 0.\r\n\t\ty: 0,\r\n\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the pattern image, default value is 0.\r\n\t\twidth: 0,\r\n\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the pattern image, default value is 0.\r\n\t\theight: 0,\r\n\r\n\t\t// src: String\r\n\t\t//\t\tA url specifying the image to use for the pattern.\r\n\t\tsrc: \"\"\r\n\t};\r\n\r\n\tg.Text = {\r\n\t\t//\tsummary:\r\n\t\t//\t\tA keyword argument object defining both the text to be rendered in a VectorText shape,\r\n\t\t//\t\tand specifying position, alignment, and fitting.\r\n\t\t//\ttext: String\r\n\t\t//\t\tThe text to be rendered.\r\n\t\t//\tx: Number?\r\n\t\t//\t\tThe left coordinate for the text's bounding box.\r\n\t\t//\ty: Number?\r\n\t\t//\t\tThe top coordinate for the text's bounding box.\r\n\t\t//\twidth: Number?\r\n\t\t//\t\tThe width of the text's bounding box.\r\n\t\t//\theight: Number?\r\n\t\t//\t\tThe height of the text's bounding box.\r\n\t\t//\talign: String?\r\n\t\t//\t\tThe alignment of the text, as defined in SVG. Can be \"start\", \"end\" or \"middle\".\r\n\t\t//\tfitting: Number?\r\n\t\t//\t\tHow the text is to be fitted to the bounding box. Can be 0 (no fitting), 1 (fitting based on\r\n\t\t//\t\tpassed width of the bounding box and the size of the font), or 2 (fit text to the bounding box,\r\n\t\t//\t\tand ignore any size parameters).\r\n\t\t//\tleading: Number?\r\n\t\t//\t\tThe leading to be used between lines in the text.\r\n\t\t//\tdecoration: String?\r\n\t\t//\t\tAny text decoration to be used.\r\n\t};\r\n\r\n\tg.Font = {\r\n\t\t// summary:\r\n\t\t//\t\tAn object specifying the properties for a Font used in text operations.\r\n\t\r\n\t\t// type: String\r\n\t\t//\t\tSpecifies this object is a Font, value 'font'.\r\n\t\ttype: \"font\",\r\n\t\r\n\t\t// style: String\r\n\t\t//\t\tThe font style, one of 'normal', 'bold', default value 'normal'.\r\n\t\tstyle: \"normal\",\r\n\t\r\n\t\t// variant: String\r\n\t\t//\t\tThe font variant, one of 'normal', ... , default value 'normal'.\r\n\t\tvariant: \"normal\",\r\n\t\r\n\t\t// weight: String\r\n\t\t//\t\tThe font weight, one of 'normal', ..., default value 'normal'.\r\n\t\tweight: \"normal\",\r\n\t\r\n\t\t// size: String\r\n\t\t//\t\tThe font size (including units), default value '10pt'.\r\n\t\tsize: \"10pt\",\r\n\t\r\n\t\t// family: String\r\n\t\t//\t\tThe font family, one of 'serif', 'sanserif', ..., default value 'serif'.\r\n\t\tfamily: \"serif\"\r\n\t};\r\n\r\n\t=====*/\r\n\r\n\tlang.mixin(g, {\r\n\t\t// summary:\r\n\t\t//\t\tdefines constants, prototypes, and utility functions for the core Graphics API\r\n\r\n\t\t// default shapes, which are used to fill in missing parameters\r\n\t\tdefaultPath: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default Path prototype object.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a Path, default value 'path'.\r\n\t\t\ttype: \"path\", \r\n\r\n\t\t\t// path: String\r\n\t\t\t//\t\tThe path commands. See W32C SVG 1.0 specification.\r\n\t\t\t//\t\tDefaults to empty string value.\r\n\t\t\tpath: \"\"\r\n\t\t},\r\n\t\tdefaultPolyline: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default PolyLine prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a PolyLine, default value 'polyline'.\r\n\t\t\ttype: \"polyline\",\r\n\r\n\t\t\t// points: Array\r\n\t\t\t//\t\tAn array of point objects [{x:0,y:0},...] defining the default polyline's line segments. Value is an empty array [].\r\n\t\t\tpoints: []\r\n\t\t},\r\n\t\tdefaultRect: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default Rect prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this default object is a type of Rect. Value is 'rect'\r\n\t\t\ttype: \"rect\",\r\n\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tThe X coordinate of the default rectangles position, value 0.\r\n\t\t\tx: 0,\r\n\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n\t\t\ty: 0,\r\n\r\n\t\t\t// width: Number\r\n\t\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\twidth: 100,\r\n\r\n\t\t\t// height: Number\r\n\t\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\theight: 100,\r\n\r\n\t\t\t// r: Number\r\n\t\t\t//\t\tThe corner radius for the default rectangle, value 0.\r\n\t\t\tr: 0\r\n\t\t},\r\n\t\tdefaultEllipse: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default Ellipse prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies that this object is a type of Ellipse, value is 'ellipse'\r\n\t\t\ttype: \"ellipse\",\r\n\r\n\t\t\t// cx: Number\r\n\t\t\t//\t\tThe X coordinate of the center of the ellipse, default value 0.\r\n\t\t\tcx: 0,\r\n\r\n\t\t\t// cy: Number\r\n\t\t\t//\t\tThe Y coordinate of the center of the ellipse, default value 0.\r\n\t\t\tcy: 0,\r\n\r\n\t\t\t// rx: Number\r\n\t\t\t//\t\tThe radius of the ellipse in the X direction, default value 200.\r\n\t\t\trx: 200,\r\n\r\n\t\t\t// ry: Number\r\n\t\t\t//\t\tThe radius of the ellipse in the Y direction, default value 200.\r\n\t\t\try: 100\r\n\t\t},\r\n\t\tdefaultCircle: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object defining the default Circle prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a circle, value 'circle'\r\n\t\t\ttype: \"circle\",\r\n\r\n\t\t\t// cx: Number\r\n\t\t\t//\t\tThe X coordinate of the center of the circle, default value 0.\r\n\t\t\tcx: 0,\r\n\t\t\t// cy: Number\r\n\t\t\t//\t\tThe Y coordinate of the center of the circle, default value 0.\r\n\t\t\tcy: 0,\r\n\r\n\t\t\t// r: Number\r\n\t\t\t//\t\tThe radius, default value 100.\r\n\t\t\tr: 100\r\n\t\t},\r\n\t\tdefaultLine: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object defining the default Line prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this is a Line, value 'line'\r\n\t\t\ttype: \"line\",\r\n\r\n\t\t\t// x1: Number\r\n\t\t\t//\t\tThe X coordinate of the start of the line, default value 0.\r\n\t\t\tx1: 0,\r\n\r\n\t\t\t// y1: Number\r\n\t\t\t//\t\tThe Y coordinate of the start of the line, default value 0.\r\n\t\t\ty1: 0,\r\n\r\n\t\t\t// x2: Number\r\n\t\t\t//\t\tThe X coordinate of the end of the line, default value 100.\r\n\t\t\tx2: 100,\r\n\r\n\t\t\t// y2: Number\r\n\t\t\t//\t\tThe Y coordinate of the end of the line, default value 100.\r\n\t\t\ty2: 100\r\n\t\t},\r\n\t\tdefaultImage: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default Image prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is an image, value 'image'.\r\n\t\t\ttype: \"image\",\r\n\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tThe X coordinate of the image's position, default value 0.\r\n\t\t\tx: 0,\r\n\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tThe Y coordinate of the image's position, default value 0.\r\n\t\t\ty: 0,\r\n\r\n\t\t\t// width: Number\r\n\t\t\t//\t\tThe width of the image, default value 0.\r\n\t\t\twidth: 0,\r\n\r\n\t\t\t// height: Number\r\n\t\t\t//\t\tThe height of the image, default value 0.\r\n\t\t\theight: 0,\r\n\r\n\t\t\t// src: String\r\n\t\t\t//\t\tThe src url of the image, defaults to empty string.\r\n\t\t\tsrc: \"\"\r\n\t\t},\r\n\t\tdefaultText: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default Text prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this is a Text shape, value 'text'.\r\n\t\t\ttype: \"text\",\r\n\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tThe X coordinate of the text position, default value 0.\r\n\t\t\tx: 0,\r\n\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tThe Y coordinate of the text position, default value 0.\r\n\t\t\ty: 0,\r\n\r\n\t\t\t// text: String\r\n\t\t\t//\t\tThe text to be displayed, default value empty string.\r\n\t\t\ttext: \"\",\r\n\r\n\t\t\t// align:\tString\r\n\t\t\t//\t\tThe horizontal text alignment, one of 'start', 'end', 'center'. Default value 'start'.\r\n\t\t\talign: \"start\",\r\n\r\n\t\t\t// decoration: String\r\n\t\t\t//\t\tThe text decoration , one of 'none', ... . Default value 'none'.\r\n\t\t\tdecoration: \"none\",\r\n\r\n\t\t\t// rotated: Boolean\r\n\t\t\t//\t\tWhether the text is rotated, boolean default value false.\r\n\t\t\trotated: false,\r\n\r\n\t\t\t// kerning: Boolean\r\n\t\t\t//\t\tWhether kerning is used on the text, boolean default value true.\r\n\t\t\tkerning: true\r\n\t\t},\r\n\t\tdefaultTextPath: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefines the default TextPath prototype.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this is a TextPath, value 'textpath'.\r\n\t\t\ttype: \"textpath\",\r\n\r\n\t\t\t// text: String\r\n\t\t\t//\t\tThe text to be displayed, default value empty string.\r\n\t\t\ttext: \"\",\r\n\r\n\t\t\t// align: String\r\n\t\t\t//\t\tThe horizontal text alignment, one of 'start', 'end', 'center'. Default value 'start'.\r\n\t\t\talign: \"start\",\r\n\r\n\t\t\t// decoration: String\r\n\t\t\t//\t\tThe text decoration , one of 'none', ... . Default value 'none'.\r\n\t\t\tdecoration: \"none\",\r\n\r\n\t\t\t// rotated: Boolean\r\n\t\t\t//\t\tWhether the text is rotated, boolean default value false.\r\n\t\t\trotated: false,\r\n\r\n\t\t\t// kerning: Boolean\r\n\t\t\t//\t\tWhether kerning is used on the text, boolean default value true.\r\n\t\t\tkerning: true\r\n\t\t},\r\n\r\n\t\t// default stylistic attributes\r\n\t\tdefaultStroke: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA stroke defines stylistic properties that are used when drawing a path.\r\n\t\t\t//\t\tThis object defines the default Stroke prototype.\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a type of Stroke, value 'stroke'.\r\n\t\t\ttype: \"stroke\",\r\n\r\n\t\t\t// color: String\r\n\t\t\t//\t\tThe color of the stroke, default value 'black'.\r\n\t\t\tcolor: \"black\",\r\n\r\n\t\t\t// style: String\r\n\t\t\t//\t\tThe style of the stroke, one of 'solid', ... . Default value 'solid'.\r\n\t\t\tstyle: \"solid\",\r\n\r\n\t\t\t// width: Number\r\n\t\t\t//\t\tThe width of a stroke, default value 1.\r\n\t\t\twidth: 1,\r\n\r\n\t\t\t// cap: String\r\n\t\t\t//\t\tThe endcap style of the path. One of 'butt', 'round', ... . Default value 'butt'.\r\n\t\t\tcap: \"butt\",\r\n\r\n\t\t\t// join: Number\r\n\t\t\t//\t\tThe join style to use when combining path segments. Default value 4.\r\n\t\t\tjoin: 4\r\n\t\t},\r\n\t\tdefaultLinearGradient: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object defining the default stylistic properties used for Linear Gradient fills.\r\n\t\t\t//\t\tLinear gradients are drawn along a virtual line, which results in appearance of a rotated pattern in a given direction/orientation.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a Linear Gradient, value 'linear'\r\n\t\t\ttype: \"linear\",\r\n\r\n\t\t\t// x1: Number\r\n\t\t\t//\t\tThe X coordinate of the start of the virtual line along which the gradient is drawn, default value 0.\r\n\t\t\tx1: 0,\r\n\r\n\t\t\t// y1: Number\r\n\t\t\t//\t\tThe Y coordinate of the start of the virtual line along which the gradient is drawn, default value 0.\r\n\t\t\ty1: 0,\r\n\r\n\t\t\t// x2: Number\r\n\t\t\t//\t\tThe X coordinate of the end of the virtual line along which the gradient is drawn, default value 100.\r\n\t\t\tx2: 100,\r\n\r\n\t\t\t// y2: Number\r\n\t\t\t//\t\tThe Y coordinate of the end of the virtual line along which the gradient is drawn, default value 100.\r\n\t\t\ty2: 100,\r\n\r\n\t\t\t// colors: Array\r\n\t\t\t//\t\tAn array of colors at given offsets (from the start of the line).  The start of the line is\r\n\t\t\t//\t\tdefined at offest 0 with the end of the line at offset 1.\r\n\t\t\t//\t\tDefault value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.\r\n\t\t\tcolors: [\r\n\t\t\t\t{ offset: 0, color: \"black\" }, { offset: 1, color: \"white\" }\r\n\t\t\t]\r\n\t\t},\r\n\t\tdefaultRadialGradient: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object specifying the default properties for RadialGradients using in fills patterns.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this is a RadialGradient, value 'radial'\r\n\t\t\ttype: \"radial\",\r\n\r\n\t\t\t// cx: Number\r\n\t\t\t//\t\tThe X coordinate of the center of the radial gradient, default value 0.\r\n\t\t\tcx: 0,\r\n\r\n\t\t\t// cy: Number\r\n\t\t\t//\t\tThe Y coordinate of the center of the radial gradient, default value 0.\r\n\t\t\tcy: 0,\r\n\r\n\t\t\t// r: Number\r\n\t\t\t//\t\tThe radius to the end of the radial gradient, default value 100.\r\n\t\t\tr: 100,\r\n\r\n\t\t\t// colors: Array\r\n\t\t\t//\t\tAn array of colors at given offsets (from the center of the radial gradient).\r\n\t\t\t//\t\tThe center is defined at offest 0 with the outer edge of the gradient at offset 1.\r\n\t\t\t//\t\tDefault value, [{ offset: 0, color: 'black'},{offset: 1, color: 'white'}], is a gradient from black to white.\r\n\t\t\tcolors: [\r\n\t\t\t\t{ offset: 0, color: \"black\" }, { offset: 1, color: \"white\" }\r\n\t\t\t]\r\n\t\t},\r\n\t\tdefaultPattern: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object specifying the default properties for a Pattern using in fill operations.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a Pattern, value 'pattern'.\r\n\t\t\ttype: \"pattern\",\r\n\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tThe X coordinate of the position of the pattern, default value is 0.\r\n\t\t\tx: 0,\r\n\r\n\t\t\t// y: Number\r\n\t\t\t//\t\tThe Y coordinate of the position of the pattern, default value is 0.\r\n\t\t\ty: 0,\r\n\r\n\t\t\t// width: Number\r\n\t\t\t//\t\tThe width of the pattern image, default value is 0.\r\n\t\t\twidth: 0,\r\n\r\n\t\t\t// height: Number\r\n\t\t\t//\t\tThe height of the pattern image, default value is 0.\r\n\t\t\theight: 0,\r\n\r\n\t\t\t// src: String\r\n\t\t\t//\t\tA url specifying the image to use for the pattern.\r\n\t\t\tsrc: \"\"\r\n\t\t},\r\n\t\tdefaultFont: {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn object specifying the default properties for a Font used in text operations.\r\n\r\n\t\t\t// type: String\r\n\t\t\t//\t\tSpecifies this object is a Font, value 'font'.\r\n\t\t\ttype: \"font\",\r\n\r\n\t\t\t// style: String\r\n\t\t\t//\t\tThe font style, one of 'normal', 'bold', default value 'normal'.\r\n\t\t\tstyle: \"normal\",\r\n\r\n\t\t\t// variant: String\r\n\t\t\t//\t\tThe font variant, one of 'normal', ... , default value 'normal'.\r\n\t\t\tvariant: \"normal\",\r\n\r\n\t\t\t// weight: String\r\n\t\t\t//\t\tThe font weight, one of 'normal', ..., default value 'normal'.\r\n\t\t\tweight: \"normal\",\r\n\r\n\t\t\t// size: String\r\n\t\t\t//\t\tThe font size (including units), default value '10pt'.\r\n\t\t\tsize: \"10pt\",\r\n\r\n\t\t\t// family: String\r\n\t\t\t//\t\tThe font family, one of 'serif', 'sanserif', ..., default value 'serif'.\r\n\t\t\tfamily: \"serif\"\r\n\t\t},\r\n\r\n\t\tgetDefault: (function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a function used to access default memoized prototype objects (see them defined above).\r\n\t\t\tvar typeCtorCache = {};\r\n\t\t\t// a memoized delegate()\r\n\t\t\treturn function(/*String*/ type){\r\n\t\t\t\tvar t = typeCtorCache[type];\r\n\t\t\t\tif(t){\r\n\t\t\t\t\treturn new t();\r\n\t\t\t\t}\r\n\t\t\t\tt = typeCtorCache[type] = new Function();\r\n\t\t\t\tt.prototype = g[ \"default\" + type ];\r\n\t\t\t\treturn new t();\r\n\t\t\t}\r\n\t\t})(),\r\n\r\n\t\tnormalizeColor: function(/*dojo/Color|Array|string|Object*/ color){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts any legal color representation to normalized\r\n\t\t\t//\t\tdojo/Color object\r\n\t\t\t// color:\r\n\t\t\t//\t\tA color representation.\r\n\t\t\treturn (color instanceof Color) ? color : new Color(color); // dojo/Color\r\n\t\t},\r\n\t\tnormalizeParameters: function(existed, update){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tupdates an existing object with properties from an 'update'\r\n\t\t\t//\t\tobject\r\n\t\t\t// existed: Object\r\n\t\t\t//\t\tthe target object to be updated\r\n\t\t\t// update: Object\r\n\t\t\t//\t\tthe 'update' object, whose properties will be used to update\r\n\t\t\t//\t\tthe existed object\r\n\t\t\tvar x;\r\n\t\t\tif(update){\r\n\t\t\t\tvar empty = {};\r\n\t\t\t\tfor(x in existed){\r\n\t\t\t\t\tif(x in update && !(x in empty)){\r\n\t\t\t\t\t\texisted[x] = update[x];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn existed;\t// Object\r\n\t\t},\r\n\t\tmakeParameters: function(defaults, update){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcopies the original object, and all copied properties from the\r\n\t\t\t//\t\t'update' object\r\n\t\t\t// defaults: Object\r\n\t\t\t//\t\tthe object to be cloned before updating\r\n\t\t\t// update: Object\r\n\t\t\t//\t\tthe object, which properties are to be cloned during updating\r\n\t\t\t// returns: Object\r\n\t\t\t//      new object with new and default properties\r\n\t\t\tvar i = null;\r\n\t\t\tif(!update){\r\n\t\t\t\t// return dojo.clone(defaults);\r\n\t\t\t\treturn lang.delegate(defaults);\r\n\t\t\t}\r\n\t\t\tvar result = {};\r\n\t\t\tfor(i in defaults){\r\n\t\t\t\tif(!(i in result)){\r\n\t\t\t\t\tresult[i] = lang.clone((i in update) ? update[i] : defaults[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result; // Object\r\n\t\t},\r\n\t\tformatNumber: function(x, addSpace){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts a number to a string using a fixed notation\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tnumber to be converted\r\n\t\t\t// addSpace: Boolean\r\n\t\t\t//\t\twhether to add a space before a positive number\r\n\t\t\t// returns: String\r\n\t\t\t//      the formatted value\r\n\t\t\tvar val = x.toString();\r\n\t\t\tif(val.indexOf(\"e\") >= 0){\r\n\t\t\t\tval = x.toFixed(4);\r\n\t\t\t}else{\r\n\t\t\t\tvar point = val.indexOf(\".\");\r\n\t\t\t\tif(point >= 0 && val.length - point > 5){\r\n\t\t\t\t\tval = x.toFixed(4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(x < 0){\r\n\t\t\t\treturn val; // String\r\n\t\t\t}\r\n\t\t\treturn addSpace ? \" \" + val : val; // String\r\n\t\t},\r\n\t\t// font operations\r\n\t\tmakeFontString: function(font){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts a font object to a CSS font string\r\n\t\t\t// font: Object\r\n\t\t\t//\t\tfont object (see dojox/gfx.defaultFont)\r\n\t\t\treturn font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \" \" + font.family; // Object\r\n\t\t},\r\n\t\tsplitFontString: function(str){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts a CSS font string to a font object\r\n\t\t\t// description:\r\n\t\t\t//\t\tConverts a CSS font string to a gfx font object. The CSS font\r\n\t\t\t//\t\tstring components should follow the W3C specified order\r\n\t\t\t//\t\t(see http://www.w3.org/TR/CSS2/fonts.html#font-shorthand):\r\n\t\t\t//\t\tstyle, variant, weight, size, optional line height (will be\r\n\t\t\t//\t\tignored), and family. Note that the Font.size attribute is limited to numeric CSS length.\r\n\t\t\t// str: String\r\n\t\t\t//\t\ta CSS font string.\r\n\t\t\t// returns: Object\r\n\t\t\t//      object in dojox/gfx.defaultFont format\r\n\t\t\tvar font = g.getDefault(\"Font\");\r\n\t\t\tvar t = str.split(/\\s+/);\r\n\t\t\tdo{\r\n\t\t\t\tif(t.length < 5){ break; }\r\n\t\t\t\tfont.style   = t[0];\r\n\t\t\t\tfont.variant = t[1];\r\n\t\t\t\tfont.weight  = t[2];\r\n\t\t\t\tvar i = t[3].indexOf(\"/\");\r\n\t\t\t\tfont.size = i < 0 ? t[3] : t[3].substring(0, i);\r\n\t\t\t\tvar j = 4;\r\n\t\t\t\tif(i < 0){\r\n\t\t\t\t\tif(t[4] == \"/\"){\r\n\t\t\t\t\t\tj = 6;\r\n\t\t\t\t\t}else if(t[4].charAt(0) == \"/\"){\r\n\t\t\t\t\t\tj = 5;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(j < t.length){\r\n\t\t\t\t\tfont.family = t.slice(j).join(\" \");\r\n\t\t\t\t}\r\n\t\t\t}while(false);\r\n\t\t\treturn font;\t// Object\r\n\t\t},\r\n\t\t// length operations\r\n\r\n\t\t// cm_in_pt: Number\r\n\t\t//\t\tpoints per centimeter (constant)\r\n\t\tcm_in_pt: 72 / 2.54,\r\n\r\n\t\t// mm_in_pt: Number\r\n\t\t//\t\tpoints per millimeter (constant)\r\n\t\tmm_in_pt: 7.2 / 2.54,\r\n\r\n\t\tpx_in_pt: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns the current number of pixels per point.\r\n\t\t\treturn g._base._getCachedFontMeasurements()[\"12pt\"] / 12;\t// Number\r\n\t\t},\r\n\r\n\t\tpt2px: function(len){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts points to pixels\r\n\t\t\t// len: Number\r\n\t\t\t//\t\ta value in points\r\n\t\t\treturn len * g.px_in_pt();\t// Number\r\n\t\t},\r\n\r\n\t\tpx2pt: function(len){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts pixels to points\r\n\t\t\t// len: Number\r\n\t\t\t//\t\ta value in pixels\r\n\t\t\treturn len / g.px_in_pt();\t// Number\r\n\t\t},\r\n\r\n\t\tnormalizedLength: function(len) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts any length value to pixels\r\n\t\t\t// len: String\r\n\t\t\t//\t\ta length, e.g., '12pc'\r\n\t\t\t// returns: Number\r\n\t\t\t//      pixels\r\n\t\t\tif(len.length === 0){ return 0; }\r\n\t\t\tif(len.length > 2){\r\n\t\t\t\tvar px_in_pt = g.px_in_pt();\r\n\t\t\t\tvar val = parseFloat(len);\r\n\t\t\t\tswitch(len.slice(-2)){\r\n\t\t\t\t\tcase \"px\": return val;\r\n\t\t\t\t\tcase \"pt\": return val * px_in_pt;\r\n\t\t\t\t\tcase \"in\": return val * 72 * px_in_pt;\r\n\t\t\t\t\tcase \"pc\": return val * 12 * px_in_pt;\r\n\t\t\t\t\tcase \"mm\": return val * g.mm_in_pt * px_in_pt;\r\n\t\t\t\t\tcase \"cm\": return val * g.cm_in_pt * px_in_pt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parseFloat(len);\t// Number\r\n\t\t},\r\n\r\n\t\t// pathVmlRegExp: RegExp\r\n\t\t//\t\ta constant regular expression used to split a SVG/VML path into primitive components\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tpathVmlRegExp: /([A-Za-z]+)|(\\d+(\\.\\d+)?)|(\\.\\d+)|(-\\d+(\\.\\d+)?)|(-\\.\\d+)/g,\r\n\r\n\t\t// pathVmlRegExp: RegExp\r\n\t\t//\t\ta constant regular expression used to split a SVG/VML path into primitive components\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tpathSvgRegExp: /([A-DF-Za-df-z])|([-+]?\\d*[.]?\\d+(?:[eE][-+]?\\d+)?)/g,\r\n\r\n\t\tequalSources: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcompares event sources, returns true if they are equal\r\n\t\t\t// a: Object\r\n\t\t\t//\t\tfirst event source\r\n\t\t\t// b: Object\r\n\t\t\t//\t\tevent source to compare against a\r\n\t\t\t// returns: Boolean\r\n\t\t\t//      true, if objects are truthy and the same\r\n\t\t\treturn a && b && a === b;\r\n\t\t},\r\n\r\n\t\tswitchTo: function(/*String|Object*/ renderer){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tswitch the graphics implementation to the specified renderer.\r\n\t\t\t// renderer:\r\n\t\t\t//\t\tEither the string name of a renderer (eg. 'canvas', 'svg, ...) or the renderer\r\n\t\t\t//\t\tobject to switch to.\r\n\t\t\tvar ns = typeof renderer == \"string\" ? g[renderer] : renderer;\r\n\t\t\tif(ns){\r\n\t\t\t\t// If more options are added, update the docblock at the end of shape.js!\r\n\t\t\t\tarr.forEach([\"Group\", \"Rect\", \"Ellipse\", \"Circle\", \"Line\",\r\n\t\t\t\t\t\t\"Polyline\", \"Image\", \"Text\", \"Path\", \"TextPath\",\r\n\t\t\t\t\t\t\"Surface\", \"createSurface\", \"fixTarget\"], function(name){\r\n\t\t\t\t\tg[name] = ns[name];\r\n\t\t\t\t});\r\n\t\t\t\tif(typeof renderer == \"string\"){\r\n\t\t\t\t\tg.renderer = renderer;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tarr.some([\"svg\",\"vml\",\"canvas\",\"canvasWithEvents\",\"silverlight\"], function(r){\r\n\t\t\t\t\t\treturn (g.renderer = g[r] && g[r].Surface === g.Surface ? r : null);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t\r\n\t/*=====\r\n\t\tg.createSurface = function(parentNode, width, height){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a surface\r\n\t\t\t// parentNode: Node\r\n\t\t\t//\t\ta parent node\r\n\t\t\t// width: String|Number\r\n\t\t\t//\t\twidth of surface, e.g., \"100px\" or 100\r\n\t\t\t// height: String|Number\r\n\t\t\t//\t\theight of surface, e.g., \"100px\" or 100\r\n\t\t\t// returns: dojox/gfx.Surface\r\n\t\t\t//     newly created surface\r\n\t\t};\r\n\t\tg.fixTarget = function(){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t};\r\n\t=====*/\r\n\t\r\n\treturn g; // defaults object api\r\n});\r\n"]}