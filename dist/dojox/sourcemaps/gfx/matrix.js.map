{"version":3,"sources":["gfx/matrix.js"],"names":["define","g","lang","m","matrix","_degToRadCache","_degToRad","degree","Math","PI","_radToDeg","radian","Matrix2D","arg","this","xx","yy","Array","length","normalize","i","l","r","xy","yx","dx","dy","mixin","extend","identity","flipX","flipY","flipXY","translate","a","b","arguments","x","y","scale","rotate","angle","c","cos","s","sin","rotateg","skewX","tan","skewXg","skewY","skewYg","reflect","a2","b2","n2","project","isIdentity","clone","obj","invert","M","D","_multiplyPoint","multiplyPoint","multiplyRectangle","rect","width","height","p0","p1","p2","p3","minx","min","miny","max","multiply","_sandwich","scaleAt","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt"],"mappings":"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","file":"../../gfx/matrix.js","sourcesContent":["define([\"./_base\",\"dojo/_base/lang\"], \r\n  function(g, lang){\r\n\tvar m = g.matrix = {};\r\n\r\n\t// candidates for dojox.math:\r\n\tvar _degToRadCache = {};\r\n\tm._degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tm._radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\r\n\tm.Matrix2D = function(arg){\r\n\t\t// summary:\r\n\t\t//\t\ta 2D matrix object\r\n\t\t// description:\r\n\t\t//\t\tNormalizes a 2D matrix-like object. If arrays is passed,\r\n\t\t//\t\tall objects of the array are normalized and multiplied sequentially.\r\n\t\t// arg: Object\r\n\t\t//\t\ta 2D matrix-like object, a number, or an array of such objects\r\n\t\tif(arg){\r\n\t\t\tif(typeof arg == \"number\"){\r\n\t\t\t\tthis.xx = this.yy = arg;\r\n\t\t\t}else if(arg instanceof Array){\r\n\t\t\t\tif(arg.length > 0){\r\n\t\t\t\t\tvar matrix = m.normalize(arg[0]);\r\n\t\t\t\t\t// combine matrices\r\n\t\t\t\t\tfor(var i = 1; i < arg.length; ++i){\r\n\t\t\t\t\t\tvar l = matrix, r = m.normalize(arg[i]);\r\n\t\t\t\t\t\tmatrix = new m.Matrix2D();\r\n\t\t\t\t\t\tmatrix.xx = l.xx * r.xx + l.xy * r.yx;\r\n\t\t\t\t\t\tmatrix.xy = l.xx * r.xy + l.xy * r.yy;\r\n\t\t\t\t\t\tmatrix.yx = l.yx * r.xx + l.yy * r.yx;\r\n\t\t\t\t\t\tmatrix.yy = l.yx * r.xy + l.yy * r.yy;\r\n\t\t\t\t\t\tmatrix.dx = l.xx * r.dx + l.xy * r.dy + l.dx;\r\n\t\t\t\t\t\tmatrix.dy = l.yx * r.dx + l.yy * r.dy + l.dy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlang.mixin(this, matrix);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tlang.mixin(this, arg);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// the default (identity) matrix, which is used to fill in missing values\r\n\tlang.extend(m.Matrix2D, {xx: 1, xy: 0, yx: 0, yy: 1, dx: 0, dy: 0});\r\n\r\n\tlang.mixin(m, {\r\n\t\t// summary:\r\n\t\t//\t\tclass constants, and methods of dojox/gfx/matrix\r\n\r\n\t\t// matrix constants\r\n\r\n\t\t// identity: dojox/gfx/matrix.Matrix2D\r\n\t\t//\t\tan identity matrix constant: identity * (x, y) == (x, y)\r\n\t\tidentity: new m.Matrix2D(),\r\n\r\n\t\t// flipX: dojox/gfx/matrix.Matrix2D\r\n\t\t//\t\ta matrix, which reflects points at x = 0 line: flipX * (x, y) == (-x, y)\r\n\t\tflipX:    new m.Matrix2D({xx: -1}),\r\n\r\n\t\t// flipY: dojox/gfx/matrix.Matrix2D\r\n\t\t//\t\ta matrix, which reflects points at y = 0 line: flipY * (x, y) == (x, -y)\r\n\t\tflipY:    new m.Matrix2D({yy: -1}),\r\n\r\n\t\t// flipXY: dojox/gfx/matrix.Matrix2D\r\n\t\t//\t\ta matrix, which reflects points at the origin of coordinates: flipXY * (x, y) == (-x, -y)\r\n\t\tflipXY:   new m.Matrix2D({xx: -1, yy: -1}),\r\n\r\n\t\t// matrix creators\r\n\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x coordinate value, or a point-like object, which specifies offsets for both dimensions\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn new m.Matrix2D({dx: a, dy: b}); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\t// branch\r\n\t\t\treturn new m.Matrix2D({dx: a.x, dy: a.y}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or\r\n\t\t\t//\t\ta uniform scaling factor used for the both coordinates, or\r\n\t\t\t//\t\ta point-like object, which specifies scale factors for both dimensions\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 1){\r\n\t\t\t\treturn new m.Matrix2D({xx: a, yy: b}); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\tif(typeof a == \"number\"){\r\n\t\t\t\treturn new m.Matrix2D({xx: a, yy: a}); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn new m.Matrix2D({xx: a.x, yy: a.y}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tvar c = Math.cos(angle);\r\n\t\t\tvar s = Math.sin(angle);\r\n\t\t\treturn new m.Matrix2D({xx: c, xy: -s, yx: s, yy: c}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.rotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn m.rotate(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn new m.Matrix2D({xy: Math.tan(angle)}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn m.skewX(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn new m.Matrix2D({yx: Math.tan(angle)}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn m.skewY(m._degToRad(degree)); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, xy = 2 * a * b / n2;\r\n\t\t\treturn new m.Matrix2D({xx: 2 * a2 / n2 - 1, xy: xy, yx: xy, yy: 2 * b2 / n2 - 1}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of projection, or\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, xy = a * b / n2;\r\n\t\t\treturn new m.Matrix2D({xx: a2 / n2, xy: xy, yx: xy, yy: b2 / n2}); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\r\n\t\t// ensure matrix 2D conformance\r\n\t\tnormalize: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tconverts an object to a matrix, if necessary\r\n\t\t\t// description:\r\n\t\t\t//\t\tConverts any 2D matrix-like object or an array of\r\n\t\t\t//\t\tsuch objects to a valid dojox/gfx/matrix.Matrix2D object.\r\n\t\t\t// matrix: Object\r\n\t\t\t//\t\tan object, which is converted to a matrix, if necessary\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\treturn (matrix instanceof m.Matrix2D) ? matrix : new m.Matrix2D(matrix); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\tisIdentity: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns whether the specified matrix is the identity.\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix object to be tested\r\n\t\t\t// returns: Boolean\r\n\t\t\treturn matrix.xx == 1 && matrix.xy == 0 && matrix.yx == 0 && matrix.yy == 1 && matrix.dx == 0 && matrix.dy == 0; // Boolean\r\n\t\t},\r\n\t\tclone: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcreates a copy of a 2D matrix\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix-like object to be cloned\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tvar obj = new m.Matrix2D();\r\n\t\t\tfor(var i in matrix){\r\n\t\t\t\tif(typeof(matrix[i]) == \"number\" && typeof(obj[i]) == \"number\" && obj[i] != matrix[i]) obj[i] = matrix[i];\r\n\t\t\t}\r\n\t\t\treturn obj; // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tinvert: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tinverts a 2D matrix\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix-like object to be inverted\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tvar M = m.normalize(matrix),\r\n\t\t\t\tD = M.xx * M.yy - M.xy * M.yx;\r\n\t\t\t\tM = new m.Matrix2D({\r\n\t\t\t\t\txx: M.yy/D, xy: -M.xy/D,\r\n\t\t\t\t\tyx: -M.yx/D, yy: M.xx/D,\r\n\t\t\t\t\tdx: (M.xy * M.dy - M.yy * M.dx) / D,\r\n\t\t\t\t\tdy: (M.yx * M.dx - M.xx * M.dy) / D\r\n\t\t\t\t});\r\n\t\t\treturn M; // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\t_multiplyPoint: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix object to be applied\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x coordinate of a point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// returns: dojox/gfx.Point\r\n\t\t\treturn {x: matrix.xx * x + matrix.xy * y + matrix.dx, y: matrix.yx * x + matrix.yy * y + matrix.dy}; // dojox/gfx.Point\r\n\t\t},\r\n\t\tmultiplyPoint: function(matrix, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix to a point\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix object to be applied\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x coordinate of a point, or a point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate of a point\r\n\t\t\t// returns: dojox/gfx.Point\r\n\t\t\tvar M = m.normalize(matrix);\r\n\t\t\tif(typeof a == \"number\" && typeof b == \"number\"){\r\n\t\t\t\treturn m._multiplyPoint(M, a, b); // dojox/gfx.Point\r\n\t\t\t}\r\n\t\t\treturn m._multiplyPoint(M, a.x, a.y); // dojox/gfx.Point\r\n\t\t},\r\n\t\tmultiplyRectangle: function(matrix, /*Rectangle*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies a matrix to a rectangle.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe method applies the transformation on all corners of the\r\n\t\t\t//\t\trectangle and returns the smallest rectangle enclosing the 4 transformed\r\n\t\t\t//\t\tpoints.\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix object to be applied.\r\n\t\t\t// rect: Rectangle\r\n\t\t\t//\t\tthe rectangle to transform.\r\n\t\t\t// returns: dojox/gfx.Rectangle\r\n\t\t\tvar M = m.normalize(matrix);\r\n\t\t\trect = rect || {x:0, y:0, width:0, height:0}; \r\n\t\t\tif(m.isIdentity(M))\r\n\t\t\t\treturn {x: rect.x, y: rect.y, width: rect.width, height: rect.height}; // dojo/gfx.Rectangle\r\n\t\t\tvar p0 = m.multiplyPoint(M, rect.x, rect.y),\r\n\t\t\t\tp1 = m.multiplyPoint(M, rect.x, rect.y + rect.height),\r\n\t\t\t\tp2 = m.multiplyPoint(M, rect.x + rect.width, rect.y),\r\n\t\t\t\tp3 = m.multiplyPoint(M, rect.x + rect.width, rect.y + rect.height),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn{ // dojo/gfx.Rectangle\r\n\t\t\t\tx: minx,\r\n\t\t\t\ty: miny,\r\n\t\t\t\twidth: maxx - minx,\r\n\t\t\t\theight: maxy - miny\r\n\t\t\t};\r\n\t\t},\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\t\t\tvar M = m.normalize(matrix);\r\n\t\t\t// combine matrices\r\n\t\t\tfor(var i = 1; i < arguments.length; ++i){\r\n\t\t\t\tvar l = M, r = m.normalize(arguments[i]);\r\n\t\t\t\tM = new m.Matrix2D();\r\n\t\t\t\tM.xx = l.xx * r.xx + l.xy * r.yx;\r\n\t\t\t\tM.xy = l.xx * r.xy + l.xy * r.yy;\r\n\t\t\t\tM.yx = l.yx * r.xx + l.yy * r.yx;\r\n\t\t\t\tM.yy = l.yx * r.xy + l.yy * r.yy;\r\n\t\t\t\tM.dx = l.xx * r.dx + l.xy * r.dy + l.dx;\r\n\t\t\t\tM.dy = l.yx * r.dx + l.yy * r.dy + l.dy;\r\n\t\t\t}\r\n\t\t\treturn M; // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: dojox/gfx/matrix.Matrix2D\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn m.multiply(m.translate(x, y), matrix, m.translate(-x, -y)); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn m._sandwich(m.scale(a, b), c, d); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn m._sandwich(m.scale(a), b, c); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn m._sandwich(m.scale(a, b), c.x, c.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.scale(a), b.x, b.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.rotate(angle), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.rotate(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.rotateg(degree), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.rotateg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.skewX(angle), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.skewX(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.skewXg(degree), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.skewXg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.skewY(angle), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.skewY(angle), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with dojox/gfx/matrix.skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: dojox/gfx/matrix.Matrix2D\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn m._sandwich(m.skewYg(degree), a, b); // dojox/gfx/matrix.Matrix2D\r\n\t\t\t}\r\n\t\t\treturn m._sandwich(m.skewYg(degree), a.x, a.y); // dojox/gfx/matrix.Matrix2D\r\n\t\t}\r\n\r\n\t\t//TODO: rect-to-rect mapping, scale-to-fit (isotropic and anisotropic versions)\r\n\r\n\t});\r\n\t// propagate Matrix2D up\r\n\tg.Matrix2D = m.Matrix2D;\r\n\r\n\treturn m;\r\n});\r\n\r\n\r\n"]}