{"version":3,"sources":["gfx/svg_attach.js"],"names":["define","kernel","lang","arr","Color","g","svg","Matrix","_getGradient","defaultGradient","gradient","fillStyle","clone","colors","i","childNodes","length","push","offset","getAttribute","color","attachShape","object","def","shape","r","rawNode","experimental","attachNode","node","s","tagName","toLowerCase","Rect","nodeType","defaultRect","Math","min","Ellipse","defaultEllipse","Polyline","defaultPolyline","Path","defaultPath","Circle","defaultCircle","Line","defaultLine","Image","defaultImage","Text","t","getElementsByTagName","TextPath","defaultTextPath","align","decoration","rotated","parseFloat","kerning","text","firstChild","nodeValue","attachTextPath","defaultText","x","y","attachText","fontStyle","defaultFont","style","variant","weight","size","family","attachFont","fill","getRef","defaultLinearGradient","forEach","defaultRadialGradient","cx","cy","defaultPattern","src","getAttributeNS","xmlns","xlink","opacity","a","attachFill","stroke","strokeStyle","defaultStroke","width","cap","join","attachStroke","matrix","match","slice","split","normalize","xx","xy","yx","yy","dx","dy","attachTransform","attachSurface","Surface","def_elems","defNode"],"mappings":"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","file":"../../gfx/svg_attach.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/array\",\"dojo/_base/Color\", \"./_base\",\"./svg\",\"./matrix\"], \r\n  function(kernel, lang, arr, Color, g, svg, Matrix){\r\n\r\n\tkernel.experimental(\"dojox.gfx.svg_attach\");\r\n\t\r\n\tsvg.attachNode = function(node){\r\n\t\t// summary:\r\n\t\t//\t\tcreates a shape from a Node\r\n\t\t// node: Node\r\n\t\t//\t\tan SVG node\r\n\t\tif(!node){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar s = null;\r\n\t\tswitch(node.tagName.toLowerCase()){\r\n\t\t\tcase svg.Rect.nodeType:\r\n\t\t\t\ts = new svg.Rect(node);\r\n\t\t\t\tattachRect(s);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Ellipse.nodeType:\r\n\t\t\t\ts = new svg.Ellipse(node);\r\n\t\t\t\tattachShape(s, g.defaultEllipse);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Polyline.nodeType:\r\n\t\t\t\ts = new svg.Polyline(node);\r\n\t\t\t\tattachShape(s, g.defaultPolyline);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Path.nodeType:\r\n\t\t\t\ts = new svg.Path(node);\r\n\t\t\t\tattachShape(s, g.defaultPath);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Circle.nodeType:\r\n\t\t\t\ts = new svg.Circle(node);\r\n\t\t\t\tattachShape(s, g.defaultCircle);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Line.nodeType:\r\n\t\t\t\ts = new svg.Line(node);\r\n\t\t\t\tattachShape(s, g.defaultLine);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Image.nodeType:\r\n\t\t\t\ts = new svg.Image(node);\r\n\t\t\t\tattachShape(s, g.defaultImage);\r\n\t\t\t\tbreak;\r\n\t\t\tcase svg.Text.nodeType:\r\n\t\t\t\tvar t = node.getElementsByTagName(\"textPath\");\r\n\t\t\t\tif(t && t.length){\r\n\t\t\t\t\ts = new svg.TextPath(node);\r\n\t\t\t\t\tattachShape(s, g.defaultPath);\r\n\t\t\t\t\tattachTextPath(s);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ts = new svg.Text(node);\r\n\t\t\t\t\tattachText(s);\r\n\t\t\t\t}\r\n\t\t\t\tattachFont(s);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t//console.debug(\"FATAL ERROR! tagName = \" + node.tagName);\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t\tif(!(s instanceof svg.Image)){\r\n\t\t\tattachFill(s);\r\n\t\t\tattachStroke(s);\r\n\t\t}\r\n\t\tattachTransform(s);\r\n\t\treturn s;\t// dojox/gfx/shape.Shape\r\n\t};\r\n\r\n\tsvg.attachSurface = function(node){\r\n\t\t// summary:\r\n\t\t//\t\tcreates a surface from a Node\r\n\t\t// node: Node\r\n\t\t//\t\tan SVG node\r\n\t\tvar s = new svg.Surface();\r\n\t\ts.rawNode = node;\r\n\t\tvar def_elems = node.getElementsByTagName(\"defs\");\r\n\t\tif(def_elems.length == 0){\r\n\t\t\treturn null;\t// dojox/gfx.Surface\r\n\t\t}\r\n\t\ts.defNode = def_elems[0];\r\n\t\treturn s;\t// dojox/gfx.Surface\r\n\t};\r\n\r\n\tfunction attachFill(object){\r\n\t\t// summary:\r\n\t\t//\t\tdeduces a fill style from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar fill = object.rawNode.getAttribute(\"fill\");\r\n\t\tif(fill == \"none\"){\r\n\t\t\tobject.fillStyle = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar fillStyle = null, gradient = svg.getRef(fill);\r\n\t\tif(gradient){\r\n\t\t\tswitch(gradient.tagName.toLowerCase()){\r\n\t\t\t\tcase \"lineargradient\":\r\n\t\t\t\t\tfillStyle = _getGradient(g.defaultLinearGradient, gradient);\r\n\t\t\t\t\tarr.forEach([\"x1\", \"y1\", \"x2\", \"y2\"], function(x){\r\n\t\t\t\t\t\tfillStyle[x] = gradient.getAttribute(x);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"radialgradient\":\r\n\t\t\t\t\tfillStyle = _getGradient(g.defaultRadialGradient, gradient);\r\n\t\t\t\t\tarr.forEach([\"cx\", \"cy\", \"r\"], function(x){\r\n\t\t\t\t\t\tfillStyle[x] = gradient.getAttribute(x);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tfillStyle.cx = gradient.getAttribute(\"cx\");\r\n\t\t\t\t\tfillStyle.cy = gradient.getAttribute(\"cy\");\r\n\t\t\t\t\tfillStyle.r  = gradient.getAttribute(\"r\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"pattern\":\r\n\t\t\t\t\tfillStyle = lang.clone(g.defaultPattern);\r\n\t\t\t\t\tarr.forEach([\"x\", \"y\", \"width\", \"height\"], function(x){\r\n\t\t\t\t\t\tfillStyle[x] = gradient.getAttribute(x);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tfillStyle.src = gradient.firstChild.getAttributeNS(svg.xmlns.xlink, \"href\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tfillStyle = new Color(fill);\r\n\t\t\tvar opacity = object.rawNode.getAttribute(\"fill-opacity\");\r\n\t\t\tif(opacity != null){ fillStyle.a = opacity; }\r\n\t\t}\r\n\t\tobject.fillStyle = fillStyle;\r\n\t}\r\n\r\n\tfunction _getGradient(defaultGradient, gradient){\r\n\t\tvar fillStyle = lang.clone(defaultGradient);\r\n\t\tfillStyle.colors = [];\r\n\t\tfor(var i = 0; i < gradient.childNodes.length; ++i){\r\n\t\t\tfillStyle.colors.push({\r\n\t\t\t\toffset: gradient.childNodes[i].getAttribute(\"offset\"),\r\n\t\t\t\tcolor:  new Color(gradient.childNodes[i].getAttribute(\"stop-color\"))\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn fillStyle;\r\n\t}\r\n\r\n\tfunction attachStroke(object){\r\n\t\t// summary:\r\n\t\t//\t\tdeduces a stroke style from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar rawNode = object.rawNode, stroke = rawNode.getAttribute(\"stroke\");\r\n\t\tif(stroke == null || stroke == \"none\"){\r\n\t\t\tobject.strokeStyle = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar strokeStyle = object.strokeStyle = lang.clone(g.defaultStroke);\r\n\t\tvar color = new Color(stroke);\r\n\t\tif(color){\r\n\t\t\tstrokeStyle.color = color;\r\n\t\t\tstrokeStyle.color.a = rawNode.getAttribute(\"stroke-opacity\");\r\n\t\t\tstrokeStyle.width = rawNode.getAttribute(\"stroke-width\");\r\n\t\t\tstrokeStyle.cap = rawNode.getAttribute(\"stroke-linecap\");\r\n\t\t\tstrokeStyle.join = rawNode.getAttribute(\"stroke-linejoin\");\r\n\t\t\tif(strokeStyle.join == \"miter\"){\r\n\t\t\t\tstrokeStyle.join = rawNode.getAttribute(\"stroke-miterlimit\");\r\n\t\t\t}\r\n\t\t\tstrokeStyle.style = rawNode.getAttribute(\"dojoGfxStrokeStyle\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction attachTransform(object){\r\n\t\t// summary:\r\n\t\t//\t\tdeduces a transformation matrix from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar matrix = object.rawNode.getAttribute(\"transform\");\r\n\t\tif(matrix.match(/^matrix\\(.+\\)$/)){\r\n\t\t\tvar t = matrix.slice(7, -1).split(\",\");\r\n\t\t\tobject.matrix = Matrix.normalize({\r\n\t\t\t\txx: parseFloat(t[0]), xy: parseFloat(t[2]),\r\n\t\t\t\tyx: parseFloat(t[1]), yy: parseFloat(t[3]),\r\n\t\t\t\tdx: parseFloat(t[4]), dy: parseFloat(t[5])\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tobject.matrix = null;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction attachFont(object){\r\n\t\t// summary:\r\n\t\t//\t\tdeduces a font style from a Node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar fontStyle = object.fontStyle = lang.clone(g.defaultFont),\r\n\t\t\tr = object.rawNode;\r\n\t\tfontStyle.style = r.getAttribute(\"font-style\");\r\n\t\tfontStyle.variant = r.getAttribute(\"font-variant\");\r\n\t\tfontStyle.weight = r.getAttribute(\"font-weight\");\r\n\t\tfontStyle.size = r.getAttribute(\"font-size\");\r\n\t\tfontStyle.family = r.getAttribute(\"font-family\");\r\n\t}\r\n\r\n\tfunction attachShape(object, def){\r\n\t\t// summary:\r\n\t\t//\t\tbuilds a shape from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\t// def: Object\r\n\t\t//\t\ta default shape template\r\n\t\tvar shape = object.shape = lang.clone(def), r = object.rawNode;\r\n\t\tfor(var i in shape) {\r\n\t\t\tshape[i] = r.getAttribute(i);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction attachRect(object){\r\n\t\t// summary:\r\n\t\t//\t\tbuilds a rectangle shape from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tattachShape(object, g.defaultRect);\r\n\t\tobject.shape.r = Math.min(object.rawNode.getAttribute(\"rx\"), object.rawNode.getAttribute(\"ry\"));\r\n\t}\r\n\r\n\tfunction attachText(object){\r\n\t\t// summary:\r\n\t\t//\t\tbuilds a text shape from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar shape = object.shape = lang.clone(g.defaultText),\r\n\t\t\tr = object.rawNode;\r\n\t\tshape.x = r.getAttribute(\"x\");\r\n\t\tshape.y = r.getAttribute(\"y\");\r\n\t\tshape.align = r.getAttribute(\"text-anchor\");\r\n\t\tshape.decoration = r.getAttribute(\"text-decoration\");\r\n\t\tshape.rotated = parseFloat(r.getAttribute(\"rotate\")) != 0;\r\n\t\tshape.kerning = r.getAttribute(\"kerning\") == \"auto\";\r\n\t\tshape.text = r.firstChild.nodeValue;\r\n\t}\r\n\r\n\tfunction attachTextPath(object){\r\n\t\t// summary:\r\n\t\t//\t\tbuilds a textpath shape from a node.\r\n\t\t// object: dojox/gfx/shape.Shape\r\n\t\t//\t\tan SVG shape\r\n\t\tvar shape = object.shape = lang.clone(g.defaultTextPath),\r\n\t\t\tr = object.rawNode;\r\n\t\tshape.align = r.getAttribute(\"text-anchor\");\r\n\t\tshape.decoration = r.getAttribute(\"text-decoration\");\r\n\t\tshape.rotated = parseFloat(r.getAttribute(\"rotate\")) != 0;\r\n\t\tshape.kerning = r.getAttribute(\"kerning\") == \"auto\";\r\n\t\tshape.text = r.firstChild.nodeValue;\r\n\t}\r\n\r\n\treturn svg; // return augmented svg api\r\n});\r\n"]}