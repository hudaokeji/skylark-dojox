{"version":3,"sources":["gfx/utils.js"],"names":["define","kernel","lang","g","html","arr","win","jsonLib","Deferred","has","require","config","gu","utils","mixin","forEach","object","f","o","global","call","Surface","Group","children","shape","serialize","v","t","isSurface","map","getShape","getTransform","transform","getStroke","stroke","getFill","fill","getFont","font","toJson","prettyPrint","deserialize","parent","Array","hitch","createShape","createGroup","setTransform","setStroke","setFill","setFont","fromJson","json","toSvg","surface","deferred","renderer","svg","_cleanSvg","_innerXML","rawNode","callback","e","errback","_initSvgSerializerDeferred","_initSvgSerializer","jsonForm","serializer","sDim","getDimensions","width","height","node","_gfxSvgProxy","document","createElement","body","appendChild","withDoc","style","this","ts","dojox","_scopeName","gfx","createSurface","whenLoaded","innerHTML","clear","destroy","removeChild","ex","fired","addCallback","_svgSerializerInitialized","intv","doc","display","position","top","onreadystatechange","contentWindow","readyState","setInterval","scopeMap","clearInterval","onload","uri","toUrl","setAttribute","toString","innerXML","xml","XMLSerializer","serializeToString","indexOf","substring","length","replace"],"mappings":"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","file":"../../gfx/utils.js","sourcesContent":["define([\"dojo/_base/kernel\",\"dojo/_base/lang\",\"./_base\", \"dojo/_base/html\",\"dojo/_base/array\", \"dojo/_base/window\", \"dojo/_base/json\", \r\n\t\"dojo/_base/Deferred\", \"dojo/_base/sniff\", \"require\",\"dojo/_base/config\"], \r\n  function(kernel, lang, g, html, arr, win, jsonLib, Deferred, has, require, config){\r\n\tvar gu = g.utils = {};\r\n\r\n\tlang.mixin(gu, {\r\n\t\tforEach: function(\r\n\t\t\t/*dojox/gfx/shape.Surface|dojox/gfx/shape.Shape*/ object,\r\n\t\t\t/*Function|String|Array*/ f, /*Object?*/ o\r\n\t\t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a shape or a surface and applies a function \"f\" to in the context of \"o\"\r\n\t\t\t//\t\t(or global, if missing). If \"shape\" was a surface or a group, it applies the same\r\n\t\t\t//\t\tfunction to all children recursively effectively visiting all shapes of the underlying scene graph.\r\n\t\t\t// object:\r\n\t\t\t//\t\tThe gfx container to iterate.\r\n\t\t\t// f:\r\n\t\t\t//\t\tThe function to apply.\r\n\t\t\t// o:\r\n\t\t\t//\t\tThe scope.\r\n\t\t\to = o || kernel.global;\r\n\t\t\tf.call(o, object);\r\n\t\t\tif(object instanceof g.Surface || object instanceof g.Group){\r\n\t\t\t\tarr.forEach(object.children, function(shape){\r\n\t\t\t\t\tgu.forEach(shape, f, o);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tserialize: function(object){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a shape or a surface and returns an object, which describes underlying shapes.\r\n\t\t\t// object: dojox/gfx/shape.Surface|dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe container to serialize.\r\n\r\n\t\t\tvar t = {}, v, isSurface = object instanceof g.Surface;\r\n\t\t\tif(isSurface || object instanceof g.Group){\r\n\t\t\t\tt.children = arr.map(object.children, gu.serialize);\r\n\t\t\t\tif(isSurface){\r\n\t\t\t\t\treturn t.children;\t// Array\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tt.shape = object.getShape();\r\n\t\t\t}\r\n\t\t\tif(object.getTransform){\r\n\t\t\t\tv = object.getTransform();\r\n\t\t\t\tif(v){ t.transform = v; }\r\n\t\t\t}\r\n\t\t\tif(object.getStroke){\r\n\t\t\t\tv = object.getStroke();\r\n\t\t\t\tif(v){ t.stroke = v; }\r\n\t\t\t}\r\n\t\t\tif(object.getFill){\r\n\t\t\t\tv = object.getFill();\r\n\t\t\t\tif(v){ t.fill = v; }\r\n\t\t\t}\r\n\t\t\tif(object.getFont){\r\n\t\t\t\tv = object.getFont();\r\n\t\t\t\tif(v){ t.font = v; }\r\n\t\t\t}\r\n\t\t\treturn t;\t// Object\r\n\t\t},\r\n\r\n\t\ttoJson: function(object, prettyPrint){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWorks just like serialize() but returns a JSON string. If prettyPrint is true, the string is pretty-printed to make it more human-readable.\r\n\t\t\t// object: dojox/gfx/shape.Surface|dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe container to serialize.\r\n\t\t\t// prettyPrint: Boolean?\r\n\t\t\t//\t\tIndicates whether the output string should be formatted.\r\n\t\t\t// returns: String\r\n\t\t\t\r\n\t\t\treturn jsonLib.toJson(gu.serialize(object), prettyPrint);\t// String\r\n\t\t},\r\n\r\n\t\tdeserialize: function(parent, object){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTakes a surface or a shape and populates it with an object produced by serialize().\r\n\t\t\t// parent: dojox/gfx/shape.Surface|dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe destination container for the deserialized shapes.\r\n\t\t\t// object: dojox/gfx/shape.Shape|Array\r\n\t\t\t//\t\tThe shapes to deserialize.\r\n\r\n\t\t\tif(object instanceof Array){\r\n\t\t\t\treturn arr.map(object, lang.hitch(null, gu.deserialize, parent));\t// Array\r\n\t\t\t}\r\n\t\t\tvar shape = (\"shape\" in object) ? parent.createShape(object.shape) : parent.createGroup();\r\n\t\t\tif(\"transform\" in object){\r\n\t\t\t\tshape.setTransform(object.transform);\r\n\t\t\t}\r\n\t\t\tif(\"stroke\" in object){\r\n\t\t\t\tshape.setStroke(object.stroke);\r\n\t\t\t}\r\n\t\t\tif(\"fill\" in object){\r\n\t\t\t\tshape.setFill(object.fill);\r\n\t\t\t}\r\n\t\t\tif(\"font\" in object){\r\n\t\t\t\tshape.setFont(object.font);\r\n\t\t\t}\r\n\t\t\tif(\"children\" in object){\r\n\t\t\t\tarr.forEach(object.children, lang.hitch(null, gu.deserialize, shape));\r\n\t\t\t}\r\n\t\t\treturn shape;\t// dojox/gfx/shape.Shape\r\n\t\t},\r\n\r\n\t\tfromJson: function(parent, json){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWorks just like deserialize() but takes a JSON representation of the object.\r\n\t\t\t// parent: dojox/gfx/shape.Surface|dojox/gfx/shape.Shape\r\n\t\t\t//\t\tThe destination container for the deserialized shapes.\r\n\t\t\t// json: String\r\n\t\t\t//\t\tThe shapes to deserialize.\r\n\r\n\t\t\treturn gu.deserialize(parent, jsonLib.fromJson(json));\t// Array|dojox/gfx/shape.Shape\r\n\t\t},\r\n\r\n\t\ttoSvg: function(/*dojox/gfx/shape.Surface*/surface){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to serialize a GFX surface to SVG text.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to serialize a GFX surface to SVG text.  The value of this output\r\n\t\t\t//\t\tis that there are numerous serverside parser libraries that can render\r\n\t\t\t//\t\tSVG into images in various formats.  This provides a way that GFX objects\r\n\t\t\t//\t\tcan be captured in a known format and sent serverside for serialization\r\n\t\t\t//\t\tinto an image.\r\n\t\t\t// surface:\r\n\t\t\t//\t\tThe GFX surface to serialize.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tDeferred object that will be called when SVG serialization is complete.\r\n\t\t\r\n\t\t\t//Since the init and even surface creation can be async, we need to\r\n\t\t\t//return a deferred that will be called when content has serialized.\r\n\t\t\tvar deferred = new Deferred();\r\n\t\t\r\n\t\t\tif(g.renderer === \"svg\"){\r\n\t\t\t\t//If we're already in SVG mode, this is easy and quick.\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvar svg = gu._cleanSvg(gu._innerXML(surface.rawNode));\r\n\t\t\t\t\tdeferred.callback(svg);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tdeferred.errback(e);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t//Okay, now we have to get creative with hidden iframes and the like to\r\n\t\t\t\t//serialize SVG.\r\n\t\t\t\tif (!gu._initSvgSerializerDeferred) {\r\n\t\t\t\t\tgu._initSvgSerializer();\r\n\t\t\t\t}\r\n\t\t\t\tvar jsonForm = gu.toJson(surface);\r\n\t\t\t\tvar serializer = function(){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tvar sDim = surface.getDimensions();\r\n\t\t\t\t\t\tvar width = sDim.width;\r\n\t\t\t\t\t\tvar\theight = sDim.height;\r\n\r\n\t\t\t\t\t\t//Create an attach point in the iframe for the contents.\r\n\t\t\t\t\t\tvar node = gu._gfxSvgProxy.document.createElement(\"div\");\r\n\t\t\t\t\t\tgu._gfxSvgProxy.document.body.appendChild(node);\r\n\t\t\t\t\t\t//Set the node scaling.\r\n\t\t\t\t\t\twin.withDoc(gu._gfxSvgProxy.document, function() {\r\n\t\t\t\t\t\t\thtml.style(node, \"width\", width);\r\n\t\t\t\t\t\t\thtml.style(node, \"height\", height);\r\n\t\t\t\t\t\t}, this);\r\n\r\n\t\t\t\t\t\t//Create temp surface to render object to and render.\r\n\t\t\t\t\t\tvar ts = gu._gfxSvgProxy[dojox._scopeName].gfx.createSurface(node, width, height);\r\n\r\n\t\t\t\t\t\t//It's apparently possible that a suface creation is async, so we need to use\r\n\t\t\t\t\t\t//the whenLoaded function.  Probably not needed for SVG, but making it common\r\n\t\t\t\t\t\tvar draw = function(surface) {\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\tgu._gfxSvgProxy[dojox._scopeName].gfx.utils.fromJson(surface, jsonForm);\r\n\r\n\t\t\t\t\t\t\t\t//Get contents and remove temp surface.\r\n\t\t\t\t\t\t\t\tvar svg = gu._cleanSvg(node.innerHTML);\r\n\t\t\t\t\t\t\t\tsurface.clear();\r\n\t\t\t\t\t\t\t\tsurface.destroy();\r\n\t\t\t\t\t\t\t\tgu._gfxSvgProxy.document.body.removeChild(node);\r\n\t\t\t\t\t\t\t\tdeferred.callback(svg);\r\n\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\tdeferred.errback(e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tts.whenLoaded(null,draw);\r\n\t\t\t\t\t }catch (ex) {\r\n\t\t\t\t\t\tdeferred.errback(ex);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t//See if we can call it directly or pass it to the deferred to be\r\n\t\t\t\t//called on initialization.\r\n\t\t\t\tif(gu._initSvgSerializerDeferred.fired > 0){\r\n\t\t\t\t\tserializer();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tgu._initSvgSerializerDeferred.addCallback(serializer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn deferred; //dojo.Deferred that will be called when serialization finishes.\r\n\t\t},\r\n\r\n\t\t//iFrame document used for handling SVG serialization.\r\n\t\t_gfxSvgProxy: null,\r\n\r\n\t\t//Serializer loaded.\r\n\t\t_initSvgSerializerDeferred: null,\r\n\r\n\t\t_svgSerializerInitialized: function() {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to call when the serializer init completed.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tgu._initSvgSerializerDeferred.callback(true);\r\n\t\t},\r\n\r\n\t\t_initSvgSerializer: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to initialize the hidden iframe where SVG rendering\r\n\t\t\t//\t\twill occur.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(!gu._initSvgSerializerDeferred){\r\n\t\t\t\tgu._initSvgSerializerDeferred = new Deferred();\r\n\t\t\t\tvar f = win.doc.createElement(\"iframe\");\r\n\t\t\t\thtml.style(f, {\r\n\t\t\t\t\tdisplay: \"none\",\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\twidth: \"1em\",\r\n\t\t\t\t\theight: \"1em\",\r\n\t\t\t\t\ttop: \"-10000px\"\r\n\t\t\t\t});\r\n\t\t\t\tvar intv;\r\n\t\t\t\tif(has(\"ie\")){\r\n\t\t\t\t\tf.onreadystatechange = function(){\r\n\t\t\t\t\t\tif(f.contentWindow.document.readyState == \"complete\"){\r\n\t\t\t\t\t\t\tf.onreadystatechange = function() {};\r\n\t\t\t\t\t\t\tintv = setInterval(function() {\r\n\t\t\t\t\t\t\t\tif(f.contentWindow[kernel.scopeMap[\"dojo\"][1]._scopeName] &&\r\n\t\t\t\t\t\t\t\t   f.contentWindow[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx &&\r\n\t\t\t\t\t\t\t\t   f.contentWindow[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils){\r\n\t\t\t\t\t\t\t\t\tclearInterval(intv);\r\n\t\t\t\t\t\t\t\t\tf.contentWindow.parent[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils._gfxSvgProxy = f.contentWindow;\r\n\t\t\t\t\t\t\t\t\tf.contentWindow.parent[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils._svgSerializerInitialized();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, 50);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}else{\r\n\t\t\t\t\tf.onload = function(){\r\n\t\t\t\t\t\tf.onload = function() {};\r\n\t\t\t\t\t\tintv = setInterval(function() {\r\n\t\t\t\t\t\t\tif(f.contentWindow[kernel.scopeMap[\"dojo\"][1]._scopeName] &&\r\n\t\t\t\t\t\t\t   f.contentWindow[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx &&\r\n\t\t\t\t\t\t\t   f.contentWindow[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils){\r\n\t\t\t\t\t\t\t\tclearInterval(intv);\r\n\t\t\t\t\t\t\t\tf.contentWindow.parent[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils._gfxSvgProxy = f.contentWindow;\r\n\t\t\t\t\t\t\t\tf.contentWindow.parent[kernel.scopeMap[\"dojox\"][1]._scopeName].gfx.utils._svgSerializerInitialized();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, 50);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t//We have to load the GFX SVG proxy frame.  Default is to use the one packaged in dojox.\r\n\t\t\t\tvar uri = (config[\"dojoxGfxSvgProxyFrameUrl\"]||require.toUrl(\"dojox/gfx/resources/gfxSvgProxyFrame.html\"));\r\n\t\t\t\tf.setAttribute(\"src\", uri.toString());\r\n\t\t\t\twin.body().appendChild(f);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_innerXML: function(/*Node*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tImplementation of MS's innerXML function, borrowed from dojox.xml.parser.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node from which to generate the XML text representation.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(node.innerXML){\r\n\t\t\t\treturn node.innerXML;\t//String\r\n\t\t\t}else if(node.xml){\r\n\t\t\t\treturn node.xml;\t\t//String\r\n\t\t\t}else if(typeof XMLSerializer != \"undefined\"){\r\n\t\t\t\treturn (new XMLSerializer()).serializeToString(node);\t//String\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\r\n\t\t_cleanSvg: function(svg) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function that cleans up artifacts in extracted SVG content.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(svg){\r\n\t\t\t\t//Make sure the namespace is set.\r\n\t\t\t\tif(svg.indexOf(\"xmlns=\\\"http://www.w3.org/2000/svg\\\"\") == -1){\r\n\t\t\t\t\tsvg = svg.substring(4, svg.length);\r\n\t\t\t\t\tsvg = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + svg;\r\n\t\t\t\t}\r\n\t\t\t\t//Same for xmlns:xlink (missing in Chrome and Safari)\r\n\t\t\t\tif(svg.indexOf(\"xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\") == -1){\r\n\t\t\t\t\tsvg = svg.substring(4, svg.length);\r\n\t\t\t\t\tsvg = \"<svg xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\" + svg;\r\n\t\t\t\t}\r\n\t\t\t\t//and add namespace to href attribute if not done yet \r\n\t\t\t\t//(FF 5+ adds xlink:href but not the xmlns def)\r\n\t\t\t\tif(svg.indexOf(\"xlink:href\") === -1){\r\n\t\t\t\t\tsvg = svg.replace(/href\\s*=/g, \"xlink:href=\");\r\n\t\t\t\t}\r\n\t\t\t\t// in IE, <image are serialized as <img>\r\n\t\t\t\tsvg = svg.replace(/<img\\b([^>]*)>/gi,\"<image $1 />\");\r\n\t\t\t\t//Do some other cleanup, like stripping out the\r\n\t\t\t\t//dojoGfx attributes and quoting ids.\r\n\t\t\t\tsvg = svg.replace(/\\bdojoGfx\\w*\\s*=\\s*(['\"])\\w*\\1/g, \"\");\r\n\t\t\t\tsvg = svg.replace(/\\b__gfxObject__\\s*=\\s*(['\"])\\w*\\1/g, \"\");\r\n\t\t\t\tsvg = svg.replace(/[=]([^\"']+?)(\\s|>)/g,'=\"$1\"$2');\r\n\t\t\t\t\r\n\t\t\t\t// Undefined strokes (IE 8 seralization weirdness) should be removed to  \r\n\t\t\t\t// allow default.  'undefined' is not a valid value. \r\n\t\t\t\tsvg = svg.replace(/\\bstroke-opacity\\w*\\s*=\\s*(['\"])undefined\\1/g, \"\"); \t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn svg;  //Cleaned SVG text.\r\n\t\t}\r\n\t});\r\n\r\n\treturn gu;\r\n});\r\n"]}