{"version":3,"sources":["math/_base.js"],"names":["define","dojo","dojox","getObject","m","math","mixin","toRadians","n","Math","PI","toDegrees","degreesToRadians","radiansToDegrees","_gamma","z","answer","floor","NaN","sqrt","sin","this","c","sum","k","pow","exp","factorial","permutations","combinations","r","bernstein","t","i","gaussian","random","j","log","range","a","b","step","arguments","length","s","push","Error","distance","midpoint","console","error"],"mappings":"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","file":"../../math/_base.js","sourcesContent":["// AMD-ID \"dojox/math/_base\"\r\ndefine([\"dojo\", \"dojox\"], function(dojo, dojox) {\r\n\tdojo.getObject(\"math\", true, dojox);\r\n\r\n\tvar m = dojox.math;\r\n\tdojo.mixin(dojox.math, {\r\n\t\ttoRadians: function(/* Number */n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConvert the passed number to radians.\r\n\t\t\treturn (n*Math.PI)/180;\t// Number\r\n\t\t},\r\n\t\ttoDegrees: function(/* Number */n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConvert the passed number to degrees.\r\n\t\t\treturn (n*180)/Math.PI;\t// Number\r\n\t\t},\r\n\t\tdegreesToRadians: function(/* Number */n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use dojox.math.toRadians.\r\n\t\t\treturn m.toRadians(n);\t// Number\r\n\t\t},\r\n\t\tradiansToDegrees: function(/* Number */n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use dojox.math.toDegrees.\r\n\t\t\treturn m.toDegrees(n);\t// Number\r\n\t\t},\r\n\r\n\t\t_gamma: function(z){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCompute the gamma function for the passed number.\r\n\t\t\t//\t\tApproximately 14 digits of precision with non-integers.\r\n\t\t\tvar answer = 1; // 0!\r\n\t\t\t// gamma(n+1) = n * gamma(n)\r\n\t\t\twhile (--z >= 1){\r\n\t\t\t\tanswer *= z;\r\n\t\t\t}\r\n\t\t\tif(z == 0){ return answer; } // normal integer quick return\r\n\t\t\tif(Math.floor(z) == z){ return NaN; } // undefined at nonpositive integers since sin() below will return 0\r\n\t\t\t// assert: z < 1, remember this z is really z-1\r\n\t\t\tif(z == -0.5){ return Math.sqrt(Math.PI); } // popular gamma(1/2)\r\n\t\t\tif(z < -0.5){ // remember this z is really z-1\r\n\t\t\t\treturn Math.PI / (Math.sin(Math.PI * (z + 1)) * this._gamma(-z)); // reflection\r\n\t\t\t}\r\n\t\t\t// assert: -0.5 < z < 1\r\n\t\t\t// Spouge approximation algorithm\r\n\t\t\tvar a = 13;\r\n\t\t\t// c[0] = sqrt(2*PI) / exp(a)\r\n\t\t\t// var kfact = 1\r\n\t\t\t// for (var k=1; k < a; k++){\r\n\t\t\t//\t\tc[k] = pow(-k + a, k - 0.5) * exp(-k) / kfact\r\n\t\t\t//\t\tkfact *= -k  // (-1)^(k-1) * (k-1)!\r\n\t\t\t// }\r\n\t\t\tvar c = [ // precomputed from the above algorithm\r\n\t\t\t\t\t 5.6658056015186327e-6,\r\n\t\t\t\t\t 1.2743717663379679,\r\n\t\t\t\t\t-4.9374199093155115,\r\n\t\t\t\t\t 7.8720267032485961,\r\n\t\t\t\t\t-6.6760503749436087,\r\n\t\t\t\t\t 3.2525298444485167,\r\n\t\t\t\t\t-9.1852521441026269e-1,\r\n\t\t\t\t\t 1.4474022977730785e-1,\r\n\t\t\t\t\t-1.1627561382389853e-2,\r\n\t\t\t\t\t 4.0117980757066622e-4,\r\n\t\t\t\t\t-4.2652458386405744e-6,\r\n\t\t\t\t\t 6.6651913290336086e-9,\r\n\t\t\t\t\t-1.5392547381874824e-13\r\n\t\t\t\t];\r\n\t\t\tvar sum = c[0];\r\n\t\t\tfor (var k=1; k < a; k++){\r\n\t\t\t\tsum += c[k] / (z + k);\r\n\t\t\t}\r\n\t\t\treturn answer * Math.pow(z + a, z + 0.5) / Math.exp(z) * sum;\r\n\t\t},\r\n\r\n\t\tfactorial: function(/* Number */n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the factorial of n\r\n\t\t\treturn this._gamma(n+1);\t// Number\r\n\t\t},\r\n\r\n\t\tpermutations: function(/* Number */n, /* Number */k){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTODO\r\n\t\t\tif(n==0 || k==0){\r\n\t\t\t\treturn 1; \t// Number\r\n\t\t\t}\r\n\t\t\treturn this.factorial(n) / this.factorial(n-k);\r\n\t\t},\r\n\r\n\t\tcombinations: function(/* Number */n, /* Number */r){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTODO\r\n\t\t\tif(n==0 || r==0){\r\n\t\t\t\treturn 1; \t// Number\r\n\t\t\t}\r\n\t\t\treturn this.factorial(n) / (this.factorial(n-r) * this.factorial(r));\t// Number\r\n\t\t},\r\n\r\n\t\tbernstein: function(/* Number */t, /* Number */n, /* Number */ i){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTODO\r\n\t\t\treturn this.combinations(n, i) * Math.pow(t, i) * Math.pow(1-t, n-i);\t// Number\r\n\t\t},\r\n\r\n\t\tgaussian: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn a random number based on the Gaussian algo.\r\n\t\t\tvar k=2;\r\n\t\t\tdo{\r\n\t\t\t\tvar i=2*Math.random()-1;\r\n\t\t\t\tvar j=2*Math.random()-1;\r\n\t\t\t\tk = i*i+j*j;\r\n\t\t\t}while(k>=1);\r\n\t\t\treturn i * Math.sqrt((-2*Math.log(k))/k);\t// Number\r\n\t\t},\r\n\r\n\t\t// create a range of numbers\r\n\t\trange: function(/* Number */a, /* Number? */b, /* Number? */step){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a range of numbers based on the parameters.\r\n\t\t\tif(arguments.length<2){\r\n\t\t\t\tb=a,a=0;\r\n\t\t\t}\r\n\t\t\tvar range=[], s=step||1, i;\r\n\t\t\tif(s>0){\r\n\t\t\t\tfor(i=a; i<b; i+=s){\r\n\t\t\t\t\trange.push(i);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(s<0){\r\n\t\t\t\t\tfor(i=a; i>b; i+=s){\r\n\t\t\t\t\t\trange.push(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error(\"dojox.math.range: step must not be zero.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn range; \t// Array\r\n\t\t},\r\n\r\n\t\tdistance: function(/* Array */a, /* Array */b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the distance between point A and point B\r\n\t\t\treturn Math.sqrt(Math.pow(b[0]-a[0],2)+Math.pow(b[1]-a[1],2));\t// Number\r\n\t\t},\r\n\r\n\t\tmidpoint: function(/* Array */a, /* Array */b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the midpoint between points A and B.  A and B may be multidimensional.\r\n\t\t\tif(a.length!=b.length){\r\n\t\t\t\tconsole.error(\"dojox.math.midpoint: Points A and B are not the same dimensionally.\", a, b);\r\n\t\t\t}\r\n\t\t\tvar m=[];\r\n\t\t\tfor(var i=0; i<a.length; i++){\r\n\t\t\t\tm[i]=(a[i]+b[i])/2;\r\n\t\t\t}\r\n\t\t\treturn m;\t// Array\r\n\t\t}\r\n\t});\r\n\r\n\treturn dojox.math;\r\n});\r\n"]}