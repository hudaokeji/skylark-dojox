{"version":3,"sources":["math/tests/math.js"],"names":["dojo","provide","require","approx","r","Math","floor","tests","register","t","assertEqual","dojox","math","factorial","sqrt","PI","NaN"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,yBAEbD,KAAKE,QAAQ,cAEb,WACC,SAASC,EAAOC,GACf,OAAOC,KAAKC,MAAMF,GAAK,GAAK,MAAQ,GAAK,IAE1CG,MAAMC,SAAS,8BAEd,SAAeC,GAAIA,EAAEC,YAAY,EAAGC,MAAMC,KAAKC,UAAU,KACzD,SAAeJ,GAAIA,EAAEC,YAAY,EAAGC,MAAMC,KAAKC,UAAU,KACzD,SAAeJ,GAAIA,EAAEC,YAAY,EAAGC,MAAMC,KAAKC,UAAU,KACzD,SAAeJ,GAAIA,EAAEC,YAAY,IAAKC,MAAMC,KAAKC,UAAU,KAE3D,SAAoBJ,GAAIA,EAAEC,YAAYP,EAAO,mBAAsBA,EAAOQ,MAAMC,KAAKC,UAAU,EAAE,EAAE,YACnG,SAAmBJ,GAAIA,EAAEC,YAAYP,EAAO,oBAAsBA,EAAOQ,MAAMC,KAAKC,UAAU,EAAE,EAAE,YAElG,SAAsBJ,GAAIA,EAAEC,YAAYL,KAAKS,KAAKT,KAAKU,IAAKJ,MAAMC,KAAKC,WAAW,MAClF,SAAsBJ,GAAIA,EAAEC,YAAYP,EAAOE,KAAKS,KAAKT,KAAKU,IAAI,GAAIZ,EAAOQ,MAAMC,KAAKC,UAAU,OAClG,SAAwBJ,GAAIA,EAAEC,YAAYP,EAA2B,GAAnBE,KAAKS,KAAKT,KAAKU,KAAQZ,EAAOQ,MAAMC,KAAKC,WAAW,QACtG,SAAwBJ,GAAIA,EAAEC,YAAYP,EAA0B,EAAnBE,KAAKS,KAAKT,KAAKU,IAAM,GAAIZ,EAAOQ,MAAMC,KAAKC,WAAW,QACvG,SAAwBJ,GAAIA,EAAEC,YAAYP,EAA0B,GAAnBE,KAAKS,KAAKT,KAAKU,IAAO,GAAIZ,EAAOQ,MAAMC,KAAKC,UAAU,QAEvG,SAAkBJ,GAAIA,EAAEC,YAAYM,IAAKL,MAAMC,KAAKC,WAAW,KAC/D,SAAkBJ,GAAIA,EAAEC,YAAYM,IAAKL,MAAMC,KAAKC,WAAW,OArBjE","file":"../../../math/tests/math.js","sourcesContent":["dojo.provide(\"dojox.math.tests.math\");\r\n\r\ndojo.require(\"dojox.math\");\r\n\r\n(function(){\r\n\tfunction approx(r){\r\n\t\treturn Math.floor(r * (1 << 30)) / (1 << 30);\r\n\t}\r\n\ttests.register(\"dojox.math.tests.factorial\", [\r\n\t\t// standard integer values\r\n\t\tfunction fact0(t){ t.assertEqual(1, dojox.math.factorial(0)); },\r\n\t\tfunction fact1(t){ t.assertEqual(1, dojox.math.factorial(1)); },\r\n\t\tfunction fact2(t){ t.assertEqual(2, dojox.math.factorial(2)); },\r\n\t\tfunction fact5(t){ t.assertEqual(120, dojox.math.factorial(5)); },\r\n\t\t// almost integer\r\n\t\tfunction fact5minus(t){ t.assertEqual(approx(119.999804750496600), approx(dojox.math.factorial(5-1/1048576))); },\r\n\t\tfunction fact5plus(t){ t.assertEqual(approx(120.000195249840876), approx(dojox.math.factorial(5+1/1048576))); },\r\n\t\t// geometric values\r\n\t\tfunction factNeg1half(t){ t.assertEqual(Math.sqrt(Math.PI), dojox.math.factorial(-0.5)); },\r\n\t\tfunction factPos1half(t){ t.assertEqual(approx(Math.sqrt(Math.PI)/2), approx(dojox.math.factorial(0.5))); },\r\n\t\tfunction factNeg3halves(t){ t.assertEqual(approx(-Math.sqrt(Math.PI)*2), approx(dojox.math.factorial(-1.5))); },\r\n\t\tfunction factNeg5halves(t){ t.assertEqual(approx(Math.sqrt(Math.PI)*4/3), approx(dojox.math.factorial(-2.5))); },\r\n\t\tfunction factPos5halves(t){ t.assertEqual(approx(Math.sqrt(Math.PI)*15/8), approx(dojox.math.factorial(2.5))); },\r\n\t\t// invalid values\r\n\t\tfunction factNeg1(t){ t.assertEqual(NaN, dojox.math.factorial(-1)); },\r\n\t\tfunction factNeg2(t){ t.assertEqual(NaN, dojox.math.factorial(-2)); }\r\n\t]);\r\n\t\r\n})();\r\n"]}