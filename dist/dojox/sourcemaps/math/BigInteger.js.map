{"version":3,"sources":["math/BigInteger.js"],"names":["define","dojo","dojox","dbits","getObject","experimental","BigInteger","a","b","c","this","_fromNumber","_fromString","nbi","navigator","appName","prototype","am","i","x","w","j","n","xl","xh","l","h","m","v","Math","floor","rr","vv","BI_RM","BI_RC","charCodeAt","int2char","charAt","intAt","s","nbv","r","_fromInt","nbits","t","Classic","Montgomery","mp","_invDigit","mpl","mph","um","_DB","mt2","extend","convert","compareTo","mod","revert","reduce","_divRemTo","mulTo","y","_multiplyTo","sqrTo","_squareTo","abs","_dlShiftTo","ZERO","_subTo","_copyTo","u0","_DM","_DV","_clamp","_drShiftTo","_FV","pow","_F1","_F2","k","_fromRadix","length","mi","sh","max","_lShiftTo","bs","cbs","bm","ds","_rShiftTo","min","q","pm","pt","ts","ms","nsh","ys","y0","yt","d1","d2","e","ONE","qd","_isEven","_exp","z","r2","g","toString","negate","_toRadix","d","km","p","bitLength","modPowInt","_mixin","_nbi","_nbv","_nbits","_Montgomery","math"],"mappings":"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","file":"../../math/BigInteger.js","sourcesContent":["// AMD-ID \"dojox/math/BigInteger\"\r\ndefine([\"dojo\", \"dojox\"], function(dojo, dojox) {\r\n\r\n\tdojo.getObject(\"math.BigInteger\", true, dojox);\r\n\tdojo.experimental(\"dojox.math.BigInteger\");\r\n\r\n// Contributed under CLA by Tom Wu <tjw@cs.Stanford.EDU>\r\n// See http://www-cs-students.stanford.edu/~tjw/jsbn/ for details.\r\n\r\n// Basic JavaScript BN library - subset useful for RSA encryption.\r\n// The API for dojox.math.BigInteger closely resembles that of the java.math.BigInteger class in Java.\r\n\r\n\t// Bits per digit\r\n\tvar dbits;\r\n\r\n\t// JavaScript engine analysis\r\n\tvar canary = 0xdeadbeefcafe;\r\n\tvar j_lm = ((canary&0xffffff)==0xefcafe);\r\n\r\n\t// (public) Constructor\r\n\tfunction BigInteger(a,b,c) {\r\n\t  if(a != null)\r\n\t\tif(\"number\" == typeof a) this._fromNumber(a,b,c);\r\n\t\telse if(!b && \"string\" != typeof a) this._fromString(a,256);\r\n\t\telse this._fromString(a,b);\r\n\t}\r\n\r\n\t// return new, unset BigInteger\r\n\tfunction nbi() { return new BigInteger(null); }\r\n\r\n\t// am: Compute w_j += (x*this_i), propagate carries,\r\n\t// c is initial carry, returns final carry.\r\n\t// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n\t// We need to select the fastest one that works in this environment.\r\n\r\n\t// am1: use a single mult and divide to get the high bits,\r\n\t// max digit bits should be 26 because\r\n\t// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\n\tfunction am1(i,x,w,j,c,n) {\r\n\t  while(--n >= 0) {\r\n\t\tvar v = x*this[i++]+w[j]+c;\r\n\t\tc = Math.floor(v/0x4000000);\r\n\t\tw[j++] = v&0x3ffffff;\r\n\t  }\r\n\t  return c;\r\n\t}\r\n\t// am2 avoids a big mult-and-extract completely.\r\n\t// Max digit bits should be <= 30 because we do bitwise ops\r\n\t// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\n\tfunction am2(i,x,w,j,c,n) {\r\n\t  var xl = x&0x7fff, xh = x>>15;\r\n\t  while(--n >= 0) {\r\n\t\tvar l = this[i]&0x7fff;\r\n\t\tvar h = this[i++]>>15;\r\n\t\tvar m = xh*l+h*xl;\r\n\t\tl = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\r\n\t\tc = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\r\n\t\tw[j++] = l&0x3fffffff;\r\n\t  }\r\n\t  return c;\r\n\t}\r\n\t// Alternately, set max digit bits to 28 since some\r\n\t// browsers slow down when dealing with 32-bit numbers.\r\n\tfunction am3(i,x,w,j,c,n) {\r\n\t  var xl = x&0x3fff, xh = x>>14;\r\n\t  while(--n >= 0) {\r\n\t\tvar l = this[i]&0x3fff;\r\n\t\tvar h = this[i++]>>14;\r\n\t\tvar m = xh*l+h*xl;\r\n\t\tl = xl*l+((m&0x3fff)<<14)+w[j]+c;\r\n\t\tc = (l>>28)+(m>>14)+xh*h;\r\n\t\tw[j++] = l&0xfffffff;\r\n\t  }\r\n\t  return c;\r\n\t}\r\n\tif(j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\r\n\t  BigInteger.prototype.am = am2;\r\n\t  dbits = 30;\r\n\t}\r\n\telse if(j_lm && (navigator.appName != \"Netscape\")) {\r\n\t  BigInteger.prototype.am = am1;\r\n\t  dbits = 26;\r\n\t}\r\n\telse { // Mozilla/Netscape seems to prefer am3\r\n\t  BigInteger.prototype.am = am3;\r\n\t  dbits = 28;\r\n\t}\r\n\r\n\tvar BI_FP = 52;\r\n\r\n\t// Digit conversions\r\n\tvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\tvar BI_RC = [];\r\n\tvar rr,vv;\r\n\trr = \"0\".charCodeAt(0);\r\n\tfor(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\r\n\trr = \"a\".charCodeAt(0);\r\n\tfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n\trr = \"A\".charCodeAt(0);\r\n\tfor(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n\r\n\tfunction int2char(n) { return BI_RM.charAt(n); }\r\n\tfunction intAt(s,i) {\r\n\t  var c = BI_RC[s.charCodeAt(i)];\r\n\t  return (c==null)?-1:c;\r\n\t}\r\n\r\n\t// (protected) copy this to r\r\n\tfunction bnpCopyTo(r) {\r\n\t  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\r\n\t  r.t = this.t;\r\n\t  r.s = this.s;\r\n\t}\r\n\r\n\t// (protected) set from integer value x, -DV <= x < DV\r\n\tfunction bnpFromInt(x) {\r\n\t  this.t = 1;\r\n\t  this.s = (x<0)?-1:0;\r\n\t  if(x > 0) this[0] = x;\r\n\t  else if(x < -1) this[0] = x+_DV;\r\n\t  else this.t = 0;\r\n\t}\r\n\r\n\t// return bigint initialized to value\r\n\tfunction nbv(i) { var r = nbi(); r._fromInt(i); return r; }\r\n\r\n\t// (protected) set from string and radix\r\n\tfunction bnpFromString(s,b) {\r\n\t  var k;\r\n\t  if(b == 16) k = 4;\r\n\t  else if(b == 8) k = 3;\r\n\t  else if(b == 256) k = 8; // byte array\r\n\t  else if(b == 2) k = 1;\r\n\t  else if(b == 32) k = 5;\r\n\t  else if(b == 4) k = 2;\r\n\t  else { this._fromRadix(s,b); return; }\r\n\t  this.t = 0;\r\n\t  this.s = 0;\r\n\t  var i = s.length, mi = false, sh = 0;\r\n\t  while(--i >= 0) {\r\n\t\tvar x = (k==8)?s[i]&0xff:intAt(s,i);\r\n\t\tif(x < 0) {\r\n\t\t  if(s.charAt(i) == \"-\") mi = true;\r\n\t\t  continue;\r\n\t\t}\r\n\t\tmi = false;\r\n\t\tif(sh == 0)\r\n\t\t  this[this.t++] = x;\r\n\t\telse if(sh+k > this._DB) {\r\n\t\t  this[this.t-1] |= (x&((1<<(this._DB-sh))-1))<<sh;\r\n\t\t  this[this.t++] = (x>>(this._DB-sh));\r\n\t\t}\r\n\t\telse\r\n\t\t  this[this.t-1] |= x<<sh;\r\n\t\tsh += k;\r\n\t\tif(sh >= this._DB) sh -= this._DB;\r\n\t  }\r\n\t  if(k == 8 && (s[0]&0x80) != 0) {\r\n\t\tthis.s = -1;\r\n\t\tif(sh > 0) this[this.t-1] |= ((1<<(this._DB-sh))-1)<<sh;\r\n\t  }\r\n\t  this._clamp();\r\n\t  if(mi) BigInteger.ZERO._subTo(this,this);\r\n\t}\r\n\r\n\t// (protected) clamp off excess high words\r\n\tfunction bnpClamp() {\r\n\t  var c = this.s&this._DM;\r\n\t  while(this.t > 0 && this[this.t-1] == c) --this.t;\r\n\t}\r\n\r\n\t// (public) return string representation in given radix\r\n\tfunction bnToString(b) {\r\n\t  if(this.s < 0) return \"-\"+this.negate().toString(b);\r\n\t  var k;\r\n\t  if(b == 16) k = 4;\r\n\t  else if(b == 8) k = 3;\r\n\t  else if(b == 2) k = 1;\r\n\t  else if(b == 32) k = 5;\r\n\t  else if(b == 4) k = 2;\r\n\t  else return this._toRadix(b);\r\n\t  var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\r\n\t  var p = this._DB-(i*this._DB)%k;\r\n\t  if(i-- > 0) {\r\n\t\tif(p < this._DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\r\n\t\twhile(i >= 0) {\r\n\t\t  if(p < k) {\r\n\t\t\td = (this[i]&((1<<p)-1))<<(k-p);\r\n\t\t\td |= this[--i]>>(p+=this._DB-k);\r\n\t\t  }\r\n\t\t  else {\r\n\t\t\td = (this[i]>>(p-=k))&km;\r\n\t\t\tif(p <= 0) { p += this._DB; --i; }\r\n\t\t  }\r\n\t\t  if(d > 0) m = true;\r\n\t\t  if(m) r += int2char(d);\r\n\t\t}\r\n\t  }\r\n\t  return m?r:\"0\";\r\n\t}\r\n\r\n\t// (public) -this\r\n\tfunction bnNegate() { var r = nbi(); BigInteger.ZERO._subTo(this,r); return r; }\r\n\r\n\t// (public) |this|\r\n\tfunction bnAbs() { return (this.s<0)?this.negate():this; }\r\n\r\n\t// (public) return + if this > a, - if this < a, 0 if equal\r\n\tfunction bnCompareTo(a) {\r\n\t  var r = this.s-a.s;\r\n\t  if(r) return r;\r\n\t  var i = this.t;\r\n\t  r = i-a.t;\r\n\t  if(r) return r;\r\n\t  while(--i >= 0) if((r = this[i] - a[i])) return r;\r\n\t  return 0;\r\n\t}\r\n\r\n\t// returns bit length of the integer x\r\n\tfunction nbits(x) {\r\n\t  var r = 1, t;\r\n\t  if((t=x>>>16)) { x = t; r += 16; }\r\n\t  if((t=x>>8)) { x = t; r += 8; }\r\n\t  if((t=x>>4)) { x = t; r += 4; }\r\n\t  if((t=x>>2)) { x = t; r += 2; }\r\n\t  if((t=x>>1)) { x = t; r += 1; }\r\n\t  return r;\r\n\t}\r\n\r\n\t// (public) return the number of bits in \"this\"\r\n\tfunction bnBitLength() {\r\n\t  if(this.t <= 0) return 0;\r\n\t  return this._DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this._DM));\r\n\t}\r\n\r\n\t// (protected) r = this << n*DB\r\n\tfunction bnpDLShiftTo(n,r) {\r\n\t  var i;\r\n\t  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\r\n\t  for(i = n-1; i >= 0; --i) r[i] = 0;\r\n\t  r.t = this.t+n;\r\n\t  r.s = this.s;\r\n\t}\r\n\r\n\t// (protected) r = this >> n*DB\r\n\tfunction bnpDRShiftTo(n,r) {\r\n\t  for(var i = n; i < this.t; ++i) r[i-n] = this[i];\r\n\t  r.t = Math.max(this.t-n,0);\r\n\t  r.s = this.s;\r\n\t}\r\n\r\n\t// (protected) r = this << n\r\n\tfunction bnpLShiftTo(n,r) {\r\n\t  var bs = n%this._DB;\r\n\t  var cbs = this._DB-bs;\r\n\t  var bm = (1<<cbs)-1;\r\n\t  var ds = Math.floor(n/this._DB), c = (this.s<<bs)&this._DM, i;\r\n\t  for(i = this.t-1; i >= 0; --i) {\r\n\t\tr[i+ds+1] = (this[i]>>cbs)|c;\r\n\t\tc = (this[i]&bm)<<bs;\r\n\t  }\r\n\t  for(i = ds-1; i >= 0; --i) r[i] = 0;\r\n\t  r[ds] = c;\r\n\t  r.t = this.t+ds+1;\r\n\t  r.s = this.s;\r\n\t  r._clamp();\r\n\t}\r\n\r\n\t// (protected) r = this >> n\r\n\tfunction bnpRShiftTo(n,r) {\r\n\t  r.s = this.s;\r\n\t  var ds = Math.floor(n/this._DB);\r\n\t  if(ds >= this.t) { r.t = 0; return; }\r\n\t  var bs = n%this._DB;\r\n\t  var cbs = this._DB-bs;\r\n\t  var bm = (1<<bs)-1;\r\n\t  r[0] = this[ds]>>bs;\r\n\t  for(var i = ds+1; i < this.t; ++i) {\r\n\t\tr[i-ds-1] |= (this[i]&bm)<<cbs;\r\n\t\tr[i-ds] = this[i]>>bs;\r\n\t  }\r\n\t  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\r\n\t  r.t = this.t-ds;\r\n\t  r._clamp();\r\n\t}\r\n\r\n\t// (protected) r = this - a\r\n\tfunction bnpSubTo(a,r) {\r\n\t  var i = 0, c = 0, m = Math.min(a.t,this.t);\r\n\t  while(i < m) {\r\n\t\tc += this[i]-a[i];\r\n\t\tr[i++] = c&this._DM;\r\n\t\tc >>= this._DB;\r\n\t  }\r\n\t  if(a.t < this.t) {\r\n\t\tc -= a.s;\r\n\t\twhile(i < this.t) {\r\n\t\t  c += this[i];\r\n\t\t  r[i++] = c&this._DM;\r\n\t\t  c >>= this._DB;\r\n\t\t}\r\n\t\tc += this.s;\r\n\t  }\r\n\t  else {\r\n\t\tc += this.s;\r\n\t\twhile(i < a.t) {\r\n\t\t  c -= a[i];\r\n\t\t  r[i++] = c&this._DM;\r\n\t\t  c >>= this._DB;\r\n\t\t}\r\n\t\tc -= a.s;\r\n\t  }\r\n\t  r.s = (c<0)?-1:0;\r\n\t  if(c < -1) r[i++] = this._DV+c;\r\n\t  else if(c > 0) r[i++] = c;\r\n\t  r.t = i;\r\n\t  r._clamp();\r\n\t}\r\n\r\n\t// (protected) r = this * a, r != this,a (HAC 14.12)\r\n\t// \"this\" should be the larger one if appropriate.\r\n\tfunction bnpMultiplyTo(a,r) {\r\n\t  var x = this.abs(), y = a.abs();\r\n\t  var i = x.t;\r\n\t  r.t = i+y.t;\r\n\t  while(--i >= 0) r[i] = 0;\r\n\t  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\r\n\t  r.s = 0;\r\n\t  r._clamp();\r\n\t  if(this.s != a.s) BigInteger.ZERO._subTo(r,r);\r\n\t}\r\n\r\n\t// (protected) r = this^2, r != this (HAC 14.16)\r\n\tfunction bnpSquareTo(r) {\r\n\t  var x = this.abs();\r\n\t  var i = r.t = 2*x.t;\r\n\t  while(--i >= 0) r[i] = 0;\r\n\t  for(i = 0; i < x.t-1; ++i) {\r\n\t\tvar c = x.am(i,x[i],r,2*i,0,1);\r\n\t\tif((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x._DV) {\r\n\t\t  r[i+x.t] -= x._DV;\r\n\t\t  r[i+x.t+1] = 1;\r\n\t\t}\r\n\t  }\r\n\t  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\r\n\t  r.s = 0;\r\n\t  r._clamp();\r\n\t}\r\n\r\n\t// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n\t// r != q, this != m.  q or r may be null.\r\n\tfunction bnpDivRemTo(m,q,r) {\r\n\t  var pm = m.abs();\r\n\t  if(pm.t <= 0) return;\r\n\t  var pt = this.abs();\r\n\t  if(pt.t < pm.t) {\r\n\t\tif(q != null) q._fromInt(0);\r\n\t\tif(r != null) this._copyTo(r);\r\n\t\treturn;\r\n\t  }\r\n\t  if(r == null) r = nbi();\r\n\t  var y = nbi(), ts = this.s, ms = m.s;\r\n\t  var nsh = this._DB-nbits(pm[pm.t-1]);\t// normalize modulus\r\n\t  if(nsh > 0) { pm._lShiftTo(nsh,y); pt._lShiftTo(nsh,r); }\r\n\t  else { pm._copyTo(y); pt._copyTo(r); }\r\n\t  var ys = y.t;\r\n\t  var y0 = y[ys-1];\r\n\t  if(y0 == 0) return;\r\n\t  var yt = y0*(1<<this._F1)+((ys>1)?y[ys-2]>>this._F2:0);\r\n\t  var d1 = this._FV/yt, d2 = (1<<this._F1)/yt, e = 1<<this._F2;\r\n\t  var i = r.t, j = i-ys, t = (q==null)?nbi():q;\r\n\t  y._dlShiftTo(j,t);\r\n\t  if(r.compareTo(t) >= 0) {\r\n\t\tr[r.t++] = 1;\r\n\t\tr._subTo(t,r);\r\n\t  }\r\n\t  BigInteger.ONE._dlShiftTo(ys,t);\r\n\t  t._subTo(y,y);\t// \"negative\" y so we can replace sub with am later\r\n\t  while(y.t < ys) y[y.t++] = 0;\r\n\t  while(--j >= 0) {\r\n\t\t// Estimate quotient digit\r\n\t\tvar qd = (r[--i]==y0)?this._DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\r\n\t\tif((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {\t// Try it out\r\n\t\t  y._dlShiftTo(j,t);\r\n\t\t  r._subTo(t,r);\r\n\t\t  while(r[i] < --qd) r._subTo(t,r);\r\n\t\t}\r\n\t  }\r\n\t  if(q != null) {\r\n\t\tr._drShiftTo(ys,q);\r\n\t\tif(ts != ms) BigInteger.ZERO._subTo(q,q);\r\n\t  }\r\n\t  r.t = ys;\r\n\t  r._clamp();\r\n\t  if(nsh > 0) r._rShiftTo(nsh,r);\t// Denormalize remainder\r\n\t  if(ts < 0) BigInteger.ZERO._subTo(r,r);\r\n\t}\r\n\r\n\t// (public) this mod a\r\n\tfunction bnMod(a) {\r\n\t  var r = nbi();\r\n\t  this.abs()._divRemTo(a,null,r);\r\n\t  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a._subTo(r,r);\r\n\t  return r;\r\n\t}\r\n\r\n\t// Modular reduction using \"classic\" algorithm\r\n\tfunction Classic(m) { this.m = m; }\r\n\tfunction cConvert(x) {\r\n\t  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\r\n\t  else return x;\r\n\t}\r\n\tfunction cRevert(x) { return x; }\r\n\tfunction cReduce(x) { x._divRemTo(this.m,null,x); }\r\n\tfunction cMulTo(x,y,r) { x._multiplyTo(y,r); this.reduce(r); }\r\n\tfunction cSqrTo(x,r) { x._squareTo(r); this.reduce(r); }\r\n\r\n\tdojo.extend(Classic, {\r\n\t\tconvert:\tcConvert,\r\n\t\trevert:\t\tcRevert,\r\n\t\treduce:\t\tcReduce,\r\n\t\tmulTo:\t\tcMulTo,\r\n\t\tsqrTo:\t\tcSqrTo\r\n\t});\r\n\r\n\t// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n\t// justification:\r\n\t// xy == 1 (mod m)\r\n\t// xy =  1+km\r\n\t// xy(2-xy) = (1+km)(1-km)\r\n\t// x[y(2-xy)] = 1-k^2m^2\r\n\t// x[y(2-xy)] == 1 (mod m^2)\r\n\t// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n\t// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n\t// JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\n\tfunction bnpInvDigit() {\r\n\t  if(this.t < 1) return 0;\r\n\t  var x = this[0];\r\n\t  if((x&1) == 0) return 0;\r\n\t  var y = x&3;\t\t// y == 1/x mod 2^2\r\n\t  y = (y*(2-(x&0xf)*y))&0xf;\t// y == 1/x mod 2^4\r\n\t  y = (y*(2-(x&0xff)*y))&0xff;\t// y == 1/x mod 2^8\r\n\t  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;\t// y == 1/x mod 2^16\r\n\t  // last step - calculate inverse mod DV directly;\r\n\t  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n\t  y = (y*(2-x*y%this._DV))%this._DV;\t\t// y == 1/x mod 2^dbits\r\n\t  // we really want the negative inverse, and -DV < y < DV\r\n\t  return (y>0)?this._DV-y:-y;\r\n\t}\r\n\r\n\t// Montgomery reduction\r\n\tfunction Montgomery(m) {\r\n\t  this.m = m;\r\n\t  this.mp = m._invDigit();\r\n\t  this.mpl = this.mp&0x7fff;\r\n\t  this.mph = this.mp>>15;\r\n\t  this.um = (1<<(m._DB-15))-1;\r\n\t  this.mt2 = 2*m.t;\r\n\t}\r\n\r\n\t// xR mod m\r\n\tfunction montConvert(x) {\r\n\t  var r = nbi();\r\n\t  x.abs()._dlShiftTo(this.m.t,r);\r\n\t  r._divRemTo(this.m,null,r);\r\n\t  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m._subTo(r,r);\r\n\t  return r;\r\n\t}\r\n\r\n\t// x/R mod m\r\n\tfunction montRevert(x) {\r\n\t  var r = nbi();\r\n\t  x._copyTo(r);\r\n\t  this.reduce(r);\r\n\t  return r;\r\n\t}\r\n\r\n\t// x = x/R mod m (HAC 14.32)\r\n\tfunction montReduce(x) {\r\n\t  while(x.t <= this.mt2)\t// pad x so am has enough room later\r\n\t\tx[x.t++] = 0;\r\n\t  for(var i = 0; i < this.m.t; ++i) {\r\n\t\t// faster way of calculating u0 = x[i]*mp mod DV\r\n\t\tvar j = x[i]&0x7fff;\r\n\t\tvar u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x._DM;\r\n\t\t// use am to combine the multiply-shift-add into one call\r\n\t\tj = i+this.m.t;\r\n\t\tx[j] += this.m.am(0,u0,x,i,0,this.m.t);\r\n\t\t// propagate carry\r\n\t\twhile(x[j] >= x._DV) { x[j] -= x._DV; x[++j]++; }\r\n\t  }\r\n\t  x._clamp();\r\n\t  x._drShiftTo(this.m.t,x);\r\n\t  if(x.compareTo(this.m) >= 0) x._subTo(this.m,x);\r\n\t}\r\n\r\n\t// r = \"x^2/R mod m\"; x != r\r\n\tfunction montSqrTo(x,r) { x._squareTo(r); this.reduce(r); }\r\n\r\n\t// r = \"xy/R mod m\"; x,y != r\r\n\tfunction montMulTo(x,y,r) { x._multiplyTo(y,r); this.reduce(r); }\r\n\r\n\tdojo.extend(Montgomery, {\r\n\t\tconvert:\tmontConvert,\r\n\t\trevert:\t\tmontRevert,\r\n\t\treduce:\t\tmontReduce,\r\n\t\tmulTo:\t\tmontMulTo,\r\n\t\tsqrTo:\t\tmontSqrTo\r\n\t});\r\n\r\n\t// (protected) true iff this is even\r\n\tfunction bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\r\n\r\n\t// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\n\tfunction bnpExp(e,z) {\r\n\t  if(e > 0xffffffff || e < 1) return BigInteger.ONE;\r\n\t  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\r\n\t  g._copyTo(r);\r\n\t  while(--i >= 0) {\r\n\t\tz.sqrTo(r,r2);\r\n\t\tif((e&(1<<i)) > 0) z.mulTo(r2,g,r);\r\n\t\telse { var t = r; r = r2; r2 = t; }\r\n\t  }\r\n\t  return z.revert(r);\r\n\t}\r\n\r\n\t// (public) this^e % m, 0 <= e < 2^32\r\n\tfunction bnModPowInt(e,m) {\r\n\t  var z;\r\n\t  if(e < 256 || m._isEven()) z = new Classic(m); else z = new Montgomery(m);\r\n\t  return this._exp(e,z);\r\n\t}\r\n\r\n\tdojo.extend(BigInteger, {\r\n\t\t// protected, not part of the official API\r\n\t\t_DB:\tdbits,\r\n\t\t_DM:\t(1 << dbits) - 1,\r\n\t\t_DV:\t1 << dbits,\r\n\r\n\t\t_FV:\tMath.pow(2, BI_FP),\r\n\t\t_F1:\tBI_FP - dbits,\r\n\t\t_F2:\t2 * dbits-BI_FP,\r\n\r\n\t\t// protected\r\n\t\t_copyTo:\t\tbnpCopyTo,\r\n\t\t_fromInt:\t\tbnpFromInt,\r\n\t\t_fromString:\tbnpFromString,\r\n\t\t_clamp:\t\t\tbnpClamp,\r\n\t\t_dlShiftTo:\t\tbnpDLShiftTo,\r\n\t\t_drShiftTo:\t\tbnpDRShiftTo,\r\n\t\t_lShiftTo:\t\tbnpLShiftTo,\r\n\t\t_rShiftTo:\t\tbnpRShiftTo,\r\n\t\t_subTo:\t\t\tbnpSubTo,\r\n\t\t_multiplyTo:\tbnpMultiplyTo,\r\n\t\t_squareTo:\t\tbnpSquareTo,\r\n\t\t_divRemTo:\t\tbnpDivRemTo,\r\n\t\t_invDigit:\t\tbnpInvDigit,\r\n\t\t_isEven:\t\tbnpIsEven,\r\n\t\t_exp:\t\t\tbnpExp,\r\n\r\n\t\t// public\r\n\t\ttoString:\t\tbnToString,\r\n\t\tnegate:\t\t\tbnNegate,\r\n\t\tabs:\t\t\tbnAbs,\r\n\t\tcompareTo:\t\tbnCompareTo,\r\n\t\tbitLength:\t\tbnBitLength,\r\n\t\tmod:\t\t\tbnMod,\r\n\t\tmodPowInt:\t\tbnModPowInt\r\n\t});\r\n\r\n\tdojo._mixin(BigInteger, {\r\n\t\t// \"constants\"\r\n\t\tZERO:\tnbv(0),\r\n\t\tONE:\tnbv(1),\r\n\r\n\t\t// internal functions\r\n\t\t_nbi: nbi,\r\n\t\t_nbv: nbv,\r\n\t\t_nbits: nbits,\r\n\r\n\t\t// internal classes\r\n\t\t_Montgomery: Montgomery\r\n\t});\r\n\r\n\t// export to DojoX\r\n\tdojox.math.BigInteger = BigInteger;\r\n\r\n\treturn dojox.math.BigInteger;\r\n});\r\n"]}