{"version":3,"sources":["math/random/Secure.js"],"names":["define","dojo","declare","constructor","prng","noEvents","this","p","pool","Array","size","pptr","i","len","t","Math","floor","random","seedTime","h","connect","body","destroy","forEach","disconnect","nextBytes","byteArray","state","init","length","next","_seed_int","Date","getTime","x","dojox","math","Secure"],"mappings":";;;;;;;AACAA,QAAQ,QAAS,SAASC,GA+F1B,OAvFAA,EAAKC,QAAQ,2BAA4B,MAKxCC,YAAa,SAASC,EAAMC,GAU3BC,KAAKF,KAAOA,EAGZ,IAAIG,EAAID,KAAKE,KAAO,IAAIC,MAAML,EAAKM,MACnCJ,KAAKK,KAAO,EACZ,IAAI,IAAIC,EAAI,EAAGC,EAAMT,EAAKM,KAAME,EAAIC,GAAM,CACzC,IAAIC,EAAIC,KAAKC,MAAM,MAAQD,KAAKE,UAChCV,EAAEK,KAAOE,IAAM,EACfP,EAAEK,KAAW,IAAJE,EAEVR,KAAKY,WAEDb,IACHC,KAAKa,GACJlB,EAAKmB,QAAQnB,EAAKoB,OAAQ,UAAcf,KAAM,YAC9CL,EAAKmB,QAAQnB,EAAKoB,OAAQ,aAAcf,KAAM,eAKjDgB,QAAS,WAGLhB,KAAKa,GACPlB,EAAKsB,QAAQjB,KAAKa,EAAGlB,EAAKuB,aAI5BC,UAAW,SAAqBC,GAO/B,IAAIC,EAAQrB,KAAKqB,MAEjB,IAAIA,EAAM,CACTrB,KAAKY,YACLS,EAAQrB,KAAKqB,MAAQrB,KAAKF,QACpBwB,KAAKtB,KAAKE,MAChB,IAAI,IAAID,EAAID,KAAKE,KAAMI,EAAI,EAAGC,EAAMN,EAAEsB,OAAQjB,EAAIC,EAAKN,EAAEK,KAAO,GAChEN,KAAKK,KAAO,EAIb,IAAQC,EAAI,EAAGC,EAAMa,EAAUG,OAAQjB,EAAIC,IAAOD,EACjDc,EAAUd,GAAKe,EAAMG,QAIvBZ,SAAU,WAGTZ,KAAKyB,WAAU,IAAIC,MAAOC,YAG3BF,UAAW,SAASG,GAGnB,IAAI3B,EAAID,KAAKE,KAAMI,EAAIN,KAAKK,KAC5BJ,EAAEK,MAAY,IAAJsB,EACV3B,EAAEK,MAASsB,GAAK,EAAK,IACrB3B,EAAEK,MAASsB,GAAK,GAAM,IACtB3B,EAAEK,MAASsB,GAAK,GAAM,IACnBtB,GAAKN,KAAKF,KAAKM,OACjBE,GAAKN,KAAKF,KAAKM,MAEhBJ,KAAKK,KAAOC,KAIPuB,MAAMC,KAAKnB,OAAOoB","file":"../../../math/random/Secure.js","sourcesContent":["// AMD-ID \"dojox/math/random/Secure\"\r\ndefine([\"dojo\"], function(dojo) {\r\n\r\n// Copyright (c) 2005  Tom Wu\r\n// All Rights Reserved.\r\n// See \"LICENSE-BigInteger\" for details.\r\n\r\n// Random number generator - requires a PRNG backend, e.g. prng4.js\r\n\r\ndojo.declare(\"dojox.math.random.Secure\", null, {\r\n\t// summary:\r\n\t//\t\tSuper simple implementation of a random number generator,\r\n\t//\t\twhich relies on Math.random().\r\n\r\n\tconstructor: function(prng, noEvents){\r\n\t\t// summary:\r\n\t\t//\t\tInitializes an instance of a secure random generator.\r\n\t\t// prng: Function\r\n\t\t//\t\tfunction that returns an instance of PRNG (pseudo random number generator)\r\n\t\t//\t\twith two methods: init(array) and next(). It should have a property \"size\"\r\n\t\t//\t\tto indicate the required pool size.\r\n\t\t// noEvents: Boolean?\r\n\t\t//\t\tif false or absent, onclick and onkeypress event will be used to add\r\n\t\t//\t\t\"randomness\", otherwise events will not be used.\r\n\t\tthis.prng = prng;\r\n\r\n\t\t// Initialize the pool with junk if needed.\r\n\t\tvar p = this.pool = new Array(prng.size);\r\n\t\tthis.pptr = 0;\r\n\t\tfor(var i = 0, len = prng.size; i < len;) {  // extract some randomness from Math.random()\r\n\t\t\tvar t = Math.floor(65536 * Math.random());\r\n\t\t\tp[i++] = t >>> 8;\r\n\t\t\tp[i++] = t & 255;\r\n\t\t}\r\n\t\tthis.seedTime();\r\n\r\n\t\tif(!noEvents){\r\n\t\t\tthis.h = [\r\n\t\t\t\tdojo.connect(dojo.body(), \"onclick\",    this, \"seedTime\"),\r\n\t\t\t\tdojo.connect(dojo.body(), \"onkeypress\", this, \"seedTime\")\r\n\t\t\t];\r\n\t\t}\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tDisconnects events, if any, preparing the object for GC.\r\n\t\tif(this.h){\r\n\t\t\tdojo.forEach(this.h, dojo.disconnect);\r\n\t\t}\r\n\t},\r\n\r\n\tnextBytes: function(/* Array */ byteArray){\r\n\t\t// summary:\r\n\t\t//\t\tFills in an array of bytes with random numbers\r\n\t\t// byteArray: Array\r\n\t\t//\t\tarray to be filled in with random numbers, only existing\r\n\t\t//\t\telements will be filled.\r\n\r\n\t\tvar state = this.state;\r\n\r\n\t\tif(!state){\r\n\t\t\tthis.seedTime();\r\n\t\t\tstate = this.state = this.prng();\r\n\t\t\tstate.init(this.pool);\r\n\t\t\tfor(var p = this.pool, i = 0, len = p.length; i < len; p[i++] = 0);\r\n\t\t\tthis.pptr = 0;\r\n\t\t\t//this.pool = null;\r\n\t\t}\r\n\r\n\t\tfor(var i = 0, len = byteArray.length; i < len; ++i){\r\n\t\t\tbyteArray[i] = state.next();\r\n\t\t}\r\n\t},\r\n\r\n\tseedTime: function() {\r\n\t\t// summary:\r\n\t\t//\t\tMix in the current time (w/milliseconds) into the pool\r\n\t\tthis._seed_int(new Date().getTime());\r\n\t},\r\n\r\n\t_seed_int: function(x) {\r\n\t\t// summary:\r\n\t\t//\t\tMix in a 32-bit integer into the pool\r\n\t\tvar p = this.pool, i = this.pptr;\r\n\t\tp[i++] ^= x & 255;\r\n\t\tp[i++] ^= (x >> 8) & 255;\r\n\t\tp[i++] ^= (x >> 16) & 255;\r\n\t\tp[i++] ^= (x >> 24) & 255;\r\n\t\tif(i >= this.prng.size){\r\n\t\t\ti -= this.prng.size;\r\n\t\t}\r\n\t\tthis.pptr = i;\r\n\t}\r\n});\r\n\r\nreturn dojox.math.random.Secure;\r\n});\r\n"]}