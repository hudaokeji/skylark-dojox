{"version":3,"sources":["math/stats.js"],"names":["define","dojo","dojox","getObject","st","math","stats","mixin","sd","a","Math","sqrt","variance","mean","squares","forEach","item","pow","length","bestFit","xProp","yProp","undefined","map","idx","x","y","t","sx","sy","sxx","syy","sxy","stt","sts","n","i","slope","d","Error","r","r2","intercept","forecast","fit","v","max","min","apply","median","slice","sort","b","floor","ceil","mode","o","m","Number","MIN_VALUE","p","sum","approxLin","pos","f","summary","alreadySorted","l","p25","med","p75","p10","p90"],"mappings":"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","file":"../../math/stats.js","sourcesContent":["// AMD-ID \"dojox/math/stats\"\r\ndefine([\"dojo\", \"../main\"], function(dojo, dojox) {\r\n\t\r\n\tdojo.getObject(\"math.stats\", true, dojox);\r\n\r\n\tvar st = dojox.math.stats;\r\n\tdojo.mixin(st, {\r\n\t\tsd: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the standard deviation of the passed arguments.\r\n\t\t\treturn Math.sqrt(st.variance(a));\t// Number\r\n\t\t},\r\n\r\n\t\tvariance: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFind the variance in the passed array of numbers.\r\n\t\t\tvar mean=0, squares=0;\r\n\t\t\tdojo.forEach(a, function(item){\r\n\t\t\t\tmean+=item;\r\n\t\t\t\tsquares+=Math.pow(item,2);\r\n\t\t\t});\r\n\t\t\treturn (squares/a.length)-Math.pow(mean/a.length, 2);\t// Number\r\n\t\t},\r\n\r\n\t\tbestFit: function(/* Object[]|Number[] */ a, /* String? */ xProp, /* String? */ yProp){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate the slope and intercept in a linear fashion.  An array\r\n\t\t\t//\t\tof objects is expected; optionally you can pass in the property\r\n\t\t\t//\t\tnames for \"x\" and \"y\", else x/y is used as the default.  If you\r\n\t\t\t//\t\tpass an array of numbers, it will be mapped to a set of {x,y} objects\r\n\t\t\t//\t\twhere x = the array index.\r\n\t\t\txProp = xProp || \"x\", yProp = yProp || \"y\";\r\n\t\t\tif(a[0] !== undefined && typeof(a[0]) == \"number\"){\r\n\t\t\t\t// this is an array of numbers, so use the index as x.\r\n\t\t\t\ta = dojo.map(a, function(item, idx){\r\n\t\t\t\t\treturn { x: idx, y: item };\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar sx = 0, sy = 0, sxx = 0, syy = 0, sxy = 0, stt = 0, sts = 0, n = a.length, t;\r\n\t\t\tfor(var i=0; i<n; i++){\r\n\t\t\t\tsx += a[i][xProp];\r\n\t\t\t\tsy += a[i][yProp];\r\n\t\t\t\tsxx += Math.pow(a[i][xProp], 2);\r\n\t\t\t\tsyy += Math.pow(a[i][yProp], 2);\r\n\t\t\t\tsxy += a[i][xProp] * a[i][yProp];\r\n\t\t\t}\r\n\r\n\t\t\t// we use the following because it's more efficient and accurate for determining the slope.\r\n\t\t\tfor(i=0; i<n; i++){\r\n\t\t\t\tt = a[i][xProp] - sx/n;\r\n\t\t\t\tstt += t*t;\r\n\t\t\t\tsts += t*a[i][yProp];\r\n\t\t\t}\r\n\t\t\tvar slope = sts/(stt||1);\t// prevent divide by zero.\r\n\r\n\t\t\t// get Pearson's R\r\n\t\t\tvar d = Math.sqrt((sxx - Math.pow(sx,2)/n) * (syy - Math.pow(sy,2)/n));\r\n\t\t\tif(d === 0){\r\n\t\t\t\tthrow new Error(\"dojox.math.stats.bestFit: the denominator for Pearson's R is 0.\");\r\n\t\t\t}\r\n\r\n\t\t\tvar r = (sxy-(sx*sy/n)) / d;\r\n\t\t\tvar r2 = Math.pow(r, 2);\r\n\t\t\tif(slope < 0){\r\n\t\t\t\tr = -r;\r\n\t\t\t}\r\n\r\n\t\t\t// to use:  y = slope*x + intercept;\r\n\t\t\treturn {\t// Object\r\n\t\t\t\tslope: slope,\r\n\t\t\t\tintercept: (sy - sx*slope)/(n||1),\r\n\t\t\t\tr: r,\r\n\t\t\t\tr2: r2\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tforecast: function(/* Object[]|Number[] */a, /* Number */x, /* String? */xProp, /* String? */yProp){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUsing the bestFit algorithm above, find y for the given x.\r\n\t\t\tvar fit = st.bestFit(a, xProp, yProp);\r\n\t\t\treturn (fit.slope * x) + fit.intercept;\t// Number\r\n\t\t},\r\n\r\n\t\tmean: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the mean value in the passed array.\r\n\t\t\tvar t=0;\r\n\t\t\tdojo.forEach(a, function(v){\r\n\t\t\t\tt += v;\r\n\t\t\t});\r\n\t\t\treturn t / Math.max(a.length, 1);\t// Number\r\n\t\t},\r\n\r\n\t\tmin: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the min value in the passed array.\r\n\t\t\treturn Math.min.apply(null, a);\t\t// Number\r\n\t\t},\r\n\r\n\t\tmax: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the max value in the passed array.\r\n\t\t\treturn Math.max.apply(null, a);\t\t// Number\r\n\t\t},\r\n\r\n\t\tmedian: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the value closest to the middle from a sorted version of the passed array.\r\n\t\t\tvar t = a.slice(0).sort(function(a, b){ return a - b; });\r\n\t\t\treturn (t[Math.floor(a.length/2)] + t[Math.ceil(a.length/2)])/2; // Number\r\n\t\t},\r\n\r\n\t\tmode: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the mode from the passed array (number that appears the most often).\r\n\t\t\t//\t\tThis is not the most efficient method, since it requires a double scan, but\r\n\t\t\t//\t\tis ensures accuracy.\r\n\t\t\tvar o = {}, r = 0, m = Number.MIN_VALUE;\r\n\t\t\tdojo.forEach(a, function(v){\r\n\t\t\t\t(o[v]!==undefined)?o[v]++:o[v]=1;\r\n\t\t\t});\r\n\r\n\t\t\t// we did the lookup map because we need the number that appears the most.\r\n\t\t\tfor(var p in o){\r\n\t\t\t\tif(m < o[p]){\r\n\t\t\t\t\tm = o[p], r = p;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\t// Number\r\n\t\t},\r\n\r\n\t\tsum: function(/* Number[] */a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the sum of all the numbers in the passed array.  Does\r\n\t\t\t//\t\tnot check to make sure values within a are NaN (should simply\r\n\t\t\t//\t\treturn NaN).\r\n\t\t\tvar sum = 0;\r\n\t\t\tdojo.forEach(a, function(n){\r\n\t\t\t\tsum += n;\r\n\t\t\t});\r\n\t\t\treturn sum;\t// Number\r\n\t\t},\r\n\r\n\t\tapproxLin: function(a, pos){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a linearly approximated value from an array using\r\n\t\t\t//\t\ta normalized float position value.\r\n\t\t\t// a: Number[]\r\n\t\t\t//\t\ta sorted numeric array to be used for the approximation.\r\n\t\t\t// pos: Number\r\n\t\t\t//\t\ta position number from 0 to 1. If outside of this range it\r\n\t\t\t//\t\twill be clamped.\r\n\t\t\t// returns: Number\r\n\t\t\tvar p = pos * (a.length - 1), t = Math.ceil(p), f = t - 1;\r\n\t\t\tif(f < 0){ return a[0]; }\r\n\t\t\tif(t >= a.length){ return a[a.length - 1]; }\r\n\t\t\treturn a[f] * (t - p) + a[t] * (p - f);\t// Number\r\n\t\t},\r\n\r\n\t\tsummary: function(a, alreadySorted){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a non-parametric collection of summary statistics:\r\n\t\t\t//\t\tthe classic five-number summary extended to the Bowley's\r\n\t\t\t//\t\tseven-figure summary.\r\n\t\t\t// a: Number[]\r\n\t\t\t//\t\ta numeric array to be appraised.\r\n\t\t\t// alreadySorted: Boolean?\r\n\t\t\t//\t\ta Boolean flag to indicated that the array is already sorted.\r\n\t\t\t//\t\tThis is an optional flag purely to improve the performance.\r\n\t\t\t//\t\tIf skipped, the array will be assumed unsorted.\r\n\t\t\t// returns: Object\r\n\t\t\tif(!alreadySorted){\r\n\t\t\t\ta = a.slice(0);\t\t\t\t\t\t\t\t// copy the array\r\n\t\t\t\ta.sort(function(a, b){ return a - b; });\t// sort it properly\r\n\t\t\t}\r\n\t\t\tvar\tl = st.approxLin,\r\n\t\t\t\tresult = {\r\n\t\t\t\t\t// the five-number summary\r\n\t\t\t\t\tmin:\ta[0],\t\t\t\t// minimum\r\n\t\t\t\t\tp25:\tl(a, 0.25),\t\t\t// lower quartile\r\n\t\t\t\t\tmed:\tl(a, 0.5),\t\t\t// median\r\n\t\t\t\t\tp75:\tl(a, 0.75),\t\t\t// upper quartile\r\n\t\t\t\t\tmax:\ta[a.length - 1],\t// maximum\r\n\t\t\t\t\t// extended to the Bowley's seven-figure summary\r\n\t\t\t\t\tp10:\tl(a, 0.1),\t\t\t// first decile\r\n\t\t\t\t\tp90:\tl(a, 0.9)\t\t\t// last decile\r\n\t\t\t\t};\r\n\t\t\treturn result;\t// Object\r\n\t\t}\r\n\t});\r\n\r\n\treturn dojox.math.stats;\r\n});\r\n"]}