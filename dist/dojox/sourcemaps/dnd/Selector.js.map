{"version":3,"sources":["dnd/Selector.js"],"names":["define","dojo","dojox","declare","dnd","Selector","conservative","isSelected","node","id","isString","this","getItem","selected","selectNode","add","selectNone","_removeAnchor","anchor","byId","_addItemClass","selection","deselectNode","_removeItemClass","selectByBBox","left","top","right","bottom","forInItems","data","_isBoundedByBox","_conservativeBBLogic","_liberalBBLogic","shift","toNext","selectedNodes","getSelectedNodes","length","_getNodeId","nodeId","allNodes","getAllNodes","newId","i","l","j","Math","min","max","t","c","coords","x","w","y","h","tlx","tly","brx","bry","position","leftGreater","bottomGreater","nodeTlx","nodeTly","nodeBrx","nodeBry"],"mappings":"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","file":"../../dnd/Selector.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojo/dnd/Selector\"], function(dojo, dojox) {\r\n\r\n\treturn dojo.declare('dojox.dnd.Selector', dojo.dnd.Selector, {\r\n\r\n\t\t\tconservative: true,\r\n\t\t\t\r\n\t\t\tisSelected: function(node) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tchecks if node is selected\r\n\t\t\t\t// node: String|DomNode\r\n\t\t\t\t//\t\tNode to check (id or DOM Node)\r\n\t\t\t\tvar id = dojo.isString(node) ? node : node.id,\r\n\t\t\t\t\titem = this.getItem(id);\r\n\t\t\t\treturn item && this.selected[id];\t// Boolean\r\n\t\t\t},\r\n\r\n\t\t\tselectNode: function(node, add) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tselects a node\r\n\t\t\t\t// node: String|DomNode\r\n\t\t\t\t//\t\tNode to select (id or DOM Node)\r\n\t\t\t\t// add: Boolean?\r\n\t\t\t\t//\t\tIf true, node is added to selection, otherwise current\r\n\t\t\t\t//\t\tselection is removed, and node will be the only selection.\r\n\t\t\t\tif (!add) {\r\n\t\t\t\t\tthis.selectNone();\r\n\t\t\t\t}\r\n\t\t\t\tvar id = dojo.isString(node) ? node : node.id,\r\n\t\t\t\t\titem = this.getItem(id);\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tthis._removeAnchor();\r\n\t\t\t\t\tthis.anchor = dojo.byId(node);\r\n\t\t\t\t\tthis._addItemClass(this.anchor, 'Anchor');\r\n\t\t\t\t\tthis.selection[id] = 1;\r\n\t\t\t\t\tthis._addItemClass(this.anchor, 'Selected');\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\t// self\r\n\t\t\t},\r\n\r\n\t\t\tdeselectNode: function(node) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tdeselects a node\r\n\t\t\t\t// node: String|DomNode\r\n\t\t\t\t//\t\tNode to deselect (id or DOM Node)\r\n\t\t\t\tvar id = dojo.isString(node) ? node : node.id,\r\n\t\t\t\t\titem = this.getItem(id);\r\n\t\t\t\tif (item && this.selection[id]) {\r\n\t\t\t\t\tif (this.anchor === dojo.byId(node)) {\r\n\t\t\t\t\t\tthis._removeAnchor();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this.selection[id];\r\n\t\t\t\t\tthis._removeItemClass(this.anchor, 'Selected');\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\t// self\r\n\t\t\t},\r\n\r\n\t\t\tselectByBBox: function(left, top, right, bottom, add) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tselects nodes by bounding box\r\n\t\t\t\t// left: Number\r\n\t\t\t\t//\t\tLeft coordinate of the bounding box\r\n\t\t\t\t// top: Number\r\n\t\t\t\t//\t\tTop coordinate of the bounding box\r\n\t\t\t\t// right: Number\r\n\t\t\t\t//\t\tRight coordinate of the bounding box\r\n\t\t\t\t// bottom: Number\r\n\t\t\t\t//\t\tBottom coordinate of the bounding box\r\n\t\t\t\t// add: Boolean?\r\n\t\t\t\t//\t\tIf true, node is added to selection, otherwise current\r\n\t\t\t\t//\t\tselection is removed, and node will be the only selection.\r\n\r\n\t\t\t\t// user has drawn a bounding box ... time to see whether any dom nodes\r\n\t\t\t\t// in this container satisfy the bounding box range.\r\n\t\t\t\tif (!add) {\r\n\t\t\t\t\tthis.selectNone();\r\n\t\t\t\t}\r\n\t\t\t\tthis.forInItems(function(data, id) {\r\n\t\t\t\t\tvar node = dojo.byId(id);\r\n\t\t\t\t\tif (node && this._isBoundedByBox(node, left, top, right, bottom)) {\r\n\t\t\t\t\t\tthis.selectNode(id, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t\treturn this;\t// self\r\n\t\t\t},\r\n\r\n\t\t\t_isBoundedByBox: function(node, left, top, right, bottom) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tfigures out whether certain coodinates bound a particular\r\n\t\t\t\t//\t\tdom node.\r\n\t\t\t\t// node: String|DomNode\r\n\t\t\t\t//\t\tNode to check (id or DOM Node)\r\n\t\t\t\t// left: Number\r\n\t\t\t\t//\t\tLeft coordinate of the bounding box\r\n\t\t\t\t// top: Number\r\n\t\t\t\t//\t\tTop coordinate of the bounding box\r\n\t\t\t\t// right: Number\r\n\t\t\t\t//\t\tRight coordinate of the bounding box\r\n\t\t\t\t// bottom: Number\r\n\t\t\t\t//\t\tBottom coordinate of the bounding box\r\n\t\t\t\treturn this.conservative ? this._conservativeBBLogic(node, left, top, right, bottom) : this._liberalBBLogic(node, left, top, right, bottom);\r\n\t\t\t},\r\n\r\n\t\t\tshift: function(toNext, add) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tshifts the currently selected dnd item forwards and backwards.\r\n\t\t\t\t//\t\tOne possible use would be to allow a user select different\r\n\t\t\t\t//\t\tdnd items using the right and left keys.\r\n\t\t\t\t// toNext: Boolean\r\n\t\t\t\t//\t\tIf true, we select the next node, otherwise the previous one.\r\n\t\t\t\t// add: Boolean?\r\n\t\t\t\t//\t\tIf true, add to selection, otherwise current selection is\r\n\t\t\t\t//\t\tremoved before adding any nodes.\r\n\t\t\t\tvar selectedNodes = this.getSelectedNodes();\r\n\t\t\t\tif (selectedNodes && selectedNodes.length) {\r\n\t\t\t\t\t// only delegate to selectNode if at least one node is selected.\r\n\t\t\t\t\t// If multiple nodes are selected assume that we go with\r\n\t\t\t\t\t// the last selected node.\r\n\t\t\t\t\tthis.selectNode(this._getNodeId(selectedNodes[selectedNodes.length - 1].id, toNext), add);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_getNodeId: function(nodeId, toNext) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tfinds a next/previous node in relation to nodeId\r\n\t\t\t\t// nodeId: String\r\n\t\t\t\t//\t\tthe id of the node to use as the base node\r\n\t\t\t\t// toNext: Boolean\r\n\t\t\t\t//\t\tIf true, we select the next node, otherwise the previous one.\r\n\t\t\t\tvar allNodes = this.getAllNodes(), newId = nodeId;\r\n\t\t\t\tfor (var i = 0, l = allNodes.length; i < l; ++i) {\r\n\t\t\t\t\tif (allNodes[i].id == nodeId) {\r\n\t\t\t\t\t\t// have a match ... make sure we don't go outside\r\n\t\t\t\t\t\tvar j = Math.min(l - 1, Math.max(0, i + (toNext ? 1 : -1)));\r\n\t\t\t\t\t\tif (i != j) {\r\n\t\t\t\t\t\t\t// we should be fine to go with the id the user has requested.\r\n\t\t\t\t\t\t\tnewId = allNodes[j].id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// if we don't get a match, the newId defaults to the currently selected node\r\n\t\t\t\treturn newId;\r\n\t\t\t},\r\n\r\n\t\t\t_conservativeBBLogic: function(node, left, top, right, bottom) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tlogic which determines whether a node is bounded by the\r\n\t\t\t\t//\t\tleft,top,right,bottom parameters. This function returns true\r\n\t\t\t\t//\t\tonly if the coordinates of the node parameter are fully\r\n\t\t\t\t//\t\tencompassed by the box determined by the left, top, right, bottom parameters.\r\n\t\t\t\tvar c = dojo.coords(node), t;\r\n\t\t\t\t// normalize input\r\n\t\t\t\tif (left > right) {\r\n\t\t\t\t\tt = left;\r\n\t\t\t\t\tleft = right;\r\n\t\t\t\t\tright = t;\r\n\t\t\t\t}\r\n\t\t\t\tif (top > bottom) {\r\n\t\t\t\t\tt = top;\r\n\t\t\t\t\ttop = bottom;\r\n\t\t\t\t\tbottom = t;\r\n\t\t\t\t}\r\n\t\t\t\treturn c.x >= left && c.x + c.w <= right && c.y >= top && c.y + c.h <= bottom;\t// Boolean\r\n\t\t\t},\r\n\r\n\t\t\t_liberalBBLogic: function(node, left, top, right, bottom) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tlogic which determines whether a node is bounded by the\r\n\t\t\t\t//\t\tleft,top,right,bottom parameters. Allows for the case where\r\n\t\t\t\t//\t\tany section of the box determined by the left,top,right,bottom parameters\r\n\t\t\t\t//\t\toverlapping the coordinates of the node parameter constitutes a true\r\n\t\t\t\t//\t\treturn value\r\n\t\t\t\tvar c = dojo.position(node), xBounded, yBounded, tlx, tly, brx, bry, leftGreater = false, bottomGreater = false,\r\n\t\t\t\tnodeTlx = c.x, nodeTly = c.y, nodeBrx = c.x + c.w, nodeBry = c.y + c.h;\r\n\t\t\t\t// tlx, tly represents the x,y coordinates for the top left of the bounding box\r\n\t\t\t\t// brx, bry represents the x,y coordinates for the bottom right of the bounding box\r\n\t\t\t\t// nodeTlx, nodeTly represents the x,y coordinates for the top left of the dom node\r\n\t\t\t\t// nodeBrx, nodeBry represents the x,y coordinates for the bottom right of the dom node\r\n\t\t\t\tif (left < right) {\r\n\t\t\t\t\ttlx = left;\r\n\t\t\t\t\ttly = top;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tleftGreater = true;\r\n\t\t\t\t\ttlx = right;\r\n\t\t\t\t\ttly = bottom;\r\n\t\t\t\t}\r\n\t\t\t\tif (top < bottom) {\r\n\t\t\t\t\tbottomGreater = true;\r\n\t\t\t\t\tbrx = right;\r\n\t\t\t\t\tbry = bottom;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbrx = left;\r\n\t\t\t\t\tbry = top;\r\n\t\t\t\t\ttlx = right;\r\n\t\t\t\t\ttly = bottom;\r\n\t\t\t\t}\r\n\t\t\t\tif (leftGreater && bottomGreater) {\r\n\t\t\t\t\t// accommodate for the case where the user is drawing from top down and from right to left.\r\n\t\t\t\t\tbrx = left;\r\n\t\t\t\t\tbry = bottom;\r\n\t\t\t\t\ttlx = right;\r\n\t\t\t\t\ttly = top;\r\n\t\t\t\t}\r\n\t\t\t\txBounded = (nodeTlx >= tlx || nodeBrx <= brx) && (tlx <= nodeBrx && brx >= nodeTlx) || (nodeTlx <= tlx && nodeBrx >= brx);\r\n\t\t\t\tyBounded = (tly <= nodeBry && bry >= nodeTly) || (nodeBry >= bry && nodeTly <= bry);\r\n\t\t\t\treturn xBounded && yBounded;\t// Boolean\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n});"]}