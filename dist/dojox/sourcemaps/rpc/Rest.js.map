{"version":3,"sources":["rpc/Rest.js"],"names":["define","dojo","dojox","drr","index","deferred","service","range","id","addCallback","result","ioArgs","xhr","getResponseHeader","fullLength","match","parseInt","getObject","rpc","transportRegistry","register","str","getExecutor","func","method","svc","Rest","name","contentType","_smd","args","request","_getRequest","url","target","data","start","count","headers","Range","Infinity","path","isJson","schema","getRequest","makeRest","content","_change","_get","_schema","cache","serialize","json","ref","toJson","isObject","objectToQuery","sort","queryStr","i","length","descending","encodeURIComponent","attribute","handleAs","sync","_sync","Accept","servicePath","_index","_timeStamps","toUpperCase","xhrGet"],"mappings":"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","file":"../../rpc/Rest.js","sourcesContent":["define(\"dojox/rpc/Rest\", [\"dojo\", \"dojox\"], function(dojo, dojox) {\r\n// Note: This doesn't require dojox.rpc.Service, and if you want it you must require it\r\n// yourself, and you must load it prior to dojox.rpc.Rest.\r\n\r\n  dojo.getObject(\"rpc.Rest\", true, dojox);\r\n\r\n\tif(dojox.rpc && dojox.rpc.transportRegistry){\r\n\t\t// register it as an RPC service if the registry is available\r\n\t\tdojox.rpc.transportRegistry.register(\r\n\t\t\t\"REST\",\r\n\t\t\tfunction(str){return str == \"REST\";},\r\n\t\t\t{\r\n\t\t\t\tgetExecutor : function(func,method,svc){\r\n\t\t\t\t\treturn new dojox.rpc.Rest(\r\n\t\t\t\t\t\tmethod.name,\r\n\t\t\t\t\t\t(method.contentType||svc._smd.contentType||\"\").match(/json|javascript/), // isJson\r\n\t\t\t\t\t\tnull,\r\n\t\t\t\t\t\tfunction(id, args){\r\n\t\t\t\t\t\t\tvar request = svc._getRequest(method,[id]);\r\n\t\t\t\t\t\t\trequest.url= request.target + (request.data ? '?'+  request.data : '');\r\n\t\t\t\t\t\t\tif(args && (args.start >= 0 || args.count >= 0)){\r\n\t\t\t\t\t\t\t\trequest.headers = request.headers || {};\r\n\t\t\t\t\t\t\t\trequest.headers.Range = \"items=\" + (args.start || '0') + '-' +\r\n\t\t\t\t\t\t\t\t\t((\"count\" in args && args.count != Infinity) ?\r\n\t\t\t\t\t\t\t\t\t\t(args.count + (args.start || 0) - 1) : '');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn request;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\tvar drr;\r\n\r\n\tfunction index(deferred, service, range, id){\r\n\t\tdeferred.addCallback(function(result){\r\n\t\t\tif(deferred.ioArgs.xhr && range){\r\n\t\t\t\t\t// try to record the total number of items from the range header\r\n\t\t\t\t\trange = deferred.ioArgs.xhr.getResponseHeader(\"Content-Range\");\r\n\t\t\t\t\tdeferred.fullLength = range && (range=range.match(/\\/(.*)/)) && parseInt(range[1]);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\treturn deferred;\r\n\t}\r\n\tdrr = dojox.rpc.Rest = function(/*String*/path, /*Boolean?*/isJson, /*Object?*/schema, /*Function?*/getRequest){\r\n\t\t// summary:\r\n\t\t//\t\tThis provides a HTTP REST service with full range REST verbs include PUT,POST, and DELETE.\r\n\t\t// description:\r\n\t\t//\t\tA normal GET query is done by using the service directly:\r\n\t\t//\t\t| var restService = dojox.rpc.Rest(\"Project\");\r\n\t\t//\t\t| restService(\"4\");\r\n\t\t//\t\tThis will do a GET for the URL \"/Project/4\".\r\n\t\t//\t\t| restService.put(\"4\",\"new content\");\r\n\t\t//\t\tThis will do a PUT to the URL \"/Project/4\" with the content of \"new content\".\r\n\t\t//\t\tYou can also use the SMD service to generate a REST service:\r\n\t\t//\t\t| var services = dojox.rpc.Service({services: {myRestService: {transport: \"REST\",...\r\n\t\t//\t\t| services.myRestService(\"parameters\");\r\n\t\t//\r\n\t\t//\t\tThe modifying methods can be called as sub-methods of the rest service method like:\r\n\t\t//\t\t| services.myRestService.put(\"parameters\",\"data to put in resource\");\r\n\t\t//\t\t| services.myRestService.post(\"parameters\",\"data to post to the resource\");\r\n\t\t//\t\t| services.myRestService['delete'](\"parameters\");\r\n\r\n\t\tvar service;\r\n\t\t// it should be in the form /Table/\r\n\t\tservice = function(id, args){\r\n\t\t\treturn drr._get(service, id, args);\r\n\t\t};\r\n\t\tservice.isJson = isJson;\r\n\t\tservice._schema = schema;\r\n\t\t// cache:\r\n\t\t//\t\tThis is an object that provides indexing service\r\n\t\t//\t\tThis can be overriden to take advantage of more complex referencing/indexing\r\n\t\t//\t\tschemes\r\n\t\tservice.cache = {\r\n\t\t\tserialize: isJson ? ((dojox.json && dojox.json.ref) || dojo).toJson : function(result){\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// the default XHR args creator:\r\n\t\tservice._getRequest = getRequest || function(id, args){\r\n\t\t\tif(dojo.isObject(id)){\r\n\t\t\t\tid = dojo.objectToQuery(id);\r\n\t\t\t\tid = id ? \"?\" + id: \"\";\r\n\t\t\t}\r\n\t\t\tif(args && args.sort && !args.queryStr){\r\n\t\t\t\tid += (id ? \"&\" : \"?\") + \"sort(\"\r\n\t\t\t\tfor(var i = 0; i<args.sort.length; i++){\r\n\t\t\t\t\tvar sort = args.sort[i];\r\n\t\t\t\t\tid += (i > 0 ? \",\" : \"\") + (sort.descending ? '-' : '+') + encodeURIComponent(sort.attribute);\r\n\t\t\t\t}\r\n\t\t\t\tid += \")\";\r\n\t\t\t}\r\n\t\t\tvar request = {\r\n\t\t\t\turl: path + (id == null ? \"\" : id),\r\n\t\t\t\thandleAs: isJson ? 'json' : 'text',\r\n\t\t\t\tcontentType: isJson ? 'application/json' : 'text/plain',\r\n\t\t\t\tsync: dojox.rpc._sync,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAccept: isJson ? 'application/json,application/javascript' : '*/*'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif(args && (args.start >= 0 || args.count >= 0)){\r\n\t\t\t\trequest.headers.Range = \"items=\" + (args.start || '0') + '-' +\r\n\t\t\t\t\t((\"count\" in args && args.count != Infinity) ?\r\n\t\t\t\t\t\t(args.count + (args.start || 0) - 1) : '');\r\n\t\t\t}\r\n\t\t\tdojox.rpc._sync = false;\r\n\t\t\treturn request;\r\n\t\t};\r\n\t\t// each calls the event handler\r\n\t\tfunction makeRest(name){\r\n\t\t\tservice[name] = function(id,content){\r\n\t\t\t\treturn drr._change(name,service,id,content); // the last parameter is to let the OfflineRest know where to store the item\r\n\t\t\t};\r\n\t\t}\r\n\t\tmakeRest('put');\r\n\t\tmakeRest('post');\r\n\t\tmakeRest('delete');\r\n\t\t// record the REST services for later lookup\r\n\t\tservice.servicePath = path;\r\n\t\treturn service;\r\n\t};\r\n\r\n\tdrr._index={};// the map of all indexed objects that have gone through REST processing\r\n\tdrr._timeStamps={};\r\n\t// these do the actual requests\r\n\tdrr._change = function(method,service,id,content){\r\n\t\t// this is called to actually do the put, post, and delete\r\n\t\tvar request = service._getRequest(id);\r\n\t\trequest[method+\"Data\"] = content;\r\n\t\treturn index(dojo.xhr(method.toUpperCase(),request,true),service);\r\n\t};\r\n\r\n\tdrr._get= function(service,id, args){\r\n\t\targs = args || {};\r\n\t\t// this is called to actually do the get\r\n\t\treturn index(dojo.xhrGet(service._getRequest(id, args)), service, (args.start >= 0 || args.count >= 0), id);\r\n\t};\r\n\r\n\treturn drr;\r\n});\r\n"]}