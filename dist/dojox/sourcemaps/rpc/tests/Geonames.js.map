{"version":3,"sources":["rpc/tests/Geonames.js"],"names":["dojo","provide","require","dojox","rpc","tests","service","Service","moduleUrl","TEST_METHOD_TIMEOUT","TEST_METHOD_LONG_TIMEOUT","_testMethod","method","m","d","doh","Deferred","name","parameters","addCallback","this","result","debugTest","console","log","toJson","testType","expectedResult","callback","errback","Error","register","timeout","runTest","north","south","east","west","geonames","fcodeName","countrycode","fcl","fclName","wikipedia","lng","fcode","geonameId","lat","population","date","maxRows","earthquakes","eqid","magnitude","src","datetime","depth","ICAO","neighbourhood","adminName2","adminCode2","adminCode1","countryName","countryCode","city","adminName1","distance","codes","code","type","q","summary","title","wikipediaUrl","elevation","feature","lang","dstOffset","gmtOffset","timezoneId","postalcode","placename"],"mappings":"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","file":"../../../rpc/tests/Geonames.js","sourcesContent":["dojo.provide(\"dojox.rpc.tests.Geonames\");\r\ndojo.require(\"dojo.io.script\");\r\ndojo.require(\"dojox.rpc.Service\");\r\n\r\ndojox.rpc.tests.service = new dojox.rpc.Service(dojo.moduleUrl(\"dojox.rpc.SMDLibrary\", \"geonames.smd\"));\r\n\r\ndojox.rpc.tests.TEST_METHOD_TIMEOUT = 20000;\r\ndojox.rpc.tests.TEST_METHOD_LONG_TIMEOUT = 30000;\r\n\r\ndojox.rpc.tests._testMethod = function(method){\r\n\r\n        return function(m){\r\n                var d = new doh.Deferred();\r\n\r\n                if (method.name && method.parameters) {\r\n                        var def = dojox.rpc.tests.service[method.name](method.parameters);\r\n                        def.addCallback(this, function(result){\r\n\t\t\t\tif (method.debugTest) {\r\n\t\t\t\t\tconsole.log(\"Results: \", dojo.toJson(result));\r\n\t\t\t\t}\r\n\t\t\t\tvar testType = method.testType || \"compare\";\r\n\t\t\t\tswitch(testType){\r\n\t\t\t\t\tcase \"compare\":\r\n\t\t\t\t\t\tconsole.log(\"Comparison Test\");\r\n\t\t                                if (dojo.toJson(result)==method.expectedResult){\r\n                                        \t\td.callback(true);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\td.errback(new Error(\"Unexpected Return Value in comparison: \", result));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"result\":\r\n\t\t\t\t\t\tconsole.log(\"Result Test\");\r\n\t\t\t\t\t\tif (result && dojo.toJson(result)){\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\td.errback(new Error(\"Unexpected Return Value, no result or not valid json: \", result));\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\td.errback(new Error(\"Unknown test type\"));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n                        });\r\n                }\r\n\r\n                return d;\r\n        }\r\n};\r\n\r\ndoh.register(\"dojox.rpc.tests.geonames\",\r\n\t[\r\n\t\t{\r\n\t\t\tname: \"#1, getCities()\",\r\n\t\t\ttimeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n\t\t\trunTest: dojox.rpc.tests._testMethod({\r\n\t\t\t\tname: \"getCities\",\r\n                                parameters: {north: 44.1, south:-9.9, east: -22.4, west: 55.2},\r\n                                expectedResult: dojo.toJson({\"geonames\":[{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"MX\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Mexico City\",\"wikipedia\":\"en.wikipedia.org/wiki/Mexico_City\",\"lng\":-99.1386111,\"fcode\":\"PPLC\",\"geonameId\":3530597,\"lat\":19.4341667,\"population\":11285654},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"PH\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Manila\",\"wikipedia\":\"\",\"lng\":120.9822222,\"fcode\":\"PPLC\",\"geonameId\":1701668,\"lat\":14.6041667,\"population\":10444527},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"BD\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Dhaka\",\"wikipedia\":\"en.wikipedia.org/wiki/Dhaka\",\"lng\":90.4086111,\"fcode\":\"PPLC\",\"geonameId\":1185241,\"lat\":23.7230556,\"population\":10356500},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"KR\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Seoul\",\"wikipedia\":\"en.wikipedia.org/wiki/Seoul\",\"lng\":126.9997222,\"fcode\":\"PPLC\",\"geonameId\":1835848,\"lat\":37.5663889,\"population\":10349312},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"ID\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Jakarta\",\"wikipedia\":\"en.wikipedia.org/wiki/Jakarta\",\"lng\":106.8294444,\"fcode\":\"PPLC\",\"geonameId\":1642911,\"lat\":-6.1744444,\"population\":8540121},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"JP\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Tokyo\",\"wikipedia\":\"en.wikipedia.org/wiki/Tokyo\",\"lng\":139.7513889,\"fcode\":\"PPLC\",\"geonameId\":1850147,\"lat\":35.685,\"population\":8336599},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"TW\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Taipei\",\"wikipedia\":\"en.wikipedia.org/wiki/Taipei\",\"lng\":121.525,\"fcode\":\"PPLC\",\"geonameId\":1668341,\"lat\":25.0391667,\"population\":7871900},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"CN\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Beijing\",\"wikipedia\":\"en.wikipedia.org/wiki/Beijing\",\"lng\":116.3883333,\"fcode\":\"PPLC\",\"geonameId\":1816670,\"lat\":39.9288889,\"population\":7480601},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"CO\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Bogotá\",\"wikipedia\":\"en.wikipedia.org/wiki/Bogot%C3%A1\",\"lng\":-74.0833333,\"fcode\":\"PPLC\",\"geonameId\":3688689,\"lat\":4.6,\"population\":7102602},{\"fcodeName\":\"capital of a political entity\",\"countrycode\":\"HK\",\"fcl\":\"P\",\"fclName\":\"city, village,...\",\"name\":\"Hong Kong\",\"wikipedia\":\"\",\"lng\":114.15007352829,\"fcode\":\"PPLC\",\"geonameId\":1819729,\"lat\":22.2840136009625,\"population\":7012738}]})\r\n\t\t\t})\r\n\t\t},\r\n                {\r\n                        name: \"#2, getQuakes()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getQuakes\",\r\n                                parameters: {north: 44.1, south:-9.9, east: -22.4, west: 55.2, \"date\": \"2007-07-31\", maxRows: 1},\r\n                                expectedResult: dojo.toJson({\"earthquakes\":[{\"eqid\":\"2007flce\",\"magnitude\":6.1,\"lng\":-17.7996,\"src\":\"us\",\"datetime\":\"2007-07-31 22:55:31\",\"depth\":10,\"lat\":-0.095}]})\r\n                        })\r\n                },\r\n                {\r\n                        name: \"#3, getWeather()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getWeather\",\r\n\t\t\t\ttestType:'result',\r\n                                parameters: {north: 44.1, south:-9.9, east: -22.4, west: 55.2, \"date\": \"2007-07-31\", maxRows: 1}\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#4, getWeatherByICAO()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getWeatherByICAO\",\r\n\t\t\t\ttestType:'result',\r\n                                parameters: {ICAO:\"LSZH\"}\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#5, getWeatherByCoords()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getWeatherByCoords\",\r\n\t\t\t\ttestType:'result',\r\n                                parameters: {lat:43,lng:-2}\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#6, getChildren()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getChildren\",\r\n                                parameters: {geonameId:3175395},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#7, getHeirarchy()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getHierarchy\",\r\n                                parameters: {geonameId:3175395},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n                {\r\n                        name: \"#8, getNeighbours()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getNeighbours\",\r\n                                parameters: {geonameId:3175395},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#9, getNeighbourhood()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getNeighbourhood\",\r\n                                parameters: {lat:40.78343, lng:-73.96625},\r\n\t\t\t\texpectedResult: dojo.toJson({\"neighbourhood\":{\"adminName2\":\"New York County\",\"adminCode2\":\"061\",\"adminCode1\":\"NY\",\"countryName\":\"United States\",\"name\":\"Central Park\",\"countryCode\":\"US\",\"city\":\"New York City-Manhattan\",\"adminName1\":\"New York\"}})\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#10, getSiblings()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getSiblings\",\r\n                                parameters: {geonameId:3175395},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n\r\n                {\r\n                        name: \"#11, getCountryCode()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getCountryCode\",\r\n                                parameters:{lat:40.78343, lng:-73.96625},\r\n\t\t\t\texpectedResult: dojo.toJson({\"distance\":0,\"countryName\":\"United States\",\"countryCode\":\"US\"})\r\n                        })\r\n                },\r\n                {\r\n                        name: \"#12, getCountrySubdivision()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getCountrySubdivision\",\r\n                                parameters:{lat:40.78343, lng:-73.96625},\r\n\t\t\t\texpectedResult: dojo.toJson({\"distance\":0,\"adminCode1\":\"NY\",\"countryName\":\"United States\",\"countryCode\":\"US\",\"codes\":[{\"code\":\"36\",\"type\":\"FIPS10-4\"},{\"code\":\"NY\",\"type\":\"ISO3166-2\"}],\"adminName1\":\"New York\"})\r\n                        })\r\n                },\r\n                {\r\n                        name: \"#13, getWikipediaBoundingBox()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getWikipediaBoundingBox\",\r\n                                parameters:{north: \"44.1\", \"south\": \"-9.9\", \"east\": \"-22.4\", \"west\": \"55.2\", \"maxRows\": \"1\"},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n                 {\r\n                        name: \"#14, searchWikipedia()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"searchWikipedia\",\r\n                                parameters:{q: \"dojo\", maxRows: 1},\r\n\t\t\t\texpectedResult: dojo.toJson({\"geonames\":[{\"summary\":\"which is an umbrella organisation of various national, as well as smaller, aikido organisations. Although the name strictly refers only to the main training hall (''dojo''), it is often used by extension to refer to the Aikikai organisation itself. The dojo was founded by Morihei Ueshiba in 1931 under the name ''Kobukan'' (...)\",\"title\":\"Aikikai Hombu Dojo\",\"wikipediaUrl\":\"en.wikipedia.org/wiki/Aikikai_Hombu_Dojo\",\"elevation\":0,\"countryCode\":\"JP\",\"lng\":139.714305555556,\"feature\":\"landmark\",\"lang\":\"en\",\"lat\":35.6991388888889,\"population\":0}]})\r\n                        })\r\n                },\r\n                {\r\n                        name: \"#15, getTimezone()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"getTimezone\",\r\n                                parameters:{lat:40.78343,lng:-73.96625},\r\n\t\t\t\texpectedResult: dojo.toJson({\"countryName\":\"United States\",\"dstOffset\":-4,\"countryCode\":\"US\",\"gmtOffset\":-5,\"lng\":-73.96625,\"timezoneId\":\"America/New_York\",\"lat\":40.78343})\r\n                        })\r\n                },\r\n \r\n                {\r\n                        name: \"#16, search()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"search\",\r\n                                parameters:{q: \"dojo\", maxRows: 1},\r\n\t\t\t\ttestType: 'result'\r\n                        })\r\n                },\r\n\r\n                 {\r\n                        name: \"#17, postalCodeLookup()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"postcalCodeLookup\",\r\n\t\t\t\tdebugTest: true,\r\n                                parameters:{postalcode: \"24060\"},\r\n\t\t\t\texpectedResult: dojo.toJson({})\r\n                        })\r\n                },\r\n \r\n                {\r\n                        name: \"#18, postalCodeSearch()\",\r\n                        timeout: dojox.rpc.tests.TEST_METHOD_TIMEOUT,\r\n                        runTest: dojox.rpc.tests._testMethod({\r\n                                name: \"postalCodeSearch\",\r\n                                parameters:{placename: \"blacksburg\"},\r\n\t\t\t\texpectedResult: dojo.toJson({})\r\n                        })\r\n                }\r\n\t]\r\n);\r\n"]}