{"version":3,"sources":["rpc/JsonRPC.js"],"names":["define","dojo","dojox","Service","RequestError","jsonRpcEnvelope","version","serialize","smd","method","data","options","d","id","this","_requestId","name","params","jsonrpc","toJson","handleAs","contentType","transport","deserialize","obj","fromJson","responseText","error","e","Error","message","_rpcErrorObject","result","rpc","envelopeRegistry","register","str","mixin","namedParams"],"mappings":";;;;;;;AAAAA,OAAO,qBAAsB,OAAQ,QAAS,oBAAqB,4BAA6B,SAASC,EAAMC,EAAOC,EAASC,GAE9H,SAASC,EAAgBC,GACxB,OACCC,UAAW,SAASC,EAAKC,EAAQC,EAAMC,GAItC,IAAIC,GACHC,GAAIC,KAAKC,aACTN,OAAQA,EAAOO,KACfC,OAAQP,GAKT,OAHGJ,IACFM,EAAEM,QAAUZ,IAGZI,KAAMT,EAAKkB,OAAOP,GAClBQ,SAAS,OACTC,YAAa,mBACbC,UAAU,SAIZC,YAAa,SAASC,GAMrB,IALI,SAAWA,EAAIR,MACfQ,aAAepB,KAElBoB,EAAMvB,EAAKwB,SAASD,EAAIE,eAEtBF,EAAIG,MAAO,CACb,IAAIC,EAAI,IAAIC,MAAML,EAAIG,MAAMG,SAAWN,EAAIG,OAE3C,OADAC,EAAEG,gBAAkBP,EAAIG,MACjBC,EAER,OAAOJ,EAAIQ,SAId9B,EAAM+B,IAAIC,iBAAiBC,SAC1B,eACA,SAASC,GACR,MAAc,gBAAPA,GAERnC,EAAKoC,OAAOC,aAAY,GAAQjC,MAGjCH,EAAM+B,IAAIC,iBAAiBC,SAC1B,eACA,SAASC,GACR,MAAc,gBAAPA,GAERnC,EAAKoC,OAAOC,aAAY,GAAQjC,EAAgB","file":"../../rpc/JsonRPC.js","sourcesContent":["define(\"dojox/rpc/JsonRPC\", [\"dojo\", \"dojox\", \"dojox/rpc/Service\", \"dojo/errors/RequestError\"], function(dojo, dojox, Service, RequestError) {\r\n\r\n\tfunction jsonRpcEnvelope(version){\r\n\t\treturn {\r\n\t\t\tserialize: function(smd, method, data, options){\r\n\t\t\t\t//not converted to json it self. This  will be done, if\r\n\t\t\t\t//appropriate, at the transport level\r\n\t\r\n\t\t\t\tvar d = {\r\n\t\t\t\t\tid: this._requestId++,\r\n\t\t\t\t\tmethod: method.name,\r\n\t\t\t\t\tparams: data\r\n\t\t\t\t};\r\n\t\t\t\tif(version){\r\n\t\t\t\t\td.jsonrpc = version;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdata: dojo.toJson(d),\r\n\t\t\t\t\thandleAs:'json',\r\n\t\t\t\t\tcontentType: 'application/json',\r\n\t\t\t\t\ttransport:\"POST\"\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\r\n\t\t\tdeserialize: function(obj){\r\n\t\t\t\tif ('Error' == obj.name // old xhr\r\n\t\t\t\t\t|| obj instanceof RequestError // new xhr\r\n\t\t\t\t){\r\n\t\t\t\t\tobj = dojo.fromJson(obj.responseText);\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.error) {\r\n\t\t\t\t\tvar e = new Error(obj.error.message || obj.error);\r\n\t\t\t\t\te._rpcErrorObject = obj.error;\r\n\t\t\t\t\treturn e;\r\n\t\t\t\t}\r\n\t\t\t\treturn obj.result;\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\tdojox.rpc.envelopeRegistry.register(\r\n\t\t\"JSON-RPC-1.0\",\r\n\t\tfunction(str){\r\n\t\t\treturn str == \"JSON-RPC-1.0\";\r\n\t\t},\r\n\t\tdojo.mixin({namedParams:false}, jsonRpcEnvelope()) // 1.0 will only work with ordered params\r\n\t);\r\n\r\n\tdojox.rpc.envelopeRegistry.register(\r\n\t\t\"JSON-RPC-2.0\",\r\n\t\tfunction(str){\r\n\t\t\treturn str == \"JSON-RPC-2.0\";\r\n\t\t},\r\n\t\tdojo.mixin({namedParams:true }, jsonRpcEnvelope(\"2.0\")) // 2.0 supports named params\r\n\t);\r\n\r\n});\r\n"]}