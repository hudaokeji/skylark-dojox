{"version":3,"sources":["fx/split.js"],"names":["define","lang","dom","winUtil","htmlUtil","domGeom","domConstruct","domAttr","baseFx","coreFx","fxExt","easingUtil","connectUtil","dojoxFx","getObject","mixin","_split","args","rows","columns","duration","node","byId","pNode","parentNode","body","style","pCoords","position","x","y","coords","nodeHeight","nodeWidth","hBorder","vBorder","pieceHeight","Math","ceil","pieceWidth","container","create","tagName","padding","margin","border","top","left","height","width","background","overflow","crop","zIndex","animations","pieceHelper","ly","lx","piece","clone","pieceContents","pTop","pLeft","filter","remove","opacity","marginTop","marginLeft","appendChild","pieceAnimation","isArray","concat","push","anim","combine","connect","removeChild","onPlay","onEnd","explode","distance","random","fade","sync","abs","h","w","ps","startTop","parseInt","startLeft","delay","randomX","randomY","seed","max","unhide","distanceY","distanceX","distanceXY","sqrt","pow","endTop","endLeft","pieceSlide","animateProperty","easing","sinOut","circOut","beforeBegin","undefined","properties","start","end","pieceFade","fadeEasing","quadOut","converge","disintegrate","interval","randomDelay","uniformDelay","reverseOrder","sinIn","circIn","build","shear","colIsOdd","rowIsOdd","sinInOut","unShear","pinwheel","unPinwheel","blockFadeOut","blockFadeIn"],"mappings":"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","file":"../../fx/split.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/dom\", \"dojo/_base/window\", \"dojo/_base/html\", \"dojo/dom-geometry\", \r\n\t\t\"dojo/dom-construct\", \"dojo/dom-attr\", \"dojo/_base/fx\", \"dojo/fx\", \"./_base\", \"dojo/fx/easing\", \"dojo/_base/connect\"],\r\n\tfunction(lang, dom, winUtil, htmlUtil, domGeom, domConstruct, domAttr, baseFx, coreFx, fxExt, easingUtil, connectUtil){\r\nvar dojoxFx = lang.getObject(\"dojox.fx\");\r\nlang.mixin(dojoxFx,{\r\n\t_split: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSplit a node into rectangular pieces and animate them.\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that move independently.\r\n\t\t// args:\r\n\t\t//\t\t- args.crop: Boolean - If true, pieces will only be visible inside node's boundaries\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 3)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 3)\r\n\t\t//\t\t- args.pieceAnimation: Function(piece, x, y, coords) - Returns either the dojo.Animation\r\n\t\t//\t\t  or an array of dojo.Animation objects for the piece at location (x, y) in the node's grid;\r\n\t\t//\t\t  coords is the result of dojo.coords(args.node, true);\r\n\r\n\t\targs.rows = args.rows || 3;\r\n\t\targs.columns = args.columns || 3;\r\n\t\targs.duration = args.duration || 1000;\r\n\r\n\t\tvar node = args.node = dom.byId(args.node),\r\n\t\t\tparentNode = node.parentNode,\r\n\t\t\tpNode = parentNode,\r\n\t\t\tbody = winUtil.body(),\r\n\t\t\t_pos = \"position\"\r\n\t\t;\r\n\r\n\t\twhile(pNode && pNode != body && htmlUtil.style(pNode, _pos) == \"static\"){\r\n\t\t\tpNode = pNode.parentNode;\r\n\t\t}\r\n\r\n\t\tvar pCoords = pNode != body ? domGeom.position(pNode, true) : { x: 0, y: 0 },\r\n\t\t\tcoords = domGeom.position(node, true),\r\n\t\t\tnodeHeight = htmlUtil.style(node, \"height\"),\r\n\t\t\tnodeWidth = htmlUtil.style(node, \"width\"),\r\n\t\t\thBorder = htmlUtil.style(node, \"borderLeftWidth\") + htmlUtil.style(node, \"borderRightWidth\"),\r\n\t\t\tvBorder = htmlUtil.style(node, \"borderTopWidth\") + htmlUtil.style(node, \"borderBottomWidth\"),\r\n\t\t\tpieceHeight = Math.ceil(nodeHeight / args.rows),\r\n\t\t\tpieceWidth = Math.ceil(nodeWidth / args.columns),\r\n\t\t\tcontainer = domConstruct.create(node.tagName, {\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\tpadding: 0,\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\tborder:\"none\",\r\n\t\t\t\t\ttop: coords.y - pCoords.y + \"px\",\r\n\t\t\t\t\tleft: coords.x - pCoords.x + \"px\",\r\n\t\t\t\t\theight: nodeHeight + vBorder + \"px\",\r\n\t\t\t\t\twidth: nodeWidth + hBorder + \"px\",\r\n\t\t\t\t\tbackground: \"none\",\r\n\t\t\t\t\toverflow: args.crop ? \"hidden\" : \"visible\",\r\n\t\t\t\t\tzIndex: htmlUtil.style(node, \"zIndex\")\r\n\t\t\t\t}\r\n\t\t\t}, node, \"after\"),\r\n\t\t\tanimations = [],\r\n\t\t\tpieceHelper = domConstruct.create(node.tagName, {\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\tborder: \"none\",\r\n\t\t\t\t\tpadding: 0,\r\n\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\theight: pieceHeight + hBorder + \"px\",\r\n\t\t\t\t\twidth: pieceWidth + vBorder + \"px\",\r\n\t\t\t\t\toverflow: \"hidden\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t// Create the pieces and their animations\r\n\t\tfor(var y = 0, ly = args.rows; y < ly; y++){\r\n\t\t\tfor(var x = 0, lx = args.columns; x < lx; x++){\r\n\t\t\t\t// Create the piece\r\n\t\t\t\tvar piece = lang.clone(pieceHelper),\r\n\t\t\t\t\tpieceContents = lang.clone(node),\r\n\t\t\t\t\tpTop = y * pieceHeight,\r\n\t\t\t\t\tpLeft = x * pieceWidth\r\n\t\t\t\t;\r\n\r\n\t\t\t\t// IE hack\r\n\t\t\t\tpieceContents.style.filter = \"\";\r\n\r\n\t\t\t\t// removing the id attribute from the cloned nodes\r\n\t\t\t\tdomAttr.remove(pieceContents, \"id\");\r\n\r\n\t\t\t\thtmlUtil.style(piece, {\r\n\t\t\t\t\tborder: \"none\",\r\n\t\t\t\t\toverflow: \"hidden\",\r\n\t\t\t\t\ttop: pTop + \"px\",\r\n\t\t\t\t\tleft: pLeft + \"px\"\r\n\t\t\t\t});\r\n\t\t\t\thtmlUtil.style(pieceContents, {\r\n\t\t\t\t\tposition: \"static\",\r\n\t\t\t\t\topacity: \"1\",\r\n\t\t\t\t\tmarginTop: -pTop + \"px\",\r\n\t\t\t\t\tmarginLeft: -pLeft + \"px\"\r\n\t\t\t\t});\r\n\t\t\t\tpiece.appendChild(pieceContents);\r\n\t\t\t\tcontainer.appendChild(piece);\r\n\r\n\t\t\t\tvar pieceAnimation = args.pieceAnimation(piece, x, y, coords);\r\n\t\t\t\tif(lang.isArray(pieceAnimation)){\r\n\t\t\t\t\t// if pieceAnimation is an array, append its elements\r\n\t\t\t\t\tanimations = animations.concat(pieceAnimation);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// otherwise, append it\r\n\t\t\t\t\tanimations.push(pieceAnimation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar anim = coreFx.combine(animations);\r\n\t\tconnectUtil.connect(anim, \"onEnd\", anim, function(){\r\n\t\t\tcontainer.parentNode.removeChild(container);\r\n\t\t});\r\n\t\tif(args.onPlay){\r\n\t\t\tconnectUtil.connect(anim, \"onPlay\", anim, args.onPlay);\r\n\t\t}\r\n\t\tif(args.onEnd){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", anim, args.onEnd);\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\texplode: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tExplode a node into rectangular pieces\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that fly away from the center.\r\n\t\t// args:\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 3)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 3)\r\n\t\t//\t\t- args.random: Float - If set, pieces fly to random distances, for random durations,\r\n\t\t//\t\t\t\t\t\t\t   and in slightly random directions.  The value defines how much\r\n\t\t//\t\t\t\t\t\t\t   randomness is introduced.\r\n\t\t//\t\t- args.distance: Float - Multiplier for the distance the pieces fly (even when random)\r\n\t\t//\t\t- args.fade: Boolean - If true, pieces fade out while in motion (default is true)\r\n\t\t//\t\t- args.fadeEasing: Function - If args.fade is true, the fade animations use this easing function\r\n\t\t//\t\t- args.unhide: Boolean - If true, the animation is reversed\r\n\t\t//\t\t- args.sync: Boolean - If args.unhide is true, all the pieces converge at the same time\r\n\t\t//\t\t\t\t\t\t\t   (default is true)\r\n\r\n\t\tvar node = args.node = dom.byId(args.node);\r\n\t\targs.rows = args.rows || 3;\r\n\t\targs.columns = args.columns || 3;\r\n\t\targs.distance = args.distance || 1;\r\n\t\targs.duration = args.duration || 1000;\r\n\t\targs.random = args.random || 0;\r\n\t\tif(!args.fade){\r\n\t\t\targs.fade = true;\r\n\t\t}\r\n\t\tif(typeof args.sync == \"undefined\"){\r\n\t\t\targs.sync = true;\r\n\t\t}\r\n\t\targs.random = Math.abs(args.random);\r\n\r\n\t\t// Returns the animation object for each piece\r\n\t\targs.pieceAnimation = function(piece, x, y, coords){\r\n\t\t\tvar pieceHeight = coords.h / args.rows,\r\n\t\t\t\tpieceWidth = coords.w / args.columns,\r\n\t\t\t\tdistance = args.distance * 2,\r\n\t\t\t\tduration = args.duration,\r\n\t\t\t\tps = piece.style,\r\n\t\t\t\tstartTop = parseInt(ps.top),\r\n\t\t\t\tstartLeft = parseInt(ps.left),\r\n\t\t\t\tdelay = 0,\r\n\t\t\t\trandomX = 0,\r\n\t\t\t\trandomY = 0;\r\n\r\n\t\t\tif(args.random){\r\n\t\t\t\tvar seed = (Math.random() * args.random) + Math.max(1 - args.random, 0);\r\n\t\t\t\tdistance *= seed;\r\n\t\t\t\tduration *= seed;\r\n\t\t\t\t// To syncronize, give each piece an appropriate delay so they end together\r\n\t\t\t\tdelay = ((args.unhide && args.sync) || (!args.unhide && !args.sync)) ? (args.duration - duration) : 0;\r\n\t\t\t\t// Slightly randomize the direction of each piece\r\n\t\t\t\trandomX = Math.random() - 0.5;\r\n\t\t\t\trandomY = Math.random() - 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tvar distanceY = ((coords.h - pieceHeight) / 2 - pieceHeight * y),\r\n\t\t\t\tdistanceX = ((coords.w - pieceWidth) / 2 - pieceWidth * x),\r\n\t\t\t\tdistanceXY = Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2)),\r\n\t\t\t\tendTop = parseInt(startTop - distanceY * distance + distanceXY * randomY),\r\n\t\t\t\tendLeft = parseInt(startLeft - distanceX * distance + distanceXY * randomX)\r\n\t\t\t;\r\n\r\n\t\t\t// Create the animation objects for the piece\r\n\t\t\t// These are separate anim objects so they can have different curves\r\n\t\t\tvar pieceSlide = baseFx.animateProperty({\r\n\t\t\t\tnode: piece,\r\n\t\t\t\tduration: duration,\r\n\t\t\t\tdelay: delay,\r\n\t\t\t\teasing: (args.easing || (args.unhide ? easingUtil.sinOut : easingUtil.circOut)),\r\n\t\t\t\tbeforeBegin: (args.unhide ? function(){\r\n\t\t\t\t\t\tif(args.fade){\r\n\t\t\t\t\t\t\thtmlUtil.style(piece, { opacity: \"0\"});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tps.top = endTop + \"px\";\r\n\t\t\t\t\t\tps.left = endLeft + \"px\";\r\n\t\t\t\t\t} : undefined),\r\n\t\t\t\tproperties: {\r\n\t\t\t\t\ttop: (args.unhide ? { start: endTop, end: startTop } : { start: startTop, end: endTop }),\r\n\t\t\t\t\tleft: (args.unhide ? { start: endLeft, end: startLeft } : { start: startLeft, end: endLeft })\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(args.fade){\r\n\t\t\t\tvar pieceFade = baseFx.animateProperty({\r\n\t\t\t\t\tnode: piece,\r\n\t\t\t\t\tduration: duration,\r\n\t\t\t\t\tdelay: delay,\r\n\t\t\t\t\teasing: (args.fadeEasing || easingUtil.quadOut),\r\n\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\topacity: (args.unhide ? { start: \"0\", end: \"1\" } : { start: \"1\", end: \"0\" })\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// return both animations as an array\r\n\t\t\t\treturn (args.unhide ? [pieceFade, pieceSlide] : [pieceSlide, pieceFade]);\r\n\t\t\t}else{\r\n\t\t\t\t// Otherwise return only the slide animation\r\n\t\t\t\treturn pieceSlide;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar anim = dojoxFx._split(args);\r\n\t\tif(args.unhide){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", null, function(){\r\n\t\t\t\thtmlUtil.style(node, {opacity: \"1\" });\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tconnectUtil.connect(anim, \"onPlay\", null, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"0\" });\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\tconverge: function(/*Object*/ args){\r\n\t\targs.unhide = true;\r\n\t\treturn dojoxFx.explode(args);\r\n\t},\r\n\r\n\tdisintegrate: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSplit a node into rectangular pieces and let them fall\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that drop.\r\n\t\t// args:\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 5)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 5)\r\n\t\t//\t\t- args.interval: Float - The number of milliseconds between each piece's animation\r\n\t\t//\t\t- args.distance: Float - The number of the node's heights to drop (default is 1.5)\r\n\t\t//\t\t- args.fade: Boolean - If true, pieces fade out while in motion (default is true)\r\n\t\t//\t\t- args.random: Float - If set, pieces fall in random order. The value defines how much\r\n\t\t//\t\t\t\t\t\t\t   randomness is introduced.\r\n\t\t//\t\t- args.reverseOrder: Boolean - If true, pieces animate in reversed order\r\n\t\t//\t\t- args.unhide: Boolean - If true, the peices fall from above and land in place\r\n\t\tvar node = args.node = dom.byId(args.node);\r\n\r\n\t\targs.rows = args.rows || 5;\r\n\t\targs.columns = args.columns || 5;\r\n\t\targs.duration = args.duration || 1500;\r\n\t\targs.interval = args.interval || args.duration / (args.rows + args.columns * 2);\r\n\t\targs.distance = args.distance || 1.5;\r\n\t\targs.random = args.random || 0;\r\n\t\tif(typeof args.fade == \"undefined\"){\r\n\t\t\targs.fade = true;\r\n\t\t}\r\n\r\n\t\tvar random = Math.abs(args.random),\r\n\t\t\tduration = args.duration - (args.rows + args.columns) * args.interval;\r\n\r\n\t\t// Returns the animation object for each piece\r\n\t\targs.pieceAnimation = function(piece, x, y, coords){\r\n\r\n\t\t\tvar randomDelay = Math.random() * (args.rows + args.columns) * args.interval,\r\n\t\t\t\tps = piece.style,\r\n\r\n\t\t\t// If distance is negative, start from the top right instead of bottom left\r\n\t\t\t\tuniformDelay = (args.reverseOrder || args.distance < 0) ?\r\n\t\t\t\t\t((x + y) * args.interval) :\r\n\t\t\t\t\t(((args.rows + args.columns) - (x + y)) * args.interval),\r\n\t\t\t\tdelay = randomDelay * random + Math.max(1 - random, 0) * uniformDelay,\r\n\t\t\t// Create the animation object for the piece\r\n\t\t\t\tproperties = {}\r\n\t\t\t;\r\n\t\t\tif(args.unhide){\r\n\t\t\t\tproperties.top = {\r\n\t\t\t\t\tstart: (parseInt(ps.top) - coords.h * args.distance),\r\n\t\t\t\t\tend: parseInt(ps.top)\r\n\t\t\t\t};\r\n\t\t\t\tif(args.fade){\r\n\t\t\t\t\tproperties.opacity = {start: \"0\", end: \"1\"};\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tproperties.top = {end: (parseInt(ps.top) + coords.h * args.distance)};\r\n\t\t\t\tif(args.fade){\r\n\t\t\t\t\tproperties.opacity = {end: \"0\"};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar pieceAnimation = baseFx.animateProperty({\r\n\t\t\t\tnode: piece,\r\n\t\t\t\tduration: duration,\r\n\t\t\t\tdelay: delay,\r\n\t\t\t\teasing: (args.easing || (args.unhide ? easingUtil.sinIn : easingUtil.circIn)),\r\n\t\t\t\tproperties: properties,\r\n\t\t\t\tbeforeBegin: (args.unhide ? function(){\r\n\t\t\t\t\tif(args.fade){\r\n\t\t\t\t\t\thtmlUtil.style(piece, { opacity: \"0\" });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tps.top = properties.top.start + \"px\";\r\n\t\t\t\t} : undefined)\r\n\t\t\t});\r\n\r\n\t\t\treturn pieceAnimation;\r\n\t\t};\r\n\r\n\t\tvar anim = dojoxFx._split(args);\r\n\t\tif(args.unhide){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"1\" });\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tconnectUtil.connect(anim, \"onPlay\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"0\" });\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\tbuild: function(/*Object*/ args){\r\n\t\targs.unhide = true;\r\n\t\treturn dojoxFx.disintegrate(args);\r\n\t},\r\n\r\n\tshear: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSplit a node into rectangular pieces and slide them in alternating directions\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that slide in alternating directions.\r\n\t\t// args:\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 6)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 6)\r\n\t\t//\t\t- args.interval: Float - The number of milliseconds between each piece's animation (default is 0)\r\n\t\t//\t\t- args.distance: Float - The multiple of the node's dimensions to slide (default is 1)\r\n\t\t//\t\t- args.fade: Boolean - If true, pieces fade out while in motion (default is true)\r\n\t\t//\t\t- args.random: Float - If true, pieces have a random delay. The value defines how much\r\n\t\t//\t\t\t\t\t\t\t   randomness is introduced\r\n\t\t//\t\t- args.reverseOrder: Boolean - If true, pieces animate in reversed order\r\n\t\t//\t\t- args.unhide: Boolean - If true, the animation is reversed\r\n\r\n\t\tvar node = args.node = dom.byId(args.node);\r\n\r\n\t\targs.rows = args.rows || 6;\r\n\t\targs.columns = args.columns || 6;\r\n\t\targs.duration = args.duration || 1000;\r\n\t\targs.interval = args.interval || 0;\r\n\t\targs.distance = args.distance || 1;\r\n\t\targs.random = args.random || 0;\r\n\t\tif(typeof(args.fade) == \"undefined\"){\r\n\t\t\targs.fade = true;\r\n\t\t}\r\n\t\tvar random = Math.abs(args.random),\r\n\t\t\tduration = (args.duration - (args.rows + args.columns) * Math.abs(args.interval))\r\n\t\t;\r\n\r\n\t\t// Returns the animation object for each piece\r\n\t\targs.pieceAnimation = function(piece, x, y, coords){\r\n\r\n\t\t\t// Since x an y start at 0, the opposite is true...\r\n\t\t\tvar colIsOdd = !(x % 2),\r\n\t\t\t\trowIsOdd = !(y % 2),\r\n\t\t\t\trandomDelay = Math.random() * duration,\r\n\t\t\t\tuniformDelay = (args.reverseOrder) ?\r\n\t\t\t\t\t(((args.rows + args.columns) - (x + y)) * args.interval) :\r\n\t\t\t\t\t((x + y) * args.interval),\r\n\t\t\t\tdelay = randomDelay * random + Math.max(1 - random, 0) * uniformDelay,\r\n\t\t\t\tproperties = {},\r\n\t\t\t\tps = piece.style\r\n\t\t\t;\r\n\r\n\t\t\tif(args.fade){\r\n\t\t\t\tproperties.opacity = (args.unhide ? { start: \"0\", end: \"1\" } : { end: \"0\" });\r\n\t\t\t}\r\n\r\n\t\t\t// If we have only rows or columns, ignore the other dimension\r\n\t\t\tif(args.columns == 1){\r\n\t\t\t\tcolIsOdd = rowIsOdd;\r\n\t\t\t}else if(args.rows == 1){\r\n\t\t\t\trowIsOdd = !colIsOdd;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the piece's direction\r\n\t\t\tvar left = parseInt(ps.left),\r\n\t\t\t\ttop = parseInt(ps.top),\r\n\t\t\t\tdistanceX = args.distance*coords.w,\r\n\t\t\t\tdistanceY = args.distance*coords.h\r\n\t\t\t;\r\n\t\t\tif(args.unhide){\r\n\t\t\t\tif(colIsOdd == rowIsOdd){\r\n\t\t\t\t\tproperties.left = colIsOdd ? {start: (left - distanceX), end: left} : {start: (left + distanceX), end: left};\r\n\t\t\t\t}else{\r\n\t\t\t\t\tproperties.top = colIsOdd ? {start: (top + distanceY), end: top} : {start: (top - distanceY), end: top};\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(colIsOdd == rowIsOdd){\r\n\t\t\t\t\tproperties.left = colIsOdd ? {end: (left - distanceX)} : {end: (left + distanceX)};\r\n\t\t\t\t}else{\r\n\t\t\t\t\tproperties.top = colIsOdd ? {end: (top + distanceY)} : {end: (top - distanceY)};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Create the animation object for the piece\r\n\t\t\tvar pieceAnimation = baseFx.animateProperty({\r\n\t\t\t\tnode: piece,\r\n\t\t\t\tduration: duration,\r\n\t\t\t\tdelay: delay,\r\n\t\t\t\teasing: (args.easing || easingUtil.sinInOut),\r\n\t\t\t\tproperties: properties,\r\n\t\t\t\tbeforeBegin: (args.unhide ? function(){\r\n\t\t\t\t\tif(args.fade){\r\n\t\t\t\t\t\tps.opacity = \"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(colIsOdd == rowIsOdd){\r\n\t\t\t\t\t\tps.left = properties.left.start + \"px\";\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tps.top = properties.top.start + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} : undefined)\r\n\t\t\t});\r\n\r\n\t\t\treturn pieceAnimation;\r\n\t\t};\r\n\r\n\t\tvar anim = dojoxFx._split(args);\r\n\t\tif(args.unhide){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"1\" });\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tconnectUtil.connect(anim, \"onPlay\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"0\" });\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\tunShear: function(/*Object*/ args){\r\n\t\targs.unhide = true;\r\n\t\treturn dojoxFx.shear(args);\r\n\t},\r\n\r\n\tpinwheel: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSplit a node into rectangular pieces and wipe them in alternating directions\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that wipe in alternating directions.\r\n\t\t// args:\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 4)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 4)\r\n\t\t//\t\t- args.interval: Float - The number of milliseconds between each piece's animation (default is 0)\r\n\t\t//\t\t- args.distance: Float - The percentage of the piece's dimensions the piece should wipe\r\n\t\t//\t\t- args.fade: Boolean - If true, pieces fade out while in motion (default is true)\r\n\t\t//\t\t- args.random: Float - If true, pieces have a random delay. The value defines how much\r\n\t\t//\t\t\t\t\t\t\t   randomness is introduced.\r\n\t\t//\t\t- args.unhide: Boolean - If true, the animation is reversed\r\n\r\n\t\tvar node = args.node = dom.byId(args.node);\r\n\r\n\t\targs.rows = args.rows || 4;\r\n\t\targs.columns = args.columns || 4;\r\n\t\targs.duration = args.duration || 1000;\r\n\t\targs.interval = args.interval || 0;\r\n\t\targs.distance = args.distance || 1;\r\n\t\targs.random = args.random || 0;\r\n\t\tif(typeof args.fade == \"undefined\"){\r\n\t\t\targs.fade = true;\r\n\t\t}\r\n\t\tvar duration = (args.duration - (args.rows + args.columns) * Math.abs(args.interval));\r\n\r\n\t\t// Returns the animation object for each piece\r\n\t\targs.pieceAnimation = function(piece, x, y, coords){\r\n\t\t\tvar pieceHeight = coords.h / args.rows,\r\n\t\t\t\tpieceWidth = coords.w / args.columns,\r\n\r\n\t\t\t\t// because x an y start at 0, the opposite is true...\r\n\t\t\t\tcolIsOdd = !(x % 2),\r\n\t\t\t\trowIsOdd = !(y % 2),\r\n\r\n\t\t\t\trandomDelay = Math.random() * duration,\r\n\t\t\t\tuniformDelay = (args.interval < 0) ?\r\n\t\t\t\t\t(((args.rows + args.columns) - (x + y)) * args.interval * -1) :\r\n\t\t\t\t\t((x + y) * args.interval),\r\n\t\t\t\tdelay = randomDelay * args.random + Math.max(1 - args.random, 0) * uniformDelay,\r\n\t\t\t\tproperties = {},\r\n\t\t\t\tps = piece.style\r\n\t\t\t;\r\n\r\n\t\t\tif(args.fade){\r\n\t\t\t\tproperties.opacity = (args.unhide ? {start: 0, end: 1} : {end:0});\r\n\t\t\t}\r\n\r\n\t\t\t// If we have only rows or columns, ignore the other dimension\r\n\t\t\tif(args.columns == 1){\r\n\t\t\t\tcolIsOdd = !rowIsOdd;\r\n\t\t\t}else if(args.rows == 1){\r\n\t\t\t\trowIsOdd = colIsOdd;\r\n\t\t\t}\r\n\r\n\t\t\t// Determine the piece's direction\r\n\t\t\tvar left = parseInt(ps.left),\r\n\t\t\t\ttop = parseInt(ps.top)\r\n\t\t\t;\r\n\t\t\tif(colIsOdd){\r\n\t\t\t\tif(rowIsOdd){\r\n\t\t\t\t\tproperties.top = args.unhide ?\r\n\t\t\t\t\t\t{ start: top + pieceHeight * args.distance, end: top} :\r\n\t\t\t\t\t\t{ start: top, end: top + pieceHeight * args.distance} ;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tproperties.left = args.unhide ?\r\n\t\t\t\t\t\t{ start: left + pieceWidth * args.distance, end: left } :\r\n\t\t\t\t\t\t{ start: left, end: left + pieceWidth * args.distance } ;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(colIsOdd != rowIsOdd){\r\n\t\t\t\tproperties.width = args.unhide ?\r\n\t\t\t\t\t{ start: pieceWidth * (1 - args.distance), end: pieceWidth } :\r\n\t\t\t\t\t{ start: pieceWidth, end: pieceWidth * (1 - args.distance) } ;\r\n\t\t\t}else{\r\n\t\t\t\tproperties.height = args.unhide ?\r\n\t\t\t\t\t{ start: pieceHeight * (1 - args.distance), end: pieceHeight } :\r\n\t\t\t\t\t{ start: pieceHeight, end: pieceHeight * (1 - args.distance) } ;\r\n\t\t\t}\r\n\r\n\t\t\t// Create the animation object for the piece\r\n\t\t\tvar pieceAnimation = baseFx.animateProperty({\r\n\t\t\t\tnode: piece,\r\n\t\t\t\tduration: duration,\r\n\t\t\t\tdelay: delay,\r\n\t\t\t\teasing: (args.easing || easingUtil.sinInOut),\r\n\t\t\t\tproperties: properties,\r\n\t\t\t\tbeforeBegin: (args.unhide ? function(){\r\n\t\t\t\t\tif(args.fade){\r\n\t\t\t\t\t\thtmlUtil.style(piece, \"opacity\", 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(colIsOdd){\r\n\t\t\t\t\t\tif(rowIsOdd){\r\n\t\t\t\t\t\t\tps.top = (top + pieceHeight * (1 - args.distance)) + \"px\";\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tps.left = (left + pieceWidth * (1 - args.distance)) + \"px\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tps.left = left + \"px\";\r\n\t\t\t\t\t\tps.top = top + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(colIsOdd != rowIsOdd){\r\n\t\t\t\t\t\tps.width = (pieceWidth * (1 - args.distance)) + \"px\";\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tps.height = (pieceHeight * (1 - args.distance)) + \"px\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} : undefined)\r\n\t\t\t});\r\n\r\n\t\t\treturn pieceAnimation;\r\n\t\t};\r\n\r\n\t\tvar anim = dojoxFx._split(args);\r\n\t\tif(args.unhide){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"1\" });\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tconnectUtil.connect(anim, \"play\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"0\" });\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\tunPinwheel: function(/*Object*/ args){\r\n\t\targs.unhide = true;\r\n\t\treturn dojoxFx.pinwheel(args); // dojo.Animation\r\n\t},\r\n\r\n\tblockFadeOut: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tSplit a node into rectangular pieces and fade them\r\n\t\t// description:\r\n\t\t//\t\tReturns an animation that will split the node into a grid\r\n\t\t//\t\tof pieces that fade in or out.\r\n\t\t// args:\r\n\t\t//\t\t- args.rows: Integer - The number of horizontal pieces (default is 5)\r\n\t\t//\t\t- args.columns: Integer - The number of vertical pieces (default is 5)\r\n\t\t//\t\t- args.interval: Float - The number of milliseconds between each piece's animation (default is 0)\r\n\t\t//\t\t- args.random: Float - If true, pieces have a random delay. The value defines how much\r\n\t\t//\t\t\t\t\t\t\t   randomness is introduced\r\n\t\t//\t\t- args.reverseOrder: Boolean - If true, pieces animate in reversed order\r\n\t\t//\t\t- args.unhide: Boolean - If true, the animation is reversed\r\n\r\n\t\tvar node = args.node = dom.byId(args.node);\r\n\r\n\t\targs.rows = args.rows || 5;\r\n\t\targs.columns = args.columns || 5;\r\n\t\targs.duration = args.duration || 1000;\r\n\t\targs.interval = args.interval || args.duration / (args.rows + args.columns * 2);\r\n\t\targs.random = args.random || 0;\r\n\t\tvar random = Math.abs(args.random),\r\n\t\t\tduration = args.duration - (args.rows + args.columns) * args.interval\r\n\t\t;\r\n\r\n\t\t// Returns the animation object for each piece\r\n\t\targs.pieceAnimation = function(piece, x, y, coords){\r\n\t\t\tvar randomDelay = Math.random() * args.duration,\r\n\t\t\t\tuniformDelay = (args.reverseOrder) ?\r\n\t\t\t\t\t(((args.rows + args.columns) - (x + y)) * Math.abs(args.interval)) :\r\n\t\t\t\t\t((x + y) * args.interval),\r\n\t\t\t\tdelay = randomDelay * random + Math.max(1 - random, 0) * uniformDelay,\r\n\t\t\t// Create the animation object for the piece\r\n\t\t\t\tpieceAnimation = baseFx.animateProperty({\r\n\t\t\t\t\tnode: piece,\r\n\t\t\t\t\tduration: duration,\r\n\t\t\t\t\tdelay: delay,\r\n\t\t\t\t\teasing: (args.easing || easingUtil.sinInOut),\r\n\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\topacity: (args.unhide ? {start: \"0\", end: \"1\"} : {start: \"1\", end: \"0\"})\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbeforeBegin: (args.unhide ? function(){ htmlUtil.style(piece, { opacity: \"0\" });} : function(){ piece.style.filter = \"\"; })\r\n\t\t\t\t});\r\n\r\n\t\t\treturn pieceAnimation;\r\n\t\t};\r\n\t\tvar anim = dojoxFx._split(args);\r\n\t\tif(args.unhide){\r\n\t\t\tconnectUtil.connect(anim, \"onEnd\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"1\" });\r\n\t\t\t});\r\n\t\t}else{\r\n\t\t\tconnectUtil.connect(anim, \"onPlay\", anim, function(){\r\n\t\t\t\thtmlUtil.style(node, { opacity: \"0\" });\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn anim; // dojo.Animation\r\n\t},\r\n\r\n\tblockFadeIn: function(/*Object*/ args){\r\n\t\targs.unhide = true;\r\n\t\treturn dojoxFx.blockFadeOut(args); // dojo.Animation\r\n\t}\r\n});\r\nreturn fxExt;\r\n});"]}