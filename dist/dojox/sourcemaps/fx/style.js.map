{"version":3,"sources":["fx/style.js"],"names":["define","dojo","lang","baseFx","coreFx","dojoxFx","arrayUtil","dom","domStyle","domClass","connectUtil","experimental","_getStyleSnapshot","cache","map","_allowedProperties","style","_getCalculatedStyleChanges","node","cssClass","addClass","byId","cs","getComputedStyle","_before","_after","calculated","i","forEach","prop","parseInt","styleFx","args","n","pushClass","add","cssText","_beforeStyle","mixedProperties","_anim","animateProperty","mixin","properties","connect","removeClass","pullClass","remove","toggleClass","condition","contains"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAoB,kBAAkB,gBAAgB,UAAU,UAAU,mBAAmB,WAAW,iBAAiB,iBAC/H,sBACD,SAASC,EAAKC,EAAKC,EAAOC,EAAOC,EAAQC,EAAUC,EAAIC,EAASC,EAASC,GACzET,EAAKU,aAAa,kBAGlB,IAAIC,EAAoB,SAAqBC,GAS5C,OAAOP,EAAUQ,IAAIT,EAAQU,mBAAoB,SAASC,GACzD,OAAOH,EAAMG,MAIXC,EAA6B,SAASC,EAAMC,EAAUC,GAWzDF,EAAOX,EAAIc,KAAKH,GAChB,IAAII,EAAKd,EAASe,iBAAiBL,GAG/BM,EAAUZ,EAAkBU,GAChCrB,EAAMmB,EAAW,WAAa,eAAgBF,EAAMC,GACpD,IAAIM,EAASb,EAAkBU,GAC/BrB,EAAMmB,EAAW,cAAgB,YAAaF,EAAMC,GAEpD,IAAIO,KAAiBC,EAAI,EAQzB,OAPArB,EAAUsB,QAAQvB,EAAQU,mBAAoB,SAASc,GACnDL,EAAQG,IAAMF,EAAOE,KAEvBD,EAAWG,GAAQC,SAASL,EAAOE,KAEpCA,MAEMD,GAGJK,GAOHX,SAAU,SAASF,EAAMC,EAAUa,GA0BlCd,EAAOX,EAAIc,KAAKH,GAEhB,IAA0Be,EAAtBC,GAAsBD,EAYvBf,EAJK,WACNT,EAAS0B,IAAIF,EAAGd,GAChBc,EAAEjB,MAAMoB,QAAUC,IAKhBC,EAAkBrB,EAA2BC,EAAMC,GAAU,GAC7DkB,EAAenB,EAAKF,MAAMoB,QAC1BG,EAAQpC,EAAOqC,gBAAgBtC,EAAKuC,OACvCvB,KAAMA,EACNwB,WAAYJ,GACVN,IAEH,OADAtB,EAAYiC,QAAQJ,EAAO,QAASA,EAAOL,GACpCK,GAGRK,YAAa,SAAS1B,EAAMC,EAAUa,GAerCd,EAAOX,EAAIc,KAAKH,GAEhB,IAA0Be,EAAtBY,GAAsBZ,EAavBf,EAJK,WACNT,EAASqC,OAAOb,EAAGd,GACnBc,EAAEjB,MAAMoB,QAAUC,IAIhBC,EAAkBrB,EAA2BC,EAAMC,GACnDkB,EAAenB,EAAKF,MAAMoB,QAC1BG,EAAQpC,EAAOqC,gBAAgBtC,EAAKuC,OACvCvB,KAAMA,EACNwB,WAAYJ,GACVN,IAEH,OADAtB,EAAYiC,QAAQJ,EAAO,QAASA,EAAOM,GACpCN,GAGRQ,YAAa,SAAS7B,EAAMC,EAAU6B,EAAWhB,GA0BhD,YAHuB,IAAbgB,IACTA,GAAavC,EAASwC,SAAS/B,EAAMC,IAE/Bd,EAAS2C,EAAY,WAAa,eAAgB9B,EAAMC,EAAUa,IAG1EjB,oBASC,QACA,SAEA,OAAQ,MAKR,kBAEA,QAIA,oBAEA,iBAEA,kBAEA,mBAGA,cAAe,eAAgB,aAAc,gBAE7C,aAAc,YAAa,cAAe,eAG1C,aACA,gBACA,aAIF,OADCb,EAAKuC,MAAMpC,EAAQ0B,GACbA","file":"../../fx/style.js","sourcesContent":["define([\"dojo/_base/kernel\",\"dojo/_base/lang\",\"dojo/_base/fx\",\"dojo/fx\",\"./_base\",\"dojo/_base/array\",\"dojo/dom\",\"dojo/dom-style\",\"dojo/dom-class\",\r\n\t\t\"dojo/_base/connect\"],\r\n\tfunction(dojo,lang,baseFx,coreFx,dojoxFx,arrayUtil,dom,domStyle,domClass,connectUtil){\r\n\tdojo.experimental(\"dojox.fx.style\");\r\n\t\t\r\n\r\n\tvar _getStyleSnapshot = function(/* Object */cache){\r\n\t\t// summary:\r\n\t\t//\t\tuses a dojo.getComputedStyle(node) cache reference and\r\n\t\t//\t\titerates through the 'documented/supported animate-able'\r\n\t\t//\t\tproperties.\r\n\t\t//\r\n\t\t// returns:  Array\r\n\t\t//\t\tan array of raw, calculated values (no keys), to be normalized/compared\r\n\t\t//\t\telsewhere\r\n\t\treturn arrayUtil.map(dojoxFx._allowedProperties, function(style){\r\n\t\t\treturn cache[style]; // String\r\n\t\t}); // Array\r\n\t};\r\n\r\n\tvar _getCalculatedStyleChanges = function(node, cssClass, addClass){\r\n\t\t// summary:\r\n\t\t//\t\tCalculate the difference in style properties between two states\r\n\t\t// description:\r\n\t\t//\t\tcalculate and normalize(?) the differences between two states\r\n\t\t//\t\tof a node (args.node) by quickly adding or removing a class, and\r\n\t\t//\t\titerating over the results of dojox.fx._getStyleSnapshot()\r\n\t\t// addClass:\r\n\t\t//\t\ttrue to calculate what adding a class would do,\r\n\t\t//\t\tfalse to calculate what removing the class would do\r\n\r\n\t\tnode = dom.byId(node);\r\n\t\tvar\tcs = domStyle.getComputedStyle(node);\r\n\r\n\t\t// take our snapShots\r\n\t\tvar _before = _getStyleSnapshot(cs);\r\n\t\tdojo[(addClass ? \"addClass\" : \"removeClass\")](node, cssClass);\r\n\t\tvar _after = _getStyleSnapshot(cs);\r\n\t\tdojo[(addClass ? \"removeClass\" : \"addClass\")](node, cssClass);\r\n\r\n\t\tvar calculated = {}, i = 0;\r\n\t\tarrayUtil.forEach(dojoxFx._allowedProperties, function(prop){\r\n\t\t\tif(_before[i] != _after[i]){\r\n\t\t\t\t// FIXME: the static units: px is not good, either. need to parse unit from computed style?\r\n\t\t\t\tcalculated[prop] = parseInt(_after[i]) /* start: parseInt(_before[i]), units: 'px' */ ;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t});\r\n\t\treturn calculated;\r\n\t};\r\n\r\n\tvar styleFx = {\r\n\t\t// summary:\r\n\t\t//\t\tdojox.fx CSS Class Animations\r\n\t\t// description:\r\n\t\t//\t\ta set of functions to animate properties based on\r\n\t\t//\t\tnormalized CSS class definitions.\r\n\r\n\t\taddClass: function(node, cssClass, args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAnimate the effects of adding a class to a node\r\n\t\t\t// description:\r\n\t\t\t//\t\tCreates an animation that will animate\r\n\t\t\t//\t\tthe properties of a node to the properties\r\n\t\t\t//\t\tdefined in a standard CSS .class definition.\r\n\t\t\t//\t\t(calculating the differences itself)\r\n\t\t\t// node: String|DomNode\r\n\t\t\t//\t\tA String ID or DomNode referce to animate\r\n\t\t\t// cssClass: String\r\n\t\t\t//\t\tThe CSS class name to add to the node\r\n\t\t\t// args: Object?\r\n\t\t\t//\t\tAdditional optional `dojo.animateProperty` arguments, such as\r\n\t\t\t//\t\tduration, easing and so on.\r\n\t\t\t// example:\r\n\t\t\t//\t|\r\n\t\t\t//\t|\t.bar { line-height: 12px; }\r\n\t\t\t//\t|\t.foo { line-height: 40px; }\r\n\t\t\t//\t|\t<div class=\"bar\" id=\"test\">\r\n\t\t\t//\t|\tMulti<br>line<br>text\r\n\t\t\t//\t|\t</div>\r\n\t\t\t//\t|\r\n\t\t\t//\t|\t// animate to line-height:40px\r\n\t\t\t//\t|\tdojo.fx.addClass(\"test\", \"foo\").play();\r\n\t\t\t//\r\n\t\t\tnode = dom.byId(node);\r\n\r\n\t\t\tvar pushClass = (function(n){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tonEnd we want to add the class to the node\r\n\t\t\t\t//\t\t(as dojo.addClass naturally would) in case our\r\n\t\t\t\t//\t\tclass parsing misses anything the browser would\r\n\t\t\t\t//\t\totherwise interpret. this may cause some flicker,\r\n\t\t\t\t//\t\tand will only apply the class so children can inherit\r\n\t\t\t\t//\t\tafter the animation is done (potentially more flicker)\r\n\t\t\t\treturn function(){\r\n\t\t\t\t\tdomClass.add(n, cssClass);\r\n\t\t\t\t\tn.style.cssText = _beforeStyle;\r\n\t\t\t\t}\r\n\t\t\t})(node);\r\n\r\n\t\t\t// _getCalculatedStleChanges is the core of our style/class animations\r\n\t\t\tvar mixedProperties = _getCalculatedStyleChanges(node, cssClass, true);\r\n\t\t\tvar _beforeStyle = node.style.cssText;\r\n\t\t\tvar _anim = baseFx.animateProperty(lang.mixin({\r\n\t\t\t\tnode: node,\r\n\t\t\t\tproperties: mixedProperties\r\n\t\t\t}, args));\r\n\t\t\tconnectUtil.connect(_anim, \"onEnd\", _anim, pushClass);\r\n\t\t\treturn _anim; // dojo.Animation\r\n\t\t},\r\n\t\r\n\t\tremoveClass: function(node, cssClass, args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAnimate the effects of removing a class from a node\r\n\t\t\t// description:\r\n\t\t\t//\t\tCreates an animation that will animate the properties of a\r\n\t\t\t//\t\tnode (args.node) to the properties calculated after removing\r\n\t\t\t//\t\ta standard CSS className from a that node.\r\n\t\t\t//\r\n\t\t\t//\t\tcalls dojo.removeClass(args.cssClass) onEnd of animation\r\n\t\t\t//\r\n\t\t\t//\t\tstandard dojo.Animation object rules apply.\r\n\t\t\t// example:\r\n\t\t\t// |\t// animate the removal of \"foo\" from a node with id=\"bar\"\r\n\t\t\t// |\tdojox.fx.removeClass(\"bar\", \"foo\").play()\r\n\r\n\t\t\tnode = dom.byId(node);\r\n\r\n\t\t\tvar pullClass = (function(n){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tonEnd we want to remove the class from the node\r\n\t\t\t\t//\t\t(as dojo.removeClass naturally would) in case our class\r\n\t\t\t\t//\t\tparsing misses anything the browser would otherwise\r\n\t\t\t\t//\t\tinterpret. this may cause some flicker, and will only\r\n\t\t\t\t//\t\tapply the class so children can inherit after the\r\n\t\t\t\t//\t\tanimation is done (potentially more flicker)\r\n\r\n\t\t\t\treturn function(){\r\n\t\t\t\t\tdomClass.remove(n, cssClass);\r\n\t\t\t\t\tn.style.cssText = _beforeStyle;\r\n\t\t\t\t}\r\n\t\t\t})(node);\r\n\r\n\t\t\tvar mixedProperties = _getCalculatedStyleChanges(node, cssClass);\r\n\t\t\tvar _beforeStyle = node.style.cssText;\r\n\t\t\tvar _anim = baseFx.animateProperty(lang.mixin({\r\n\t\t\t\tnode: node,\r\n\t\t\t\tproperties: mixedProperties\r\n\t\t\t}, args));\r\n\t\t\tconnectUtil.connect(_anim, \"onEnd\", _anim, pullClass);\r\n\t\t\treturn _anim; // dojo.Animation\r\n\t\t},\r\n\r\n\t\ttoggleClass: function(node, cssClass, condition, args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAnimate the effects of Toggling a class on a Node\r\n\t\t\t// description:\r\n\t\t\t//\t\tcreates an animation that will animate the effect of\r\n\t\t\t//\t\ttoggling a class on or off of a node.\r\n\t\t\t//\t\tAdds a class to node if not present, or removes if present.\r\n\t\t\t//\t\tPass a boolean condition if you want to explicitly add or remove.\r\n\t\t\t// node: String|DomNode\r\n\t\t\t//\t\tThe domNode (or string of the id) to toggle\r\n\t\t\t// cssClass: String\r\n\t\t\t//\t\tString of the classname to add to the node\r\n\t\t\t// condition: Boolean?\r\n\t\t\t//\t\tIf passed, true means to add the class, false means to remove.\r\n\t\t\t// args: Object?\r\n\t\t\t//\t\tAdditional `dojo.Animation` args to pass along.\r\n\t\t\t// example:\r\n\t\t\t// |\t// add the class \"sampleClass\" to a node id=\"theNode\"\r\n\t\t\t// |\tdojox.fx.toggleClass(\"theNode\",\"sampleClass\",true).play();\r\n\t\t\t// example:\r\n\t\t\t// |\t// toggle the class \"sampleClass\" on the node id=\"theNode\"\r\n\t\t\t// |\tdojox.fx.toggleClass(\"theNode\",\"sampleClass\").play();\r\n\r\n\t\t\tif(typeof condition == \"undefined\"){\r\n\t\t\t\tcondition = !domClass.contains(node, cssClass);\r\n\t\t\t}\r\n\t\t\treturn dojoxFx[(condition ? \"addClass\" : \"removeClass\")](node, cssClass, args); // dojo.Animation\r\n\t\t},\r\n\t\r\n\t\t_allowedProperties: [\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOur pseudo map of properties we will check for.\r\n\t\t\t// description:\r\n\t\t\t//\t\tit should be much more intuitive. a way to normalize and\r\n\t\t\t//\t\t\"predict\" intent, or even something more clever ...\r\n\t\t\t//\t\topen to suggestions.\r\n\r\n\t\t\t// no-brainers:\r\n\t\t\t\"width\",\r\n\t\t\t\"height\",\r\n\t\t\t// only if position = absolute || relative?\r\n\t\t\t\"left\", \"top\", // \"right\", \"bottom\",\r\n\t\t\t// these need to be filtered through dojo.colors?\r\n\t\t\t// \"background\", // normalize to:\r\n\t\t\t/* \"backgroundImage\", */\r\n\t\t\t// \"backgroundPosition\", // FIXME: to be effective, this needs \"#px #px\"?\r\n\t\t\t\"backgroundColor\",\r\n\r\n\t\t\t\"color\",\r\n\r\n\t\t\t// \"border\",\r\n\t\t\t//\"borderBottomColor\",\r\n\t\t\t\"borderBottomWidth\",\r\n\t\t\t//\"borderTopColor\",\r\n\t\t\t\"borderTopWidth\",\r\n\t\t\t//\"borderLeftColor\",\r\n\t\t\t\"borderLeftWidth\",\r\n\t\t\t//\"borderRightColor\",\r\n\t\t\t\"borderRightWidth\",\r\n\r\n\t\t\t// \"padding\", // normalize to:\r\n\t\t\t\"paddingLeft\", \"paddingRight\", \"paddingTop\", \"paddingBottom\",\r\n\t\t\t// \"margin\", // normalize to:\r\n\t\t\t\"marginLeft\", \"marginTop\", \"marginRight\", \"marginBottom\",\r\n\r\n\t\t\t// unit import/delicate?:\r\n\t\t\t\"lineHeight\",\r\n\t\t\t\"letterSpacing\",\r\n\t\t\t\"fontSize\"\r\n\t\t]\r\n\t};\r\n\t\tlang.mixin(dojoxFx,styleFx);\r\n\treturn styleFx;\r\n});\r\n"]}