{"version":3,"sources":["fx/tests/_base.js"],"names":["dojo","provide","require","tests","register","t","line","dojox","fx","_Line","first","getValue","assertEqual","mid","end","startSet","start","length","forEach","val","i"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,wBAEbD,KAAKE,QAAQ,kBACbF,KAAKE,QAAQ,YAEbC,MAAMC,SAAS,wBAEd,SAAwBC,GAEvB,IAAIC,EAAO,IAAIC,MAAMC,GAAGC,OACtB,EAAG,MACH,IAAK,IAGHC,EAAQJ,EAAKK,SAAS,GAC1BN,EAAEO,YAAYF,EAAM,GAAI,GACxBL,EAAEO,YAAYF,EAAM,GAAI,KAExB,IAAIG,EAAMP,EAAKK,SAAS,IACxBN,EAAEO,YAAYC,EAAI,GAAI,IACtBR,EAAEO,YAAYC,EAAI,GAAI,IAEtB,IAAIC,EAAMR,EAAKK,SAAS,GACxBN,EAAEO,YAAYE,EAAI,GAAI,KACtBT,EAAEO,YAAYE,EAAI,GAAI,IAIvB,SAAwBT,GAEvB,IAAIC,EAAO,IAAIC,MAAMC,GAAGC,MAAM,EAAE,KAChCJ,EAAEO,YAAYN,EAAKK,SAAS,GAAI,GAChCN,EAAEO,YAAYN,EAAKK,SAAS,IAAM,IAClCN,EAAEO,YAAYN,EAAKK,SAAS,GAAI,MAIjC,SAA8BN,GAE7B,IAAIU,GAAY,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAGnCT,EAAO,IAAIC,MAAMC,GAAGC,MAAMM,GAFhB,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAIlCC,EAAQV,EAAKK,SAAS,GAEtBG,GADMR,EAAKK,SAAS,IACdL,EAAKK,SAAS,IAExBN,EAAEO,YAAYI,EAAMC,OAAQ,GAC5BZ,EAAEO,YAAYE,EAAIG,OAAQ,GAE1BZ,EAAEO,YAAYG,EAAS,GAAIC,EAAM,IACjCX,EAAEO,YAAYG,EAAS,GAAIC,EAAM,IACjCX,EAAEO,YAAYG,EAAS,GAAIC,EAAM,IAGjChB,KAAKkB,QAAQZ,EAAKK,SAAS,IAAM,SAASQ,EAAKC,GAC9Cf,EAAEO,YAFe,GAEUO","file":"../../../fx/tests/_base.js","sourcesContent":["dojo.provide(\"dojox.fx.tests._base\");\r\n\r\ndojo.require(\"dojox.fx._core\");\r\ndojo.require(\"dojox.fx\");\r\n\r\ntests.register(\"dojox.fx.tests._base\", [\r\n\r\n\tfunction simpleLineTest(t){\r\n\r\n\t\tvar line = new dojox.fx._Line(\r\n\t\t\t[0, 100],\r\n\t\t\t[100, 0]\r\n\t\t);\r\n\r\n\t\tvar first = line.getValue(0);\r\n\t\tt.assertEqual(first[0], 0);\r\n\t\tt.assertEqual(first[1], 100);\r\n\t\t\r\n\t\tvar mid = line.getValue(0.5);\r\n\t\tt.assertEqual(mid[0], 50);\r\n\t\tt.assertEqual(mid[1], 50);\r\n\t\t\r\n\t\tvar end = line.getValue(1);\r\n\t\tt.assertEqual(end[0], 100);\r\n\t\tt.assertEqual(end[1], 0);\r\n\r\n\t},\r\n\t\r\n\tfunction singleLineTest(t){\r\n\t\t\r\n\t\tvar line = new dojox.fx._Line(0,100);\r\n\t\tt.assertEqual(line.getValue(0), 0);\r\n\t\tt.assertEqual(line.getValue(0.5), 50);\r\n\t\tt.assertEqual(line.getValue(1), 100);\r\n\t\t\r\n\t},\r\n\t\r\n\tfunction multiDimensionalTest(t){\r\n\t\t\r\n\t\tvar startSet = [5, 10, 15, 20, 25, 30, 35];\r\n\t\tvar endSet = [35, 30, 25, 20, 15, 10, 5];\r\n\t\t\t\t\r\n\t\tvar line = new dojox.fx._Line(startSet, endSet);\r\n\t\t\r\n\t\tvar start = line.getValue(0);\r\n\t\tvar mid = line.getValue(0.5);\r\n\t\tvar end = line.getValue(1);\r\n\t\t\r\n\t\tt.assertEqual(start.length, 7);\r\n\t\tt.assertEqual(end.length, 7);\r\n\t\t\r\n\t\tt.assertEqual(startSet[0], start[0]);\r\n\t\tt.assertEqual(startSet[1], start[1]);\r\n\t\tt.assertEqual(startSet[5], start[5]);\r\n\t\t\r\n\t\tvar expectedMid = 20;\r\n\t\tdojo.forEach(line.getValue(0.5), function(val, i){\r\n\t\t\tt.assertEqual(expectedMid, val)\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n]);\r\n"]}