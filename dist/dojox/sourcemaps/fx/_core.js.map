{"version":3,"sources":["fx/_core.js"],"names":["define","lang","arrayUtil","dojoxFx","line","start","end","this","isArray","d","forEach","s","i","getValue","n","res","_Line"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,mBAAmB,WAC7C,SAASC,EAAMC,EAAWC,GAE1B,IAAIC,EAAO,SAASC,EAAOC,GAyB1BC,KAAKF,MAAQA,EACbE,KAAKD,IAAMA,EAEX,IAAIE,EAAUP,EAAKO,QAAQH,GAC1BI,EAAKD,KAAeF,EAAMD,EAExBG,GAEFN,EAAUQ,QAAQH,KAAKF,MAAO,SAASM,EAAGC,GACzCH,EAAEG,GAAKL,KAAKD,IAAIM,GAAKD,GACnBJ,MAEHA,KAAKM,SAAW,SAAmBC,GAClC,IAAIC,KAIJ,OAHAb,EAAUQ,QAAQH,KAAKF,MAAO,SAASM,EAAGC,GACzCG,EAAIH,GAAMH,EAAEG,GAAKE,EAAKH,GACpBJ,MACIQ,IAIRR,KAAKM,SAAW,SAAmBC,GAMlC,OAAQL,EAAIK,EAAKP,KAAKF,QAKzB,OADAF,EAAQa,MAAQZ,EACTA","file":"../../fx/_core.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/array\",\"./_base\"],\r\n\tfunction(lang, arrayUtil, dojoxFx){\r\n\r\n\tvar line = function(start, end){\r\n\t\t// summary:\r\n\t\t//\t\ta custom _Line to accommodate multi-dimensional values\r\n\t\t// description:\r\n\t\t//\t\ta normal dojo._Line is the curve, and does Line(start,end)\r\n\t\t//\t\tfor propertyAnimation. as we make more complicatied animations, we realize\r\n\t\t//\t\tsome properties can have 2, or 4 values relevant (x,y) or (t,l,r,b) for example\r\n\t\t//\r\n\t\t//\t\tthis function provides support for those Lines, and is ported directly from 0.4\r\n\t\t//\t\tthis is a lot of extra code for something so seldom used, so we'll put it here as\r\n\t\t//\t\tand optional core addition. you can create a new line, and use it during onAnimate\r\n\t\t//\t\tas you see fit.\r\n\t\t// start: Integer|Array\r\n\t\t//\t\tAn Integer (or an Array of integers) to use as a starting point\r\n\t\t// end: Integer|Array\r\n\t\t//\t\tAn Integer (or an Array of integers) to use as an ending point\r\n\t\t// example:\r\n\t\t//\t\tsee dojox.fx.smoothScroll\r\n\t\t// example:\r\n\t\t// |\t// this is 10 .. 100 and 50 .. 500\r\n\t\t// |\tvar curve = new dojox.fx._Line([10,50],[100,500]);\r\n\t\t// |\t// dojo.Animation.onAnimate is called at every step of the animation\r\n\t\t// |\t// to define current values. this _Line returns an array\r\n\t\t// | \t// at each step. arguments[0] and [1] in this example.\r\n\r\n\t\tthis.start = start;\r\n\t\tthis.end = end;\r\n\r\n\t\tvar isArray = lang.isArray(start),\r\n\t\t\td = (isArray ? [] : end - start);\r\n\r\n\t\tif(isArray){\r\n\t\t\t// multi-dimensional branch\r\n\t\t\tarrayUtil.forEach(this.start, function(s, i){\r\n\t\t\t\td[i] = this.end[i] - s;\r\n\t\t\t}, this);\r\n\r\n\t\t\tthis.getValue = function(/*float*/ n){\r\n\t\t\t\tvar res = [];\r\n\t\t\t\tarrayUtil.forEach(this.start, function(s, i){\r\n\t\t\t\t\tres[i] = (d[i] * n) + s;\r\n\t\t\t\t}, this);\r\n\t\t\t\treturn res; // Array\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t// single value branch, document here for both branches:\r\n\t\t\tthis.getValue = function(/*float*/ n){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tReturns the point on the line, or an array of points\r\n\t\t\t\t// n:\r\n\t\t\t\t//\t\ta floating point number greater than 0 and less than 1\r\n\t\t\t\t// returns: Mixed\r\n\t\t\t\treturn (d * n) + this.start; // Decimal\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tdojoxFx._Line = line; // COMPAT\r\n\treturn line;\r\n});\r\n"]}