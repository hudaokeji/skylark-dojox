{"version":3,"sources":["jsonPath/query.js"],"names":["dojo","provide","dojox","jsonPath","query","obj","expr","arg","re","_regularExpressions","strs","_str","i","_strName","name","acc","resultType","evalType","Error","P","normalize","subx","replace","t","push","eval","ll","length","$0","$1","split","asPaths","paths","j","p","x","n","test","exec","locs","val","rb","path","result","add","v","def","hasOwnProperty","concat","repStr","str","loc","match","oper","walk","Array","desc","oldPath","s","len","start","end","step","$2","$3","parseInt","Math","max","min","slice","shift","undefined","valPaths","newResult","value","f","m","$","e","SyntaxError","message"],"mappings":"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","file":"../../jsonPath/query.js","sourcesContent":["dojo.provide(\"dojox.jsonPath.query\");\r\n\r\ndojox.jsonPath.query = function(/*Object*/ obj, /*String*/ expr, /*Object*/ arg){\r\n\t// summary:\r\n\t//\t\tPerform jsonPath query `expr` on javascript object or json string `obj`\r\n\t// obj:\r\n\t//\t\tobject || json string to perform query on\r\n\t// expr:\r\n\t//\t\tjsonPath expression (string) to be evaluated\r\n\t// arg:\r\n\t//\t\t{} special arguments.\r\n\t//\r\n\t//\t\t- resultType: \"VALUE\"||\"BOTH\"||\"PATH\"} (defaults to value)\r\n\t//\t\t- evalType: \"RESULT\"||\"ITEM\"} (defaults to ?)\r\n\r\n\tvar re = dojox.jsonPath._regularExpressions;\r\n\tif (!arg){arg={};}\r\n\r\n\tvar strs = [];\r\n\tfunction _str(i){ return strs[i];}\r\n\tvar _strName = _str.name;\r\n\tvar acc;\r\n\tif (arg.resultType == \"PATH\" && arg.evalType == \"RESULT\") throw Error(\"RESULT based evaluation not supported with PATH based results\");\r\n\tvar P = {\r\n\t\tresultType: arg.resultType || \"VALUE\",\r\n\t\tnormalize: function(expr){\r\n\t\t\tvar subx = [];\r\n\t\t\texpr = expr.replace(/'([^']|'')*'/g, function(t){return _strName + \"(\"+(strs.push(eval(t))-1)+\")\";});\r\n\t\t\tvar ll = -1;\r\n\t\t\twhile(ll!=subx.length){\r\n\t\t\t\tll=subx.length;//TODO: Do expression syntax checking\r\n\t\t\t\texpr = expr.replace(/(\\??\\([^\\(\\)]*\\))/g, function($0){return \"#\"+(subx.push($0)-1);});\r\n\t\t\t}\r\n\t\t\texpr = expr.replace(/[\\['](#[0-9]+)[\\]']/g,'[$1]')\r\n\t\t\t\t\t\t  .replace(/'?\\.'?|\\['?/g, \";\")\r\n\t\t\t\t\t\t  .replace(/;;;|;;/g, \";..;\")\r\n\t\t\t\t\t\t  .replace(/;$|'?\\]|'$/g, \"\");\r\n\t\t\tll = -1;\r\n\t\t\twhile(ll!=expr){\r\n\t\t\t\tll=expr;\r\n\t\t\t\t\t expr = expr.replace(/#([0-9]+)/g, function($0,$1){return subx[$1];});\r\n\t\t\t}\r\n\t\t\treturn expr.split(\";\");\r\n\t\t},\r\n\t\tasPaths: function(paths){\r\n\t\t\tfor (var j=0;j<paths.length;j++){\r\n\t\t\tvar p = \"$\";\r\n\t\t\tvar x= paths[j];\r\n\t\t\tfor (var i=1,n=x.length; i<n; i++)\r\n\t\t\t\tp += /^[0-9*]+$/.test(x[i]) ? (\"[\"+x[i]+\"]\") : (\"['\"+x[i]+\"']\");\r\n\t\t\tpaths[j]=p;\r\n\t\t  }\r\n\t\t\treturn paths;\r\n\t\t},\r\n\t\texec: function(locs, val, rb){\r\n\t\t\tvar path = ['$'];\r\n\t\t\tvar result=rb?val:[val];\r\n\t\t\tvar paths=[path];\r\n\t\t\tfunction add(v, p,def){\r\n\t\t\t  if (v && v.hasOwnProperty(p) && P.resultType != \"VALUE\") paths.push(path.concat([p]));\r\n\t\t\t\tif (def)\r\n\t\t\t\t  result = v[p];\r\n\t\t\t  else if (v && v.hasOwnProperty(p))\r\n\t\t\t\t\tresult.push(v[p]);\r\n\t\t\t}\r\n\t\t\tfunction desc(v){\r\n\t\t\t\tresult.push(v);\r\n\t\t\t\tpaths.push(path);\r\n\t\t\t\tP.walk(v,function(i){\r\n\t\t\t\t\tif (typeof v[i] ==='object')  {\r\n\t\t\t\t\t\tvar oldPath = path;\r\n\t\t\t\t\t\tpath = path.concat(i);\r\n\t\t\t\t\t\tdesc(v[i]);\r\n\t\t\t\t\t\tpath = oldPath;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfunction slice(loc, val){\r\n\t\t\t\tif (val instanceof Array){\r\n\t\t\t\t\tvar len=val.length, start=0, end=len, step=1;\r\n\t\t\t\t\tloc.replace(/^(-?[0-9]*):(-?[0-9]*):?(-?[0-9]*)$/g, function($0,$1,$2,$3){start=parseInt($1||start);end=parseInt($2||end);step=parseInt($3||step);});\r\n\t\t\t\t\tstart = (start < 0) ? Math.max(0,start+len) : Math.min(len,start);\r\n\t\t\t\t\tend = (end < 0) ? Math.max(0,end+len) : Math.min(len,end);\r\n\t\t\t\t  \tfor (var i=start; i<end; i+=step)\r\n\t\t\t\t\t\tadd(val,i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfunction repStr(str){\r\n\t\t\t\tvar i=loc.match(/^_str\\(([0-9]+)\\)$/);\r\n\t\t\t\treturn i?strs[i[1]]:str;\r\n\t\t\t}\r\n\t\t\tfunction oper(val){\r\n\t\t\t\tif (/^\\(.*?\\)$/.test(loc)) // [(expr)]\r\n\t\t\t\t\tadd(val, P.eval(loc, val),rb);\r\n\t\t\t\telse if (loc === \"*\"){\r\n\t\t\t\t\tP.walk(val, rb && val instanceof Array ? // if it is result based, there is no point to just return the same array\r\n\t\t\t\t\tfunction(i){P.walk(val[i],function(j){ add(val[i],j); })} :\r\n\t\t\t\t\tfunction(i){ add(val,i); });\r\n\t\t\t\t}\r\n\t\t\t\telse if (loc === \"..\")\r\n\t\t\t\t\tdesc(val);\r\n\t\t\t\telse if (/,/.test(loc)){ // [name1,name2,...]\r\n\t\t\t\t\tfor (var s=loc.split(/'?,'?/),i=0,n=s.length; i<n; i++)\r\n\t\t\t\t\t\tadd(val,repStr(s[i]));\r\n\t\t\t\t}\r\n\t\t\t\telse if (/^\\?\\(.*?\\)$/.test(loc)) // [?(expr)]\r\n\t\t\t\t\tP.walk(val, function(i){ if (P.eval(loc.replace(/^\\?\\((.*?)\\)$/,\"$1\"),val[i])) add(val,i); });\r\n\t\t\t\telse if (/^(-?[0-9]*):(-?[0-9]*):?([0-9]*)$/.test(loc)) // [start:end:step]  python slice syntax\r\n\t\t\t\t\tslice(loc, val);\r\n\t\t\t\telse {\r\n\t\t\t\t\tloc=repStr(loc);\r\n\t\t\t\t\tif (rb && val instanceof Array && !/^[0-9*]+$/.test(loc))\r\n\t\t\t\t\t\tP.walk(val, function(i){ add(val[i], loc)});\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tadd(val,loc,rb);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\twhile (locs.length){\r\n\t\t\t\tvar loc = locs.shift();\r\n\t\t\t\tif ((val = result) === null || val===undefined) return val;\r\n\t\t\t\tresult = [];\r\n\t\t\t\tvar valPaths = paths;\r\n\t\t\t\tpaths = [];\r\n\t\t\t\tif (rb)\r\n\t\t\t\t\toper(val)\r\n\t\t\t\telse\r\n\t\t\t\t\tP.walk(val,function(i){path=valPaths[i]||path;oper(val[i])});\r\n\t\t\t}\r\n\t\t\tif (P.resultType == \"BOTH\"){\r\n\t\t\t\tpaths = P.asPaths(paths);\r\n\t\t\t\tvar newResult = [];\r\n\t\t\t\tfor (var i =0;i <paths.length;i++)\r\n\t\t\t\t\tnewResult.push({path:paths[i],value:result[i]});\r\n\t\t\t\treturn newResult;\r\n\t\t\t}\r\n\t\t\treturn P.resultType == \"PATH\" ? P.asPaths(paths):result;\r\n\t\t},\r\n\t\twalk: function(val, f){\r\n\t\t\tif (val instanceof Array){\r\n\t\t\t\tfor (var i=0,n=val.length; i<n; i++)\r\n\t\t\t\t\tif (i in val)\r\n\t\t\t\t\t\tf(i);\r\n\t\t\t}\r\n\t\t\telse if (typeof val === \"object\"){\r\n\t\t\t\tfor (var m in val)\r\n\t\t\t\t\tif (val.hasOwnProperty(m))\r\n\t\t\t\t\t\tf(m);\r\n\t\t\t}\r\n\t\t},\r\n\t\teval: function(x, v){\r\n\t\t\ttry { return $ && v && eval(x.replace(/@/g,'v')); }\r\n\t\t\tcatch(e){ throw new SyntaxError(\"jsonPath: \" + e.message + \": \" + x.replace(/@/g, \"v\").replace(/\\^/g, \"_a\")); }\r\n\t\t}\r\n\t};\r\n\r\n\tvar $ = obj;\r\n\tif (expr && obj){\r\n\t\treturn P.exec(P.normalize(expr).slice(1), obj, arg.evalType == \"RESULT\");\r\n\t}\r\n\r\n\treturn false;\r\n\r\n};\r\n"]}