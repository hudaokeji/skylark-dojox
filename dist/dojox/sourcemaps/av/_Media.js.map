{"version":3,"sources":["av/_Media.js"],"names":["define","dojo","experimental","declare","mediaUrl","initialVolume","autoPlay","bufferTime","minBufferTime","updateTime","id","isDebug","percentDownloaded","_flashObject","flashMedia","allowScriptAccess","allowNetworking","wmode","allowFullScreen","_initStatus","this","status","_positionHandle","connect","getTime","onLoad","mov","onDownloaded","percent","onClick","evt","onSwfSized","data","onMetaData","console","warn","duration","onPosition","time","onStart","onPlay","onPause","onEnd","onStop","onBuffer","isBuffering","onError","url","type","toUpperCase","info","code","onStatus","onPlayerStatus","onResize","_figureStatus","pos","_eventFactory","_prevPos","_prevStatus","isStopped","_sub","topic","method","subscribe","_normalizeVolume","vol","_normalizeUrl","_url","log","toLowerCase","indexOf","loc","window","location","href","split","pop","join","destroy","forEach","_subs","s","unsubscribe","_cons","c","disconnect","push"],"mappings":"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","file":"../../av/_Media.js","sourcesContent":["define(['dojo'],function(dojo){\r\n\r\n\tdojo.experimental(\"dojox.av.FLVideo\");\r\n\r\n\treturn dojo.declare(\"dojox.av._Media\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tUsed as a mixin for dojox and AIR media\r\n\t\t// description:\r\n\t\t//\t\tCalculates the current status of the playing media and fires\r\n\t\t//\t\tthe appropriate events.\r\n\r\n\t\tmediaUrl:\"\",\r\n\r\n\t\t// initialVolume: Float?\r\n\t\t//\t\tThe initial volume setting of the player. Acccepts between 0 and 1.\r\n\t\tinitialVolume:1,\r\n\r\n\t\t// autoPlay:Boolean?\r\n\t\t//\t\tWhether the video automatically plays on load or not.\r\n\t\tautoPlay: false,\r\n\r\n\t\t// bufferTime: Number?\r\n\t\t//\t\tTime in milliseconds that the video should be loaded before it will\r\n\t\t//\t\tplay. May pause and resume to build up buffer. Prevents stuttering.\r\n\t\t//\r\n\t\t//\t\tNote: Older FLVs, without a duration, cannot be buffered.\r\n\t\tbufferTime: 2000,\r\n\r\n\t\t// minBufferTime: Number\r\n\t\t//\t\tTime in milliseconds between the playhead time and loaded time that\r\n\t\t//\t\twill trigger the buffer. When buffer is triggered, video will pause\r\n\t\t//\t\tuntil the bufferTime amount is buffered.\r\n\t\t//\t\tNote: Should be a small number, greater than zero.\r\n\t\tminBufferTime:300,\r\n\r\n\t\t// updateTime: Number\r\n\t\t//\t\tHow often, in milliseconds to get an update of the video position.\r\n\t\tupdateTime: 100,\r\n\r\n\t\t// id: String?\r\n\t\t//\t\tThe id of this widget and the id of the SWF movie.\r\n\t\tid:\"\",\r\n\r\n\t\t// isDebug: Boolean?\r\n\t\t//\t\tSetting to true tells the SWF to output log messages to Firebug.\r\n\t\tisDebug: false,\r\n\r\n\t\t// percentDownloaded: read-only-Number\r\n\t\t//\t\tThe percentage the media has downloaded; from 0-100\r\n\t\tpercentDownloaded:0,\r\n\r\n\t\t// _flashObject: read-only-Object\r\n\t\t//\tThe dojox.embed object\r\n\t\t_flashObject:null,\r\n\r\n\t\t// flashMedia: read-only-SWF\r\n\t\t//\t\tThe SWF object. Methods are passed to this.\r\n\t\tflashMedia:null,\r\n\r\n\t\t// allowScriptAccess: String\r\n\t\t//\t\tWhether the SWF can access the container JS\r\n\t\tallowScriptAccess:\"always\",\r\n\r\n\t\t// allowNetworking: String\r\n\t\t//\t\tWhether SWF is restricted to a domain\r\n\t\tallowNetworking: \"all\",\r\n\r\n\t\t// wmode: String\r\n\t\t//\t\tThe render type of the SWF\r\n\t\twmode: \"transparent\",\r\n\r\n\t\t// allowFullScreen: Boolean\r\n\t\t//\t\tWhether to allow the SWF to go to fullscreen\r\n\t\tallowFullScreen:true,\r\n\t\r\n\t\t_initStatus: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnect mediaStatus to the media.\r\n\t\t\t//\r\n\t\t\tthis.status = \"ready\";\r\n\t\t\tthis._positionHandle = dojo.connect(this, \"onPosition\", this, \"_figureStatus\");\r\n\t\r\n\t\t},\r\n\t\r\n\t\t//  ==============  //\r\n\t\t//  Player Getters  //\r\n\t\t//  ==============  //\r\n\t\r\n\t\tgetTime: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the current time of the video\r\n\r\n\t\t\t//\t\tNote:\r\n\t\t\t//\t\tConsider the onPosition event, which returns\r\n\t\t\t//\t\tthe time at a set interval. Too many trips to\r\n\t\t\t//\t\tthe SWF could impact performance.\r\n\t\t\treturn this.flashMedia.getTime(); // Float\r\n\t\t},\r\n\t\r\n\t\t//  =============  //\r\n\t\t//  Player Events  //\r\n\t\t//  =============  //\r\n\t\r\n\t\tonLoad: function(/* SWF */ mov){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFired when the SWF player has loaded\r\n\t\t\t//\t\tNOT when the video has loaded\r\n\t\t},\r\n\t\r\n\t\tonDownloaded: function(/* Number */percent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires the amount of that the media has been\r\n\t\t\t//\t\tdownloaded. Number, 0-100\r\n\t\t},\r\n\t\r\n\t\tonClick: function(/* Object */ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires when the player is clicked\r\n\t\t\t//\t\tCould be used to toggle play/pause, or\r\n\t\t\t//\t\tdo an external activity, like opening a new\r\n\t\t\t//\t\twindow.\r\n\r\n\t\t\t// TODO: Return x/y of click\r\n\t\t},\r\n\t\r\n\t\tonSwfSized: function(/* Object */ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFired on SWF resize, or when its\r\n\t\t\t//\t\ttoggled between fullscreen.\r\n\t\t},\r\n\t\r\n\t\tonMetaData: function(/* Object */ data, /* Object */ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe video properties. Width, height, duration, etc.\r\n\r\n\t\t\t// NOTE: \tif data is empty, this is an older FLV with no meta data.\r\n\t\t\t//\t\t\tDuration cannot be determined. In original FLVs, duration\r\n\t\t\t//\t\t\tcould only be obtained with Flash Media Server.\r\n\t\t\t// NOTE: \tOlder FLVs can still return width and height\r\n\t\t\t//\t\t\tand will do so on a second event call\r\n\r\n\t\t\tconsole.warn(\"onMeta\", data)\r\n\t\t\tthis.duration = data.duration;\r\n\t\t},\r\n\t\r\n\t\tonPosition: function(/* Float */ time){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe position of the playhead in seconds\r\n\t\t},\r\n\t\r\n\t\tonStart: function(/* Object */ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires when video starts\r\n\t\t\t//\t\tGood for setting the play button to pause\r\n\t\t\t//\t\tduring an autoPlay for example\r\n\t\t},\r\n\t\r\n\t\tonPlay: function(/* Object */ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires when video starts and resumes\r\n\t\t},\r\n\t\r\n\t\tonPause: function(/* Object */ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires when the pause button is clicked\r\n\t\t},\r\n\t\r\n\t\tonEnd: function(/* Object */ data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires when video ends\r\n\t\t\t//\t\tCould be used to change pause button to play\r\n\t\t\t//\t\tor show a post video graphic, like YouTube\r\n\t\t},\r\n\t\r\n\t\tonStop: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFire when the Stop button is clicked\r\n\t\t\t\r\n\t\t\t// TODO: \tThis is not hooked up yet and shouldn't\r\n\t\t\t//\t\t\tfire.\r\n\t\t},\r\n\t\r\n\t\tonBuffer: function(/* Boolean */ isBuffering){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFires a boolean to tell if media\r\n\t\t\t//\t\tis paused for buffering or if buffering\r\n\t\t\t//\t\thas finished\r\n\t\t\tthis.isBuffering = isBuffering;\r\n\t\t},\r\n\t\r\n\t\tonError: function(/* Object */ data, /* String */ url){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFired when the player encounters an error\r\n\t\t\t// example:\r\n\t\t\t//\t\t| console.warn(\"ERROR-\"+data.type.toUpperCase()+\":\",\r\n\t\t\t//\t\t|\t\tdata.info.code, \" - URL:\", url);\r\n\t\t\tconsole.warn(\"ERROR-\"+data.type.toUpperCase()+\":\", data.info.code, \" - URL:\", url);\r\n\t\t},\r\n\t\r\n\t\tonStatus: function(/* Object */data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple status\r\n\t\t},\r\n\t\r\n\t\tonPlayerStatus: function(/* Object */data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe status of the video from the SWF\r\n\t\t\t//\t\tplaying, stopped, bufering, etc.\r\n\t\t},\r\n\t\r\n\t\tonResize: function(){\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_figureStatus: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalculate media status, based on playhead movement, and\r\n\t\t\t//\t\tonStop and onStart events\r\n\r\n\t\t\t// TODO:\r\n\t\t\t//\t\tFigure in real status from the media for more accurate results.\r\n\r\n\t\t\tvar pos = this.getTime();\r\n\t\t\t//console.log(pos, this.duration,  (pos>this.duration-.5), (this.duration && pos>this.duration-.5))\r\n\t\r\n\t\t\tif(this.status==\"stopping\"){\r\n\t\t\t\t// stop was fired, need to fake pos==0\r\n\t\t\t\tthis.status = \"stopped\";\r\n\t\t\t\tthis.onStop(this._eventFactory());\r\n\t\r\n\t\t\t}else if(this.status==\"ending\" && pos==this._prevPos){\r\n\t\t\t\tthis.status = \"ended\";\r\n\t\t\t\tthis.onEnd(this._eventFactory());\r\n\t\r\n\t\t\t}else if(this.duration && pos>this.duration-.5){\r\n\t\t\t\tthis.status=\"ending\"\r\n\t\r\n\t\t\t}else if(pos===0 ){//|| this.status == \"stopped\"\r\n\t\t\t\tif(this.status == \"ready\"){\r\n\t\t\t\t\t//never played\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//stopped\r\n\t\t\t\t\tthis.status = \"stopped\";\r\n\t\t\t\t\tif(this._prevStatus != \"stopped\"){\r\n\t\t\t\t\t\tthis.onStop(this._eventFactory());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}else{\r\n\t\t\t\t// pos > 0\r\n\t\t\t\tif(this.status == \"ready\"){\r\n\t\t\t\t\t//started\r\n\t\t\t\t\tthis.status = \"started\";\r\n\t\t\t\t\tthis.onStart(this._eventFactory());\r\n\t\t\t\t\tthis.onPlay(this._eventFactory());\r\n\t\r\n\t\t\t\t}else if(this.isBuffering){\r\n\t\t\t\t\tthis.status = \"buffering\";\r\n\t\r\n\t\t\t\t}else if(this.status == \"started\" || (this.status == \"playing\" &&  pos != this._prevPos)){\r\n\t\t\t\t\tthis.status = \"playing\";\r\n\t\t\t\t\t//this.onPosition(this._eventFactory());\r\n\t\r\n\t\t\t\t}else if(!this.isStopped && this.status == \"playing\" && pos == this._prevPos){\r\n\t\t\t\t\tthis.status = \"paused\";\r\n\t\t\t\t\tconsole.warn(\"pause\", pos, this._prevPos)\r\n\t\t\t\t\tif(this.status != this._prevStatus){\r\n\t\t\t\t\t\tthis.onPause(this._eventFactory());\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}else if((this.status == \"paused\" ||this.status == \"stopped\") && pos != this._prevPos){\r\n\t\t\t\t\tthis.status = \"started\";\r\n\t\t\t\t\tthis.onPlay(this._eventFactory());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._prevPos = pos;\r\n\t\t\tthis._prevStatus = this.status;\r\n\t\t\tthis.onStatus(this.status);\r\n\t\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_eventFactory: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a generic event object.\r\n\t\t\t//\r\n\t\t\tvar evt = {\r\n\t\t\t\t//position:this._channel.position,\r\n\t\t\t\t//seconds:this.toSeconds(this._channel.position*.001),\r\n\t\t\t\t//percentPlayed:this._getPercent(),\r\n\t\t\t\tstatus:this.status\r\n\t\t\t};\r\n\t\t\treturn evt; // Object\r\n\t\t},\r\n\t\r\n\t\r\n\t\r\n\t\t_sub: function(topic, method){\r\n\t\t\t// summary:\r\n\t\t\t//\t\thelper for subscribing to topics\r\n\t\t\tdojo.subscribe(this.id+\"/\"+topic, this, method);\r\n\t\t},\r\n\t\r\n\t\t_normalizeVolume: function(vol){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEnsures volume is less than one\r\n\t\t\t//\r\n\t\t\tif(vol>1){\r\n\t\t\t\twhile(vol>1){\r\n\t\t\t\t\tvol*=.1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn vol;\r\n\t\t},\r\n\t\r\n\t\t_normalizeUrl: function(_url){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks that path is relative to HTML file or\r\n\t\t\t//\t\tconverts it to an absolute path.\r\n\r\n\t\t\tconsole.log(\"  url:\", _url);\r\n\t\r\n\t\t\tif(_url && (_url.toLowerCase().indexOf(\"http\")<0 || _url.indexOf(\"/\") == 0)){\r\n\t\t\t\t//\r\n\t\t\t\t// Appears to be a relative path. Attempt to  convert it to absolute,\r\n\t\t\t\t// so it will better target the SWF.\r\n\t\t\t\tvar loc = window.location.href.split(\"/\");\r\n\t\t\t\tloc.pop();\r\n\t\r\n\t\t\t\tloc = loc.join(\"/\")+\"/\";\r\n\t\t\t\tconsole.log(\"  loc:\", loc);\r\n\t\t\t\t_url = loc+_url;\r\n\t\t\t}\r\n\t\t\treturn _url;\r\n\t\t},\r\n\t\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tdestroys flash\r\n\t\t\tif(!this.flashMedia){\r\n\t\t\t\tthis._cons.push(dojo.connect(this, \"onLoad\", this, \"destroy\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tdojo.forEach(this._subs, function(s){\r\n\t\t\t\tdojo.unsubscribe(s);\r\n\t\t\t});\r\n\t\t\tdojo.forEach(this._cons, function(c){\r\n\t\t\t\tdojo.disconnect(c);\r\n\t\t\t});\r\n\t\t\tthis._flashObject.destroy();\r\n\t\t\t//dojo._destroyElement(this.flashDiv);\r\n\t\r\n\t\t}\r\n\t});\r\n});\r\n"]}