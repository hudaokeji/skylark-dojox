{"version":3,"sources":["av/FLVideo.js"],"names":["define","dojo","dijit","_Widget","Flash","_Media","experimental","declare","_swfPath","moduleUrl","constructor","options","global","swfIsInHTML","postCreate","this","_subs","_cons","mediaUrl","_normalizeUrl","initialVolume","_normalizeVolume","args","path","width","height","minimumVersion","expressInstall","params","allowFullScreen","wmode","allowScriptAccess","allowNetworking","vars","videoUrl","id","autoPlay","volume","isDebug","_sub","_flashObject","dojox","embed","domNode","onError","err","console","error","onLoad","hitch","mov","flashMedia","isPlaying","isStopped","_initStatus","_update","inherited","arguments","play","newUrl","doPlay","pause","onPaused","seek","time","vol","setVolume","doGetVolume","getVolume","_checkBuffer","bufferLength","percentDownloaded","isBuffering","onBuffer","timePercentLoad","duration","minBufferTime","bufferTime","Math","min","getTime","dObj","getLoaded","ceil","bytesLoaded","bytesTotal","onDownloaded","onPosition","buffer","_updateHandle","setTimeout","updateTime","destroy","clearTimeout","disconnect","_positionHandle"],"mappings":"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","file":"../../av/FLVideo.js","sourcesContent":["define(['dojo', 'dijit', 'dijit/_Widget', 'dojox/embed/Flash', 'dojox/av/_Media'],\r\nfunction(dojo, dijit, _Widget, Flash, _Media){\r\n\r\ndojo.experimental(\"dojox.av.FLVideo\");\r\n\r\nreturn dojo.declare(\"dojox.av.FLVideo\", [_Widget, _Media], {\r\n\r\n\t// summary:\r\n\t//\t\tInserts a Flash FLV video into the HTML page and provides methods\r\n\t//\t\tand events for controlling the video. Also plays the H264/M4V codec\r\n\t//\t\twith a little trickery: change the '.M4V' extension to '.flv'.\r\n\t// example:\r\n\t//\t\tmarkup:\r\n\t//\t\t|\t<div id=\"vid\" initialVolume=\".7\",\r\n\t//\t\t|\t\tmediaUrl=\"../resources/Grog.flv\"\r\n\t//\t\t|\t\tdojoType=\"dojox.av.FLVideo\"></div>\r\n\t// example:\r\n\t//\t\tprogrammatic:\r\n\t//\t\t|\tnew dojox.av.FLVideo({\r\n\t//\t\t|\t\tinitialVolume:.7,\r\n\t//\t\t|\t\tmediaUrl:\"../resources/Grog.flv\"\r\n\t//\t\t|\t}, \"vid\");\r\n\r\n\t// mediaUrl: String\r\n\t//\t\tREQUIRED: The Url of the video file that will be played.\r\n\t//\t\tNOTE: Must be either an absolute URL or relative to the HTML file.\r\n\t//\t\tRelative paths will be converted to absolute paths\r\n\r\n\t// _swfPath: Uri\r\n\t//\t\tThe path to the video player SWF resource\r\n\t_swfPath: dojo.moduleUrl(\"dojox.av\", \"resources/video.swf\"),\r\n\r\n\tconstructor: function(/*Object*/options){\r\n\t\t// Provide this function for the SWF to ensure that the it is playing\r\n\t\t// in HTML.\r\n\t\tdojo.global.swfIsInHTML = function(){ return true; }\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize the media.\r\n\r\n\t\tthis._subs = [];\r\n\t\tthis._cons = [];\r\n\t\tthis.mediaUrl = this._normalizeUrl(this.mediaUrl);\r\n\t\tthis.initialVolume = this._normalizeVolume(this.initialVolume);\r\n\r\n\t\tvar args = {\r\n\t\t\tpath:this._swfPath,\r\n\t\t\twidth:\"100%\",\r\n\t\t\theight:\"100%\",\r\n\t\t\tminimumVersion:9,\r\n\t\t\texpressInstall:true,\r\n\t\t\tparams:{\r\n\t\t\t\tallowFullScreen: this.allowFullScreen,\r\n\t\t\t\twmode:this.wmode,\r\n\t\t\t\tallowScriptAccess:this.allowScriptAccess,\r\n\t\t\t\tallowNetworking:this.allowNetworking\r\n\t\t\t},\r\n\t\t\t// only pass in simple variables - no deep objects\r\n\t\t\tvars:{\r\n\t\t\t\tvideoUrl:this.mediaUrl,\r\n\t\t\t\tid:this.id,\r\n\t\t\t\tautoPlay:this.autoPlay,\r\n\t\t\t\tvolume:this.initialVolume,\r\n\t\t\t\tisDebug:this.isDebug\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Setting up dojo.subscribes that listens to events\r\n\t\t//\tfrom the player\r\n\t\tthis._sub(\"stageClick\",  \"onClick\");\r\n\t\tthis._sub(\"stageSized\",  \"onSwfSized\");\r\n\t\tthis._sub(\"mediaStatus\", \"onPlayerStatus\");\r\n\t\tthis._sub(\"mediaMeta\",   \"onMetaData\");\r\n\t\tthis._sub(\"mediaError\",  \"onError\");\r\n\t\tthis._sub(\"mediaStart\",  \"onStart\");\r\n\t\tthis._sub(\"mediaEnd\",    \"onEnd\");\r\n\r\n\t\tthis._flashObject = new dojox.embed.Flash(args, this.domNode);\r\n\t\tthis._flashObject.onError = function(err){\r\n\t\t\tconsole.error(\"Flash Error:\", err);\r\n\t\t};\r\n\t\tthis._flashObject.onLoad = dojo.hitch(this, function(mov){\r\n\t\t\tthis.flashMedia = mov;\r\n\t\t\tthis.isPlaying = this.autoPlay;\r\n\t\t\tthis.isStopped = !this.autoPlay;\r\n\t\t\tthis.onLoad(this.flashMedia);\r\n\t\t\tthis._initStatus();\r\n\t\t\tthis._update();\r\n\t\t});\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\t//  =============================  //\r\n\t//  Methods to control the player  //\r\n\t//  =============================  //\r\n\r\n\tplay: function(/* String? */newUrl){\r\n\t\t// summary:\r\n\t\t//\t\tPlays the video. If an url is passed in, plays the new link.\r\n\t\tthis.isPlaying = true;\r\n\t\tthis.isStopped = false;\r\n\t\tthis.flashMedia.doPlay(this._normalizeUrl(newUrl));\r\n\t},\r\n\r\n\tpause: function(){\r\n\t\t// summary:\r\n\t\t//\t\tPauses the video\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.isStopped = false;\r\n\t\tif(this.onPaused){\r\n\t\t\tthis.onPaused();\r\n\t\t}\r\n\t\tthis.flashMedia.pause();\r\n\t},\r\n\r\n\tseek: function(/* Float */ time ){\r\n\t\t// summary:\r\n\t\t//\t\tGoes to the time passed in the argument\r\n\t\tthis.flashMedia.seek(time);\r\n\t},\r\n\r\n\r\n\t//  =====================  //\r\n\t//  Player Getter/Setters  //\r\n\t//  =====================  //\r\n\r\n\tvolume: function(/* Float */ vol){\r\n\t\t// summary:\r\n\t\t//\t\tSets the volume of the video to the time in the\r\n\t\t// vol:\r\n\t\t//\t\tbetween 0 - 1.\r\n\t\tif(vol){\r\n\t\t\tif(!this.flashMedia) {\r\n\t\t\t\tthis.initialVolume = vol;\r\n\t\t\t}\r\n\t\t\tthis.flashMedia.setVolume(this._normalizeVolume(vol));\r\n\t\t}\r\n\t\tif(!this.flashMedia || !this.flashMedia.doGetVolume) {\r\n\t\t\treturn this.initialVolume;\r\n\t\t}\r\n\t\treturn this.flashMedia.getVolume(); // Float\r\n\t},\r\n\r\n\t//  =============  //\r\n\t//  Player Events  //\r\n\t//  =============  //\r\n\r\n\t/*=====\r\n\tonLoad: function(mov){\r\n\t\t// summary:\r\n\t\t//\t\tFired when the SWF player has loaded\r\n\t\t//\t\tNOT when the video has loaded\r\n\t},\r\n\r\n\tonDownloaded: function(percent){\r\n\t\t// summary:\r\n\t\t//\t\tFires the amount of that the media has been\r\n\t\t//\t\tdownloaded. Number, 0-100\r\n\t},\r\n\r\n\tonClick: function(evt){\r\n\t\t// summary:\r\n\t\t//\t\tFires when the player is clicked\r\n\t\t//\t\tCould be used to toggle play/pause, or\r\n\t\t//\t\tdo an external activity, like opening a new\r\n\t\t//\t\twindow.\r\n\t},\r\n\r\n\tonSwfSized: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tFired on SWF resize, or when its\r\n\t\t//\t\ttoggled between fullscreen.\r\n\t},\r\n\r\n\tonMetaData: function(data, evt){\r\n\t\t// summary:\r\n\t\t//\t\tThe video properties. Width, height, duration, etc.\r\n\t\t//\r\n\t\t//\t\tNOTE: if data is empty, this is an older FLV with no meta data.\r\n\t\t//\t\tDuration cannot be determined. In original FLVs, duration\r\n\t\t//\t\tcould only be obtained with Flash Media Server.\r\n\t\t//\r\n\t\t//\t\tNOTE: Older FLVs can still return width and height\r\n\t\t//\t\tand will do so on a second event call\r\n\t},\r\n\r\n\tonPosition: function( time){\r\n\t\t// summary:\r\n\t\t//\t\tThe position of the playhead in seconds\r\n\t},\r\n\r\n\tonStart: function( data){\r\n\t\t// summary:\r\n\t\t//\t\tFires when video starts\r\n\t\t//\t\tGood for setting the play button to pause\r\n\t\t//\t\tduring an autoPlay for example\r\n\t},\r\n\r\n\tonPlay: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tFires when video starts and resumes\r\n\t},\r\n\r\n\tonPause: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tFires when the pause button is clicked\r\n\t},\r\n\r\n\tonEnd: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tFires when video ends\r\n\t\t//\t\tCould be used to change pause button to play\r\n\t\t//\t\tor show a post video graphic, like YouTube\r\n\t},\r\n\r\n\tonStop: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFire when the Stop button is clicked\r\n\t\t\r\n\t\t// TODO: \tThis is not hooked up yet and shouldn't\r\n\t\t//\t\t\tfire.\r\n\t},\r\n\r\n\tonBuffer: function(isBuffering){\r\n\t\t// summary:\r\n\t\t//\t\tFires a boolean to tell if media\r\n\t\t//\t\tis paused for buffering or if buffering\r\n\t\t//\t\thas finished\r\n\t\tthis.isBuffering = isBuffering;\r\n\t},\r\n\r\n\tonError: function(data, url){\r\n\t\t// summary:\r\n\t\t//\t\tFired when the player encounters an error\r\n\t\t// example:\r\n\t\t//\t\t| console.warn(\"ERROR-\"+data.type.toUpperCase()+\":\",\r\n\t\t//\t\t|\t\tdata.info.code, \" - URL:\", url);\r\n\t},\r\n\r\n\tonStatus: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tSimple status\r\n\t},\r\n\r\n\tonPlayerStatus: function(data){\r\n\t\t// summary:\r\n\t\t//\t\tThe status of the video from the SWF\r\n\t\t//\t\tplaying, stopped, bufering, etc.\r\n\t},\r\n\r\n\tonResize: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFired on page resize\r\n\t},\r\n\t=====*/\r\n\r\n\t//  ===============  //\r\n\t//  Private Methods  //\r\n\t//  ===============  //\r\n\r\n\t_checkBuffer: function(/* Float */time, /* Float */bufferLength){\r\n\t\t// summary:\r\n\t\t//\t\tChecks that there is a proper buffer time between\r\n\t\t//\t\tcurrent playhead time and the amount of data loaded.\r\n\t\t//\t\tWorks only on FLVs with a duration (not older). Pauses\r\n\t\t//\t\tthe video while continuing download.\r\n\r\n\t\tif(this.percentDownloaded == 100){\r\n\t\t\tif(this.isBuffering){\r\n\t\t\t\tthis.onBuffer(false);\r\n\t\t\t\tthis.flashMedia.doPlay();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(!this.isBuffering && bufferLength<.1){\r\n\t\t\tthis.onBuffer(true);\r\n\t\t\tthis.flashMedia.pause();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar timePercentLoad = this.percentDownloaded*.01*this.duration;\r\n\r\n\t\t// check if start buffer needed\r\n\t\tif(!this.isBuffering && time+this.minBufferTime*.001>timePercentLoad){\r\n\t\t\tthis.onBuffer(true);\r\n\t\t\tthis.flashMedia.pause();\r\n\r\n\t\t// check if end buffer needed\r\n\t\t}else if(this.isBuffering && time+this.bufferTime*.001<=timePercentLoad){\r\n\t\t\tthis.onBuffer(false);\r\n\t\t\tthis.flashMedia.doPlay();\r\n\t\t}\r\n\r\n\t},\r\n\t_update: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHelper function to fire onPosition, check download progress,\r\n\t\t//\t\tand check buffer.\r\n\t\tvar time = Math.min(this.getTime() || 0, this.duration);\r\n\r\n\t\tvar dObj = this.flashMedia.getLoaded();\r\n\t\tthis.percentDownloaded = Math.ceil(dObj.bytesLoaded/dObj.bytesTotal*100);\r\n\t\tthis.onDownloaded(this.percentDownloaded);\r\n\t\tthis.onPosition(time);\r\n\t\tif(this.duration){\r\n\t\t\tthis._checkBuffer(time, dObj.buffer);\r\n\t\t}\r\n\t\t// FIXME: need to remove this on destroy\r\n\t\tthis._updateHandle = setTimeout(dojo.hitch(this, \"_update\"), this.updateTime);\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\tclearTimeout(this._updateHandle);\r\n\t\tdojo.disconnect(this._positionHandle);\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n\r\n});\r\n"]}