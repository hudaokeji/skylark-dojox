{"version":3,"sources":["data/RailsStore.js"],"names":["define","dojo","dojox","declare","data","JsonRestStore","constructor","preamble","options","target","service","replace","rpc","Rest","this","id","args","query","ident","url","isObject","objectToQuery","queryStr","indexOf","isString","toString","isSync","_sync","handleAs","contentType","sync","headers","Accept","Range","start","count","undefined","fetch","addToQueryStr","obj","Error","page","per_page","sort","queryObj","sortBy","sortDir","forEach","item","push","attribute","descending","inherited","arguments","_processResults","results","deferred","items","rootAttribute","idAttribute","console","debug","map","length","totalCount","fullLength","request"],"mappings":"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","file":"../../data/RailsStore.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojox/data/JsonRestStore\"], function(dojo, dojox) {\r\n\r\n// Contains code donated by Travis Tilley under CLA\r\nreturn dojo.declare(\"dojox.data.RailsStore\", dojox.data.JsonRestStore, {\r\n\tconstructor: function(){\r\n\t\t// summary:\r\n\t\t//\t\tRailsStore is a data store for interacting with RESTful Rails controllers\r\n\t},\r\n\tpreamble: function(options){\r\n\t\tif(typeof options.target == 'string' && !options.service){\r\n\t\t\tvar target = options.target.replace(/\\/$/g, '');\r\n\r\n\t\t\t// Special getRequest handler for handling content type negotiation via\r\n\t\t\t// the Rails format extension, as well as properly setting the ID param\r\n\t\t\t// in the URL.\r\n\t\t\tvar getRequest = function(id, args){\r\n\t\t\t\targs = args || {};\r\n\t\t\t\tvar url = target;\r\n\t\t\t\tvar query;\r\n\t\t\t\tvar ident;\r\n\r\n\t\t\t\tif(dojo.isObject(id)){\r\n\t\t\t\t\tident = '';\r\n\t\t\t\t\tquery = '?' + dojo.objectToQuery(id);\r\n\t\t\t\t}else if(args.queryStr && args.queryStr.indexOf('?') != -1){\r\n\t\t\t\t\tident = args.queryStr.replace(/\\?.*/, '');\r\n\t\t\t\t\tquery = args.queryStr.replace(/[^?]*\\?/g, '?');\r\n\t\t\t\t}else if(dojo.isString(args.query) && args.query.indexOf('?') != -1){\r\n\t\t\t\t\tident = args.query.replace(/\\?.*/, '');\r\n\t\t\t\t\tquery = args.query.replace(/[^?]*\\?/g, '?');\r\n\t\t\t\t}else{\r\n\t\t\t\t\tident = id ? id.toString() : '';\r\n\t\t\t\t\tquery = '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(ident.indexOf('=') != -1){\r\n\t\t\t\t\tquery = ident;\r\n\t\t\t\t\tident = '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(ident){\r\n\t\t\t\t\turl = url + '/' + ident + '.json' + query;\r\n\t\t\t\t}else{\r\n\t\t\t\t\turl = url + '.json' + query;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar isSync = dojox.rpc._sync;\r\n\t\t\t\tdojox.rpc._sync = false;\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\turl : url,\r\n\t\t\t\t\thandleAs : 'json',\r\n\t\t\t\t\tcontentType : 'application/json',\r\n\t\t\t\t\tsync : isSync,\r\n\t\t\t\t\theaders : {\r\n\t\t\t\t\t\tAccept : 'application/json,application/javascript',\r\n\t\t\t\t\t\tRange : args && (args.start >= 0 || args.count >= 0)\r\n\t\t\t\t\t\t\t\t? \"items=\"\r\n\t\t\t\t\t\t\t\t\t\t+ (args.start || '0')\r\n\t\t\t\t\t\t\t\t\t\t+ '-'\r\n\t\t\t\t\t\t\t\t\t\t+ ((args.count && (args.count\r\n\t\t\t\t\t\t\t\t\t\t\t\t+ (args.start || 0) - 1)) || '')\r\n\t\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\toptions.service = dojox.rpc.Rest(this.target, true, null,\r\n\t\t\t\t\tgetRequest);\r\n\t\t}\r\n\t},\r\n\tfetch: function(args){\r\n\t\targs = args || {};\r\n\t\tfunction addToQueryStr(obj){\r\n\t\t\tfunction buildInitialQueryString(){\r\n\t\t\t\tif(args.queryStr == null){\r\n\t\t\t\t\targs.queryStr = '';\r\n\t\t\t\t}\r\n\t\t\t\tif(dojo.isObject(args.query)){\r\n\t\t\t\t\targs.queryStr = '?' + dojo.objectToQuery(args.query);\r\n\t\t\t\t}else if(dojo.isString(args.query)){\r\n\t\t\t\t\targs.queryStr = args.query;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfunction separator(){\r\n\t\t\t\tif(args.queryStr.indexOf('?') == -1){\r\n\t\t\t\t\treturn '?';\r\n\t\t\t\t}else{\r\n\t\t\t\t\treturn '&';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(args.queryStr == null){\r\n\t\t\t\tbuildInitialQueryString();\r\n\t\t\t}\r\n\t\t\targs.queryStr = args.queryStr + separator() + dojo.objectToQuery(obj);\r\n\t\t}\r\n\t\tif(args.start || args.count){\r\n\t\t\t// in addition to the content range headers, also provide query parameters for use\r\n\t\t\t// with the will_paginate plugin if so desired.\r\n\t\t\tif((args.start || 0) % args.count){\r\n\t\t\t\tthrow new Error(\"The start parameter must be a multiple of the count parameter\");\r\n\t\t\t}\r\n\t\t\taddToQueryStr({\r\n\t\t\t\tpage: ((args.start || 0) / args.count) + 1,\r\n\t\t\t\tper_page: args.count\r\n\t\t\t});\r\n\t\t}\r\n\t\tif(args.sort){\r\n\t\t\t// make the sort into query parameters\r\n\t\t\tvar queryObj = {\r\n\t\t\t\tsortBy : [],\r\n\t\t\t\tsortDir : []\r\n\t\t\t};\r\n\r\n\t\t\tdojo.forEach(args.sort, function(item){\r\n\t\t\t\tqueryObj.sortBy.push(item.attribute);\r\n\t\t\t\tqueryObj.sortDir.push(!!item.descending ? 'DESC' : 'ASC');\r\n\t\t\t});\r\n\r\n\t\t\taddToQueryStr(queryObj);\r\n\t\t\tdelete args.sort;\r\n\t\t}\r\n\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\t_processResults: function(results, deferred){\r\n\t\tvar items;\r\n\r\n\t\t/*\r\n\t\t * depending on the ActiveRecord::Base.include_root_in_json setting,\r\n\t\t * you might get back an array of attribute objects, or an array of\r\n\t\t * objects with the attribute object nested under an attribute having\r\n\t\t * the same name as the (remote and unguessable) model class.\r\n\t\t *\r\n\t\t * 'Example' without root_in_json: [{'id':1, 'text':'first'}]\r\n\t\t * 'Example' with root_in_json: [{'example':{'id':1, 'text':'first'}}]\r\n\t\t */\r\n\t\tif((typeof this.rootAttribute == 'undefined') && results[0]){\r\n\t\t\tif(results[0][this.idAttribute]){\r\n\t\t\t\tthis.rootAttribute = false;\r\n\t\t\t\tconsole.debug('RailsStore: without root_in_json');\r\n\t\t\t}else{\r\n\t\t\t\tfor(var attribute in results[0]){\r\n\t\t\t\t\tif(results[0][attribute][this.idAttribute]){\r\n\t\t\t\t\t\tthis.rootAttribute = attribute;\r\n\t\t\t\t\t\tconsole.debug('RailsStore: with root_in_json, attribute: ' + attribute);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(this.rootAttribute){\r\n\t\t\titems = dojo.map(results, function(item){\r\n\t\t\t\treturn item[this.rootAttribute];\r\n\t\t\t}, this);\r\n\t\t}else{\r\n\t\t\titems = results;\r\n\t\t}\r\n\r\n\t\t// index the results\r\n\t\tvar count = results.length;\r\n\t\t// if we don't know the length, and it is partial result, we will guess that it is twice as big, that will work for most widgets\r\n\t\treturn {totalCount:deferred.fullLength || (deferred.request.count == count ? (deferred.request.start || 0) + count * 2 : count), items: items};\r\n\t}\r\n});\r\n\r\n});\r\n"]}