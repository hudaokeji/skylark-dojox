{"version":3,"sources":["data/WikipediaStore.js"],"names":["define","kernel","lang","declare","scriptIO","ioQuery","Service","ServiceStore","experimental","constructor","options","service","this","svc","require","toUrl","query","idAttribute","labelAttribute","fetch","request","rq","mixin","action","list","srwhat","srsearch","text","start","sroffset","count","srlimit","page","title","inherited","arguments","_processResults","results","def","parse","queryToObject","ioArgs","url","split","search","_thisStore","i","_loadObject","callback","onItem"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,kBAAmB,qBAAsB,iBACpE,gBAAiB,oBAAqB,2BACtC,SAASC,EAAQC,EAAMC,EAASC,EAAUC,EAASC,EAASC,GAI9D,OAFAN,EAAOO,aAAa,6BAEbL,EAAQ,4BAA6BI,GAgB3CE,YAAa,SAASC,GACrB,GAAGA,GAAWA,EAAQC,QACrBC,KAAKD,QAAUD,EAAQC,YACnB,CACJ,IAAIE,EAAM,IAAIP,EAAQQ,QAAQC,MAAM,uCACpCH,KAAKD,QAAUE,EAAIG,MAGpBJ,KAAKK,YAAcL,KAAKM,eAAiB,SAG1CC,MAAO,SAAsBC,GA+B5B,IAAIC,EAAKnB,EAAKoB,SAAUF,EAAQJ,OAqBhC,OApBGK,GAAQA,EAAGE,QAAwB,UAAdF,EAAGE,OAMJ,UAAdF,EAAGE,SAEXF,EAAGG,KAAO,SACVH,EAAGI,OAAS,OACZJ,EAAGK,SAAWL,EAAGM,KACdP,EAAQQ,QACVP,EAAGQ,SAAWT,EAAQQ,MAAM,GAE1BR,EAAQU,QACVT,EAAGU,QAAUX,EAAQU,OAAS,IAAM,IAAMV,EAAQU,cAE5CT,EAAGM,OAfVN,EAAGE,OAAS,QACZF,EAAGW,KAAOX,EAAGY,aACNZ,EAAGY,OAeXb,EAAQJ,MAAQK,EACTT,KAAKsB,UAAUC,YAGvBC,gBAAiB,SAASC,EAASC,GAClC,GAAGD,EAAQE,MAEVF,EAAQE,MAAMN,MAAQ5B,EAAQmC,cAAcF,EAAIG,OAAOC,IAAIC,MAAM,KAAK,IAAIX,KAC1EK,GAAWA,EAAQE,YAEd,GAAGF,EAAQrB,OAASqB,EAAQrB,MAAM4B,OAAO,CAG9CP,EAAUA,EAAQrB,MAAM4B,OACxB,IAAIC,EAAajC,KACjB,IAAI,IAAIkC,KAAKT,EACZA,EAAQS,GAAGC,YAAc,SAASC,GACjCH,EAAW1B,OACVH,OAASO,OAAO,QAASU,MAAMrB,KAAKqB,OACpCgB,OAAQD,WAEFpC,KAAKmC,aAIf,OAAOnC,KAAKsB,UAAUC","file":"../../data/WikipediaStore.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/io/script\", \r\n\t\t\"dojo/io-query\", \"dojox/rpc/Service\", \"dojox/data/ServiceStore\"], \r\n  function(kernel, lang, declare, scriptIO, ioQuery, Service, ServiceStore) {\r\n\r\nkernel.experimental(\"dojox.data.WikipediaStore\");\r\n\r\nreturn declare(\"dojox.data.WikipediaStore\", ServiceStore, {\r\n\t// summary:\r\n\t//\t\tInitializer for the Wikipedia data store interface.\r\n\t// description:\r\n\t//\t\tThe WikipediaStore is a data store interface to Wikipedia, using the\r\n\t//\t\tWikipedia SMD spec from dojox.rpc. It currently is useful only for\r\n\t//\t\tfinding articles that contain some particular text or grabbing single\r\n\t//\t\tarticles by full name; no wildcards or other filtering are supported.\r\n\t// example:\r\n\t//\t\t|\tvar store = new dojox.data.WikipediaStore();\r\n\t//\t\t|\tstore.fetch({\r\n\t//\t\t|\t\tquery: {title:\"Dojo Toolkit\"},\r\n\t//\t\t|\t\tonItem: function(item){\r\n\t//\t\t|\t\t\tdojo.byId(\"somediv\").innerHTML = item.text[\"*\"];\r\n\t//\t\t|\t\t}\r\n\t//\t\t|\t});\r\n\tconstructor: function(options){\r\n\t\tif(options && options.service){\r\n\t\t\tthis.service = options.service;\r\n\t\t}else{\r\n\t\t\tvar svc = new Service(require.toUrl(\"dojox/rpc/SMDLibrary/wikipedia.smd\"));\r\n\t\t\tthis.service = svc.query;\r\n\t\t}\r\n\r\n\t\tthis.idAttribute = this.labelAttribute = \"title\";\r\n\t},\r\n\r\n\tfetch: function(/* object */ request){\r\n\t\t// summary:\r\n\t\t//\t\tFetch a page or some partially-loaded search results from\r\n\t\t//\t\tWikipedia. Note that there isn't a way to sort data coming\r\n\t\t//\t\tin from the API, so we just ignore the *sort* parameter.\r\n\t\t// example:\r\n\t\t//\t\tLoading a page:\r\n\t\t//\t\t|\tstore.fetch({\r\n\t\t//\t\t|\t\tquery: {title:\"Dojo Toolkit\"},\r\n\t\t//\t\t|\t\t// define your handlers here\r\n\t\t//\t\t|\t});\r\n\t\t// example:\r\n\t\t//\t\tSearching for pages containing \"dojo\":\r\n\t\t//\t\t|\tstore.fetch({\r\n\t\t//\t\t|\t\tquery: {\r\n\t\t//\t\t|\t\t\taction: \"query\",\r\n\t\t//\t\t|\t\t\ttext: \"dojo\"\r\n\t\t//\t\t|\t\t},\r\n\t\t//\t\t|\t\t// define your handlers here\r\n\t\t//\t\t|\t});\r\n\t\t// example:\r\n\t\t//\t\tSearching for the next 50 pages containing \"dojo\":\r\n\t\t//\t\t|\tstore.fetch({\r\n\t\t//\t\t|\t\tquery: {\r\n\t\t//\t\t|\t\t\taction: \"query\",\r\n\t\t//\t\t|\t\t\ttext: \"dojo\",\r\n\t\t//\t\t|\t\t\tstart: 10,\r\n\t\t//\t\t|\t\t\tcount: 50 // max 500; will be capped if necessary\r\n\t\t//\t\t|\t\t},\r\n\t\t//\t\t|\t\t// define your handlers here\r\n\t\t//\t\t|\t});\r\n\t\tvar rq = lang.mixin({}, request.query);\r\n\t\tif(rq && (!rq.action || rq.action === \"parse\")){\r\n\t\t\t// default to a single page fetch\r\n\t\t\trq.action = \"parse\";\r\n\t\t\trq.page = rq.title;\r\n\t\t\tdelete rq.title;\r\n\r\n\t\t}else if(rq.action === \"query\"){\r\n\t\t\t// perform a full text search on page content\r\n\t\t\trq.list = \"search\";\r\n\t\t\trq.srwhat = \"text\";\r\n\t\t\trq.srsearch = rq.text;\r\n\t\t\tif(request.start){\r\n\t\t\t\trq.sroffset = request.start-1;\r\n\t\t\t}\r\n\t\t\tif(request.count){\r\n\t\t\t\trq.srlimit = request.count >= 500 ? 500 : request.count;\r\n\t\t\t}\r\n\t\t\tdelete rq.text;\r\n\t\t}\r\n\t\trequest.query = rq;\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\r\n\t_processResults: function(results, def){\r\n\t\tif(results.parse){\r\n\t\t\t// loading a complete page\r\n\t\t\tresults.parse.title = ioQuery.queryToObject(def.ioArgs.url.split(\"?\")[1]).page;\r\n\t\t\tresults = [results.parse];\r\n\r\n\t\t}else if(results.query && results.query.search){\r\n\t\t\t// loading some search results; all we have here is page titles,\r\n\t\t\t// so we mark our items as incomplete\r\n\t\t\tresults = results.query.search;\r\n\t\t\tvar _thisStore = this;\r\n\t\t\tfor(var i in results){\r\n\t\t\t\tresults[i]._loadObject = function(callback){\r\n\t\t\t\t\t_thisStore.fetch({\r\n\t\t\t\t\t\tquery: { action:\"parse\", title:this.title },\r\n\t\t\t\t\t\tonItem: callback\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdelete this._loadObject;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t}\r\n});\r\n\r\n});\r\n\r\n"]}