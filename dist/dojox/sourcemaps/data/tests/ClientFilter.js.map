{"version":3,"sources":["data/tests/ClientFilter.js"],"names":["dojo","provide","require","mockService","query","dfd","Deferred","setTimeout","callback","firstName","lastName","__id","servicePath","jsonStore","dojox","data","JsonRestStore","service","doh","register","t","d","fetch","sort","attribute","descending","onComplete","items","request","is","length","newJack","console","log","newItem","finished","queryOptions","cache","newJoe","updateResultSet","jackJones","setValue","f","deleteItem","serverVersion","_updates","last","getValue","first"],"mappings":"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","file":"../../../data/tests/ClientFilter.js","sourcesContent":["dojo.provide(\"dojox.data.tests.ClientFilter\");\r\ndojo.require(\"dojox.data.ClientFilter\");\r\ndojo.require(\"dojox.data.JsonRestStore\");\r\n\r\n\r\nmockService = function(query){\r\n\tvar dfd = new dojo.Deferred();\r\n\tsetTimeout(function(){\r\n\t\tdfd.callback([{firstName:\"John\",lastName:\"Smith\",__id:\"mock/1\"},\r\n\t\t\t\t{firstName:\"Jim\",lastName:\"Smith\",__id:\"mock/2\"},\r\n\t\t\t\t{firstName:\"Jill\",lastName:\"Smith\",__id:\"mock/3\"},\r\n\t\t\t\t{firstName:\"Jerry\",lastName:\"Smith\",__id:\"mock/4\"}]);\r\n\t},10);\r\n\treturn dfd;\r\n};\r\nmockService.servicePath = \"mock/\";\r\njsonStore = new dojox.data.JsonRestStore({service:mockService});\r\n\r\ndoh.register(\"dojox.data.tests.ClientFilter\",\r\n\t[\r\n\t\tfunction updateWhileLoading(t) {\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tjsonStore.fetch({query:{lastName:\"Smith\",firstName:\"*\"},sort:[{attribute:\"firstName\",descending:true}],\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tt.is(5, items.length); // make sure it was added\r\n\t\t\t\t\tt.is(newJack,items[4]); // make sure it is in the right location\r\n\t\t\t\t\tconsole.log(\"updateWhileLoading\",items[4],newJack);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tnewJack = jsonStore.newItem({firstName:\"Jack\",lastName:\"Smith\"}); // this should fire while we are waiting for the fetch response\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction makeChanges(t) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on JsonRestStore of a simple query.\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tjsonStore.fetch({queryOptions:{cache:true},query:{lastName:\"Smith\",firstName:\"*\"},sort:[{attribute:\"firstName\",descending:true}],\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tt.is(5, items.length); // make sure it was added\r\n\t\t\t\t\tt.is(newJack,items[4]); // make sure it is in the right location\r\n\t\t\t\t\tconsole.log(\"items[4]\",items[4]);\r\n\t\t\t\t\tvar newJoe = jsonStore.newItem({firstName:\"Joe\",lastName:\"Smith\"});\r\n\t\t\t\t\tt.is(5, items.length); // make sure it was not added yet\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(6, items.length); // make sure it was added\r\n\t\t\t\t\tt.is(newJoe,items[1]); // make sure it is in the right location\r\n\t\t\t\t\tvar jackJones = jsonStore.newItem({firstName:\"Jack\",lastName:\"Jones\"});\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(6, items.length); // make sure it is not added\r\n\t\t\t\t\tjsonStore.setValue(newJoe,\"firstName\",\"Jesse\");\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(6, items.length); // make sure it is the same\r\n\t\t\t\t\tt.is(newJoe,items[3]); // make sure it is in the new right location\r\n\t\t\t\t\tt.f(newJoe==items[1]); // make sure it is not in the old location\r\n\t\t\t\t\tjsonStore.deleteItem(newJack);\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(5, items.length); // make sure it is has been removed\r\n\t\t\t\t\tjsonStore.setValue(newJoe,\"lastName\",\"Baker\");\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(4, items.length); // make sure it is has been removed\r\n\t\t\t\t\tjsonStore.setValue(jackJones,\"lastName\",\"Smith\");\r\n\t\t\t\t\tjsonStore.updateResultSet(items, request);\r\n\t\t\t\t\tt.is(5, items.length); // make sure it is has been added\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconsole.log(\"sent first\");\r\n\t\t\tvar finished;\r\n\t\t\tjsonStore.fetch({query:{lastName:\"Smith\",firstName:\"Jack\"},sort:[{attribute:\"firstName\",descending:true}],\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tconsole.log(\"items first\",items);\r\n\t\t\t\t\tfinished = true;\r\n\t\t\t\t\tt.is(1, items.length); // make sure we get the correct number of items\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tconsole.log(\"sent seconds\");\r\n\t\t\tt.f(finished); // this should finish synchronously, because we should have it in the cache\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction cachedResults(t) {\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tvar finished;\r\n\t\t\tjsonStore.fetch({query:{lastName:\"Smith\",firstName:\"Jack\"},sort:[{attribute:\"firstName\",descending:true}],\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tconsole.log(\"items\",items);\r\n\t\t\t\t\tfinished = true;\r\n\t\t\t\t\tt.is(1, items.length); // make sure we get the correct number of items\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tt.t(finished); // this should finish synchronously, because we should have it in the cache\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction repeatedQueries(t) {\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tvar finished;\r\n\t\t\tjsonStore.fetch({queryOptions:{cache:true},query:{},\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tconsole.log(\"items\",items);\r\n\t\t\t\t\tt.is(6, items.length); // make sure we get the correct number of items\r\n\t\t\t\t\tjsonStore.newItem({firstName:\"Jack\",lastName:\"Jones\"});\r\n\t\t\t\t\tjsonStore.fetch({query:{},\r\n\t\t\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\t\t\tt.is(7, items.length); // make sure we get the correct number of items\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tjsonStore.serverVersion = jsonStore._updates.length;\r\n\t\t\t\t\tjsonStore.newItem({firstName:\"Jack\",lastName:\"Jones\"});\r\n\t\t\t\t\tjsonStore.fetch({query:{},\r\n\t\t\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\t\t\tfinished = true;\r\n\t\t\t\t\t\t\tt.is(8, items.length); // make sure we get the correct number of items\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\t\r\n\t\tfunction sorting(t) {\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tvar finished;\r\n\t\t\t// test sorting. Descending order should be John,Jim,Jill,Jerry,Jack\r\n\t\t\tjsonStore.fetch({query:{lastName:\"Smith\",firstName:\"*\"},sort:[{attribute:\"firstName\",descending:true}],\r\n\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\tvar last = jsonStore.getValue(items[0], \"firstName\");\r\n\t\t\t\t\tconsole.log(\"last name: \",last, items[0]);\r\n\r\n\t\t\t\t\tt.is(\"John\", last); // make sure we get the correct number of items\r\n\r\n\t\t\t\t\tjsonStore.fetch({query:{lastName:\"Smith\",firstName:\"*\"},sort:[{attribute:\"firstName\"}],\r\n\t\t\t\t\t\tonComplete: function(items, request){\r\n\t\t\t\t\t\t\tvar first = jsonStore.getValue(items[0], \"firstName\");\r\n\t\t\t\t\t\t\tconsole.log(\"first name\",first, items[0]);\r\n\t\t\t\t\t\t\tfinished = true;\r\n\t\t\t\t\t\t\tt.is(\"Jack\", first); // make sure we get the correct number of items\r\n\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tt.t(finished); // this should finish synchronously, because we should have it in the cache\r\n\t\t\treturn d;\r\n\t\t}\r\n\t\t\r\n\t]\r\n);\r\n"]}