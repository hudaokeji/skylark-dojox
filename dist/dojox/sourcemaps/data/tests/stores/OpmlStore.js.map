{"version":3,"sources":["data/tests/stores/OpmlStore.js"],"names":["dojo","provide","require","dojox","data","tests","stores","OpmlStore","getDatasource","filepath","dataSource","isBrowser","url","toUrl","toString","opmlData","verifyItems","opmlStore","items","attribute","compareArray","length","i","getValue","error","t","d","errData","errback","doh","register","args","Deferred","fetch","onComplete","is","callback","onError","partial","query","text","request","done","console","log","getIdentity","fetchItemByIdentity","identity","onItem","item","assertTrue","queryOptions","deep","count","onBegin","size","requestObj","isItem","dumpFirstFetch","start","dumpSecondFetch","dumpThirdFetch","dumpFourthFetch","dumpFifthFetch","dumpSixthFetch","assertEqual","label","getLabel","labelList","getLabelAttributes","isArray","firstChild","children","getValues","hasAttribute","passed","e","containsValue","attributes","getAttributes","features","getFeatures","ignoreCase","sort","descending","testStore","readApi","api","Read","charAt","identityApi","Identity"],"mappings":"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","file":"../../../../data/tests/stores/OpmlStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.OpmlStore\");\r\ndojo.require(\"dojox.data.OpmlStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\ndojo.require(\"dojo.data.api.Identity\");\r\n\r\ndojox.data.tests.stores.OpmlStore.getDatasource = function(filepath){\r\n\t// summary:\r\n\t//\t\tA simple helper function for getting the sample data used in each of the tests.\r\n\t// description:\r\n\t//\t\tA simple helper function for getting the sample data used in each of the tests.\r\n\t\r\n\tvar dataSource = {};\r\n\tif(dojo.isBrowser){\r\n\t\tdataSource.url = require.toUrl(\"dojox/data/tests/\" + filepath).toString();\r\n\t}else{\r\n\t\t// When running tests in Rhino, xhrGet is not available,\r\n\t\t// so we have the file data in the code below.\r\n\t\tswitch(filepath){\r\n\t\t\tcase \"stores/geography.xml\":\r\n\t\t\t\tvar opmlData = \"\";\r\n\t\t\t\topmlData += '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\\n';\r\n\t\t\t\topmlData += '\t<opml version=\"1.0\">\\n';\r\n\t\t\t\topmlData += '\t\t<head>\\n';\r\n\t\t\t\topmlData += '\t\t\t<title>geography.opml</title>\\n';\r\n\t\t\t\topmlData += '\t\t\t<dateCreated>2006-11-10</dateCreated>\\n';\r\n\t\t\t\topmlData += '\t\t\t<dateModified>2006-11-13</dateModified>\\n';\r\n\t\t\t\topmlData += '\t\t\t<ownerName>Magellan, Ferdinand</ownerName>\\n';\r\n\t\t\t\topmlData += '\t\t</head>\\n';\r\n\t\t\t\topmlData += '\t\t<body>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Africa\" type=\"continent\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Egypt\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Kenya\" type=\"country\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Nairobi\" type=\"city\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Mombasa\" type=\"city\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Sudan\" type=\"country\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Khartoum\" type=\"city\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Asia\" type=\"continent\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"China\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"India\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Russia\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Mongolia\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Australia\" type=\"continent\" population=\"21 million\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Australia\" type=\"country\" population=\"21 million\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Europe\" type=\"continent\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Germany\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"France\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Spain\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Italy\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"North America\" type=\"continent\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Mexico\" type=\"country\" population=\"108 million\" area=\"1,972,550 sq km\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Mexico City\" type=\"city\" population=\"19 million\" timezone=\"-6 UTC\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Guadalajara\" type=\"city\" population=\"4 million\" timezone=\"-6 UTC\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Canada\" type=\"country\" population=\"33 million\" area=\"9,984,670 sq km\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Ottawa\" type=\"city\" population=\"0.9 million\" timezone=\"-5 UTC\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t\t<outline text=\"Toronto\" type=\"city\" population=\"2.5 million\" timezone=\"-5 UTC\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"United States of America\" type=\"country\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"South America\" type=\"continent\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Brazil\" type=\"country\" population=\"186 million\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Argentina\" type=\"country\" population=\"40 million\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t</body>\\n';\r\n\t\t\t\topmlData += '\t</opml>\\n';\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"stores/geography_withspeciallabel.xml\":\r\n\t\t\t\tvar opmlData = \"\";\r\n\t\t\t\topmlData += '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\\n';\r\n\t\t\t\topmlData += '<opml version=\"1.0\">\\n';\r\n\t\t\t\topmlData += '\t<head>\\n';\r\n\t\t\t\topmlData += '\t\t<title>geography.opml</title>\\n';\r\n\t\t\t\topmlData += '\t\t<dateCreated>2006-11-10</dateCreated>\\n';\r\n\t\t\t\topmlData += '\t\t<dateModified>2006-11-13</dateModified>\\n';\r\n\t\t\t\topmlData += '\t\t<ownerName>Magellan, Ferdinand</ownerName>\\n';\r\n\t\t\t\topmlData += '\t</head>\\n';\r\n\t\t\t\topmlData += '\t<body>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"Africa\" type=\"continent\" label=\"Continent/Africa\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Egypt\" type=\"country\" label=\"Country/Egypt\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Kenya\" type=\"country\" label=\"Country/Kenya\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Nairobi\" type=\"city\" label=\"City/Nairobi\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Mombasa\" type=\"city\" label=\"City/Mombasa\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Sudan\" type=\"country\" label=\"Country/Sudan\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Khartoum\" type=\"city\" label=\"City/Khartoum\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"Asia\" type=\"continent\" label=\"Continent/Asia\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"China\" type=\"country\" label=\"Country/China\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"India\" type=\"country\" label=\"Country/India\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Russia\" type=\"country\" label=\"Country/Russia\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Mongolia\" type=\"country\" label=\"Country/Mongolia\"/>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"Australia\" type=\"continent\" population=\"21 million\" label=\"Continent/Australia\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Australia\" type=\"country\" population=\"21 million\" label=\"Country/Australia\"/>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"Europe\" type=\"continent\" label=\"Contintent/Europe\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Germany\" type=\"country\" label=\"Country/Germany\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"France\" type=\"country\"  label=\"Country/France\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Spain\" type=\"country\"   label=\"Country/Spain\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Italy\" type=\"country\"   label=\"Country/Italy\"/>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"North America\" type=\"continent\" label=\"Continent/North America\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Mexico\" type=\"country\" population=\"108 million\" area=\"1,972,550 sq km\" label=\"Country/Mexico\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Mexico City\" type=\"city\" population=\"19 million\" timezone=\"-6 UTC\" label=\"City/Mexico City\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Guadalajara\" type=\"city\" population=\"4 million\" timezone=\"-6 UTC\"  label=\"City/Guadalajara\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Canada\" type=\"country\" population=\"33 million\" area=\"9,984,670 sq km\" label=\"Country/Canada\">\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Ottawa\" type=\"city\" population=\"0.9 million\" timezone=\"-5 UTC\"    label=\"City/Ottawa\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t\t<outline text=\"Toronto\" type=\"city\" population=\"2.5 million\" timezone=\"-5 UTC\"   label=\"City/Toronto\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"United States of America\" type=\"country\" label=\"Country/United States of America\"/>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t\t<outline text=\"South America\" type=\"continent\" label=\"Continent/South America\">\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Brazil\" type=\"country\" population=\"186 million\" label=\"Country/Brazil\"/>\\n';\r\n\t\t\t\topmlData += '\t\t\t<outline text=\"Argentina\" type=\"country\" population=\"40 million\" label=\"Country/Argentina\"/>\\n';\r\n\t\t\t\topmlData += '\t\t</outline>\\n';\r\n\t\t\t\topmlData += '\t</body>\\n';\r\n\t\t\t\topmlData += '</opml>\\n';\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tdataSource.data = opmlData;\r\n\t}\r\n\treturn dataSource; //Object\r\n};\r\n\r\ndojox.data.tests.stores.OpmlStore.verifyItems = function(opmlStore, items, attribute, compareArray){\r\n\t// summary:\r\n\t//\t\tA helper function for validating that the items array is ordered\r\n\t//\t\tthe same as the compareArray\r\n\tif(items.length != compareArray.length){ return false; }\r\n\tfor(var i = 0; i < items.length; i++){\r\n\t\tif(!(opmlStore.getValue(items[i], attribute) === compareArray[i])){\r\n\t\t\treturn false; //Boolean\r\n\t\t}\r\n\t}\r\n\treturn true; //Boolean\r\n};\r\n\r\ndojox.data.tests.stores.OpmlStore.error = function(t, d, errData){\r\n\t// summary:\r\n\t//\t\tThe error callback function to be used for all of the tests.\r\n\td.errback(errData);\r\n};\r\n\r\ndoh.register(\"dojox.data.tests.stores.OpmlStore\",\r\n\t[\r\n\t\tfunction testReadAPI_fetch_all(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completedAll(items){\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({ onComplete: completedAll, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_one(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_fetch_one_Multiple(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tvar done = [false,false];\r\n\t\t\tfunction onCompleteOne(items, request){\r\n\t\t\t\tdone[0] = true;\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfunction onCompleteTwo(items, request){\r\n\t\t\t\tdone[1] = true;\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t\t\tonComplete: onCompleteOne,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"North America\"},\r\n\t\t\t\t\t\t\t\tonComplete: onCompleteTwo,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_fetch_one_MultipleMixed(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item mixing two fetch types.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on Cpmltore of a single item mixing two fetch types.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\tvar done = [false, false];\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tdone[0] = true;\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tconsole.log(\"Found item: \" + opmlStore.getValue(items[0],\"text\") + \" with identity: \" + opmlStore.getIdentity(items[0]));\r\n\t\t\t\tt.is(0, opmlStore.getIdentity(items[0]));\r\n\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction onItem(item){\r\n\t\t\t\tdone[1] = true;\r\n\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\tconsole.log(\"Found item: \" + opmlStore.getValue(item,\"text\"));\r\n\t\t\t\tt.is('Egypt', opmlStore.getValue(item,\"text\")); //Should be the second node parsed, ergo id 1, first node is id 0.\r\n\t\t\t\tt.is(1, opmlStore.getIdentity(item));\r\n\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Africa\"},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\r\n            opmlStore.fetchItemByIdentity({identity: \"1\", onItem: onItem, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_fetch_one_deep(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item that's nested down as a child item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item that's nested down as a child item.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Mexico City\"},\r\n\t\t\t\t\t\t\t\tqueryOptions: {deep:true},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_fetch_one_deep_off(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item that's nested down as a child item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore of a single item that's nested down as a child item.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t//Nothing should be found.\r\n\t\t\t\tt.is(0, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Mexico City\"},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_fetch_all_streaming(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of a basic fetch on OpmlStore.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tcount = 0;\r\n\r\n\t\t\tfunction onBegin(size, requestObj){\r\n\t\t\t\tt.is(6, size);\r\n\t\t\t}\r\n\t\t\tfunction onItem(item, requestObj){\r\n\t\t\t\tt.assertTrue(opmlStore.isItem(item));\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.is(6, count);\r\n\t\t\t\tt.is(null, items);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({\tonBegin: onBegin,\r\n\t\t\t\t\t\t\t\tonItem: onItem,\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_paging(t){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t // description:\r\n\t\t\t //\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction dumpFirstFetch(items, request){\r\n\t\t\t\tt.is(5, items.length);\r\n\t\t\t\trequest.start = 3;\r\n\t\t\t\trequest.count = 1;\r\n\t\t\t\trequest.onComplete = dumpSecondFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpSecondFetch(items, request){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\trequest.start = 0;\r\n\t\t\t\trequest.count = 5;\r\n\t\t\t\trequest.onComplete = dumpThirdFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpThirdFetch(items, request){\r\n\t\t\t\tt.is(5, items.length);\r\n\t\t\t\trequest.start = 2;\r\n\t\t\t\trequest.count = 20;\r\n\t\t\t\trequest.onComplete = dumpFourthFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpFourthFetch(items, request){\r\n\t\t\t\tt.is(4, items.length);\r\n\t\t\t\trequest.start = 9;\r\n\t\t\t\trequest.count = 100;\r\n\t\t\t\trequest.onComplete = dumpFifthFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpFifthFetch(items, request){\r\n\t\t\t\tt.is(0, items.length);\r\n\t\t\t\trequest.start = 2;\r\n\t\t\t\trequest.count = 20;\r\n\t\t\t\trequest.onComplete = dumpSixthFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpSixthFetch(items, request){\r\n\t\t\t\tt.is(4, items.length);\r\n\t\t\t    d.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\trequest.start = 1;\r\n\t\t\t\trequest.count = 5;\r\n\t\t\t\trequest.onComplete = dumpFirstFetch;\r\n\t\t\t\topmlStore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\topmlStore.fetch({onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\r\n\t\t},\r\n\t\tfunction testReadAPI_getLabel(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar label = opmlStore.getLabel(items[0]);\r\n\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\tt.assertEqual(\"Asia\", label);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t   \t\tonComplete: onComplete,\r\n\t\t\t\t\t\t   \t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t   \t});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testReadAPI_getLabelAttributes(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar labelList = opmlStore.getLabelAttributes(items[0]);\r\n\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\tt.assertEqual(\"text\", labelList[0]);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t\t   \tonComplete: onComplete,\r\n\t\t\t\t\t\t\t   \tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d;\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_getLabel_nondefault(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography_withspeciallabel.xml\");\r\n\t\t\targs.label=\"label\";\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar label = opmlStore.getLabel(items[0]);\r\n\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\tt.assertEqual(\"Continent/Asia\", label);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t   \t\tonComplete: onComplete,\r\n\t\t\t\t\t\t   \t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t   \t});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testReadAPI_getLabelAttributes_nondefault(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography_withspeciallabel.xml\");\r\n\t\t\targs.label=\"label\";\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar labelList = opmlStore.getLabelAttributes(items[0]);\r\n\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\tt.assertEqual(\"label\", labelList[0]);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t\t   \tonComplete: onComplete,\r\n\t\t\t\t\t\t\t   \tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d;\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_getValue(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completedAll(items){\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\t\r\n\t\t\t\tt.is(\"Africa\", \t\topmlStore.getValue(items[0],\"text\"));\r\n\t\t\t\tt.is(\"Asia\", \t\topmlStore.getValue(items[1],\"text\"));\r\n\t\t\t\tt.is(\"Australia\", \topmlStore.getValue(items[2],\"text\"));\r\n\t\t\t\tt.is(\"Europe\", \t\topmlStore.getValue(items[3],\"text\"));\r\n\t\t\t\tt.is(\"North America\", \topmlStore.getValue(items[4],\"text\"));\r\n\t\t\t\tt.is(\"South America\",\topmlStore.getValue(items[5],\"text\"));\r\n\t\r\n\t\t\t\tt.is(\"continent\", \topmlStore.getValue(items[1],\"type\"));\r\n\t\t\t\tt.is(\"21 million\", \topmlStore.getValue(items[2],\"population\"));\r\n\t\t\t\t\r\n\t\t\t\tvar firstChild = opmlStore.getValue(items[4],\"children\");\r\n\t\t\t\tt.assertTrue(opmlStore.isItem(firstChild));\r\n\t\t\t\tt.is(\"Mexico\", \t\topmlStore.getValue(firstChild,\"text\"));\r\n\t\t\t\tt.is(\"country\", \topmlStore.getValue(firstChild,\"type\"));\r\n\t\t\t\tt.is(\"108 million\", \topmlStore.getValue(firstChild,\"population\"));\r\n\t\t\t\tt.is(\"1,972,550 sq km\", opmlStore.getValue(firstChild,\"area\"));\r\n\t\t\t\t\r\n\t\t\t\tfirstChild = opmlStore.getValue(firstChild,\"children\");\r\n\t\t\t\tt.assertTrue(opmlStore.isItem(firstChild));\r\n\t\t\t\tt.is(\"Mexico City\", \topmlStore.getValue(firstChild,\"text\"));\r\n\t\t\t\tt.is(\"city\", \t\topmlStore.getValue(firstChild,\"type\"));\r\n\t\t\t\tt.is(\"19 million\", \topmlStore.getValue(firstChild,\"population\"));\r\n\t\t\t\tt.is(\"-6 UTC\", \t\topmlStore.getValue(firstChild,\"timezone\"));\r\n\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({ onComplete: completedAll, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getValues(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\r\n\t\t\t\tvar children = opmlStore.getValues(items[0],\"children\");\r\n\t\t\t\tt.is(3, children.length);\r\n\t\t\t\tfor(var i=0; i<children.length; i++){\r\n\t\t\t\t\tt.assertTrue(opmlStore.isItem(children[i]));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tt.is(\"Mexico\", \t\topmlStore.getValues(children[0],\"text\")[0]);\r\n\t\t\t\tt.is(\"country\", \topmlStore.getValues(children[0],\"type\")[0]);\r\n\t\t\t\tt.is(\"108 million\", \topmlStore.getValues(children[0],\"population\")[0]);\r\n\t\t\t\tt.is(\"1,972,550 sq km\", opmlStore.getValues(children[0],\"area\")[0]);\r\n\t\t\t\t\r\n\t\t\t\tt.is(\"Canada\", \t\topmlStore.getValues(children[1],\"text\")[0]);\r\n\t\t\t\tt.is(\"country\", \topmlStore.getValues(children[1],\"type\")[0]);\r\n\t\t\t\t\r\n\t\t\t\tchildren = opmlStore.getValues(children[1],\"children\");\r\n\t\t\t\tt.is(2, children.length);\r\n\t\t\t\tfor(var i=0; i<children.length; i++){\r\n\t\t\t\t\tt.assertTrue(opmlStore.isItem(children[i]));\r\n\t\t\t\t}\r\n\t\t\t\tt.is(\"Ottawa\", \topmlStore.getValues(children[0],\"text\")[0]);\r\n\t\t\t\tt.is(\"Toronto\", opmlStore.getValues(children[1],\"text\")[0]);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get one item...\r\n\t\t\topmlStore.fetch({\tquery: {text: \"North America\"},\r\n\t\t\t\t\t\t\t\tonComplete: completed,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_isItem(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the isItem function of the store\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completedAll(items){\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\tfor(var i=0; i<6; i++){\r\n\t\t\t\t\tt.assertTrue(opmlStore.isItem(items[i]));\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(!opmlStore.isItem({}));\r\n\t\t\t\tt.assertTrue(!opmlStore.isItem({ item: \"not an item\" }));\r\n\t\t\t\tt.assertTrue(!opmlStore.isItem(\"not an item\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.isItem([\"not an item\"]));\r\n\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({ onComplete: completedAll, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_hasAttribute(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tt.assertTrue(items[0] !== null);\r\n\t\t\t\tt.assertTrue(opmlStore.hasAttribute(items[0], \"text\"));\r\n\t\t\t\tt.assertTrue(opmlStore.hasAttribute(items[0], \"type\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.hasAttribute(items[0], \"population\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.hasAttribute(items[0], \"Nothing\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.hasAttribute(items[0], \"Text\"));\r\n\t\t\t\t\r\n\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\tvar passed = false;\r\n\t\t\t\ttry{\r\n\t\t\t\t\topmlStore.hasAttribute(items[0], null);\r\n\t\t\t\t}catch (e){\r\n\t\t\t\t\tpassed = true;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get one item...\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"Asia\"},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_containsValue(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n \t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tt.assertTrue(items[0] !== null);\r\n\t\t\t\tt.assertTrue(opmlStore.containsValue(items[0], \"text\", \"North America\"));\r\n\t\t\t\tt.assertTrue(opmlStore.containsValue(items[0], \"type\", \"continent\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.containsValue(items[0], \"text\", \"America\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.containsValue(items[0], \"Type\", \"continent\"));\r\n\t\t\t\tt.assertTrue(!opmlStore.containsValue(items[0], \"text\", null));\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\tvar children = opmlStore.getValues(items[0], \"children\");\r\n\t\t\t\tt.assertTrue(opmlStore.containsValue(items[0], \"children\", children[0]));\r\n\t\t\t\tt.assertTrue(opmlStore.containsValue(items[0], \"children\", children[1]));\r\n\t\t\t\tt.assertTrue(opmlStore.containsValue(items[0], \"children\", children[2]));\r\n\t\r\n\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\tvar passed = false;\r\n\t\t\t\ttry{\r\n\t\t\t\t\topmlStore.containsValue(items[0], null, \"foo\");\r\n\t\t\t\t}catch (e){\r\n\t\t\t\t\tpassed = true;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get one item...\r\n\t\t\topmlStore.fetch({ \tquery: {text: \"North America\"},\r\n\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)\r\n\t\t\t\t\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getAttributes(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items){\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\tt.assertTrue(opmlStore.isItem(items[0]));\r\n\t\r\n\t\t\t\tvar attributes = opmlStore.getAttributes(items[0]);\r\n\t\t\t\tt.is(3, attributes.length);\r\n\t\t\t\tfor(var i = 0; i < attributes.length; i++){\r\n\t\t\t\t\tt.assertTrue((attributes[i] === \"text\" || attributes[i] === \"type\" || attributes[i] === \"children\"));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({ onComplete: onComplete, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getFeatures(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar features = opmlStore.getFeatures();\r\n\t\t\tvar count = 0;\r\n\t\t\tfor(i in features){\r\n\t\t\t\tt.assertTrue((i === \"dojo.data.api.Read\") || (i === \"dojo.data.api.Identity\"));\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tt.assertTrue(count === 2);\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_patternMatch0(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test pattern matching of everything starting with Capital A\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test pattern matching of everything starting with Capital A\r\n\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.is(3, items.length);\r\n\t\t\t\tvar valueArray = [ \"Africa\", \"Asia\", \"Australia\"];\r\n\t\t\t\tt.assertTrue(dojox.data.tests.stores.OpmlStore.verifyItems(opmlStore, items, \"text\", valueArray));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\topmlStore.fetch({query: {text: \"A*\"}, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_patternMatch1(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test pattern matching of everything with America in it.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test pattern matching of everything with America in it.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.assertTrue(items.length === 2);\r\n\t\t\t\tvar valueArray = [ \"North America\", \"South America\"];\r\n\t\t\t\tt.assertTrue(dojox.data.tests.stores.OpmlStore.verifyItems(opmlStore, items, \"text\", valueArray));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\topmlStore.fetch({query: {text: \"*America*\"}, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_patternMatch2(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tt.assertTrue(opmlStore.getValue(items[0], \"text\") === \"Europe\");\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\topmlStore.fetch({query: {text: \"Europe\"}, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_patternMatch_caseInsensitive(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test exact pattern match with case insensitivity set.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test exact pattern match with case insensitivity set.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.is(1, items.length);\r\n\t\t\t\tt.assertTrue(opmlStore.getValue(items[0], \"text\") === \"Asia\");\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\topmlStore.fetch({query: {text: \"asia\"}, queryOptions: {ignoreCase: true}, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_patternMatch_caseSensitive(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test exact pattern match with case sensitivity set.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test exact pattern match with case sensitivity set.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.is(0, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\topmlStore.fetch({query: {text: \"ASIA\"}, queryOptions: {ignoreCase: false}, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_sortAlphabetic(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\t//Output should be in this order...\r\n\t\t\t\tvar orderedArray = [ \"Africa\", \"Asia\", \"Australia\", \"Europe\", \"North America\", \"South America\"];\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\tt.assertTrue(dojox.data.tests.stores.OpmlStore.verifyItems(opmlStore, items, \"text\", orderedArray));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sortAttributes = [{attribute: \"text\"}];\r\n\t\t\topmlStore.fetch({sort: sortAttributes, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_sortAlphabeticDescending(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\t//Output should be in this order...\r\n\t\t\t\tvar orderedArray = [ \"South America\", \"North America\", \"Europe\", \"Australia\", \"Asia\", \"Africa\"\r\n\t\t\t\t\t];\r\n\t\t\t\tt.is(6, items.length);\r\n\t\t\t\tt.assertTrue(dojox.data.tests.stores.OpmlStore.verifyItems(opmlStore, items, \"text\", orderedArray));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sortAttributes = [{attribute: \"text\", descending: true}];\r\n\t\t\topmlStore.fetch({sort: sortAttributes, onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_sortAlphabeticWithCount(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\t//Output should be in this order...\r\n\t\t\t\tvar orderedArray = [ \"South America\", \"North America\", \"Europe\", \"Australia\"\r\n\t\t\t\t\t];\r\n\t\t\t\tt.is(4, items.length);\r\n\t\t\t\tt.assertTrue(dojox.data.tests.stores.OpmlStore.verifyItems(opmlStore, items, \"text\", orderedArray));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar sortAttributes = [{attribute: \"text\", descending: true}];\r\n\t\t\topmlStore.fetch({sort: sortAttributes,\r\n\t\t\t\t\t\t\tcount: 4,\r\n\t\t\t\t\t\t\tonComplete: completed,\r\n\t\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = new dojox.data.OpmlStore(dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\"));\r\n\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in readApi){\r\n\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t{\r\n\t\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t},\r\n\t\tfunction testIdentityAPI_fetchItemByIdentity(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onItem(item){\r\n\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n            opmlStore.fetchItemByIdentity({identity: \"1\", onItem: onItem, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d;\r\n\t\t},\r\n\r\n\t\tfunction testIdentityAPI_fetchItemByIdentity_bad1(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onItem(item){\r\n\t\t\t\tt.assertTrue(item === null);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n            opmlStore.fetchItemByIdentity({identity: \"200\", onItem: onItem, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testIdentityAPI_fetchItemByIdentity_bad2(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onItem(item){\r\n\t\t\t\tt.assertTrue(item === null);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n            opmlStore.fetchItemByIdentity({identity: \"-1\", onItem: onItem, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testIdentityAPI_fetchItemByIdentity_bad3(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onItem(item){\r\n\t\t\t\tt.assertTrue(item === null);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n            opmlStore.fetchItemByIdentity({identity: \"999999\", onItem: onItem, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d)});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testIdentityAPI_getIdentity(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\r\n\t\t\tvar args = dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\");\r\n\t\t\tvar opmlStore = new dojox.data.OpmlStore(args);\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\tconsole.log(\"Identity is: \" + opmlStore.getIdentity(items[i]) + \" count is : \"+ i);\r\n\t\t\t\t\tif(!(opmlStore.getIdentity(items[i]) == i)){\r\n\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//Get everything...\r\n\t\t\topmlStore.fetch({ onComplete: completed, onError: dojo.partial(dojox.data.tests.stores.OpmlStore.error, t, d), queryOptions: {deep: true}});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testIdentityAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = new dojox.data.OpmlStore(dojox.data.tests.stores.OpmlStore.getDatasource(\"stores/geography.xml\"));\r\n\t\t\tvar identityApi = new dojo.data.api.Identity();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in identityApi){\r\n\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t{\r\n\t\t\t\t\tvar member = identityApi[i];\r\n\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tconsole.log(\"Looking at function: [\" + i + \"]\");\r\n\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t}\r\n\t]\r\n);\r\n\r\n"]}