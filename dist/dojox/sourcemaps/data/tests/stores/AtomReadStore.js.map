{"version":3,"sources":["data/tests/stores/AtomReadStore.js"],"names":["dojo","provide","require","dojox","data","tests","stores","AtomReadStore","getBlog1Store","url","toUrl","toString","error","t","d","errData","errback","doh","register","name","timeout","runTest","atomStore","Deferred","fetch","query","count","onComplete","items","request","is","length","callback","onError","partial","onBegin","onItem","item","requestObj","assertTrue","isItem","dumpFirstFetch","start","dumpSecondFetch","console","log","dumpThirdFetch","dumpFourthFetch","dumpFifthFetch","dumpSixthFetch","assertEqual","label","getLabel","labelList","getLabelAttributes","isArray","getValue","getFullYear","passed","e","summary","getValues","content","published","updated","i","hasAttribute","title","text","type","containsValue","attributes","getAttributes","category","categories","some","term","id","alternate","href","features","getFeatures","testStore","readApi","api","Read","charAt","testStoreMember"],"mappings":"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","file":"../../../../data/tests/stores/AtomReadStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.AtomReadStore\");\r\ndojo.require(\"dojox.data.AtomReadStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\n\r\ndojox.data.tests.stores.AtomReadStore.getBlog1Store = function(){\r\n\treturn new dojox.data.AtomReadStore({url: require.toUrl(\"dojox/data/tests/stores/atom1.xml\").toString()});\r\n\t//return new dojox.data.AtomReadStore({url: \"/sos/feeds/blog.php\"});\r\n};\r\n/*\r\ndojox.data.tests.stores.AtomReadStore.getBlog2Store = function(){\r\n\treturn new dojox.data.AtomReadStore({url: dojo.moduleUrl(\"dojox.data.tests\", \"stores/atom2.xml\").toString()});\r\n};\r\n*/\r\ndojox.data.tests.stores.AtomReadStore.error = function(t, d, errData){\r\n\t// summary:\r\n\t//\t\tThe error callback function to be used for all of the tests.\r\n\r\n\t//console.log(\"In here.\");\r\n\t//console.trace();\r\n\td.errback(errData);\r\n}\r\n\r\ndoh.register(\"dojox.data.tests.stores.AtomReadStore\",\r\n\t[\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  Fetch_One\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AtomReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AtomReadStore of a single item.\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, doh, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  Fetch_5_Streaming\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AtomReadStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AtomReadStore.\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar count = 0;\r\n\r\n\t\t\t\tfunction onItem(item, requestObj){\r\n\t\t\t\t  t.assertTrue(atomStore.isItem(item));\r\n\t\t\t\t  count++;\r\n\t\t\t\t}\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\tt.is(5, count);\r\n\r\n\t\t\t\t\tt.is(null, items);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonBegin: null,\r\n\t\t\t\t\tcount: 5,\r\n\t\t\t\t\tonItem: onItem,\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  Fetch_Paging\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\r\n\t\t\t\tfunction dumpFirstFetch(items, request){\r\n\t\t\t\t\tt.is(5, items.length);\r\n\t\t\t\t\trequest.start = 3;\r\n\t\t\t\t\trequest.count = 1;\r\n\t\t\t\t\trequest.onComplete = dumpSecondFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction dumpSecondFetch(items, request){\r\n\t\t\t\t\tconsole.log(\"dumpSecondFetch: got \"+items.length);\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\trequest.start = 0;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpThirdFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction dumpThirdFetch(items, request){\r\n\t\t\t\t\tconsole.log(\"dumpThirdFetch: got \"+items.length);\r\n\t\t\t\t\tt.is(5, items.length);\r\n\t\t\t\t\trequest.start = 2;\r\n\t\t\t\t\trequest.count = 18;\r\n\t\t\t\t\trequest.onComplete = dumpFourthFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction dumpFourthFetch(items, request){\r\n\t\t\t\t\tconsole.log(\"dumpFourthFetch: got \"+items.length);\r\n\t\t\t\t\tt.is(18, items.length);\r\n\t\t\t\t\trequest.start = 5;\r\n\t\t\t\t\trequest.count = 11;\r\n\t\t\t\t\trequest.onComplete = dumpFifthFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction dumpFifthFetch(items, request){\r\n\t\t\t\t\tconsole.log(\"dumpFifthFetch: got \"+items.length);\r\n\t\t\t\t\tt.is(11, items.length);\r\n\t\t\t\t\trequest.start = 4;\r\n\t\t\t\t\trequest.count = 16;\r\n\t\t\t\t\trequest.onComplete = dumpSixthFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction dumpSixthFetch(items, request){\r\n\t\t\t\t\tconsole.log(\"dumpSixthFetch: got \"+items.length);\r\n\t\t\t\t\tt.is(16, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction completed(items, request){\r\n\t\t\t\t\tt.is(7, items.length);\r\n\t\t\t\t\trequest.start = 1;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpFirstFetch;\r\n\t\t\t\t\tatomStore.fetch(request);\r\n\t\t\t\t}\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 7,\r\n\t\t\t\t\tonComplete: completed,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getLabel\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar label = atomStore.getLabel(items[0]);\r\n\t\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getLabelAttributes\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar labelList = atomStore.getLabelAttributes(items[0]);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\t\tt.assertEqual(\"title\", labelList[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getValue\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction completedAll(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tt.assertTrue(atomStore.getValue(items[0], \"summary\") !== null);\r\n\t\t\t\t\tt.assertTrue(atomStore.getValue(items[0], \"content\") !== null);\r\n\t\t\t\t\tt.assertTrue(atomStore.getValue(items[0], \"published\") !== null);\r\n\t\t\t\t\tt.assertTrue(atomStore.getValue(items[0], \"updated\") !== null);\r\n\t\t\t\t\tconsole.log(\"typeof updated = \"+typeof(atomStore.getValue(items[0], \"updated\")));\r\n\t\t\t\t\tt.assertTrue(atomStore.getValue(items[0], \"updated\").getFullYear);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get one item and look at it.\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: completedAll,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getValue_Failure\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\t\t\t\tvar passed = false;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvar value = atomStore.getValue(\"NotAnItem\", \"foo\");\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tpassed = true;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getValues\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction completedAll(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tvar summary = atomStore.getValues(items[0], \"summary\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(summary));\r\n\r\n\t\t\t\t\tvar content = atomStore.getValues(items[0], \"content\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(content));\r\n\r\n\t\t\t\t\tvar published = atomStore.getValues(items[0], \"published\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(published));\r\n\r\n\t\t\t\t\tvar updated = atomStore.getValues(items[0], \"updated\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(updated));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\t//Get one item and look at it.\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: completedAll,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error,\r\n\t\t\t\t\tt,\r\n\t\t\t\t\td)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getValues_Failure\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\t\t\t\tvar passed = false;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvar value = atomStore.getValues(\"NotAnItem\", \"foo\");\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tpassed = true;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  isItem\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction completedAll(items){\r\n\t\t\t\t\tt.is(5, items.length);\r\n\t\t\t\t\tfor(var i=0; i < items.length; i++){\r\n\t\t\t\t\t\tt.assertTrue(atomStore.isItem(items[i]));\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcount: 5,\r\n\t\t\t\t\t\tonComplete: completedAll,\r\n\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  hasAttribute\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tt.assertTrue(items[0] !== null);\r\n\t\t\t\t\tvar count = 0;\r\n\t\t\t\t\tconsole.log(\"hasAttribute\");\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"author\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"published\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"updated\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"category\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"id\"));\r\n\t\t\t\t\tt.assertTrue(!atomStore.hasAttribute(items[0], \"foo\"));\r\n\t\t\t\t\tt.assertTrue(!atomStore.hasAttribute(items[0], \"bar\"));\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"summary\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"content\"));\r\n\t\t\t\t\tt.assertTrue(atomStore.hasAttribute(items[0], \"title\"));\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar summary = atomStore.getValue(items[0], \"summary\");\r\n\t\t\t\t\tvar content = atomStore.getValue(items[0], \"content\");\r\n\t\t\t\t\tvar title = atomStore.getValue(items[0], \"title\");\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tt.assertTrue(summary && summary.text && summary.type == \"html\");\r\n\t\t\t\t\tt.assertTrue(content && content.text && content.type == \"html\");\r\n\t\t\t\t\tt.assertTrue(title && title.text && title.type == \"html\");\r\n\r\n\t\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tatomStore.hasAttribute(items[0], null);\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get one item...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  containsValue\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\r\n\t\t\t\t\tt.assertTrue(atomStore.containsValue(items[0], \"id\",\"http://shaneosullivan.wordpress.com/2008/01/22/using-aol-hosted-dojo-with-your-custom-code/\"));\r\n\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get one item...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcount: 1,\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  getAttributes\",\r\n\t\t\ttimeout:\t5000, //1 second\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tt.assertTrue(atomStore.isItem(items[0]));\r\n\r\n\t\t\t\t\tvar attributes = atomStore.getAttributes(items[0]);\r\n\t\t\t\t\tconsole.log(\"getAttributes 4: \"+attributes.length);\r\n\t\t\t\t\tt.is(10, attributes.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\t\tquery: {\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcount: 1,\r\n\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  fetch_Category\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tRetrieve items from the store by category\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tt.is(2, items.length);\r\n\t\t\t\t\tt.assertTrue(atomStore.isItem(items[0]));\r\n\t\t\t\t\tt.assertTrue(atomStore.isItem(items[1]));\r\n\r\n\t\t\t\t\tvar categories = atomStore.getValues(items[0], \"category\");\r\n\t\t\t\t\tt.assertTrue(dojo.some(categories, function(category){\r\n\t\t\t\t\t\treturn category.term == \"aol\";\r\n\t\t\t\t\t}));\r\n\t\t\t\t\tcategories = atomStore.getValues(items[1], \"category\");\r\n\t\t\t\t\tt.assertTrue(dojo.some(categories, function(category){\r\n\t\t\t\t\t\treturn category.term == \"aol\";\r\n\t\t\t\t\t}));\r\n\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tcategory: \"aol\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  fetch_byID\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tRetrieve items from the store by category\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tconsole.log(\"getById: items.length=\"+items.length)\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tt.assertTrue(atomStore.isItem(items[0]));\r\n\r\n\t\t\t\t\tvar title = atomStore.getValue(items[0], \"title\");\r\n\t\t\t\t\tconsole.log(\"getById: title.text=\"+title.text)\r\n\t\t\t\t\tt.assertTrue(title.text == \"Dojo Grid has landed\");\r\n\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tid: \"http://shaneosullivan.wordpress.com/2007/10/05/dojo-grid-has-landed/\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"ReadAPI:  fetch_alternate\",\r\n\t\t\ttimeout:\t5000, //1 second.\r\n\t\t\trunTest: function(t) {\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tRetrieve items from the store by category\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\r\n\t\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items){\r\n\t\t\t\t\tt.is(1, items.length);\r\n\t\t\t\t\tt.assertTrue(atomStore.isItem(items[0]));\r\n\r\n\t\t\t\t\tvar alternate = atomStore.getValue(items[0], \"alternate\");\r\n\t\t\t\t\tt.assertEqual(alternate.href, \"http://shaneosullivan.wordpress.com/2007/10/05/dojo-grid-has-landed/\");\r\n\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tatomStore.fetch({\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tid: \"http://shaneosullivan.wordpress.com/2007/10/05/dojo-grid-has-landed/\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: dojo.partial(dojox.data.tests.stores.AtomReadStore.error, t, d)\r\n\t\t\t\t});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\tfunction testReadAPI_getFeatures(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\r\n\t\t\tvar atomStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\r\n\t\t\tvar features = atomStore.getFeatures();\r\n\t\t\tvar count = 0;\r\n\t\t\tfor(i in features){\r\n\t\t\t\tt.assertTrue((i === \"dojo.data.api.Read\"));\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tt.assertTrue(count === 1);\r\n\t\t},\r\n\t\tfunction testReadAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = dojox.data.tests.stores.AtomReadStore.getBlog1Store();\r\n\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in readApi){\r\n\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t{\r\n\t\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tconsole.log(\"Looking at function: [\" + i + \"]\");\r\n\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tconsole.log(\"Problem with function: [\" + i + \"].   Got value: \" + testStoreMember);\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t}\r\n\t]\r\n);\r\n"]}