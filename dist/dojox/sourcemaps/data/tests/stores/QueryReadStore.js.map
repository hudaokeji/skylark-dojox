{"version":3,"sources":["data/tests/stores/QueryReadStore.js"],"names":["dojo","provide","require","dojox","data","tests","stores","QueryReadStore","getStore","url","toUrl","toString","register","t","store","d","doh","Deferred","fetch","query","q","onComplete","getTestCallback","items","request","item","assertEqual","getValue","assertError","Error","getValues","errThrown","e","assertTrue","getAttributes","getLabel","hasAttribute","name","containsValue","isItem","label","abbreviation","isItemLoaded","length","onError","getTestErrback","error","start","count","onBegin","size","began","doClientPaging","lastRequestHash","firstItems","req","features","getFeatures","i","testStore","readApi","api","Read","passed","console","log"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,0CACbD,KAAKE,QAAQ,6BACbF,KAAKE,QAAQ,sBAIbC,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,SAAW,WACjD,OAAO,IAAIL,MAAMC,KAAKG,gBACpBE,IAAKP,QAAQQ,MAAM,8CAA8CC,cAKpEN,MAAMO,SAAS,0CAYb,SAA8BC,GAC7B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAqBhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,WACTC,WAAYN,EAAEO,gBAlBf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEa,YAAY,UAAWZ,EAAMa,SAASF,EAAM,SAC9CZ,EAAEa,YAAY,yCAA0CZ,EAAMa,SAASF,EAAM,UAC7EZ,EAAEa,YAAY,KAAMZ,EAAMa,SAASF,EAAM,iBAEzCZ,EAAEa,YAAY,gBAAiBZ,EAAMa,SAASF,EAAM,OAAQ,kBAM5DZ,EAAEe,YAAYC,MAAOf,EAAO,YAAa,cAAe,cACxDD,EAAEe,YAAYC,MAAOf,EAAO,YAAaW,WAMnCV,GAGR,SAA+BF,GAC9B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SA0BhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,WACTC,WAAYN,EAAEO,gBAvBf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEa,aAAa,WAAYZ,EAAMgB,UAAUL,EAAM,SACjDZ,EAAEa,aAAa,0CAA2CZ,EAAMgB,UAAUL,EAAM,UAChFZ,EAAEa,aAAa,MAAOZ,EAAMgB,UAAUL,EAAM,iBAM5CZ,EAAEa,eAAgBZ,EAAMgB,UAAUL,EAAM,cACxC,IAAIM,GAAY,EAChB,IAEcjB,EAAMgB,UAAU,cAAe,aAC5C,MAAOE,GACPD,GAAY,EAEblB,EAAEoB,WAAWF,OAMPhB,GAGR,SAAmCF,GAClC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAWhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,WACTC,WAAYN,EAAEO,gBARf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEa,aAAa,KAAM,OAAQ,QAAS,eAAgB,WAAYZ,EAAMoB,cAAcT,IACtFZ,EAAEe,YAAYC,MAAOf,EAAO,0BAMtBC,GAGR,SAA8BF,GAC7B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAC/CO,EAAI,IAAIC,IAAIC,SAUhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,WACTC,WAAYN,EAAEO,gBAPf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEa,aAAa,0CAA2CZ,EAAMqB,SAASV,QAMnEV,GAGR,SAAkCF,GACjC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAoBhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,UACTC,WAAYN,EAAEO,gBAjBf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEa,aAAY,EAAMZ,EAAMsB,aAAaX,EAAM,SAC7CZ,EAAEa,aAAY,EAAMZ,EAAMsB,aAAaX,EAAM,UAC7CZ,EAAEa,aAAY,EAAMZ,EAAMsB,aAAaX,EAAM,iBAE7CZ,EAAEa,aAAY,EAAOZ,EAAMsB,aAAaX,EAAM,SAC9CZ,EAAEa,aAAY,EAAOZ,EAAMsB,aAAaX,EAAM,SAC9CZ,EAAEa,aAAY,EAAOZ,EAAMsB,aAAaX,EAAM,UAE9CZ,EAAEa,aAAY,EAAOZ,EAAMsB,gBAAiB,iBAE5CvB,EAAEa,aAAY,EAAOZ,EAAMsB,cAAcC,KAAK,MAAO,aAM/CtB,GAGR,SAAmCF,GAClC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAShB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,UACTC,WAAYN,EAAEO,gBANf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GACjBV,EAAEoB,WAAWnB,EAAMwB,cAAcb,EAAM,OAAQ,eAMzCV,GAGR,SAA4BF,GAC3B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAahB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,UACTC,WAAYN,EAAEO,gBAVf,SAAoBC,EAAOC,GAE1BX,EAAEa,aAAY,EAAMZ,EAAMyB,OAAOhB,EAAM,KAEvCV,EAAEa,aAAY,EAAOZ,EAAMyB,YAE3B1B,EAAEa,aAAY,EAAOZ,EAAMyB,QAAQF,KAAK,SAAUG,MAAM,SAAUC,aAAa,YAMzE1B,GAGR,SAAkCF,GACjC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAUhB,OAJAH,EAAMI,OACLC,OAAOC,EAAE,WACTC,WAAYN,EAAEO,gBAPf,SAAoBC,EAAOC,GAC1B,IAAIC,EAAOF,EAAM,GAEjBV,EAAEoB,WAAWnB,EAAM4B,aAAajB,QAM1BV,GASR,SAA+BF,GAG9B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAYhB,OALAH,EAAMI,OACLC,OAAOC,EAAE,MACTC,WAAYN,EAAEO,gBARf,SAAoBC,EAAOC,GAC1BX,EAAEa,YAAY,EAAGH,EAAMoB,UAQvBC,QAAS7B,EAAE8B,eANZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,OAOV/B,GAGR,SAAmCF,GAGlC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAkBhB,OARAH,EAAMI,OACLC,OAAOC,EAAE,MACT2B,MAAO,EACPC,MAAO,EACPC,QAASlC,EAAE8B,eAbZ,SAAiBK,EAAM1B,GACtBX,EAAEa,YAAY,EAAGwB,KAajB7B,WAAYN,EAAEO,gBAXf,SAAoBC,EAAOC,GAC1BX,EAAEa,YAAY,EAAGH,EAAMoB,UAWvBC,QAAS7B,EAAE8B,eATZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,OAUV/B,GAGR,SAAoDF,GAGnD,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SACZkC,GAAQ,EAqBZ,OARArC,EAAMI,OACLC,OAAOC,EAAE,MACT2B,MAAO,EACPC,MAAO,EACPC,QAASlC,EAAE8B,eAhBZ,SAAiBK,EAAM1B,GACtBX,EAAEa,YAAY,EAAGwB,GACjBC,GAAQ,IAeR9B,WAAYN,EAAEO,gBAbf,SAAoBC,EAAOC,GAC1BX,EAAEA,EAAEsC,EAAO,sBACXtC,EAAEa,YAAY,EAAGH,EAAMoB,UAYvBC,QAAS7B,EAAE8B,eAVZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,OAWV/B,GAGR,SAAoDF,GAGnD,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WACnDM,EAAMsC,gBAAiB,EAEvB,IAAIrC,EAAI,IAAIC,IAAIC,SAkBhB,OARAH,EAAMI,OACLC,OAAOC,EAAE,MACT2B,MAAO,EACPC,MAAO,EACPC,QAASlC,EAAE8B,eAbZ,SAAiBK,EAAM1B,GACtBX,EAAEa,YAAY,EAAGwB,KAajB7B,WAAYN,EAAEO,gBAXf,SAAoBC,EAAOC,GAC1BX,EAAEa,YAAY,EAAGH,EAAMoB,UAWvBC,QAAS7B,EAAE8B,eATZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,OAUV/B,GAGR,SAA+BF,GAC9B,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/CO,EAAI,IAAIC,IAAIC,SAYhB,OALAH,EAAMI,OACLC,OAAOC,EAAE,UACTC,WAAYN,EAAEO,gBARf,SAAoBC,EAAOC,GAC1BX,EAAEa,YAAY,EAAGH,EAAMoB,UAQvBC,QAAS7B,EAAE8B,eANZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,OAOV/B,GAGR,SAAyCF,GAIxC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WACnDM,EAAMsC,gBAAiB,EAEvB,IAAIC,EAAkB,KAClBC,KACAvC,EAAI,IAAIC,IAAIC,SAoBhB,IAAIsC,GACHpC,OAAOC,EAAE,MACT2B,MAAM,EACNC,MAAM,EACN3B,WAAYN,EAAE8B,eAvBf,SAAoBtB,EAAOC,GAC1BX,EAAEa,YAAY,EAAGH,EAAMoB,OAAQ,yBAC/BU,EAAkBvC,EAAMuC,gBACxBC,EAAa/B,EASbgC,EAAIR,MAAQ,EACZQ,EAAIlC,WAAaN,EAAEO,gBANnB,SAAqBC,EAAOC,GAC3BX,EAAEa,YAAY,EAAGH,EAAMoB,OAAQ,0BAC/B9B,EAAEa,YAAY2B,EAAiBvC,EAAMuC,gBAAiB,mBACtDxC,EAAEa,YAAY4B,EAAW,GAAI/B,EAAM,GAAI,cAIxCT,EAAMI,MAAMqC,KAUZX,QAAS7B,EAAE8B,eARZ,SAAiBC,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,MAWjB,OADAhC,EAAMI,MAAMqC,GACLxC,GAGR,SAAyCF,GASxC,IAAIC,EAAQX,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAE/C6C,EAAkB,KAClBtC,EAAI,IAAIC,IAAIC,SAuBhB,SAAS2B,EAAQE,EAAOtB,GACvB,MAAM,IAAIK,MAAMiB,GASjB,OAPAhC,EAAMI,OACLC,SACA4B,MAAM,EACNC,MAAM,GACN3B,WAAYN,EAAEO,gBA7Bf,SAAoBC,EAAOC,GAC1BX,EAAEa,YAAY,GAAIH,EAAMoB,QACxBU,EAAkBvC,EAAMuC,gBACxBC,WAAa/B,EAgBbT,EAAMsC,gBAAiB,EACvBtC,EAAMI,OAAO6B,MAAM,EAAGC,MAAM,EAAG3B,WAb/B,SAAqBE,EAAOC,GAC3BX,EAAEa,YAAY,EAAGH,EAAMoB,QAGvB9B,EAAEoB,WAAWoB,GAAiBvC,EAAMuC,iBACpCxC,EAAEa,YAAYZ,EAAMa,SAAS2B,WAAW,GAAI,QAASxC,EAAMa,SAASJ,EAAM,GAAI,SAC9EV,EAAEa,YAAYZ,EAAMa,SAAS2B,WAAW,GAAI,QAASxC,EAAMa,SAASJ,EAAM,GAAI,SAC9EV,EAAEa,YAAYZ,EAAMa,SAAS2B,WAAW,GAAI,QAASxC,EAAMa,SAASJ,EAAM,GAAI,SAC9EV,EAAEa,YAAYZ,EAAMa,SAAS2B,WAAW,GAAI,QAASxC,EAAMa,SAASJ,EAAM,GAAI,SAC9EV,EAAEa,YAAYZ,EAAMa,SAAS2B,WAAW,GAAI,QAASxC,EAAMa,SAASJ,EAAM,GAAI,UAIvBqB,QAASA,MAUjEA,QAAS7B,EAAE8B,eAAeD,KAEpB7B,GAGR,SAAiCF,GAChC,IACI2C,EADQrD,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WAC9BiD,cACrB5C,EAAEoB,WAAWuB,EAAS,uBACtB3C,EAAEoB,WAAWuB,EAAS,2BACtB,IAAIR,EAAQ,EACZ,IAAKU,KAAKF,EACTR,IAEDnC,EAAEa,YAAY,EAAGsB,IAElB,SAAyCnC,GAIxC,IAAI8C,EAAYxD,MAAMC,KAAKC,MAAMC,OAAOC,eAAeC,WACnDoD,EAAU,IAAI5D,KAAKI,KAAKyD,IAAIC,KAC5BC,GAAS,EAEb,IAAIL,KAAKE,EAAQ,CAGhB,GAAqB,mBAFRA,EAAQF,GAIpB,GAAgC,mBADVC,EAAUD,GACY,CAC3CM,QAAQC,IAAI,2BAA6BP,EAAI,KAC7CK,GAAS,EACT,OAIHlD,EAAEoB,WAAW8B","file":"../../../../data/tests/stores/QueryReadStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.QueryReadStore\");\r\ndojo.require(\"dojox.data.QueryReadStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\n\r\n//dojo.require(\"dojox.testing.DocTest\");\r\n\r\ndojox.data.tests.stores.QueryReadStore.getStore = function(){\r\n\treturn new dojox.data.QueryReadStore({\r\n\t\t\turl: require.toUrl(\"dojox/data/tests/stores/QueryReadStore.php\").toString()\r\n\t\t});\r\n};\r\n\r\n\r\ntests.register(\"dojox.data.tests.stores.QueryReadStore\",\r\n\t[\r\n\t\t/*\r\n\t\tfunction testDocTests(t) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun all the doc comments.\r\n\t\t\tvar doctest = new dojox.testing.DocTest();\r\n\t\t\tdoctest.run(\"dojox.data.QueryReadStore\");\r\n\t\t\tt.assertTrue(doctest.errors.length==0);\r\n\t\t},\r\n\t\t*/\r\n\t\t\r\n\t\tfunction testReadApi_getValue(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The good cases.\r\n\t\t\t\tt.assertEqual(\"Alabama\", store.getValue(item, \"name\"));\r\n\t\t\t\tt.assertEqual(\"<img src='images/Alabama.jpg'/>Alabama\", store.getValue(item, \"label\"));\r\n\t\t\t\tt.assertEqual(\"AL\", store.getValue(item, \"abbreviation\"));\r\n\t\t\t\t// Test the defaultValue cases (the third parameter).\r\n\t\t\t\tt.assertEqual(\"default value\", store.getValue(item, \"NAME\", \"default value\"));\r\n\t\t\t\t// TODO Test for null somehow ...\r\n\t\t\t\t// Read api says: Returns null if and only if null was explicitly set as the attribute value.\r\n\t\t\t\t\r\n\t\t\t\t// According to Read-API getValue() an exception is thrown when\r\n\t\t\t\t// the item is not an item or when the attribute is not a string.\r\n\t\t\t\tt.assertError(Error, store, \"getValue\", [\"not an item\", \"NOT THERE\"]);\r\n\t\t\t\tt.assertError(Error, store, \"getValue\", [item, {}]);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alabama\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_getValues(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The good cases.\r\n\t\t\t\tt.assertEqual([\"Alabama\"], store.getValues(item, \"name\"));\r\n\t\t\t\tt.assertEqual([\"<img src='images/Alabama.jpg'/>Alabama\"], store.getValues(item, \"label\"));\r\n\t\t\t\tt.assertEqual([\"AL\"], store.getValues(item, \"abbreviation\"));\r\n\t\t\t\t// TODO Test for null somehow ...\r\n\t\t\t\t// Read api says: Returns null if and only if null was explicitly set as the attribute value.\r\n\r\n\t\t\t\t// Test for not-existing attributes without defaultValues and invalid items.\r\n\t\t\t\t// TODO\r\n\t\t\t\tt.assertEqual([], store.getValues(item, \"NOT THERE\"));\r\n\t\t\t\tvar errThrown = false;\r\n\t\t\t\ttry{\r\n\t\t\t\t\t//Should throw an exception.\r\n\t\t\t\t\tvar values = store.getValues(\"not an item\", \"NOT THERE\");\r\n\t\t\t\t}catch (e){\r\n\t\t\t\t\terrThrown = true;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(errThrown);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alabama\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\t\r\n\t\tfunction testReadApi_getAttributes(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The good case(s).\r\n\t\t\t\tt.assertEqual(['id', 'name', 'label', 'abbreviation', 'capital'], store.getAttributes(item));\r\n\t\t\t\tt.assertError(Error, store, \"getAttributes\", [{}]);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alabama\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_getLabel(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The good cases.\r\n\t\t\t\tt.assertEqual([\"<img src='images/Alabama.jpg'/>Alabama\"], store.getLabel(item));\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alabama\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_hasAttribute(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The positive cases.\r\n\t\t\t\tt.assertEqual(true, store.hasAttribute(item, \"name\"));\r\n\t\t\t\tt.assertEqual(true, store.hasAttribute(item, \"label\"));\r\n\t\t\t\tt.assertEqual(true, store.hasAttribute(item, \"abbreviation\"));\r\n\t\t\t\t// Make sure attribute case doesnt matter.\r\n\t\t\t\tt.assertEqual(false, store.hasAttribute(item, \"NAME\"));\r\n\t\t\t\tt.assertEqual(false, store.hasAttribute(item, \"Name\"));\r\n\t\t\t\tt.assertEqual(false, store.hasAttribute(item, \"Label\"));\r\n\t\t\t\t// Pass in an invalid item.\r\n\t\t\t\tt.assertEqual(false, store.hasAttribute({}, \"abbreviation\"));\r\n\t\t\t\t// pass in something that looks like the item with the attribute.\r\n\t\t\t\tt.assertEqual(false, store.hasAttribute({name:\"yo\"}, \"name\"));\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alaska\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_containsValue(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Alaska\"));\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alaska\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_isItem(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t// The good case.\r\n\t\t\t\tt.assertEqual(true, store.isItem(items[0]));\r\n\t\t\t\t// Try a pure object.\r\n\t\t\t\tt.assertEqual(false, store.isItem({}));\r\n\t\t\t\t// Try to look like an item.\r\n\t\t\t\tt.assertEqual(false, store.isItem({name:\"Alaska\", label:\"Alaska\", abbreviation:\"AK\"}));\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alaska\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_isItemLoaded(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t// The good case(s).\r\n\t\t\t\tt.assertTrue(store.isItemLoaded(item));\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alabama\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\t//function testReadApi_loadItem(t){\r\n\t\t//\t// summary:\r\n\t\t//\t// description:\r\n\t\t//\tt.assertTrue(false);\r\n\t\t//},\r\n\r\n\t\tfunction testReadApi_fetch_all(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching all items.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(9, items.length);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"m*\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\t\r\n\t\tfunction testReadApi_fetch_onBegin(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching items, checking that onBegin size is all items matched, and page is just the items asked for.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onBegin(size, request){\r\n\t\t\t\tt.assertEqual(9, size);\r\n\t\t\t}\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"m*\"},\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: 5,\r\n\t\t\t\tonBegin: d.getTestErrback(onBegin),\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_fetch_onBegin_ServersidePaging(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching items, checking that onBegin size is all items matched, and page is just the items asked for.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tvar began = false;\r\n\t\t\tfunction onBegin(size, request){\r\n\t\t\t\tt.assertEqual(9, size);\r\n\t\t\t\tbegan = true;\r\n\t\t\t}\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.t(began, \"onBegin was called\");\r\n\t\t\t\tt.assertEqual(4, items.length);\t// 9 total, starting at 5, 4 left.\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"m*\"},\r\n\t\t\t\tstart: 5,\r\n\t\t\t\tcount: 5,\r\n\t\t\t\tonBegin: d.getTestErrback(onBegin),\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_fetch_onBegin_ClientsidePaging(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching items, checking that onBegin size is all items matched, and page is just the items asked for.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\tstore.doClientPaging = true;\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onBegin(size, request){\r\n\t\t\t\tt.assertEqual(9, size);\r\n\t\t\t}\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"m*\"},\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: 5,\r\n\t\t\t\tonBegin: d.getTestErrback(onBegin),\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_fetch_one(t){\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{q:\"Alaska\"},\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\r\n\t\tfunction testReadApi_fetch_client_paging(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLet's test that paging on the same request does not trigger\r\n\t\t\t//\t\tserver requests.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\tstore.doClientPaging = true;\r\n\r\n\t\t\tvar lastRequestHash = null;\r\n\t\t\tvar firstItems = [];\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(5, items.length, \"length of first fetch\");\r\n\t\t\t\tlastRequestHash = store.lastRequestHash;\r\n\t\t\t\tfirstItems = items;\r\n\t\t\t\t\r\n\t\t\t\t// Do the next request AFTER the previous one, so we are sure its sequential.\r\n\t\t\t\t// We need to be sure so we can compare to the data from the first request.\r\n\t\t\t\tfunction onComplete1(items, request) {\r\n\t\t\t\t\tt.assertEqual(5, items.length, \"length of second fetch\");\r\n\t\t\t\t\tt.assertEqual(lastRequestHash, store.lastRequestHash, \"lastRequestHash\");\r\n\t\t\t\t\tt.assertEqual(firstItems[1], items[0], \"items[0]\");\r\n\t\t\t\t}\r\n\t\t\t\treq.start = 1;\r\n\t\t\t\treq.onComplete = d.getTestCallback(onComplete1);\r\n\t\t\t\tstore.fetch(req);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tvar req = {\r\n\t\t\t\tquery:{q:\"m*\"},\r\n\t\t\t\tstart:0,\r\n\t\t\t\tcount:5,\r\n\t\t\t\tonComplete: d.getTestErrback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t};\r\n\r\n\t\t\tstore.fetch(req);\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\t\r\n\t\tfunction testReadApi_fetch_server_paging(t) {\r\n\t\t\t// Verify that the paging on the server side does work.\r\n\t\t\t// This is the test for http://trac.dojotoolkit.org/ticket/4761\r\n\t\t\t//\r\n\t\t\t// How? We request 10 items from the server, start=0, count=10.\r\n\t\t\t// The second request requests 5 items: start=5, count=5 and those\r\n\t\t\t// 5 items should have the same values as the last 5 of the first\r\n\t\t\t// request.\r\n\t\t\t// This tests if the server side paging does work.\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\r\n\t\t\tvar lastRequestHash = null;\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(10, items.length);\r\n\t\t\t\tlastRequestHash = store.lastRequestHash;\r\n\t\t\t\tfirstItems = items;\r\n\t\t\t\t\r\n\t\t\t\t// Do the next request AFTER the previous one, so we are sure its sequential.\r\n\t\t\t\t// We need to be sure so we can compare to the data from the first request.\r\n\t\t\t\tfunction onComplete1(items, request) {\r\n\t\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t\t\t// Compare the hash of the last request, they must be different,\r\n\t\t\t\t\t// since another server request was issued.\r\n\t\t\t\t\tt.assertTrue(lastRequestHash!=store.lastRequestHash);\r\n\t\t\t\t\tt.assertEqual(store.getValue(firstItems[5], \"name\"), store.getValue(items[0], \"name\"));\r\n\t\t\t\t\tt.assertEqual(store.getValue(firstItems[6], \"name\"), store.getValue(items[1], \"name\"));\r\n\t\t\t\t\tt.assertEqual(store.getValue(firstItems[7], \"name\"), store.getValue(items[2], \"name\"));\r\n\t\t\t\t\tt.assertEqual(store.getValue(firstItems[8], \"name\"), store.getValue(items[3], \"name\"));\r\n\t\t\t\t\tt.assertEqual(store.getValue(firstItems[9], \"name\"), store.getValue(items[4], \"name\"));\r\n\t\t\t\t}\r\n\t\t\t\t// Init a new store, or it will use the old data, since the query has not changed.\r\n\t\t\t\tstore.doClientPaging = false;\r\n\t\t\t\tstore.fetch({start:5, count:5, onComplete: onComplete1, onError: onError});\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\tthrow new Error(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({\r\n\t\t\t\tquery:{},\r\n\t\t\t\tstart:0,\r\n\t\t\t\tcount:10,\r\n\t\t\t\tonComplete: d.getTestCallback(onComplete),\r\n\t\t\t\tonError: d.getTestErrback(onError)\r\n\t\t\t});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\t\r\n\t\tfunction testReadApi_getFeatures(t) {\r\n\t\t\tvar store = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\tvar features = store.getFeatures();\r\n\t\t\tt.assertTrue(features[\"dojo.data.api.Read\"]);\r\n\t\t\tt.assertTrue(features[\"dojo.data.api.Identity\"]);\r\n\t\t\tvar count = 0;\r\n\t\t\tfor (i in features){\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tt.assertEqual(2, count);\r\n\t\t},\r\n\t\tfunction testReadAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = dojox.data.tests.stores.QueryReadStore.getStore();\r\n\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in readApi){\r\n\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\tconsole.log(\"Problem with function: [\" + i + \"]\");\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t}\r\n\t]\r\n);\r\n"]}