{"version":3,"sources":["data/tests/stores/AndOrReadStore.js"],"names":["dojo","provide","require","declare","_wrapped","constructor","obj","this","getValue","setValue","toString","dojox","data","tests","stores","AndOrReadStore","getTestData","name","isBrowser","url","toUrl","identifier","label","items","abbr","capital","real","independence","_type","_value","countries","population","cities","states","count","value","type","children","_reference","area","timezone","getTests","runTest","t","store","d","doh","Deferred","fetchItemByIdentity","identity","onItem","item","assertTrue","assertEqual","callback","onError","errData","errback","identifiers","getIdentityAttributes","isArray","length","getIdentity","fetch","query","request","onComplete","is","abortCalled","req","console","log","Error","abort","done","queryOptions","deep","hierarchical","i","passed","j","getValues","isItem","onBegin","size","requestObj","dumpSixthFetch","dumpFifthFetch","start","dumpFourthFetch","dumpThirdFetch","dumpSecondFetch","dumpFirstFetch","getLabel","labelList","getLabelAttributes","names","store1","store2","item1","item2","hasAttribute","e","containsValue","attributes","getAttributes","features","getFeatures","error","uniqueId","ignoreCase","sort","attribute","descending","itemId","orderedArray","reverse","Date","getTime","orderedArray0","orderedArray1","status","comparatorMap","a","b","ret","enumMap","OPEN","BLOCKED","PENDING","CLOSED","findResult","independenceDate","date","stamp","toISOString","zulu","species","color","hairColor","typeMap","Color","beaker","toHex","deserialize","age","dojox.data.tests.Wrapper","Wrapper","isHuman","lastName","dataset","undefined","northAmerica","canada","toronto","clearOnClose","urlPreventCache","ec","val","close","_arrayOfAllItems","_loadFinished","err","_jsonFileUrl","firstItem","secondItem","likes","hasIdentityFeature","Boolean","testStore","readApi","api","Read","charAt","identityApi","Identity","complexQuery","register"],"mappings":"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","file":"../../../../data/tests/stores/AndOrReadStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.AndOrReadStore\");\r\ndojo.require(\"dojox.data.AndOrReadStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\ndojo.require(\"dojo.data.api.Identity\");\r\ndojo.require(\"dojo.date\");\r\ndojo.require(\"dojo.date.stamp\");\r\n\r\ndojo.declare(\"dojox.data.tests.Wrapper\", null, {\r\n\t// summary:\r\n\t//\t\tSimple class to use for typeMap in order to\ttest out\r\n\t//\t\t'falsy' values for _value.\r\n\t_wrapped: null,\r\n\r\n\tconstructor: function(obj){\r\n\t\tthis._wrapped = obj;\r\n\t},\r\n\r\n\tgetValue: function() {\r\n\t\treturn this._wrapped;\r\n\t},\r\n\r\n\tsetValue: function(obj) {\r\n\t\tthis._wrapped = obj;\r\n\t},\r\n\r\n\ttoString: function(){\r\n\t\treturn \"WRAPPER: [\" + this._wrapped + \"]\";\r\n\t}\r\n});\r\n\r\n\r\n//The test data-sets and tests are taken from ItemFileReadStore, to show\r\n//\tbackwards compatibility.\r\n//Additionally, where appropriate (fetch/query), the AndOrReadStore test is immediately\r\n//\tfollowed by the same query (with \", complex\" in the description), but with the query\r\n//\tbeing a string rather than a json object.\r\n//Below all those tests are new ones that test the use of AND, OR, NOT, ||, &&, (, ), and \",\"\r\n//\tin queries, as well as a mix of string and json object queries.\r\n//Since some widgets expect the query to be in json object form, in addition to the\r\n//\tquery=\"id:1234 || dept:'Sales Department' || (dept:Auto && id:2*)\" programmatic syntax,\r\n//\tquery=\"{complexQuery:'id:1234 || dept:\\\"Sales Department\\\" || (dept:Auto && id:2*)\" is\r\n//\ttested/supported.\r\n\r\n//-----------------------------------------------------\r\n// test data-sets\r\ndojox.data.tests.stores.AndOrReadStore.getTestData = function(name){\r\n\tvar data = null;\r\n\tif(name === \"countries\"){\r\n\t\tif(dojo.isBrowser){\r\n\t\t\tdata = {url: require.toUrl(\"dojo/tests/data/countries.json\").toString() };\r\n\t\t}else{\r\n\t\t\tdata = {data: {\r\n\t\t\t\tidentifier:'abbr',\r\n\t\t\t\tlabel:'name',\r\n\t\t\t\titems:[\r\n\t\t\t\t\t{abbr:'ec', name:'Ecuador', capital:'Quito'},\r\n\t\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn'},\r\n\t\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t\t]\r\n\t\t\t} };\r\n\t\t}\r\n\t}else if(name === \"countries_withNull\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:null, capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:null, capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t{abbr:'ee', name:null, capital:'Tallinn'},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if(name === \"countries_withoutid\"){\r\n\t\tdata = {data: {\r\n\t\t\tlabel: \"name\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:null, capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:null, capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t{abbr:'ee', name:null, capital:'Tallinn'},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"countries_withBoolean\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:\"Ecuador\", capital:\"Quito\", real:true},\r\n\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo', real:true},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador', real:true},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo', real:true},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara', real:true},\r\n\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn', real:true},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa', real:true},\r\n\t\t\t\t{abbr:'ut', name:'Utopia', capital:'Paradise', real:false}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"countries_withDates\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:\"Ecuador\", capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara', independence:{_type:'Date', _value:\"1993-05-24T00:00:00Z\"}}, // May 24, 1993,\r\n\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn', independence:{_type:'Date', _value:\"1991-08-20T00:00:00Z\"}}, // August 20, 1991\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"geography_hierarchy_small\"){\r\n\t\tdata = {data: {\r\n\t\t\titems:[\r\n\t\t\t\t{ name:'Africa', countries:[\r\n\t\t\t\t\t{ name:'Egypt', capital:'Cairo' },\r\n\t\t\t\t\t{ name:'Kenya', capital:'Nairobi' },\r\n\t\t\t\t\t{ name:'Sudan', capital:'Khartoum' }]},\r\n\t\t\t\t{ name:'Australia', capital:'Canberra' },\r\n\t\t\t\t{ name:'North America', countries:[\r\n\t\t\t\t\t{ name:'Canada', population:'33 million', cities:[\r\n\t\t\t\t\t\t{ name:'Toronto', population:'2.5 million' },\r\n\t\t\t\t\t\t{ name:'Alberta', population:'1 million' }\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t{ name: 'United States of America', capital: 'Washington DC', states:[\r\n\t\t\t\t\t\t{ name: 'Missouri'},\r\n\t\t\t\t\t\t{ name: 'Arkansas'}\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t]}\r\n\t\t\t]\r\n\t\t}};\r\n\t}else if (name === \"data_multitype\"){\r\n\t\tdata = {data: {\r\n\t\t\t\t\t\t\"identifier\": \"count\",\r\n\t\t\t\t\t\t\"label\": \"count\",\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t{ count: 1,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 2,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 3,    value: \"false\"},\r\n\t\t\t\t\t\t\t{ count: 4,    value: false  },\r\n\t\t\t\t\t\t\t{ count: 5,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 6,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 7,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 8,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 9,    value: \"false\"},\r\n\t\t\t\t\t\t\t{ count: 10,   value: false  },\r\n\t\t\t\t\t\t\t{ count: 11,   value: [false, false]},\r\n\t\t\t\t\t\t\t{ count: \"12\", value: [false, \"true\"]}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t}else if (name === \"countries_references\"){\r\n\t\tdata = {data: { identifier: 'name',\r\n\t\t\t\t\t\tlabel: 'name',\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t{ name:'Africa', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Egypt'}, {_reference:'Kenya'}, {_reference:'Sudan'}] },\r\n\t\t\t\t\t\t\t{ name:'Egypt', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Kenya', type:'country',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Nairobi'}, {_reference:'Mombasa'}] },\r\n\t\t\t\t\t\t\t{ name:'Nairobi', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Mombasa', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Sudan', type:'country',\r\n\t\t\t\t\t\t\t\tchildren:{_reference:'Khartoum'} },\r\n\t\t\t\t\t\t\t{ name:'Khartoum', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Asia', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'China'}, {_reference:'India'}, {_reference:'Russia'}, {_reference:'Mongolia'}] },\r\n\t\t\t\t\t\t\t{ name:'China', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'India', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Russia', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Mongolia', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Australia', type:'continent', population:'21 million',\r\n\t\t\t\t\t\t\t\tchildren:{_reference:'Commonwealth of Australia'}},\r\n\t\t\t\t\t\t\t{ name:'Commonwealth of Australia', type:'country', population:'21 million'},\r\n\t\t\t\t\t\t\t{ name:'Europe', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Germany'}, {_reference:'France'}, {_reference:'Spain'}, {_reference:'Italy'}] },\r\n\t\t\t\t\t\t\t{ name:'Germany', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'France', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Spain', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Italy', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'North America', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Mexico'}, {_reference:'Canada'}, {_reference:'United States of America'}] },\r\n\t\t\t\t\t\t\t{ name:'Mexico', type:'country',  population:'108 million', area:'1,972,550 sq km',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Mexico City'}, {_reference:'Guadalajara'}] },\r\n\t\t\t\t\t\t\t{ name:'Mexico City', type:'city', population:'19 million', timezone:'-6 UTC'},\r\n\t\t\t\t\t\t\t{ name:'Guadalajara', type:'city', population:'4 million', timezone:'-6 UTC' },\r\n\t\t\t\t\t\t\t{ name:'Canada', type:'country',  population:'33 million', area:'9,984,670 sq km',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Ottawa'}, {_reference:'Toronto'}] },\r\n\t\t\t\t\t\t\t{ name:'Ottawa', type:'city', population:'0.9 million', timezone:'-5 UTC'},\r\n\t\t\t\t\t\t\t{ name:'Toronto', type:'city', population:'2.5 million', timezone:'-5 UTC' },\r\n\t\t\t\t\t\t\t{ name:'United States of America', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'South America', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Brazil'}, {_reference:'Argentina'}] },\r\n\t\t\t\t\t\t\t{ name:'Brazil', type:'country', population:'186 million' },\r\n\t\t\t\t\t\t\t{ name:'Argentina', type:'country', population:'40 million' }\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t}\r\n\treturn data;\r\n};\r\n\r\n//-----------------------------------------------------\r\n// tests\r\ndojox.data.tests.stores.AndOrReadStore.getTests = function(){\r\n\tdojox.data.tests.stores.AndOrReadStore.tests = [\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity()\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tif(item !== null){\r\n\t\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() notFound\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item === null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv_not\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentityAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getIdentityAttributes function.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getIdentityAttributes function.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar identifiers = store.getIdentityAttributes(item);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(identifiers));\r\n\t\t\t\t\tt.assertEqual(1, identifiers.length);\r\n\t\t\t\t\tt.assertEqual(\"abbr\", identifiers[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() commentFilteredJson\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrReadStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() nullValue\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checling a null value.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a null value.\r\n\t\t\t\t//\t\tThis tests handling attributes in json that were defined as null properly.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withNull\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"ec\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() booleanValue\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a boolean value.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a boolean value.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withBoolean\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"Utopia\");\r\n\t\t\t\t\tvar real = store.getValue(item,\"real\");\r\n\t\t\t\t\tt.assertEqual(real, false);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"ut\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() withoutSpecifiedIdInData\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of bug #4691, looking up something by assigned id, not one specified in the JSON data.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of bug #4691, looking up something by assigned id, not one specified in the JSON data.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"2\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === \"sv\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity() withoutSpecifiedId\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ query:{abbr: \"sv\"}, onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity() withoutSpecifiedId, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ query:'abbr: \"sv\"', onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() all\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completedAll = function(items, request){\r\n\t\t\t\t\tt.is(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tstore.fetch({ onComplete: completedAll, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() abort\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch abort on AndOrReadStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch abort on AndOrReadStore.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar abortCalled = false;\r\n\t\t\t\t\tfunction completedAll(items, request){\r\n\t\t\t\t\t\tt.is(7, items.length);\r\n\t\t\t\t\t\tif(abortCalled){\r\n\t\t\t\t\t\t\tconsole.log(\"Made it to complete callback and abort was called.  Problem.\");\r\n\t\t\t\t\t\t\td.errback(new Error(\"Should not be here.\"));\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t//We beat out calling abort, so this is okay.  Timing.\r\n\t\t\t\t\t\t\tconsole.log(\"in onComplete and abort has not been called.  Timing.  This is okay.\");\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction error(errData, request){\r\n\t\t\t\t\t\t//An abort should throw a cancel error, so we should\r\n\t\t\t\t\t\t//reach this.\r\n\t\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Get everything...\r\n\t\t\t\t\tvar req = store.fetch({ onComplete: completedAll, onError: error});\r\n\t\t\t\t\tabortCalled=true;\r\n\t\t\t\t\tconsole.log(\"Calling abort.\");\r\n\t\t\t\t\treq.abort();\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() shallow\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of only toplevel items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of only toplevel items.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() shallow, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of only toplevel items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of only toplevel items.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() Multiple\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onCompleteOne = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onCompleteTwo = function(items, request){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteOne,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"N*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteTwo,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() Multiple, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onCompleteOne = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onCompleteTwo = function(items, request){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteOne,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"N*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteTwo,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() MultipleMixedFetch\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t//\t\tTests an item fetch and an identity fetch.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"El*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() MultipleMixedFetch, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t//\t\tTests an item fetch and an identity fetch.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"El*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() deep\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items (including children (nested))\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items (including children (nested))\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() deep, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items (including children (nested))\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items (including children (nested))\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() hierarchy off\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\t//Set this as hierarchy off before fetch to make sure it traps and configs right.\r\n\t\t\t\tstore.hierarchical = false;\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\t//With hierarchy off, this should only match 2, as only two data store items\r\n\t\t\t\t\t//will be quertied\r\n\t\t\t\t\tt.assertEqual(2, items.length);\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar countries = store.getValues(items[i], \"countries\");\r\n\t\t\t\t\t\tif(countries){\r\n\t\t\t\t\t\t\tvar j;\r\n\t\t\t\t\t\t\t//Make sure none of the child objects were processed into items.\r\n\t\t\t\t\t\t\tfor(j = 0; j<countries.length; j++){\r\n\t\t\t\t\t\t\t\tpassed = !store.isItem(countries[j]);\r\n\t\t\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\td.errback(new Error(\"Located a child item with hierarchy off and no references in the data.  Error.\"));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData, request){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() hierarchy off refs still parse\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_references\"));\r\n\t\t\t\t\r\n\t\t\t\t//Set this as hierarchy off before fetch to make sure it traps and configs right.\r\n\t\t\t\tstore.hierarchical = false;\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\t//With hierarchy off, this should only match 2, as only two data store items\r\n\t\t\t\t\t//will be quertied\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar countries = store.getValues(items[i], \"children\");\r\n\t\t\t\t\t\tif(countries){\r\n\t\t\t\t\t\t\tvar j;\r\n\t\t\t\t\t\t\t//Make sure none of the child objects were processed into items.\r\n\t\t\t\t\t\t\tfor(j = 0; j<countries.length; j++){\r\n\t\t\t\t\t\t\t\tpassed = store.isItem(countries[j]);\r\n\t\t\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\td.errback(new Error(\"Found a non-child item in a reference list in a references based input.  Error.\"));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one_commentFilteredJson\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrReadStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one_commentFilteredJson, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrReadStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() withNull\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item where some attributes are null.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item where some attributes are null.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withNull\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"E*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() withNull, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item where some attributes are null.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item where some attributes are null.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withNull\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"E*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() all_streaming\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar count = 0;\r\n\t\r\n\t\t\t\tvar onBegin = function(size, requestObj){\r\n\t\t\t\t\tt.assertEqual(size, 7);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, requestObj){\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(count, 7);\r\n\t\t\t\t\tt.assertTrue(items === null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tstore.fetch({\tonBegin: onBegin,\r\n\t\t\t\t\t\t\t\t\t\tonItem: onItem,\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() paging\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar dumpSixthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFifthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 0);\r\n\t\t\t\t\trequest.start = 2;\r\n\t\t\t\t\trequest.count = 20;\r\n\t\t\t\t\trequest.onComplete = dumpSixthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFourthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 9;\r\n\t\t\t\t\trequest.count = 100;\r\n\t\t\t\t\trequest.onComplete = dumpFifthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpThirdFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 2;\r\n\t\t\t\t\trequest.count = 20;\r\n\t\t\t\t\trequest.onComplete = dumpFourthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpSecondFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\trequest.start = 0;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpThirdFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFirstFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 3;\r\n\t\t\t\t\trequest.count = 1;\r\n\t\t\t\t\trequest.onComplete = dumpSecondFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 7);\r\n\t\t\t\t\trequest.start = 1;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpFirstFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType Match\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {count: \"1*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType Match, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'count: \"1*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType, MultiValue Match\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {value: \"true\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType, MultiValue Match, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'value: \"true\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabel()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar label = store.getLabel(items[0]);\r\n\t\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\t\tt.assertEqual(\"Ecuador\", label);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabel(), complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar label = store.getLabel(items[0]);\r\n\t\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\t\tt.assertEqual(\"Ecuador\", label);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabelAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar labelList = store.getLabelAttributes(items[0]);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\t\tt.assertEqual(\"name\", labelList[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabelAttributes(), complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar labelList = store.getLabelAttributes(items[0]);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\t\tt.assertEqual(\"name\", labelList[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getValue()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertTrue(name === \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getValues()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar names = store.getValues(item,\"name\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(names));\r\n\t\t\t\t\tt.assertEqual(names.length, 1);\r\n\t\t\t\t\tt.assertEqual(names[0], \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: isItem()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tt.assertTrue(!store.isItem({}));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: isItem() multistore\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t//\t\tto verify two different store instances do not accept\r\n\t\t\t\t//\t\titems from each other.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t//\t\tto verify two different store instances do not accept\r\n\t\t\t\t//\t\titems from each other.\r\n\t\r\n\t\t\t\t// Two different instances, even  if they read from the same URL\r\n\t\t\t\t// should not accept items between each other!\r\n\t\t\t\tvar store1 = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\tvar store2 = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar onItem1 = function(item1){\r\n\t\t\t\t\tt.assertTrue(item1 !== null);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar onItem2 = function(item2){\r\n\t\t\t\t\t\tt.assertTrue(item1 !== null);\r\n\t\t\t\t\t\tt.assertTrue(item2 !== null);\r\n\t\t\t\t\t\tt.assertTrue(store1.isItem(item1));\r\n\t\t\t\t\t\tt.assertTrue(store2.isItem(item2));\r\n\t\t\t\t\t\tt.assertTrue(!store1.isItem(item2));\r\n\t\t\t\t\t\tt.assertTrue(!store2.isItem(item1));\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore2.fetchItemByIdentity({identity: \"sv\", onItem: onItem2, onError: onError});\r\n\t\r\n\t\t\t\t};\r\n\t\t\t\tstore1.fetchItemByIdentity({identity: \"sv\", onItem: onItem1, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: hasAttribute()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.hasAttribute(item, \"abbr\"));\r\n\t\t\t\t\tt.assertTrue(!store.hasAttribute(item, \"abbr_not\"));\r\n\t\r\n\t\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\t\tvar passed = false;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstore.hasAttribute(item, null);\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\tpassed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: containsValue()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"abbr\", \"sv\"));\r\n\t\t\t\t\tt.assertTrue(!store.containsValue(item, \"abbr\", \"sv1\"));\r\n\t\t\t\t\tt.assertTrue(!store.containsValue(item, \"abbr\", null));\r\n\t\r\n\t\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\t\tvar passed = false;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstore.containsValue(item, null, \"foo\");\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\tpassed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\r\n\t\t\t\t\tvar attributes = store.getAttributes(item);\r\n\t\t\t\t\tt.assertEqual(attributes.length, 3);\r\n\t\t\t\t\tfor(var i = 0; i < attributes.length; i++){\r\n\t\t\t\t\t\tt.assertTrue((attributes[i] === \"name\" || attributes[i] === \"abbr\" || attributes[i] === \"capital\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getFeatures()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Read\"] !== null);\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Identity\"] !== null);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch0\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"abbr\");\r\n\t\t\t\t\t\tif(!(value === \"ec\" || value === \"eg\" || value === \"er\" || value === \"ee\" || value === \"et\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {abbr: \"e*\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch0, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"abbr\");\r\n\t\t\t\t\t\tif(!(value === \"ec\" || value === \"eg\" || value === \"er\" || value === \"ee\" || value === \"et\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'abbr: \"e*\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch1\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bit$Bite\" || value === \"jfq4@#!$!@Rf14r14i5u\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"*$*\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch1, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bit$Bite\" || value === \"jfq4@#!$!@Rf14r14i5u\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"*$*\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch2\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch2, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseSensitive\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, queryOptions: {ignoreCase: false} , onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseSensitive, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', queryOptions: {ignoreCase: false} , onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseInsensitive\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"BAR*foo\" || value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, queryOptions: {ignoreCase: true}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseInsensitive, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"BAR*foo\" || value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', queryOptions: {ignoreCase: true}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumeric\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === i)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumericDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!((items.length - (store.getValue(items[i], \"uniqueId\") + 1)) === i)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumericWithCount\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar itemId = 10;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === itemId)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\titemId--; // Decrement the item id.  We are descending sorted, so it should go 10, 9, 8, etc.\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t \r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes, count: 5});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabetic\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [ \t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"123abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcd\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcdefg\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bca\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"foghorn\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"lmnop\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qberty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qwerty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabeticDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [ \t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"123abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcd\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcdefg\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bca\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"foghorn\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"lmnop\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qberty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qwerty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\torderedArray = orderedArray.reverse();\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortDate\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting date.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting date.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value: new Date(0)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value: new Date(100)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:new Date(1000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:new Date(2000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:new Date(3000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:new Date(4000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:new Date(5000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:new Date(6000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:new Date(7000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:new Date(8000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:new Date(9000)}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items,request){\r\n\t\t\t\t\tvar orderedArray =\t[0,100,1000,2000,3000,4000,5000,6000,7000,8000,9000];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\").getTime() === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortDateDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting date in descending order.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting date in descending order.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value: new Date(0)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value: new Date(100)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:new Date(1000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:new Date(2000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:new Date(3000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:new Date(4000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:new Date(5000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:new Date(6000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:new Date(7000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:new Date(8000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:new Date(9000)}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items,request){\r\n\t\t\t\t\tvar orderedArray =\t[0,100,1000,2000,3000,4000,5000,6000,7000,8000,9000];\r\n\t\t\t\t\torderedArray = orderedArray.reverse();\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\").getTime() === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortMultiple\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes.\r\n\t\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 1, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 12, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 11, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tvar orderedArray0 = [7,2,4,3,1,6,5,12,10,9,8,11];\r\n\t\t\t\t\tvar orderedArray1 = [\t\"BaB{aMa|SaRa***F}oo\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"ba|r*foo\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bit$Bite\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"boomBam\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"fo|o*b.ar\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"jfq4@#!$!@|f1.$4r14i5u\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"ouagadogou\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"squawl\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"zulu\"\r\n\t\t\t\t\t\t\t\t\t\t];\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(\t(store.getValue(items[i], \"uniqueId\") === orderedArray0[i])&&\r\n\t\t\t\t\t\t\t\t(store.getValue(items[i], \"value\") === orderedArray1[i]))\r\n\t\t\t\t\t\t\t){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{ attribute: \"value\"}, { attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortMultipleSpecialComparator\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes with a custom comparator.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes with a custom comparator.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 1, status:\"CLOSED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2,  status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4,  status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5,  status:\"CLOSED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6,  status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 12, status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 11, status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9,  status:\"CLOSED\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tstore.comparatorMap = {};\r\n\t\t\t\tstore.comparatorMap[\"status\"] = function(a,b) {\r\n\t\t\t\t\tvar ret = 0;\r\n\t\t\t\t\t// We want to map these by what the priority of these items are, not by alphabetical.\r\n\t\t\t\t\t// So, custom comparator.\r\n\t\t\t\t\tvar enumMap = { OPEN: 3, BLOCKED: 2, PENDING: 1, CLOSED: 0};\r\n\t\t\t\t\tif (enumMap[a] > enumMap[b]) {\r\n\t\t\t\t\t\tret = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (enumMap[a] < enumMap[b]) {\r\n\t\t\t\t\t\tret = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"status\", descending: true}, { attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, findResult){\r\n\t\t\t\t\tvar orderedArray = [11,6,2,12,10,4,8,7,3,9,5,1];\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabeticWithUndefined\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8 },  //Deliberate undefined value\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [10,0,2,3,1,5,4,6,7,9,8];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: errorCondition_idCollision_inMemory\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\tdata: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: [{uniqueId: 12345, value:\"foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 123456, value:\"bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 12345, value:\"boom\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 123457, value:\"bit\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t//This is bad if this fires, this case should fail and not call onComplete.\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.callback(false);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\t//This is good if this fires, it is expected.\r\n\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: errorCondition_idCollision_xhr\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t\t\t\t\tvar store = new dojox.data.AndOrReadStore({url: require.toUrl(\"dojo/tests/data/countries_idcollision.json\").toString() });\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\t//This is bad if this fires, this case should fail and not call onComplete.\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.callback(false);\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\t\t//This is good if this fires, it is expected.\r\n\t\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: Date_datatype\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t//var store = new dojox.data.AndOrReadStore(tests.data.readOnlyItemFileTestTemplates.testFile[\"countries_withDates\"]);\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries_withDates\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar independenceDate = store.getValue(item, \"independence\");\r\n\t\t\t\t\tt.assertTrue(independenceDate instanceof Date);\r\n\t\t\t\t\t//Check to see if the value was deserialized properly.  Since the store stores in UTC/GMT, it\r\n\t\t\t\t\t//should also be compared in the UTC/GMT mode\r\n\t\t\t\t\tt.assertTrue(dojo.date.stamp.toISOString(independenceDate, {zulu:true}) === \"1993-05-24T00:00:00Z\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"er\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_Color_SimpleMapping\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test using literal values with custom datatypes\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'Color': dojo.Color}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar beaker = item;\r\n\t\t\t\t\tvar hairColor = store.getValue(beaker, \"hairColor\");\r\n\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\tt.assertTrue(hairColor.toHex() == \"#ff0000\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Beaker\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_Color_GeneralMapping\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test using literal values with custom datatypes\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'Color': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojo.Color,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojo.Color(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar beaker = item;\r\n\t\t\t\t\tvar hairColor = store.getValue(beaker, \"hairColor\");\r\n\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\tt.assertTrue(hairColor.toHex() == \"#ff0000\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Beaker\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_CustomObject 0 (False) value\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test type mapping and _values that are false-like\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Bob', species:'human', age: {_type:'dojox.data.tests.Wrapper', _value:0} },\r\n\t\t\t\t\t\t{ name:'Nancy', species:'human', age: {_type:'dojox.data.tests.Wrapper', _value:32} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'dojox.data.tests.Wrapper': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojox.data.tests.Wrapper,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojox.data.tests.Wrapper(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\tconsole.log(item);\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar bob = item;\r\n\t\t\t\t\tvar age = store.getValue(item, \"age\");\r\n\t\t\t\t\tt.assertTrue(age instanceof dojox.data.tests.Wrapper);\r\n\t\t\t\t\tt.assertTrue(age.toString() == \"WRAPPER: [0]\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Bob\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_CustomObject Boolean False values\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test type mapping and _values that are false-like\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Bob', isHuman: {_type:'dojox.data.tests.Wrapper', _value:false} },\r\n\t\t\t\t\t\t{ name:'Nancy', isHuman: {_type:'dojox.data.tests.Wrapper', _value: true} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'dojox.data.tests.Wrapper': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojox.data.tests.Wrapper,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojox.data.tests.Wrapper(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar bob = item;\r\n\t\t\t\t\tvar isHuman = store.getValue(item, \"isHuman\");\r\n\t\t\t\t\tt.assertTrue(isHuman instanceof dojox.data.tests.Wrapper);\r\n\t\t\t\t\tt.assertTrue(isHuman.toString() == \"WRAPPER: [false]\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Bob\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_CustomObject Empty String values\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test type mapping and _values that are false-like\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Bob', lastName: {_type:'dojox.data.tests.Wrapper', _value:\"\"} },\r\n\t\t\t\t\t\t{ name:'Nancy', lastName: {_type:'dojox.data.tests.Wrapper', _value: \"Doe\"} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'dojox.data.tests.Wrapper': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojox.data.tests.Wrapper,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojox.data.tests.Wrapper(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar bob = item;\r\n\t\t\t\t\tvar lastName = store.getValue(item, \"lastName\");\r\n\t\t\t\t\tt.assertTrue(lastName instanceof dojox.data.tests.Wrapper);\r\n\t\t\t\t\tt.assertTrue(lastName.toString() == \"WRAPPER: []\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Bob\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_CustomObject explicit null values\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test type mapping and _values that are false-like\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Bob', lastName: {_type:'dojox.data.tests.Wrapper', _value:null} },\r\n\t\t\t\t\t\t{ name:'Nancy', lastName: {_type:'dojox.data.tests.Wrapper', _value: \"Doe\"} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'dojox.data.tests.Wrapper': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojox.data.tests.Wrapper,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojox.data.tests.Wrapper(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar bob = item;\r\n\t\t\t\t\tvar lastName = store.getValue(item, \"lastName\");\r\n\t\t\t\t\tt.assertTrue(lastName instanceof dojox.data.tests.Wrapper);\r\n\t\t\t\t\tt.assertTrue(lastName.toString() == \"WRAPPER: [null]\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Bob\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_CustomObject explicit undefined value\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test type mapping and _values that are false-like\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Bob', lastName: {_type:'dojox.data.tests.Wrapper', _value: undefined} },\r\n\t\t\t\t\t\t{ name:'Nancy', lastName: {_type:'dojox.data.tests.Wrapper', _value: \"Doe\"} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'dojox.data.tests.Wrapper': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojox.data.tests.Wrapper,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojox.data.tests.Wrapper(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar bob = item;\r\n\t\t\t\t\tvar lastName = store.getValue(item, \"lastName\");\r\n\t\t\t\t\tt.assertTrue(lastName instanceof dojox.data.tests.Wrapper);\r\n\t\t\t\t\tt.assertTrue(lastName.toString() == \"WRAPPER: [undefined]\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Bob\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\tname: \"Read API: hierarchical_data\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar northAmerica = items[0];\r\n\t\t\t\t\tvar canada = store.getValue(northAmerica, \"countries\");\r\n\t\t\t\t\tvar toronto = store.getValue(canada, \"cities\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(canada, \"name\"), \"Canada\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(toronto, \"name\"), \"Toronto\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({\r\n\t\t\t\t\tquery: {name: \"North America\"},\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: hierarchical_data, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar northAmerica = items[0];\r\n\t\t\t\t\tvar canada = store.getValue(northAmerica, \"countries\");\r\n\t\t\t\t\tvar toronto = store.getValue(canada, \"cities\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(canada, \"name\"), \"Canada\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(toronto, \"name\"), \"Toronto\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({\r\n\t\t\t\t\tquery: 'name: \"North America\"',\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset url.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore.url = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onItem2 (item){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem2, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch, close (clearOnClose: true, reset url.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore.url = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onComplete (items){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetch({query: {abbr:\"ec\"}, onComplete:onComplete, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset _jsonFileUrl.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore._jsonFileUrl = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onItem2 (item){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem2, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset data.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test that clear on close and reset of data works.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test that clear on close and reset of data works.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\titems: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t{uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t{uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t{uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t{uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t{uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t{uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar firstComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar firstItem = items[0];\r\n\t\r\n\t\t\t\t\t//Set the store clearing options and the new data\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.data = { identifier: \"uniqueId\",\r\n\t\t\t\t\t\titems: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t{uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t{uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t{uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t{uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t{uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t{uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.close();\r\n\t\r\n\t\t\t\t\t//Do the next fetch and verify that the next item you get is not\r\n\t\t\t\t\t//a reference to the same item (data cleared and reloaded.\r\n\t\t\t\t\tvar secondComplete = function(items, request){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\t\tvar secondItem = items[0];\r\n\t\t\t\t\t\t\tt.assertTrue(firstItem != null);\r\n\t\t\t\t\t\t\tt.assertTrue(secondItem != null);\r\n\t\t\t\t\t\t\tt.assertTrue(firstItem != secondItem);\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetch({query: {value: \"bar\\*foo\"}, onComplete: secondComplete, onError: error});\r\n\t\t\t\t}\r\n\t\t\t\tfunction error(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\*foo\"}, onComplete: firstComplete, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: no_identifier_specified\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar arrayOfItems = [\r\n\t\t\t\t\t{name:\"Kermit\", color:\"green\"},\r\n\t\t\t\t\t{name:\"Miss Piggy\", likes:\"Kermit\"},\r\n\t\t\t\t\t{name:\"Beaker\", hairColor:\"red\"}\r\n\t\t\t\t];\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore({data:{items:arrayOfItems}});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\t\tvar hasIdentityFeature = Boolean(features['dojo.data.api.Identity']);\r\n\t\t\t\t\tt.assertTrue(hasIdentityFeature);\r\n\t\t\t\t\tfor(var i = 0; i < items.length; ++i){\r\n\t\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\t\tvar identifier = store.getIdentityAttributes(item);\r\n\t\t\t\t\t\tt.assertTrue(identifier === null);\r\n\t\t\t\t\t\tvar identity = store.getIdentity(item);\r\n\t\t\t\t\t\tt.assertTrue(typeof identity == \"number\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\td.errback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: hierarchical_data\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\t\tvar hasIdentityFeature = Boolean(features['dojo.data.api.Identity']);\r\n\t\t\t\t\tt.assertTrue(hasIdentityFeature);\r\n\t\t\t\t\tfor(var i = 0; i < items.length; ++i){\r\n\t\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\t\tvar identifier = store.getIdentityAttributes(item);\r\n\t\t\t\t\t\tt.assertTrue(identifier === null);\r\n\t\t\t\t\t\tvar identity = store.getIdentity(item);\r\n\t\t\t\t\t\tt.assertTrue(typeof identity == \"number\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\td.errback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: functionConformance\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var i in readApi){\r\n\t\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: functionConformance\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\tvar identityApi = new dojo.data.api.Identity();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var i in identityApi){\r\n\t\r\n\t\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar member = identityApi[i];\r\n\t\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t//complex parallels of existing simple queries immediately follow them above.  can search on \"complex\"\r\n\t\t//below are complex queries.\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, OR, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"s*\" || capital:\"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND(OR, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND(OR, as json object, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")'},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as json object, complex, with extra attrs\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")', name: \"Ec*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as json object, complex, with extra attrs and spaces\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tt.assertEqual(\"Equatorial Guinea\", store.getValue(items[0], \"name\"));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"g*\" AND (capital:\"A*\" or capital: \"M*\")', name: \"Equatorial G*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as quoted json object, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrReadStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrReadStore(dojox.data.tests.stores.AndOrReadStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: \"{complexQuery:'abbr: \\\"e*\\\" AND (capital:\\\"A*\\\" or capital: \\\"Q*\\\")'}\",\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t}\r\n\t];\r\n\treturn dojox.data.tests.stores.AndOrReadStore.tests;\r\n};\r\ndoh.register(\"dojox.data.tests.stores.AndOrReadStore\", dojox.data.tests.stores.AndOrReadStore.getTests());\r\n"]}