{"version":3,"sources":["data/tests/stores/AndOrWriteStore.js"],"names":["dojo","provide","require","dojox","data","tests","stores","AndOrWriteStore","getTestData","name","isBrowser","url","toUrl","toString","identifier","label","items","abbr","capital","real","independence","_type","_value","countries","population","cities","states","count","value","type","children","_reference","area","timezone","id","friends","siblings","enemies","getTests","runTest","t","store","d","doh","Deferred","fetchItemByIdentity","identity","onItem","item","assertTrue","getValue","assertEqual","callback","onError","errData","errback","identifiers","getIdentityAttributes","isArray","length","getIdentity","fetch","query","request","onComplete","is","abortCalled","req","console","log","Error","abort","done","queryOptions","deep","hierarchical","i","passed","j","getValues","isItem","onBegin","size","requestObj","dumpSixthFetch","dumpFifthFetch","start","dumpFourthFetch","dumpThirdFetch","dumpSecondFetch","dumpFirstFetch","getLabel","labelList","getLabelAttributes","names","store1","store2","item1","item2","hasAttribute","e","containsValue","attributes","getAttributes","features","getFeatures","error","uniqueId","ignoreCase","sort","attribute","descending","itemId","orderedArray","reverse","Date","getTime","orderedArray0","orderedArray1","status","comparatorMap","a","b","ret","enumMap","OPEN","BLOCKED","PENDING","CLOSED","findResult","independenceDate","date","stamp","toISOString","zulu","species","color","hairColor","typeMap","Color","beaker","toHex","deserialize","northAmerica","canada","toronto","likes","hasIdentityFeature","Boolean","testStore","readApi","api","Read","charAt","identityApi","Identity","complexQuery","clearOnClose","urlPreventCache","ec","val","close","_arrayOfAllItems","_loadFinished","err","_jsonFileUrl","firstItem","secondItem","assertFalse","isDirty","setValue","setValues","values","unsetAttribute","onNewInvoked","onNew","newItem","parentInfo","undefined","oldValue","newValue","onSet","parent","newItem1","newItem2","deleteItem","itemsToo","requestToo","revert","itemToo","save","_saveInProgress","egypt","_saveEverything","saveCompleteCallback","saveFailedCallback","newFileContentString","struct","fromJson","cloneStore","itemClone","egyptClone","dataset","newStore","compare","customTypeMap","serialize","obj","newCountry","capitol","itemEntryNum","_itemNumPropName","deferred","initialCount","afterNewCount","afterRevertCount","found","afterDeleteCount","fetchedItem","connectHandle","connect","disconnect","functionName","writeApi","Write","Notification","lastItem","itemsAgain","requestAgain","identitiesInUse","hasOwnProperty","itemsReverted","item10","item3","item5","ident","toJson","_reverseRefMap","curItem","badRef","k","_dumpReferenceMap","beforeDelete","afterRevert","nairobi","refMap","debug","refs","params","referenceIntegrity","register"],"mappings":"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","file":"../../../../data/tests/stores/AndOrWriteStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.AndOrWriteStore\");\r\ndojo.require(\"dojox.data.AndOrWriteStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\ndojo.require(\"dojo.data.api.Identity\");\r\ndojo.require(\"dojo.date\");\r\ndojo.require(\"dojo.date.stamp\");\r\ndojo.require(\"dojo.data.api.Write\");\r\ndojo.require(\"dojo.data.api.Notification\");\r\n\r\n\r\n//The test data-sets and tests are taken from ItemFileReadStore, to show\r\n//\tbackwards compatibility, and from ItemFileWriteStore.\r\n//Since no new write capabilities are included in AndOrWriteStore (just those from\r\n//\tItemFileWriteStore), no new write tests were added.\r\n//Additionally, where appropriate (fetch/query), the ItemFileReadStore test is immediately\r\n//\tfollowed by the same query (with \", complex\" in the description), but with the query\r\n//\tbeing a string rather than a json object.\r\n//Below all those tests are new ones that test the use of AND, OR, NOT, ||, &&, (, ), and \",\"\r\n//\tin queries, as well as a mix of string and json object queries.\r\n//Since some widgets expect the query to be in json object form, in addition to the\r\n//\tquery=\"id:1234 || dept:'Sales Department' || (dept:Auto && id:2*)\" programmatic syntax,\r\n//\tquery=\"{complexQuery:'id:1234 || dept:\\\"Sales Department\\\" || (dept:Auto && id:2*)\" is\r\n//\ttested/supported.\r\n\r\n//-----------------------------------------------------\r\n// test data-sets\r\ndojox.data.tests.stores.AndOrWriteStore.getTestData = function(name){\r\n\tvar data = null;\r\n\tif(name === \"countries\"){\r\n\t\tif(dojo.isBrowser){\r\n\t\t\tdata = {url: require.toUrl(\"dojo/tests/data/countries.json\").toString() };\r\n\t\t}else{\r\n\t\t\tdata = {data: {\r\n\t\t\t\tidentifier:'abbr',\r\n\t\t\t\tlabel:'name',\r\n\t\t\t\titems:[\r\n\t\t\t\t\t{abbr:'ec', name:'Ecuador', capital:'Quito'},\r\n\t\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn'},\r\n\t\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t\t]\r\n\t\t\t} };\r\n\t\t}\r\n\t}else if(name === \"countries_withNull\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:null, capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:null, capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t{abbr:'ee', name:null, capital:'Tallinn'},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if(name === \"countries_withoutid\"){\r\n\t\tdata = {data: {\r\n\t\t\tlabel: \"name\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:null, capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:null, capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t{abbr:'ee', name:null, capital:'Tallinn'},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"countries_withBoolean\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:\"Ecuador\", capital:\"Quito\", real:true},\r\n\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo', real:true},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador', real:true},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo', real:true},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara', real:true},\r\n\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn', real:true},\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa', real:true},\r\n\t\t\t\t{abbr:'ut', name:'Utopia', capital:'Paradise', real:false}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"countries_withDates\"){\r\n\t\tdata = {data: {\r\n\t\t\tidentifier:\"abbr\",\r\n\t\t\titems:[\r\n\t\t\t\t{abbr:\"ec\", name:\"Ecuador\", capital:\"Quito\"},\r\n\t\t\t\t{abbr:'eg', name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t{abbr:'sv', name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t{abbr:'gq', name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t{abbr:'er', name:'Eritrea', capital:'Asmara', independence:{_type:'Date', _value:\"1993-05-24T00:00:00Z\"}}, // May 24, 1993,\r\n\t\t\t\t{abbr:'ee', name:'Estonia', capital:'Tallinn', independence:{_type:'Date', _value:\"1991-08-20T00:00:00Z\"}}, // August 20, 1991\r\n\t\t\t\t{abbr:'et', name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t]\r\n\t\t} };\r\n\t}else if (name === \"geography_hierarchy_small\"){\r\n\t\tdata = {data: {\r\n\t\t\titems:[\r\n\t\t\t\t{ name:'Africa', countries:[\r\n\t\t\t\t\t{ name:'Egypt', capital:'Cairo' },\r\n\t\t\t\t\t{ name:'Kenya', capital:'Nairobi' },\r\n\t\t\t\t\t{ name:'Sudan', capital:'Khartoum' }]},\r\n\t\t\t\t{ name:'Australia', capital:'Canberra' },\r\n\t\t\t\t{ name:'North America', countries:[\r\n\t\t\t\t\t{ name:'Canada', population:'33 million', cities:[\r\n\t\t\t\t\t\t{ name:'Toronto', population:'2.5 million' },\r\n\t\t\t\t\t\t{ name:'Alberta', population:'1 million' }\r\n\t\t\t\t\t\t]},\r\n\t\t\t\t\t{ name: 'United States of America', capital: 'Washington DC', states:[\r\n\t\t\t\t\t\t{ name: 'Missouri'},\r\n\t\t\t\t\t\t{ name: 'Arkansas'}\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t]}\r\n\t\t\t]\r\n\t\t}};\r\n\t}else if (name === \"data_multitype\"){\r\n\t\tdata = {data: {\r\n\t\t\t\t\t\t\"identifier\": \"count\",\r\n\t\t\t\t\t\t\"label\": \"count\",\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t{ count: 1,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 2,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 3,    value: \"false\"},\r\n\t\t\t\t\t\t\t{ count: 4,    value: false  },\r\n\t\t\t\t\t\t\t{ count: 5,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 6,    value: true   },\r\n\t\t\t\t\t\t\t{ count: 7,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 8,    value: \"true\" },\r\n\t\t\t\t\t\t\t{ count: 9,    value: \"false\"},\r\n\t\t\t\t\t\t\t{ count: 10,   value: false  },\r\n\t\t\t\t\t\t\t{ count: 11,   value: [false, false]},\r\n\t\t\t\t\t\t\t{ count: \"12\", value: [false, \"true\"]}\r\n\t\t\t\t\t   ]\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t}else if (name === \"countries_references\"){\r\n\t\tdata = {data: { identifier: 'name',\r\n\t\t\t\t\t\tlabel: 'name',\r\n\t\t\t\t\t\titems: [\r\n\t\t\t\t\t\t\t{ name:'Africa', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Egypt'}, {_reference:'Kenya'}, {_reference:'Sudan'}] },\r\n\t\t\t\t\t\t\t{ name:'Egypt', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Kenya', type:'country',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Nairobi'}, {_reference:'Mombasa'}] },\r\n\t\t\t\t\t\t\t{ name:'Nairobi', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Mombasa', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Sudan', type:'country',\r\n\t\t\t\t\t\t\t\tchildren:{_reference:'Khartoum'} },\r\n\t\t\t\t\t\t\t{ name:'Khartoum', type:'city' },\r\n\t\t\t\t\t\t\t{ name:'Asia', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'China'}, {_reference:'India'}, {_reference:'Russia'}, {_reference:'Mongolia'}] },\r\n\t\t\t\t\t\t\t{ name:'China', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'India', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Russia', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Mongolia', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Australia', type:'continent', population:'21 million',\r\n\t\t\t\t\t\t\t\tchildren:{_reference:'Commonwealth of Australia'}},\r\n\t\t\t\t\t\t\t{ name:'Commonwealth of Australia', type:'country', population:'21 million'},\r\n\t\t\t\t\t\t\t{ name:'Europe', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Germany'}, {_reference:'France'}, {_reference:'Spain'}, {_reference:'Italy'}] },\r\n\t\t\t\t\t\t\t{ name:'Germany', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'France', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Spain', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'Italy', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'North America', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Mexico'}, {_reference:'Canada'}, {_reference:'United States of America'}] },\r\n\t\t\t\t\t\t\t{ name:'Mexico', type:'country',  population:'108 million', area:'1,972,550 sq km',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Mexico City'}, {_reference:'Guadalajara'}] },\r\n\t\t\t\t\t\t\t{ name:'Mexico City', type:'city', population:'19 million', timezone:'-6 UTC'},\r\n\t\t\t\t\t\t\t{ name:'Guadalajara', type:'city', population:'4 million', timezone:'-6 UTC' },\r\n\t\t\t\t\t\t\t{ name:'Canada', type:'country',  population:'33 million', area:'9,984,670 sq km',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Ottawa'}, {_reference:'Toronto'}] },\r\n\t\t\t\t\t\t\t{ name:'Ottawa', type:'city', population:'0.9 million', timezone:'-5 UTC'},\r\n\t\t\t\t\t\t\t{ name:'Toronto', type:'city', population:'2.5 million', timezone:'-5 UTC' },\r\n\t\t\t\t\t\t\t{ name:'United States of America', type:'country' },\r\n\t\t\t\t\t\t\t{ name:'South America', type:'continent',\r\n\t\t\t\t\t\t\t\tchildren:[{_reference:'Brazil'}, {_reference:'Argentina'}] },\r\n\t\t\t\t\t\t\t{ name:'Brazil', type:'country', population:'186 million' },\r\n\t\t\t\t\t\t\t{ name:'Argentina', type:'country', population:'40 million' }\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t}else if(name === \"reference_integrity\"){  //write test data.\r\n\t\tdata =\r\n\t\t\t{ data: {\r\n\t\t\t\t\"identifier\": \"id\",\r\n\t\t\t\t\"label\": \"name\",\r\n\t\t\t\t\"items\": [\r\n\t\t\t\t\t{\"id\": 1, \"name\": \"Item 1\"},\r\n\t\t\t\t\t{\"id\": 2, \"name\": \"Item 2\"},\r\n\t\t\t\t\t{\"id\": 3, \"name\": \"Item 3\"},\r\n\t\t\t\t\t{\"id\": 4, \"name\": \"Item 4\"},\r\n\t\t\t\t\t{\"id\": 5, \"name\": \"Item 5\"},\r\n\t\t\t\t\t{\"id\": 6, \"name\": \"Item 6\"},\r\n\t\t\t\t\t{\"id\": 7, \"name\": \"Item 7\"},\r\n\t\t\t\t\t{\"id\": 8, \"name\": \"Item 8\"},\r\n\t\t\t\t\t{\"id\": 9, \"name\": \"Item 9\"},\r\n\t\t\t\t\t{\"id\": 10, \"name\": \"Item 10\", \"friends\": [{\"_reference\": 1},{\"_reference\": 3},{\"_reference\": 5}]},\r\n\t\t\t\t\t{\"id\": 11, \"name\": \"Item 11\", \"friends\": [{\"_reference\": 10}], \"siblings\": [{\"_reference\": 10}]},\r\n\t\t\t\t\t{\"id\": 12, \"name\": \"Item 12\", \"friends\": [{\"_reference\": 3},{\"_reference\": 7}], \"enemies\": [{\"_reference\": 10}]},\r\n\t\t\t\t\t{\"id\": 13, \"name\": \"Item 13\", \"friends\": [{\"_reference\": 10}]},\r\n\t\t\t\t\t{\"id\": 14, \"name\": \"Item 14\", \"friends\": [{\"_reference\": 11}]},\r\n\t\t\t\t\t{\"id\": 15, \"name\": \"item 15\", \"friends\": [{\"id\": 16, \"name\": \"Item 16\"}]}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\treturn data;\r\n};\r\n\r\n//-----------------------------------------------------\r\n// tests\r\ndojox.data.tests.stores.AndOrWriteStore.getTests = function(){\r\n\tdojox.data.tests.stores.AndOrWriteStore.tests = [\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity()\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tif(item !== null){\r\n\t\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() notFound\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item === null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv_not\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentityAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getIdentityAttributes function.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getIdentityAttributes function.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar identifiers = store.getIdentityAttributes(item);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(identifiers));\r\n\t\t\t\t\tt.assertEqual(1, identifiers.length);\r\n\t\t\t\t\tt.assertEqual(\"abbr\", identifiers[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() commentFilteredJson\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrWriteStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() nullValue\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checling a null value.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a null value.\r\n\t\t\t\t//\t\tThis tests handling attributes in json that were defined as null properly.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withNull\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"ec\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() booleanValue\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a boolean value.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the fetchItemByIdentity function of the store, checking a boolean value.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withBoolean\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"Utopia\");\r\n\t\t\t\t\tvar real = store.getValue(item,\"real\");\r\n\t\t\t\t\tt.assertEqual(real, false);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"ut\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: fetchItemByIdentity() withoutSpecifiedIdInData\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of bug #4691, looking up something by assigned id, not one specified in the JSON data.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of bug #4691, looking up something by assigned id, not one specified in the JSON data.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"2\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getIdentity function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getIdentity function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === \"sv\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity() withoutSpecifiedId\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ query:{abbr: \"sv\"}, onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: getIdentity() withoutSpecifiedId, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the #4691 bug\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withoutid\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.getIdentity(item) === 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ query:'abbr: \"sv\"', onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() all\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completedAll = function(items, request){\r\n\t\t\t\t\tt.is(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tstore.fetch({ onComplete: completedAll, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() abort\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch abort on AndOrWriteStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch abort on AndOrWriteStore.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar abortCalled = false;\r\n\t\t\t\t\tfunction completedAll(items, request){\r\n\t\t\t\t\t\tt.is(7, items.length);\r\n\t\t\t\t\t\tif(abortCalled){\r\n\t\t\t\t\t\t\tconsole.log(\"Made it to complete callback and abort was called.  Problem.\");\r\n\t\t\t\t\t\t\td.errback(new Error(\"Should not be here.\"));\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t//We beat out calling abort, so this is okay.  Timing.\r\n\t\t\t\t\t\t\tconsole.log(\"in onComplete and abort has not been called.  Timing.  This is okay.\");\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction error(errData, request){\r\n\t\t\t\t\t\t//An abort should throw a cancel error, so we should\r\n\t\t\t\t\t\t//reach this.\r\n\t\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Get everything...\r\n\t\t\t\t\tvar req = store.fetch({ onComplete: completedAll, onError: error});\r\n\t\t\t\t\tabortCalled=true;\r\n\t\t\t\t\tconsole.log(\"Calling abort.\");\r\n\t\t\t\t\treq.abort();\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() shallow\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of only toplevel items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of only toplevel items.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() shallow, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of only toplevel items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of only toplevel items.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() Multiple\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onCompleteOne = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onCompleteTwo = function(items, request){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteOne,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"N*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteTwo,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() Multiple, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onCompleteOne = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onCompleteTwo = function(items, request){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteOne,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"N*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onCompleteTwo,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() MultipleMixedFetch\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t//\t\tTests an item fetch and an identity fetch.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"El*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() MultipleMixedFetch, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTests that multiple fetches at the same time queue up properly and do not clobber each other on initial load.\r\n\t\t\t\t//\t\tTests an item fetch and an identity fetch.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar done = [false, false];\r\n\t\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tdone[0] = true;\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tdone[1] = true;\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertEqual(name, \"El Salvador\");\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(done[0] && done[1]){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\t//Find all items starting with A, only toplevel (root) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"El*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() deep\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items (including children (nested))\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items (including children (nested))\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() deep, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items (including children (nested))\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items (including children (nested))\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() hierarchy off\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\t\r\n\t\t\t\t//Set this as hierarchy off before fetch to make sure it traps and configs right.\r\n\t\t\t\tstore.hierarchical = false;\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\t//With hierarchy off, this should only match 2, as only two data store items\r\n\t\t\t\t\t//will be quertied\r\n\t\t\t\t\tt.assertEqual(2, items.length);\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar countries = store.getValues(items[i], \"countries\");\r\n\t\t\t\t\t\tif(countries){\r\n\t\t\t\t\t\t\tvar j;\r\n\t\t\t\t\t\t\t//Make sure none of the child objects were processed into items.\r\n\t\t\t\t\t\t\tfor(j = 0; j<countries.length; j++){\r\n\t\t\t\t\t\t\t\tpassed = !store.isItem(countries[j]);\r\n\t\t\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\td.errback(new Error(\"Located a child item with hierarchy off and no references in the data.  Error.\"));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData, request){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() hierarchy off refs still parse\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of all items with hierarchy disabled\r\n\t\t\t\t//\t\tThis should turn off processing child objects as data store items.  It will still process\r\n\t\t\t\t//\t\treferences and type maps.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_references\"));\r\n\t\t\t\t\r\n\t\t\t\t//Set this as hierarchy off before fetch to make sure it traps and configs right.\r\n\t\t\t\tstore.hierarchical = false;\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tfunction onComplete(items, request){\r\n\t\t\t\t\t//With hierarchy off, this should only match 2, as only two data store items\r\n\t\t\t\t\t//will be quertied\r\n\t\t\t\t\tt.assertEqual(items.length, 4);\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar countries = store.getValues(items[i], \"children\");\r\n\t\t\t\t\t\tif(countries){\r\n\t\t\t\t\t\t\tvar j;\r\n\t\t\t\t\t\t\t//Make sure none of the child objects were processed into items.\r\n\t\t\t\t\t\t\tfor(j = 0; j<countries.length; j++){\r\n\t\t\t\t\t\t\t\tpassed = store.isItem(countries[j]);\r\n\t\t\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!passed){\r\n\t\t\t\t\t\td.errback(new Error(\"Found a non-child item in a reference list in a references based input.  Error.\"));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction onError(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t}\r\n\t\t\t\t//Find all items starting with A, including child (nested) items.\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"A*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError,\r\n\t\t\t\t\t\t\t\t\t\tqueryOptions: {deep:true}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one_commentFilteredJson\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrWriteStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() one_commentFilteredJson, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t//\t\tThis tests loading a comment-filtered json file so that people using secure\r\n\t\t\t\t//\t\tdata with this store can bypass the JavaSceipt hijack noted in Fortify's\r\n\t\t\t\t//\t\tpaper.\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t                var store = new dojox.data.AndOrWriteStore({url: require.toUrl(\"dojo/tests/data/countries_commentFiltered.json\").toString()});\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() withNull\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item where some attributes are null.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item where some attributes are null.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withNull\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {name: \"E*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() withNull, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item where some attributes are null.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item where some attributes are null.\r\n\t\t\t\t//\t\tIntroduced because of tracker: #3153\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withNull\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'name: \"E*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() all_streaming\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar count = 0;\r\n\t\r\n\t\t\t\tvar onBegin = function(size, requestObj){\r\n\t\t\t\t\tt.assertEqual(size, 7);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, requestObj){\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(count, 7);\r\n\t\t\t\t\tt.assertTrue(items === null);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Get everything...\r\n\t\t\t\tstore.fetch({\tonBegin: onBegin,\r\n\t\t\t\t\t\t\t\t\t\tonItem: onItem,\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() paging\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTest of multiple fetches on a single result.  Paging, if you will.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar dumpSixthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFifthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 0);\r\n\t\t\t\t\trequest.start = 2;\r\n\t\t\t\t\trequest.count = 20;\r\n\t\t\t\t\trequest.onComplete = dumpSixthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFourthFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 9;\r\n\t\t\t\t\trequest.count = 100;\r\n\t\t\t\t\trequest.onComplete = dumpFifthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpThirdFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 2;\r\n\t\t\t\t\trequest.count = 20;\r\n\t\t\t\t\trequest.onComplete = dumpFourthFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpSecondFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\trequest.start = 0;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpThirdFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar dumpFirstFetch = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\trequest.start = 3;\r\n\t\t\t\t\trequest.count = 1;\r\n\t\t\t\t\trequest.onComplete = dumpSecondFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 7);\r\n\t\t\t\t\trequest.start = 1;\r\n\t\t\t\t\trequest.count = 5;\r\n\t\t\t\t\trequest.onComplete = dumpFirstFetch;\r\n\t\t\t\t\tstore.fetch(request);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType Match\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {count: \"1*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType Match, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'count: \"1*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType, MultiValue Match\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {value: \"true\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() with MultiType, MultiValue Match, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch againct an attribute that has different types for the value across items\r\n\t\t\t\t//\t\tIntroduced because of tracker: #4931\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"data_multitype\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'value: \"true\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabel()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar label = store.getLabel(items[0]);\r\n\t\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\t\tt.assertEqual(\"Ecuador\", label);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabel(), complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar label = store.getLabel(items[0]);\r\n\t\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\t\tt.assertEqual(\"Ecuador\", label);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabelAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar labelList = store.getLabelAttributes(items[0]);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\t\tt.assertEqual(\"name\", labelList[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {abbr: \"ec\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getLabelAttributes(), complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar labelList = store.getLabelAttributes(items[0]);\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(labelList));\r\n\t\t\t\t\tt.assertEqual(\"name\", labelList[0]);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"ec\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getValue()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValue function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar name = store.getValue(item,\"name\");\r\n\t\t\t\t\tt.assertTrue(name === \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getValues()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getValues function of the store.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar names = store.getValues(item,\"name\");\r\n\t\t\t\t\tt.assertTrue(dojo.isArray(names));\r\n\t\t\t\t\tt.assertEqual(names.length, 1);\r\n\t\t\t\t\tt.assertEqual(names[0], \"El Salvador\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: isItem()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tt.assertTrue(!store.isItem({}));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: isItem() multistore\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t//\t\tto verify two different store instances do not accept\r\n\t\t\t\t//\t\titems from each other.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isItem function of the store\r\n\t\t\t\t//\t\tto verify two different store instances do not accept\r\n\t\t\t\t//\t\titems from each other.\r\n\t\r\n\t\t\t\t// Two different instances, even  if they read from the same URL\r\n\t\t\t\t// should not accept items between each other!\r\n\t\t\t\tvar store1 = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar store2 = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar onItem1 = function(item1){\r\n\t\t\t\t\tt.assertTrue(item1 !== null);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar onItem2 = function(item2){\r\n\t\t\t\t\t\tt.assertTrue(item1 !== null);\r\n\t\t\t\t\t\tt.assertTrue(item2 !== null);\r\n\t\t\t\t\t\tt.assertTrue(store1.isItem(item1));\r\n\t\t\t\t\t\tt.assertTrue(store2.isItem(item2));\r\n\t\t\t\t\t\tt.assertTrue(!store1.isItem(item2));\r\n\t\t\t\t\t\tt.assertTrue(!store2.isItem(item1));\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore2.fetchItemByIdentity({identity: \"sv\", onItem: onItem2, onError: onError});\r\n\t\r\n\t\t\t\t};\r\n\t\t\t\tstore1.fetchItemByIdentity({identity: \"sv\", onItem: onItem1, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: hasAttribute()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the hasAttribute function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.hasAttribute(item, \"abbr\"));\r\n\t\t\t\t\tt.assertTrue(!store.hasAttribute(item, \"abbr_not\"));\r\n\t\r\n\t\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\t\tvar passed = false;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstore.hasAttribute(item, null);\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\tpassed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: containsValue()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the containsValue function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"abbr\", \"sv\"));\r\n\t\t\t\t\tt.assertTrue(!store.containsValue(item, \"abbr\", \"sv1\"));\r\n\t\t\t\t\tt.assertTrue(!store.containsValue(item, \"abbr\", null));\r\n\t\r\n\t\t\t\t\t//Test that null attributes throw an exception\r\n\t\t\t\t\tvar passed = false;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstore.containsValue(item, null, \"foo\");\r\n\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\tpassed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getAttributes()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getAttributes function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\r\n\t\t\t\t\tvar attributes = store.getAttributes(item);\r\n\t\t\t\t\tt.assertEqual(attributes.length, 3);\r\n\t\t\t\t\tfor(var i = 0; i < attributes.length; i++){\r\n\t\t\t\t\t\tt.assertTrue((attributes[i] === \"name\" || attributes[i] === \"abbr\" || attributes[i] === \"capital\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"sv\", onItem: onItem, onError: onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: getFeatures()\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Read\"] !== null);\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Identity\"] !== null);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch0\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"abbr\");\r\n\t\t\t\t\t\tif(!(value === \"ec\" || value === \"eg\" || value === \"er\" || value === \"ee\" || value === \"et\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {abbr: \"e*\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch0, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything starting with lowercase e\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"abbr\");\r\n\t\t\t\t\t\tif(!(value === \"ec\" || value === \"eg\" || value === \"er\" || value === \"ee\" || value === \"et\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'abbr: \"e*\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch1\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bit$Bite\" || value === \"jfq4@#!$!@Rf14r14i5u\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"*$*\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch1, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of everything with $ in it.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bit$Bite\" || value === \"jfq4@#!$!@Rf14r14i5u\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"*$*\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch2\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch2, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test exact pattern match\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected abbreviation found, match failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseSensitive\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, queryOptions: {ignoreCase: false} , onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseSensitive, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-sensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', queryOptions: {ignoreCase: false} , onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseInsensitive\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"BAR*foo\" || value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\\\*foo\"}, queryOptions: {ignoreCase: true}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() patternMatch_caseInsensitive, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test pattern matching of a pattern case-insensitively\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"BAR*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"BARBananafoo\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 2);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(value === \"BAR*foo\" || value === \"bar*foo\")){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected pattern matched.  Filter failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query: 'value: \"bar\\\\*foo\"', queryOptions: {ignoreCase: true}, onComplete: completed, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumeric\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === i)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumericDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t  items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t   {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t ]\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t });\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!((items.length - (store.getValue(items[i], \"uniqueId\") + 1)) === i)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortNumericWithCount\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting numerically in descending order, returning only a specified number of them.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 5);\r\n\t\t\t\t\tvar itemId = 10;\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === itemId)){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\titemId--; // Decrement the item id.  We are descending sorted, so it should go 10, 9, 8, etc.\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t \r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes, count: 5});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabetic\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [ \t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"123abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcd\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcdefg\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bca\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"foghorn\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"lmnop\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qberty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qwerty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabeticDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering in descending mode.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [ \t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"123abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abc\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcd\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"abcdefg\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bca\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"foghorn\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"lmnop\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qberty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"qwerty\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\"\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\torderedArray = orderedArray.reverse();\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortDate\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting date.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting date.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value: new Date(0)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value: new Date(100)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:new Date(1000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:new Date(2000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:new Date(3000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:new Date(4000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:new Date(5000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:new Date(6000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:new Date(7000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:new Date(8000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:new Date(9000)}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items,request){\r\n\t\t\t\t\tvar orderedArray =\t[0,100,1000,2000,3000,4000,5000,6000,7000,8000,9000];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\").getTime() === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortDateDescending\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting date in descending order.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting date in descending order.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value: new Date(0)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value: new Date(100)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:new Date(1000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:new Date(2000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:new Date(3000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:new Date(4000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:new Date(5000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:new Date(6000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:new Date(7000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:new Date(8000)},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:new Date(9000)}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items,request){\r\n\t\t\t\t\tvar orderedArray =\t[0,100,1000,2000,3000,4000,5000,6000,7000,8000,9000];\r\n\t\t\t\t\torderedArray = orderedArray.reverse();\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"value\").getTime() === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortMultiple\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes.\r\n\t\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 1, value:\"fo|o*b.ar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"ba|r*foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"jfq4@#!$!@|f1.$4r14i5u\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"BaB{aMa|SaRa***F}oo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8, value:\"squawl\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 12, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 11, value:\"zulu\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\tvar orderedArray0 = [7,2,4,3,1,6,5,12,10,9,8,11];\r\n\t\t\t\t\tvar orderedArray1 = [\t\"BaB{aMa|SaRa***F}oo\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"ba|r*foo\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"bit$Bite\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"boomBam\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"fo|o*b.ar\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"jfq4@#!$!@|f1.$4r14i5u\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"ouagadogou\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"seaweed\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"squawl\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"zulu\"\r\n\t\t\t\t\t\t\t\t\t\t];\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(\t(store.getValue(items[i], \"uniqueId\") === orderedArray0[i])&&\r\n\t\t\t\t\t\t\t\t(store.getValue(items[i], \"value\") === orderedArray1[i]))\r\n\t\t\t\t\t\t\t){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{ attribute: \"value\"}, { attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortMultipleSpecialComparator\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes with a custom comparator.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting on multiple attributes with a custom comparator.\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 1, status:\"CLOSED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2,  status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4,  status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5,  status:\"CLOSED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6,  status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8,  status:\"PENDING\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 12, status:\"BLOCKED\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 11, status:\"OPEN\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9,  status:\"CLOSED\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tstore.comparatorMap = {};\r\n\t\t\t\tstore.comparatorMap[\"status\"] = function(a,b) {\r\n\t\t\t\t\tvar ret = 0;\r\n\t\t\t\t\t// We want to map these by what the priority of these items are, not by alphabetical.\r\n\t\t\t\t\t// So, custom comparator.\r\n\t\t\t\t\tvar enumMap = { OPEN: 3, BLOCKED: 2, PENDING: 1, CLOSED: 0};\r\n\t\t\t\t\tif (enumMap[a] > enumMap[b]) {\r\n\t\t\t\t\t\tret = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (enumMap[a] < enumMap[b]) {\r\n\t\t\t\t\t\tret = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"status\", descending: true}, { attribute: \"uniqueId\", descending: true}];\r\n\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, findResult){\r\n\t\t\t\t\tvar orderedArray = [11,6,2,12,10,4,8,7,3,9,5,1];\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tvar value = store.getValue(items[i], \"value\");\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() sortAlphabeticWithUndefined\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test sorting alphabetic ordering.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t items: [ {uniqueId: 0, value:\"abc\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 1, value:\"bca\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 2, value:\"abcd\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 3, value:\"abcdefg\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 4, value:\"lmnop\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 5, value:\"foghorn\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 6, value:\"qberty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 7, value:\"qwerty\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 8 },  //Deliberate undefined value\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 9, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  {uniqueId: 10, value:\"123abc\"}\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t   }\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar completed = function(items, request){\r\n\t\t\t\t\t//Output should be in this order...\r\n\t\t\t\t\tvar orderedArray = [10,0,2,3,1,5,4,6,7,9,8];\r\n\t\t\t\t\tt.assertEqual(items.length, 11);\r\n\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\tif(!(store.getValue(items[i], \"uniqueId\") === orderedArray[i])){\r\n\t\t\t\t\t\t\tpassed=false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertTrue(passed);\r\n\t\t\t\t\tif (passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Unexpected sorting order found, sort failure.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar error = function(error, request) {\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar sortAttributes = [{attribute: \"value\"}];\r\n\t\t\t\tstore.fetch({onComplete: completed, onError: error, sort: sortAttributes});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: errorCondition_idCollision_inMemory\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({\tdata: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titems: [{uniqueId: 12345, value:\"foo\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 123456, value:\"bar\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 12345, value:\"boom\"},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{uniqueId: 123457, value:\"bit\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t//This is bad if this fires, this case should fail and not call onComplete.\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.callback(false);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\t//This is good if this fires, it is expected.\r\n\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: errorCondition_idCollision_xhr\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the errors thrown when there is an id collision in the data.\r\n\t\t\t\t//\t\tAdded because of tracker: #2546\r\n\t\r\n\t\t\t\tif(dojo.isBrowser){\r\n\t\t\t\t\tvar store = new dojox.data.AndOrWriteStore({url: require.toUrl(\"dojo/tests/data/countries_idcollision.json\").toString() });\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\t//This is bad if this fires, this case should fail and not call onComplete.\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\td.callback(false);\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\t\t//This is good if this fires, it is expected.\r\n\t\t\t\t\t\tt.assertTrue(true);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: Date_datatype\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t//var store = new dojox.data.AndOrWriteStore(tests.data.readOnlyItemFileTestTemplates.testFile[\"countries_withDates\"]);\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_withDates\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar independenceDate = store.getValue(item, \"independence\");\r\n\t\t\t\t\tt.assertTrue(independenceDate instanceof Date);\r\n\t\t\t\t\t//Check to see if the value was deserialized properly.  Since the store stores in UTC/GMT, it\r\n\t\t\t\t\t//should also be compared in the UTC/GMT mode\r\n\t\t\t\t\tt.assertTrue(dojo.date.stamp.toISOString(independenceDate, {zulu:true}) === \"1993-05-24T00:00:00Z\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"er\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_Color_SimpleMapping\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test using literal values with custom datatypes\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'Color': dojo.Color}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar beaker = item;\r\n\t\t\t\t\tvar hairColor = store.getValue(beaker, \"hairColor\");\r\n\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\tt.assertTrue(hairColor.toHex() == \"#ff0000\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Beaker\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: custom_datatype_Color_GeneralMapping\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test using literal values with custom datatypes\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap:{'Color': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype: dojo.Color,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojo.Color(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\tvar beaker = item;\r\n\t\t\t\t\tvar hairColor = store.getValue(beaker, \"hairColor\");\r\n\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\tt.assertTrue(hairColor.toHex() == \"#ff0000\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"Beaker\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: hierarchical_data\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t//var store = new dojox.data.AndOrWriteStore(tests.data.readOnlyItemFileTestTemplates.testFile[\"geography_hierarchy_small\"]);\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar northAmerica = items[0];\r\n\t\t\t\t\tvar canada = store.getValue(northAmerica, \"countries\");\r\n\t\t\t\t\tvar toronto = store.getValue(canada, \"cities\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(canada, \"name\"), \"Canada\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(toronto, \"name\"), \"Toronto\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({\r\n\t\t\t\t\tquery: {name: \"North America\"},\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: hierarchical_data, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t//var store = new dojox.data.AndOrWriteStore(tests.data.readOnlyItemFileTestTemplates.testFile[\"geography_hierarchy_small\"]);\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar northAmerica = items[0];\r\n\t\t\t\t\tvar canada = store.getValue(northAmerica, \"countries\");\r\n\t\t\t\t\tvar toronto = store.getValue(canada, \"cities\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(canada, \"name\"), \"Canada\");\r\n\t\t\t\t\tt.assertEqual(store.getValue(toronto, \"name\"), \"Toronto\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({\r\n\t\t\t\t\tquery: 'name: \"North America\"',\r\n\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\tonError: onError\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: no_identifier_specified\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar arrayOfItems = [\r\n\t\t\t\t\t{name:\"Kermit\", color:\"green\"},\r\n\t\t\t\t\t{name:\"Miss Piggy\", likes:\"Kermit\"},\r\n\t\t\t\t\t{name:\"Beaker\", hairColor:\"red\"}\r\n\t\t\t\t];\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data:{items:arrayOfItems}});\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\t\tvar hasIdentityFeature = Boolean(features['dojo.data.api.Identity']);\r\n\t\t\t\t\tt.assertTrue(hasIdentityFeature);\r\n\t\t\t\t\tfor(var i = 0; i < items.length; ++i){\r\n\t\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\t\tvar identifier = store.getIdentityAttributes(item);\r\n\t\t\t\t\t\tt.assertTrue(identifier === null);\r\n\t\t\t\t\t\tvar identity = store.getIdentity(item);\r\n\t\t\t\t\t\tt.assertTrue(typeof identity == \"number\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\td.errback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: hierarchical_data\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"geography_hierarchy_small\"));\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tvar features = store.getFeatures();\r\n\t\t\t\t\tvar hasIdentityFeature = Boolean(features['dojo.data.api.Identity']);\r\n\t\t\t\t\tt.assertTrue(hasIdentityFeature);\r\n\t\t\t\t\tfor(var i = 0; i < items.length; ++i){\r\n\t\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\t\tvar identifier = store.getIdentityAttributes(item);\r\n\t\t\t\t\t\tt.assertTrue(identifier === null);\r\n\t\t\t\t\t\tvar identity = store.getIdentity(item);\r\n\t\t\t\t\t\tt.assertTrue(typeof identity == \"number\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar reportError = function(errData, request){\r\n\t\t\t\t\td.errback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: onComplete, onError: reportError});\r\n\t\t\t\treturn d; // Deferred\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: functionConformance\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var i in readApi){\r\n\t\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Identity API: functionConformance\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar identityApi = new dojo.data.api.Identity();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var i in identityApi){\r\n\t\r\n\t\t\t\t\tif(i.toString().charAt(0) !== '_')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar member = identityApi[i];\r\n\t\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t//complex parallels of existing simple queries immediately follow them above.  can search on \"complex\"\r\n\t\t//below are complex queries.\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, OR, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"s*\" || capital:\"A*\"',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND(OR, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: 'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")',\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as json object, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")'},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as json object, complex, with extra attrs\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"e*\" AND (capital:\"A*\" or capital: \"Q*\")', name: \"Ec*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as json object, complex, with extra attrs and spaces\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\tt.assertEqual(\"Equatorial Guinea\", store.getValue(items[0], \"name\"));\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: {complexQuery:'abbr: \"g*\" AND (capital:\"A*\" or capital: \"M*\")', name: \"Equatorial G*\"},\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch() multiple, AND/OR, as quoted json object, complex\",\r\n\t \t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of a basic fetch on AndOrWriteStore of a single item.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 3);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(errData, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(errData);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({ \tquery: \"{complexQuery:'abbr: \\\"e*\\\" AND (capital:\\\"A*\\\" or capital: \\\"Q*\\\")'}\",\r\n\t\t\t\t\t\t\t\t\t\tonComplete: onComplete,\r\n\t\t\t\t\t\t\t\t\t\tonError: onError\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset url.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore.url = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onItem2 (item){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem2, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: fetch, close (clearOnClose: true, reset url.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore.url = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onComplete (items){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetch({query: {abbr:\"ec\"}, onComplete:onComplete, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset _jsonFileUrl.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test the close api properly clears the store for reload when clearOnClose is set.\r\n\t\t\t\tif (dojo.isBrowser) {\r\n\t\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.urlPreventCache = true;\r\n\t\r\n\t\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\tfunction onItem(item){\r\n\t\t\t\t\t\tvar error = null;\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\tvar ec = item;\r\n\t\t\t\t\t\t\tvar val = store.getValue(ec, \"name\");\r\n\t\t\t\t\t\t\tt.assertEqual(\"Ecuador\", val);\r\n\t\r\n\t\t\t\t\t\t\tstore.close();\r\n\t\t\t\t\t\t\t//Check some internals here.  Do not normally access these!\r\n\t\t\t\t\t\t\tt.assertTrue(store._arrayOfAllItems.length === 0);\r\n\t\t\t\t\t\t\tt.assertTrue(store._loadFinished === false);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tstore._jsonFileUrl = require.toUrl(\"dojo/tests/data/countries_withNull.json\").toString()\r\n\t\t\t\t\t\t\tfunction onItem2 (item){\r\n\t\t\t\t\t\t\t\tvar err;\r\n\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\t\t\t\t\t\tvar val = store.getValue(item, \"name\");\r\n\t\t\t\t\t\t\t\t\tt.assertEqual(null, val);\r\n\t\t\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\t\t\terr = e;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\td.errback(err);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem2, onError:onError});\r\n\t\t\t\t\t\t}catch (e){\r\n\t\t\t\t\t\t\terror = e;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfunction onError(errData){\r\n\t\t\t\t\t\td.errback(errData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity:\"ec\", onItem:onItem, onError:onError});\r\n\t\t\t\t\treturn d; // Deferred\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Read API: close (clearOnClose: true, reset data.)\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFunction to test that clear on close and reset of data works.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tFunction to test that clear on close and reset of data works.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({data: { identifier: \"uniqueId\",\r\n\t\t\t\t\t\titems: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t{uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t{uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t{uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t{uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t{uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t{uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar firstComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\tvar firstItem = items[0];\r\n\t\r\n\t\t\t\t\t//Set the store clearing options and the new data\r\n\t\t\t\t\tstore.clearOnClose = true;\r\n\t\t\t\t\tstore.data = { identifier: \"uniqueId\",\r\n\t\t\t\t\t\titems: [ {uniqueId: 1, value:\"foo*bar\"},\r\n\t\t\t\t\t\t\t{uniqueId: 2, value:\"bar*foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 3, value:\"boomBam\"},\r\n\t\t\t\t\t\t\t{uniqueId: 4, value:\"bit$Bite\"},\r\n\t\t\t\t\t\t\t{uniqueId: 5, value:\"ouagadogou\"},\r\n\t\t\t\t\t\t\t{uniqueId: 6, value:\"BaBaMaSaRa***Foo\"},\r\n\t\t\t\t\t\t\t{uniqueId: 7, value:\"squawl\"},\r\n\t\t\t\t\t\t\t{uniqueId: 8, value:\"seaweed\"},\r\n\t\t\t\t\t\t\t{uniqueId: 9, value:\"jfq4@#!$!@Rf14r14i5u\"}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.close();\r\n\t\r\n\t\t\t\t\t//Do the next fetch and verify that the next item you get is not\r\n\t\t\t\t\t//a reference to the same item (data cleared and reloaded.\r\n\t\t\t\t\tvar secondComplete = function(items, request){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\t\t\t\tvar secondItem = items[0];\r\n\t\t\t\t\t\t\tt.assertTrue(firstItem != null);\r\n\t\t\t\t\t\t\tt.assertTrue(secondItem != null);\r\n\t\t\t\t\t\t\tt.assertTrue(firstItem != secondItem);\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstore.fetch({query: {value: \"bar\\*foo\"}, onComplete: secondComplete, onError: error});\r\n\t\t\t\t}\r\n\t\t\t\tfunction error(error, request){\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t}\r\n\t\t\t\tstore.fetch({query: {value: \"bar\\*foo\"}, onComplete: firstComplete, onError: error});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t//write tests follow.\r\n\t\t{\r\n\t\t\tname: \"Write API:  getFeatures\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar features = store.getFeatures();\r\n\t\r\n\t\t\t\t// make sure we have the expected features:\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Read\"] !== null);\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Identity\"] !== null);\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Write\"] !== null);\r\n\t\t\t\tt.assertTrue(features[\"dojo.data.api.Notification\"] !== null);\r\n\t\t\t\tt.assertFalse(features[\"iggy\"]);\r\n\t\t\t\t\r\n\t\t\t\t// and only the expected features:\r\n\t\t\t\tvar count = 0;\r\n\t\t\t\tfor(var i in features){\r\n\t\t\t\t\tt.assertTrue((i === \"dojo.data.api.Read\" ||\r\n\t\t\t\t\t\ti === \"dojo.data.api.Identity\" ||\r\n\t\t\t\t\t\ti === \"dojo.data.api.Write\" ||\r\n\t\t\t\t\t\ti === \"dojo.data.api.Notification\"));\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t\tt.assertEqual(count, 4);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API:  setValue\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the setValue API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the setValue API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"capital\", \"Cairo\"));\r\n\t\t\t\t\t\r\n\t\t\t\t\t// FIXME:\r\n\t\t\t\t\t//\t  Okay, so this seems very odd.  Maybe I'm just being dense.\r\n\t\t\t\t\t//\t  These tests works:\r\n\t\t\t\t\tt.assertEqual(store.isDirty(item), false);\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\t//\t  But these seemingly equivalent tests will not work:\r\n\t\t\t\t\t// t.assertFalse(store.isDirty(item));\r\n\t\t\t\t\t// t.assertTrue(!(store.isDirty(item)));\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//\t  All of which seems especially weird, given that this *does* work:\r\n\t\t\t\t\tt.assertFalse(store.isDirty());\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\tstore.setValue(item, \"capital\", \"New Cairo\");\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\t\tt.assertEqual(store.getValue(item, \"capital\").toString(), \"New Cairo\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: setValues\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the setValues API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the setValues API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\tstore.setValues(item, \"name\", [\"Egypt 1\", \"Egypt 2\"]);\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\t\tvar values = store.getValues(item, \"name\");\r\n\t\t\t\t\tt.assertTrue(values[0] == \"Egypt 1\");\r\n\t\t\t\t\tt.assertTrue(values[1] == \"Egypt 2\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: unsetAttribute\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the unsetAttribute API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the unsetAttribute API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\tstore.unsetAttribute(item, \"name\");\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\t\tt.assertTrue(!store.hasAttribute(item, \"name\"));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request) {\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the newItem API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the newItem API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\r\n\t\t\t\tvar onNewInvoked = false;\r\n\t\t\t\tstore.onNew = function(newItem, parentInfo){\r\n\t\r\n\t\t\t\t\tt.assertTrue(newItem !== null);\r\n\t\t\t\t\tt.assertTrue(parentInfo === null);\r\n\t\t\t\t\tt.assertTrue(store.isItem(newItem));\r\n\t\t\t\t\tonNewInvoked = true;\r\n\t\t\t\t};\r\n\t\t\t\tvar canada = store.newItem({name: \"Canada\", abbr:\"ca\", capital:\"Ottawa\"});\r\n\t\t\t\tt.assertTrue(onNewInvoked);\r\n\t\t\t\t\r\n\t\t\t\tt.assertTrue(store.isDirty(canada));\r\n\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\tt.assertTrue(store.getValues(canada, \"name\") == \"Canada\");\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Canada\"));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Canada\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem with a parent assignment\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the newItem API with a parent assignment\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the newItem API with a parent assignment\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tt.assertTrue(!store.isDirty());\r\n\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\r\n\t\t\t\t\t//Attach an onNew to validate we get expected values.\r\n\t\t\t\t\tvar onNewInvoked = false;\r\n\t\t\t\t\tstore.onNew = function(newItem, parentInfo){\r\n\t\t\t\t\t\tt.assertEqual(item, parentInfo.item);\r\n\t\t\t\t\t\tt.assertEqual(\"cities\", parentInfo.attribute);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.oldValue === undefined);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue === newItem);\r\n\t\t\t\t\t\tonNewInvoked = true;\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t//Attach an onSet and verify onSet is NOT called in this case.\r\n\t\t\t\t\tstore.onSet = function(item, attribute, oldValue, newValue){\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t//See if we can add in a new item representing the city of Cairo.\r\n\t\t\t\t\t//This should also call the onNew set above....\r\n\t\t\t\t\tvar newItem = store.newItem({name: \"Cairo\", abbr: \"Cairo\"}, {parent: item, attribute: \"cities\"});\r\n\t\t\t\t\tt.assertTrue(onNewInvoked);\r\n\t\r\n\t\t\t\t\tvar onCompleteNewItemShallow = function(items, request){\r\n\t\t\t\t\t\tt.assertEqual(0, items.length);\r\n\t\t\t\t\t\tvar onCompleteNewItemDeep = function(items, request){\r\n\t\t\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\t\t\tt.assertEqual(\"Cairo\", store.getValue(item, \"name\"));\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\t//Do a deep search now, should find the new item of the city with name attribute Cairo.\r\n\t\t\t\t\t\tstore.fetch({query:{name:\"Cairo\"}, onComplete: onCompleteNewItemDeep, onError: onError, queryOptions: {deep:true}});\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//Do a shallow search first, should find nothing.\r\n\t\t\t\t\tstore.fetch({query:{name:\"Cairo\"}, onComplete: onCompleteNewItemShallow, onError: onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem with a parent assignment multiple times\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the newItem API with a parent assignment multiple times.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the newItem API with a parent assignment multiple times.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\r\n\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\r\n\t\t\t\t\t//Attach an onNew to validate we get expected values.\r\n\t\t\t\t\tstore.onNew = function(newItem, parentInfo){\r\n\t\t\t\t\t\tt.assertEqual(item, parentInfo.item);\r\n\t\t\t\t\t\tt.assertEqual(\"cities\", parentInfo.attribute);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.oldValue === undefined);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue === newItem);\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\t//See if we can add in a new item representing the city of Cairo.\r\n\t\t\t\t\t//This should also call the onNew set above....\r\n\t\t\t\t\tvar newItem1 = store.newItem({name: \"Cairo\", abbr: \"Cairo\"}, {parent: item, attribute: \"cities\"});\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Attach a new onNew to validate we get expected values.\r\n\t\t\t\t\tstore.onNew = function(newItem, parentInfo){\r\n\t\t\t\t\t\tt.assertEqual(item, parentInfo.item);\r\n\t\t\t\t\t\tt.assertEqual(\"cities\", parentInfo.attribute);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconsole.log(parentInfo.oldValue);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.oldValue == newItem1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue[0] == newItem1);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue[1] == newItem);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar newItem2 = store.newItem({name: \"Banha\", abbr: \"Banha\"}, {parent: item, attribute: \"cities\"});\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Attach a new onNew to validate we get expected values.\r\n\t\t\t\t\tstore.onNew = function(newItem, parentInfo){\r\n\t\t\t\t\t\tt.assertEqual(item, parentInfo.item);\r\n\t\t\t\t\t\tt.assertEqual(\"cities\", parentInfo.attribute);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.oldValue[0] == newItem1);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.oldValue[1] == newItem2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue[0] == newItem1);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue[1] == newItem2);\r\n\t\t\t\t\t\tt.assertTrue(parentInfo.newValue[2] == newItem);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar newItem3 = store.newItem({name: \"Damanhur\", abbr: \"Damanhur\"}, {parent: item, attribute: \"cities\"});\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: deleteItem\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the deleteItem API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the deleteItem API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\tstore.deleteItem(item);\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\t\tvar onCompleteToo = function(itemsToo, requestToo) {\r\n\t\t\t\t\t\tt.assertEqual(0, itemsToo.length);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onCompleteToo, onError: onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: isDirty\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the isDirty API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the isDirty API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onComplete = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\t\t\t\tstore.setValue(item, \"name\", \"Egypt 2\");\r\n\t\t\t\t\tt.assertTrue(store.getValue(item, \"name\") == \"Egypt 2\");\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tvar onError = function(error, request) {\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: revert\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the revert API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the revert API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar onComplete = function(items, request) {\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item = items[0];\r\n\t\t\t\t\tt.assertTrue(store.containsValue(item, \"name\", \"Egypt\"));\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item) === false);\r\n\t\t\t\t\tt.assertTrue(!store.isDirty());\r\n\t\t\t\t\tstore.setValue(item, \"name\", \"Egypt 2\");\r\n\t\t\t\t\tt.assertTrue(store.getValue(item, \"name\") == \"Egypt 2\");\r\n\t\t\t\t\tt.assertTrue(store.isDirty(item));\r\n\t\t\t\t\tt.assertTrue(store.isDirty());\r\n\t\t\t\t\tstore.revert();\r\n\t\t\t\t\t\r\n\t\t\t\t\t//Fetch again to see if it reset the state.\r\n\t\t\t\t\tvar onCompleteToo = function(itemsToo, requestToo){\r\n\t\t\t\t\t\tt.assertEqual(1, itemsToo.length);\r\n\t\t\t\t\t\tvar itemToo = itemsToo[0];\r\n\t\t\t\t\t\tt.assertTrue(store.containsValue(itemToo, \"name\", \"Egypt\"));\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onCompleteToo, onError: onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({query:{name:\"Egypt\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: save\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tstore.setValue(item, \"capital\", \"New Cairo\");\r\n\t\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t} ;\r\n\t\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: save, verify state\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tstore.setValue(item, \"capital\", \"New Cairo\");\r\n\t\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\t\t//Check internal state.  Note:  Users should NOT do this, this is a UT verification\r\n\t\t\t\t\t\t//of internals in this case.  Ref tracker: #4394\r\n\t\t\t\t\t\tt.assertTrue(!store._saveInProgress);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: saveEverything\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar egypt;\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tstore._saveEverything = function(saveCompleteCallback, saveFailedCallback, newFileContentString){\r\n\t\t\t\t\tvar struct = dojo.fromJson(newFileContentString);\r\n\t\t\t\t\tt.assertEqual(struct.identifier, store.getIdentityAttributes(egypt)[0]);\r\n\t\t\t\t\tt.assertEqual(struct.label, store.getLabelAttributes(egypt)[0]);\r\n\t\t\t\t\tt.assertEqual(struct.items.length, 7);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar cloneStore = new dojox.data.AndOrWriteStore({data:struct});\r\n\t\t\t\t\tvar onItemClone = function(itemClone){\r\n\t\t\t\t\t\tvar egyptClone = itemClone;\r\n\t\t\t\t\t\tt.assertEqual(store.getIdentityAttributes(egypt)[0], cloneStore.getIdentityAttributes(egyptClone)[0]);\r\n\t\t\t\t\t\tt.assertEqual(store.getLabelAttributes(egypt)[0], cloneStore.getLabelAttributes(egyptClone)[0]);\r\n\t\t\t\t\t\tt.assertEqual(store.getValue(egypt, \"name\"), cloneStore.getValue(egyptClone, \"name\"));\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcloneStore.fetchItemByIdentity({identity:\"eg\", onItem:onItemClone, onError:onError});\r\n\t\t\t\t\t\r\n\t\t\t\t\tsaveCompleteCallback();\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tegypt = item;\r\n\t\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.setValue(egypt, \"capital\", \"New Cairo\");\r\n\t\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: saveEverything with Date type\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (Date) that has a type mapping.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (Date) that has a type mapping.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\r\n\t\t\t\tstore._saveEverything = function(saveCompleteCallback, saveFailedCallback, newFileContentString){\r\n\t\r\n\t\t\t\t\t//Now load the new data into a datastore and validate that it stored the date right.\r\n\t\t\t\t\tvar dataset = dojo.fromJson(newFileContentString);\r\n\t\t\t\t\tvar newStore = new dojox.data.AndOrWriteStore({data: dataset});\r\n\t\r\n\t\t\t\t\tvar gotItem = function(item){\r\n\t\t\t\t\t\tvar independenceDate = newStore.getValue(item,\"independence\");\r\n\t\t\t\t\t\tt.assertTrue(independenceDate instanceof Date);\r\n\t\t\t\t\t\tt.assertTrue(dojo.date.compare(new Date(1993,4,24), independenceDate, \"date\") === 0);\r\n\t\t\t\t\t\tsaveCompleteCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar failed = function(error, request){\r\n\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\tsaveFailedCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewStore.fetchItemByIdentity({identity:\"eg\", onItem:gotItem, onError:failed});\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item){\r\n\t\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.setValue(item, \"independence\", new Date(1993,4,24));\r\n\t\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: saveEverything, with custom color simple type\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (dojo.Color) that has a type mapping.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (dojo.Color) that has a type mapping.\r\n\t\r\n\t\t\t\t//Set up the store basics:  What data it has, and what to do when save is called for saveEverything\r\n\t\t\t\t//And how to map the 'Color' type in and out of the format.\r\n\t\t\t\t//(Test of saving all to a some location...)\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar customTypeMap = {'Color': dojo.Color };\r\n\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap: customTypeMap\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tstore._saveEverything = function(saveCompleteCallback, saveFailedCallback, newFileContentString){\r\n\t\t\t\t\t//Now load the new data into a datastore and validate that it stored the Color right.\r\n\t\t\t\t\tvar dataset = dojo.fromJson(newFileContentString);\r\n\t\t\t\t\tvar newStore = new dojox.data.AndOrWriteStore({data: dataset, typeMap: customTypeMap});\r\n\t\r\n\t\t\t\t\tvar gotItem = function(item){\r\n\t\t\t\t\t\tvar hairColor = newStore.getValue(item,\"hairColor\");\r\n\t\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\t\tt.assertEqual(\"rgba(255, 255, 0, 1)\", hairColor.toString());\r\n\t\t\t\t\t\tsaveCompleteCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar failed = function(error, request){\r\n\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\tsaveFailedCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewStore.fetchItemByIdentity({identity:\"Animal\", onItem:gotItem, onError:failed});\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Add a new item with a color type, then save it.\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar animal = store.newItem({name: \"Animal\", hairColor: new dojo.Color(\"yellow\")});\r\n\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: saveEverything, with custom color type general\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (dojo.Color) that has a type mapping.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the save API\twith a non-atomic type (dojo.Color) that has a type mapping.\r\n\t\r\n\t\t\t\t//Set up the store basics:  What data it has, and what to do when save is called for saveEverything\r\n\t\t\t\t//And how to map the 'Color' type in and out of the format.\r\n\t\t\t\t//(Test of saving all to a some location...)\r\n\t\t\t\tvar dataset = {\r\n\t\t\t\t\tidentifier:'name',\r\n\t\t\t\t\titems: [\r\n\t\t\t\t\t\t{ name:'Kermit', species:'frog', color:{_type:'Color', _value:'green'} },\r\n\t\t\t\t\t\t{ name:'Beaker', hairColor:{_type:'Color', _value:'red'} }\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar customTypeMap = {'Color': \t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: dojo.Color,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeserialize: function(value){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn new dojo.Color(value);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tserialize: function(obj){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn obj.toString();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore({\r\n\t\t\t\t\t\tdata:dataset,\r\n\t\t\t\t\t\ttypeMap: customTypeMap\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tstore._saveEverything = function(saveCompleteCallback, saveFailedCallback, newFileContentString){\r\n\t\t\t\t\t//Now load the new data into a datastore and validate that it stored the Color right.\r\n\t\t\t\t\tvar dataset = dojo.fromJson(newFileContentString);\r\n\t\t\t\t\tvar newStore = new dojox.data.AndOrWriteStore({data: dataset, typeMap: customTypeMap});\r\n\t\r\n\t\t\t\t\tvar gotItem = function(item){\r\n\t\t\t\t\t\tvar hairColor = newStore.getValue(item,\"hairColor\");\r\n\t\t\t\t\t\tt.assertTrue(hairColor instanceof dojo.Color);\r\n\t\t\t\t\t\tt.assertEqual(\"rgba(255, 255, 0, 1)\", hairColor.toString());\r\n\t\t\t\t\t\tsaveCompleteCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar failed = function(error, request){\r\n\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t\tsaveFailedCallback();\r\n\t\t\t\t\t};\r\n\t\t\t\t\tnewStore.fetchItemByIdentity({identity:\"Animal\", onItem:gotItem, onError:failed});\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t//Add a new item with a color type, then save it.\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function() {\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar animal = store.newItem({name: \"Animal\", hairColor: new dojo.Color(\"yellow\")});\r\n\t\t\t\tstore.save({onComplete:onComplete, onError:onError});\r\n\t\t\t\treturn d; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem, revert\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest for bug #5357.  Ensure that the revert properly nulls the identity position\r\n\t\t\t\t//\t\tfor a new item after revert.\r\n\t\t\t\tvar args = {data: {\r\n\t\t\t\t\tlabel:\"name\",\r\n\t\t\t\t\titems:[\r\n\t\t\t\t\t\t{name:'Ecuador', capital:'Quito'},\r\n\t\t\t\t\t\t{name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t\t\t{name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t\t\t{name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t\t\t{name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t\t\t{name:'Estonia', capital:'Tallinn'},\r\n\t\t\t\t\t\t{name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t\t\t]\r\n\t\t\t\t} };\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(args);\r\n\t\r\n\t\t\t\tvar newCountry = store.newItem({name: \"Utopia\", capitol: \"Perfect\"});\r\n\t\r\n\t\t\t\t//DO NOT ACCESS THIS WAY.  THESE ARE INTERNAL VARIABLES.  DOING THIS FOR TEST PURPOSES.\r\n\t\t\t\tvar itemEntryNum = newCountry[store._itemNumPropName];\r\n\t\t\t\tt.assertTrue(store._arrayOfAllItems[itemEntryNum] === newCountry);\r\n\t\t\t\tstore.revert();\r\n\t\t\t\tt.assertTrue(store._arrayOfAllItems[itemEntryNum] === null);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem, modify revert\",\r\n\t\t\trunTest: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest of a new item, modify it, then revert, to ensure the state remains consistent.  Added due to #9022.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTest of a new item, modify it, then revert, to ensure the state remains consistent.  Added due to #9022.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\r\n\t\t\t\tvar deferred = new doh.Deferred();\r\n\t\t\t\tdoh.assertTrue(!store.isDirty());\r\n\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\tdeferred.errback(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar initialFetch = function(items, request){\r\n\t\t\t\t\tvar initialCount = items.length;\r\n\t\t\t\t\tvar canada = store.newItem({name: \"Canada\", abbr:\"ca\", capital:\"Ottawa\"});\r\n\t\t\t\t\tstore.setValue(canada, \"someattribute\", \"modified a new item!\");\r\n\t\t\t\t\tvar afterNewFetch = function(items, request){\r\n\t\t\t\t\t\tvar afterNewCount = items.length;\r\n\t\t\t\t\t\tdoh.assertEqual(afterNewCount, (initialCount + 1));\r\n\t\t\t\t\t\tstore.revert();\r\n\t\t\t\t\t\tvar afterRevertFetch = function(items, request){\r\n\t\t\t\t\t\t\tvar afterRevertCount = items.length;\r\n\t\t\t\t\t\t\tdoh.assertEqual(afterRevertCount, initialCount);\r\n\t\t\t\t\t\t\tdeferred.callback(true);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tstore.fetch({onComplete: afterRevertFetch, onError: onError});\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t  store.fetch({onComplete: afterNewFetch, onError: onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: initialFetch, onError: onError});\r\n\t\t\t\treturn deferred; //Object\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: newItem, modify, delete, revert\",\r\n\t\t\trunTest: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest of a new item, modify it, delete it, then revert, to ensure the state remains consistent.  Added due to #9022.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tTest of a new item, modify it, delete it, then revert, to ensure the state remains consistent.  Added due to #9022.\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar i;\r\n\t\t\t\tvar found = false;\r\n\t\r\n\t\t\t\tvar deferred = new doh.Deferred();\r\n\t\t\t\tdoh.assertTrue(!store.isDirty());\r\n\t\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\tdeferred.errback(error);\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar initialFetch = function(items, request){\r\n\t\t\t\t\tvar initialCount = items.length;\r\n\t\t\t\t\tvar canada = store.newItem({name: \"Canada\", abbr:\"ca\", capital:\"Ottawa\"});\r\n\t\t\t\t\tstore.setValue(canada, \"someattribute\", \"modified a new item!\");\r\n\t\t\t\t\t\r\n\t\t\t\t\t// check that after new and modify, the total items count goes up by one.\r\n\t\t\t\t\tvar afterNewFetch = function(items, request){\r\n\t\t\t\t\t\tvar afterNewCount = items.length;\r\n\t\t\t\t\t\tdoh.assertEqual(afterNewCount, (initialCount + 1));\r\n\t\t\t\t\t\tstore.deleteItem(canada);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//Check that after delete, the total items count goes back to initial count.\r\n\t\t\t\t\t\t//Also verify the item with abbr of ca is gone.\r\n\t\t\t\t\t\tvar afterDeleteFetch = function(items, request){\r\n\t\t\t\t\t\t\tvar afterDeleteCount = items.length;\r\n\t\t\t\t\t\t\tdoh.assertEqual(initialCount, afterDeleteCount);\r\n\t\r\n\t\t\t\t\t\t\tfor(i=0; i < items.length; i++){\r\n\t\t\t\t\t\t\t\tfound = (store.getIdentity(items[i]) === \"ca\");\r\n\t\t\t\t\t\t\t\tif(found){\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(found){\r\n\t\t\t\t\t\t\t\tdeferred.errback(new Error(\"Error: Found the supposedly deleted item!\"));\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tstore.revert();\r\n\t\t\t\t\t\t\t\t//Check that after revert, we still have the same item count as the\r\n\t\t\t\t\t\t\t\t//original fetch.  Also verify the item with abbr of ca is gone.\r\n\t\t\t\t\t\t\t\tvar afterRevertFetch = function(items, request){\r\n\t\t\t\t\t\t\t\t\tvar afterRevertCount = items.length;\r\n\t\t\t\t\t\t\t\t\tdoh.assertEqual(afterRevertCount, initialCount);\r\n\t\t\t\t\t\t\t\t\tfor(i=0; i < items.length; i++){\r\n\t\t\t\t\t\t\t\t\t\tfound = (store.getIdentity(items[i]) === \"ca\");\r\n\t\t\t\t\t\t\t\t\t\tif(found){\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(found){\r\n\t\t\t\t\t\t\t\t\t\tdeferred.errback(new Error(\"Error: Found the 'new' item after revert!\"));\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\tdeferred.callback(true);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tstore.fetch({onComplete: afterRevertFetch, onError: onError});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tstore.fetch({onComplete: afterDeleteFetch, onError: onError});\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({onComplete: afterNewFetch, onError: onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete: initialFetch, onError: onError});\r\n\t\t\t\treturn deferred; //Object\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t{\r\n\t\t\tname: \"Write API: onSet notification\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the onSet API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the onSet API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(fetchedItem){\r\n\t\t\t\t\tvar egypt = fetchedItem;\r\n\t\t\t\t\tvar connectHandle = null;\r\n\t\t\t\t\tvar setValueHandler = function(item, attribute, oldValue, newValue){\r\n\t\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\t\tt.assertTrue(item == egypt);\r\n\t\t\t\t\t\tt.assertTrue(attribute == \"capital\");\r\n\t\t\t\t\t\tt.assertTrue(oldValue == \"Cairo\");\r\n\t\t\t\t\t\tt.assertTrue(newValue == \"New Cairo\");\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\tdojo.disconnect(connectHandle);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconnectHandle = dojo.connect(store, \"onSet\", setValueHandler);\r\n\t\t\t\t\tstore.setValue(egypt, \"capital\", \"New Cairo\");\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: onNew notification\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the onNew API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the onNew API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar connectHandle = null;\r\n\t\t\t\tvar newItemHandler = function(item){\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tt.assertTrue(store.getValue(item, \"name\") == \"Canada\");\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t\tdojo.disconnect(connectHandle);\r\n\t\t\t\t};\r\n\t\t\t\tconnectHandle = dojo.connect(store, \"onNew\", newItemHandler);\r\n\t\t\t\tvar canada = store.newItem({name:\"Canada\", abbr:\"ca\", capital:\"Ottawa\"});\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: onDelete notification\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test of the onDelete API\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test of the onDelete API\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(fetchedItem){\r\n\t\t\t\t\tvar egypt = fetchedItem;\r\n\t\t\t\t\tvar connectHandle = null;\r\n\t\t\t\t\tvar deleteItemHandler = function(item){\r\n\t\t\t\t\t\tt.assertTrue(store.isItem(item) === false);\r\n\t\t\t\t\t\tt.assertTrue(item == egypt);\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\tdojo.disconnect(connectHandle);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconnectHandle = dojo.connect(store, \"onDelete\", deleteItemHandler);\r\n\t\t\t\t\tstore.deleteItem(egypt);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity:\"eg\", onItem:onItem, onError:onError});\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: Read API conformance\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var functionName in readApi){\r\n\t\t\t\t\tvar member = readApi[functionName];\r\n\t\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tvar testStoreMember = testStore[functionName];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: Write API conformance\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test write API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test write API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar writeApi = new dojo.data.api.Write();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var functionName in writeApi){\r\n\t\t\t\t\tvar member = writeApi[functionName];\r\n\t\t\t\t\t//Check that all the 'Write' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tvar testStoreMember = testStore[functionName];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: Notification API conformance\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test Notification API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test Notification API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t\tvar testStore = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries\"));\r\n\t\t\t\tvar api = new dojo.data.api.Notification();\r\n\t\t\t\tvar passed = true;\r\n\t\r\n\t\t\t\tfor(var functionName in api){\r\n\t\t\t\t\tvar member = api[functionName];\r\n\t\t\t\t\t//Check that all the 'Write' defined functions exist on the test store.\r\n\t\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\t\tvar testStoreMember = testStore[functionName];\r\n\t\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tt.assertTrue(passed);\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: Identity, auto-creation when missing\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest for bug #3873. Given a datafile that does not specify an\r\n\t\t\t\t//\t\tidentifier, make sure AndOrWriteStore auto-creates identities\r\n\t\t\t\t//\t\tthat are unique even after calls to deleteItem() and newItem()\r\n\t\t\t\tvar args = {data: {\r\n\t\t\t\t\tlabel:\"name\",\r\n\t\t\t\t\titems:[\r\n\t\t\t\t\t\t{name:'Ecuador', capital:'Quito'},\r\n\t\t\t\t\t\t{name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t\t\t{name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t\t\t{name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t\t\t{name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t\t\t{name:'Estonia', capital:'Tallinn'},\r\n\t\t\t\t\t\t{name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t\t\t]\r\n\t\t\t\t} };\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(args);\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar lastItem = items[(items.length - 1)];\r\n\t\t\t\t\tvar idOfLastItem = store.getIdentity(lastItem);\r\n\t\t\t\t\tstore.deleteItem(lastItem);\r\n\t\t\t\t\tstore.newItem({name:'Canada', capital:'Ottawa'});\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar onCompleteAgain = function(itemsAgain, requestAgain){\r\n\t\t\t\t\t\tt.assertEqual(7, itemsAgain.length);\r\n\t\t\t\t\t\tvar identitiesInUse = {};\r\n\t\t\t\t\t\tfor(var i = 0; i < itemsAgain.length; ++i){\r\n\t\t\t\t\t\t\tvar item = itemsAgain[i];\r\n\t\t\t\t\t\t\tvar id = store.getIdentity(item);\r\n\t\t\t\t\t\t\tif(identitiesInUse.hasOwnProperty(id)){\r\n\t\t\t\t\t\t\t\t// there should not already be an entry for this id\r\n\t\t\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t// we want to add the entry now\r\n\t\t\t\t\t\t\t\tidentitiesInUse[id] = item;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({onComplete:onCompleteAgain, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tstore.fetch({onComplete:onComplete, onError:onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: Identity, auto-creation when missing, revert\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tTest for bug #4691  Given a datafile that does not specify an\r\n\t\t\t\t//\t\tidentifier, make sure AndOrWriteStore auto-creates identities\r\n\t\t\t\t//\t\tthat are unique even after calls to deleteItem() and newItem()\r\n\t\t\t\tvar args = {data: {\r\n\t\t\t\t\tlabel:\"name\",\r\n\t\t\t\t\titems:[\r\n\t\t\t\t\t\t{name:'Ecuador', capital:'Quito'},\r\n\t\t\t\t\t\t{name:'Egypt', capital:'Cairo'},\r\n\t\t\t\t\t\t{name:'El Salvador', capital:'San Salvador'},\r\n\t\t\t\t\t\t{name:'Equatorial Guinea', capital:'Malabo'},\r\n\t\t\t\t\t\t{name:'Eritrea', capital:'Asmara'},\r\n\t\t\t\t\t\t{name:'Estonia', capital:'Tallinn'},\r\n\t\t\t\t\t\t{name:'Ethiopia', capital:'Addis Ababa'}\r\n\t\t\t\t\t]\r\n\t\t\t\t} };\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(args);\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\t\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\tt.assertEqual(7, items.length);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar lastItem = items[(items.length - 1)];\r\n\t\t\t\t\tvar idOfLastItem = store.getIdentity(lastItem);\r\n\t\t\t\t\tstore.deleteItem(lastItem);\r\n\t\t\t\t\tstore.newItem({name:'Canada', capital:'Ottawa'});\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar onCompleteAgain = function(itemsAgain, requestAgain){\r\n\t\t\t\t\t\tt.assertEqual(7, itemsAgain.length);\r\n\t\t\t\t\t\tvar identitiesInUse = {};\r\n\t\t\t\t\t\tfor(var i = 0; i < itemsAgain.length; ++i){\r\n\t\t\t\t\t\t\tvar item = itemsAgain[i];\r\n\t\t\t\t\t\t\tvar id = store.getIdentity(item);\r\n\t\t\t\t\t\t\tif(identitiesInUse.hasOwnProperty(id)){\r\n\t\t\t\t\t\t\t\t// there should not already be an entry for this id\r\n\t\t\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t// we want to add the entry now\r\n\t\t\t\t\t\t\t\tidentitiesInUse[id] = item;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//Last test, revert everything and check item sizes.\r\n\t\t\t\t\t\tstore.revert();\r\n\t\r\n\t\t\t\t\t\t//Now call fetch again and verify store state.\r\n\t\t\t\t\t\tvar revertComplete = function(itemsReverted, request){\r\n\t\t\t\t\t\t\tt.assertEqual(7, itemsReverted.length);\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tstore.fetch({onComplete:revertComplete, onError:onError});\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetch({onComplete:onCompleteAgain, onError:onError});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onComplete:onComplete, onError:onError});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, check references\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly resolved.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly resolved.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\r\n\t\t\t\t\tvar item10 = null;\r\n\t\t\t\t\tvar item1  = null;\r\n\t\t\t\t\tvar item3  = null;\r\n\t\t\t\t\tvar item5  = null;\r\n\t\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i = 0; i < items.length; i++) {\r\n\t\t\t\t\t\tvar ident = store.getIdentity(items[i]);\r\n\t\t\t\t\t\tif (ident === 10) {\r\n\t\t\t\t\t\t\titem10 = items[i];\r\n\t\t\t\t\t\t}else if (ident === 1) {\r\n\t\t\t\t\t\t\titem1 = items[i];\r\n\t\t\t\t\t\t}else if (ident === 3) {\r\n\t\t\t\t\t\t\titem3 = items[i];\r\n\t\t\t\t\t\t}else if (ident === 5) {\r\n\t\t\t\t\t\t\titem5 = items[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar friends = store.getValues(item10, \"friends\");\r\n\t\t\t\t\tt.assertTrue(friends !== null);\r\n\t\t\t\t\tt.assertTrue(friends !== undefined);\r\n\t\r\n\t\t\t\t\tt.assertTrue(store.isItem(item10));\r\n\t\t\t\t\tt.assertTrue(store.isItem(item1));\r\n\t\t\t\t\tt.assertTrue(store.isItem(item3));\r\n\t\t\t\t\tt.assertTrue(store.isItem(item5));\r\n\t\t\t\t\tvar found = 0;\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tfor (i = 0; i < friends.length; i++) {\r\n\t\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\t\tt.assertTrue(store.isItem(friends[i]));\r\n\t\t\t\t\t\t\t\tt.assertEqual(friends[i], item1);\r\n\t\t\t\t\t\t\t\tt.assertEqual(store.getIdentity(friends[i]), 1);\r\n\t\t\t\t\t\t\t\tfound++;\r\n\t\t\t\t\t\t\t}else if (i === 1) {\r\n\t\t\t\t\t\t\t\tt.assertTrue(store.isItem(friends[i]));\r\n\t\t\t\t\t\t\t\tt.assertEqual(friends[i], item3);\r\n\t\t\t\t\t\t\t\tt.assertEqual(store.getIdentity(friends[i]), 3);\r\n\t\t\t\t\t\t\t\tfound++;\r\n\t\t\t\t\t\t\t}else if (i === 2) {\r\n\t\t\t\t\t\t\t\tt.assertTrue(store.isItem(friends[i]));\r\n\t\t\t\t\t\t\t\tt.assertEqual(friends[i], item5);\r\n\t\t\t\t\t\t\t\tt.assertEqual(store.getIdentity(friends[i]), 5);\r\n\t\t\t\t\t\t\t\tfound++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tdoh.errback(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tt.assertEqual(3, found);\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onError: onError, onComplete: onComplete});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, delete referenced item\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly deleted.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly deleted.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tconsole.log(\"Before delete map state is: \" + dojo.toJson(item[store._reverseRefMap]));\r\n\t\t\t\t\t\tstore.deleteItem(item);\r\n\t\t\t\t\t\tconsole.log(\"After delete map state is: \" + dojo.toJson(item[store._reverseRefMap]));\r\n\t\t\t\t\t\tfunction verifyRefDelete(items, request){\r\n\t\t\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\t\t\tvar curItem = items[i];\r\n\t\t\t\t\t\t\t\tvar attributes = store.getAttributes(curItem);\r\n\t\t\t\t\t\t\t\tfor(var j = 0; j < attributes.length; j++){\r\n\t\t\t\t\t\t\t\t\tvar values = store.getValues(curItem, attributes[j]);\r\n\t\t\t\t\t\t\t\t\tvar badRef = false;\r\n\t\t\t\t\t\t\t\t\tfor(var k = 0; k < values.length; k++){\r\n\t\t\t\t\t\t\t\t\t\tvar value = values[k];\r\n\t\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\t\tvar id = store.getIdentity(value);\r\n\t\t\t\t\t\t\t\t\t\t\tif(id == 10){\r\n\t\t\t\t\t\t\t\t\t\t\t\tbadRef = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}catch(e){/*Not an item, even a dead one, just eat it.*/}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(badRef){\r\n\t\t\t\t\t\t\t\t\t\td.errback(new Error(\"Found a reference remaining to a deleted item.  Failure.\"));\r\n\t\t\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(passed){\r\n\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstore.fetch({onComplete: verifyRefDelete, onError: onError});\r\n\t\t\t\t\t}catch(error){\r\n\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, delete referenced item, then revert\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly deleted.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the references were properly deleted.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\t\tconsole.log(\"Map before delete:\");\r\n\t\t\t\t\t\tstore._dumpReferenceMap();\r\n\t\t\t\t\t\tvar beforeDelete = dojo.toJson(item[store._reverseRefMap]);\r\n\t\t\t\t\t\tstore.deleteItem(item);\r\n\t\t\t\t\t\tconsole.log(\"Map after delete:\");\r\n\t\t\t\t\t\tstore._dumpReferenceMap();\r\n\t\t\t\t\t\tvar afterDelete = dojo.toJson(item[store._reverseRefMap]);\r\n\t\t\t\t\t\tstore.revert();\r\n\t\t\t\t\t\tconsole.log(\"Map after revert:\");\r\n\t\t\t\t\t\tstore._dumpReferenceMap();\r\n\t\t\t\t\t\tvar afterRevert = dojo.toJson(item[store._reverseRefMap]);\r\n\t\t\t\t\t\tt.assertTrue(afterRevert === beforeDelete);\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, delete multiple items with references and revert\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify that a flow of deleting items with references and reverting does not damage the internal structure.\r\n\t\t\t\t//\t\tCreated for tracker bug: #5743\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify that a flow of deleting items with references and reverting does not damage the internal structure.\r\n\t\t\t\t//\t\tCreated for tracker bug: #5743\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"countries_references\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\t//Save off the located item, then locate another one (peer to Egypt)\r\n\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\tvar egypt = item;\r\n\t\t\t\t\tvar onItem2 = function(item, request){\r\n\t\t\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\t\t\tvar nairobi = item;\r\n\t\r\n\t\t\t\t\t\t//Delete them\r\n\t\t\t\t\t\tstore.deleteItem(egypt);\r\n\t\t\t\t\t\tstore.deleteItem(nairobi);\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t//Revert, then do a fetch.  If the internals have been damaged, this will generally\r\n\t\t\t\t\t\t\t//cause onError to fire instead of onComplete.\r\n\t\t\t\t\t\t\tstore.revert();\r\n\t\t\t\t\t\t\tvar onComplete = function(items, request){\r\n\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tstore.fetch({query: {name: \"*\"}, start: 0, count: 20, onComplete: onComplete, onError: onError});\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tstore.fetchItemByIdentity({identity: \"Nairobi\", onError: onError, onItem: onItem2});\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: \"Egypt\", onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, remove reference from attribute\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the reference removal updates the internal map.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the reference removal updates the internal map.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tstore.setValues(item, \"friends\", [null]);\r\n\t\r\n\t\t\t\t\t\tvar onItem2 = function(item10, request){\r\n\t\t\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\t\t\tvar refMap = item10[store._reverseRefMap];\r\n\t\t\t\t\t\t\tstore._dumpReferenceMap();\r\n\t\r\n\t\t\t\t\t\t\tconsole.log(\"MAP for Item 10 is: \" + dojo.toJson(refMap));\r\n\t\r\n\t\t\t\t\t\t\t//Assert there is no reference to item 10 in item 11's attribute 'friends'.\r\n\t\t\t\t\t\t\tt.assertTrue(!refMap[\"11\"][\"friends\"]);\r\n\t\t\t\t\t\t\tstore.setValues(item, \"siblings\", [0, 1, 2]);\r\n\t\t\t\t\t\t\t//Assert there are no more references to 10 in 11.  Ergo, \"11\"  should be a 'undefined' attribute for the map of items referencing '10'..\r\n\t\t\t\t\t\t\tt.assertTrue(!refMap[\"11\"]);\r\n\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem2});\r\n\t\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tconsole.debug(e);\r\n\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 11, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, delete referenced item non-parent\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the references to a non-parent item was properly deleted.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the references to a non-parent item was properly deleted.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tconsole.log(\"Reference state for item 16 is: \" + dojo.toJson(item[store._reverseRefMap]));\r\n\t\t\t\t\t\tstore.deleteItem(item);\r\n\t\t\t\t\t\tfunction verifyRefDelete(items, request){\r\n\t\t\t\t\t\t\tvar passed = true;\r\n\t\t\t\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\t\t\t\tvar curItem = items[i];\r\n\t\t\t\t\t\t\t\tvar attributes = store.getAttributes(curItem);\r\n\t\t\t\t\t\t\t\tfor(var j = 0; j < attributes.length; j++){\r\n\t\t\t\t\t\t\t\t\tvar values = store.getValues(curItem, attributes[j]);\r\n\t\t\t\t\t\t\t\t\tvar badRef = false;\r\n\t\t\t\t\t\t\t\t\tfor(var k = 0; k < values.length; k++){\r\n\t\t\t\t\t\t\t\t\t\tvar value = values[k];\r\n\t\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\t\tvar id = store.getIdentity(value);\r\n\t\t\t\t\t\t\t\t\t\t\tif(id == 16){\r\n\t\t\t\t\t\t\t\t\t\t\t\tbadRef = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}catch(e){/*Not an item, even a dead one, just eat it.*/}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(badRef){\r\n\t\t\t\t\t\t\t\t\t\td.errback(new Error(\"Found a reference remaining to a deleted item.  Failure.\"));\r\n\t\t\t\t\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(passed){\r\n\t\t\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstore.fetch({onComplete: verifyRefDelete, onError: onError});\r\n\t\t\t\t\t}catch(error){\r\n\t\t\t\t\t\td.errback(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 16, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, add reference to attribute\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify the reference additions can happen.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify the reference additions can happen.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onComplete = function(items, request){\r\n\t\r\n\t\t\t\t\tt.assertTrue(items.length > 2);\r\n\t\r\n\t\t\t\t\tvar item1 = items[0];\r\n\t\t\t\t\tvar item2 = items[1];\r\n\t\r\n\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\tconsole.log(\"Map state for Item 1 is: \" + dojo.toJson(item1[store._reverseRefMap]));\r\n\t\t\t\t\tconsole.log(\"Map state for Item 2 is: \" + dojo.toJson(item2[store._reverseRefMap]));\r\n\t\r\n\t\t\t\t\tstore.setValue(item1, \"siblings\", item2);\r\n\t\r\n\t\t\t\t\t//Emit the current map state for inspection.\r\n\t\t\t\t\tconsole.log(\"Map state for Item 1 is: \" + dojo.toJson(item1[store._reverseRefMap]));\r\n\t\t\t\t\tconsole.log(\"Map state for Item 2 is: \" + dojo.toJson(item2[store._reverseRefMap]));\r\n\t\r\n\t\t\t\t\tt.assertTrue(item2[store._reverseRefMap] !== null);\r\n\t\r\n\t\t\t\t\t//Assert there is a recorded reference to item 2 in item 1's attribute 'sibling'.\r\n\t\t\t\t\tt.assertTrue(item2[store._reverseRefMap][store.getIdentity(item1)][\"siblings\"]);\r\n\t\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetch({onError: onError, onComplete: onComplete});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, new item with parent reference\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify that newItems with a parent properly record the parent's reference in the map.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify that newItems with a parent properly record the parent's reference in the map.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\t//Create a new item and set its parent to item 10's uncle attribute.\r\n\t\t\t\t\t\tvar newItem = store.newItem({id: 17, name: \"Item 17\"}, {parent: item, attribute: \"uncles\"});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\t\t//Look up the references to 17, as item 10 has one now on attribute 'uncles'\r\n\t\t\t\t\t\tvar refs = newItem[store._reverseRefMap];\r\n\t\r\n\t\t\t\t\t\t//Assert there is a reference from 10 to item 17, on attribute uncle\r\n\t\t\t\t\t\tt.assertTrue(refs[\"10\"][\"uncles\"]);\r\n\t\r\n\t\t\t\t\t\tconsole.log(\"State of map of item 17 after newItem: \" + dojo.toJson(refs));\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tconsole.debug(e);\r\n\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, new item with reference to existing item\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify that a new item with references to existing items properly record the references in the map.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify that a new item with references to existing items properly record the references in the map.\r\n\t\t\t\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\"));\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar passed = true;\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\t\tconsole.log(\"State of reference map to item 10 before newItem: \" + dojo.toJson(item[store._reverseRefMap]));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//Create a new item and set its parent to item 10's uncle attribute.\r\n\t\t\t\t\t\tvar newItem = store.newItem({id: 17, name: \"Item 17\", friends: [item]});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\t\t//Look up the references to 10, as item 17 has one on friends now.\r\n\t\t\t\t\t\tvar refs = item[store._reverseRefMap];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//Assert there is a reference from 15 to item 10, on attribute friends\r\n\t\t\t\t\t\tt.assertTrue(refs[\"17\"][\"friends\"]);\r\n\t\r\n\t\t\t\t\t\tconsole.log(\"State of reference map to item 10 after newItem: \" + dojo.toJson(refs));\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tconsole.debug(e);\r\n\t\t\t\t\t\td.errback(e);\r\n\t\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(passed){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Write API: reference integrity, disable reference integrity\",\r\n\t\t\trunTest: function(t){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSimple test to verify reference integrity can be disabled.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tSimple test to verify reference integrity can be disabled.\r\n\t\t\t\r\n\t\t\t\tvar params = dojox.data.tests.stores.AndOrWriteStore.getTestData(\"reference_integrity\");\r\n\t\t\t\tparams.referenceIntegrity = false;\r\n\t\t\t\tvar store = new dojox.data.AndOrWriteStore(params);\r\n\t\r\n\t\t\t\tvar d = new doh.Deferred();\r\n\t\t\t\tvar onError = function(error, request){\r\n\t\t\t\t\td.errback(error);\r\n\t\t\t\t\tt.assertTrue(false);\r\n\t\t\t\t};\r\n\t\t\t\tvar onItem = function(item, request){\r\n\t\t\t\t\t//DO NOT EVER ACCESS THESE VARIABLES LIKE THIS!\r\n\t\t\t\t\t//THIS IS FOR TESTING INTERNAL STATE!\r\n\t\t\t\t\tif(item[store._reverseRefMap] === undefined){\r\n\t\t\t\t\t\td.callback(true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\td.errback(new Error(\"Disabling of reference integrity failed.\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tstore.fetchItemByIdentity({identity: 10, onError: onError, onItem: onItem});\r\n\t\t\t\treturn d;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t];\r\n\treturn dojox.data.tests.stores.AndOrWriteStore.tests;\r\n};\r\ndoh.register(\"dojox.data.tests.stores.AndOrWriteStore\", dojox.data.tests.stores.AndOrWriteStore.getTests());\r\n\r\n\r\n"]}