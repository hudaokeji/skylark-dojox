{"version":3,"sources":["data/tests/stores/HtmlTableStore.js"],"names":["dojo","provide","require","dojox","data","tests","stores","HtmlTableStore","getBooks2Store","url","toUrl","toString","tableId","getBooksStore","doh","register","t","store","d","Deferred","fetch","query","isbn","onComplete","items","request","assertEqual","length","callback","onError","error","errback","dumpFirstFetch","start","count","dumpSecondFetch","dumpThirdFetch","dumpFourthFetch","dumpFifthFetch","dumpSixthFetch","errData","queryOptions","ignoreCase","label","getLabel","assertTrue","labelList","getLabelAttributes","item","hasAttribute","getValue","values","getValues","isItem","store1","store2","item1","item2","containsValue","order","sort","attribute","descending","i","comparatorMap","a","b","ret","parseInt","itemId","isItemLoaded","features","getFeatures","attributes","getAttributes","testStore","readApi","api","Read","passed","console","log","getIdentity","getIdentityAttributes","fetchItemByIdentity","identity","onItem","identityApi","Identity"],"mappings":"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","file":"../../../../data/tests/stores/HtmlTableStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.stores.HtmlTableStore\");\r\ndojo.require(\"dojox.data.HtmlTableStore\");\r\ndojo.require(\"dojo.data.api.Read\");\r\ndojo.require(\"dojo.data.api.Identity\");\r\n\r\n\r\ndojox.data.tests.stores.HtmlTableStore.getBooks2Store = function(){\r\n\treturn new dojox.data.HtmlTableStore({url: require.toUrl(\"dojox/data/tests/stores/books2.html\").toString(), tableId: \"books2\"});\r\n};\r\n\r\ndojox.data.tests.stores.HtmlTableStore.getBooksStore = function(){\r\n\treturn new dojox.data.HtmlTableStore({url: require.toUrl(\"dojox/data/tests/stores/books.html\").toString(), tableId: \"books\"});\r\n};\r\n\r\ndoh.register(\"dojox.data.tests.stores.HtmlTableStore\",\r\n\t[\r\n/***************************************\r\n     dojo.data.api.Read API\r\n***************************************/\r\n\t\tfunction testReadAPI_fetch_all(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching all xml items through an XML element called isbn\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching all xml items through an XML element called isbn\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(20, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"*\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_one(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_paging(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction dumpFirstFetch(items, request){\r\n\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t\trequest.start = 3;\r\n\t\t\t\trequest.count = 1;\r\n\t\t\t\trequest.onComplete = dumpSecondFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpSecondFetch(items, request){\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\trequest.start = 0;\r\n\t\t\t\trequest.count = 5;\r\n\t\t\t\trequest.onComplete = dumpThirdFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpThirdFetch(items, request){\r\n\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t\trequest.start = 2;\r\n\t\t\t\trequest.count = 20;\r\n\t\t\t\trequest.onComplete = dumpFourthFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpFourthFetch(items, request){\r\n\t\t\t\tt.assertEqual(18, items.length);\r\n\t\t\t\trequest.start = 9;\r\n\t\t\t\trequest.count = 100;\r\n\t\t\t\trequest.onComplete = dumpFifthFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpFifthFetch(items, request){\r\n\t\t\t\tt.assertEqual(11, items.length);\r\n\t\t\t\trequest.start = 2;\r\n\t\t\t\trequest.count = 20;\r\n\t\t\t\trequest.onComplete = dumpSixthFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction dumpSixthFetch(items, request){\r\n\t\t\t\tt.assertEqual(18, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\r\n\t\t\tfunction completed(items, request){\r\n\t\t\t\tt.assertEqual(20, items.length);\r\n\t\t\t\trequest.start = 1;\r\n\t\t\t\trequest.count = 5;\r\n\t\t\t\trequest.onComplete = dumpFirstFetch;\r\n\t\t\t\tstore.fetch(request);\r\n\t\t\t}\r\n\r\n\t\t\tfunction error(errData, request){\r\n\t\t\t\td.errback(errData);\r\n\t\t\t}\r\n\r\n\t\t\tstore.fetch({onComplete: completed, onError: error});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_pattern0(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"?9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_pattern1(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(4, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B57?\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_pattern2(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with * pattern match\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with * pattern match\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(5, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9*\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_pattern_caseInsensitive(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match and in case insensitive mode.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match and in case insensitive mode.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"?9b574\"}, queryOptions: {ignoreCase: true}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_fetch_pattern_caseSensitive(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match and in case sensitive mode.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of fetching one xml items through an XML element called isbn with ? pattern match and in case sensitive mode.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"?9B574\"}, queryOptions: {ignoreCase: false}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getLabel(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabel function against a store set that has a label defined.\r\n\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar label = store.getLabel(items[0]);\r\n\t\t\t\tt.assertTrue(label !== null);\r\n\t\t\t\tt.assertEqual(\"Table Row #3\", label);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d;\r\n\t\t},\r\n\t\tfunction testReadAPI_getLabelAttributes(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getLabelAttributes function against a store set that has a label defined.\r\n\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request){\r\n\t\t\t\tt.assertEqual(items.length, 1);\r\n\t\t\t\tvar labelList = store.getLabelAttributes(items[0]);\r\n\t\t\t\tt.assertTrue(labelList === null);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d;\r\n\t\t},\r\n\r\n\t\tfunction testReadAPI_getValue(t){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tSimple test of the getValue API\r\n\t\t\t // description:\r\n\t\t\t //\t\tSimple test of the getValue API\r\n\t\t\t var store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\t var d = new doh.Deferred();\r\n\t\t\t function onComplete(items, request) {\r\n\t\t\t\t t.assertEqual(1, items.length);\r\n\t\t\t\t var item = items[0];\r\n\t\t\t\t t.assertTrue(store.hasAttribute(item,\"isbn\"));\r\n\t\t\t\t t.assertEqual(store.getValue(item,\"isbn\"), \"A9B574\");\r\n\t\t\t\t d.callback(true);\r\n\t\t\t }\r\n\t\t\t function onError(error, request) {\r\n\t\t\t\t d.errback(error);\r\n\t\t\t }\r\n\t\t\t store.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t return d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getValues(t){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tSimple test of the getValues API\r\n\t\t\t // description:\r\n\t\t\t //\t\tSimple test of the getValues API\r\n\t\t\t var store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\t var d = new doh.Deferred();\r\n\t\t\t function onComplete(items, request) {\r\n\t\t\t\t t.assertEqual(1, items.length);\r\n\t\t\t\t var item = items[0];\r\n\t\t\t\t t.assertTrue(store.hasAttribute(item,\"isbn\"));\r\n\t\t\t\t var values = store.getValues(item,\"isbn\");\r\n\t\t\t\t t.assertEqual(1,values.length);\r\n\t\t\t\t t.assertEqual(\"A9B574\", values[0]);\r\n\t\t\t\t d.callback(true);\r\n\t\t\t }\r\n\t\t\t function onError(error, request) {\r\n\t\t\t\t d.errback(error);\r\n\t\t\t }\r\n\t\t\t store.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t return d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_isItem(t){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tSimple test of the isItem API\r\n\t\t\t // description:\r\n\t\t\t //\t\tSimple test of the isItem API\r\n\t\t\t var store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\t var d = new doh.Deferred();\r\n\t\t\t function onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\tt.assertTrue(!store.isItem({}));\r\n\t\t\t\tt.assertTrue(!store.isItem(\"Foo\"));\r\n\t\t\t\tt.assertTrue(!store.isItem(1));\r\n\t\t\t\td.callback(true);\r\n\t\t\t }\r\n\t\t\t function onError(error, request) {\r\n\t\t\t\t d.errback(error);\r\n\t\t\t }\r\n\t\t\t store.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\t return d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_isItem_multistore(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the isItem API across multiple store instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the isItem API across multiple store instances.\r\n\t\t\tvar store1 = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\t\t\tvar store2 = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete1(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item1 = items[0];\r\n\t\t\t\tt.assertTrue(store1.isItem(item1));\r\n\r\n\t\t\t\tfunction onComplete2(items, request) {\r\n\t\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\t\tvar item2 = items[0];\r\n\t\t\t\t\tt.assertTrue(store2.isItem(item2));\r\n\t\t\t\t\tt.assertTrue(!store1.isItem(item2));\r\n\t\t\t\t\tt.assertTrue(!store2.isItem(item1));\r\n\t\t\t\t\td.callback(true);\r\n\t\t\t\t}\r\n\t\t\t\tstore2.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete2, onError: onError});\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore1.fetch({query:{isbn:\"1\"}, onComplete: onComplete1, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_hasAttribute(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the hasAttribute API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the hasAttribute API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertTrue(store.hasAttribute(item,\"isbn\"));\r\n\t\t\t\tt.assertTrue(!store.hasAttribute(item,\"bob\"));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_containsValue(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the containsValue API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the containsValue API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertTrue(store.containsValue(item,\"isbn\", \"A9B574\"));\r\n\t\t\t\tt.assertTrue(!store.containsValue(item,\"isbn\", \"bob\"));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_sortDescending(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the sorting API in descending order.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the sorting API in descending order.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\r\n\t\t\t//Comparison is done as a string type (toString comparison), so the order won't be numeric\r\n\t\t\t//So have to compare in 'alphabetic' order.\r\n\t\t\tvar order = [9,8,7,6,5,4,3,20,2,19,18,17,16,15,14,13,12,11,10,1];\r\n\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(20, items.length);\r\n\r\n\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\tt.assertEqual(order[i], store.getValue(items[i],\"isbn\").toString());\r\n\t\t\t\t}\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\r\n\t\t\tvar sortAttributes = [{attribute: \"isbn\", descending: true}];\r\n\t\t\tstore.fetch({query:{isbn:\"*\"}, sort: sortAttributes, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_sortAscending(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the sorting API in ascending order.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the sorting API in ascending order.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\r\n\t\t\t//Comparison is done as a string type (toString comparison), so the order won't be numeric\r\n\t\t\t//So have to compare in 'alphabetic' order.\r\n\t\t\tvar order = [1,10,11,12,13,14,15,16,17,18,19,2,20,3,4,5,6,7,8,9];\r\n\t\t\t\t\t\t\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(20, items.length);\r\n\t\t\t\tvar itemId = 1;\r\n\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\tt.assertEqual(order[i], store.getValue(items[i],\"isbn\").toString());\r\n\t\t\t\t}\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\r\n\t\t\tvar sortAttributes = [{attribute: \"isbn\"}];\r\n\t\t\tstore.fetch({query:{isbn:\"*\"}, sort: sortAttributes, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_sortDescendingNumeric(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the sorting API in descending order using a numeric comparator.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the sorting API in descending order using a numeric comparator.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\r\n\t\t\t//isbn should be treated as a numeric, not as a string comparison\r\n\t\t\tstore.comparatorMap = {};\r\n\t\t\tstore.comparatorMap[\"isbn\"] = function(a, b){\r\n\t\t\t\tvar ret = 0;\r\n\t\t\t\tif(parseInt(a.toString()) > parseInt(b.toString())){\r\n\t\t\t\t\tret = 1;\r\n\t\t\t\t}else if(parseInt(a.toString()) < parseInt(b.toString())){\r\n\t\t\t\t\tret = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn ret; //int, {-1,0,1}\r\n\t\t\t};\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n                \t\tt.assertEqual(20, items.length);\r\n                \t\tvar itemId = 20;\r\n\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\tt.assertEqual(itemId, store.getValue(items[i],\"isbn\").toString());\r\n\t\t\t\t\titemId--;\r\n\t\t\t\t}\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\r\n\t\t\tvar sortAttributes = [{attribute: \"isbn\", descending: true}];\r\n\t\t\tstore.fetch({query:{isbn:\"*\"}, sort: sortAttributes, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_sortAscendingNumeric(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the sorting API in ascending order using a numeric comparator.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the sorting API in ascending order using a numeric comparator.\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\r\n\t\t\t//isbn should be treated as a numeric, not as a string comparison\r\n\t\t\tstore.comparatorMap = {};\r\n\t\t\tstore.comparatorMap[\"isbn\"] = function(a, b){\r\n\t\t\t\tvar ret = 0;\r\n\t\t\t\tif(parseInt(a.toString()) > parseInt(b.toString())){\r\n\t\t\t\t\tret = 1;\r\n\t\t\t\t}else if(parseInt(a.toString()) < parseInt(b.toString())){\r\n\t\t\t\t\tret = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn ret; //int, {-1,0,1}\r\n\t\t\t};\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(20, items.length);\r\n\t\t\t\tvar itemId = 1;\r\n\t\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\t\tt.assertEqual(itemId, store.getValue(items[i],\"isbn\").toString());\r\n\t\t\t\t\titemId++;\r\n\t\t\t\t}\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\r\n\t\t\tvar sortAttributes = [{attribute: \"isbn\"}];\r\n\t\t\tstore.fetch({query:{isbn:\"*\"}, sort: sortAttributes, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_isItemLoaded(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the isItemLoaded API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the isItemLoaded API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertTrue(store.isItemLoaded(item));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_getFeatures(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getFeatures function of the store\r\n\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\t\t\tvar features = store.getFeatures();\r\n\t\t\tvar count = 0;\r\n\t\t\tfor(i in features){\r\n\t\t\t\tt.assertTrue((i === \"dojo.data.api.Read\" || i === \"dojo.data.api.Identity\"));\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tt.assertEqual(2, count);\r\n\t\t},\r\n\t\tfunction testReadAPI_getAttributes(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tvar attributes = store.getAttributes(item);\r\n\t\t\t\tt.assertEqual(3,attributes.length);\r\n\t\t\t\tfor(var i=0; i<attributes.length; i++){\r\n\t\t\t\t\tt.assertTrue((attributes[i] === \"isbn\" || attributes[i] === \"title\" || attributes[i] === \"author\"));\r\n\t\t\t\t}\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testReadAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test read API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\t\t\tvar readApi = new dojo.data.api.Read();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in readApi){\r\n\t\t\t\tvar member = readApi[i];\r\n\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\tconsole.log(\"Problem with function: [\" + i + \"]\");\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t},\r\n/***************************************\r\n     dojo.data.api.Identity API\r\n***************************************/\r\n\t\tfunction testIdentityAPI_getIdentity(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\tt.assertEqual(3,store.getIdentity(item));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testIdentityAPI_getIdentityAttributes(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the getAttributes API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onComplete(items, request) {\r\n\t\t\t\tt.assertEqual(1, items.length);\r\n\t\t\t\tvar item = items[0];\r\n\t\t\t\t//Should have none, as it's not a public attribute.\r\n\t\t\t\tvar attributes = store.getIdentityAttributes(item);\r\n\t\t\t\tt.assertEqual(null, attributes);\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetch({query:{isbn:\"A9B574\"}, onComplete: onComplete, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testIdentityAPI_fetchItemByIdentity(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity API\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test of the fetchItemByIdentity API\r\n\t\t\tvar store = dojox.data.tests.stores.HtmlTableStore.getBooks2Store();\r\n\r\n\t\t\tvar d = new doh.Deferred();\r\n\t\t\tfunction onItem(item, request) {\r\n\t\t\t\tt.assertTrue(item !== null);\r\n\t\t\t\tt.assertTrue(store.isItem(item));\r\n\t\t\t\tt.assertEqual(\"A9B574\", store.getValue(item, \"isbn\"));\r\n\t\t\t\td.callback(true);\r\n\t\t\t}\r\n\t\t\tfunction onError(error, request) {\r\n\t\t\t\td.errback(error);\r\n\t\t\t}\r\n\t\t\tstore.fetchItemByIdentity({identity: 3, onItem: onItem, onError: onError});\r\n\t\t\treturn d; //Object\r\n\t\t},\r\n\t\tfunction testIdentityAPI_functionConformance(t){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSimple test identity API conformance.  Checks to see all declared functions are actual functions on the instances.\r\n\r\n\t\t\tvar testStore = dojox.data.tests.stores.HtmlTableStore.getBooksStore();\r\n\t\t\tvar identityApi = new dojo.data.api.Identity();\r\n\t\t\tvar passed = true;\r\n\r\n\t\t\tfor(i in identityApi){\r\n\t\t\t\tvar member = identityApi[i];\r\n\t\t\t\t//Check that all the 'Read' defined functions exist on the test store.\r\n\t\t\t\tif(typeof member === \"function\"){\r\n\t\t\t\t\tvar testStoreMember = testStore[i];\r\n\t\t\t\t\tif(!(typeof testStoreMember === \"function\")){\r\n\t\t\t\t\t\tconsole.log(\"Problem with function: [\" + i + \"]\");\r\n\t\t\t\t\t\tpassed = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tt.assertTrue(passed);\r\n\t\t}\r\n\t]\r\n);\r\n\r\n//Register the remote tests ... when they work.\r\n//doh.registerUrl(\"dojox.data.tests.stores.HtmlTableStore.remote\", dojo.moduleUrl(\"dojox.data.tests\", \"ml/test_HtmlTableStore_declaratively.html\"));"]}