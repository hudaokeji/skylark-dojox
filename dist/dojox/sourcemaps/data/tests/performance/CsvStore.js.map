{"version":3,"sources":["data/tests/performance/CsvStore.js"],"names":["dojo","provide","require","dojox","data","tests","performance","CsvStore","getData","size","i","templateData","Math","floor","random","doh","register","name","testType","trialDuration","trialDelay","trialIterations","runTest","store","def","Deferred","fetch","onComplete","items","request","assertEqual","length","callback","e","errback","onError","error","setUp","tearDown","isSafari","getValue","_arrayOfAllItems","slice","sort","util","sorter","createSortFunction","attribute"],"mappings":"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","file":"../../../../data/tests/performance/CsvStore.js","sourcesContent":["dojo.provide(\"dojox.data.tests.performance.CsvStore\");\r\ndojo.require(\"dojox.data.CsvStore\");\r\ndojo.require(\"dojo.data.util.sorter\");\r\n\r\n\r\ndojox.data.tests.performance.CsvStore.getData = function(size){\r\n\t// summary:\r\n\t//\t\tThis function generates a psuedorandom dataset collected\r\n\t//\t\tfrom some templated entries.\r\n\t// returns:\r\n\t//\t\tA 2000 'row' CSV dataset.\r\n\r\n\tvar header = \"Title, Year, Producer\\n\";\r\n\tvar templateData = [\r\n\t\t\"City of God, 2002, Katia Lund\\n\",\r\n\t\t\"Rain,, Christine Jeffs\\n\",\r\n\t\t\"2001: A Space Odyssey, 1968, Stanley Kubrick\\n\",\r\n\t\t'\"This is a \"\"fake\"\" movie title\", 1957, Sidney Lumet\\n',\r\n\t\t\"Alien, 1979   , Ridley Scott\\n\",\r\n\t\t'\"The Sequel to \"\"Dances With Wolves.\"\"\", 1982, Ridley Scott\\n',\r\n\t\t'\"Caine Mutiny, The\", 1954, \"Dymtryk \"\"the King\"\", Edward\"\\n'\r\n\t];\r\n\r\n\tvar data = header;\r\n\r\n\tvar i;\r\n\tfor(i = 0; i < size; i++){\r\n\t\tvar idx =Math.floor(Math.random()*7);\r\n\t\tdata += templateData[idx];\r\n\t}\r\n\treturn data;\r\n};\r\n\r\n\r\ndoh.register(\"dojox.data.tests.performance.CsvStore\",[\r\n\t{\r\n\t\tname: \"Initial Parse and First Fetch\",\r\n\t\ttestType: \"perf\",\r\n\t\ttrialDuration: 100,\r\n\t\ttrialDelay: 50,\r\n\t\ttrialIterations: 50,\r\n\t\trunTest: function(){\r\n\t\t\tstore = new dojox.data.CsvStore({\r\n\t\t\t\tdata: dojox.data.tests.performance.CsvStore.getData(2000)\r\n\t\t\t});\r\n\t\t\tvar def = new doh.Deferred();\r\n\t\t\tvar complete = function(items, request){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tdoh.assertEqual(2000, items.length);\r\n\t\t\t\t\tdef.callback(true);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tdef.errback(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tvar err = function(error, request){\r\n\t\t\t\tdef.errback(error);\r\n\t\t\t};\r\n\t\t\tstore.fetch({onComplete: complete, onError: err});\r\n\t\t\treturn def;\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tname: \"Fetch All Data\",\r\n\t\ttestType: \"perf\",\r\n\t\ttrialDuration: 100,\r\n\t\ttrialDelay: 50,\r\n\t\ttrialIterations: 50,\r\n\t\tsetUp: function(){\r\n\t\t\tdojox.data.tests.performance.CsvStore.store = new dojox.data.CsvStore({\r\n\t\t\t\tdata: dojox.data.tests.performance.CsvStore.getData(2000)\r\n\t\t\t});\r\n\t\t\t//Since the store is fed this way, it prettymuch acts sync\r\n\t\t\t//and we can force a fill data load and parse.\r\n\t\t\t//This gets the parse time out of the fetch.\r\n\t\t\tdojox.data.tests.performance.CsvStore.store.fetch({});\r\n\t\t},\r\n\t\ttearDown: function(){\r\n\t\t\tdelete dojox.data.tests.performance.CsvStore.store;\r\n\t\t},\r\n\t\trunTest: function(){\r\n\t\t\tvar store = dojox.data.tests.performance.CsvStore.store;\r\n\t\t\tvar def = new doh.Deferred();\r\n\t\t\tvar complete = function(items, request){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tdoh.assertEqual(2000, items.length);\r\n\t\t\t\t\tdef.callback(true);\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tdef.errback(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tvar err = function(error, request){\r\n\t\t\t\tdef.errback(error);\r\n\t\t\t};\r\n\t\t\tstore.fetch({onComplete: complete, onError: err});\r\n\t\t\tif(!dojo.isSafari){\r\n\t\t\t\t//Well, realistically this is all sync so we don't *have* to\r\n\t\t\t\t//pass back a deferred.  I think safari is blowing stack again.\r\n\t\t\t\t//Need to look more at DOH once more.\r\n\t\t\t\treturn def;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tname: \"getValue\",\r\n\t\ttestType: \"perf\",\r\n\t\ttrialDuration: 100,\r\n\t\ttrialDelay: 50,\r\n\t\ttrialIterations: 50,\r\n\t\tsetUp: function(){\r\n\t\t\tdojox.data.tests.performance.CsvStore.store = new dojox.data.CsvStore({\r\n\t\t\t\tdata: dojox.data.tests.performance.CsvStore.getData(2000)\r\n\t\t\t});\r\n\t\t\t//Since the store is fed this way, it prettymuch acts sync\r\n\t\t\t//and we can force a fill data load and parse.\r\n\t\t\t//This gets the parse time out of the fetch.\r\n\t\t\tdojox.data.tests.performance.CsvStore.store.fetch({});\r\n\t\t},\r\n\t\ttearDown: function(){\r\n\t\t\tdelete dojox.data.tests.performance.CsvStore.store;\r\n\t\t},\r\n\t\trunTest: function(){\r\n\t\t\t//Yes, this is bad, I'm accessing internal data, but I don't care\r\n\t\t\t//about the fetch time, only the getValue processing.  So,\r\n\t\t\t//I just gab the first item.\r\n\t\t\tvar value = dojox.data.tests.performance.CsvStore.store.getValue(\r\n\t\t\t\tdojox.data.tests.performance.CsvStore.store._arrayOfAllItems[0],\r\n\t\t\t\t\"Title\");\r\n\t\t}\r\n\t},\r\n\t{\r\n\t\tname: \"sort (500 rows)\",\r\n\t\ttestType: \"perf\",\r\n\t\ttrialDuration: 100,\r\n\t\ttrialDelay: 50,\r\n\t\ttrialIterations: 50,\r\n\t\tsetUp: function(){\r\n\t\t\tdojox.data.tests.performance.CsvStore.store = new dojox.data.CsvStore({\r\n\t\t\t\tdata: dojox.data.tests.performance.CsvStore.getData(500)\r\n\t\t\t});\r\n\t\t\t//Since the store is fed this way, it prettymuch acts sync\r\n\t\t\t//and we can force a fill data load and parse.\r\n\t\t\t//This gets the parse time out of the fetch.\r\n\t\t\tdojox.data.tests.performance.CsvStore.store.fetch();\r\n\t\t},\r\n\t\ttearDown: function(){\r\n\t\t\tdelete dojox.data.tests.performance.CsvStore.store;\r\n\t\t},\r\n\t\trunTest: function(){\r\n\t\t\t//Yes, this is bad, I'm accessing internal data, but I don't care\r\n\t\t\t//about the fetch time, only the getValue processing.  So,\r\n\t\t\t//I just gab the first item.\r\n\t\t\tvar sort = [{attribute: \"Title\"}];\r\n\r\n\t\t\t//Create a clone array of all the data.  Yes, this accesses internals, but my goal here\r\n\t\t\t//is to test the sorter code with respect to the store.\r\n\t\t\tvar data = dojox.data.tests.performance.CsvStore.store._arrayOfAllItems.slice(0,\r\n\t\t\t\tdojox.data.tests.performance.CsvStore.store._arrayOfAllItems.length);\r\n\r\n\t\t\t//Sort it using the generic sorter..\r\n\t\t\tdata.sort(dojo.data.util.sorter.createSortFunction(sort,\r\n\t\t\t\tdojox.data.tests.performance.CsvStore.store));\r\n\t\t}\r\n\t}\r\n]);\r\n\r\n"]}