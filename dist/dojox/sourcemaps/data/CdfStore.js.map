{"version":3,"sources":["data/CdfStore.js"],"names":["define","dojo","dojox","data","ASYNC_MODE","SYNC_MODE","declare","identity","url","xmlStr","label","mode","constructor","args","this","str","_makeXmlString","undefined","_modifiedItems","byId","fetchItemByIdentity","getValue","item","property","defaultValue","getAttribute","getValues","v","isArray","getAttributes","getAttributeNames","hasAttribute","hasProperty","containsValue","value","values","i","length","toString","isItem","something","getClass","equals","jsx3","xml","Entity","jsxclass","isItemLoaded","loadItem","keywordArgs","getFeatures","dojo.data.api.Read","dojo.data.api.Write","dojo.data.api.Identity","getLabel","getLabelAttributes","fetch","request","store","self","errorHandler","errorData","onError","scope","global","call","console","error","fetchHandler","items","requestObject","oldAbortFunction","abort","aborted","startIndex","start","endIndex","count","Infinity","onBegin","sort","util","sorter","createSortFunction","onItem","onComplete","slice","Error","localRequest","res","_loadCDF","cdfDoc","_getItems","dfd","addCallbacks","hitch","err","Deferred","setTimeout","callback","CDF","Document","newDocument","subscribe","evt","errback","setAsync","load","loadXML","getError","code","description","itr","selectNodes","query","hasNext","push","next","close","newItem","parentInfo","tagName","warn","jsxid","getKey","getIdentity","insertRecord","_makeDirty","deleteItem","deleteRecord","setValue","setAttribute","setValues","unsetAttribute","removeAttribute","revert","isDirty","_dirty","nm","id","obj","parseObj","name","isObject","getIdentityAttributes","isString"],"mappings":"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","file":"../../data/CdfStore.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojo/data/util/sorter\"], function(dojo, dojox) {\r\n\r\ndojox.data.ASYNC_MODE = 0;\r\ndojox.data.SYNC_MODE = 1;\r\n\r\nreturn dojo.declare(\"dojox.data.CdfStore\", null, {\r\n\t// summary:\r\n\t//\t\tIMPORTANT: The CDF Store is designed to work with Tibco GI, and references Tibco's\r\n\t//\t\tJSX3 JavaScript library and will not work without it.\r\n\t//\r\n\t//\t\tThe CDF Store implements dojo.data.Read, Write, and Identity api's.  It is a local\r\n\t//\t\t(in memory) store that handles XML documents formatted according to the\r\n\t//\t\tCommon Data Format (CDF) spec:\r\n\t//\t\thttp://www.tibco.com/devnet/resources/gi/3_1/tips_and_techniques/CommonDataFormatCDF.pdf\r\n\t//\r\n\t//\t\tThe purpose of this store is to provide a glue between a jsx3 CDF file and a Dijit.\r\n\t//\r\n\t//\t\tWhile a CDF document is an XML file, other than the initial input, all data returned\r\n\t//\t\tfrom and written to this store should be in object format.\r\n\r\n\t// identity: [const] String\r\n\t//\t\tThe unique identifier for each item. Defaults to \"jsxid\" which is standard for a CDF\r\n\t//\t\tdocument. Should not be changed.\r\n\tidentity: \"jsxid\",\r\n\r\n\t// url : String\r\n\t//\t\tThe location from which to fetch the XML (CDF) document.\r\n\turl: \"\",\r\n\r\n\t// xmlStr: String\r\n\t//\t\tA string that can be parsed into an XML document and should be formatted according\r\n\t//\t\tto the CDF spec.\r\n\t// example:\r\n\t//\t\t|\t'<data jsxid=\"jsxroot\"><record jsxtext=\"A\"/><record jsxtext=\"B\" jsxid=\"2\" jsxid=\"2\"/></data>'\r\n\txmlStr:\"\",\r\n\r\n\t// data:\tObject\r\n\t//\t\tA object that will be converted into the xmlStr property, and then parsed into a CDF.\r\n\tdata:null,\r\n\r\n\t// label:\tString\r\n\t//\t\tThe property within each item used to define the item.\r\n\tlabel: \"\",\r\n\r\n\t//\tmode [const]: dojox.data.ASYNC_MODE|dojox.data.SYNC_MODE\r\n\t//\t\tThis store supports synchronous fetches if this property is set to dojox.data.SYNC_MODE.\r\n\tmode:dojox.data.ASYNC_MODE,\r\n\t\r\n\tconstructor: function(/* Object */ args){\r\n\t\t// summary:\r\n\t\t//\tConstructor for the CDF store. Instantiate a new CdfStore.\r\n\t\tif(args){\r\n\t\t\tthis.url = args.url;\r\n\t\t\tthis.xmlStr = args.xmlStr || args.str;\r\n\t\t\tif(args.data){\r\n\t\t\t\tthis.xmlStr = this._makeXmlString(args.data);\r\n\t\t\t}\r\n\t\t\tthis.identity = args.identity || this.identity;\r\n\t\t\tthis.label = args.label || this.label;\r\n\t\t\tthis.mode = args.mode !== undefined ? args.mode : this.mode;\r\n\t\t}\r\n\t\tthis._modifiedItems = {};\r\n\t\t\r\n\t\tthis.byId = this.fetchItemByIdentity;\r\n\t},\r\n\t\r\n\t/* dojo/data/api/Read */\r\n\r\n\tgetValue: function(/* jsx3.xml.Entity */ item, /* String */ property, /* value? */ defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an property value of an item\r\n\r\n\t\treturn item.getAttribute(property) || defaultValue; // anything\r\n\t},\r\n\r\n\tgetValues: function(/* jsx3.xml.Entity */ item, /* String */ property){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an array of values\r\n\r\n\t\t//\tTODO!!! Can't find an example of an array in any CDF files\r\n\t\tvar v = this.getValue(item, property, []);\r\n\t\treturn dojo.isArray(v) ? v : [v];\r\n\t},\r\n\r\n\tgetAttributes: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an array of property names\r\n\r\n\t\treturn item.getAttributeNames(); // Array\r\n\t},\r\n\r\n\thasAttribute: function(/* jsx3.xml.Entity */ item, /* String */ property){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether an item has a property\r\n\r\n\t\treturn (this.getValue(item, property) !== undefined); // Boolean\r\n\t},\r\n\t\r\n\thasProperty: function(/* jsx3.xml.Entity */ item, /* String */ property){\r\n\t\t// summary:\r\n\t\t//\tAlias for hasAttribute\r\n\t\treturn this.hasAttribute(item, property);\r\n\t},\r\n\t\r\n\tcontainsValue: function(/* jsx3.xml.Entity */ item, /* String */ property, /* anything */ value){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether an item contains a value\r\n\r\n\t\tvar values = this.getValues(item, property);\r\n\t\tfor(var i = 0; i < values.length; i++){\r\n\t\t\tif(values[i] === null){ continue; }\r\n\t\t\tif((typeof value === \"string\")){\r\n\t\t\t\tif(values[i].toString && values[i].toString() === value){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}else if(values[i] === value){\r\n\t\t\t\treturn true; //boolean\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;//boolean\r\n\t},\r\n\r\n\tisItem: function(/* anything */ something){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether the object is an item (jsx3.xml.Entity)\r\n\r\n\t\tif(something.getClass && something.getClass().equals(jsx3.xml.Entity.jsxclass)){\r\n\t\t\treturn true; //boolean\r\n\t\t}\r\n\t\treturn false; //boolran\r\n\t},\r\n\r\n\tisItemLoaded: function(/* anything */ something){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether the object is a jsx3.xml.Entity object and loaded\r\n\r\n\t\treturn this.isItem(something); // Boolean\r\n\t},\r\n\r\n\tloadItem: function(/* object */ keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tLoad an item\r\n\t\t// description:\r\n\t\t//\t\tThe store always loads all items, so if it's an item, then it's loaded.\r\n\t},\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturn supported data APIs\r\n\r\n\t\treturn {\r\n\t\t\t\"dojo.data.api.Read\": true,\r\n\t\t\t\"dojo.data.api.Write\": true,\r\n\t\t\t\"dojo.data.api.Identity\":true\r\n\t\t}; // Object\r\n\t},\r\n\r\n\tgetLabel: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\r\n\t\tif((this.label !== \"\") && this.isItem(item)){\r\n\t\t\tvar label = this.getValue(item,this.label);\r\n\t\t\tif(label){\r\n\t\t\t\treturn label.toString();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined; //undefined\r\n\t},\r\n\r\n\tgetLabelAttributes: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\treturns an array of what properties of the item that were used\r\n\t\t//\t\tto generate its label\r\n\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\r\n\t\tif(this.label !== \"\"){\r\n\t\t\treturn [this.label]; //array\r\n\t\t}\r\n\t\treturn null; //null\r\n\t},\r\n\r\n\t\r\n\tfetch: function(/* Object? */ request){\r\n\t\t// summary:\r\n\t\t//\t\tReturns an Array of items based on the request arguments.\r\n\t\t// description:\r\n\t\t//\t\tReturns an Array of items based on the request arguments.\r\n\t\t//\t\tIf the store is in ASYNC mode, the items should be expected in an onComplete\r\n\t\t//\t\tmethod passed in the request object. If store is in SYNC mode, the items will\r\n\t\t//\t\tbe return directly as well as within the onComplete method.\r\n\t\t//\r\n\t\t//\t\tnote:\r\n\t\t//\t\tThe mode can be set on store initialization or during a fetch as one of the\r\n\t\t//\t\tparameters.\r\n\t\t//\r\n\t\t//\t\tSee:\r\n\t\t//\r\n\t\t//\t\t- http://www.tibco.com/devnet/resources/gi/3_7/api/html/jsx3/xml/Entity.html#method:selectNodes\r\n\t\t//\t\t- http://www.w3.org/TR/xpath\r\n\t\t//\t\t- http://msdn.microsoft.com/en-us/library/ms256086.aspx\r\n\t\t//\r\n\t\t//\t\tSee dojo.data.Read.fetch():\r\n\t\t//\r\n\t\t//\t\t- onBegin\r\n\t\t//\t\t- onComplete\r\n\t\t//\t\t- onItem\r\n\t\t//\t\t- onError\r\n\t\t//\t\t- scope\r\n\t\t//\t\t- start\r\n\t\t//\t\t- count\r\n\t\t//\t\t- sort\r\n\t\t// request: String\r\n\t\t//\t\tThe items in the store are treated as objects, but this is reading an XML\r\n\t\t//\t\tdocument. Further, the actual querying of the items takes place in Tibco GI's\r\n\t\t//\t\tjsx3.xml.Entity. Therefore, we are using their syntax which is xpath.\r\n\t\t//\r\n\t\t//\t\tNote:\r\n\t\t//\t\tAs conforming to a CDF document, most, if not all nodes are considered \"records\"\r\n\t\t//\t\tand their tagNames are as such. The root node is named \"data\".\r\n\t\t// example:\r\n\t\t//\t\tAll items:\r\n\t\t//\t\t|\tstore.fetch({query:\"*\"});\r\n\t\t// example:\r\n\t\t//\t\tItem with a jsxid attribute equal to \"1\" (note you could use byId for this)\r\n\t\t//\t\t|\tstore.fetch({query:\"//record[@jsxid='1']\"});\r\n\t\t// example:\r\n\t\t//\t\tAll items with any jsxid attribute:\r\n\t\t//\t\t|\t\"//record[@jsxid='*']\"\r\n\t\t// example:\r\n\t\t//\t\tThe items with a jsxid of '1' or '4':\r\n\t\t//\t\t|\t\"//record[@jsxid='4' or @jsxid='1']\"\r\n\t\t// example:\r\n\t\t//\t\tAll children within a \"group\" node (could be multiple group nodes):\r\n\t\t//\t\t\"//group/record\"\r\n\t\t// example:\r\n\t\t//\t\tAll children within a specific group node:\r\n\t\t//\t\t\"//group[@name='mySecondGroup']/record\"\r\n\t\t// example:\r\n\t\t//\t\tAny record, anywhere in the document:\r\n\t\t//\t\t|\t\"//record\"\r\n\t\t//\t\tOnly the records beneath the root (data) node:\r\n\t\t//\t\t|\t\"//data/record\"\r\n\r\n\t\trequest = request || {};\r\n\t\tif(!request.store){\r\n\t\t\trequest.store = this;\r\n\t\t}\r\n\t\tif(request.mode !== undefined){\r\n\t\t\tthis.mode = request.mode;\r\n\t\t}\r\n\t\tvar self = this;\r\n\t\r\n\t\tvar errorHandler = function(errorData){\r\n\t\t\tif(request.onError){\r\n\t\t\t\tvar scope = request.scope || dojo.global;\r\n\t\t\t\trequest.onError.call(scope, errorData, request);\r\n\t\t\t}else{\r\n\t\t\t\tconsole.error(\"cdfStore Error:\", errorData);\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tvar fetchHandler = function(items, requestObject){\r\n\t\t\trequestObject = requestObject || request;\r\n\t\t\tvar oldAbortFunction = requestObject.abort || null;\r\n\t\t\tvar aborted = false;\r\n\t\r\n\t\t\tvar startIndex = requestObject.start?requestObject.start:0;\r\n\t\t\tvar endIndex = (requestObject.count && (requestObject.count !== Infinity))?(startIndex + requestObject.count):items.length;\r\n\t\r\n\t\t\trequestObject.abort = function(){\r\n\t\t\t\taborted = true;\r\n\t\t\t\tif(oldAbortFunction){\r\n\t\t\t\t\toldAbortFunction.call(requestObject);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\tvar scope = requestObject.scope || dojo.global;\r\n\t\t\tif(!requestObject.store){\r\n\t\t\t\trequestObject.store = self;\r\n\t\t\t}\r\n\t\t\tif(requestObject.onBegin){\r\n\t\t\t\trequestObject.onBegin.call(scope, items.length, requestObject);\r\n\t\t\t}\r\n\t\t\tif(requestObject.sort){\r\n\t\t\t\titems.sort(dojo.data.util.sorter.createSortFunction(requestObject.sort, self));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(requestObject.onItem){\r\n\t\t\t\tfor(var i = startIndex; (i < items.length) && (i < endIndex); ++i){\r\n\t\t\t\t\tvar item = items[i];\r\n\t\t\t\t\tif(!aborted){\r\n\t\t\t\t\t\trequestObject.onItem.call(scope, item, requestObject);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(requestObject.onComplete && !aborted){\r\n\t\t\t\tif(!requestObject.onItem){\r\n\t\t\t\t\titems = items.slice(startIndex, endIndex);\r\n\t\t\t\t\tif(requestObject.byId){\r\n\t\t\t\t\t\titems = items[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trequestObject.onComplete.call(scope, items, requestObject);\r\n\t\t\t}else{\r\n\t\t\t\titems = items.slice(startIndex, endIndex);\r\n\t\t\t\tif(requestObject.byId){\r\n\t\t\t\t\titems = items[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn items;\r\n\t\t};\r\n\t\t\r\n\t\tif(!this.url && !this.data && !this.xmlStr){\r\n\t\t\terrorHandler(new Error(\"No URL or data specified.\"));\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar localRequest = request || \"*\"; // use request for _getItems()\r\n\t\t\r\n\t\tif(this.mode == dojox.data.SYNC_MODE){\r\n\t\t\t// sync mode. items returned directly\r\n\t\t\tvar res = this._loadCDF();\r\n\t\t\tif(res instanceof Error){\r\n\t\t\t\tif(request.onError){\r\n\t\t\t\t\trequest.onError.call(request.scope || dojo.global, res, request);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tconsole.error(\"CdfStore Error:\", res);\r\n\t\t\t\t}\r\n\t\t\t\treturn res;\r\n\t\t\t}\r\n\t\t\tthis.cdfDoc = res;\r\n\t\t\t\r\n\t\t\tvar items = this._getItems(this.cdfDoc, localRequest);\r\n\t\t\tif(items && items.length > 0){\r\n\t\t\t\titems = fetchHandler(items, request);\r\n\t\t\t}else{\r\n\t\t\t\titems = fetchHandler([], request);\r\n\t\t\t}\r\n\t\t\treturn items;\r\n\t\t\r\n\t\t}else{\r\n\t\t\t\r\n\t\t\t// async mode. Return a Deferred.\r\n\t\t\tvar dfd = this._loadCDF();\r\n\t\t\tdfd.addCallbacks(dojo.hitch(this, function(cdfDoc){\r\n\t\t\t\tvar items = this._getItems(this.cdfDoc, localRequest);\r\n\t\t\t\tif(items && items.length > 0){\r\n\t\t\t\t\tfetchHandler(items, request);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfetchHandler([], request);\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tdojo.hitch(this, function(err){\r\n\t\t\t\terrorHandler(err, request);\r\n\t\t\t}));\r\n\t\t\t\r\n\t\t\treturn dfd;\t// Object\r\n\t\t}\r\n\t},\r\n\r\n\t\r\n\t_loadCDF: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal method.\r\n\t\t//\t\tIf a cdfDoc exists, return it. Otherwise, get one from JSX3,\r\n\t\t//\t\tload the data or url, and return the doc or a deferred.\r\n\t\tvar dfd = new dojo.Deferred();\r\n\t\tif(this.cdfDoc){\r\n\t\t\tif(this.mode == dojox.data.SYNC_MODE){\r\n\t\t\t\treturn this.cdfDoc; // jsx3.xml.CDF\r\n\t\t\t}else{\r\n\t\t\t\tsetTimeout(dojo.hitch(this, function(){\r\n\t\t\t\t\tdfd.callback(this.cdfDoc);\r\n\t\t\t\t}), 0);\r\n\t\t\t\treturn dfd; // dojo.Deferred\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.cdfDoc = jsx3.xml.CDF.Document.newDocument();\r\n\t\tthis.cdfDoc.subscribe(\"response\", this, function(evt){\r\n\t\t\tdfd.callback(this.cdfDoc);\r\n\t\t});\r\n\t\tthis.cdfDoc.subscribe(\"error\", this, function(err){\r\n\t\t\tdfd.errback(err);\r\n\t\t});\r\n\t\t\r\n\t\tthis.cdfDoc.setAsync(!this.mode);\r\n\t\tif(this.url){\r\n\t\t\tthis.cdfDoc.load(this.url);\r\n\t\t}else if(this.xmlStr){\r\n\t\t\tthis.cdfDoc.loadXML(this.xmlStr);\r\n\t\t\tif(this.cdfDoc.getError().code){\r\n\t\t\t\treturn new Error(this.cdfDoc.getError().description); // Error\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(this.mode == dojox.data.SYNC_MODE){\r\n\t\t\treturn this.cdfDoc; // jsx3.xml.CDF\r\n\t\t}else{\r\n\t\t\treturn dfd;\t\t\t// dojo.Deferred\r\n\t\t}\r\n\t},\r\n\t\r\n\t_getItems: function(/* jsx3.xml.Entity */cdfDoc, /* Object */request){\r\n\t\t// summary:\r\n\t\t//\t\tInternal method.\r\n\t\t//\t\tRequests the items from jsx3.xml.Entity with an xpath query.\r\n\r\n\t\tvar itr = cdfDoc.selectNodes(request.query, false, 1);\r\n\t\tvar items = [];\r\n\t\twhile(itr.hasNext()){\r\n\t\t\titems.push(itr.next());\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\r\n\tclose: function(/*dojo/data/api/Request|Object?*/ request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t},\r\n\r\n/* dojo/data/api/Write */\r\n\r\n\tnewItem: function(/* object? */ keywordArgs, /* Object|String? */ parentInfo){\r\n\t\t// summary:\r\n\t\t//\t\tCreates a jsx3.xml.Entity item and inserts it either inside the\r\n\t\t//\t\tparent or appends it to the root\r\n\r\n\t\tkeywordArgs = (keywordArgs || {});\r\n\t\tif(keywordArgs.tagName){\r\n\t\t\t// record tagName is automatic and this would add it\r\n\t\t\t// as a property\r\n\t\t\tif(keywordArgs.tagName!=\"record\"){\r\n\t\t\t\t// TODO: How about some sort of group?\r\n\t\t\t\tconsole.warn(\"Only record inserts are supported at this time\");\r\n\t\t\t}\r\n\t\t\tdelete keywordArgs.tagName;\r\n\t\t}\r\n\t\tkeywordArgs.jsxid = keywordArgs.jsxid || this.cdfDoc.getKey();\r\n\t\tif(this.isItem(parentInfo)){\r\n\t\t\tparentInfo = this.getIdentity(parentInfo);\r\n\t\t}\r\n\t\tvar item = this.cdfDoc.insertRecord(keywordArgs, parentInfo);\r\n\r\n\t\tthis._makeDirty(item);\r\n\t\t\r\n\t\treturn item; // jsx3.xml.Entity\r\n\t},\r\n\t\r\n\tdeleteItem: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\tDelete an jsx3.xml.Entity (wrapper to a XML element).\r\n\r\n\t\tthis.cdfDoc.deleteRecord(this.getIdentity(item));\r\n\t\tthis._makeDirty(item);\r\n\t\treturn true; //boolean\r\n\t},\r\n\t\r\n\tsetValue: function(/* jsx3.xml.Entity */ item, /* String */ property, /* almost anything */ value){\r\n\t\t// summary:\r\n\t\t//\t\tSet an property value\r\n\r\n\t\tthis._makeDirty(item);\r\n\t\titem.setAttribute(property, value);\r\n\t\treturn true; // Boolean\r\n\t},\r\n\t\t\r\n\tsetValues: function(/* jsx3.xml.Entity */ item, /* String */ property, /*array*/ values){\r\n\t\t// summary:\r\n\t\t//\t\tSet property values.\r\n\r\n\t\t//\t\tTODO: Needs to be fully implemented.\r\n\r\n\t\tthis._makeDirty(item);\r\n\t\tconsole.warn(\"cdfStore.setValues only partially implemented.\");\r\n\t\treturn item.setAttribute(property, values);\r\n\t\t\r\n\t},\r\n\t\r\n\tunsetAttribute: function(/* jsx3.xml.Entity */ item, /* String */ property){\r\n\t\t// summary:\r\n\t\t//\t\tRemove an property\r\n\r\n\t\tthis._makeDirty(item);\r\n\t\titem.removeAttribute(property);\r\n\t\treturn true; // Boolean\r\n\t},\r\n\t\r\n\trevert: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInvalidate changes (new and/or modified elements)\r\n\t\t//\t\tResets data by simply deleting the reference to the cdfDoc.\r\n\t\t//\t\tSubsequent fetches will load the new data.\r\n\t\t//\r\n\t\t//\t\tNote:\r\n\t\t//\t\tAny items outside the store will no longer be valid and may cause errors.\r\n\r\n\t\tdelete this.cdfDoc;\r\n\t\tthis._modifiedItems = {};\r\n\t\treturn true; //boolean\r\n\t},\r\n\t\r\n\tisDirty: function(/* jsx3.xml.Entity ? */ item){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether an item is new, modified or deleted.\r\n\t\t//\t\tIf no item is passed, checks if anything in the store has changed.\r\n\r\n\t\tif(item){\r\n\t\t\treturn !!this._modifiedItems[this.getIdentity(item)]; // Boolean\r\n\t\t}else{\r\n\t\t\tvar _dirty = false;\r\n\t\t\tfor(var nm in this._modifiedItems){ _dirty = true; break; }\r\n\t\t\treturn _dirty; // Boolean\r\n\t\t}\r\n\t},\r\n\r\n\t\r\n\r\n/* internal API */\r\n\r\n\t_makeDirty: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tInternal method.\r\n\t\t//\t\tMarks items as modified, deleted or new.\r\n\t\tvar id = this.getIdentity(item);\r\n\t\tthis._modifiedItems[id] = item;\r\n\t},\r\n\t\r\n\t\r\n\t_makeXmlString: function(obj){\r\n\t\t// summary:\r\n\t\t//\t\tInternal method.\r\n\t\t//\t\tConverts an object into an XML string.\r\n\r\n\t\tvar parseObj = function(obj, name){\r\n\t\t\tvar xmlStr = \"\";\r\n\t\t\tvar nm;\r\n\t\t\tif(dojo.isArray(obj)){\r\n\t\t\t\tfor(var i=0;i<obj.length;i++){\r\n\t\t\t\t\txmlStr += parseObj(obj[i], name);\r\n\t\t\t\t}\r\n\t\t\t}else if(dojo.isObject(obj)){\r\n\t\t\t\txmlStr += '<'+name+' ';\r\n\t\t\t\tfor(nm in obj){\r\n\t\t\t\t\tif(!dojo.isObject(obj[nm])){\r\n\t\t\t\t\t\txmlStr += nm+'=\"'+obj[nm]+'\" ';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\txmlStr +='>';\r\n\t\t\t\tfor(nm in obj){\r\n\t\t\t\t\tif(dojo.isObject(obj[nm])){\r\n\t\t\t\t\t\txmlStr += parseObj(obj[nm], nm);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\txmlStr += '</'+name+'>';\r\n\t\t\t}\r\n\t\t\treturn xmlStr;\r\n\t\t};\r\n\t\treturn parseObj(obj, \"data\");\r\n\t},\r\n\r\n\t/*************************************\r\n\t * Dojo.data Identity implementation *\r\n\t *************************************/\r\n\tgetIdentity: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the identifier for an item.\r\n\r\n\t\treturn this.getValue(item, this.identity); // String\r\n\t},\r\n\r\n\tgetIdentityAttributes: function(/* jsx3.xml.Entity */ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the property used for the identity.\r\n\r\n\t\treturn [this.identity]; // Array\r\n\t},\r\n\r\n\r\n\tfetchItemByIdentity: function(/* Object|String */ args){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Identity.fetchItemByIdentity(keywordArgs).\r\n\t\t//\r\n\t\t//\t\tNote:\r\n\t\t//\t\tThis method can be synchronous if mode is set.\r\n\t\t//\t\tAlso, there is a more finger friendly alias of this method, byId();\r\n\t\tif(dojo.isString(args)){\r\n\t\t\tvar id = args;\r\n\t\t\targs = {query:\"//record[@jsxid='\"+id+\"']\", mode: dojox.data.SYNC_MODE};\r\n\t\t}else{\r\n\t\t\tif(args){\r\n\t\t\t\targs.query = \"//record[@jsxid='\"+args.identity+\"']\";\r\n\t\t\t}\r\n\t\t\tif(!args.mode){args.mode = this.mode;}\r\n\t\t}\r\n\t\targs.byId = true;\r\n\t\treturn this.fetch(args); // dojo/_base/Deferred|Array\r\n\t},\r\n\tbyId: function(/* Object|String */ args){\r\n\t\t// stub. See fetchItemByIdentity\r\n\t}\r\n});\r\n\r\n});\r\n\r\n"]}