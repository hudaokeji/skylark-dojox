{"version":3,"sources":["data/SnapLogicStore.js"],"names":["define","dojo","dojox","declare","Parts","DATA","COUNT","url","constructor","args","this","_parameters","parameters","_assertIsItem","item","isItem","Error","_assertIsAttribute","attribute","getFeatures","dojo.data.api.Read","getValue","defaultValue","i","indexOf","attributes","values","getAttributes","hasAttribute","length","isItemLoaded","loadItem","keywordArgs","getLabel","getLabelAttributes","containsValue","value","getValues","_store","close","request","_fetchHandler","scope","global","onBegin","call","_countResponse","onItem","onComplete","response","_dataResponse","onError","query","field_names","shift","items","_aborted","push","sort","data","util","sorter","createSortFunction","self","_partHandler","part","_dataHandle","_countHandle","fetch","abort","cancel","content","start","count","getArgs","timeout","callbackParamName","handle","hitch","io","script","get","sn.count","sn.content_type"],"mappings":"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","file":"../../data/SnapLogicStore.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojo/io/script\", \"dojo/data/util/sorter\"], function(dojo, dojox) {\r\n\r\nreturn dojo.declare(\"dojox.data.SnapLogicStore\", null, {\r\n\tParts: {\r\n\t\tDATA: \"data\",\r\n\t\tCOUNT: \"count\"\r\n\t},\r\n\r\n\turl: \"\",\r\n\r\n\tconstructor: function(/* Object */args){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize a SnapLogicStore object.\r\n\t\t// args:\r\n\t\t//\t\tAn object that contains properties for initializing the new data store object. The\r\n\t\t//\t\tfollowing properties are understood:\r\n\t\t//\r\n\t\t//\t\t- url:\r\n\t\t//\t\t\tA URL to the SnapLogic pipeline's output routed through PipeToHttp. Typically, this\r\n\t\t//\t\t\twill look like `http://<server-host>:<port>/pipe/<pipeline-url>/<pipeline-output-view>`.\r\n\t\t//\t\t- parameters:\r\n\t\t//\t\t\tAn object whose properties define parameters to the pipeline. The values of these\r\n\t\t//\t\t\tproperties will be sent to the pipeline as parameters when it run.\r\n\r\n\t\tif(args.url){\r\n\t\t\tthis.url = args.url;\r\n\t\t}\r\n\t\tthis._parameters = args.parameters;\r\n\t},\r\n\r\n\t_assertIsItem: function(/* item */item){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed an item in the store.\r\n\t\t// item:\r\n\t\t//\t\tThe item to test for being contained by the store.\r\n\t\tif(!this.isItem(item)){\r\n\t\t\tthrow new Error(\"dojox.data.SnapLogicStore: a function was passed an item argument that was not an item\");\r\n\t\t}\r\n\t},\r\n\r\n\t_assertIsAttribute: function(/*attribute-name-string*/ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed a valid 'attribute' like type for the store.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute to test for being contained by the store.\r\n\t\tif(typeof attribute !== \"string\"){\r\n\t\t\tthrow new Error(\"dojox.data.SnapLogicStore: a function was passed an attribute argument that was not an attribute name string\");\r\n\t\t}\r\n\t},\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t'dojo.data.api.Read': true\r\n\t\t};\r\n\t},\r\n\r\n\tgetValue: function(item, attribute, defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tvar i = dojo.indexOf(item.attributes, attribute);\r\n\t\tif(i !== -1){\r\n\t\t\treturn item.values[i];\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t},\r\n\r\n\tgetAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getAttributes()\r\n\t\tthis._assertIsItem(item);\r\n\t\treturn item.attributes;\r\n\t},\r\n\r\n\thasAttribute: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.hasAttributes()\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tfor(var i = 0; i < item.attributes.length; ++i){\r\n\t\t\tif(attribute == item.attributes[i]){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tisItemLoaded: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItemLoaded()\r\n\t\treturn this.isItem(item);\t\t// Boolean\r\n\t},\r\n\r\n\tloadItem: function(keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.loadItem()\r\n\t},\r\n\r\n\tgetLabel: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\t\treturn undefined;\r\n\t},\r\n\t\r\n\tgetLabelAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\t\treturn null;\r\n\t},\r\n\r\n\tcontainsValue: function(item, attribute, value){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.containsValue()\r\n\t\treturn this.getValue(item, attribute) === value;\t\t// Boolean\r\n\t},\r\n\r\n\tgetValues: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tvar i = dojo.indexOf(item.attributes, attribute);\r\n\t\tif(i !== -1){\r\n\t\t\treturn [item.values[i]];\t// Array\r\n\t\t}\r\n\t\treturn [];\r\n\t},\r\n\r\n\tisItem: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItem()\r\n\t\tif(item && item._store === this){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\tclose: function(request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t},\r\n\r\n\t_fetchHandler: function(/*Object*/ request){\r\n\t\t// summary:\r\n\t\t//\t\tProcess data retrieved via fetch and send it back to requester.\r\n\t\t// request:\r\n\t\t//\t\tThe data returned from the I/O transport. In the normal case, it will be an array of result rows\r\n\t\t//\t\tfrom the pipeline. In the special case for record count optimization, response will be an array\r\n\t\t//\t\twith a single element containing the total pipeline result row count. See fetch() for details\r\n\t\t//\t\ton this optimization.\r\n\r\n\t\tvar scope = request.scope || dojo.global;\r\n\r\n\t\tif(request.onBegin){\r\n\t\t\t// Check for the record count optimization\r\n\t\t\trequest.onBegin.call(scope, request._countResponse[0], request);\r\n\t\t}\r\n\t\t\r\n\t\tif(request.onItem || request.onComplete){\r\n\t\t\tvar response = request._dataResponse;\r\n\r\n\t\t\tif(!response.length){\r\n\t\t\t\trequest.onError.call(scope,\r\n\t\t\t\t\t\t\t\t\tnew Error(\"dojox.data.SnapLogicStore: invalid response of length 0\"),\r\n\t\t\t\t\t\t\t\t\trequest);\r\n\t\t\t\treturn;\r\n\t\t\t}else if(request.query != 'record count'){\r\n\t\t\t\t//If this was not a record count request, the first element returned will contain\r\n\t\t\t\t//the field names.\r\n\t\t\t\tvar field_names = response.shift();\r\n\t\t\t\t\r\n\t\t\t\tvar items = [];\r\n\t\t\t\tfor(var i = 0; i < response.length; ++i){\r\n\t\t\t\t\tif(request._aborted){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titems.push({attributes: field_names, values: response[i], _store: this});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(request.sort && !request._aborted){\r\n\t\t\t\t\titems.sort(dojo.data.util.sorter.createSortFunction(request.sort, self));\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t//This is a record count request, so manually set the field names.\r\n\t\t\t\titems = [({attributes: ['count'], values: response, _store: this})];\r\n\t\t\t}\r\n\r\n\t\t\tif(request.onItem){\r\n\t\t\t\tfor(var i = 0; i < items.length; ++i){\r\n\t\t\t\t\tif(request._aborted){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\trequest.onItem.call(scope, items[i], request);\r\n\t\t\t\t}\r\n\t\t\t\titems = null;\r\n\t\t\t}\r\n\r\n\t\t\tif(request.onComplete && !request._aborted){\r\n\t\t\t\trequest.onComplete.call(scope, items, request);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\t\r\n\t_partHandler: function(/*Object */ request, /* String */ part, /* Object*/ response){\r\n\t\t// summary:\r\n\t\t//\t\tHandle the individual replies for both data and length requests.\r\n\t\t// request:\r\n\t\t//\t\tThe request/handle object used with the original fetch() call.\r\n\t\t// part:\r\n\t\t//\t\tA value indicating which request this handler call is for (this.Parts).\r\n\t\t// response:\r\n\t\t//\t\tResponse received from the underlying IO transport.\r\n\r\n\t\tif(response instanceof Error){\r\n\t\t\tif(part == this.Parts.DATA){\r\n\t\t\t\trequest._dataHandle = null;\r\n\t\t\t}else{\r\n\t\t\t\trequest._countHandle = null;\r\n\t\t\t}\r\n\t\t\trequest._aborted = true;\r\n\t\t\tif(request.onError){\r\n\t\t\t\trequest.onError.call(request.scope, response, request);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(request._aborted){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(part == this.Parts.DATA){\r\n\t\t\t\trequest._dataResponse = response;\r\n\t\t\t}else{\r\n\t\t\t\trequest._countResponse = response;\r\n\t\t\t}\r\n\t\t\tif((!request._dataHandle || request._dataResponse !== null) &&\r\n\t\t\t\t(!request._countHandle || request._countResponse !== null)){\r\n\t\t\t\tthis._fetchHandler(request);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tfetch: function(/*Object*/ request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t\t// request:\r\n\t\t//\t\tSee dojo/data/api/Read.close() for generic interface.\r\n\t\t//\r\n\t\t//\t\tIn addition to the standard Read API fetch support, this store supports an optimization for\r\n\t\t//\t\tfor retrieving the total count of records in the Pipeline without retrieving the data. To\r\n\t\t//\t\tuse this optimization, simply provide an onBegin handler without an onItem or onComplete handler.\r\n\r\n\t\trequest._countResponse = null;\r\n\t\trequest._dataResponse = null;\r\n\t\trequest._aborted = false;\r\n\t\trequest.abort = function(){\r\n\t\t\tif(!request._aborted){\r\n\t\t\t\trequest._aborted = true;\r\n\t\t\t\tif(request._dataHandle && request._dataHandle.cancel){\r\n\t\t\t\t\trequest._dataHandle.cancel();\r\n\t\t\t\t}\r\n\t\t\t\tif(request._countHandle && request._countHandle.cancel){\r\n\t\t\t\t\trequest._countHandle.cancel();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Only make the call for data if onItem or onComplete is used. Otherwise, onBegin will only\r\n\t\t// require the total row count.\r\n\t\tif(request.onItem || request.onComplete){\r\n\t\t\tvar content = this._parameters || {};\r\n\t\t\tif(request.start){\r\n\t\t\t\tif(request.start < 0){\r\n\t\t\t\t\tthrow new Error(\"dojox.data.SnapLogicStore: request start value must be 0 or greater\");\r\n\t\t\t\t}\r\n\t\t\t\tcontent['sn.start'] = request.start + 1;\r\n\t\t\t}\r\n\t\t\tif(request.count){\r\n\t\t\t\tif(request.count < 0){\r\n\t\t\t\t\tthrow new Error(\"dojox.data.SnapLogicStore: request count value 0 or greater\");\r\n\t\t\t\t}\r\n\t\t\t\tcontent['sn.limit'] = request.count;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcontent['sn.content_type'] = 'application/javascript';\r\n\r\n\t\t\tvar store = this;\r\n\t\t\tvar handler = function(response, ioArgs){\r\n\t\t\t\tif(response instanceof Error){\r\n\t\t\t\t\tstore._fetchHandler(response, request);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar getArgs = {\r\n\t\t\t\turl: this.url,\r\n\t\t\t\tcontent: content,\r\n\t\t\t\t// preventCache: true,\r\n\t\t\t\ttimeout: 60000,\t\t\t\t\t\t\t\t//Starting a pipeline can take a long time.\r\n\t\t\t\tcallbackParamName: \"sn.stream_header\",\r\n\t\t\t\thandle: dojo.hitch(this, \"_partHandler\", request, this.Parts.DATA)\r\n\t\t\t};\r\n\r\n\t\t\trequest._dataHandle = dojo.io.script.get(getArgs);\r\n\t\t}\r\n\t\t\r\n\t\tif(request.onBegin){\r\n\t\t\tvar content = {};\r\n\t\t\tcontent['sn.count'] = 'records';\r\n\t\t\tcontent['sn.content_type'] = 'application/javascript';\r\n\r\n\t\t\tvar getArgs = {\r\n\t\t\t\turl: this.url,\r\n\t\t\t\tcontent: content,\r\n\t\t\t\ttimeout: 60000,\r\n\t\t\t\tcallbackParamName: \"sn.stream_header\",\r\n\t\t\t\thandle: dojo.hitch(this, \"_partHandler\", request, this.Parts.COUNT)\r\n\t\t\t};\r\n\r\n\t\t\trequest._countHandle = dojo.io.script.get(getArgs);\r\n\t\t}\r\n\t\t\t\r\n\t\treturn request;\t\t\t// Object\r\n\t}\r\n});\r\n\r\n});\r\n\r\n"]}