{"version":3,"sources":["data/restListener.js"],"names":["dojo","provide","dojox","data","restListener","message","channel","jr","rpc","JsonRest","service","getServiceAndId","result","json","ref","resolveJson","defaultId","event","index","Rest","_index","idPrefix","servicePath","replace","idAttribute","getIdAttribute","schemas","loader","_loader","assignAbsoluteIds","target","onEvent","toLowerCase","store","_store","onNew","onDelete"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,2BAEbC,MAAMC,KAAKC,aAAe,SAASC,GAQlC,IAAIC,EAAUD,EAAQC,QAClBC,EAAKL,MAAMM,IAAIC,SACfC,EAAUH,EAAGI,gBAAgBL,GAASI,QACtCE,EAASV,MAAMW,KAAKC,IAAIC,YAAYV,EAAQO,QAC5CI,UAA4B,OAAjBX,EAAQY,OAAkBX,EACrCY,MAAOhB,MAAMM,IAAIW,KAAKC,OACtBC,SAAUX,EAAQY,YAAYC,QAAQ,UAAU,IAChDC,YAAajB,EAAGkB,eAAef,GAC/BgB,QAASnB,EAAGmB,QACZC,OAAQpB,EAAGqB,QACXC,mBAAmB,IAEnBC,EAAS5B,MAAMM,IAAIW,KAAKC,QAAUlB,MAAMM,IAAIW,KAAKC,OAAOd,GACxDyB,EAAU,KAAO1B,EAAQY,MAAMe,cAC/BC,EAAQvB,GAAWA,EAAQwB,OAC/B,GAAGJ,GACCA,EAAOC,GACTD,EAAOC,GAASnB,QAKlB,GAAGqB,EACF,OAAOF,GACN,IAAK,SACJE,EAAME,MAAMvB,GACZ,MACD,IAAK,WACJqB,EAAMG,SAASN","file":"../../data/restListener.js","sourcesContent":["dojo.provide(\"dojox.data.restListener\");\r\n\r\ndojox.data.restListener = function(message){\r\n\t// summary:\r\n\t//\t\tthis function can be used to receive REST notifications, from Comet or from another frame\r\n\t// example:\r\n\t//\t|\tdojo.connect(window,\"onMessage\",null,function(event) {\r\n\t//\t|\t\tvar data = dojo.fromJson(event.data);\r\n\t//\t|\t\tdojox.restListener(data);\r\n\t//\t|\t});\r\n\tvar channel = message.channel;\r\n\tvar jr = dojox.rpc.JsonRest;\r\n\tvar service = jr.getServiceAndId(channel).service;\r\n\tvar result = dojox.json.ref.resolveJson(message.result, {\r\n\t\t\t\t\tdefaultId: message.event == 'put' && channel,\r\n\t\t\t\t\tindex: dojox.rpc.Rest._index,\r\n\t\t\t\t\tidPrefix: service.servicePath.replace(/[^\\/]*$/,''),\r\n\t\t\t\t\tidAttribute: jr.getIdAttribute(service),\r\n\t\t\t\t\tschemas: jr.schemas,\r\n\t\t\t\t\tloader: jr._loader,\r\n\t\t\t\t\tassignAbsoluteIds: true\r\n\t\t\t\t});\r\n\tvar target = dojox.rpc.Rest._index && dojox.rpc.Rest._index[channel];\r\n\tvar onEvent = 'on' + message.event.toLowerCase();\r\n\tvar store = service && service._store;\r\n\tif(target){\r\n\t\tif(target[onEvent]){\r\n\t\t\ttarget[onEvent](result); // call the REST handler if available\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t// this is how we respond to different events\r\n\tif(store){\r\n\t\tswitch(onEvent){\r\n\t\t\tcase 'onpost':\r\n\t\t\t\tstore.onNew(result); // call onNew for the store;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ondelete':\r\n\t\t\t\tstore.onDelete(target);\r\n\t\t\t\tbreak;\r\n\t\t\t\t\t// put is handled by JsonReferencing\r\n\t\t\t\t\t//TODO: we may want to bring the JsonReferencing capability into here...\r\n\t\t\t\t\t// that is really tricky though because JsonReferencing handles sub object,\r\n\t\t\t\t\t// it would be expensive to do full object graph searches from here\r\n\t\t}\r\n\t}\r\n};\r\n"]}