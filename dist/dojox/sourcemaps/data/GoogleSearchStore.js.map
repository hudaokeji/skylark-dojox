{"version":3,"sources":["data/GoogleSearchStore.js"],"names":["define","kernel","lang","declare","domQuery","domConstruct","scriptIO","experimental","SearchStore","constructor","args","label","this","key","_key","_lang","urlPreventCache","_id","dojox","data","GoogleSearchStore","prototype","_requestCount","_googleUrl","_storeRef","_attributes","_aggregatedAttributes","estimatedResultCount","_type","_queryAttrs","text","_assertIsItem","item","isItem","Error","_assertIsAttribute","attribute","getFeatures","dojo.data.api.Read","getValue","defaultValue","values","getValues","length","getAttributes","hasAttribute","isItemLoaded","loadItem","keywordArgs","getLabel","getLabelAttributes","containsValue","value","i","val","isArray","undefined","close","request","_format","name","fetch","scope","global","query","onError","attr","onComplete","onItem","onBegin","start","count","firstRequest","callbackFn","content","_createContent","_this","getArgs","url","preventCache","items","successfulReq","finished","lastOnItem","numRequests","scriptIds","myHandler","splice","forEach","destroy","results","_getItems","cursor","_processItem","pages","firstStart","Number","est","total","Math","min","call","nextPage","page","doRequest","slice","callbacks","lastCallback","responseCode","errorMsg","sort","_getSort","push","e","declaredClass","req","context","deferred","get","ioArgs","id","addErrback","error","a","b","getObject","callback","v","rsz","hl","WebSearchStore","BlogSearchStore","LocalSearchStore","viewport","centerLatLong","searchSpan","VideoSearchStore","NewsSearchStore","BookSearchStore","Search","ImageSearch","BookSearch","NewsSearch","VideoSearch","LocalSearch","BlogSearch","WebSearch"],"mappings":"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","file":"../../data/GoogleSearchStore.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/query\",\r\n\t\t\"dojo/dom-construct\",\"dojo/io/script\"], \r\n  function(kernel, lang, declare, domQuery, domConstruct, scriptIO) {\r\n\r\nkernel.experimental(\"dojox.data.GoogleSearchStore\");\r\n\r\nvar SearchStore = declare(\"dojox.data.GoogleSearchStore\",null,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThis data store acts as a base class for Google searches,\r\n\t//\t\tand has a number of child data stores that implement different\r\n\t//\t\tsearches. This store defaults to searching the web, and is functionally\r\n\t//\t\tidentical to the dojox.data.GoogleWebSearchStore object.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- unescapedUrl - The URL for the item, with URL escaping. This is often more readable\r\n\t//\t\t- visibleUrl - The URL with no protocol specified.\r\n\t//\t\t- cacheUrl - The URL to the copy of the document cached by Google\r\n\t//\t\t- title - The page title in HTML format.\r\n\t//\t\t- titleNoFormatting - The page title in plain text\r\n\t//\t\t- content - A snippet of information about the page\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\tconstructor: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tInitializer for the GoogleSearchStore store.\r\n\t\t// description:\r\n\t\t//\t\tThe GoogleSearchStore is a Datastore interface to\r\n\t\t//\t\tthe Google search service. The constructor accepts the following arguments:\r\n\t\t//\r\n\t\t//\t\t- label - the label attribute to use. Defaults to titleNoFormatting\r\n\t\t//\t\t- key - The API key to use. This is optional\r\n\t\t//\t\t- lang - The language locale to use. Defaults to the browser locale\r\n\r\n\t\tif(args){\r\n\t\t\tif(args.label){\r\n\t\t\t\tthis.label = args.label;\r\n\t\t\t}\r\n\t\t\tif(args.key){\r\n\t\t\t\tthis._key = args.key;\r\n\t\t\t}\r\n\t\t\tif(args.lang){\r\n\t\t\t\tthis._lang = args.lang;\r\n\t\t\t}\r\n\t\t\tif(\"urlPreventCache\" in args){\r\n\t\t\t\tthis.urlPreventCache = args.urlPreventCache?true:false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._id = dojox.data.GoogleSearchStore.prototype._id++;\r\n\t},\r\n\r\n\t// _id: Integer\r\n\t//\t\tA unique identifier for this store.\r\n\t_id: 0,\r\n\r\n\t// _requestCount: Integer\r\n\t//\t\tA counter for the number of requests made. This is used to define\r\n\t//\t\tthe callback function that GoogleSearchStore will use.\r\n\t_requestCount: 0,\r\n\r\n\t// _googleUrl: String\r\n\t//\t\tThe URL to Googles search web service.\r\n\t_googleUrl: \"http://ajax.googleapis.com/ajax/services/search/\",\r\n\r\n\t// _storeRef: String\r\n\t//\t\tThe internal reference added to each item pointing at the store which owns it.\r\n\t_storeRef: \"_S\",\r\n\r\n\t// _attributes: Array\r\n\t//\t\tThe list of attributes that this store supports\r\n\t_attributes: [\t\"unescapedUrl\", \"url\", \"visibleUrl\", \"cacheUrl\", \"title\",\r\n\t\t\t\"titleNoFormatting\", \"content\", \"estimatedResultCount\"],\r\n\r\n\t// _aggregtedAttributes: Hash\r\n\t//\t\tMaps per-query aggregated attributes that this store supports to the result keys that they come from.\r\n\t_aggregatedAttributes: {\r\n\t\testimatedResultCount: \"cursor.estimatedResultCount\"\r\n\t},\r\n\r\n\t// label: String\r\n\t//\t\tThe default attribute which acts as a label for each item.\r\n\tlabel: \"titleNoFormatting\",\r\n\r\n\t// type: String\r\n\t//\t\tThe type of search. Valid values are \"web\", \"local\", \"video\", \"blogs\", \"news\", \"books\", \"images\".\r\n\t//\t\tThis should not be set directly. Instead use one of the child classes.\r\n\t_type: \"web\",\r\n\r\n\t// urlPreventCache: boolean\r\n\t//\t\tSets whether or not to pass preventCache to dojo.io.script.\r\n\turlPreventCache: true,\r\n\r\n\r\n\t// _queryAttrs: Hash\r\n\t//\t\tMaps query hash keys to Google query parameters.\r\n\t_queryAttrs: {\r\n\t\ttext: 'q'\r\n\t},\r\n\r\n\t_assertIsItem: function(/* item */ item){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed an item in the store.\r\n\t\t// item:\r\n\t\t//\t\tThe item to test for being contained by the store.\r\n\t\tif(!this.isItem(item)){\r\n\t\t\tthrow new Error(\"dojox.data.GoogleSearchStore: a function was passed an item argument that was not an item\");\r\n\t\t}\r\n\t},\r\n\r\n\t_assertIsAttribute: function(/* attribute-name-string */ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed a valid 'attribute' like type for the store.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute to test for being contained by the store.\r\n\t\tif(typeof attribute !== \"string\"){\r\n\t\t\tthrow new Error(\"dojox.data.GoogleSearchStore: a function was passed an attribute argument that was not an attribute name string\");\r\n\t\t}\r\n\t},\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t'dojo.data.api.Read': true\r\n\t\t};\r\n\t},\r\n\r\n\tgetValue: function(item, attribute, defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tvar values = this.getValues(item, attribute);\r\n\t\tif(values && values.length > 0){\r\n\t\t\treturn values[0];\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t},\r\n\r\n\tgetAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getAttributes()\r\n\t\treturn this._attributes;\r\n\t},\r\n\r\n\thasAttribute: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.hasAttributes()\r\n\t\tif(this.getValue(item,attribute)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tisItemLoaded: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItemLoaded()\r\n\t\treturn this.isItem(item);\r\n\t},\r\n\r\n\tloadItem: function(keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.loadItem()\r\n\t},\r\n\r\n\tgetLabel: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\t\treturn this.getValue(item,this.label);\r\n\t},\r\n\r\n\tgetLabelAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\t\treturn [this.label];\r\n\t},\r\n\r\n\tcontainsValue: function(item, attribute, value){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.containsValue()\r\n\t\tvar values = this.getValues(item,attribute);\r\n\t\tfor(var i = 0; i < values.length; i++){\r\n\t\t\tif(values[i] === value){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tgetValues: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tvar val = item[attribute];\r\n\t\tif(lang.isArray(val)) {\r\n\t\t\treturn val;\r\n\t\t}else if(val !== undefined){\r\n\t\t\treturn [val];\r\n\t\t}else{\r\n\t\t\treturn [];\r\n\t\t}\r\n\t},\r\n\r\n\tisItem: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItem()\r\n\t\tif(item && item[this._storeRef] === this){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tclose: function(request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t},\r\n\r\n\t_format: function(item, name){\r\n\t\treturn item;//base implementation does not format any items\r\n\t},\r\n\r\n\tfetch: function(request){\r\n\t\t// summary:\r\n\t\t//\t\tFetch Google search items that match to a query\r\n\t\t// request:\r\n\t\t//\t\tA request object\r\n\t\t// fetchHandler:\r\n\t\t//\t\tA function to call for fetched items\r\n\t\t// errorHandler:\r\n\t\t//\t\tA function to call on error\r\n\t\trequest = request || {};\r\n\r\n\t\tvar scope = request.scope || kernel.global;\r\n\r\n\t\tif(!request.query){\r\n\t\t\tif(request.onError){\r\n\t\t\t\trequest.onError.call(scope, new Error(this.declaredClass +\r\n\t\t\t\t\t\": A query must be specified.\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//Make a copy of the request object, in case it is\r\n\t\t//modified outside the store in the middle of a request\r\n\t\tvar query = {};\r\n\t\tfor(var attr in this._queryAttrs) {\r\n\t\t\tquery[attr] = request.query[attr];\r\n\t\t}\r\n\t\trequest = {\r\n\t\t\tquery: query,\r\n\t\t\tonComplete: request.onComplete,\r\n\t\t\tonError: request.onError,\r\n\t\t\tonItem: request.onItem,\r\n\t\t\tonBegin: request.onBegin,\r\n\t\t\tstart: request.start,\r\n\t\t\tcount: request.count\r\n\t\t};\r\n\r\n\t\t//Google's web api will only return a max of 8 results per page.\r\n\t\tvar pageSize = 8;\r\n\r\n\t\t//Generate a unique function to be called back\r\n\t\tvar callbackFn = \"GoogleSearchStoreCallback_\" + this._id + \"_\" + (++this._requestCount);\r\n\r\n\t\t//Build up the content to send the request for.\r\n\t\t//rsz is the result size, \"large\" gives 8 results each time\r\n\t\tvar content = this._createContent(query, callbackFn, request);\r\n\r\n\t\tvar firstRequest;\r\n\r\n\t\tif(typeof(request.start) === \"undefined\" || request.start === null){\r\n\t\t\trequest.start = 0;\r\n\t\t}\r\n\r\n\t\tif(!request.count){\r\n\t\t\trequest.count = pageSize;\r\n\t\t}\r\n\t\tfirstRequest = {start: request.start - request.start % pageSize};\r\n\r\n\t\tvar _this = this;\r\n\t\tvar searchUrl = this._googleUrl + this._type;\r\n\r\n\t\tvar getArgs = {\r\n\t\t\turl: searchUrl,\r\n\t\t\tpreventCache: this.urlPreventCache,\r\n\t\t\tcontent: content\r\n\t\t};\r\n\r\n\t\tvar items = [];\r\n\t\tvar successfulReq = 0;\r\n\t\tvar finished = false;\r\n\t\tvar lastOnItem = request.start -1;\r\n\t\tvar numRequests = 0;\r\n\t\tvar scriptIds = [];\r\n\r\n\t\t// Performs the remote request.\r\n\t\tfunction doRequest(req){\r\n\t\t\t//Record how many requests have been made.\r\n\t\t\tnumRequests ++;\r\n\t\t\tgetArgs.content.context = getArgs.content.start = req.start;\r\n\r\n\t\t\tvar deferred = scriptIO.get(getArgs);\r\n\t\t\tscriptIds.push(deferred.ioArgs.id);\r\n\r\n\t\t\t//We only set up the errback, because the callback isn't ever really used because we have\r\n\t\t\t//to link to the jsonp callback function....\r\n\t\t\tdeferred.addErrback(function(error){\r\n\t\t\t\tif(request.onError){\r\n\t\t\t\t\trequest.onError.call(scope, error, request);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Function to handle returned data.\r\n\t\tvar myHandler = function(start, data){\r\n\t\t\tif (scriptIds.length > 0) {\r\n\t\t\t\t// Delete the script node that was created.\r\n\t\t\t\tdomQuery(\"#\" + scriptIds.splice(0,1)).forEach(domConstruct.destroy);\r\n\t\t\t}\r\n\t\t\tif(finished){return;}\r\n\r\n\t\t\tvar results = _this._getItems(data);\r\n\t\t\tvar cursor = data ? data['cursor']: null;\r\n\r\n\t\t\tif(results){\r\n\t\t\t\t//Process the results, adding the store reference to them\r\n\t\t\t\tfor(var i = 0; i < results.length && i + start < request.count + request.start; i++) {\r\n\t\t\t\t\t_this._processItem(results[i], data);\r\n\t\t\t\t\titems[i + start] = results[i];\r\n\t\t\t\t}\r\n\t\t\t\tsuccessfulReq ++;\r\n\t\t\t\tif(successfulReq == 1){\r\n\t\t\t\t\t// After the first request, we know how many results exist.\r\n\t\t\t\t\t// So perform any follow up requests to retrieve more data.\r\n\t\t\t\t\tvar pages = cursor ? cursor.pages : null;\r\n\t\t\t\t\tvar firstStart = pages ? Number(pages[pages.length - 1].start) : 0;\r\n\r\n\t\t\t\t\t//Call the onBegin method if it exists\r\n\t\t\t\t\tif (request.onBegin){\r\n\t\t\t\t\t\tvar est = cursor ? cursor.estimatedResultCount : results.length;\r\n\t\t\t\t\t\tvar total =  est ? Math.min(est, firstStart + results.length) : firstStart + results.length;\r\n\t\t\t\t\t\trequest.onBegin.call(scope, total, request);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Request the next pages.\r\n\t\t\t\t\tvar nextPage = (request.start - request.start % pageSize) + pageSize;\r\n\t\t\t\t\tvar page = 1;\r\n\t\t\t\t\twhile(pages){\r\n\t\t\t\t\t\tif(!pages[page] || Number(pages[page].start) >= request.start + request.count){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(Number(pages[page].start) >= nextPage) {\r\n\t\t\t\t\t\t\tdoRequest({start: pages[page].start});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpage++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Call the onItem function on all retrieved items.\r\n\t\t\t\tif(request.onItem && items[lastOnItem + 1]){\r\n\t\t\t\t\tdo{\r\n\t\t\t\t\t\tlastOnItem++;\r\n\t\t\t\t\t\trequest.onItem.call(scope, items[lastOnItem], request);\r\n\t\t\t\t\t}while(items[lastOnItem + 1] && lastOnItem < request.start + request.count);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If this is the last request, call final fetch handler.\r\n\t\t\t\tif(successfulReq == numRequests){\r\n\t\t\t\t\t//Process the items...\r\n\t\t\t\t\tfinished = true;\r\n\t\t\t\t\t//Clean up the function, it should never be called again\r\n\t\t\t\t\tkernel.global[callbackFn] = null;\r\n\t\t\t\t\tif(request.onItem){\r\n\t\t\t\t\t\trequest.onComplete.call(scope, null, request);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\titems = items.slice(request.start, request.start + request.count);\r\n\t\t\t\t\t\trequest.onComplete.call(scope, items, request);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar callbacks = [];\r\n\t\tvar lastCallback = firstRequest.start - 1;\r\n\r\n\t\t// Attach a callback function to the global namespace, where Google can call it.\r\n\t\tkernel.global[callbackFn] = function(start, data, responseCode, errorMsg){\r\n\t\t\ttry {\r\n\t\t\t\tif(responseCode != 200){\r\n\t\t\t\t\tif(request.onError){\r\n\t\t\t\t\t\trequest.onError.call(scope, new Error(\"Response from Google was: \" + responseCode), request);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tkernel.global[callbackFn] = function(){};//an error occurred, do not return anything else.\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif(start == lastCallback + 1){\r\n\t\t\t\t\tmyHandler(Number(start), data);\r\n\t\t\t\t\tlastCallback += pageSize;\r\n\t\r\n\t\t\t\t\t//make sure that the callbacks happen in the correct sequence\r\n\t\t\t\t\tif(callbacks.length > 0){\r\n\t\t\t\t\t\tcallbacks.sort(_this._getSort());\r\n\t\t\t\t\t\t//In case the requsts do not come back in order, sort the returned results.\r\n\t\t\t\t\t\twhile(callbacks.length > 0 && callbacks[0].start == lastCallback + 1){\r\n\t\t\t\t\t\t\tmyHandler(Number(callbacks[0].start), callbacks[0].data);\r\n\t\t\t\t\t\t\tcallbacks.splice(0,1);\r\n\t\t\t\t\t\t\tlastCallback += pageSize;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcallbacks.push({start:start, data: data});\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\trequest.onError.call(scope, e, request);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Perform the first request. When this has finished\r\n\t\t// we will have a list of pages, which can then be\r\n\t\t// gone through\r\n\t\tdoRequest(firstRequest);\r\n\t},\r\n\t\r\n\t_getSort: function() {\r\n\t\treturn function(a,b){\r\n\t\t\tif(a.start < b.start){return -1;}\r\n\t\t\tif(b.start < a.start){return 1;}\r\n\t\t\treturn 0;\r\n\t\t};\r\n\t},\r\n\r\n\t_processItem: function(item, data) {\r\n\t\titem[this._storeRef] = this;\r\n\t\t// Copy aggregated attributes from query results to the item.\r\n\t\tfor(var attribute in this._aggregatedAttributes) {\r\n\t\t\titem[attribute] = lang.getObject(this._aggregatedAttributes[attribute], false, data);\r\n\t\t}\r\n\t},\r\n\r\n\t_getItems: function(data){\r\n\t\treturn data['results'] || data;\r\n\t},\r\n\r\n\t_createContent: function(query, callback, request){\r\n\t\tvar content = {\r\n\t\t\tv: \"1.0\",\r\n\t\t\trsz: \"large\",\r\n\t\t\tcallback: callback,\r\n\t\t\tkey: this._key,\r\n\t\t\thl: this._lang\r\n\t\t};\r\n\t\tfor(var attr in this._queryAttrs) {\r\n\t\t\tcontent[this._queryAttrs[attr]] = query[attr];\r\n\t\t}\r\n\t\treturn content;\r\n\t}\r\n});\r\n\r\nvar WebSearchStore = declare(\"dojox.data.GoogleWebSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The page title in HTML format.\r\n\t//\t\t- titleNoFormatting - The page title in plain text\r\n\t//\t\t- content - A snippet of information about the page\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- unescapedUrl - The URL for the item, with URL escaping. This is often more readable\r\n\t//\t\t- visibleUrl - The URL with no protocol specified.\r\n\t//\t\t- cacheUrl - The URL to the copy of the document cached by Google\r\n\t//\t\t- estimatedResultCount - (aggregated per-query) estimated number of results\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n});\r\n\r\nvar BlogSearchStore = declare(\"dojox.data.GoogleBlogSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The blog post title in HTML format.\r\n\t//\t\t- titleNoFormatting - The  blog post title in plain text\r\n\t//\t\t- content - A snippet of information about the blog post\r\n\t//\t\t- blogUrl - The URL for the blog\r\n\t//\t\t- postUrl - The URL for the a single blog post\r\n\t//\t\t- visibleUrl - The URL with no protocol specified.\r\n\t//\t\t- cacheUrl - The URL to the copy of the document cached by Google\r\n\t//\t\t- author - The author of the blog post\r\n\t//\t\t- publishedDate - The published date, in RFC-822 format\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\t_type: \"blogs\",\r\n\t_attributes: [\"blogUrl\", \"postUrl\", \"title\", \"titleNoFormatting\", \"content\",\r\n\t\t\t\"author\", \"publishedDate\"],\r\n\t_aggregatedAttributes: { }\r\n});\r\n\r\n\r\nvar LocalSearchStore = declare(\"dojox.data.GoogleLocalSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The blog post title in HTML format.\r\n\t//\t\t- titleNoFormatting - The  blog post title in plain text\r\n\t//\t\t- content - A snippet of information about the blog post\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- lat - The latitude.\r\n\t//\t\t- lng - The longtitude.\r\n\t//\t\t- streetAddress - The street address\r\n\t//\t\t- city - The city\r\n\t//\t\t- region - The region\r\n\t//\t\t- country - The country\r\n\t//\t\t- phoneNumbers - Phone numbers associated with this address. Can be one or more.\r\n\t//\t\t- ddUrl - A URL that can be used to provide driving directions from the center of the search results to this search results\r\n\t//\t\t- ddUrlToHere - A URL that can be used to provide driving directions from this search result to a user specified location\r\n\t//\t\t- staticMapUrl - The published date, in RFC-822 format\r\n\t//\t\t- viewport - Recommended viewport for the query results (same for all results in a query)\r\n\t//\t\t\t- center - contains lat, lng properties\r\n\t//\t\t\t- span - lat, lng properties for the viewport span\r\n\t//\t\t\t- ne, sw - lat, lng properties for the viewport corners\r\n\t//\r\n\t//\t\tThe query accepts the following parameters:\r\n\t//\r\n\t//\t\t- text - The string to search for\r\n\t//\t\t- centerLatLong - Comma-separated lat & long for the center of the search (e.g. \"48.8565,2.3509\")\r\n\t//\t\t- searchSpan - Comma-separated lat & long degrees indicating the size of the desired search area (e.g. \"0.065165,0.194149\")\r\n\r\n\t_type: \"local\",\r\n\t_attributes: [\"title\", \"titleNoFormatting\", \"url\", \"lat\", \"lng\", \"streetAddress\",\r\n\t\t\t\"city\", \"region\", \"country\", \"phoneNumbers\", \"ddUrl\", \"ddUrlToHere\",\r\n\t\t\t\"ddUrlFromHere\", \"staticMapUrl\", \"viewport\"],\r\n\t_aggregatedAttributes: {\r\n\t\tviewport: \"viewport\"\r\n\t},\r\n\t_queryAttrs: {\r\n\t\ttext: 'q',\r\n\t\tcenterLatLong: 'sll',\r\n\t\tsearchSpan: 'sspn'\r\n\t}\r\n});\r\n\r\nvar VideoSearchStore = declare(\"dojox.data.GoogleVideoSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The blog post title in HTML format.\r\n\t//\t\t- titleNoFormatting - The  blog post title in plain text\r\n\t//\t\t- content - A snippet of information about the blog post\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- published - The published date, in RFC-822 format.\r\n\t//\t\t- publisher - The name of the publisher.\r\n\t//\t\t- duration - The approximate duration, in seconds, of the video.\r\n\t//\t\t- tbWidth - The width in pixels of the video.\r\n\t//\t\t- tbHeight - The height in pixels of the video\r\n\t//\t\t- tbUrl - The URL to a thumbnail representation of the video.\r\n\t//\t\t- playUrl - If present, supplies the url of the flash version of the video that can be played inline on your page. To play this video simply create and <embed> element on your page using this value as the src attribute and using application/x-shockwave-flash as the type attribute. If you want the video to play right away, make sure to append &autoPlay=true to the url..\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\t_type: \"video\",\r\n\t_attributes: [\"title\", \"titleNoFormatting\", \"content\", \"url\", \"published\", \"publisher\",\r\n\t\t\t\"duration\", \"tbWidth\", \"tbHeight\", \"tbUrl\", \"playUrl\"],\r\n\t_aggregatedAttributes: { }\r\n});\r\n\r\nvar NewsSearchStore = declare(\"dojox.data.GoogleNewsSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The news story title in HTML format.\r\n\t//\t\t- titleNoFormatting - The news story title in plain text\r\n\t//\t\t- content - A snippet of information about the news story\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- unescapedUrl - The URL for the item, with URL escaping. This is often more readable\r\n\t//\t\t- publisher - The name of the publisher\r\n\t//\t\t- clusterUrl - A URL pointing to a page listing related storied.\r\n\t//\t\t- location - The location of the news story.\r\n\t//\t\t- publishedDate - The date of publication, in RFC-822 format.\r\n\t//\t\t- relatedStories - An optional array of objects specifying related stories.\r\n\t//\t\t\tEach object has the following subset of properties:\r\n\t//\t\t\t\"title\", \"titleNoFormatting\", \"url\", \"unescapedUrl\", \"publisher\", \"location\", \"publishedDate\".\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\t_type: \"news\",\r\n\t_attributes: [\"title\", \"titleNoFormatting\", \"content\", \"url\", \"unescapedUrl\", \"publisher\",\r\n\t\t\t\"clusterUrl\", \"location\", \"publishedDate\", \"relatedStories\" ],\r\n\t_aggregatedAttributes: { }\r\n});\r\n\r\nvar BookSearchStore = declare(\"dojox.data.GoogleBookSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The book title in HTML format.\r\n\t//\t\t- titleNoFormatting - The book title in plain text\r\n\t//\t\t- authors - An array of authors\r\n\t//\t\t- url - The URL for the item\r\n\t//\t\t- unescapedUrl - The URL for the item, with URL escaping. This is often more readable\r\n\t//\t\t- bookId - An identifier for the book, usually an ISBN.\r\n\t//\t\t- pageCount - The number of pages in the book.\r\n\t//\t\t- publishedYear - The year of publication.\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\t_type: \"books\",\r\n\t_attributes: [\"title\", \"titleNoFormatting\", \"authors\", \"url\", \"unescapedUrl\", \"bookId\",\r\n\t\t\t\"pageCount\", \"publishedYear\"],\r\n\t_aggregatedAttributes: { }\r\n});\r\n\r\nvar ImageSearchStore = declare(\"dojox.data.GoogleImageSearchStore\", SearchStore,{\r\n\t// summary:\r\n\t//\t\tA data store for retrieving search results from Google.\r\n\t//\t\tThe following attributes are supported on each item:\r\n\t//\r\n\t//\t\t- title - The image title in HTML format.\r\n\t//\t\t- titleNoFormatting - The image title in plain text\r\n\t//\t\t- url - The URL for the image\r\n\t//\t\t- unescapedUrl - The URL for the image, with URL escaping. This is often more readable\r\n\t//\t\t- tbUrl - The URL for the image thumbnail\r\n\t//\t\t- visibleUrl - A shortened version of the URL associated with the result, stripped of a protocol and path\r\n\t//\t\t- originalContextUrl - The URL of the page containing the image.\r\n\t//\t\t- width - The width of the image in pixels.\r\n\t//\t\t- height - The height of the image in pixels.\r\n\t//\t\t- tbWidth - The width of the image thumbnail in pixels.\r\n\t//\t\t- tbHeight - The height of the image thumbnail in pixels.\r\n\t//\t\t- content - A snippet of information about the image, in HTML format\r\n\t//\t\t- contentNoFormatting - A snippet of information about the image, in plain text\r\n\t//\r\n\t//\t\tThe query accepts one parameter: text - The string to search for\r\n\t_type: \"images\",\r\n\t_attributes: [\"title\", \"titleNoFormatting\", \"visibleUrl\", \"url\", \"unescapedUrl\",\r\n\t\t\t\"originalContextUrl\", \"width\", \"height\", \"tbWidth\", \"tbHeight\",\r\n\t\t\t\"tbUrl\", \"content\", \"contentNoFormatting\"],\r\n\t_aggregatedAttributes: { }\r\n});\r\n\r\nreturn {\r\n\tSearch: SearchStore,\r\n\tImageSearch: ImageSearchStore,\r\n\tBookSearch: BookSearchStore,\r\n\tNewsSearch: NewsSearchStore,\r\n\tVideoSearch: VideoSearchStore,\r\n\tLocalSearch: LocalSearchStore,\r\n\tBlogSearch: BlogSearchStore,\r\n\tWebSearch: WebSearchStore\r\n\t}\r\n});\r\n"]}