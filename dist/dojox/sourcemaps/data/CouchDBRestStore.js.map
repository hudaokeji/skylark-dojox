{"version":3,"sources":["data/CouchDBRestStore.js"],"names":["define","dojo","dojox","CouchDBRestStore","declare","data","JsonRestStore","save","kwArgs","actions","this","inherited","arguments","prefix","service","servicePath","i","length","item","dfd","deferred","addCallback","result","__id","id","_rev","rev","content","fetch","args","query","start","count","_processResults","results","rows","realItem","value","_id","_loadObject","rpc","JsonRest","_loader","totalCount","total_rows","items","getStores","couchServerUrl","stores","xhrGet","url","handleAs","sync","addBoth","dbs","target","idAttribute"],"mappings":";;;;;;;AAAAA,QAAQ,OAAQ,QAAS,4BAA6B,SAASC,EAAMC,GAErE,IAAIC,EAAmBF,EAAKG,QAAQ,8BACnCF,EAAMG,KAAKC,eAQVC,KAAM,SAASC,GAGd,IAFA,IAAIC,EAAUC,KAAKC,UAAUC,WACzBC,EAASH,KAAKI,QAAQC,YAClBC,EAAI,EAAGA,EAAIP,EAAQQ,OAAQD,KAElC,SAAUE,EAAKC,GAQOV,EAAQO,GAAGI,SAP5BC,YAAY,SAASC,GAKxB,OAJGA,IACFJ,EAAKK,KAAOV,EAASS,EAAOE,GAC5BN,EAAKO,KAAOH,EAAOI,KAEbJ,IANT,CAQGb,EAAQO,GAAGW,UAGhBC,MAAO,SAASC,GAYf,OATAA,EAAKC,MAAQD,EAAKC,OAAS,aACxBD,EAAKE,QACPF,EAAKC,OAASD,EAAKC,MAASD,EAAKC,MAAQ,IAAO,IAAM,QAAUD,EAAKE,aAC9DF,EAAKE,OAEVF,EAAKG,QACPH,EAAKC,OAASD,EAAKC,MAASD,EAAKC,MAAQ,IAAO,IAAM,SAAWD,EAAKG,aAC/DH,EAAKG,OAENtB,KAAKC,UAAUC,YAEvBqB,gBAAiB,SAASC,GACzB,IAAIC,EAAOD,EAAQC,KACnB,GAAGA,EAAK,CAGP,IAFA,IAAItB,EAASH,KAAKI,QAAQC,YAElBC,EAAI,EAAGA,EAAImB,EAAKlB,OAAOD,IAAI,CAClC,IAAIoB,EAAWD,EAAKnB,GAAGqB,MACvBD,EAASb,KAAMV,EAASsB,EAAKnB,GAAGQ,GAChCY,EAASE,IAAKH,EAAKnB,GAAGQ,GACtBY,EAASG,YAAarC,EAAMsC,IAAIC,SAASC,QACzCP,EAAKnB,GAAKoB,EAEX,OAAQO,WAAWT,EAAQU,WAAYC,MAAMX,EAAQC,MAErD,OAAQU,MAAMX,MAwBlB,OAhBA/B,EAAiB2C,UAAY,SAASC,GACrC,IAKIC,KAOJ,OAZU/C,EAAKgD,QACdC,IAAKH,EAAe,WACpBI,SAAU,OACVC,MAAM,IAGHC,QAAQ,SAASC,GACpB,IAAI,IAAItC,EAAI,EAAGA,EAAIsC,EAAIrC,OAAQD,IAC9BgC,EAAOM,EAAItC,IAAM,IAAId,EAAMG,KAAKF,kBAAkBoD,OAAOR,EAAiBO,EAAItC,GAAGwC,YAAY,QAE9F,OAAOR,IAEDA,GAGD7C","file":"../../data/CouchDBRestStore.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojox/data/JsonRestStore\"], function(dojo, dojox) {\r\n\r\nvar CouchDBRestStore = dojo.declare(\"dojox.data.CouchDBRestStore\",\r\n\tdojox.data.JsonRestStore,\r\n\t{\r\n\t// summary:\r\n\t//\t\tA CouchDBRestStore is an extension of JsonRestStore to handle CouchDB's idiosyncrasies, special features,\r\n\t//\t\tand deviations from standard HTTP Rest.\r\n\t//\t\tNOTE: CouchDB is not designed to be run on a public facing network. There is no access control\r\n\t//\t \ton database documents, and you should NOT rely on client side control to implement security.\r\n\r\n\t\tsave: function(kwArgs){\r\n\t\t\tvar actions = this.inherited(arguments); // do the default save and then update for version numbers\r\n\t\t\tvar prefix = this.service.servicePath;\r\n\t\t\tfor(var i = 0; i < actions.length; i++){\r\n\t\t\t\t// need to update the item's version number after it has been committed\r\n\t\t\t\t(function(item,dfd){\r\n\t\t\t\t\tdfd.addCallback(function(result){\r\n\t\t\t\t\t\tif(result){\r\n\t\t\t\t\t\t\titem.__id = prefix + result.id; // update the object with the results of the post\r\n\t\t\t\t\t\t\titem._rev = result.rev;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t});\r\n\t\t\t\t})(actions[i].content,actions[i].deferred);\r\n\t\t\t}\r\n\t\t},\r\n\t\tfetch: function(args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis only differs from JsonRestStore in that it, will put the query string the query part of the URL and it handles start and count\r\n\t\t\targs.query = args.query || '_all_docs?';\r\n\t\t\tif(args.start){\r\n\t\t\t\targs.query = (args.query ? (args.query + '&') : '') + 'skip=' + args.start;\r\n\t\t\t\tdelete args.start;\r\n\t\t\t}\r\n\t\t\tif(args.count){\r\n\t\t\t\targs.query = (args.query ? (args.query + '&') : '') + 'limit=' + args.count;\r\n\t\t\t\tdelete args.count;\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\t\t_processResults: function(results){\r\n\t\t\tvar rows = results.rows;\r\n\t\t\tif(rows){\r\n\t\t\t\tvar prefix = this.service.servicePath;\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tfor(var i = 0; i < rows.length;i++){\r\n\t\t\t\t\tvar realItem = rows[i].value;\r\n\t\t\t\t\trealItem.__id= prefix + rows[i].id;\r\n\t\t\t\t\trealItem._id= rows[i].id;\r\n\t\t\t\t\trealItem._loadObject= dojox.rpc.JsonRest._loader;\r\n\t\t\t\t\trows[i] = realItem;\r\n\t\t\t\t}\r\n\t\t\t\treturn {totalCount:results.total_rows, items:results.rows};\r\n\t\t\t}else{\r\n\t\t\t\treturn {items:results};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// create a set of stores\r\nCouchDBRestStore.getStores = function(couchServerUrl){\r\n\tvar dfd = dojo.xhrGet({\r\n\t\turl: couchServerUrl+\"_all_dbs\",\r\n\t\thandleAs: \"json\",\r\n\t\tsync: true\r\n\t});\r\n\tvar stores = {};\r\n\tdfd.addBoth(function(dbs){\r\n\t\tfor(var i = 0; i < dbs.length; i++){\r\n\t\t\tstores[dbs[i]] = new dojox.data.CouchDBRestStore({target:couchServerUrl + dbs[i],idAttribute:\"_id\"});\r\n\t\t}\r\n\t\treturn stores;\r\n\t});\r\n\treturn stores;\r\n};\r\n\r\nreturn CouchDBRestStore;\r\n\r\n});\r\n"]}