{"version":3,"sources":["data/FlickrRestStore.js"],"names":["define","lang","declare","array","scriptIO","FlickrStore","connect","FlickrRestStore","constructor","args","label","this","apikey","_apikey","_cache","_prevRequests","_handlers","_prevRequestRanges","_maxPhotosPerUser","_id","prototype","_requestCount","_flickrRestUrl","_storeRef","_sortAttributes","date-posted","date-taken","interestingness","_fetchItems","request","fetchHandler","errorHandler","query","mixin","primaryKey","secondaryKey","content","format","method","api_key","extras","userid","user_id","push","groupid","group_id","Error","_curCount","count","page","start","diff","div","i","_realStart","_realCount","_curStart","per_page","setid","photoset_id","tags","Array","join","tag_mode","toLowerCase","text","sort","length","attribute","descending","requestKey","thisHandler","onBegin","onComplete","onItem","getArgs","url","preventCache","urlPreventCache","callbackParamName","doHandle","hitch","processedData","data","handler","maxPhotos","req","photos","photoset","perpage","pages","photo","myHandler","stat","handlers","console","log","_processFlickrData","end","forEach","_checkPrevRanges","deferred","get","addCallback","addErrback","error","disconnect","getAttributes","item","getValues","_assertIsItem","_assertIsAttribute","_unescapeHtml","title","ownername","media","s","l","o","m","t","owner","id","datetaken","datepublished","cacheKey","items","apply","arguments","template","farm","server","secret","base","arr","idx","some"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,mBAAoB,iBAAkB,yBAA0B,sBAC/G,SAASC,EAAMC,EAASC,EAAOC,EAAUC,EAAaC,GAExD,IAAIC,EAAkBL,EAAQ,6BAC7BG,GACAG,YAAa,SAAmBC,GAS5BA,IACCA,EAAKC,QACPC,KAAKD,MAAQD,EAAKC,OAEhBD,EAAKG,SACPD,KAAKE,QAAUJ,EAAKG,SAGtBD,KAAKG,UACLH,KAAKI,iBACLJ,KAAKK,aACLL,KAAKM,sBACLN,KAAKO,qBACLP,KAAKQ,IAAMZ,EAAgBa,UAAUD,OAKtCA,IAAK,EAKLE,cAAe,EAIfC,eAAgB,uCAIhBT,QAAS,KAITU,UAAW,KAIXT,OAAQ,KAKRC,cAAe,KAOfC,UAAW,KAIXQ,iBACCC,eAAe,EACfC,cAAc,EACdC,iBAAmB,GAGpBC,YAAa,SAAqBC,EACfC,EACAC,GASlB,IAAIC,KACAH,EAAQG,MAGX/B,EAAKgC,MAAMD,EAAOH,EAAQG,OAF1BH,EAAQG,MAAQA,KAKjB,IAAIE,KACAC,KAGAC,GACHC,OAAQ,OACRC,OAAQ,uBACRC,QAAS5B,KAAKE,QACd2B,OAAQ,qCAeT,GAZGR,EAAMS,UACC,EACTL,EAAQM,QAAUb,EAAQG,MAAMS,OAChCP,EAAWS,KAAK,SAASd,EAAQG,MAAMS,SAGrCT,EAAMY,WACC,EACTR,EAAQS,SAAWb,EAAMY,QACzBV,EAAWS,KAAK,UAAYX,EAAMY,UAGhCZ,EAAMpB,QACC,EACTwB,EAAQG,QAAUV,EAAQG,MAAMpB,OAChCuB,EAAaQ,KAAK,MAAMd,EAAQG,MAAMpB,YACjC,CAAA,IAAGwB,EAAQG,QAKhB,MAAMO,MAAM,8DAJH,EACTjB,EAAQG,MAAMpB,OAASwB,EAAQG,QAC/BJ,EAAaQ,KAAK,MAAMP,EAAQG,SAOjC,GAFAV,EAAQkB,UAAYlB,EAAQmB,MAEzBhB,EAAMiB,KACRb,EAAQa,KAAOpB,EAAQG,MAAMiB,KAC7Bd,EAAaQ,KAAK,OAASP,EAAQa,WAC9B,GAAI,UAAWpB,GAA8B,OAAlBA,EAAQqB,MAAe,CACnDrB,EAAQmB,QACXnB,EAAQmB,MAAQ,IAEjB,IAAIG,EAAOtB,EAAQqB,MAAQrB,EAAQmB,MAC/BE,EAAQrB,EAAQqB,MAAOF,EAAQnB,EAAQmB,MAG3C,GAAY,IAATG,EAAY,CACd,GAAGD,EAAQF,EAAQ,EAGlBA,EAAQE,EAAQF,EAChBE,EAAQ,MACJ,CAEJ,IADA,IAAmBE,EAAM,EACjBC,EADO,GACOA,EAAI,EAAGA,IAC5B,GAAGH,EAAQG,GAAM,GAAMH,EAAMG,GAAML,EAAM,CACxCI,EAAMC,EACN,MAGFL,EAAQE,EAAME,EAEfvB,EAAQyB,WAAazB,EAAQqB,MAC7BrB,EAAQ0B,WAAa1B,EAAQmB,MAC7BnB,EAAQ2B,UAAYN,EACpBrB,EAAQkB,UAAYC,OAEpBnB,EAAQyB,WAAazB,EAAQ0B,WAAa,KAC1C1B,EAAQ2B,UAAY3B,EAAQqB,MAC5BrB,EAAQkB,UAAYlB,EAAQmB,MAG7BZ,EAAQa,KAAQC,EAAQF,EAAS,EACjCb,EAAaQ,KAAK,OAASP,EAAQa,MAGjCpB,EAAQkB,YACVX,EAAQqB,SAAW5B,EAAQkB,UAC3BZ,EAAaQ,KAAK,QAAUd,EAAQkB,YAGlCf,EAAM/B,OACRmC,EAAQnC,KAAO4B,EAAQG,MAAM/B,KAC7BiC,EAAWS,KAAK,OAASd,EAAQ5B,OAG/B+B,EAAM0B,QACRtB,EAAQE,OAAS,6BACjBF,EAAQuB,YAAc9B,EAAQG,MAAM0B,MACpCxB,EAAWS,KAAK,MAAQd,EAAQG,MAAM0B,QAGpC1B,EAAM4B,OACL5B,EAAM4B,gBAAgBC,MACxBzB,EAAQwB,KAAO5B,EAAM4B,KAAKE,KAAK,KAE/B1B,EAAQwB,KAAO5B,EAAM4B,KAEtB1B,EAAWS,KAAK,OAASP,EAAQwB,OAE9B5B,EAAgB,UAAuC,QAAjCA,EAAM+B,SAASC,eACN,QAAjChC,EAAM+B,SAASC,gBACf5B,EAAQ2B,SAAW/B,EAAM+B,WAGxB/B,EAAMiC,OACR7B,EAAQ6B,KAAKjC,EAAMiC,KACnB/B,EAAWS,KAAK,QAAQX,EAAMiC,OAK5BjC,EAAMkC,MAAQlC,EAAMkC,KAAKC,OAAS,GAEhCnC,EAAMkC,KAAK,GAAGE,YACjBpC,EAAMkC,KAAK,GAAGE,UAAY,eAKxBzD,KAAKa,gBAAgBQ,EAAMkC,KAAK,GAAGE,aAClCpC,EAAMkC,KAAK,GAAGG,WAChBjC,EAAQ8B,KAAOlC,EAAMkC,KAAK,GAAGE,UAAY,QAEzChC,EAAQ8B,KAAOlC,EAAMkC,KAAK,GAAGE,UAAY,SAK3ChC,EAAQ8B,KAAO,kBAEhBhC,EAAWS,KAAK,QAAQP,EAAQ8B,MAIhChC,EAAaA,EAAW4B,KAAK,KAC7B3B,EAAeA,EAAagC,OAAS,EAAI,IAAMhC,EAAa2B,KAAK,KAAO,GACxE,IAAIQ,EAAapC,EAAaC,EAe1BoC,GACH1C,QAZDA,GACCG,MAAOA,EACPgB,MAAOnB,EAAQkB,UACfG,MAAOrB,EAAQ2B,UACfD,WAAY1B,EAAQ0B,WACpBD,WAAYzB,EAAQyB,WACpBkB,QAAS3C,EAAQ2C,QACjBC,WAAY5C,EAAQ4C,WACpBC,OAAQ7C,EAAQ6C,QAKhB5C,aAAcA,EACdC,aAAcA,GAMf,GAAGpB,KAAKK,UAAUsD,GACjB3D,KAAKK,UAAUsD,GAAY3B,KAAK4B,OADjC,CAKA5D,KAAKK,UAAUsD,IAAeC,GAG9B,IACII,GACHC,IAAKjE,KAAKW,eACVuD,aAAclE,KAAKmE,gBACnB1C,QAASA,EACT2C,kBAAmB,gBAGhBC,EAAW/E,EAAKgF,MAAMtE,KAAM,SAASuE,EAAeC,EAAMC,GAC7D,IAEIC,EAFAb,EAAUY,EAAQvD,QAAQ2C,QAC9BY,EAAQvD,QAAQ2C,QAAU,KAE1B,IAAIc,EAAMF,EAAQvD,QAUlB,GARI,eAAgByD,GAA0B,MAAlBA,EAAIhC,aAC/BgC,EAAIpC,MAAQoC,EAAIhC,WAChBgC,EAAItC,MAAQsC,EAAI/B,WAChB+B,EAAIhC,WAAagC,EAAI/B,WAAa,MAKhCiB,EAAQ,CACV,IAAIe,EAAS,KACVJ,IACFI,EAAUJ,EAAKK,SAAWL,EAAKK,SAAWL,EAAKI,QAE7CA,GAAW,YAAaA,GAAY,UAAWA,GAIhDF,EAHEE,EAAOE,QAAUF,EAAOG,OAASN,EAAQvD,QAAQqB,MAAQkC,EAAQvD,QAAQmB,MAG/DoC,EAAQvD,QAAQqB,MAAQqC,EAAOI,MAAMxB,OAKrCoB,EAAOE,QAAUF,EAAOG,MAErC/E,KAAKO,kBAAkBgB,GAAcmD,EACrCb,EAAQa,EAAWD,EAAQvD,UACnBlB,KAAKO,kBAAkBgB,IAC/BsC,EAAQ7D,KAAKO,kBAAkBgB,GAAakD,EAAQvD,SAItDuD,EAAQtD,aAAaoD,EAAeE,EAAQvD,SACzC2C,IAEFY,EAAQvD,QAAQ2C,QAAUA,KAOxBoB,EAAY3F,EAAKgF,MAAMtE,KAAM,SAASwE,GAGzC,GAAgB,MAAbA,EAAKU,KACP9D,EAAa,KAAMF,OACf,CACJ,IAAIiE,EAAWnF,KAAKK,UAAUsD,GAC9B,IAAIwB,EAEH,YADAC,QAAQC,IAAI,wCAAyCb,GAItDxE,KAAKK,UAAUsD,GAAc,KAC7B3D,KAAKI,cAAcuD,GAAca,EAGjC,IAAID,EAAgBvE,KAAKsF,mBAAmBd,EAAMtD,EAASK,GACvDvB,KAAKM,mBAAmBiB,KAC3BvB,KAAKM,mBAAmBiB,OAEzBvB,KAAKM,mBAAmBiB,GAAYS,MACnCO,MAAOrB,EAAQqB,MACfgD,IAAKrE,EAAQqB,OAASiC,EAAKK,SAAWL,EAAKK,SAASG,MAAMxB,OAASgB,EAAKI,OAAOI,MAAMxB,UAItFhE,EAAMgG,QAAQL,EAAU,SAASzC,GAChC2B,EAASE,EAAeC,EAAM9B,QAK7B8B,EAAOxE,KAAKI,cAAcuD,GAG9B,GAAGa,EAGF,OAFAxE,KAAKK,UAAUsD,GAAc,UAC7BU,EAASrE,KAAKG,OAAOoB,GAAaiD,EAAMZ,GAEnC,GAAG5D,KAAKyF,iBAAiBlE,EAAYL,EAAQqB,MAAOrB,EAAQmB,OAIjE,OAFArC,KAAKK,UAAUsD,GAAc,UAC7BU,EAASrE,KAAKG,OAAOoB,GAAa,KAAMqC,GAIzC,IAAI8B,EAAWjG,EAASkG,IAAI3B,GAC5B0B,EAASE,YAAYX,GAIrBS,EAASG,WAAW,SAASC,GAC5BnG,EAAQoG,WA3GI,MA4GZ3E,EAAa0E,EAAO5E,OAItB8E,cAAe,SAASC,GAGvB,OACC,QAAS,SAAU,WAAY,gBAAiB,iBAChD,gBAAiB,gBAAiB,mBAAoB,OAAQ,YAAa,kBAI7EC,UAAW,SAASD,EAAMxC,GAMzB,OAHAzD,KAAKmG,cAAcF,GACnBjG,KAAKoG,mBAAmB3C,GAEjBA,GACN,IAAK,QACJ,OAASzD,KAAKqG,cAAcJ,EAAKK,QAClC,IAAK,SACJ,OAASL,EAAKM,WACf,IAAK,gBACJ,OAASN,EAAKO,MAAMC,GACrB,IAAK,WACJ,OAASR,EAAKO,MAAME,GACrB,IAAK,mBACJ,OAAST,EAAKO,MAAMG,GACrB,IAAK,gBACJ,OAASV,EAAKO,MAAME,GACrB,IAAK,iBACJ,OAAST,EAAKO,MAAMI,GACrB,IAAK,gBACJ,OAASX,EAAKO,MAAMK,GACrB,IAAK,OACJ,OAAS,gCAAkCZ,EAAKa,MAAQ,IAAMb,EAAKc,IACpE,IAAK,YACJ,OAASd,EAAKe,WACf,IAAK,gBACJ,OAASf,EAAKgB,eACf,QACC,SAKH3B,mBAAoB,SAAqBd,EAAkBtD,EAAsBgG,GAUhF,GAAG1C,EAAK2C,MACP,OAAOzH,EAAYe,UAAU6E,mBAAmB8B,MAAMpH,KAAKqH,WAE5D,IAAIC,GAAY,cAAe,KAAM,sBAAuB,KAAM,IAAK,KAAM,IAAK,MAE9EH,KACAvC,EAAUJ,EAAKK,SAAWL,EAAKK,SAAWL,EAAKI,OACnD,GAAgB,MAAbJ,EAAKU,MAAgBN,GAAUA,EAAOI,MAAM,CAC9CmC,EAAQvC,EAAOI,MAGf,IAAI,IAAItC,EAAI,EAAGA,EAAIyE,EAAM3D,OAAQd,IAAI,CACpC,IAAIuD,EAAOkB,EAAMzE,GACjBuD,EAAKjG,KAAKY,WAAaZ,KACvBsH,EAAS,GAAKrB,EAAKsB,KACnBD,EAAS,GAAKrB,EAAKuB,OACnBF,EAAS,GAAKrB,EAAKc,GACnBO,EAAS,GAAKrB,EAAKwB,OAEnB,IAAIC,EAAOJ,EAASnE,KAAK,IACzB8C,EAAKO,OACJC,EAAGiB,EAAO,SACVd,EAAGc,EAAO,SACVhB,EAAGgB,EAAO,OACVb,EAAGa,EAAO,SACVf,EAAGe,EAAO,WAEPzB,EAAKa,OAAStC,EAAKK,WACtBoB,EAAKa,MAAQtC,EAAKK,SAASiC,QAI9B,IAAIvE,EAAQrB,EAAQqB,MAAQrB,EAAQqB,MAAQ,EACxCoF,EAAM3H,KAAKG,OAAO+G,GAQtB,OAPIS,IACH3H,KAAKG,OAAO+G,GAAYS,MAEzBnI,EAAMgG,QAAQ2B,EAAO,SAASzE,EAAGkF,GAChCD,EAAIC,EAAKrF,GAASG,IAGZiF,GAGRlC,iBAAkB,SAASlE,EAAYgB,EAAOF,GAC7C,IAAIkD,EAAMhD,EAAQF,EACdsF,EAAM3H,KAAKM,mBAAmBiB,GAClC,QAAUoG,GAAQnI,EAAMqI,KAAKF,EAAK,SAAS1B,GAC1C,OAAS1D,GAAS0D,EAAK1D,OAASgD,GAAOU,EAAKV,SAI/C,OAAO3F","file":"../../data/FlickrRestStore.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/array\", \"dojo/io/script\", \"dojox/data/FlickrStore\", \"dojo/_base/connect\"], \r\n  function(lang, declare, array, scriptIO, FlickrStore, connect) {\r\n\r\nvar FlickrRestStore = declare(\"dojox.data.FlickrRestStore\",\r\n\tFlickrStore, {\r\n\tconstructor: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\tInitializer for the FlickrRestStore store.\r\n\t\t// description:\r\n\t\t//\tThe FlickrRestStore is a Datastore interface to one of the basic services\r\n\t\t//\tof the Flickr service, the public photo feed.  This does not provide\r\n\t\t//\taccess to all the services of Flickr.\r\n\t\t//\tThis store cannot do * and ? filtering as the flickr service\r\n\t\t//\tprovides no interface for wildcards.\r\n\t\tif(args){\r\n\t\t\tif(args.label){\r\n\t\t\t\tthis.label = args.label;\r\n\t\t\t}\r\n\t\t\tif(args.apikey){\r\n\t\t\t\tthis._apikey = args.apikey;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._cache = [];\r\n\t\tthis._prevRequests = {};\r\n\t\tthis._handlers = {};\r\n\t\tthis._prevRequestRanges = [];\r\n\t\tthis._maxPhotosPerUser = {};\r\n\t\tthis._id = FlickrRestStore.prototype._id++;\r\n\t},\r\n\r\n\t// _id: Integer\r\n\t//\t\tA unique identifier for this store.\r\n\t_id: 0,\r\n\r\n\t// _requestCount: Integer\r\n\t//\t\tA counter for the number of requests made. This is used to define\r\n\t//\t\tthe callback function that Flickr will use.\r\n\t_requestCount: 0,\r\n\r\n\t// _flickrRestUrl: String\r\n\t//\t\tThe URL to the Flickr REST services.\r\n\t_flickrRestUrl: \"http://www.flickr.com/services/rest/\",\r\n\r\n\t// _apikey: String\r\n\t//\t\tThe users API key to be used when accessing Flickr REST services.\r\n\t_apikey: null,\r\n\r\n\t// _storeRef: String\r\n\t//\t\tA key used to mark an data store item as belonging to this store.\r\n\t_storeRef: \"_S\",\r\n\r\n\t// _cache: Array\r\n\t//\t\tAn Array of all previously downloaded picture info.\r\n\t_cache: null,\r\n\r\n\t// _prevRequests: Object\r\n\t//\t\tA HashMap used to record the signature of a request to prevent duplicate\r\n\t//\t\trequest being made.\r\n\t_prevRequests: null,\r\n\r\n\t// _handlers: Object\r\n\t//\t\tA HashMap used to record the handlers registered for a single remote request.  Multiple\r\n\t//\t\trequests may be made for the same information before the first request has finished.\r\n\t//\t\tEach element of this Object is an array of handlers to call back when the request finishes.\r\n\t//\t\tThis prevents multiple requests being made for the same information.\r\n\t_handlers: null,\r\n\r\n\t// _sortAttributes: Object\r\n\t//\t\tA quick lookup of valid attribute names in a sort query.\r\n\t_sortAttributes: {\r\n\t\t\"date-posted\": true,\r\n\t\t\"date-taken\": true,\r\n\t\t\"interestingness\": true\r\n\t},\r\n\r\n\t_fetchItems: function(\t/*Object*/ request,\r\n\t\t\t\t\t\t\t/*Function*/ fetchHandler,\r\n\t\t\t\t\t\t\t/*Function*/ errorHandler){\r\n\t\t// summary:\r\n\t\t//\t\tFetch flickr items that match to a query\r\n\t\t// request:\r\n\t\t//\t\tA request object\r\n\t\t// fetchHandler:\r\n\t\t//\t\tA function to call for fetched items\r\n\t\t// errorHandler:\r\n\t\t//\t\tA function to call on error\r\n\t\tvar query = {};\r\n\t\tif(!request.query){\r\n\t\t\trequest.query = query = {};\r\n\t\t} else {\r\n\t\t\tlang.mixin(query, request.query);\r\n\t\t}\r\n\r\n\t\tvar primaryKey = [];\r\n\t\tvar secondaryKey = [];\r\n\r\n\t\t//Build up the content to send the request for.\r\n\t\tvar content = {\r\n\t\t\tformat: \"json\",\r\n\t\t\tmethod: \"flickr.photos.search\",\r\n\t\t\tapi_key: this._apikey,\r\n\t\t\textras: \"owner_name,date_upload,date_taken\"\r\n\t\t};\r\n\t\tvar isRest = false;\r\n\t\tif(query.userid){\r\n\t\t\tisRest = true;\r\n\t\t\tcontent.user_id = request.query.userid;\r\n\t\t\tprimaryKey.push(\"userid\"+request.query.userid);\r\n\t\t}\r\n\r\n\t\tif(query.groupid){\r\n\t\t\tisRest = true;\r\n\t\t\tcontent.group_id = query.groupid;\r\n\t\t\tprimaryKey.push(\"groupid\" + query.groupid);\r\n\t\t}\r\n\r\n\t\tif(query.apikey){\r\n\t\t\tisRest = true;\r\n\t\t\tcontent.api_key = request.query.apikey;\r\n\t\t\tsecondaryKey.push(\"api\"+request.query.apikey);\r\n\t\t}else if(content.api_key){\r\n\t\t\tisRest = true;\r\n\t\t\trequest.query.apikey = content.api_key;\r\n\t\t\tsecondaryKey.push(\"api\"+content.api_key);\r\n\t\t}else{\r\n\t\t\tthrow Error(\"dojox.data.FlickrRestStore: An API key must be specified.\");\r\n\t\t}\r\n\r\n\t\trequest._curCount = request.count;\r\n\r\n\t\tif(query.page){\r\n\t\t\tcontent.page = request.query.page;\r\n\t\t\tsecondaryKey.push(\"page\" + content.page);\r\n\t\t}else if((\"start\" in request) && request.start !== null){\r\n\t\t\tif(!request.count){\r\n\t\t\t\trequest.count = 20;\r\n\t\t\t}\r\n\t\t\tvar diff = request.start % request.count;\r\n\t\t\tvar start = request.start, count = request.count;\r\n\t\t\t// If the count does not divide cleanly into the start number,\r\n\t\t\t// more work has to be done to figure out the best page to request\r\n\t\t\tif(diff !== 0) {\r\n\t\t\t\tif(start < count / 2){\r\n\t\t\t\t\t// If the first record requested is less than half the\r\n\t\t\t\t\t// amount requested, then request from 0 to the count record\r\n\t\t\t\t\tcount = start + count;\r\n\t\t\t\t\tstart = 0;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar divLimit = 20, div = 2;\r\n\t\t\t\t\tfor(var i = divLimit; i > 0; i--){\r\n\t\t\t\t\t\tif(start % i === 0 && (start/i) >= count){\r\n\t\t\t\t\t\t\tdiv = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = start/div;\r\n\t\t\t\t}\r\n\t\t\t\trequest._realStart = request.start;\r\n\t\t\t\trequest._realCount = request.count;\r\n\t\t\t\trequest._curStart = start;\r\n\t\t\t\trequest._curCount = count;\r\n\t\t\t}else{\r\n\t\t\t\trequest._realStart = request._realCount = null;\r\n\t\t\t\trequest._curStart = request.start;\r\n\t\t\t\trequest._curCount = request.count;\r\n\t\t\t}\r\n\r\n\t\t\tcontent.page = (start / count) + 1;\r\n\t\t\tsecondaryKey.push(\"page\" + content.page);\r\n\t\t}\r\n\r\n\t\tif(request._curCount){\r\n\t\t\tcontent.per_page = request._curCount;\r\n\t\t\tsecondaryKey.push(\"count\" + request._curCount);\r\n\t\t}\r\n\r\n\t\tif(query.lang){\r\n\t\t\tcontent.lang = request.query.lang;\r\n\t\t\tprimaryKey.push(\"lang\" + request.lang);\r\n\t\t}\r\n\r\n\t\tif(query.setid){\r\n\t\t\tcontent.method = \"flickr.photosets.getPhotos\";\r\n\t\t\tcontent.photoset_id = request.query.setid;\r\n\t\t\tprimaryKey.push(\"set\" + request.query.setid);\r\n\t\t}\r\n\r\n\t\tif(query.tags){\r\n\t\t\tif(query.tags instanceof Array){\r\n\t\t\t\tcontent.tags = query.tags.join(\",\");\r\n\t\t\t}else{\r\n\t\t\t\tcontent.tags = query.tags;\r\n\t\t\t}\r\n\t\t\tprimaryKey.push(\"tags\" + content.tags);\r\n\r\n\t\t\tif(query[\"tag_mode\"] && (query.tag_mode.toLowerCase() === \"any\" ||\r\n\t\t\t\tquery.tag_mode.toLowerCase() === \"all\")){\r\n\t\t\t\tcontent.tag_mode = query.tag_mode;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(query.text){\r\n\t\t\tcontent.text=query.text;\r\n\t\t\tprimaryKey.push(\"text:\"+query.text);\r\n\t\t}\r\n\r\n\t\t//The store only supports a single sort attribute, even though the\r\n\t\t//Read API technically allows multiple sort attributes\r\n\t\tif(query.sort && query.sort.length > 0){\r\n\t\t\t//The default sort attribute is 'date-posted'\r\n\t\t\tif(!query.sort[0].attribute){\r\n\t\t\t\tquery.sort[0].attribute = \"date-posted\";\r\n\t\t\t}\r\n\r\n\t\t\t//If the sort attribute is valid, check if it is ascending or\r\n\t\t\t//descending.\r\n\t\t\tif(this._sortAttributes[query.sort[0].attribute]) {\r\n\t\t\t\tif(query.sort[0].descending){\r\n\t\t\t\t\tcontent.sort = query.sort[0].attribute + \"-desc\";\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcontent.sort = query.sort[0].attribute + \"-asc\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t//The default sort in the Dojo Data API is ascending.\r\n\t\t\tcontent.sort = \"date-posted-asc\";\r\n\t\t}\r\n\t\tprimaryKey.push(\"sort:\"+content.sort);\r\n\r\n\t\t//Generate a unique key for this request, so the store can\r\n\t\t//detect duplicate requests.\r\n\t\tprimaryKey = primaryKey.join(\".\");\r\n\t\tsecondaryKey = secondaryKey.length > 0 ? \".\" + secondaryKey.join(\".\") : \"\";\r\n\t\tvar requestKey = primaryKey + secondaryKey;\r\n\r\n\t\t//Make a copy of the request, in case the source object is modified\r\n\t\t//before the request completes\r\n\t\trequest = {\r\n\t\t\tquery: query,\r\n\t\t\tcount: request._curCount,\r\n\t\t\tstart: request._curStart,\r\n\t\t\t_realCount: request._realCount,\r\n\t\t\t_realStart: request._realStart,\r\n\t\t\tonBegin: request.onBegin,\r\n\t\t\tonComplete: request.onComplete,\r\n\t\t\tonItem: request.onItem\r\n\t\t};\r\n\r\n\t\tvar thisHandler = {\r\n\t\t\trequest: request,\r\n\t\t\tfetchHandler: fetchHandler,\r\n\t\t\terrorHandler: errorHandler\r\n\t\t};\r\n\r\n\t\t//If the request has already been made, but not yet completed,\r\n\t\t//then add the callback handler to the list of handlers\r\n\t\t//for this request, and finish.\r\n\t\tif(this._handlers[requestKey]){\r\n\t\t\tthis._handlers[requestKey].push(thisHandler);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._handlers[requestKey] = [thisHandler];\r\n\r\n\t\t//Linking this up to Flickr is a PAIN!\r\n\t\tvar handle = null;\r\n\t\tvar getArgs = {\r\n\t\t\turl: this._flickrRestUrl,\r\n\t\t\tpreventCache: this.urlPreventCache,\r\n\t\t\tcontent: content,\r\n\t\t\tcallbackParamName: \"jsoncallback\"\r\n\t\t};\r\n\r\n\t\tvar doHandle = lang.hitch(this, function(processedData, data, handler){\r\n\t\t\tvar onBegin = handler.request.onBegin;\r\n\t\t\thandler.request.onBegin = null;\r\n\t\t\tvar maxPhotos;\r\n\t\t\tvar req = handler.request;\r\n\r\n\t\t\tif((\"_realStart\" in req) && req._realStart != null){\r\n\t\t\t\treq.start = req._realStart;\r\n\t\t\t\treq.count = req._realCount;\r\n\t\t\t\treq._realStart = req._realCount = null;\r\n\t\t\t}\r\n\r\n\t\t\t//If the request contains an onBegin method, the total number\r\n\t\t\t//of photos must be calculated.\r\n\t\t\tif(onBegin){\r\n\t\t\t\tvar photos = null;\r\n\t\t\t\tif(data){\r\n\t\t\t\t\tphotos = (data.photoset ? data.photoset : data.photos);\r\n\t\t\t\t}\r\n\t\t\t\tif(photos && (\"perpage\" in photos) && (\"pages\" in photos)){\r\n\t\t\t\t\tif(photos.perpage * photos.pages <= handler.request.start + handler.request.count){\r\n\t\t\t\t\t\t//If the final page of results has been received, it is possible to\r\n\t\t\t\t\t\t//know exactly how many photos there are\r\n\t\t\t\t\t\tmaxPhotos = handler.request.start + photos.photo.length;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t//If the final page of results has not yet been received,\r\n\t\t\t\t\t\t//it is not possible to tell exactly how many photos exist, so\r\n\t\t\t\t\t\t//return the number of pages multiplied by the number of photos per page.\r\n\t\t\t\t\t\tmaxPhotos = photos.perpage * photos.pages;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._maxPhotosPerUser[primaryKey] = maxPhotos;\r\n\t\t\t\t\tonBegin(maxPhotos, handler.request);\r\n\t\t\t\t}else if(this._maxPhotosPerUser[primaryKey]){\r\n\t\t\t\t\tonBegin(this._maxPhotosPerUser[primaryKey], handler.request);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//Call whatever functions the caller has defined on the request object, except for onBegin\r\n\t\t\thandler.fetchHandler(processedData, handler.request);\r\n\t\t\tif(onBegin){\r\n\t\t\t\t//Replace the onBegin function, if it existed.\r\n\t\t\t\thandler.request.onBegin = onBegin;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//Define a callback for the script that iterates through a list of\r\n\t\t//handlers for this piece of data.\tMultiple requests can come into\r\n\t\t//the store for the same data.\r\n\t\tvar myHandler = lang.hitch(this, function(data){\r\n\t\t\t//The handler should not be called more than once, so disconnect it.\r\n\t\t\t//if(handle !== null){ dojo.disconnect(handle); }\r\n\t\t\tif(data.stat != \"ok\"){\r\n\t\t\t\terrorHandler(null, request);\r\n\t\t\t}else{ //Process the items...\r\n\t\t\t\tvar handlers = this._handlers[requestKey];\r\n\t\t\t\tif(!handlers){\r\n\t\t\t\t\tconsole.log(\"FlickrRestStore: no handlers for data\", data);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._handlers[requestKey] = null;\r\n\t\t\t\tthis._prevRequests[requestKey] = data;\r\n\r\n\t\t\t\t//Process the data once.\r\n\t\t\t\tvar processedData = this._processFlickrData(data, request, primaryKey);\r\n\t\t\t\tif(!this._prevRequestRanges[primaryKey]){\r\n\t\t\t\t\tthis._prevRequestRanges[primaryKey] = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis._prevRequestRanges[primaryKey].push({\r\n\t\t\t\t\tstart: request.start,\r\n\t\t\t\t\tend: request.start + (data.photoset ? data.photoset.photo.length : data.photos.photo.length)\r\n\t\t\t\t});\r\n\r\n\t\t\t\t//Iterate through the array of handlers, calling each one.\r\n\t\t\t\tarray.forEach(handlers, function(i){\r\n\t\t\t\t\tdoHandle(processedData, data, i);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tvar data = this._prevRequests[requestKey];\r\n\r\n\t\t//If the data was previously retrieved, there is no need to fetch it again.\r\n\t\tif(data){\r\n\t\t\tthis._handlers[requestKey] = null;\r\n\t\t\tdoHandle(this._cache[primaryKey], data, thisHandler);\r\n\t\t\treturn;\r\n\t\t}else if(this._checkPrevRanges(primaryKey, request.start, request.count)){\r\n\t\t\t//If this range of data has already been retrieved, reuse it.\r\n\t\t\tthis._handlers[requestKey] = null;\r\n\t\t\tdoHandle(this._cache[primaryKey], null, thisHandler);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar deferred = scriptIO.get(getArgs);\r\n\t\tdeferred.addCallback(myHandler);\r\n\r\n\t\t//We only set up the errback, because the callback isn't ever really used because we have\r\n\t\t//to link to the jsonFlickrFeed function....\r\n\t\tdeferred.addErrback(function(error){\r\n\t\t\tconnect.disconnect(handle);\r\n\t\t\terrorHandler(error, request);\r\n\t\t});\r\n\t},\r\n\r\n\tgetAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getAttributes()\r\n\t\treturn [\r\n\t\t\t\"title\", \"author\", \"imageUrl\", \"imageUrlSmall\", \"imageUrlMedium\",\r\n\t\t\t\"imageUrlThumb\", \"imageUrlLarge\", \"imageUrlOriginal\", \"link\", \"dateTaken\", \"datePublished\"\r\n\t\t];\r\n\t},\r\n\r\n\tgetValues: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\r\n\t\tswitch(attribute){\r\n\t\t\tcase \"title\":\r\n\t\t\t\treturn [ this._unescapeHtml(item.title) ]; // String\r\n\t\t\tcase \"author\":\r\n\t\t\t\treturn [ item.ownername ]; // String\r\n\t\t\tcase \"imageUrlSmall\":\r\n\t\t\t\treturn [ item.media.s ]; // String\r\n\t\t\tcase \"imageUrl\":\r\n\t\t\t\treturn [ item.media.l ]; // String\r\n\t\t\tcase \"imageUrlOriginal\":\r\n\t\t\t\treturn [ item.media.o ]; // String\r\n\t\t\tcase \"imageUrlLarge\":\r\n\t\t\t\treturn [ item.media.l ]; // String\r\n\t\t\tcase \"imageUrlMedium\":\r\n\t\t\t\treturn [ item.media.m ]; // String\r\n\t\t\tcase \"imageUrlThumb\":\r\n\t\t\t\treturn [ item.media.t ]; // String\r\n\t\t\tcase \"link\":\r\n\t\t\t\treturn [ \"http://www.flickr.com/photos/\" + item.owner + \"/\" + item.id ]; // String\r\n\t\t\tcase \"dateTaken\":\r\n\t\t\t\treturn [ item.datetaken ];\r\n\t\t\tcase \"datePublished\":\r\n\t\t\t\treturn [ item.datepublished ];\r\n\t\t\tdefault:\r\n\t\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_processFlickrData: function(/* Object */data, /* Object */request, /* String */ cacheKey){\r\n\t\t// summary:\r\n\t\t//\t\tProcesses the raw data from Flickr and updates the internal cache.\r\n\t\t// data:\r\n\t\t//\t\tData returned from Flickr\r\n\t\t// request:\r\n\t\t//\t\tThe original dojo.data.Request object passed in by the user.\r\n\r\n\t\t// If the data contains an 'item' object, it has not come from the REST\r\n\t\t// services, so process it using the FlickrStore.\r\n\t\tif(data.items){\r\n\t\t\treturn FlickrStore.prototype._processFlickrData.apply(this,arguments);\r\n\t\t}\r\n\t\tvar template = [\"http://farm\", null, \".static.flickr.com/\", null, \"/\", null, \"_\", null];\r\n\r\n\t\tvar items = [];\r\n\t\tvar photos = (data.photoset ? data.photoset : data.photos);\r\n\t\tif(data.stat == \"ok\" && photos && photos.photo){\r\n\t\t\titems = photos.photo;\r\n\r\n\t\t\t//Add on the store ref so that isItem can work.\r\n\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\tvar item = items[i];\r\n\t\t\t\titem[this._storeRef] = this;\r\n\t\t\t\ttemplate[1] = item.farm;\r\n\t\t\t\ttemplate[3] = item.server;\r\n\t\t\t\ttemplate[5] = item.id;\r\n\t\t\t\ttemplate[7] = item.secret;\r\n\t\t\t\t\r\n\t\t\t\tvar base = template.join(\"\");\r\n\t\t\t\titem.media = {\r\n\t\t\t\t\ts: base + \"_s.jpg\",\r\n\t\t\t\t\tm: base + \"_m.jpg\",\r\n\t\t\t\t\tl: base + \".jpg\",\r\n\t\t\t\t\tt: base + \"_t.jpg\",\r\n\t\t\t\t\to: base + \"_o.jpg\"\r\n\t\t\t\t};\r\n\t\t\t\tif(!item.owner && data.photoset){\r\n\t\t\t\t\titem.owner = data.photoset.owner;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar start = request.start ? request.start : 0;\r\n\t\tvar arr = this._cache[cacheKey];\r\n\t\tif(!arr){\r\n\t\t\tthis._cache[cacheKey] = arr = [];\r\n\t\t}\r\n\t\tarray.forEach(items, function(i, idx){\r\n\t\t\tarr[idx+ start] = i;\r\n\t\t});\r\n\r\n\t\treturn arr; // Array\r\n\t},\r\n\r\n\t_checkPrevRanges: function(primaryKey, start, count){\r\n\t\tvar end = start + count;\r\n\t\tvar arr = this._prevRequestRanges[primaryKey];\r\n\t\treturn (!!arr) && array.some(arr, function(item){\r\n\t\t\treturn ((start >= item.start)&&(end <= item.end));\r\n\t\t});\r\n\t}\r\n});\r\nreturn FlickrRestStore;\r\n});\r\n\r\n"]}