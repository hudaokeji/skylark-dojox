{"version":3,"sources":["data/AtomReadStore.js"],"names":["define","dojo","dojox","experimental","AtomReadStore","declare","constructor","args","this","url","rewriteUrl","label","sendQuery","sendquery","unescapeHTML","urlPreventCache","Error","getValue","item","attribute","defaultValue","_assertIsItem","_assertIsAttribute","_initItem","toLowerCase","_attribs","_parsed","_parseItem","retVal","content","regexp","RegExp","text","replace","substring","Math","min","length","type","_unescapeHTML","isArray","getValues","undefined","getAttributes","attrNames","x","push","hasAttribute","containsValue","value","values","i","toString","isItem","something","element","store","isItemLoaded","loadItem","keywordArgs","getFeatures","dojo.data.api.Read","getLabel","getLabelAttributes","getFeedValue","getFeedValues","doc","_feedMetaData","getElementsByTagName","_fetchItems","request","fetchHandler","errorHandler","_getFetchUrl","localRequest","_this","docHandler","data","items","_getItems","query","id","filter","category","entry","cats","some","getArgs","handleAs","preventCache","getHandler","xhrGet","addCallback","addErrback","isString","queryString","name","fullUrl","indexOf","document","_items","nodes","childNodes","console","log","feedNodes","onBegin","node","nodeType","_getItem","close","attribs","getNodeText","txt","textContent","innerHTML","innerXML","child","nodeValue","forEach","tagName","getAttribute","parseTextAndType","nameNode","uriNode","author","uri","date","stamp","fromISOString","scheme","term","link","rel","href","extend","util","simpleFetch"],"mappings":"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","file":"../../data/AtomReadStore.js","sourcesContent":["define([\"dojo\", \"dojox\", \"dojo/data/util/filter\", \"dojo/data/util/simpleFetch\", \"dojo/date/stamp\"], function(dojo, dojox) {\r\ndojo.experimental(\"dojox.data.AtomReadStore\");\r\n\r\nvar AtomReadStore = dojo.declare(\"dojox.data.AtomReadStore\", null, {\r\n\t// summary:\r\n\t//\t\tA read only data store for Atom XML based services or documents\r\n\t// description:\r\n\t//\t\tA data store for Atom XML based services or documents.\tThis store is still under development\r\n\t//\t\tand doesn't support wildcard filtering yet.\tAttribute filtering is limited to category or id.\r\n\r\n\tconstructor: function(/* object */ args){\r\n\t\t// summary:\r\n\t\t//\t\tConstructor for the AtomRead store.\r\n\t\t// args:\r\n\t\t//\t\tAn anonymous object to initialize properties.\tIt expects the following values:\r\n\t\t//\r\n\t\t//\t\t- url:\t\t\tThe url to a service or an XML document that represents the store\r\n\t\t//\t\t- unescapeHTML:\tA boolean to specify whether or not to unescape HTML text\r\n\t\t//\t\t- sendQuery:\tA boolean indicate to add a query string to the service URL\r\n\r\n\t\tif(args){\r\n\t\t\tthis.url = args.url;\r\n\t\t\tthis.rewriteUrl = args.rewriteUrl;\r\n\t\t\tthis.label = args.label || this.label;\r\n\t\t\tthis.sendQuery = (args.sendQuery || args.sendquery || this.sendQuery);\r\n\t\t\tthis.unescapeHTML = args.unescapeHTML;\r\n\t\t\tif(\"urlPreventCache\" in args){\r\n\t\t\t\tthis.urlPreventCache = args.urlPreventCache?true:false;\r\n\t\t\t\t\t\t}\r\n\t\t}\r\n\t\tif(!this.url){\r\n\t\t\tthrow new Error(\"AtomReadStore: a URL must be specified when creating the data store\");\r\n\t\t}\r\n\t},\r\n\r\n\t//Values that may be set by the parser.\r\n\t//Ergo, have to be instantiated to something\r\n\t//So the parser knows how to set them.\r\n\turl: \"\",\r\n\r\n\tlabel: \"title\",\r\n\r\n\tsendQuery: false,\r\n\r\n\tunescapeHTML: false,\r\n\r\n\t// urlPreventCache: Boolean\r\n\t//\t\tConfigurable preventCache option for the URL.\r\n\turlPreventCache: false,\r\n\r\n\t/* dojo/data/api/Read */\r\n\r\n\tgetValue: function(/*dojo/data/api/Item*/ item, /*attribute|attribute-name-string*/ attribute, /*anything?*/ defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value\r\n\t\t// description:\r\n\t\t//\t\t'item' must be an instance of an object created by the AtomReadStore instance.\r\n\t\t//\t\tAccepted attributes are id, subtitle, title, summary, content, author, updated,\r\n\t\t//\t\tpublished, category, link and alternate\r\n\t\t// item:\r\n\t\t//\t\tAn item returned by a call to the 'fetch' method.\r\n\t\t// attribute:\r\n\t\t//\t\tA attribute of the Atom Entry\r\n\t\t// defaultValue:\r\n\t\t//\t\tA default value\r\n\t\t// returns:\r\n\t\t//\t\tAn attribute value found, otherwise 'defaultValue'\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tthis._initItem(item);\r\n\t\tattribute = attribute.toLowerCase();\r\n\t\t//If the attribute has previously been retrieved, then return it\r\n\t\tif(!item._attribs[attribute] && !item._parsed){\r\n\t\t\tthis._parseItem(item);\r\n\t\t\titem._parsed = true;\r\n\t\t}\r\n\t\tvar retVal = item._attribs[attribute];\r\n\r\n\t\tif(!retVal && attribute == \"summary\"){\r\n\t\t\tvar content = this.getValue(item, \"content\");\r\n\t\t\tvar regexp = new RegExp(\"/(<([^>]+)>)/g\", \"i\");\r\n\t\t\tvar text = content.text.replace(regexp,\"\");\r\n\t\t\tretVal = {\r\n\t\t\t\ttext: text.substring(0, Math.min(400, text.length)),\r\n\t\t\t\ttype: \"text\"\r\n\t\t\t};\r\n\t\t\titem._attribs[attribute] = retVal;\r\n\t\t}\r\n\r\n\t\tif(retVal && this.unescapeHTML){\r\n\t\t\tif((attribute == \"content\" || attribute == \"summary\" || attribute == \"subtitle\") && !item[\"_\"+attribute+\"Escaped\"]){\r\n\t\t\t\tretVal.text = this._unescapeHTML(retVal.text);\r\n\t\t\t\titem[\"_\"+attribute+\"Escaped\"] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retVal ? dojo.isArray(retVal) ? retVal[0]: retVal : defaultValue;\r\n\t},\r\n\r\n\tgetValues: function(/*dojo/data/api/Item*/ item, /*attribute|attribute-name-string*/ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value\r\n\t\t// description:\r\n\t\t//\t\t'item' must be an instance of an object created by the AtomReadStore instance.\r\n\t\t//\t\tAccepted attributes are id, subtitle, title, summary, content, author, updated,\r\n\t\t//\t\tpublished, category, link and alternate\r\n\t\t// item:\r\n\t\t//\t\tAn item returned by a call to the 'fetch' method.\r\n\t\t// attribute:\r\n\t\t//\t\tA attribute of the Atom Entry\r\n\t\t// returns:\r\n\t\t//\t\tAn array of values for the attribute value found, otherwise 'defaultValue'\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tthis._initItem(item);\r\n\t\tattribute = attribute.toLowerCase();\r\n\t\t//If the attribute has previously been retrieved, then return it\r\n\t\tif(!item._attribs[attribute]){\r\n\t\t\tthis._parseItem(item);\r\n\t\t}\r\n\t\tvar retVal = item._attribs[attribute];\r\n\t\treturn retVal ? ((retVal.length !== undefined && typeof(retVal) !== \"string\") ? retVal : [retVal]) : undefined;\r\n\t},\r\n\r\n\tgetAttributes: function(/*dojo/data/api/Item*/ item){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an array of attribute names\r\n\t\t// description:\r\n\t\t//\t\t'item' must be have been created by the AtomReadStore instance.\r\n\t\t//\t\ttag names of child elements and XML attribute names of attributes\r\n\t\t//\t\tspecified to the element are returned along with special attribute\r\n\t\t//\t\tnames applicable to the element including \"tagName\", \"childNodes\"\r\n\t\t//\t\tif the element has child elements, \"text()\" if the element has\r\n\t\t//\t\tchild text nodes, and attribute names in '_attributeMap' that match\r\n\t\t//\t\tthe tag name of the element.\r\n\t\t// item:\r\n\t\t//\t\tAn XML element\r\n\t\t// returns:\r\n\t\t//\t\tAn array of attributes found\r\n\t\tthis._assertIsItem(item);\r\n\t\tif(!item._attribs){\r\n\t\t\tthis._initItem(item);\r\n\t\t\tthis._parseItem(item);\r\n\t\t}\r\n\t\tvar attrNames = [];\r\n\t\tfor(var x in item._attribs){\r\n\t\t\tattrNames.push(x);\r\n\t\t}\r\n\t\treturn attrNames; //array\r\n\t},\r\n\r\n\thasAttribute: function(/*dojo/data/api/Item*/ item, /*attribute|attribute-name-string*/ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether an element has the attribute\r\n\t\t// item:\r\n\t\t//\t\t'item' must be created by the AtomReadStore instance.\r\n\t\t// attribute:\r\n\t\t//\t\tAn attribute of an Atom Entry item.\r\n\t\t// returns:\r\n\t\t//\t\tTrue if the element has the attribute, otherwise false\r\n\t\treturn (this.getValue(item, attribute) !== undefined); //boolean\r\n\t},\r\n\r\n\tcontainsValue: function(/*dojo/data/api/Item*/ item, /*attribute|attribute-name-string*/ attribute, /* anything */ value){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether the attribute values contain the value\r\n\t\t// item:\r\n\t\t//\t\t'item' must be an instance of a dojox.data.XmlItem from the store instance.\r\n\t\t// attribute:\r\n\t\t//\t\tA tag name of a child element, An XML attribute name or one of\r\n\t\t//\t\tspecial names\r\n\t\t// returns:\r\n\t\t//\t\tTrue if the attribute values contain the value, otherwise false\r\n\t\tvar values = this.getValues(item, attribute);\r\n\t\tfor(var i = 0; i < values.length; i++){\r\n\t\t\tif((typeof value === \"string\")){\r\n\t\t\t\tif(values[i].toString && values[i].toString() === value){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}else if(values[i] === value){\r\n\t\t\t\treturn true; //boolean\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;//boolean\r\n\t},\r\n\r\n\tisItem: function(/* anything */ something){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether the object is an item (XML element)\r\n\t\t// item:\r\n\t\t//\t\tAn object to check\r\n\t\t// returns:\r\n\t\t//\t\tTrue if the object is an XML element, otherwise false\r\n\t\tif(something && something.element && something.store && something.store === this){\r\n\t\t\treturn true; //boolean\r\n\t\t}\r\n\t\treturn false; //boolran\r\n\t},\r\n\r\n\tisItemLoaded: function(/* anything */ something){\r\n\t\t// summary:\r\n\t\t//\t\tCheck whether the object is an item (XML element) and loaded\r\n\t\t// item:\r\n\t\t//\t\tAn object to check\r\n\t\t// returns:\r\n\t\t//\t\tTrue if the object is an XML element, otherwise false\r\n\t\treturn this.isItem(something); //boolean\r\n\t},\r\n\r\n\tloadItem: function(/* object */ keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tLoad an item (XML element)\r\n\t\t// keywordArgs:\r\n\t\t//\t\tobject containing the args for loadItem.\tSee dojo/data/api/Read.loadItem()\r\n\t},\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturn supported data APIs\r\n\t\t// returns:\r\n\t\t//\t\t\"dojo.data.api.Read\" and \"dojo.data.api.Write\"\r\n\t\tvar features = {\r\n\t\t\t\"dojo.data.api.Read\": true\r\n\t\t};\r\n\t\treturn features; //array\r\n\t},\r\n\r\n\tgetLabel: function(/*dojo/data/api/Item*/ item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\t\tif((this.label !== \"\") && this.isItem(item)){\r\n\t\t\tvar label = this.getValue(item,this.label);\r\n\t\t\tif(label && label.text){\r\n\t\t\t\treturn label.text;\r\n\t\t\t}else if(label){\r\n\t\t\t\treturn label.toString();\r\n\t\t\t}else{\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined; //undefined\r\n\t},\r\n\r\n\tgetLabelAttributes: function(/*dojo/data/api/Item*/ item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\t\tif(this.label !== \"\"){\r\n\t\t\treturn [this.label]; //array\r\n\t\t}\r\n\t\treturn null; //null\r\n\t},\r\n\r\n\tgetFeedValue: function(attribute, defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tNon-API method for retrieving values regarding the Atom feed,\r\n\t\t//\t\trather than the Atom entries.\r\n\t\tvar values = this.getFeedValues(attribute, defaultValue);\r\n\t\tif(dojo.isArray(values)){\r\n\t\t\treturn values[0];\r\n\t\t}\r\n\t\treturn values;\r\n\t},\r\n\r\n\tgetFeedValues: function(attribute, defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tNon-API method for retrieving values regarding the Atom feed,\r\n\t\t//\t\trather than the Atom entries.\r\n\t\tif(!this.doc){\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\tif(!this._feedMetaData){\r\n\t\t\tthis._feedMetaData = {\r\n\t\t\t\telement: this.doc.getElementsByTagName(\"feed\")[0],\r\n\t\t\t\tstore: this,\r\n\t\t\t\t_attribs: {}\r\n\t\t\t};\r\n\t\t\tthis._parseItem(this._feedMetaData);\r\n\t\t}\r\n\t\treturn this._feedMetaData._attribs[attribute] || defaultValue;\r\n\t},\r\n\r\n\t_initItem: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tInitializes an item before it can be parsed.\r\n\t\tif(!item._attribs){\r\n\t\t\titem._attribs = {};\r\n\t\t}\r\n\t},\r\n\r\n\t_fetchItems: function(request, fetchHandler, errorHandler){\r\n\t\t// summary:\r\n\t\t//\t\tRetrieves the items from the Atom XML document.\r\n\t\tvar url = this._getFetchUrl(request);\r\n\t\tif(!url){\r\n\t\t\terrorHandler(new Error(\"No URL specified.\"));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar localRequest = (!this.sendQuery ? request : null); // use request for _getItems()\r\n\r\n\t\tvar _this = this;\r\n\t\tvar docHandler = function(data){\r\n\t\t\t_this.doc = data;\r\n\t\t\tvar items = _this._getItems(data, localRequest);\r\n\t\t\tvar query = request.query;\r\n\t\t\tif(query){\r\n\t\t\t\tif(query.id){\r\n\t\t\t\t\titems = dojo.filter(items, function(item){\r\n\t\t\t\t\t\treturn (_this.getValue(item, \"id\") == query.id);\r\n\t\t\t\t\t});\r\n\t\t\t\t}else if(query.category){\r\n\t\t\t\t\titems = dojo.filter(items, function(entry){\r\n\t\t\t\t\t\tvar cats = _this.getValues(entry, \"category\");\r\n\t\t\t\t\t\tif(!cats){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn dojo.some(cats, \"return item.term=='\"+query.category+\"'\");\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(items && items.length > 0){\r\n\t\t\t\tfetchHandler(items, request);\r\n\t\t\t}else{\r\n\t\t\t\tfetchHandler([], request);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.doc){\r\n\t\t\tdocHandler(this.doc);\r\n\t\t}else{\r\n\t\t\tvar getArgs = {\r\n\t\t\t\turl: url,\r\n\t\t\t\thandleAs: \"xml\",\r\n\t\t\t\tpreventCache: this.urlPreventCache\r\n\t\t\t};\r\n\t\t\tvar getHandler = dojo.xhrGet(getArgs);\r\n\t\t\tgetHandler.addCallback(docHandler);\r\n\r\n\t\t\tgetHandler.addErrback(function(data){\r\n\t\t\t\terrorHandler(data, request);\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\r\n\t_getFetchUrl: function(request){\r\n\t\tif(!this.sendQuery){\r\n\t\t\treturn this.url;\r\n\t\t}\r\n\t\tvar query = request.query;\r\n\t\tif(!query){\r\n\t\t\treturn this.url;\r\n\t\t}\r\n\t\tif(dojo.isString(query)){\r\n\t\t\treturn this.url + query;\r\n\t\t}\r\n\t\tvar queryString = \"\";\r\n\t\tfor(var name in query){\r\n\t\t\tvar value = query[name];\r\n\t\t\tif(value){\r\n\t\t\t\tif(queryString){\r\n\t\t\t\t\tqueryString += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\tqueryString += (name + \"=\" + value);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!queryString){\r\n\t\t\treturn this.url;\r\n\t\t}\r\n\t\t//Check to see if the URL already has query params or not.\r\n\t\tvar fullUrl = this.url;\r\n\t\tif(fullUrl.indexOf(\"?\") < 0){\r\n\t\t\tfullUrl += \"?\";\r\n\t\t}else{\r\n\t\t\tfullUrl += \"&\";\r\n\t\t}\r\n\t\treturn fullUrl + queryString;\r\n\t},\r\n\r\n\t_getItems: function(document, request){\r\n\t\t// summary:\r\n\t\t//\t\tParses the document in a first pass\r\n\t\tif(this._items){\r\n\t\t\treturn this._items;\r\n\t\t}\r\n\t\tvar items = [];\r\n\t\tvar nodes = [];\r\n\r\n\t\tif(document.childNodes.length < 1){\r\n\t\t\tthis._items = items;\r\n\t\t\tconsole.log(\"dojox.data.AtomReadStore: Received an invalid Atom document. Check the content type header\");\r\n\t\t\treturn items;\r\n\t\t}\r\n\r\n\t\tvar feedNodes = dojo.filter(document.childNodes, \"return item.tagName && item.tagName.toLowerCase() == 'feed'\");\r\n\r\n\t\tvar query = request.query;\r\n\r\n\t\tif(!feedNodes || feedNodes.length != 1){\r\n\t\t\tconsole.log(\"dojox.data.AtomReadStore: Received an invalid Atom document, number of feed tags = \" + (feedNodes? feedNodes.length : 0));\r\n\t\t\treturn items;\r\n\t\t}\r\n\r\n\t\tnodes = dojo.filter(feedNodes[0].childNodes, \"return item.tagName && item.tagName.toLowerCase() == 'entry'\");\r\n\r\n\t\tif(request.onBegin){\r\n\t\t\trequest.onBegin(nodes.length, this.sendQuery ? request : {});\r\n\t\t}\r\n\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar node = nodes[i];\r\n\t\t\tif(node.nodeType != 1 /*ELEMENT_NODE*/){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\titems.push(this._getItem(node));\r\n\t\t}\r\n\t\tthis._items = items;\r\n\t\treturn items;\r\n\t},\r\n\r\n\tclose: function(/*dojo/data/api/Request|Object?*/ request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t},\r\n\r\n/* internal API */\r\n\r\n\t_getItem: function(element){\r\n\t\treturn {\r\n\t\t\telement: element,\r\n\t\t\tstore: this\r\n\t\t};\r\n\t},\r\n\r\n\t_parseItem: function(item){\r\n\t\tvar attribs = item._attribs;\r\n\t\tvar _this = this;\r\n\t\tvar text, type;\r\n\r\n\t\tfunction getNodeText(node){\r\n\t\t\tvar txt = node.textContent || node.innerHTML || node.innerXML;\r\n\t\t\tif(!txt && node.childNodes[0]){\r\n\t\t\t\tvar child = node.childNodes[0];\r\n\t\t\t\tif(child && (child.nodeType == 3 || child.nodeType == 4)){\r\n\t\t\t\t\ttxt = node.childNodes[0].nodeValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn txt;\r\n\t\t}\r\n\t\tfunction parseTextAndType(node){\r\n\t\t\treturn {text: getNodeText(node),type: node.getAttribute(\"type\")};\r\n\t\t}\r\n\t\tdojo.forEach(item.element.childNodes, function(node){\r\n\t\t\tvar tagName = node.tagName ? node.tagName.toLowerCase() : \"\";\r\n\t\t\tswitch(tagName){\r\n\t\t\t\tcase \"title\":\r\n\t\t\t\t\tattribs[tagName] = {\r\n\t\t\t\t\t\ttext: getNodeText(node),\r\n\t\t\t\t\t\ttype: node.getAttribute(\"type\")\r\n\t\t\t\t\t}; break;\r\n\t\t\t\tcase \"subtitle\":\r\n\t\t\t\tcase \"summary\":\r\n\t\t\t\tcase \"content\":\r\n\t\t\t\t\tattribs[tagName] = parseTextAndType(node);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"author\":\r\n\t\t\t\t\tvar nameNode ,uriNode;\r\n\t\t\t\t\tdojo.forEach(node.childNodes, function(child){\r\n\t\t\t\t\t\tif(!child.tagName){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch(child.tagName.toLowerCase()){\r\n\t\t\t\t\t\t\tcase \"name\":\r\n\t\t\t\t\t\t\t\tnameNode = child;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"uri\":\r\n\t\t\t\t\t\t\t\turiNode = child;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tvar author = {};\r\n\t\t\t\t\tif(nameNode && nameNode.length == 1){\r\n\t\t\t\t\t\tauthor.name = getNodeText(nameNode[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(uriNode && uriNode.length == 1){\r\n\t\t\t\t\t\tauthor.uri = getNodeText(uriNode[0]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tattribs[tagName] = author;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"id\":\r\n\t\t\t\t\tattribs[tagName] = getNodeText(node);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"updated\":\r\n\t\t\t\t\tattribs[tagName] = dojo.date.stamp.fromISOString(getNodeText(node) );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"published\":\r\n\t\t\t\t\tattribs[tagName] = dojo.date.stamp.fromISOString(getNodeText(node));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"category\":\r\n\t\t\t\t\tif(!attribs[tagName]){\r\n\t\t\t\t\t\tattribs[tagName] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tattribs[tagName].push({scheme:node.getAttribute(\"scheme\"), term: node.getAttribute(\"term\")});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"link\":\r\n\t\t\t\t\tif(!attribs[tagName]){\r\n\t\t\t\t\t\tattribs[tagName] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar link = {\r\n\t\t\t\t\t\trel: node.getAttribute(\"rel\"),\r\n\t\t\t\t\t\thref: node.getAttribute(\"href\"),\r\n\t\t\t\t\t\ttype: node.getAttribute(\"type\")};\r\n\t\t\t\t\tattribs[tagName].push(link);\r\n\r\n\t\t\t\t\tif(link.rel == \"alternate\"){\r\n\t\t\t\t\t\tattribs[\"alternate\"] = link;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\t_unescapeHTML : function(text){\r\n\t\t//Replace HTML character codes with their unencoded equivalents, e.g. &#8217; with '\r\n\t\ttext = text.replace(/&#8217;/m , \"'\").replace(/&#8243;/m , \"\\\"\").replace(/&#60;/m,\">\").replace(/&#62;/m,\"<\").replace(/&#38;/m,\"&\");\r\n\t\treturn text;\r\n\t},\r\n\r\n\t_assertIsItem: function(/*dojo/data/api/Item*/ item){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed an item in the store.\r\n\t\t// item:\r\n\t\t//\t\tThe item to test for being contained by the store.\r\n\t\tif(!this.isItem(item)){\r\n\t\t\tthrow new Error(\"dojox.data.AtomReadStore: Invalid item argument.\");\r\n\t\t}\r\n\t},\r\n\r\n\t_assertIsAttribute: function(/* attribute-name-string */ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed a valid 'attribute' like type for the store.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute to test for being contained by the store.\r\n\t\tif(typeof attribute !== \"string\"){\r\n\t\t\tthrow new Error(\"dojox.data.AtomReadStore: Invalid attribute argument.\");\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndojo.extend(AtomReadStore, dojo.data.util.simpleFetch);\r\n\r\nreturn AtomReadStore;\r\n});\r\n"]}