{"version":3,"sources":["data/util/JsonQuery.js"],"names":["define","dojo","dojox","declare","useFullIdInQueries","_toJsonQuery","args","jsonQueryPagination","first","self","this","query","jsonQuery","buildQuery","path","isDataItem","__id","newQuery","idAttribute","i","value","newPath","test","_escapeString","queryOptions","ignoreCase","simplifiedQuery","encodeURIComponent","toJson","queryStr","replace","t","sort","length","descending","attribute","start","count","fetch","inherited","arguments","isUpdateable","matchesQuery","item","request","_jsonQuery","json","clientSideFetch","baseResults","clientSidePaging","querySuperSet","argsSuper","argsSub"],"mappings":";;;;;;;AAAAA,QAAQ,OAAQ,SAAU,SAASC,EAAMC,GAIzC,OAAOD,EAAKE,QAAQ,4BAA6B,MAChDC,oBAAoB,EACpBC,aAAc,SAASC,EAAMC,GAC5B,IAAIC,GAAQ,EACRC,EAAOC,KAwBX,GAAGJ,EAAKK,OAA8B,iBAAdL,EAAKK,MAAkB,CAE9C,IAAIC,EAAY,OAzBjB,SAASC,EAAWC,EAAMH,GACzB,IAAII,EAAaJ,EAAMK,KACvB,GAAGD,EAAW,CAEb,IAAIE,KACJA,EAASR,EAAKS,aAAeT,EAAKL,mBAAqBO,EAAMK,KAAOL,EAAMF,EAAKS,aAC/EP,EAAQM,EAET,IAAI,IAAIE,KAAKR,EAAM,CAElB,IAAIS,EAAQT,EAAMQ,GACdE,EAAUP,GAAQ,oBAAoBQ,KAAKH,GAAK,IAAMA,EAAI,IAAMlB,EAAKsB,cAAcJ,GAAK,KACzFC,GAAyB,iBAATA,EAClBP,EAAWQ,EAASD,GACL,KAAPA,IACRR,IAAcJ,EAAQ,GAAK,KAAOa,IAC9BN,GAA8B,iBAATK,GAAqBd,EAAKkB,cAAgBlB,EAAKkB,aAAaC,WAAc,IAAM,MACtGhB,EAAKiB,gBAAkBC,mBAAmBP,GAASnB,EAAK2B,OAAOR,IAClEZ,GAAQ,IAQVK,CAAW,IAAKP,EAAKK,OACjBH,EAIHI,EAAY,GAFZA,GAAa,KAIdN,EAAKuB,SAAWjB,EAAUkB,QAAQ,SAAS,SAASC,GAAG,MAAY,KAALA,EAAW,IAAMA,SACtEzB,EAAKK,OAAuB,KAAdL,EAAKK,QAC5BL,EAAKK,MAAQ,IAGd,IAAIqB,EAAO1B,EAAK0B,KAChB,GAAGA,EAAK,CAIP,IAFA1B,EAAKuB,SAAWvB,EAAKuB,WAAkC,iBAAdvB,EAAKK,MAAoBL,EAAKK,MAAQ,IAC/EH,GAAQ,EACJW,EAAI,EAAGA,EAAIa,EAAKC,OAAQd,IAC3Bb,EAAKuB,WAAarB,EAAQ,IAAM,MAAQwB,EAAKb,GAAGe,WAAa,KAAO,KAAO,KAAOjC,EAAKsB,cAAcS,EAAKb,GAAGgB,WAAa,IAC1H3B,GAAQ,EAETF,EAAKuB,UAAY,IAQlB,OALGtB,IAAwBD,EAAK8B,OAAS9B,EAAK+B,SAE7C/B,EAAKuB,UAAYvB,EAAKuB,WAAkC,iBAAdvB,EAAKK,MAAoBL,EAAKK,MAAQ,KAC/E,KAAOL,EAAK8B,OAAS,IAAM,KAAO9B,EAAK+B,OAAS/B,EAAK8B,OAAS,GAAK9B,EAAK+B,MAAQ,IAAM,KAE7D,iBAAjB/B,EAAKuB,UACdvB,EAAKuB,SAAWvB,EAAKuB,SAASC,QAAQ,SAAS,SAASC,GAAG,MAAY,KAALA,EAAW,IAAMA,IAC5EzB,EAAKuB,UAENvB,EAAKK,OAEbJ,qBAAqB,EACrB+B,MAAO,SAAShC,GAEf,OADAI,KAAKL,aAAaC,EAAMI,KAAKH,qBACtBG,KAAK6B,UAAUC,YAEvBC,aAAc,WACb,OAAO,GAERC,aAAc,SAASC,EAAKC,GAE3B,OADAA,EAAQC,WAAaD,EAAQC,YAAc3C,EAAM4C,KAAKnC,MAAMD,KAAKL,aAAauC,IACvEA,EAAQC,YAAYF,IAAOV,QAEnCc,gBAAiB,SAAoBH,EAAkBI,GAGtD,OAFAJ,EAAQC,WAAaD,EAAQC,YAAc3C,EAAM4C,KAAKnC,MAAMD,KAAKL,aAAauC,IAEvElC,KAAKuC,iBAAiBL,EAASA,EAAQC,WAAWG,KAE1DE,cAAe,SAASC,EAAUC,GACjC,OAAID,EAAUxC,MAGPD,KAAK6B,UAAUC,WAFdY,EAAQzC","file":"../../../data/util/JsonQuery.js","sourcesContent":["define([\"dojo\", \"dojox\"], function(dojo, dojox) {\r\n\r\n// this is a mixin to convert object attribute queries to\r\n// JSONQuery/JSONPath syntax to be sent to the server.\r\nreturn dojo.declare(\"dojox.data.util.JsonQuery\", null, {\r\n\tuseFullIdInQueries: false,\r\n\t_toJsonQuery: function(args, jsonQueryPagination){\r\n\t\tvar first = true;\r\n\t\tvar self = this;\r\n\t\tfunction buildQuery(path, query){\r\n\t\t\tvar isDataItem = query.__id;\r\n\t\t\tif(isDataItem){\r\n\t\t\t\t// it is a reference to a persisted object, need to make it a query by id\r\n\t\t\t\tvar newQuery = {};\r\n\t\t\t\tnewQuery[self.idAttribute] = self.useFullIdInQueries ? query.__id : query[self.idAttribute];\r\n\t\t\t\tquery = newQuery;\r\n\t\t\t}\r\n\t\t\tfor(var i in query){\r\n\t\t\t\t// iterate through each property, adding them to the overall query\r\n\t\t\t\tvar value = query[i];\r\n\t\t\t\tvar newPath = path + (/^[a-zA-Z_][\\w_]*$/.test(i) ? '.' + i : '[' + dojo._escapeString(i) + ']');\r\n\t\t\t\tif(value && typeof value == \"object\"){\r\n\t\t\t\t\tbuildQuery(newPath, value);\r\n\t\t\t\t}else if(value!=\"*\"){ // full wildcards can be ommitted\r\n\t\t\t\t\tjsonQuery += (first ? \"\" : \"&\") + newPath +\r\n\t\t\t\t\t\t((!isDataItem && typeof value == \"string\" && args.queryOptions && args.queryOptions.ignoreCase) ? \"~\" : \"=\") +\r\n\t\t\t\t\t\t (self.simplifiedQuery ? encodeURIComponent(value) : dojo.toJson(value));\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// performs conversion of Dojo Data query objects and sort arrays to JSONQuery strings\r\n\t\tif(args.query && typeof args.query == \"object\"){\r\n\t\t\t// convert Dojo Data query objects to JSONQuery\r\n\t\t\tvar jsonQuery = \"[?(\";\r\n\t\t\tbuildQuery(\"@\", args.query);\r\n\t\t\tif(!first){\r\n\t\t\t\t// use ' instead of \" for quoting in JSONQuery, and end with ]\r\n\t\t\t\tjsonQuery += \")]\";\r\n\t\t\t}else{\r\n\t\t\t\tjsonQuery = \"\";\r\n\t\t\t}\r\n\t\t\targs.queryStr = jsonQuery.replace(/\\\\\"|\"/g,function(t){return t == '\"' ? \"'\" : t;});\r\n\t\t}else if(!args.query || args.query == '*'){\r\n\t\t\targs.query = \"\";\r\n\t\t}\r\n\t\t\r\n\t\tvar sort = args.sort;\r\n\t\tif(sort){\r\n\t\t\t// if we have a sort order, add that to the JSONQuery expression\r\n\t\t\targs.queryStr = args.queryStr || (typeof args.query == 'string' ? args.query : \"\");\r\n\t\t\tfirst = true;\r\n\t\t\tfor(i = 0; i < sort.length; i++){\r\n\t\t\t\targs.queryStr += (first ? '[' : ',') + (sort[i].descending ? '\\\\' : '/') + \"@[\" + dojo._escapeString(sort[i].attribute) + \"]\";\r\n\t\t\t\tfirst = false;\r\n\t\t\t}\r\n\t\t\targs.queryStr += ']';\r\n\t\t}\r\n\t\t// this is optional because with client side paging JSONQuery doesn't yield the total count\r\n\t\tif(jsonQueryPagination && (args.start || args.count)){\r\n\t\t\t// pagination\r\n\t\t\targs.queryStr = (args.queryStr || (typeof args.query == 'string' ? args.query : \"\")) +\r\n\t\t\t\t'[' + (args.start || '') + ':' + (args.count ? (args.start || 0) + args.count : '') + ']';\r\n\t\t}\r\n\t\tif(typeof args.queryStr == 'string'){\r\n\t\t\targs.queryStr = args.queryStr.replace(/\\\\\"|\"/g,function(t){return t == '\"' ? \"'\" : t;});\r\n\t\t\treturn args.queryStr;\r\n\t\t}\r\n\t\treturn args.query;\r\n\t},\r\n\tjsonQueryPagination: true,\r\n\tfetch: function(args){\r\n\t\tthis._toJsonQuery(args, this.jsonQueryPagination);\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\tisUpdateable: function(){\r\n\t\treturn true;\r\n\t},\r\n\tmatchesQuery: function(item,request){\r\n\t\trequest._jsonQuery = request._jsonQuery || dojox.json.query(this._toJsonQuery(request));\r\n\t\treturn request._jsonQuery([item]).length;\r\n\t},\r\n\tclientSideFetch: function(/*Object*/ request,/*Array*/ baseResults){\r\n\t\trequest._jsonQuery = request._jsonQuery || dojox.json.query(this._toJsonQuery(request));\r\n\t\t// we use client side paging function here instead of JSON Query because we must also determine the total count\r\n\t\treturn this.clientSidePaging(request, request._jsonQuery(baseResults));\r\n\t},\r\n\tquerySuperSet: function(argsSuper,argsSub){\r\n\t\tif(!argsSuper.query){\r\n\t\t\treturn argsSub.query;\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t}\r\n\t\r\n});\r\n\r\n});\r\n"]}