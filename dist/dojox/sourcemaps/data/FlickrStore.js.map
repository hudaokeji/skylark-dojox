{"version":3,"sources":["data/FlickrStore.js"],"names":["define","lang","declare","array","simpleFetch","scriptIO","connect","dateStamp","AdapterRegistry","FlickrStore","constructor","args","label","this","urlPreventCache","_storeRef","_assertIsItem","item","isItem","Error","_assertIsAttribute","attribute","getFeatures","dojo.data.api.Read","getValue","defaultValue","values","getValues","length","getAttributes","hasAttribute","v","isItemLoaded","loadItem","keywordArgs","getLabel","getLabelAttributes","containsValue","value","i","u","hitch","s","title","author","published","date_taken","media","m","replace","link","tags","split","description","close","request","_fetchItems","fetchHandler","errorHandler","rq","query","content","format","tagmode","forEach","id","userid","groupid","userids","ids","handle","getArgs","url","dojox","data","urlRegistry","match","preventCache","myHandler","disconnect","_processFlickrData","get","addErrback","error","items","_unescapeHtml","str","extend","feedsUrl","reg","register","jsonFlickrFeed"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,mBAAoB,6BAA8B,iBACjG,qBAAsB,kBAAmB,wBACzC,SAASC,EAAMC,EAASC,EAAOC,EAAaC,EAAUC,EAASC,EAAWC,GAE5E,IAAIC,EAAcP,EAAQ,yBAA0B,MACnDQ,YAAa,SAAmBC,GAS5BA,GAAQA,EAAKC,QACfC,KAAKD,MAAQD,EAAKC,OAEhBD,GAAQ,oBAAqBA,IAC/BE,KAAKC,kBAAkBH,EAAKG,kBAI9BC,UAAW,KAEXH,MAAO,QAGPE,iBAAiB,EAEjBE,cAAe,SAAoBC,GAKlC,IAAIJ,KAAKK,OAAOD,GACf,MAAM,IAAIE,MAAM,wFAIlBC,mBAAoB,SAAqCC,GAKxD,GAAwB,iBAAdA,EACT,MAAM,IAAIF,MAAM,8GAIlBG,YAAa,WAGZ,OACCC,sBAAsB,IAIxBC,SAAU,SAASP,EAAMI,EAAWI,GAGnC,IAAIC,EAASb,KAAKc,UAAUV,EAAMI,GAClC,OAAGK,GAAUA,EAAOE,OAAS,EACrBF,EAAO,GAERD,GAGRI,cAAe,SAASZ,GAGvB,OACC,QAAS,cAAe,SAAU,gBAAiB,YACnD,WAAY,gBAAiB,iBAAkB,OAAQ,SAIzDa,aAAc,SAASb,EAAMI,GAG5B,IAAIU,EAAIlB,KAAKW,SAASP,EAAKI,GAC3B,SAAGU,GAAW,KAANA,IAAkB,IAANA,IAMrBC,aAAc,SAASf,GAGtB,OAAOJ,KAAKK,OAAOD,IAGpBgB,SAAU,SAASC,KAKnBC,SAAU,SAASlB,GAGlB,OAAOJ,KAAKW,SAASP,EAAKJ,KAAKD,QAGhCwB,mBAAoB,SAASnB,GAG5B,OAAQJ,KAAKD,QAGdyB,cAAe,SAASpB,EAAMI,EAAWiB,GAIxC,IADA,IAAIZ,EAASb,KAAKc,UAAUV,EAAKI,GACzBkB,EAAI,EAAGA,EAAIb,EAAOE,OAAQW,IACjC,GAAGb,EAAOa,KAAOD,EAChB,OAAO,EAGT,OAAO,GAGRX,UAAW,SAASV,EAAMI,GAIzBR,KAAKG,cAAcC,GACnBJ,KAAKO,mBAAmBC,GACxB,IAAImB,EAAIvC,EAAKwC,MAAM5B,KAAM,iBACrB6B,EAAIzC,EAAKwC,MAAMlC,EAAW,iBAC9B,OAAOc,GACN,IAAK,QACJ,OAASmB,EAAEvB,EAAK0B,QACjB,IAAK,SACJ,OAASH,EAAEvB,EAAK2B,SACjB,IAAK,gBACJ,OAASF,EAAEzB,EAAK4B,YACjB,IAAK,YACJ,OAASH,EAAEzB,EAAK6B,aACjB,IAAK,gBACJ,OAAS7B,EAAK8B,MAAMC,EAAEC,QAAQ,OAAQ,QACvC,IAAK,WACJ,OAAShC,EAAK8B,MAAMC,EAAEC,QAAQ,OAAQ,MACvC,IAAK,iBACJ,OAAShC,EAAK8B,MAAMC,GACrB,IAAK,OACJ,OAAS/B,EAAKiC,MACf,IAAK,OACJ,OAAOjC,EAAKkC,KAAKC,MAAM,KACxB,IAAK,cACJ,OAASZ,EAAEvB,EAAKoC,cACjB,QACC,WAIHnC,OAAQ,SAASD,GAGhB,SAAGA,GAAQA,EAAKJ,KAAKE,aAAeF,OAMrCyC,MAAO,SAASC,KAKhBC,YAAa,SAASD,EAASE,EAAcC,GAU5C,IAAIC,EAAKJ,EAAQK,MAAQL,EAAQK,UAG7BC,GACHC,OAAQ,OACRC,QAAQ,OAGT5D,EAAM6D,SACH,OAAQ,UAAW,OAAQ,KAAM,OACnC,SAASzB,GACLoB,EAAGpB,KAAKsB,EAAQtB,GAAKoB,EAAGpB,MAI7BsB,EAAQI,GAAKN,EAAGM,IAAMN,EAAGO,QAAUP,EAAGQ,QAEnCR,EAAGS,UACLP,EAAQQ,IAAMV,EAAGS,SAIlB,IAAIE,EAAS,KACTC,GACHC,IAAKC,MAAMC,KAAKjE,YAAYkE,YAAYC,MAAMrB,GAC9CsB,aAAchE,KAAKC,gBACnB+C,QAASA,GAENiB,EAAY7E,EAAKwC,MAAM5B,KAAM,SAAS6D,GACpCJ,GACJhE,EAAQyE,WAAWT,GAIpBb,EAAa5C,KAAKmE,mBAAmBN,GAAOnB,KAE7Ce,EAAShE,EAAQA,QAAQ,iBAAkBwE,GAC5BzE,EAAS4E,IAAIV,GAInBW,WAAW,SAASC,GAC5B7E,EAAQyE,WAAWT,GACnBZ,EAAayB,EAAO5B,MAItByB,mBAAoB,SAASN,GAC5B,IAAIU,KACJ,GAAGV,EAAKU,MAAM,CACbA,EAAQV,EAAKU,MAEb,IAAI,IAAI7C,EAAI,EAAGA,EAAImC,EAAKU,MAAMxD,OAAQW,IAAI,CAC9BmC,EAAKU,MAAM7C,GACjB1B,KAAKE,WAAaF,MAGzB,OAAOuE,GAGRC,cAAe,SAAoBC,GAalC,OAAOA,EAAIrC,QAAQ,UAAW,KAC3BA,QAAQ,SAAU,KAClBA,QAAQ,SAAU,KAClBA,QAAQ,WAAY,KACpBA,QAAQ,UAAW,QAIxBhD,EAAKsF,OAAO9E,EAAaL,GAEzB,IAAIoF,EAAW,wCAEXC,EAAMhF,EAAYkE,YAAc,IAAInE,GAAgB,GAcxD,GAZAiF,EAAIC,SAAS,aACZ,SAASnC,GAAU,QAASA,EAAQK,MAAe,SACnD4B,EAAS,mBAGVC,EAAIC,SAAS,UACZ,SAASnC,GAAU,OAAO,GAC1BiC,EAAS,sBAKNG,EACH,IAAIA,EAAiB,SAASjB,KAG/B,OAAOjE","file":"../../data/FlickrStore.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/_base/array\", \"dojo/data/util/simpleFetch\", \"dojo/io/script\", \r\n\t\t\"dojo/_base/connect\", \"dojo/date/stamp\", \"dojo/AdapterRegistry\"], \r\n  function(lang, declare, array, simpleFetch, scriptIO, connect, dateStamp, AdapterRegistry) {\r\n\r\nvar FlickrStore = declare(\"dojox.data.FlickrStore\", null, {\r\n\tconstructor: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tInitializer for the FlickrStore store.\r\n\t\t// description:\r\n\t\t//\t\tThe FlickrStore is a Datastore interface to one of the basic services\r\n\t\t//\t\tof the Flickr service, the public photo feed.  This does not provide\r\n\t\t//\t\taccess to all the services of Flickr.\r\n\t\t//\t\tThis store cannot do * and ? filtering as the flickr service\r\n\t\t//\t\tprovides no interface for wildcards.\r\n\t\tif(args && args.label){\r\n\t\t\tthis.label = args.label;\r\n\t\t}\r\n\t\tif(args && \"urlPreventCache\" in args){\r\n\t\t\tthis.urlPreventCache = args.urlPreventCache?true:false;\r\n\t\t}\r\n\t},\r\n\r\n\t_storeRef: \"_S\",\r\n\r\n\tlabel: \"title\",\r\n\r\n\t//Flag to allor control of if cache prevention is enabled or not.\r\n\turlPreventCache: true,\r\n\r\n\t_assertIsItem: function(/* item */ item){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed an item in the store.\r\n\t\t// item:\r\n\t\t//\t\tThe item to test for being contained by the store.\r\n\t\tif(!this.isItem(item)){\r\n\t\t\tthrow new Error(\"dojox.data.FlickrStore: a function was passed an item argument that was not an item\");\r\n\t\t}\r\n\t},\r\n\r\n\t_assertIsAttribute: function(/* attribute-name-string */ attribute){\r\n\t\t// summary:\r\n\t\t//\t\tThis function tests whether the item passed in is indeed a valid 'attribute' like type for the store.\r\n\t\t// attribute:\r\n\t\t//\t\tThe attribute to test for being contained by the store.\r\n\t\tif(typeof attribute !== \"string\"){\r\n\t\t\tthrow new Error(\"dojox.data.FlickrStore: a function was passed an attribute argument that was not an attribute name string\");\r\n\t\t}\r\n\t},\r\n\r\n\tgetFeatures: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getFeatures()\r\n\t\treturn {\r\n\t\t\t'dojo.data.api.Read': true\r\n\t\t};\r\n\t},\r\n\r\n\tgetValue: function(item, attribute, defaultValue){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\t\tvar values = this.getValues(item, attribute);\r\n\t\tif(values && values.length > 0){\r\n\t\t\treturn values[0];\r\n\t\t}\r\n\t\treturn defaultValue;\r\n\t},\r\n\r\n\tgetAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getAttributes()\r\n\t\treturn [\r\n\t\t\t\"title\", \"description\", \"author\", \"datePublished\", \"dateTaken\",\r\n\t\t\t\"imageUrl\", \"imageUrlSmall\", \"imageUrlMedium\", \"tags\", \"link\"\r\n\t\t];\r\n\t},\r\n\r\n\thasAttribute: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.hasAttributes()\r\n\t\tvar v = this.getValue(item,attribute);\r\n\t\tif(v || v === \"\" || v === false){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tisItemLoaded: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItemLoaded()\r\n\t\treturn this.isItem(item);\r\n\t},\r\n\r\n\tloadItem: function(keywordArgs){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.loadItem()\r\n\t},\r\n\r\n\tgetLabel: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabel()\r\n\t\treturn this.getValue(item,this.label);\r\n\t},\r\n\t\r\n\tgetLabelAttributes: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getLabelAttributes()\r\n\t\treturn [this.label];\r\n\t},\r\n\r\n\tcontainsValue: function(item, attribute, value){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.containsValue()\r\n\t\tvar values = this.getValues(item,attribute);\r\n\t\tfor(var i = 0; i < values.length; i++){\r\n\t\t\tif(values[i] === value){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\tgetValues: function(item, attribute){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.getValue()\r\n\r\n\t\tthis._assertIsItem(item);\r\n\t\tthis._assertIsAttribute(attribute);\r\n\t\tvar u = lang.hitch(this, \"_unescapeHtml\");\r\n\t\tvar s = lang.hitch(dateStamp, \"fromISOString\");\r\n\t\tswitch(attribute){\r\n\t\t\tcase \"title\":\r\n\t\t\t\treturn [ u(item.title) ];\r\n\t\t\tcase \"author\":\r\n\t\t\t\treturn [ u(item.author) ];\r\n\t\t\tcase \"datePublished\":\r\n\t\t\t\treturn [ s(item.published) ];\r\n\t\t\tcase \"dateTaken\":\r\n\t\t\t\treturn [ s(item.date_taken) ];\r\n\t\t\tcase \"imageUrlSmall\":\r\n\t\t\t\treturn [ item.media.m.replace(/_m\\./, \"_s.\") ];\r\n\t\t\tcase \"imageUrl\":\r\n\t\t\t\treturn [ item.media.m.replace(/_m\\./, \".\") ];\r\n\t\t\tcase \"imageUrlMedium\":\r\n\t\t\t\treturn [ item.media.m ];\r\n\t\t\tcase \"link\":\r\n\t\t\t\treturn [ item.link ];\r\n\t\t\tcase \"tags\":\r\n\t\t\t\treturn item.tags.split(\" \");\r\n\t\t\tcase \"description\":\r\n\t\t\t\treturn [ u(item.description) ];\r\n\t\t\tdefault:\r\n\t\t\t\treturn [];\r\n\t\t}\r\n\t},\r\n\r\n\tisItem: function(item){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.isItem()\r\n\t\tif(item && item[this._storeRef] === this){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\tclose: function(request){\r\n\t\t// summary:\r\n\t\t//\t\tSee dojo/data/api/Read.close()\r\n\t},\r\n\r\n\t_fetchItems: function(request, fetchHandler, errorHandler){\r\n\t\t// summary:\r\n\t\t//\t\tFetch flickr items that match to a query\r\n\t\t// request:\r\n\t\t//\t\tA request object\r\n\t\t// fetchHandler:\r\n\t\t//\t\tA function to call for fetched items\r\n\t\t// errorHandler:\r\n\t\t//\t\tA function to call on error\r\n\r\n\t\tvar rq = request.query = request.query || {};\r\n\r\n\t\t//Build up the content to send the request for.\r\n\t\tvar content = {\r\n\t\t\tformat: \"json\",\r\n\t\t\ttagmode:\"any\"\r\n\t\t};\r\n\r\n\t\tarray.forEach(\r\n\t\t\t[ \"tags\", \"tagmode\", \"lang\", \"id\", \"ids\" ],\r\n\t\t\tfunction(i){\r\n\t\t\t\tif(rq[i]){ content[i] = rq[i]; }\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tcontent.id = rq.id || rq.userid || rq.groupid;\r\n\r\n\t\tif(rq.userids){\r\n\t\t\tcontent.ids = rq.userids;\r\n\t\t}\r\n\r\n\t\t//Linking this up to Flickr is a PAIN!\r\n\t\tvar handle = null;\r\n\t\tvar getArgs = {\r\n\t\t\turl: dojox.data.FlickrStore.urlRegistry.match(request),\r\n\t\t\tpreventCache: this.urlPreventCache,\r\n\t\t\tcontent: content\r\n\t\t};\r\n\t\tvar myHandler = lang.hitch(this, function(data){\r\n\t\t\tif(!!handle){\r\n\t\t\t\tconnect.disconnect(handle);\r\n\t\t\t}\r\n\r\n\t\t\t//Process the items...\r\n\t\t\tfetchHandler(this._processFlickrData(data), request);\r\n\t\t});\r\n\t\thandle = connect.connect(\"jsonFlickrFeed\", myHandler);\r\n\t\tvar deferred = scriptIO.get(getArgs);\r\n\t\t\r\n\t\t//We only set up the errback, because the callback isn't ever really used because we have\r\n\t\t//to link to the jsonFlickrFeed function....\r\n\t\tdeferred.addErrback(function(error){\r\n\t\t\tconnect.disconnect(handle);\r\n\t\t\terrorHandler(error, request);\r\n\t\t});\r\n\t},\r\n\r\n\t_processFlickrData: function(data){\r\n\t\tvar items = [];\r\n\t\tif(data.items){\r\n\t\t\titems = data.items;\r\n\t\t\t//Add on the store ref so that isItem can work.\r\n\t\t\tfor(var i = 0; i < data.items.length; i++){\r\n\t\t\t\tvar item = data.items[i];\r\n\t\t\t\titem[this._storeRef] = this;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn items;\r\n\t},\r\n\r\n\t_unescapeHtml: function(/*String*/ str){\r\n\t\t// summary:\r\n\t\t//\t\tUtility function to un-escape XML special characters in an\r\n\t\t//\t\tHTML string.\r\n\t\t// str: String.\r\n\t\t//\t\tThe string to un-escape\r\n\t\t// returns:\r\n\t\t//\t\tHTML String converted back to the normal text (unescaped)\r\n\t\t//\t\tcharacters (<,>,&, \", etc,).\r\n\r\n\t\t//TODO:\r\n\t\t//\t\tCheck to see if theres already compatible escape() in\r\n\t\t//\t\tdojo.string or dojo.html\r\n\t\treturn\tstr.replace(/&amp;/gm, \"&\").\r\n\t\t\t\t\treplace(/&lt;/gm, \"<\").\r\n\t\t\t\t\treplace(/&gt;/gm, \">\").\r\n\t\t\t\t\treplace(/&quot;/gm, \"\\\"\").\r\n\t\t\t\t\treplace(/&#39;/gm, \"'\");\r\n\t}\r\n});\r\n\r\nlang.extend(FlickrStore, simpleFetch);\r\n\r\nvar feedsUrl = \"http://api.flickr.com/services/feeds/\";\r\n\r\nvar reg = FlickrStore.urlRegistry = new AdapterRegistry(true);\r\n\r\nreg.register(\"group pool\",\r\n\tfunction(request){ return !!request.query[\"groupid\"]; },\r\n\tfeedsUrl+\"groups_pool.gne\"\r\n);\r\n\r\nreg.register(\"default\",\r\n\tfunction(request){ return true; },\r\n\tfeedsUrl+\"photos_public.gne\"\r\n);\r\n\r\n//We have to define this because of how the Flickr API works.\r\n//This somewhat stinks, but what can you do?\r\nif(!jsonFlickrFeed){\r\n\tvar jsonFlickrFeed = function(data){};\r\n}\r\n\r\nreturn FlickrStore;\r\n});\r\n"]}