{"version":3,"sources":["data/StoreExplorer.js"],"names":["dojo","provide","require","declare","dijit","layout","BorderContainer","constructor","options","mixin","this","store","columnWidth","stringQueries","showAllColumns","postCreate","self","inherited","arguments","contentPane","ContentPane","region","placeAt","addButton","name","action","button","form","Button","label","containerNode","appendChild","domNode","onClick","queryText","document","createElement","innerHTML","id","queryTextBox","type","query","value","setQuery","fromJson","createNewButton","hitch","deleteButton","items","grid","selection","getSelected","i","length","deleteItem","setItemName","attr","moduleUrl","save","onError","error","alert","tree","refreshItem","revert","columnName","prompt","gridLayout","push","field","formatter","editable","centerCP","dojox","DataGrid","canEdit","inCell","inRowIndex","_copyAttr","Date","trailingCP","splitter","style","data","ItemExplorer","connect","selected","setItem","gridOnFetchComplete","_onFetchComplete","setStore","_formatCell","isItem","getLabel","getIdentity","formatCell","_pending_requests","defaultOnComplete","req","column","key","item","j","k","idAttributes","getIdentityAttributes","_score","keys","getAttributes","found","styles","sort","a","b","splice","width","Math","round","apply","queryOptions","cache","createNew","props","newItem","e"],"mappings":"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","file":"../../data/StoreExplorer.js","sourcesContent":["dojo.provide(\"dojox.data.StoreExplorer\");\r\ndojo.require(\"dojox.grid.DataGrid\");\r\ndojo.require(\"dojox.data.ItemExplorer\");\r\ndojo.require(\"dijit.layout.BorderContainer\");\r\ndojo.require(\"dijit.layout.ContentPane\");\r\n\r\ndojo.declare(\"dojox.data.StoreExplorer\", dijit.layout.BorderContainer, {\r\n\tconstructor: function(options){\r\n\t\tdojo.mixin(this, options);\r\n\t},\r\n\tstore: null,\r\n\tcolumnWidth: '',\r\n\tstringQueries: false,\r\n\tshowAllColumns: false,\r\n\tpostCreate: function(){\r\n\t\tvar self = this;\r\n\t\tthis.inherited(arguments);\r\n\t\tvar contentPane = new dijit.layout.ContentPane({\r\n\t\t\tregion:'top'\r\n\t\t}).placeAt(this);\r\n\t\tfunction addButton(name, action){\r\n\t\t\tvar button = new dijit.form.Button({label: name});\r\n\t\t\tcontentPane.containerNode.appendChild(button.domNode);\r\n\t\t\tbutton.onClick = action;\r\n\t\t\treturn button;\r\n\t\t}\r\n\t\tvar queryText = contentPane.containerNode.appendChild(document.createElement(\"span\"));\r\n\t\tqueryText.innerHTML = \"Enter query: &nbsp;\";\r\n\t\tqueryText.id = \"queryText\";\r\n\t\tvar queryTextBox = contentPane.containerNode.appendChild(document.createElement(\"input\"));\r\n\t\tqueryTextBox.type = \"text\";\r\n\t\tqueryTextBox.id = \"queryTextBox\";\r\n\t\taddButton(\"Query\",function(){\r\n\t\t\tvar query = queryTextBox.value;\r\n\t\t\tself.setQuery(self.stringQueries ? query : dojo.fromJson(query));\r\n\t\t});\r\n\t\tcontentPane.containerNode.appendChild(document.createElement(\"span\")).innerHTML = \"&nbsp;&nbsp;&nbsp;\";\r\n\t\tvar createNewButton = addButton(\"Create New\", dojo.hitch(this, \"createNew\"));\r\n\t\tvar deleteButton = addButton(\"Delete\",function(){\r\n\t\t\tvar items = grid.selection.getSelected();\r\n\t\t\tfor(var i = 0; i < items.length; i++){\r\n\t\t\t\tself.store.deleteItem(items[i]);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setItemName = function(name){\r\n\t\t\tcreateNewButton.attr('label',\"<img style='width:12px; height:12px' src='\" + dojo.moduleUrl(\"dijit.themes.tundra.images\",\"dndCopy.png\") + \"' /> Create New \" + name);\r\n\t\t\tdeleteButton.attr('label',\"Delete \" + name);\r\n\t\t};\r\n\t\taddButton(\"Save\",function(){\r\n\t\t\tself.store.save({onError:function(error){\r\n\t\t\t\talert(error);\r\n\t\t\t}});\r\n\t\t\t//refresh the tree\r\n\t\t\tself.tree.refreshItem();\r\n\t\t});\r\n\t\taddButton(\"Revert\",function(){\r\n\t\t\tself.store.revert();\r\n\t\t});\r\n\t\taddButton(\"Add Column\", function(){\r\n\t\t\tvar columnName = prompt(\"Enter column name:\",\"property\");\r\n\t\t\tif(columnName){\r\n\t\t\t\tself.gridLayout.push({\r\n\t\t\t\t\t\tfield: columnName,\r\n\t\t\t\t\t\tname: columnName,\r\n\t\t\t\t\t\tformatter: dojo.hitch(self,\"_formatCell\"),\r\n\t\t\t\t\t\teditable: true\r\n\t\t\t\t\t});\r\n\t\t\t\tself.grid.attr(\"structure\",self.gridLayout);\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar centerCP = new dijit.layout.ContentPane({\r\n\t\t\tregion:'center'\r\n\t\t}).placeAt(this);\r\n\t\tvar grid = this.grid = new dojox.grid.DataGrid(\r\n\t\t\t\t{store: this.store}\r\n\t\t\t);\r\n\t\tcenterCP.attr(\"content\", grid);\r\n\t\tgrid.canEdit = function(inCell, inRowIndex){\r\n\t\t\tvar value = this._copyAttr(inRowIndex, inCell.field);\r\n\t\t\treturn !(value && typeof value == 'object') || value instanceof Date;\r\n\t\t}\r\n\r\n\t\tvar trailingCP = new dijit.layout.ContentPane({\r\n\t\t\tregion: 'trailing',\r\n\t\t\tsplitter: true,\r\n\t\t\tstyle: \"width: 300px\"\r\n\t\t}).placeAt(this);\r\n\r\n\t\tvar tree = this.tree = new dojox.data.ItemExplorer({\r\n\t\t\tstore: this.store}\r\n\t\t\t);\r\n\t\ttrailingCP.attr(\"content\", tree);\r\n\r\n\t\tdojo.connect(grid, \"onCellClick\", function(){\r\n\t\t\tvar selected = grid.selection.getSelected()[0];\r\n\t\t\ttree.setItem(selected);\r\n\t\t});\r\n\r\n\t\tthis.gridOnFetchComplete = grid._onFetchComplete;\r\n\t\tthis.setStore(this.store);\r\n\t},\r\n\tsetQuery: function(query, options){\r\n\t\tthis.grid.setQuery(query, options);\r\n\t},\r\n\t_formatCell: function(value){\r\n\t\tif(this.store.isItem(value)){\r\n\t\t\treturn this.store.getLabel(value) || this.store.getIdentity(value);\r\n\t\t}\r\n\t\treturn value;\r\n\t},\r\n\tsetStore: function(store){\r\n\t\tthis.store = store;\r\n\t\tvar self = this;\r\n\t\tvar grid = this.grid;\r\n\t\tgrid._pending_requests[0] = false;\r\n\t\tfunction formatCell(value){\r\n\t\t\treturn self._formatCell(value);\r\n\t\t}\r\n\t\tvar defaultOnComplete = this.gridOnFetchComplete;\r\n\t\tgrid._onFetchComplete = function(items, req){\r\n\t\t\tvar layout = self.gridLayout = [];\r\n\t\t\tvar column, key, item, i, j, k, idAttributes = store.getIdentityAttributes();\r\n\t\t\tfor(i = 0; i < idAttributes.length; i++){\r\n\t\t\t\tkey = idAttributes[i];\r\n\t\t\t\tlayout.push({\r\n\t\t\t\t\tfield: key,\r\n\t\t\t\t\tname: key,\r\n\t\t\t\t\t_score: 100,\r\n\t\t\t\t\tformatter: formatCell,\r\n\t\t\t\t\teditable: false\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t\tfor(i=0; item = items[i++];){\r\n\t\t\t\tvar keys = store.getAttributes(item);\r\n\t\t\t\tfor(k=0; key = keys[k++];){\r\n\t\t\t\t\tvar found = false;\r\n\t\t\t\t\tfor(j=0; column = layout[j++];){\r\n\t\t\t\t\t\tif(column.field == key){\r\n\t\t\t\t\t\t\tcolumn._score++;\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!found){\r\n\t\t\t\t\t\tlayout.push({\r\n\t\t\t\t\t\t\tfield: key,\r\n\t\t\t\t\t\t\tname: key,\r\n\t\t\t\t\t\t\t_score: 1,\r\n\t\t\t\t\t\t\tformatter: formatCell,\r\n\t\t\t\t\t\t\tstyles: \"white-space:nowrap; \",\r\n\t\t\t\t\t\t\teditable: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlayout = layout.sort(function(a, b){\r\n\t\t\t\treturn  b._score - a._score;\r\n\t\t\t});\r\n\t\t\tif(!self.showAllColumns){\r\n\t\t\t\tfor(j=0; column=layout[j]; j++){\r\n\t\t\t\t\tif(column._score < items.length/40 * j) {\r\n\t\t\t\t\t\tlayout.splice(j, layout.length-j);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(j=0; column = layout[j++];){\r\n\t\t\t\tcolumn.width=self.columnWidth || Math.round(100/layout.length) + '%';\r\n\t\t\t}\r\n\t\t\tgrid._onFetchComplete = defaultOnComplete;\r\n\t\t\tgrid.attr(\"structure\",layout);\r\n\t\t\tvar retValue = defaultOnComplete.apply(this, arguments);\r\n\r\n\t\t}\r\n\t\tgrid.setStore(store);\r\n\t\tthis.queryOptions = {cache:true};\r\n\t\tthis.tree.setStore(store);\r\n\t},\r\n\tcreateNew: function(){\r\n\t\tvar props = prompt(\"Enter any properties (in JSON literal form) to put in the new item (passed to the newItem constructor):\",\"{ }\");\r\n\t\tif(props){\r\n\t\t\ttry{\r\n\t\t\t\tthis.store.newItem(dojo.fromJson(props));\r\n\t\t\t}catch(e){\r\n\t\t\t\talert(e);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n});\r\n"]}