{"version":3,"sources":["date/hebrew.js"],"names":["define","dojox","lang","dd","HDate","dhebrew","getObject","getDaysInMonth","month","getDaysInHebrewMonth","getMonth","getFullYear","compare","dateheb1","dateheb2","portion","toGregorian","apply","arguments","add","date","interval","amount","newHebrDate","setDate","getDate","day","getDay","remdays","adddays","newamount","weeks","parseInt","newday","setFullYear","newMonth","isLeapYear","setMonth","setHours","getHours","_addMinutes","_addSeconds","_addMilliseconds","difference","date1","date2","yearDiff","delta","days","Math","round","mod","adj","aDay","bDay","dtMark","dayMark","startdate","enddate","month1","month2","i","e","getTime"],"mappings":"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","file":"../../date/hebrew.js","sourcesContent":["define([\"..\", \"dojo/_base/lang\", \"dojo/date\", \"./hebrew/Date\"], function(dojox, lang, dd, HDate){\r\n\r\nvar dhebrew = lang.getObject(\"date.hebrew\", true, dojox);\r\n\r\n// Utility methods to do arithmetic calculations with hebrew.Dates\r\n\r\n// added for compat to date\r\ndhebrew.getDaysInMonth = function(/*dojox/date/hebrew/Date*/month){\r\n\treturn month.getDaysInHebrewMonth(month.getMonth(), month.getFullYear());\r\n};\r\n\r\n//TODO: define hebrew.isLeapYear?  Or should it be invalid, since it has different meaning?\r\n\r\ndhebrew.compare = function(/*dojox/date/hebrew/Date*/dateheb1, /*dojox/date/hebrew/Date*/dateheb2, /*String?*/portion){\r\n\t// summary:\r\n\t//\t\tCompare two hebrew date objects by date, time, or both.\r\n\t// description:\r\n\t//\t\tReturns 0 if equal, positive if a > b, else negative.\r\n\t// date1: dojox/date/hebrew/Date\r\n\t// date2: dojox/date/hebrew/Date\r\n\t//\t\tIf not specified, the current hebrew.Date is used.\r\n\t// portion:\r\n\t//\t\tA string indicating the \"date\" or \"time\" portion of a Date object.\r\n\t//\t\tCompares both \"date\" and \"time\" by default.  One of the following:\r\n\t//\t\t\"date\", \"time\", \"datetime\"\r\n\r\n\tif(dateheb1 instanceof HDate){\r\n\t\tdateheb1 = dateheb1.toGregorian();\r\n\t}\r\n\tif(dateheb2 instanceof HDate){\r\n\t\tdateheb2 = dateheb2.toGregorian();\r\n\t}\r\n\t\r\n\treturn dd.compare.apply(null, arguments);\r\n};\r\n\r\n\r\ndhebrew.add = function(/*dojox/date/hebrew/Date*/date, /*String*/interval, /*int*/amount){\r\n\t// summary:\r\n\t//\t\tAdd to a Date in intervals of different size, from milliseconds to years\r\n\t// date: dojox/date/hebrew/Date\r\n\t//\t\tDate object to start with\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\", \"week\", \"weekday\"\r\n\t// amount:\r\n\t//\t\tHow much to add to the date.\r\n\r\n\t//\tbased on and similar to dojo.date.add\r\n\r\n\tvar newHebrDate = new HDate(date);\r\n\r\n\tswitch(interval){\r\n\t\tcase \"day\":\r\n\t\t\tnewHebrDate.setDate(date.getDate() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"weekday\":\r\n\t\t\tvar day = date.getDay();\r\n\t\t\tvar remdays = 0;\r\n\t\t\tif(amount < 0 && day == 6){ day = 5; remdays = -1; }\r\n\t\t\t\r\n\t\t\tif((day + amount) < 5 && (day + amount) >= 0){ //in the same week\r\n\t\t\t\t newHebrDate.setDate(date.getDate() + amount + remdays);\r\n\t\t\t}else{\r\n\t\t\t\tvar add = (amount > 0) ? 5 : -1;\r\n\t\t\t\tvar adddays = (amount > 0) ? 2 : -2 ; /*first weekend */\r\n\t\t\t\tif  (amount > 0 && (day == 5 || day == 6)) { remdays =  4 - day; day = 4;}\r\n\t\t\t\tvar newamount  =  day + amount - add;\r\n\t\t\t\tvar weeks = parseInt(newamount / 5);\r\n\t\t\t\tvar newday = newamount%5;\r\n\t\t\t\tnewHebrDate.setDate(date.getDate() - day+ adddays + weeks * 7 + remdays + newday + add);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tnewHebrDate.setFullYear(date.getFullYear() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\tamount *= 7;\r\n\t\t\tnewHebrDate.setDate(date.getDate() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tvar month = date.getMonth(),\r\n\t\t\t\tnewMonth = month + amount;\r\n\t\t\tif(!date.isLeapYear(date.getFullYear())){\r\n\t\t\t\tif(month < 5 && newMonth >= 5){ newMonth++;}\r\n\t\t\t\telse if (month > 5 && newMonth <= 5){ newMonth--;}\r\n\t\t\t}\r\n\t\t\tnewHebrDate.setMonth(newMonth);\r\n\t\t\tbreak;\r\n\t\tcase \"hour\":\r\n\t\t\tnewHebrDate.setHours(date.getHours() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"minute\":\r\n\t\t\tnewHebrDate._addMinutes(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"second\":\r\n\t\t\tnewHebrDate._addSeconds(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"millisecond\":\r\n\t\t\tnewHebrDate._addMilliseconds(amount);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn newHebrDate; // dojox.date.hebrew.Date\r\n};\r\n\r\ndhebrew.difference = function(/*dojox/date/hebrew/Date*/date1, /*dojox/date/hebrew/Date?*/date2, /*String?*/interval){\r\n\t// summary:\r\n\t//\t\tdate2 - date1\r\n\t// date1: dojox/date/hebrew/Date\r\n\t// date2: dojox/date/hebrew/Date\r\n\t//\t\tIf not specified, the current dojox.date.hebrew.Date is used.\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\",  \"week\", \"weekday\"\r\n\t//\r\n\t//\t\tDefaults to \"day\".\r\n\r\n\t//\tbased on and similar to dojo.date.difference\r\n\r\n\tdate2 = date2 || new HDate();\r\n\tinterval = interval || \"day\";\r\n\tvar yearDiff = date2.getFullYear() - date1.getFullYear();\r\n\tvar delta = 1; // Integer return value\r\n\tswitch(interval){\r\n\t\tcase \"weekday\":\r\n\t\t\tvar days = Math.round(dhebrew.difference(date1, date2, \"day\"));\r\n\t\t\tvar weeks = parseInt(dhebrew.difference(date1, date2, \"week\"));\r\n\t\t\tvar mod = days % 7;\r\n\r\n\t\t\t// Even number of weeks\r\n\t\t\tif(mod == 0){\r\n\t\t\t\tdays = weeks*5;\r\n\t\t\t}else{\r\n\t\t\t\t// Weeks plus spare change (< 7 days)\r\n\t\t\t\tvar adj = 0;\r\n\t\t\t\tvar aDay = date1.getDay();\r\n\t\t\t\tvar bDay = date2.getDay();\r\n\t\r\n\t\t\t\tweeks = parseInt(days/7);\r\n\t\t\t\tmod = days % 7;\r\n\t\t\t\t// Mark the date advanced by the number of\r\n\t\t\t\t// round weeks (may be zero)\r\n\t\t\t\tvar dtMark = new HDate(date1);\r\n\t\t\t\tdtMark.setDate(dtMark.getDate()+(weeks*7));\r\n\t\t\t\tvar dayMark = dtMark.getDay();\r\n\t\r\n\t\t\t\t// Spare change days -- 6 or less\r\n\t\t\t\tif(days > 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) > 5:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(days < 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) < 0:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdays += adj;\r\n\t\t\t\tdays -= (weeks*2);\r\n\t\t\t}\r\n\t\t\tdelta = days;\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tdelta = yearDiff;\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tvar startdate =  (date2.toGregorian() > date1.toGregorian()) ? date2 : date1; // more\r\n\t\t\tvar enddate = (date2.toGregorian() > date1.toGregorian()) ? date1 : date2;\r\n\t\t\t\r\n\t\t\tvar month1 = startdate.getMonth();\r\n\t\t\tvar month2 = enddate.getMonth();\r\n\t\t\t\r\n\t\t\tif(yearDiff == 0){\r\n\t\t\t\tdelta = ( !date2.isLeapYear(date2.getFullYear())  && startdate.getMonth() > 5 && enddate.getMonth() <=5) ? (startdate.getMonth() - enddate.getMonth() - 1) :\r\n\t\t\t\t\t\t(startdate.getMonth() - enddate.getMonth() );\r\n\t\t\t}else{\r\n\t\t\t\tdelta = (!enddate.isLeapYear(enddate.getFullYear()) &&  month2 < 6) ? (13-month2-1) : (13-month2);\r\n\t\t\t\tdelta +=  (!startdate.isLeapYear(startdate.getFullYear()) &&  month1 > 5) ? (month1 -1): month1;\r\n\t\t\t\tvar i = enddate.getFullYear()  + 1;\r\n\t\t\t\tvar e = startdate.getFullYear();\r\n\t\t\t\tfor (i;   i < e;  i++){\r\n\t\t\t\t\tdelta += enddate.isLeapYear(i) ? 13 : 12;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(date2.toGregorian() < date1.toGregorian()){\r\n\t\t\t\tdelta = -delta;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\t// Truncate instead of rounding\r\n\t\t\t// Don't use Math.floor -- value may be negative\r\n\t\t\tdelta = parseInt(dhebrew.difference(date1, date2, \"day\")/7);\r\n\t\t\tbreak;\r\n\t\tcase \"day\":\r\n\t\t\tdelta /= 24;\r\n\t\t\t// fallthrough\r\n\t\tcase \"hour\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"minute\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"second\":\r\n\t\t\tdelta /= 1000;\r\n\t\t\t// fallthrough\r\n\t\tcase \"millisecond\":\r\n\t\t\tdelta *= date2.toGregorian().getTime()- date1.toGregorian().getTime();\r\n\t}\r\n\r\n\t// Round for fractional values and DST leaps\r\n\treturn Math.round(delta); // Number (integer)\r\n};\r\nreturn dhebrew;\r\n});\r\n"]}