{"version":3,"sources":["date/persian.js"],"names":["define","dojox","lang","dd","IDate","dpersian","getObject","getDaysInMonth","month","getDaysInPersianMonth","getMonth","getFullYear","compare","date1","date2","portion","toGregorian","apply","arguments","add","date","interval","amount","newPersianDate","setDate","getDate","day","getDay","adddays","remdays","amountdif","div","parseInt","setFullYear","setMonth","setHours","getHours","_addMinutes","_addSeconds","_addMilliseconds","difference","yearDiff","delta","days","Math","round","weeks","mod","adj","aDay","bDay","dtMark","dayMark","startdate","enddate","month1","month2","i","e","getTime"],"mappings":"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","file":"../../date/persian.js","sourcesContent":["define(\"dojox/date/persian\", [\"..\", \"dojo/_base/lang\", \"dojo/date\", \"./persian/Date\"], function(dojox, lang, dd, IDate){\r\n\r\nvar dpersian = lang.getObject(\"date.persian\", true, dojox);\r\n\r\n// Utility methods to do arithmetic calculations with persian.Dates\r\n\r\n\t// added for compat to date\r\ndpersian.getDaysInMonth = function(/*dojox/date/persian/Date*/month){\r\n\treturn month.getDaysInPersianMonth(month.getMonth(), month.getFullYear());\r\n};\r\n\r\n//TODO: define persian.isLeapYear?  Or should it be invalid, since it has different meaning?\r\n\r\ndpersian.compare = function(/*dojox/date/persian/Date*/date1, /*dojox/date/persian/Date*/date2, /*String?*/portion){\r\n\t// summary:\r\n\t//\t\tCompare two persian date objects by date, time, or both.\r\n\t// description:\r\n\t//\t\tReturns 0 if equal, positive if a > b, else negative.\r\n\t// date1: dojox/date/persian/Date\r\n\t// date2: dojox/date/persian/Date\r\n\t//\t\tIf not specified, the current persian.Date is used.\r\n\t// portion:\r\n\t//\t\tA string indicating the \"date\" or \"time\" portion of a Date object.\r\n\t//\t\tCompares both \"date\" and \"time\" by default.  One of the following:\r\n\t//\t\t\"date\", \"time\", \"datetime\"\r\n\r\n\tif(date1 instanceof IDate){\r\n\t\tdate1 = date1.toGregorian();\r\n\t}\r\n\tif(date2 instanceof IDate){\r\n\t\tdate2 = date2.toGregorian();\r\n\t}\r\n\t\r\n\treturn dd.compare.apply(null, arguments);\r\n};\r\n\r\ndpersian.add = function(/*dojox/date/persian/Date*/date, /*String*/interval, /*int*/amount){\r\n\t// summary:\r\n\t//\t\tAdd to a Date in intervals of different size, from milliseconds to years\r\n\t// date: dojox/date/persian/Date\r\n\t//\t\tDate object to start with\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\", \"week\", \"weekday\"\r\n\t// amount:\r\n\t//\t\tHow much to add to the date.\r\n\r\n\t//\tbased on and similar to dojo.date.add\r\n\r\n\tvar newPersianDate = new IDate(date);\r\n\r\n\tswitch(interval){\r\n\t\tcase \"day\":\r\n\t\t\tnewPersianDate.setDate(date.getDate() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"weekday\":\r\n\t\t\tvar day = date.getDay();\r\n\t\t\tif(((day + amount) < 5) && ((day + amount) > 0)){\r\n\t\t\t\t newPersianDate.setDate(date.getDate() + amount);\r\n\t\t\t}else{\r\n\t\t\t\tvar adddays = 0, /*weekend */\r\n\t\t\t\t\tremdays = 0;\r\n\t\t\t\tif(day == 5){//friday\r\n\t\t\t\t\tday = 4;\r\n\t\t\t\t\tremdays = (amount > 0) ?  -1 : 1;\r\n\t\t\t\t}else if(day == 6){ //shabat\r\n\t\t\t\t\tday = 4;\r\n\t\t\t\t\tremdays = (amount > 0) ? -2 : 2;\r\n\t\t\t\t}\r\n\t\t\t\tvar add = (amount > 0) ? (5 - day - 1) : -day\r\n\t\t\t\tvar amountdif = amount - add;\r\n\t\t\t\tvar div = parseInt(amountdif / 5);\r\n\t\t\t\tif(amountdif % 5 != 0){\r\n\t\t\t\t\tadddays = (amount > 0)  ? 2 : -2;\r\n\t\t\t\t}\r\n\t\t\t\tadddays = adddays + div * 7 + amountdif % 5 + add;\r\n\t\t\t\tnewPersianDate.setDate(date.getDate() + adddays +  remdays);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tnewPersianDate.setFullYear(date.getFullYear() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\tamount *= 7;\r\n\t\t\tnewPersianDate.setDate(date.getDate() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tvar month = date.getMonth();\r\n\t\t\tnewPersianDate.setMonth(month + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"hour\":\r\n\t\t\tnewPersianDate.setHours(date.getHours() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"minute\":\r\n\t\t\tnewPersianDate._addMinutes(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"second\":\r\n\t\t\tnewPersianDate._addSeconds(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"millisecond\":\r\n\t\t\tnewPersianDate._addMilliseconds(amount);\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn newPersianDate; // dojox.date.persian.Date\r\n};\r\n\r\ndpersian.difference = function(/*dojox/date/persian/Date*/date1, /*dojox/date/persian/Date?*/date2, /*String?*/interval){\r\n\t// summary:\r\n\t//\t\tdate2 - date1\r\n\t// date1: dojox/date/persian/Date\r\n\t// date2: dojox/date/persian/Date\r\n\t//\t\tIf not specified, the current dojox.date.persian.Date is used.\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\",  \"week\", \"weekday\"\r\n\t//\r\n\t//\t\tDefaults to \"day\".\r\n\r\n\t//\tbased on and similar to dojo.date.difference\r\n\r\n\tdate2 = date2 || new IDate();\r\n\tinterval = interval || \"day\";\r\n\tvar yearDiff = date2.getFullYear() - date1.getFullYear();\r\n\tvar delta = 1; // Integer return value\r\n\tswitch(interval){\r\n\t\tcase \"weekday\":\r\n\t\t\tvar days = Math.round(dpersian.difference(date1, date2, \"day\"));\r\n\t\t\tvar weeks = parseInt(dpersian.difference(date1, date2, \"week\"));\r\n\t\t\tvar mod = days % 7;\r\n\r\n\t\t\t// Even number of weeks\r\n\t\t\tif(mod == 0){\r\n\t\t\t\tdays = weeks*5;\r\n\t\t\t}else{\r\n\t\t\t\t// Weeks plus spare change (< 7 days)\r\n\t\t\t\tvar adj = 0;\r\n\t\t\t\tvar aDay = date1.getDay();\r\n\t\t\t\tvar bDay = date2.getDay();\r\n\t\r\n\t\t\t\tweeks = parseInt(days/7);\r\n\t\t\t\tmod = days % 7;\r\n\t\t\t\t// Mark the date advanced by the number of\r\n\t\t\t\t// round weeks (may be zero)\r\n\t\t\t\tvar dtMark = new IDate(date1);\r\n\t\t\t\tdtMark.setDate(dtMark.getDate()+(weeks*7));\r\n\t\t\t\tvar dayMark = dtMark.getDay();\r\n\t\r\n\t\t\t\t// Spare change days -- 6 or less\r\n\t\t\t\tif(days > 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) > 5:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(days < 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) < 0:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdays += adj;\r\n\t\t\t\tdays -= (weeks*2);\r\n\t\t\t}\r\n\t\t\tdelta = days;\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tdelta = yearDiff;\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tvar startdate =  (date2.toGregorian() > date1.toGregorian()) ? date2 : date1; // more\r\n\t\t\tvar enddate = (date2.toGregorian() > date1.toGregorian()) ? date1 : date2;\r\n\t\t\t\r\n\t\t\tvar month1 = startdate.getMonth();\r\n\t\t\tvar month2 = enddate.getMonth();\r\n\t\t\t\r\n\t\t\tif (yearDiff == 0){\r\n\t\t\t\tdelta = startdate.getMonth() - enddate.getMonth() ;\r\n\t\t\t}else{\r\n\t\t\t\tdelta = 12-month2;\r\n\t\t\t\tdelta +=  month1;\r\n\t\t\t\tvar i = enddate.getFullYear()+1;\r\n\t\t\t\tvar e = startdate.getFullYear();\r\n\t\t\t\tfor (i;   i < e;  i++){\r\n\t\t\t\t\tdelta += 12;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (date2.toGregorian() < date1.toGregorian()){\r\n\t\t\t\tdelta = -delta;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\t// Truncate instead of rounding\r\n\t\t\t// Don't use Math.floor -- value may be negative\r\n\t\t\tdelta = parseInt(dpersian.difference(date1, date2, \"day\")/7);\r\n\t\t\tbreak;\r\n\t\tcase \"day\":\r\n\t\t\tdelta /= 24;\r\n\t\t\t// fallthrough\r\n\t\tcase \"hour\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"minute\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"second\":\r\n\t\t\tdelta /= 1000;\r\n\t\t\t// fallthrough\r\n\t\tcase \"millisecond\":\r\n\t\t\tdelta *= date2.toGregorian().getTime()- date1.toGregorian().getTime();\r\n\t}\r\n\r\n\t// Round for fractional values and DST leaps\r\n\treturn Math.round(delta); // Number (integer)\r\n};\r\nreturn dpersian;\r\n});\r\n"]}