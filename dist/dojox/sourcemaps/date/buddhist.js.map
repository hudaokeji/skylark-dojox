{"version":3,"sources":["date/buddhist.js"],"names":["define","dojox","lang","dd","BDate","dbuddhist","getObject","getDaysInMonth","dateObject","toGregorian","isLeapYear","compare","date1","date2","portion","add","date","interval","amount","newBuddDate","setDate","getDate","days","weeks","mod","parseInt","strt","getDay","adj","trgt","setFullYear","getFullYear","setMonth","getMonth","setHours","getHours","_addMinutes","_addSeconds","_addMilliseconds","difference","yearDiff","delta","Math","round","aDay","bDay","dtMark","dayMark","startdate","enddate","month1","month2","i","e","getTime"],"mappings":"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","file":"../../date/buddhist.js","sourcesContent":["define([\"..\", \"dojo/_base/lang\", \"dojo/date\", \"./buddhist/Date\"], function(dojox, lang, dd, BDate){\r\n\tvar dbuddhist = lang.getObject(\"date.buddhist\", true, dojox);\r\n\r\n// Utility methods to do arithmetic calculations with buddhist.Dates\r\n\r\ndbuddhist.getDaysInMonth = function(/*dojox/date/buddhist/Date*/dateObject){\r\n\treturn dd.getDaysInMonth(dateObject.toGregorian());\r\n};\r\n\r\ndbuddhist.isLeapYear = function(/*dojox/date/buddhist/Date*/dateObject){\r\n\treturn dd.isLeapYear(dateObject.toGregorian());\r\n};\r\n\r\n//FIXME: reduce compare, add, diff also\r\ndbuddhist.compare = function(/*dojox/date/buddhist/Date*/date1, /*dojox/date/buddhist/Date*/date2, /*String?*/portion){\r\n\t// summary:\r\n\t//\t\tCompare two buddhist date objects by date, time, or both.\r\n\treturn dd.compare(date1,date2, portion); // int\r\n};\r\n\r\n\r\ndbuddhist.add = function(/*dojox/date/buddhist/Date*/date, /*String*/interval, /*int*/amount){\r\n\t// summary:\r\n\t//\t\tAdd to a Date in intervals of different size, from milliseconds to years\r\n\t// date: dojox/date/buddhist/Date\r\n\t//\t\tDate object to start with\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\", \"week\", \"weekday\"\r\n\t// amount:\r\n\t//\t\tHow much to add to the date.\r\n\r\n\t//\tbased on and similar to dojo.date.add\r\n\r\n\tvar newBuddDate = new BDate(date);\r\n\r\n\tswitch(interval){\r\n\t\tcase \"day\":\r\n\t\t\tnewBuddDate.setDate(date.getDate(true) + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"weekday\":\r\n\t\t\tvar days, weeks;\r\n\t\t\tvar mod = amount % 5;\r\n\t\t\tif(!mod){\r\n\t\t\t\tdays = (amount > 0) ? 5 : -5;\r\n\t\t\t\tweeks = (amount > 0) ? ((amount-5)/5) : ((amount+5)/5);\r\n\t\t\t}else{\r\n\t\t\t\tdays = mod;\r\n\t\t\t\tweeks = parseInt(amount/5);\r\n\t\t\t}\r\n\t\t\t// Get weekday value for orig date param\r\n\t\t\tvar strt = date.getDay();\r\n\t\t\t// Orig date is Sat / positive incrementer\r\n\t\t\t// Jump over Sun\r\n\t\t\tvar adj = 0;\r\n\t\t\tif(strt == 6 && amount > 0){\r\n\t\t\t\tadj = 1;\r\n\t\t\t}else if(strt == 0 && amount < 0){\r\n\t\t\t// Orig date is Sun / negative incrementer\r\n\t\t\t// Jump back over Sat\r\n\t\t\t\tadj = -1;\r\n\t\t\t}\r\n\t\t\t// Get weekday val for the new date\r\n\t\t\tvar trgt = strt + days;\r\n\t\t\t// New date is on Sat or Sun\r\n\t\t\tif(trgt == 0 || trgt == 6){\r\n\t\t\t\tadj = (amount > 0) ? 2 : -2;\r\n\t\t\t}\r\n\t\t\t// Increment by number of weeks plus leftover days plus\r\n\t\t\t// weekend adjustments\r\n\t\t\tamount = (7 * weeks) + days + adj;\r\n\t\t\tnewBuddDate.setDate(date.getDate(true) + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tnewBuddDate.setFullYear(date.getFullYear() + amount );\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\tamount *= 7;\r\n\t\t\tnewBuddDate.setDate(date.getDate(true) + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tnewBuddDate.setMonth(date.getMonth() + amount);\r\n\t\t\tbreak;\r\n\t\tcase \"hour\":\r\n\t\t\tnewBuddDate.setHours(date.getHours() + amount );\r\n\t\t\tbreak;\r\n\t\tcase \"minute\":\r\n\t\t\tnewBuddDate._addMinutes(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"second\":\r\n\t\t\tnewBuddDate._addSeconds(amount);\r\n\t\t\tbreak;\r\n\t\tcase \"millisecond\":\r\n\t\t\tnewBuddDate._addMilliseconds(amount);\r\n\t\t\tbreak;\r\n\t}\r\n\treturn newBuddDate; // dojox.date.buddhist.Date\r\n};\r\n\r\ndbuddhist.difference = function(/*dojox/date/buddhist/Date*/date1, /*dojox/date/buddhist/Date?*/date2, /*String?*/interval){\r\n\t// summary:\r\n\t//\t\tdate2 - date1\r\n\t// date1: dojox/date/dbuddhist/Date\r\n\t// date2: dojox/date/dbuddhist/Date\r\n\t//\t\tIf not specified, the current dojox.date.dbuddhist.Date is used.\r\n\t// interval:\r\n\t//\t\tA string representing the interval.  One of the following:\r\n\t//\t\t\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\r\n\t//\t\t\"millisecond\",  \"week\", \"weekday\"\r\n\t//\r\n\t//\t\tDefaults to \"day\".\r\n\r\n\t//\tbased on and similar to dojo.date.difference\r\n\r\n\tdate2 = date2 || new BDate();\r\n\tinterval = interval || \"day\";\r\n\tvar yearDiff = date2.getFullYear() - date1.getFullYear();\r\n\tvar delta = 1; // Integer return value\r\n\tswitch(interval){\r\n\t\tcase \"weekday\":\r\n\t\t\tvar days = Math.round(dbuddhist.difference(date1, date2, \"day\"));\r\n\t\t\tvar weeks = parseInt(dbuddhist.difference(date1, date2, \"week\"));\r\n\t\t\tvar mod = days % 7;\r\n\t\r\n\t\t\t// Even number of weeks\r\n\t\t\tif(mod == 0){\r\n\t\t\t\tdays = weeks*5;\r\n\t\t\t}else{\r\n\t\t\t\t// Weeks plus spare change (< 7 days)\r\n\t\t\t\tvar adj = 0;\r\n\t\t\t\tvar aDay = date1.getDay();\r\n\t\t\t\tvar bDay = date2.getDay();\r\n\t\r\n\t\t\t\tweeks = parseInt(days/7);\r\n\t\t\t\tmod = days % 7;\r\n\t\t\t\t// Mark the date advanced by the number of\r\n\t\t\t\t// round weeks (may be zero)\r\n\t\t\t\tvar dtMark = new BDate(date2);\r\n\t\t\t\tdtMark.setDate(dtMark.getDate(true)+(weeks*7));\r\n\t\t\t\tvar dayMark = dtMark.getDay();\r\n\t\r\n\t\t\t\t// Spare change days -- 6 or less\r\n\t\t\t\tif(days > 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) > 5:\r\n\t\t\t\t\t\t\tadj = -2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(days < 0){\r\n\t\t\t\t\tswitch(true){\r\n\t\t\t\t\t\t// Range starts on Fri\r\n\t\t\t\t\t\tcase aDay == 5:\r\n\t\t\t\t\t\t\tadj = 0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range starts on Sat\r\n\t\t\t\t\t\tcase aDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Fri\r\n\t\t\t\t\t\tcase bDay == 5:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range ends on Sat\r\n\t\t\t\t\t\tcase bDay == 6:\r\n\t\t\t\t\t\t\tadj = 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t// Range contains weekend\r\n\t\t\t\t\t\tcase (dayMark + mod) < 0:\r\n\t\t\t\t\t\t\tadj = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdays += adj;\r\n\t\t\t\tdays -= (weeks*2);\r\n\t\t\t}\r\n\t\t\tdelta = days;\r\n\t\t\tbreak;\r\n\t\tcase \"year\":\r\n\t\t\tdelta = yearDiff;\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tvar startdate =  (date2.toGregorian() > date1.toGregorian()) ? date2 : date1; // more\r\n\t\t\tvar enddate = (date2.toGregorian() > date1.toGregorian()) ? date1 : date2;\r\n\t\t\t\r\n\t\t\tvar month1 = startdate.getMonth();\r\n\t\t\tvar month2 = enddate.getMonth();\r\n\t\t\t\r\n\t\t\tif (yearDiff == 0){\r\n\t\t\t\tdelta = startdate.getMonth() - enddate.getMonth() ;\r\n\t\t\t}else{\r\n\t\t\t\tdelta = 12-month2;\r\n\t\t\t\tdelta +=  month1;\r\n\t\t\t\tvar i = enddate.getFullYear()+1;\r\n\t\t\t\tvar e = startdate.getFullYear();\r\n\t\t\t\tfor (i;   i < e;  i++){\r\n\t\t\t\t\tdelta += 12;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (date2.toGregorian() < date1.toGregorian()){\r\n\t\t\t\tdelta = -delta;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"week\":\r\n\t\t\t// Truncate instead of rounding\r\n\t\t\t// Don't use Math.floor -- value may be negative\r\n\t\t\tdelta = parseInt(dbuddhist.difference(date1, date2, \"day\")/7);\r\n\t\t\tbreak;\r\n\t\tcase \"day\":\r\n\t\t\tdelta /= 24;\r\n\t\t\t// fallthrough\r\n\t\tcase \"hour\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"minute\":\r\n\t\t\tdelta /= 60;\r\n\t\t\t// fallthrough\r\n\t\tcase \"second\":\r\n\t\t\tdelta /= 1000;\r\n\t\t\t// fallthrough\r\n\t\tcase \"millisecond\":\r\n\t\t\tdelta *= date2.toGregorian().getTime()- date1.toGregorian().getTime();\r\n\t}\r\n\t\r\n\t// Round for fractional values and DST leaps\r\n\treturn Math.round(delta); // Number (integer)\r\n};\r\nreturn dbuddhist;\r\n});"]}