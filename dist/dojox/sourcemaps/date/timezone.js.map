{"version":3,"sources":["date/timezone.js"],"names":["define","arrayUtil","config","declare","kernel","lang","dateUtil","localeUtil","request","handlers","experimental","_minYear","_maxYear","_loadedZones","_zones","_loadedRanges","_rules","loadingScheme","timezoneLoadingScheme","defaultZoneFile","loadZoneData","data","mixin","zones","rules","loadZoneFile","fileName","get","require","toUrl","timezoneFileBasePath","handleAs","sync","then","e","console","error","register","response","lines","text","split","arr","zone","rule","ret","i","length","l","match","shift","push","Error","monthMap","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","dayMap","sun","mon","tue","wed","thu","fri","sat","regionMap","EST","MST","HST","EST5EDT","CST6CDT","MST7MDT","PST8PDT","America","Pacific","Atlantic","Africa","Indian","Antarctica","Asia","Australia","Europe","WET","CET","MET","EET","regionExceptions","Pacific/Honolulu","Atlantic/Bermuda","Atlantic/Cape_Verde","Atlantic/St_Helena","Indian/Kerguelen","Indian/Chagos","Indian/Maldives","Indian/Christmas","Indian/Cocos","America/Danmarkshavn","America/Scoresbysund","America/Godthab","America/Thule","Asia/Yekaterinburg","Asia/Omsk","Asia/Novosibirsk","Asia/Krasnoyarsk","Asia/Irkutsk","Asia/Yakutsk","Asia/Vladivostok","Asia/Sakhalin","Asia/Magadan","Asia/Kamchatka","Asia/Anadyr","Africa/Ceuta","America/Argentina/Buenos_Aires","America/Argentina/Cordoba","America/Argentina/Tucuman","America/Argentina/La_Rioja","America/Argentina/San_Juan","America/Argentina/Jujuy","America/Argentina/Catamarca","America/Argentina/Mendoza","America/Argentina/Rio_Gallegos","America/Argentina/Ushuaia","America/Aruba","America/La_Paz","America/Noronha","America/Belem","America/Fortaleza","America/Recife","America/Araguaina","America/Maceio","America/Bahia","America/Sao_Paulo","America/Campo_Grande","America/Cuiaba","America/Porto_Velho","America/Boa_Vista","America/Manaus","America/Eirunepe","America/Rio_Branco","America/Santiago","Pacific/Easter","America/Bogota","America/Curacao","America/Guayaquil","Pacific/Galapagos","Atlantic/Stanley","America/Cayenne","America/Guyana","America/Asuncion","America/Lima","Atlantic/South_Georgia","America/Paramaribo","America/Port_of_Spain","America/Montevideo","America/Caracas","abbrExceptions","US","Chatham","NZ","NT_YK","Edm","Salv","Canada","StJohns","TC","Guat","Mexico","Haiti","Barb","Belize","CR","Moncton","Swift","Hond","Thule","NZAQ","Zion","ROK","PRC","Taiwan","Ghana","SL","Chicago","Detroit","Vanc","Denver","Halifax","Cuba","Indianapolis","Starke","Marengo","Pike","Perry","Vincennes","Pulaski","Louisville","CA","Nic","Menominee","Mont","Bahamas","NYC","Regina","Resolute","DR","Toronto","Winn","invalidTZError","t","parseTimeString","str","hms","parseInt","getUTCStamp","y","m","d","h","mn","s","off","Date","UTC","getMonthNumber","substr","toLowerCase","getOffsetInMins","indexOf","_getRuleStart","year","dtDay","incr","month","day","time","isNaN","add","getUTCDay","_getRulesForYear","forEach","r","getZoneInfo","dt","tz","zoneList","backward","zr","z","prevZone","prevRange","prevRules","j","rl","startYear","getUTCFullYear","endYear","rlz","concat","sort","a","b","compare","prevRule","utcStmp","getTime","matches","filter","idx","o","_loadZoneRanges","ranges","tm","range","setObject","getTzInfo","zoneFile","getRegionForTimezone","reg","link","zoneInfo","lastMatch","tsp","getRule","tzOffset","tzAbbr","res","base","repl","pb","replace","bs","getAbbreviation","getAllZones","Array","oLocaleFmt","format","oGetZone","_getZone","dateObject","options","timezone","_tzInfo","dojox","date","offset","getTimezoneOffset","call","this","getName"],"mappings":"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","file":"../../date/timezone.js","sourcesContent":["/******************************************************************************\r\n * Dojo port of fleegix date plugin from\r\n *\r\n *   http://js.fleegix.org/plugins/date/date\r\n *\r\n * contributed to Dojo under CLA, with thanks to Matthew Eernisse (mde@fleegix.org)\r\n * and Open Source Applications Foundation\r\n *\r\n * Credits: Ideas included from incomplete JS implementation of Olson\r\n * parser, \"XMLDate\" by Philippe Goetz (philippe.goetz@wanadoo.fr)\r\n *****************************************************************************/\r\n\r\ndefine([\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/config\",\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/kernel\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/date\",\r\n    \"dojo/date/locale\",\r\n    \"dojo/request\",\r\n    \"dojo/request/handlers\"\r\n],\r\nfunction(arrayUtil, config, declare, kernel, lang, dateUtil, localeUtil, request, handlers){\r\n\tkernel.experimental(\"dojox.date.timezone\");\r\n\t\r\n\tvar _zoneFiles = [ \"africa\", \"antarctica\", \"asia\", \"australasia\", \"backward\",\r\n\t\t\t\t\t\"etcetera\", \"europe\", \"northamerica\", \"pacificnew\",\r\n\t\t\t\t\t\"southamerica\" ];\r\n\t\t\t\t\t\r\n\t// Our mins an maxes for years that we care about\r\n\tvar _minYear = 1835,\r\n\t\t_maxYear = 2038;\r\n\t\r\n\tvar _loadedZones = {},\r\n\t\t_zones = {},\r\n\t\t_loadedRanges = {},\r\n\t\t_rules = {};\r\n\t\r\n\t// loadingScheme: String\r\n\t//\t\tOne of \"preloadAll\", \"lazyLoad\" (Defaults \"lazyLoad\")\r\n\tvar loadingScheme = config.timezoneLoadingScheme || \"preloadAll\";\r\n\t\t\r\n\t// defaultZoneFile: String or String[]\r\n\t//\t\tThe default file (or files) to load on startup - other files will\r\n\t//\t\tbe lazily-loaded on-demand\r\n\tvar defaultZoneFile = config.defaultZoneFile ||\r\n\t\t\t\t\t((loadingScheme == \"preloadAll\") ? _zoneFiles : \"northamerica\");\r\n\r\n\t// Set our olson_zoneinfo content handler\r\n\thandlers.register(\"olson_zoneinfo\", function(response) {\r\n\t\tvar text = response.text,\r\n\t\t\ts = \"\",\r\n\t\t\tlines = text.split(\"\\n\"),\r\n\t\t\tarr = [],\r\n\t\t\tchunk = \"\",\r\n\t\t\tzone = null,\r\n\t\t\trule = null,\r\n\t\t\tret = {zones: {}, rules: {}};\r\n\t\t\r\n\t\tfor(var i = 0; i < lines.length; i++){\r\n\t\t\tvar l = lines[i];\r\n\t\t\tif(l.match(/^\\s/)){\r\n\t\t\t\tl = \"Zone \" + zone + l;\r\n\t\t\t}\r\n\t\t\tl = l.split(\"#\")[0];\r\n\t\t\tif(l.length > 3){\r\n\t\t\t\tarr = l.split(/\\s+/);\r\n\t\t\t\tchunk = arr.shift();\r\n\t\t\t\tswitch(chunk){\r\n\t\t\t\t\tcase 'Zone':\r\n\t\t\t\t\t\tzone = arr.shift();\r\n\t\t\t\t\t\tif(arr[0]){\r\n\t\t\t\t\t\t\t// Handle extra commas in the middle of a zone\r\n\t\t\t\t\t\t\tif(!ret.zones[zone]){ ret.zones[zone] = []; }\r\n\t\t\t\t\t\t\tret.zones[zone].push(arr);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Rule':\r\n\t\t\t\t\t\trule = arr.shift();\r\n\t\t\t\t\t\tif(!ret.rules[rule]){ ret.rules[rule] = []; }\r\n\t\t\t\t\t\tret.rules[rule].push(arr);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Link':\r\n\t\t\t\t\t\t// No zones for these should already exist\r\n\t\t\t\t\t\tif(ret.zones[arr[1]]){\r\n\t\t\t\t\t\t  throw new Error('Error with Link ' + arr[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Create the link\r\n\t\t\t\t\t\tret.zones[arr[1]] = arr[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Leap':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// Fail silently\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret; // Object\r\n\t});\r\n\t\r\n\tfunction loadZoneData(/* Object */ data){\r\n\t\t// summary:\r\n\t\t//\t\tLoads the given data object into the zone database\r\n\t\t// data: Object\r\n\t\t//\t\tThe data to load - contains \"zones\" and \"rules\" parameters\r\n\t\tdata = data || {};\r\n\t\t_zones = lang.mixin(_zones, data.zones||{});\r\n\t\t_rules = lang.mixin(_rules, data.rules||{});\r\n\t}\r\n\t\r\n\tfunction loadZoneFile(/* String */ fileName){\r\n\t\t// summary:\r\n\t\t//\t\tLoads the given URL of the Olson zone information into the\r\n\t\t//\t\tzone database\r\n\t\t//\r\n\t\t// fileName: String\r\n\t\t//\t\tThe zoneinfo file name to load\r\n\t\t\r\n\t\t// TODO: Maybe behave similar to requireLocalization - rather than\r\n\t\t//\t\tUsing request.get?\r\n\t\t_loadedZones[fileName] = true;\r\n\t\trequest.get(require.toUrl((config.timezoneFileBasePath || \"dojox/date/zoneinfo\") + \"/\" + fileName), {\r\n\t\t\thandleAs: \"olson_zoneinfo\",\r\n\t\t\tsync: true\r\n\t\t}).then(loadZoneData, function(e){\r\n\t\t\tconsole.error(\"Error loading zone file:\", e);\r\n\t\t\tthrow e;\r\n\t\t});\r\n\t}\r\n\t\r\n\tvar monthMap = { 'jan': 0, 'feb': 1, 'mar': 2, 'apr': 3,'may': 4, 'jun': 5,\r\n\t\t\t\t'jul': 6, 'aug': 7, 'sep': 8, 'oct': 9, 'nov': 10, 'dec': 11 },\r\n\t\tdayMap = {'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4,\r\n\t\t\t\t'fri': 5, 'sat': 6 },\r\n\t\tregionMap = {'EST': \"northamerica\", 'MST': \"northamerica\",\r\n\t\t\t\t\t'HST': \"northamerica\", 'EST5EDT': \"northamerica\",\r\n\t\t\t\t\t'CST6CDT': \"northamerica\", 'MST7MDT': \"northamerica\",\r\n\t\t\t\t\t'PST8PDT': \"northamerica\", 'America': \"northamerica\",\r\n\t\t\t\t\t'Pacific': \"australasia\", 'Atlantic': \"europe\",\r\n\t\t\t\t\t'Africa': \"africa\", 'Indian': \"africa\",\r\n\t\t\t\t\t'Antarctica': \"antarctica\", 'Asia': \"asia\",\r\n\t\t\t\t\t'Australia': \"australasia\", 'Europe': \"europe\",\r\n\t\t\t\t\t'WET': \"europe\", 'CET': \"europe\", 'MET': \"europe\",\r\n\t\t\t\t\t'EET': \"europe\"},\r\n\t\tregionExceptions = {'Pacific/Honolulu':\"northamerica\",\r\n\t\t\t\t\t\t\t'Atlantic/Bermuda':\"northamerica\",\r\n\t\t\t\t\t\t\t'Atlantic/Cape_Verde':\"africa\",\r\n\t\t\t\t\t\t\t'Atlantic/St_Helena':\"africa\",\r\n\t\t\t\t\t\t\t'Indian/Kerguelen':\"antarctica\",\r\n\t\t\t\t\t\t\t'Indian/Chagos':\"asia\",\r\n\t\t\t\t\t\t\t'Indian/Maldives':\"asia\",\r\n\t\t\t\t\t\t\t'Indian/Christmas':\"australasia\",\r\n\t\t\t\t\t\t\t'Indian/Cocos':\"australasia\",\r\n\t\t\t\t\t\t\t'America/Danmarkshavn':\"europe\",\r\n\t\t\t\t\t\t\t'America/Scoresbysund':\"europe\",\r\n\t\t\t\t\t\t\t'America/Godthab':\"europe\",\r\n\t\t\t\t\t\t\t'America/Thule':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Yekaterinburg':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Omsk':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Novosibirsk':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Krasnoyarsk':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Irkutsk':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Yakutsk':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Vladivostok':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Sakhalin':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Magadan':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Kamchatka':\"europe\",\r\n\t\t\t\t\t\t\t'Asia/Anadyr':\"europe\",\r\n\t\t\t\t\t\t\t'Africa/Ceuta':\"europe\",\r\n\t\t\t\t\t\t\t'America/Argentina/Buenos_Aires':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Cordoba':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Tucuman':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/La_Rioja':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/San_Juan':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Jujuy':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Catamarca':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Mendoza':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Rio_Gallegos':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Argentina/Ushuaia':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Aruba':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/La_Paz':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Noronha':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Belem':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Fortaleza':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Recife':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Araguaina':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Maceio':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Bahia':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Sao_Paulo':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Campo_Grande':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Cuiaba':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Porto_Velho':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Boa_Vista':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Manaus':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Eirunepe':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Rio_Branco':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Santiago':\"southamerica\",\r\n\t\t\t\t\t\t\t'Pacific/Easter':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Bogota':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Curacao':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Guayaquil':\"southamerica\",\r\n\t\t\t\t\t\t\t'Pacific/Galapagos':\"southamerica\",\r\n\t\t\t\t\t\t\t'Atlantic/Stanley':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Cayenne':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Guyana':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Asuncion':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Lima':\"southamerica\",\r\n\t\t\t\t\t\t\t'Atlantic/South_Georgia':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Paramaribo':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Port_of_Spain':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Montevideo':\"southamerica\",\r\n\t\t\t\t\t\t\t'America/Caracas':\"southamerica\"},\r\n\t\tabbrExceptions = { 'US': \"S\", 'Chatham': \"S\", 'NZ': \"S\", 'NT_YK': \"S\",\r\n\t\t\t\t\t\t\t'Edm': \"S\", 'Salv': \"S\", 'Canada': \"S\", 'StJohns': \"S\",\r\n\t\t\t\t\t\t\t'TC': \"S\", 'Guat': \"S\", 'Mexico': \"S\", 'Haiti': \"S\",\r\n\t\t\t\t\t\t\t'Barb': \"S\", 'Belize': \"S\", 'CR': \"S\", 'Moncton': \"S\",\r\n\t\t\t\t\t\t\t'Swift': \"S\", 'Hond': \"S\", 'Thule': \"S\", 'NZAQ': \"S\",\r\n\t\t\t\t\t\t\t'Zion': \"S\", 'ROK': \"S\", 'PRC': \"S\", 'Taiwan': \"S\",\r\n\t\t\t\t\t\t\t'Ghana': \"GMT\", 'SL': \"WAT\", 'Chicago': \"S\",\r\n\t\t\t\t\t\t\t'Detroit': \"S\", 'Vanc': \"S\", 'Denver': \"S\",\r\n\t\t\t\t\t\t\t'Halifax': \"S\", 'Cuba': \"S\", 'Indianapolis': \"S\",\r\n\t\t\t\t\t\t\t'Starke': \"S\", 'Marengo': \"S\", 'Pike': \"S\",\r\n\t\t\t\t\t\t\t'Perry': \"S\", 'Vincennes': \"S\", 'Pulaski': \"S\",\r\n\t\t\t\t\t\t\t'Louisville': \"S\", 'CA': \"S\", 'Nic': \"S\",\r\n\t\t\t\t\t\t\t'Menominee': \"S\", 'Mont': \"S\", 'Bahamas': \"S\",\r\n\t\t\t\t\t\t\t'NYC': \"S\", 'Regina': \"S\", 'Resolute': \"ES\",\r\n\t\t\t\t\t\t\t'DR': \"S\", 'Toronto': \"S\", 'Winn': \"S\" };\r\n\t\r\n\tfunction invalidTZError(t) {\r\n\t\tthrow new Error('Timezone \"' + t +\r\n\t\t\t\t'\" is either incorrect, or not loaded in the timezone registry.');\r\n\t}\r\n\t\r\n\tfunction getRegionForTimezone(/* String */ tz) {\r\n\t\t// summary:\r\n\t\t//\t\tReturns the Olson region for the given timezone\r\n\t\tvar ret = regionExceptions[tz];\r\n\t\tif(!ret){\r\n\t\t\tvar reg = tz.split('/')[0];\r\n\t\t\tret = regionMap[reg];\r\n\t\t\t// If there's nothing listed in the main regions for\r\n\t\t\t// this TZ, check the 'backward' links\r\n\t\t\tif(!ret){\r\n\t\t\t\tvar link = _zones[tz];\r\n\t\t\t\tif(typeof link == 'string'){\r\n\t\t\t\t\treturn getRegionForTimezone(link); // String\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// Backward-compat file hasn't loaded yet, try looking in there\r\n\t\t\t\t\tif (!_loadedZones.backward) {\r\n\t\t\t\t\t\t// This is for obvious legacy zones (e.g., Iceland) that\r\n\t\t\t\t\t\t// don't even have a prefix like \"America/\" that look like\r\n\t\t\t\t\t\t// normal zones\r\n\t\t\t\t\t\tloadZoneFile(\"backward\");\r\n\t\t\t\t\t\treturn getRegionForTimezone(tz); // String\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tinvalidTZError(tz);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret; // String\r\n\t}\r\n\t\r\n\tfunction parseTimeString(/* String */ str) {\r\n\t\t// summary:\r\n\t\t//\t\tParses the given time string and returns it as an integer array\r\n\t\tvar pat = /(\\d+)(?::0*(\\d*))?(?::0*(\\d*))?([su])?$/;\r\n\t\tvar hms = str.match(pat);\r\n\t\tif(!hms){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\thms[1] = parseInt(hms[1], 10);\r\n\t\thms[2] = hms[2] ? parseInt(hms[2], 10) : 0;\r\n\t\thms[3] = hms[3] ? parseInt(hms[3], 10) : 0;\r\n\t\treturn hms; // int[]\r\n\t}\r\n\t\r\n\tfunction getUTCStamp(/* int */ y, /* int */ m, /* int */ d, /* int */ h,\r\n\t\t\t\t\t\t/* int */ mn, /* int */ s, /* int? */ off){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the UTC timestamp, adjusted by the given (optional) offset\r\n\t\treturn Date.UTC(y, m, d, h, mn, s) + ((off||0) * 60 * 1000);\r\n\t}\r\n\t\r\n\tfunction getMonthNumber(/* String */ m){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the javascript month number for the given string\r\n\t\treturn monthMap[m.substr(0, 3).toLowerCase()];\r\n\t}\r\n\t\r\n\tfunction getOffsetInMins(/* String */ str){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the offset value represented by the string, in minutes\r\n\t\tvar off = parseTimeString(str);\r\n\t\tif(off === null){ return 0; }\r\n\t\tvar adj = str.indexOf('-') === 0 ? -1 : 1;\r\n\t\toff = adj * (((off[1] * 60 + off[2]) *60 + off[3]) * 1000);\r\n\t\treturn -off/60/1000;\r\n\t}\r\n\r\n\tfunction _getRuleStart(/* Rule */ rule, /* int */ year, /* int */ off){\r\n\t\t// summary:\r\n\t\t//\t\tReturns a date that the rule begins matching in the given year.\r\n\t\tvar month = getMonthNumber(rule[3]),\r\n\t\t\tday = rule[4],\r\n\t\t\ttime = parseTimeString(rule[5]);\r\n\t\tif(time[4] == \"u\"){\r\n\t\t\t// We are UTC - so there is no offset to use\r\n\t\t\toff = 0;\r\n\t\t}\r\n\t\t\r\n\t\tvar d, dtDay, incr;\r\n\t\tif(isNaN(day)){\r\n\t\t\tif(day.substr(0, 4) == \"last\"){\r\n\t\t\t\t// Last day of the month at the desired time of day\r\n\t\t\t\tday = dayMap[day.substr(4,3).toLowerCase()];\r\n\t\t\t\td = new Date(getUTCStamp(year, month + 1, 1,\r\n\t\t\t\t\t\t\t\t\t\ttime[1] - 24, time[2], time[3],\r\n\t\t\t\t\t\t\t\t\t\toff));\r\n\t\t\t\tdtDay = dateUtil.add(d, \"minute\", -off).getUTCDay();\r\n\t\t\t\t// Set it to the final day of the correct weekday that month\r\n\t\t\t\tincr = (day > dtDay) ? (day - dtDay - 7) : (day - dtDay);\r\n\t\t\t\tif(incr !== 0){\r\n\t\t\t\t\td = dateUtil.add(d, \"hour\", incr * 24);\r\n\t\t\t\t}\r\n\t\t\t\treturn d;\r\n\t\t\t}else{\r\n\t\t\t\tday = dayMap[day.substr(0, 3).toLowerCase()];\r\n\t\t\t\tif(day != \"undefined\"){\r\n\t\t\t\t\tif(rule[4].substr(3, 2) == '>='){\r\n\t\t\t\t\t\t// The stated date of the month\r\n\t\t\t\t\t\td = new Date(getUTCStamp(year, month, parseInt(rule[4].substr(5), 10),\r\n\t\t\t\t\t\t\t\t\ttime[1], time[2], time[3], off));\r\n\t\t\t\t\t\tdtDay = dateUtil.add(d, \"minute\", -off).getUTCDay();\r\n\t\t\t\t\t\t// Set to the first correct weekday after the stated date\r\n\t\t\t\t\t\tincr = (day < dtDay) ? (day - dtDay + 7) : (day - dtDay);\r\n\t\t\t\t\t\tif(incr !== 0){\r\n\t\t\t\t\t\t\td = dateUtil.add(d, \"hour\", incr * 24);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t}else if(day.substr(3, 2) == '<='){\r\n\t\t\t\t\t\t// The stated date of the month\r\n\t\t\t\t\t\td = new Date(getUTCStamp(year, month, parseInt(rule[4].substr(5), 10),\r\n\t\t\t\t\t\t\t\t\ttime[1], time[2], time[3], off));\r\n\t\t\t\t\t\tdtDay = dateUtil.add(d, \"minute\", -off).getUTCDay();\r\n\t\t\t\t\t\t// Set to first correct weekday before the stated date\r\n\t\t\t\t\t\tincr = (day > dtDay) ? (day - dtDay - 7) : (day - dtDay);\r\n\t\t\t\t\t\tif(incr !== 0){\r\n\t\t\t\t\t\t\td = dateUtil.add(d, \"hour\", incr * 24);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\t// Numeric date\r\n\t\t\td = new Date(getUTCStamp(year, month, parseInt(day, 10),\r\n\t\t\t\t\t\ttime[1], time[2], time[3], off));\r\n\t\t\treturn d;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfunction _getRulesForYear(/* Zone */ zone, /* int */ year){\r\n\t\tvar rules = [];\r\n\t\tarrayUtil.forEach(_rules[zone[1]]||[], function(r){\r\n\t\t\t// Clean up rules as needed\r\n\t\t\tfor(var i = 0; i < 2; i++){\r\n\t\t\t\tswitch(r[i]){\r\n\t\t\t\t\tcase \"min\":\r\n\t\t\t\t\t\tr[i] = _minYear;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"max\":\r\n\t\t\t\t\t\tr[i] = _maxYear;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"only\":\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tr[i] = parseInt(r[i], 10);\r\n\t\t\t\t\t\tif(isNaN(r[i])){\r\n\t\t\t\t\t\t\tthrow new Error('Invalid year found on rule');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(typeof r[6] == \"string\"){\r\n\t\t\t\t// Change our offset to be an integer\r\n\t\t\t\tr[6] = getOffsetInMins(r[6]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Quick-filter to grab all rules that match my year\r\n\t\t\tif((r[0] <= year && r[1] >= year) || // Matches my y\r\n\t\t\t\t(r[0] == year && r[1] == \"only\")){ // Matches my only\r\n\t\t\t\trules.push({r: r, d: _getRuleStart(r, year, zone[0])});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn rules;\r\n\t}\r\n\r\n\r\n\tfunction _loadZoneRanges(/* String */ tz, /* Object[] */ zoneList) {\r\n\t\t// summary:\r\n\t\t//\t\tLoads the zone ranges for the given timezone\r\n\t\t\r\n\t\tvar zr = _loadedRanges[tz] = [];\r\n\t\tfor(var i = 0; i < zoneList.length; i++){\r\n\t\t\tvar z = zoneList[i];\r\n\t\t\tvar r = zr[i] = [];\r\n\t\t\tvar prevZone = null;\r\n\t\t\tvar prevRange = null;\r\n\t\t\tvar prevRules = [];\r\n\t\t\t\r\n\t\t\t// Set up our zone offset to not be a string anymore\r\n\t\t\tif(typeof z[0] == \"string\"){\r\n\t\t\t\tz[0] = getOffsetInMins(z[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(i === 0){\r\n\t\t\t\t// The beginning of zoneinfo time - let's not worry about\r\n\t\t\t\t// to-the-hour accuracy before Jan 1, 1835\r\n\t\t\t\tr[0] = Date.UTC(_minYear,0,1,0,0,0,0);\r\n\t\t\t}else{\r\n\t\t\t\tr[0] = zr[i - 1][1];\r\n\t\t\t\tprevZone = zoneList[i - 1];\r\n\t\t\t\tprevRange = zr[i - 1];\r\n\t\t\t\tprevRules = prevRange[2];\r\n\t\t\t}\r\n\r\n\t\t\t// Load the rules that will be going in to our zone\r\n\t\t\tvar startYear = new Date(r[0]).getUTCFullYear();\r\n\t\t\tvar endYear = z[3] ? parseInt(z[3], 10) : _maxYear;\r\n\t\t\tvar rlz = [];\r\n\t\t\tvar j;\r\n\t\t\tfor(j = startYear; j <= endYear; j++){\r\n\t\t\t\trlz = rlz.concat(_getRulesForYear(z, j));\r\n\t\t\t}\r\n\t\t\trlz.sort(function(a, b){\r\n\t\t\t\treturn dateUtil.compare(a.d, b.d);\r\n\t\t\t});\r\n\t\t\tvar rl;\r\n\t\t\tfor(j = 0, rl; (rl = rlz[j]); j++){\r\n\t\t\t\tvar prevRule = j > 0 ? rlz[j - 1] : null;\r\n\t\t\t\tif(rl.r[5].indexOf(\"u\") < 0 && rl.r[5].indexOf(\"s\") < 0){\r\n\t\t\t\t\tif(j === 0 && i > 0){\r\n\t\t\t\t\t\tif(prevRules.length){\r\n\t\t\t\t\t\t\t// We have a previous rule - so use it\r\n\t\t\t\t\t\t\trl.d = dateUtil.add(rl.d, \"minute\", prevRules[prevRules.length - 1].r[6]);\r\n\t\t\t\t\t\t}else if(dateUtil.compare(new Date(prevRange[1]), rl.d, \"date\") === 0){\r\n\t\t\t\t\t\t\t// No previous rules - but our date is the same as the\r\n\t\t\t\t\t\t\t// previous zone ended on - so use that.\r\n\t\t\t\t\t\t\trl.d = new Date(prevRange[1]);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\trl.d = dateUtil.add(rl.d, \"minute\", getOffsetInMins(prevZone[1]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else if(j > 0){\r\n\t\t\t\t\t\trl.d = dateUtil.add(rl.d, \"minute\", prevRule.r[6]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tr[2] = rlz;\r\n\r\n\t\t\tif(!z[3]){\r\n\t\t\t\t// The end of zoneinfo time - we'll cross this bridge when we\r\n\t\t\t\t// get close to Dec 31, 2038\r\n\t\t\t\tr[1] = Date.UTC(_maxYear,11,31,23,59,59,999);\r\n\t\t\t}else{\r\n\t\t\t\tvar year = parseInt(z[3], 10),\r\n\t\t\t\t\tmonth = getMonthNumber(z[4]||\"Jan\"),\r\n\t\t\t\t\tday = parseInt(z[5]||\"1\", 10),\r\n\t\t\t\t\ttime = parseTimeString(z[6]||\"0\");\r\n\t\t\t\tvar utcStmp = r[1] = getUTCStamp(year, month, day,\r\n\t\t\t\t\t\t\t\t\ttime[1], time[2], time[3],\r\n\t\t\t\t\t\t\t\t\t((time[4] == \"u\") ? 0 : z[0]));\r\n\t\t\t\tif(isNaN(utcStmp)){\r\n\t\t\t\t\tutcStmp = r[1] = _getRuleStart([0,0,0,z[4],z[5],z[6]||\"0\"],\r\n\t\t\t\t\t\t\t\t\t\t\tyear, ((time[4] == \"u\") ? 0 : z[0])).getTime();\r\n\t\t\t\t}\r\n\t\t\t\tvar matches = arrayUtil.filter(rlz, function(rl, idx){\r\n\t\t\t\t\tvar o = idx > 0 ? rlz[idx - 1].r[6] * 60 * 1000 : 0;\r\n\t\t\t\t\treturn (rl.d.getTime() < utcStmp + o);\r\n\t\t\t\t});\r\n\t\t\t\tif(time[4] != \"u\" && time[4] != \"s\"){\r\n\t\t\t\t\tif(matches.length){\r\n\t\t\t\t\t\tr[1] += matches[matches.length - 1].r[6] * 60 * 1000;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tr[1] += getOffsetInMins(z[1]) * 60 * 1000;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction getZoneInfo(/* String */ dt, /* String */ tz) {\r\n\t\t// summary:\r\n\t\t//\t\tReturns the zone entry from the zoneinfo database for the given date\r\n\t\t//\t\tand timezone\r\n\t\tvar t = tz;\r\n\t\tvar zoneList = _zones[t];\r\n\r\n\t\t// Follow links to get to an actual zone\r\n\t\twhile(typeof zoneList == \"string\"){\r\n\t\t\tt = zoneList;\r\n\t\t\tzoneList = _zones[t];\r\n\t\t}\r\n\t\tif(!zoneList){\r\n\t\t\t// Backward-compat file hasn't loaded yet, try looking in there\r\n\t\t\tif(!_loadedZones.backward){\r\n\t\t\t\t// This is for backward entries like \"America/Fort_Wayne\" that\r\n\t\t\t\t// getRegionForTimezone *thinks* it has a region file and zone\r\n\t\t\t\t// for (e.g., America => 'northamerica'), but in reality it's a\r\n\t\t\t\t// legacy zone we need the backward file for\r\n\t\t\t\tvar parsed = loadZoneFile(\"backward\", true);\r\n\t\t\t\treturn getZoneInfo(dt, tz); //Object\r\n\t\t\t}\r\n\t\t\tinvalidTZError(t);\r\n\t\t}\r\n\t\t\r\n\t\tif(!_loadedRanges[tz]){\r\n\t\t\t_loadZoneRanges(tz, zoneList);\r\n\t\t}\r\n\t\tvar ranges = _loadedRanges[tz];\r\n\t\tvar tm = dt.getTime();\r\n\t\tfor(var i = 0, r; (r = ranges[i]); i++){\r\n\t\t\tif(tm >= r[0] && tm < r[1]){\r\n\t\t\t\treturn {zone: zoneList[i], range: ranges[i], idx: i};\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new Error('No Zone found for \"' + tz + '\" on ' + dt);\r\n\t}\r\n\t\r\n\tfunction getRule(/* Date */ dt, /* ZoneInfo */ zoneInfo) {\r\n \t\t// summary:\r\n\t\t//\t\tReturns the latest-matching rule entry from the zoneinfo\r\n\t\t//\t\tdatabase for the given date and zone\r\n\t\t\r\n\t\tvar lastMatch = -1;\r\n\t\tvar rules = zoneInfo.range[2]||[];\r\n\t\tvar tsp = dt.getTime();\r\n\t\tvar zr = zoneInfo.range;\r\n\t\tfor(var i = 0, r; (r = rules[i]); i++){\r\n\t\t\tif(tsp >= r.d.getTime()){\r\n\t\t\t\tlastMatch = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(lastMatch >= 0){\r\n\t\t\treturn rules[lastMatch].r;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n  \r\n\tfunction getAbbreviation(/* String */ tz, /* Object */ zoneInfo, /* Object */ rule) {\r\n\t\t// summary:\r\n\t\t//\t\tReturns the abbreviation for the given zone and rule\r\n\t\tvar res;\r\n\t\tvar zone = zoneInfo.zone;\r\n\t\tvar base = zone[2];\r\n\t\tif(base.indexOf('%s') > -1){\r\n\t\t\tvar repl;\r\n\t\t\tif(rule){\r\n\t\t\t\trepl = rule[7];\r\n\t\t\t\tif(repl == \"-\"){ repl = \"\"; }\r\n\t\t\t}else if(zone[1] in abbrExceptions){\r\n\t\t\t\trepl = abbrExceptions[zone[1]];\r\n\t\t\t}else{\r\n\t\t\t\tif(zoneInfo.idx > 0){\r\n\t\t\t\t\t// Check if our previous zone's base is the same as our\r\n\t\t\t\t\t// current in \"S\" (standard) mode.  If so, then use \"S\"\r\n\t\t\t\t\t// for our replacement\r\n\t\t\t\t\tvar pz = _zones[tz][zoneInfo.idx - 1];\r\n\t\t\t\t\tvar pb = pz[2];\r\n\t\t\t\t\tif(pb.indexOf('%s') < 0){\r\n\t\t\t\t\t\tif(base.replace('%s', \"S\") == pb){\r\n\t\t\t\t\t\t\trepl = \"S\";\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\trepl = \"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\trepl = \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\trepl = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tres = base.replace('%s', repl);\r\n\t\t}else if(base.indexOf(\"/\") > -1){\r\n\t\t\tvar bs = base.split(\"/\");\r\n\t\t\tif(rule){\r\n\t\t\t\tres = bs[rule[6] === 0 ? 0 : 1];\r\n\t\t\t}else{\r\n\t\t\t\tres = bs[0];\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tres = base;\r\n\t\t}\r\n\t\treturn res; // String\r\n\t}\r\n\t\r\n\tlang.setObject(\"dojox.date.timezone\", {\r\n\t\t// summary:\r\n\t\t//\t\tmix-in to dojo.date to provide timezones based on\r\n\t\t//\t\tthe Olson timezone data\r\n\t\t// description:\r\n\t\t//\t\tmix-in to dojo.date to provide timezones based on\r\n\t\t//\t\tthe Olson timezone data.\r\n\t\t//\t\tIf you pass \"timezone\" as a parameter to your format options,\r\n\t\t//\t\tthen you get the date formatted (and offset) for that timezone\r\n\t\t\r\n\t\tgetTzInfo: function(/* Date */ dt, /* String */ tz){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the timezone information for the given date and\r\n\t\t\t//\t\ttimezone string\r\n\t\t\t// dt: Date\r\n\t\t\t//\t\tThe Date - a \"proxyDate\"\r\n\t\t\t// tz: String\r\n\t\t\t//\t\tString representation of the timezone you want to get info\r\n\t\t\t//\t\tfor date\r\n\t\t\t\r\n\t\t\t// Lazy-load any zones not yet loaded\r\n\t\t\tif(loadingScheme == \"lazyLoad\"){\r\n\t\t\t\t// Get the correct region for the zone\r\n\t\t\t\tvar zoneFile = getRegionForTimezone(tz);\r\n\t\t\t\tif(!zoneFile){\r\n\t\t\t\t\tthrow new Error(\"Not a valid timezone ID.\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(!_loadedZones[zoneFile]){\r\n\t\t\t\t\t\t// Get the file and parse it -- use synchronous XHR\r\n\t\t\t\t\t\tloadZoneFile(zoneFile);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar zoneInfo = getZoneInfo(dt, tz);\r\n\t\t\tvar off = zoneInfo.zone[0];\r\n\t\t\t// See if the offset needs adjustment\r\n\t\t\tvar rule = getRule(dt, zoneInfo);\r\n\t\t\tif(rule){\r\n\t\t\t\toff += rule[6];\r\n\t\t\t}else{\r\n\t\t\t\tif(_rules[zoneInfo.zone[1]] && zoneInfo.idx > 0){\r\n\t\t\t\t\toff += getOffsetInMins(_zones[tz][zoneInfo.idx - 1][1]);\r\n\t\t\t\t}else{\r\n\t\t\t\t\toff += getOffsetInMins(zoneInfo.zone[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar abbr = getAbbreviation(tz, zoneInfo, rule);\r\n\t\t\treturn { tzOffset: off, tzAbbr: abbr }; // Object\r\n\t\t},\r\n\t\t\r\n\t\tloadZoneData: function(data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLoads the given data object into the zone database\r\n\t\t\t// data: Object\r\n\t\t\t//\t\tThe data to load - contains \"zones\" and \"rules\" parameters\r\n\t\t\tloadZoneData(data);\r\n\t\t},\r\n\t\t\r\n\t\tgetAllZones: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array of zones that have been loaded\r\n\t\t\tvar arr = [];\r\n\t\t\tfor(var z in _zones){ arr.push(z); }\r\n\t\t\tarr.sort();\r\n\t\t\treturn arr; // String[]\r\n\t\t}\r\n\t});\r\n\t\r\n\t// Now - initialize the stuff that we should have pre-loaded\r\n\tif(typeof defaultZoneFile == \"string\" && defaultZoneFile){\r\n\t\tdefaultZoneFile = [defaultZoneFile];\r\n\t}\r\n\tif(defaultZoneFile instanceof Array){\r\n\t\tarrayUtil.forEach(defaultZoneFile, loadZoneFile);\r\n\t}\r\n\t\r\n\t// And enhance the default formatting functions\r\n\t// If you pass \"timezone\" as a parameter to your format options,\r\n\t// then you get the date formatted (and offset) for that timezone\r\n\tvar oLocaleFmt = localeUtil.format,\r\n\t\toGetZone = localeUtil._getZone;\r\n\tlocaleUtil.format = function(dateObject, options){\r\n\t\toptions = options||{};\r\n\t\tif(options.timezone && !options._tzInfo){\r\n\t\t\t// Store it in our options so we can use it later\r\n\t\t\toptions._tzInfo = dojox.date.timezone.getTzInfo(dateObject, options.timezone);\r\n\t\t}\r\n\t\tif(options._tzInfo){\r\n\t\t\t// Roll our date to display the correct time according to the\r\n\t\t\t// desired offset\r\n\t\t\tvar offset = dateObject.getTimezoneOffset() - options._tzInfo.tzOffset;\r\n\t\t\tdateObject = new Date(dateObject.getTime() + (offset * 60 * 1000));\r\n\t\t}\r\n\t\treturn oLocaleFmt.call(this, dateObject, options);\r\n\t};\r\n\tlocaleUtil._getZone = function(dateObject, getName, options){\r\n\t\tif(options._tzInfo){\r\n\t\t\treturn getName ? options._tzInfo.tzAbbr : options._tzInfo.tzOffset;\r\n\t\t}\r\n\t\treturn oGetZone.call(this, dateObject, getName, options);\r\n\t};\r\n\r\n\t/*=====\r\n\t// Hide these enhancements from the doc parser because they obscure the original definition of _getZone() and\r\n\t// format.   TODO: change above overrides to around() advice so that original definitions aren't changed.\r\n\t localeUtil.format = oLocaleFmt;\r\n\t localeUtil._getZone = oGetZone;\r\n\t=====*/\r\n\t\r\n\treturn dojox.date.timezone;\r\n});"]}