{"version":3,"sources":["widget/UpgradeBar.js"],"names":["define","dojo","array","connect","declare","baseFx","lang","has","baseWin","domAttr","domClass","domConstruct","domGeo","style","cookie","domReady","fx","win","_WidgetBase","_TemplatedMixin","template","experimental","notifications","buttonCancel","noRemindButton","templateString","constructor","props","node","forEach","childNodes","n","nodeType","val","get","this","push","message","innerHTML","validate","evals","eval","e","checkNotifications","length","i","notify","postCreate","inherited","arguments","domNode","parentNode","set","mixin","attributeMap","type","destroy","dontRemindButtonNode","self","setWidth","v","getBox","w","window","hitch","msg","document","body","appendChild","show","_bodyMarginTop","_size","getContentBox","h","display","height","opacity","_showAnim","combine","animateProperty","duration","properties","marginTop","play","hide","_hideAnim","_onDontRemindClick","expires","_onCloseEnter","add","closeButtonNode","_onCloseLeave","remove"],"mappings":";;;;;;;AAAAA,QACC,oBACA,mBACA,qBACA,qBACA,gBACA,kBACA,mBACA,oBACA,gBACA,iBACA,qBACA,oBACA,iBACA,cACA,gBACA,UACA,cACA,oBACA,wBACA,0CACE,SAASC,EAAMC,EAAOC,EAASC,EAASC,EAAQC,EAAMC,EAAKC,EAClDC,EAASC,EAAUC,EAAcC,EAAQC,EAAOC,EAChDC,EAAUC,EAAIC,EAAKC,EAAaC,EAAiBC,GAwN7D,OAtNAnB,EAAKoB,aAAa,2BAEDjB,EAAQ,2BAA4Bc,EAAaC,IAiCjEG,iBAIAC,aAAa,gBAMbC,eAAe,wBAEfC,eAAgBL,EAEhBM,YAAa,SAASC,EAAOC,IAExBD,EAAML,eAAiBM,GAG1B1B,EAAM2B,QAAQD,EAAKE,WAAY,SAASC,GACvC,GAAe,GAAZA,EAAEC,SAAY,CAChB,IAAIC,EAAMxB,EAAQyB,IAAIH,EAAG,YACzBI,KAAKb,cAAcc,MAClBC,QAAQN,EAAEO,UACVC,SAAS,WAGR,IAAIC,GAAQ,EACZ,IACCA,EAAQvC,EAAKwC,KAAKR,GAClB,MAAMS,IACP,OAAOF,OAIRL,OAKLQ,mBAAoB,WAOnB,GAAIR,KAAKb,cAAcsB,OAKvB,IAAI,IAAIC,EAAE,EAAEA,EAAEV,KAAKb,cAAcsB,OAAOC,IAAI,CAE3C,GADYV,KAAKb,cAAcuB,GAAGN,WACzB,CACRJ,KAAKW,OAAOX,KAAKb,cAAcuB,GAAGR,SAGlC,SAKHU,WAAY,WAWX,GAVAZ,KAAKa,UAAUC,WACZd,KAAKe,QAAQC,YACftC,EAAMuC,IAAIjB,KAAKe,QAAS,UAAW,QAEpC5C,EAAK+C,MAAMlB,KAAKmB,cACfjB,SAAUT,KAAK,cAAe2B,KAAK,eAEhCpB,KAAKX,gBACRb,EAAa6C,QAAQrB,KAAKsB,sBAEb,GAAXlD,EAAI,MAAS,CAOf,IAAImD,EAAOvB,KACPwB,EAAW,WACd,IAAIC,EAAI3C,EAAI4C,SACZhD,EAAMuC,IAAIM,EAAKR,QAAS,QAASU,EAAEE,EAAE,OAEtC3B,KAAKhC,QAAQ4D,OAAQ,SAAU,WAC9BJ,MAGDA,IAED5C,EAAST,EAAK0D,MAAM7B,KAAM,wBAI3BW,OAAQ,SAASmB,GAObnD,EAAO,6BAGNqB,KAAKe,QAAQC,YAAehB,KAAKe,QAAQC,WAAWb,WACvD4B,SAASC,KAAKC,YAAYjC,KAAKe,SAEhCrC,EAAMuC,IAAIjB,KAAKe,QAAS,UAAW,IAChCe,GACF9B,KAAKiB,IAAI,UAAWa,KAKtBI,KAAM,WAOLlC,KAAKmC,eAAiBzD,EAAMqB,IAAI1B,EAAQ2D,OAAQ,aAChDhC,KAAKoC,MAAQ3D,EAAO4D,cAAcrC,KAAKe,SAASuB,EAChD5D,EAAMuC,IAAIjB,KAAKe,SAAWwB,QAAQ,QAASC,OAAO,EAAGC,QAAQ,IAEzDzC,KAAK0C,YACR1C,KAAK0C,UAAY7D,EAAG8D,SACnBzE,EAAO0E,iBAAkBnD,KAAKpB,EAAQ2D,OAAQa,SAAS,IAAKC,YAAaC,UAAU/C,KAAKmC,eAAenC,KAAKoC,SAC5GlE,EAAO0E,iBAAkBnD,KAAKO,KAAKe,QAAS8B,SAAS,IAAKC,YAAaN,OAAOxC,KAAKoC,MAAOK,QAAQ,QAGpGzC,KAAK0C,UAAUM,QAGhBC,KAAM,WAIDjD,KAAKkD,YACRlD,KAAKkD,UAAYrE,EAAG8D,SACnBzE,EAAO0E,iBAAkBnD,KAAKpB,EAAQ2D,OAAQa,SAAS,IAAKC,YAAaC,UAAU/C,KAAKmC,kBACxFjE,EAAO0E,iBAAkBnD,KAAKO,KAAKe,QAAS8B,SAAS,IAAKC,YAAaN,OAAO,EAAGC,QAAQ,OAE1FzE,EAAQA,QAAQgC,KAAKkD,UAAW,QAASlD,KAAM,WAC9CtB,EAAMuC,IAAIjB,KAAKe,SAAUwB,QAAQ,OAAQE,QAAQ,OAGnDzC,KAAKkD,UAAUF,QAGhBG,mBAAoB,WAKnBxE,EAAO,2BAA2B,GAAQyE,QAAQ,OAClDpD,KAAKiD,QAGNI,cAAe,WAKd9E,EAAS+E,IAAItD,KAAKuD,gBAAiB,mCAGpCC,cAAe,WAKdjF,EAASkF,OAAOzD,KAAKuD,gBAAiB","file":"../../widget/UpgradeBar.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\", // dojo.eval\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/_base/connect\", // connect\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/fx\", // baseFx.animateProperty\r\n\t\"dojo/_base/lang\", // lang.mixin, lang.hitch\r\n\t\"dojo/_base/sniff\", // has(\"ie\")\r\n\t\"dojo/_base/window\", // baseWin.body\r\n\t\"dojo/dom-attr\", // domAttr.get\r\n\t\"dojo/dom-class\", // domClass.addClass, domClass.removeClass\r\n\t\"dojo/dom-construct\", // domConstruct.destroy\r\n\t\"dojo/dom-geometry\", // domGeo.getContentBox\r\n\t\"dojo/dom-style\", // style.get, style.set\r\n\t\"dojo/cookie\", // cookie\r\n\t\"dojo/domReady\", // domReady\r\n\t\"dojo/fx\", // fx.combine\r\n\t\"dojo/window\", // win.getBox\r\n\t\"dijit/_WidgetBase\", // _WidgetBase\r\n\t\"dijit/_TemplatedMixin\", // _TemplatedMixin\r\n\t\"dojo/text!./UpgradeBar/UpgradeBar.html\"\r\n], function(dojo, array, connect, declare, baseFx, lang, has, baseWin,\r\n            domAttr, domClass, domConstruct, domGeo, style, cookie,\r\n            domReady, fx, win, _WidgetBase, _TemplatedMixin, template){\r\n\r\ndojo.experimental(\"dojox.widget.UpgradeBar\");\r\n\r\nvar UpgradeBar = declare(\"dojox.widget.UpgradeBar\", [_WidgetBase, _TemplatedMixin], {\r\n\t// summary:\r\n\t//\t\tShows a bar at the top of the screen when the user is to\r\n\t//\t\tbe notified that they should upgrade their browser or a\r\n\t//\t\tplugin.\r\n\t// description:\r\n\t//\t\tYou can insert custom validations to trigger the UpgradeBar\r\n\t//\t\tto display. An evaluation of 'true' shows the bar (as this\r\n\t//\t\tversion *is* less than it should be). Multiple validations\r\n\t//\t\tmay be checked, although only the first in the list will be\r\n\t//\t\tdisplayed.\r\n\t//\t\tMarkup and programmatic are supported. Markup is a little\r\n\t//\t\tcleaner, since a majority of the parameters are the HTML\r\n\t//\t\tsnippets to be displayed. In markup, the validate code should\r\n\t//\t\tbe an expression that will evaluate to true or false. This\r\n\t//\t\texpression is wrapped in a try/catch, so if it blows up, it\r\n\t//\t\tis assumed to be true and trigger the bar.\r\n\t//\t\tIn programmatic, a function should be used that returns true\r\n\t//\t\tor false. You would need to use your own try/catch in that.\r\n\t// example:\r\n\t//\t\tSee tests for examples.\r\n\r\n\r\n\t// notifications: Array\r\n\t//\t\tAn array of objects that hold the criteria for upgrades:\r\n\t//\r\n\t//\t\t- message: String: The message to display in the bar. Can be HTML.\r\n\t//\t\t- validate: Function: The expression to evaluate to determine if the\r\n\t//\t\t\tbar should show or not. Should be a simple expression\r\n\t//\t\t\tif used in HTML:\r\n\t//\r\n\t//\t|\t<div validate=\"!google.gears\">\r\n\t//\t|\t<div validate=\"has('ie')<8\">\r\n\tnotifications:[],\r\n\r\n\t// buttonCancel:String\r\n\t//\t\tThe HTML tip show when hovering over the close button.\r\n\tbuttonCancel:\"Close for now\",\r\n\r\n\t// noRemindButton:String\r\n\t//\t\tThe text link shown that when clicked, permanently dismisses\r\n\t//\t\tthe message (sets a cookie). If this string is blank, this\r\n\t//\t\tlink is not displayed.\r\n\tnoRemindButton:\"Don't Remind Me Again\",\r\n\r\n\ttemplateString: template,\r\n\r\n\tconstructor: function(props, node){\r\n\r\n\t\tif(!props.notifications && node){\r\n\t\t\t// From markup. Create the notifications Array from the\r\n\t\t\t// srcRefNode children.\r\n\t\t\tarray.forEach(node.childNodes, function(n){\r\n\t\t\t\tif(n.nodeType==1){\r\n\t\t\t\t\tvar val = domAttr.get(n, \"validate\");\r\n\t\t\t\t\tthis.notifications.push({\r\n\t\t\t\t\t\tmessage:n.innerHTML,\r\n\t\t\t\t\t\tvalidate:function(){\r\n\t\t\t\t\t\t\t// the function that fires to determine if the\r\n\t\t\t\t\t\t\t// bar shows or not.\r\n\t\t\t\t\t\t\tvar evals = true;\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\tevals = dojo.eval(val);\r\n\t\t\t\t\t\t\t}catch(e){ /* squelch. it's true.*/ }\r\n\t\t\t\t\t\t\treturn evals;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcheckNotifications: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal. Go through the notifications Array\r\n\t\t//\t\tand check for any that evaluate to true.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\r\n\t\tif(!this.notifications.length){\r\n\t\t\t// odd. why use the bar but not set any notifications?\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor(var i=0;i<this.notifications.length;i++){\r\n\t\t\tvar evals = this.notifications[i].validate();\r\n\t\t\tif(evals){\r\n\t\t\t\tthis.notify(this.notifications[i].message);\r\n\t\t\t\t// Validation resulted in true, meaning a feature is missing\r\n\t\t\t\t// Don't check any other messages. One at a time.\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this.domNode.parentNode){\r\n\t\t\tstyle.set(this.domNode, \"display\", \"none\");\r\n\t\t}\r\n\t\tlang.mixin(this.attributeMap, {\r\n\t\t\tmessage:{ node:\"messageNode\", type:\"innerHTML\" }\r\n\t\t});\r\n\t\tif(!this.noRemindButton){\r\n\t\t\tdomConstruct.destroy(this.dontRemindButtonNode);\r\n\t\t}\r\n\t\tif(has(\"ie\")==6){\r\n\t\t\t// IE6 is challenged when it comes to 100% width.\r\n\t\t\t// It thinks the body has more padding and more\r\n\t\t\t// margin than it really does. It would work to\r\n\t\t\t// set the body pad and margin to 0, but we can't\r\n\t\t\t// set that and disturb a potential layout.\r\n\t\t\t//\r\n\t\t\tvar self = this;\r\n\t\t\tvar setWidth = function(){\r\n\t\t\t\tvar v = win.getBox();\r\n\t\t\t\tstyle.set(self.domNode, \"width\", v.w+\"px\");\r\n\t\t\t};\r\n\t\t\tthis.connect(window, \"resize\", function(){\r\n\t\t\t\tsetWidth();\r\n\t\t\t});\r\n\r\n\t\t\tsetWidth();\r\n\t\t}\r\n\t\tdomReady(lang.hitch(this, \"checkNotifications\"));\r\n\t\t//this.checkNotifications();\r\n\t},\r\n\r\n\tnotify: function(msg){\r\n\t\t// summary:\r\n\t\t//\t\tTriggers the bar to display. An internal function,\r\n\t\t//\t\tbut could be called externally for fun.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\r\n\t\tif(cookie(\"disableUpgradeReminders\")){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(!this.domNode.parentNode || !this.domNode.parentNode.innerHTML){\r\n\t\t\tdocument.body.appendChild(this.domNode);\r\n\t\t}\r\n\t\tstyle.set(this.domNode, \"display\", \"\");\r\n\t\tif(msg){\r\n\t\t\tthis.set(\"message\", msg);\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tshow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal. Shows the bar. Do not call directly.\r\n\t\t//\t\tUse notify();\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\r\n\t\tthis._bodyMarginTop = style.get(baseWin.body(), \"marginTop\");\r\n\t\tthis._size = domGeo.getContentBox(this.domNode).h;\r\n\t\tstyle.set(this.domNode, { display:\"block\", height:0, opacity:0 });\r\n\r\n\t\tif(!this._showAnim){\r\n\t\t\tthis._showAnim = fx.combine([\r\n\t\t\t\tbaseFx.animateProperty({ node:baseWin.body(), duration:500, properties:{ marginTop:this._bodyMarginTop+this._size } }),\r\n\t\t\t\tbaseFx.animateProperty({ node:this.domNode, duration:500, properties:{ height:this._size, opacity:1 } })\r\n\t\t\t]);\r\n\t\t}\r\n\t\tthis._showAnim.play();\r\n\t},\r\n\r\n\thide: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHides the bar. May be called externally.\r\n\r\n\t\tif(!this._hideAnim){\r\n\t\t\tthis._hideAnim = fx.combine([\r\n\t\t\t\tbaseFx.animateProperty({ node:baseWin.body(), duration:500, properties:{ marginTop:this._bodyMarginTop } }),\r\n\t\t\t\tbaseFx.animateProperty({ node:this.domNode, duration:500, properties:{ height:0, opacity:0 } })\r\n\t\t\t]);\r\n\t\t\tconnect.connect(this._hideAnim, \"onEnd\", this, function(){\r\n\t\t\t\tstyle.set(this.domNode, {display:\"none\", opacity:1});\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis._hideAnim.play();\r\n\t},\r\n\r\n\t_onDontRemindClick: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when user clicks the \"do not remind\" link.\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tcookie(\"disableUpgradeReminders\", true, { expires:3650 });\r\n\t\tthis.hide();\r\n\t},\r\n\r\n\t_onCloseEnter: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when user hovers over close icon\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tdomClass.add(this.closeButtonNode, \"dojoxUpgradeBarCloseIcon-hover\");\r\n\t},\r\n\r\n\t_onCloseLeave: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when user stops hovering over close icon\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\t\tdomClass.remove(this.closeButtonNode, \"dojoxUpgradeBarCloseIcon-hover\");\r\n\t}\r\n});\r\n\r\n\r\nreturn UpgradeBar;\r\n});\r\n"]}