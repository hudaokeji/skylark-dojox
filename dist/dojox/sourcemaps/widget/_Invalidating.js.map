{"version":3,"sources":["widget/_Invalidating.js"],"names":["define","declare","lang","Stateful","invalidatingProperties","invalidRendering","postscript","mixin","this","inherited","arguments","props","i","length","watch","hitch","invalidateRendering","addInvalidatingProperties","properties","concat","setTimeout","validateRendering","refreshRendering"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,kBAAmB,iBAChD,SAASC,EAASC,EAAMC,GAExB,OAAOF,EAAQ,6BAA8BE,GAQ5CC,uBAAwB,KAIxBC,kBAAkB,EAClBC,WAAY,SAASC,GAEpB,GADAC,KAAKC,UAAUC,WACZF,KAAKJ,uBAEP,IADA,IAAIO,EAAQH,KAAKJ,uBACTQ,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAChCJ,KAAKM,MAAMH,EAAMC,GAAIV,EAAKa,MAAMP,KAAMA,KAAKQ,sBACxCT,GAASI,EAAMC,KAAML,GAEvBC,KAAKQ,uBAKTC,0BAA2B,SAAsBC,GAOhDV,KAAKJ,uBAAyBI,KAAKJ,uBAAuBI,KAAKJ,uBAAuBe,OAAOD,GAAYA,GAE1GF,oBAAqB,WAGhBR,KAAKH,mBACRG,KAAKH,kBAAmB,EACxBe,WAAWlB,EAAKa,MAAMP,KAAMA,KAAKa,mBAAoB,KAGvDA,kBAAmB,WAKfb,KAAKH,mBACPG,KAAKc,mBACLd,KAAKH,kBAAmB,IAG1BiB,iBAAkB","file":"../../widget/_Invalidating.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/_base/lang\", \"dojo/Stateful\"], \r\n\tfunction(declare, lang, Stateful){\r\n\t\t\r\n\treturn declare(\"dojox.widget._Invalidating\", Stateful, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for classes (usually widgets) that watch invalidated properties and delay the rendering\r\n\t\t//\t\tafter these properties modifications to the next execution frame.\r\n\t\t\r\n\t\t// invalidatingPoperties: String[]\r\n\t\t//\t\tThe list of properties to watch for to trigger invalidation. This list must be initialized in the\r\n\t\t//\t\tconstructor. Default value is null.\r\n\t\tinvalidatingProperties: null,\r\n\t\t// invalidRenderering: Boolean\r\n\t\t//\t\tWhether the rendering is invalid or not. This is a readonly information, one must call \r\n\t\t//\t\tinvalidateRendering to modify this flag. \r\n\t\tinvalidRendering: false,\r\n\t\tpostscript: function(mixin){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.invalidatingProperties){\r\n\t\t\t\tvar props = this.invalidatingProperties;\r\n\t\t\t\tfor(var i = 0; i < props.length; i++){\r\n\t\t\t\t\tthis.watch(props[i], lang.hitch(this, this.invalidateRendering));\r\n\t\t\t\t\tif(mixin && props[i] in mixin){\r\n\t\t\t\t\t\t// if the prop happens to have been passed in the ctor mixin we are invalidated\r\n\t\t\t\t\t\tthis.invalidateRendering();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\taddInvalidatingProperties: function(/*String[]*/ properties){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd properties to the watched properties to trigger invalidation. This method must be called in\r\n\t\t\t//\t\tthe constructor. It is typically used by subclasses of a _Invalidating class to add more properties\r\n\t\t\t//\t\tto watch for.\r\n\t\t\t// properties:\r\n\t\t\t//\t\tThe list of properties to watch for.\r\n\t\t\tthis.invalidatingProperties = this.invalidatingProperties?this.invalidatingProperties.concat(properties):properties;\r\n\t\t},\r\n\t\tinvalidateRendering: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInvalidating the rendering for the next executation frame.\r\n\t\t\tif(!this.invalidRendering){\r\n\t\t\t\tthis.invalidRendering = true;\r\n\t\t\t\tsetTimeout(lang.hitch(this, this.validateRendering), 0);\r\n\t\t\t}\r\n\t\t},\r\n\t\tvalidateRendering: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tImmediately validate the rendering if it has been invalidated. You generally do not call that method yourself.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tif(this.invalidRendering){\r\n\t\t\t\tthis.refreshRendering();\r\n\t\t\t\tthis.invalidRendering = false;\r\n\t\t\t}\r\n\t\t},\r\n\t\trefreshRendering: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tActually refresh the rendering. Implementation should implement that method.\r\n\t\t}\r\n\t});\r\n});\r\n"]}