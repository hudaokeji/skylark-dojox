{"version":3,"sources":["widget/rotator/PanFade.js"],"names":["define","array","connect","lang","baseFx","domStyle","fx","_pan","type","args","j","node","current","duration","easing","k","next","r","rotatorBox","m","a","s","w","h","p","q","set","display","opacity","start","end","combine","animateProperty","mixin","properties","fadeOut","fadeIn","_setZindex","n","z","exports","panFade","wrap","rotator","panes","len","length","idx","nw","Math","abs","ww","max","min","_forward","_dir","_pans","_nodes","_duration","continuous","quick","round","f","i","x","y","push","_anim","chain","disconnect","forEach","left","top","zIndex","panFadeDown","panFadeRight","panFadeUp","panFadeLeft","getObject"],"mappings":"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","file":"../../../widget/rotator/PanFade.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/fx\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/fx\"\r\n], function(array, connect, lang, baseFx, domStyle, fx) {\r\n\r\n\t// Constants used to identify which edge the pane pans in from.\r\n\tvar DOWN = 0,\r\n\t\tRIGHT = 1,\r\n\t\tUP = 2,\r\n\t\tLEFT = 3;\r\n\r\n\tfunction _pan(/*int*/type, /*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tHandles the preparation of the dom node and creates the dojo.Animation object.\r\n\t\tvar j = {\r\n\t\t\t\tnode: args.current.node,\r\n\t\t\t\tduration: args.duration,\r\n\t\t\t\teasing: args.easing\r\n\t\t\t},\r\n\t\t\tk = {\r\n\t\t\t\tnode: args.next.node,\r\n\t\t\t\tduration: args.duration,\r\n\t\t\t\teasing: args.easing\r\n\t\t\t},\r\n\t\t\tr = args.rotatorBox,\r\n\t\t\tm = type % 2,\r\n\t\t\ta = m ? \"left\" : \"top\",\r\n\t\t\ts = (m ? r.w : r.h) * (type < 2 ? -1 : 1),\r\n\t\t\tp = {},\r\n\t\t\tq = {};\r\n\r\n\t\tdomStyle.set(k.node, {\r\n\t\t\tdisplay: \"\",\r\n\t\t\topacity: 0\r\n\t\t});\r\n\r\n\t\tp[a] = {\r\n\t\t\tstart: 0,\r\n\t\t\tend: -s\r\n\t\t};\r\n\r\n\t\tq[a] = {\r\n\t\t\tstart: s,\r\n\t\t\tend: 0\r\n\t\t};\r\n\r\n\t\treturn fx.combine([ /*dojo.Animation*/\r\n\t\t\tbaseFx.animateProperty(lang.mixin({ properties: p }, j)),\r\n\t\t\tbaseFx.fadeOut(j),\r\n\t\t\tbaseFx.animateProperty(lang.mixin({ properties: q }, k)),\r\n\t\t\tbaseFx.fadeIn(k)\r\n\t\t]);\r\n\t}\r\n\r\n\tfunction _setZindex(/*DomNode*/n, /*int*/z){\r\n\t\t// summary:\r\n\t\t//\t\tHelper function for continuously panning.\r\n\t\tdomStyle.set(n, \"zIndex\", z);\r\n\t}\r\n\r\n\tvar exports = {\r\n\t\tpanFade: function(/*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a dojo.Animation that either pans left or right to the next pane.\r\n\t\t\t//\t\tThe actual direction depends on the order of the panes.\r\n\t\t\t//\r\n\t\t\t//\t\tIf panning forward from index 1 to 3, it will perform a pan left. If panning\r\n\t\t\t//\t\tbackwards from 5 to 1, then it will perform a pan right.\r\n\t\t\t//\r\n\t\t\t//\t\tIf the parameter \"continuous\" is set to true, it will return an animation\r\n\t\t\t//\t\tchain of several pan animations of each intermediate pane panning. For\r\n\t\t\t//\t\texample, if you pan forward from 1 to 3, it will return an animation panning\r\n\t\t\t//\t\tleft from 1 to 2 and then 2 to 3.\r\n\t\t\t//\r\n\t\t\t//\t\tIf an easing is specified, it will be applied to each pan transition.  For\r\n\t\t\t//\t\texample, if you are panning from pane 1 to pane 5 and you set the easing to\r\n\t\t\t//\t\t\"dojo.fx.easing.elasticInOut\", then it will \"wobble\" 5 times, once for each\r\n\t\t\t//\t\tpan transition.\r\n\t\t\t//\r\n\t\t\t//\t\tIf the parameter \"wrap\" is set to true, it will pan to the next pane using\r\n\t\t\t//\t\tthe shortest distance in the array of panes. For example, if there are 6\r\n\t\t\t//\t\tpanes, then panning from 5 to 1 will pan forward (left) from pane 5 to 6 and\r\n\t\t\t//\t\t6 to 1.  If the distance is the same either going forward or backwards, then\r\n\t\t\t//\t\tit will always pan forward (left).\r\n\t\t\t//\r\n\t\t\t//\t\tA continuous pan will use the target pane's duration to pan all intermediate\r\n\t\t\t//\t\tpanes.  To use the target's pane duration for each intermediate pane, then\r\n\t\t\t//\t\tset the \"quick\" parameter to \"false\".\r\n\r\n\t\t\tvar w = args.wrap,\r\n\t\t\t\tp = args.rotator.panes,\r\n\t\t\t\tlen = p.length,\r\n\t\t\t\tz = len,\r\n\t\t\t\tj = args.current.idx,\r\n\t\t\t\tk = args.next.idx,\r\n\t\t\t\tnw = Math.abs(k - j),\r\n\t\t\t\tww = Math.abs((len - Math.max(j, k)) + Math.min(j, k)) % len,\r\n\t\t\t\t_forward = j < k,\r\n\t\t\t\t_dir = LEFT,\r\n\t\t\t\t_pans = [],\r\n\t\t\t\t_nodes = [],\r\n\t\t\t\t_duration = args.duration;\r\n\r\n\t\t\t// default to pan left, but check if we should pan right.\r\n\t\t\t// need to take into account wrapping.\r\n\t\t\tif((!w && !_forward) || (w && (_forward && nw > ww || !_forward && nw < ww))){\r\n\t\t\t\t_dir = RIGHT;\r\n\t\t\t}\r\n\r\n\t\t\tif(args.continuous){\r\n\t\t\t\t// if continuous pans are quick, then divide the duration by the number of panes\r\n\t\t\t\tif(args.quick){\r\n\t\t\t\t\t_duration = Math.round(_duration / (w ? Math.min(ww, nw) : nw));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set the current pane's z-index\r\n\t\t\t\t_setZindex(p[j].node, z--);\r\n\r\n\t\t\t\tvar f = (_dir == LEFT);\r\n\r\n\t\t\t\t// loop and set z-indexes and get all pan animations\r\n\t\t\t\twhile(1){\r\n\t\t\t\t\t// set the current pane\r\n\t\t\t\t\tvar i = j;\r\n\r\n\t\t\t\t\t// increment/decrement the next pane's index\r\n\t\t\t\t\tif(f){\r\n\t\t\t\t\t\tif(++j >= len){\r\n\t\t\t\t\t\t\tj = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(--j < 0){\r\n\t\t\t\t\t\t\tj = len - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar x = p[i],\r\n\t\t\t\t\t\ty = p[j];\r\n\r\n\t\t\t\t\t// set next pane's z-index\r\n\t\t\t\t\t_setZindex(y.node, z--);\r\n\r\n\t\t\t\t\t// build the pan animation\r\n\t\t\t\t\t_pans.push(_pan(_dir, lang.mixin({\r\n\t\t\t\t\t\teasing: function(m){ return m; } // continuous gets a linear easing by default\r\n\t\t\t\t\t}, args, {\r\n\t\t\t\t\t\tcurrent: x,\r\n\t\t\t\t\t\tnext: y,\r\n\t\t\t\t\t\tduration: _duration\r\n\t\t\t\t\t})));\r\n\r\n\t\t\t\t\t// if we're done, then break out of the loop\r\n\t\t\t\t\tif((f && j == k) || (!f && j == k)){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this must come after the break... we don't want the last pane to get it's\r\n\t\t\t\t\t// styles reset.\r\n\t\t\t\t\t_nodes.push(y.node);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// build the chained animation of all pan animations\r\n\t\t\t\tvar _anim = fx.chain(_pans);\r\n\r\n\t\t\t\t// clean up styles when the chained animation finishes\r\n\t\t\t\tvar h = connect.connect(_anim, \"onEnd\", function(){\r\n\t\t\t\t\tconnect.disconnect(h);\r\n\t\t\t\t\tarray.forEach(_nodes, function(q){\r\n\t\t\t\t\t\tdomStyle.set(q, {\r\n\t\t\t\t\t\t\tdisplay: \"none\",\r\n\t\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\t\topacity: 1,\r\n\t\t\t\t\t\t\ttop: 0,\r\n\t\t\t\t\t\t\tzIndex: 0\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn _anim;\r\n\t\t\t}\r\n\r\n\t\t\t// we're not continuous, so just return a normal pan animation\r\n\t\t\treturn _pan(_dir, args); /*dojo.Animation*/\r\n\t\t},\r\n\r\n\t\tpanFadeDown: function(/*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a dojo.Animation that pans in the next rotator pane from the top.\r\n\t\t\treturn _pan(DOWN, args); /*dojo.Animation*/\r\n\t\t},\r\n\r\n\t\tpanFadeRight: function(/*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a dojo.Animation that pans in the next rotator pane from the right.\r\n\t\t\treturn _pan(RIGHT, args); /*dojo.Animation*/\r\n\t\t},\r\n\r\n\t\tpanFadeUp: function(/*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a dojo.Animation that pans in the next rotator pane from the bottom.\r\n\t\t\treturn _pan(UP, args); /*dojo.Animation*/\r\n\t\t},\r\n\r\n\t\tpanFadeLeft: function(/*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a dojo.Animation that pans in the next rotator pane from the left.\r\n\t\t\treturn _pan(LEFT, args); /*dojo.Animation*/\r\n\t\t}\r\n\t};\r\n\r\n\t// back-compat, remove for 2.0\r\n\tlang.mixin(lang.getObject(\"dojox.widget.rotator\"), exports);\r\n\r\n\treturn exports;\r\n});"]}