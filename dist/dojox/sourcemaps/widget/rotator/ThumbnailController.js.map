{"version":3,"sources":["widget/rotator/ThumbnailController.js"],"names":["define","declare","connect","lang","event","aspect","domAttr","domClass","domConstruct","query","_css","_selected","rotator","constructor","params","node","mixin","this","_domNode","r","firstChild","removeChild","i","panes","length","n","s","get","t","test","tagName","j","create","classname","idx","href","onclick","e","stop","control","apply","title","innerHTML","after","hitch","destroy","_onUpdate","type","removeClass","add"],"mappings":";;;;;;;AAAAA,QACC,qBACA,qBACA,kBACA,mBACA,cACA,gBACA,iBACA,qBACA,cACE,SAASC,EAASC,EAASC,EAAMC,EAAOC,EAAQC,EAASC,EAAUC,EAAcC,GAEnF,IAAIC,EAAO,oBACVC,EAAYD,EAAO,WAEpB,OAAOT,EAAQ,2CAA4C,MAmB1DW,QAAS,KAETC,YAAa,SAAmBC,EAA0BC,GAIzDZ,EAAKa,MAAMC,KAAMH,GAEjBG,KAAKC,SAAWH,EAGhB,IAAII,EAAIF,KAAKL,QACb,GAAGO,EAAE,CAEJ,KAAMJ,EAAKK,YACVL,EAAKM,YAAYN,EAAKK,YAGvB,IAAI,IAAIE,EAAE,EAAGA,EAAEH,EAAEI,MAAMC,OAAQF,IAAI,CAClC,IAAIG,EAAIN,EAAEI,MAAMD,GAAGP,KAClBW,EAAIpB,EAAQqB,IAAIF,EAAG,aAAenB,EAAQqB,IAAIF,EAAG,OACjDG,EAAItB,EAAQqB,IAAIF,EAAG,QAAU,GAE3B,OAAOI,KAAKJ,EAAEK,UAChB,SAAUC,GACTvB,EAAawB,OAAO,KACnBC,UAAWvB,EAAO,IAAMA,EAAOqB,EAAI,KAAOA,GAAKZ,EAAEe,IAAMvB,EAAY,IACnEwB,KAAMT,EACNU,QAAS,SAASC,GACjBjC,EAAMkC,KAAKD,GACRlB,GACFA,EAAEoB,QAAQC,MAAMrB,GAAI,KAAMY,KAG5BU,MAAOb,EACPc,UAAW,aAAehB,EAAI,UAAYE,EAAI,OAC5Cb,GAZJ,CAaGO,GAILjB,EAAOsC,MAAMxB,EAAG,WAAYhB,EAAKyC,MAAM3B,KAAM,cAAc,KAI7D4B,QAAS,WAIRrC,EAAaqC,QAAQ5B,KAAKC,WAG3B4B,UAAW,SAAmBC,GAI7B,IAAI5B,EAAIF,KAAKL,QACb,GAAW,qBAARmC,EAA4B,CAC9B,IAAItB,EAAIhB,EAAM,IAAMC,EAAMO,KAAKC,UAAU8B,YAAYrC,GAClDQ,EAAEe,IAAMT,EAAED,QACZjB,EAAS0C,IAAIxB,EAAEN,EAAEe,KAAMvB","file":"../../../widget/rotator/ThumbnailController.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/aspect\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/query\"\r\n], function(declare, connect, lang, event, aspect, domAttr, domClass, domConstruct, query) {\r\n\r\n\tvar _css = \"dojoxRotatorThumb\",\r\n\t\t_selected = _css + \"Selected\";\r\n\r\n\treturn declare(\"dojox.widget.rotator.ThumbnailController\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA rotator controller that displays thumbnails of each rotator pane.\r\n\t\t// description:\r\n\t\t//\t\tThe ThumbnailController will look at each of the rotator's panes and\r\n\t\t//\t\tonly if the node is an `<img>` tag, then it will create an thumbnail of\r\n\t\t//\t\tthe pane's image using the `<img>` tag's \"thumbsrc\" or \"src\" attribute.\r\n\t\t//\r\n\t\t//\t\tThe size of the thumbnails and the style of the selected thumbnail is\r\n\t\t//\t\tcontrolled using CSS.\r\n\t\t// example:\r\n\t\t//\t|\t<div dojoType=\"dojox.widget.Rotator\" jsId=\"myRotator\">\r\n\t\t//\t|\t\t<img src=\"/path/to/image1.jpg\" thumbsrc=\"/path/to/thumb1.jpg\" alt=\"Image 1\"/>\r\n\t\t//\t|\t\t<img src=\"/path/to/image2.jpg\" thumbsrc=\"/path/to/thumb2.jpg\" alt=\"Image 2\"/>\r\n\t\t//\t|\t</div>\r\n\t\t//\t|\t<div dojoType=\"dojox.widget.rotator.ThumbnailController\" rotator=\"myRotator\"></div>\r\n\r\n\t\t// rotator: dojox/widget/Rotator\r\n\t\t//\t\tAn instance of a Rotator widget.\r\n\t\trotator: null,\r\n\r\n\t\tconstructor: function(/*Object*/params, /*DomNode|string*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitializes the thumbnails and connect to the rotator.\r\n\r\n\t\t\tlang.mixin(this, params);\r\n\r\n\t\t\tthis._domNode = node;\r\n\r\n\t\t\t// check if we have a valid rotator\r\n\t\t\tvar r = this.rotator;\r\n\t\t\tif(r){\r\n\t\t\t\t// remove all of the controller's child nodes just in case\r\n\t\t\t\twhile(node.firstChild){\r\n\t\t\t\t\tnode.removeChild(node.firstChild);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor(var i=0; i<r.panes.length; i++){\r\n\t\t\t\t\tvar n = r.panes[i].node,\r\n\t\t\t\t\t\ts = domAttr.get(n, \"thumbsrc\") || domAttr.get(n, \"src\"),\r\n\t\t\t\t\t\tt = domAttr.get(n, \"alt\") || \"\";\r\n\r\n\t\t\t\t\tif(/img/i.test(n.tagName)){\r\n\t\t\t\t\t\t(function(j){\r\n\t\t\t\t\t\t\tdomConstruct.create(\"a\", {\r\n\t\t\t\t\t\t\t\tclassname: _css + ' ' + _css + j + ' ' + (j == r.idx ? _selected : \"\"),\r\n\t\t\t\t\t\t\t\thref: s,\r\n\t\t\t\t\t\t\t\tonclick: function(e){\r\n\t\t\t\t\t\t\t\t\tevent.stop(e);\r\n\t\t\t\t\t\t\t\t\tif(r){\r\n\t\t\t\t\t\t\t\t\t\tr.control.apply(r, [\"go\", j]);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\ttitle: t,\r\n\t\t\t\t\t\t\t\tinnerHTML: '<img src=\"' + s + '\" alt=\"' + t + '\"/>'\r\n\t\t\t\t\t\t\t}, node);\r\n\t\t\t\t\t\t})(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\taspect.after(r, 'onUpdate', lang.hitch(this, \"_onUpdate\"), true);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisconnect from the rotator.\r\n\r\n\t\t\tdomConstruct.destroy(this._domNode);\r\n\t\t},\r\n\r\n\t\t_onUpdate: function(/*string*/type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates various pager controls when the rotator updates.\r\n\r\n\t\t\tvar r = this.rotator; // no need to test if this is null since _onUpdate is only fired by the rotator\r\n\t\t\tif(type == \"onAfterTransition\"){\r\n\t\t\t\tvar n = query('.' + _css, this._domNode).removeClass(_selected);\r\n\t\t\t\tif(r.idx < n.length){\r\n\t\t\t\t\tdomClass.add(n[r.idx], _selected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n});"]}