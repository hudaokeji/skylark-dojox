{"version":3,"sources":["widget/Rotator.js"],"names":["define","aspect","declare","Deferred","lang","array","fx","dom","domAttr","domConstruct","domGeometry","domStyle","topic","on","parser","query","_defaultTransition","_defaultTransitionDuration","_displayStr","_noneStr","_zIndex","Rotator","transition","transitionParams","panes","constructor","params","node","mixin","this","_t","t","tt","_transitions","idm","_idMap","tp","eval","_domNode","byId","cb","_domNodeContentBox","getContentBox","p","left","top","warn","bt","dt","console","declaredClass","id","Date","getTime","get","set","getObject","duration","forEach","create","pp","n","i","q","idx","r","trans","a","position","display","orphan","s","e","_functionFromScript","push","_controlSub","subscribe","hitch","control","destroy","wfe","remove","next","go","prev","len","length","_resetWaitForEvent","anim","current","info","rotator","rotatorBox","def","ev","waitForEvent","h","after","opacity","zIndex","onAfterOut","onAfterIn","onUpdate","callback","onBeforeOut","onBeforeIn","play","type","publish","action","args","_toArray","arguments","shift","apply","addCallback","onManualChange","resize","width","height","b","w","setContentSize","setObject","Animation","_fire"],"mappings":"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","file":"../../widget/Rotator.js","sourcesContent":["define([\r\n\t\"dojo/aspect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/Deferred\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/fx\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/topic\",\r\n\t\"dojo/on\",\r\n\t\"dojo/parser\",\r\n\t\"dojo/query\",\r\n\t\"dojo/fx/easing\",\r\n\t\"dojo/NodeList-dom\"\r\n], function(aspect, declare, Deferred, lang, array, fx, dom, domAttr, domConstruct, domGeometry, domStyle, topic,\r\n\t\t\ton, parser, query){\r\n\r\n\t// build friendly strings\r\n\tvar _defaultTransition = \"dojox.widget.rotator.swap\", // please do NOT change\r\n\t\t_defaultTransitionDuration = 500,\r\n\t\t_displayStr = \"display\",\r\n\t\t_noneStr = \"none\",\r\n\t\t_zIndex = \"zIndex\";\r\n\r\n\tvar Rotator = declare(\"dojox.widget.Rotator\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA widget for rotating through child nodes using transitions.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tA small, fast, extensible, awesome rotator that cycles, with transitions,\r\n\t\t//\t\tthrough panes (child nodes) displaying only one at a time and ties into\r\n\t\t//\t\tcontrollers used to change state.\r\n\t\t//\r\n\t\t//\t\tThe Rotator does not rely on dijit.  It is designed to be as lightweight\r\n\t\t//\t\tas possible.  Controllers and transitions have been externalized\r\n\t\t//\t\tso builds can be as optimized with only the components you want to use.\r\n\t\t//\r\n\t\t//\t\tFor best results, each rotator pane should be the same height and width as\r\n\t\t//\t\tthe Rotator container node and consider setting overflow to hidden.\r\n\t\t//\t\tWhile the Rotator will accept any DOM node for a rotator pane, a block\r\n\t\t//\t\telement or element with display:block is recommended.\r\n\t\t//\r\n\t\t//\t\tNote: When the Rotator begins, it does not transition the first pane.\r\n\t\t//\r\n\t\t//\t\tsubscribed topics:\r\n\t\t//\r\n\t\t//\t\t\t[id]/rotator/control - Controls the Rotator\r\n\t\t//\t\t\tParameters:\r\n\t\t//\r\n\t\t//\t\t\t- /*string*/ action        - The name of a method of the Rotator to run\r\n\t\t//\t\t\t- /*anything?*/ args       - One or more arguments to pass to the action\r\n\t\t//\r\n\t\t//\t\tpublished topics:\r\n\t\t//\r\n\t\t//\t\t[id]/rotator/update - Notifies controllers that a pane or state has changed.\r\n\t\t//\t\tParameters:\r\n\t\t//\r\n\t\t//\t\t- /*string*/ type          - the type of notification\r\n\t\t//\t\t- /*dojox.widget.Rotator*/ rotator - the rotator instance\r\n\t\t//\t\t- /*object?*/ params\t\t - params\r\n\t\t//\r\n\t\t//\t\tdeclarative dojo/method events (per pane):\r\n\t\t//\r\n\t\t//\t\t- onBeforeIn  - Fired before the transition in starts.\r\n\t\t//\t\t- onAfterIn   - Fired after the transition in ends.\r\n\t\t//\t\t- onBeforeOut - Fired before the transition out starts.\r\n\t\t//\t\t- onAfterOut  - Fired after the transition out ends.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t<div dojoType=\"dojox.widget.Rotator\">\r\n\t\t//\t|\t\t<div>Pane 1!</div>\r\n\t\t//\t|\t\t<div>Pane 2!</div>\r\n\t\t//\t|\t</div>\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t<script type=\"text/javascript\">\r\n\t\t//\t|\t\trequire(\"dojo/parser\", \"dojo/domReady!\", \"dojox/widget/Rotator\", \"dojox/widget/rotator/Fade\"],\r\n\t\t//\t|           function(parser) { parser.parse(); });\r\n\t\t//\t|\t</script>\r\n\t\t//\t|\t<div dojoType=\"dojox/widget/Rotator\" transition=\"dojox/widget/rotator/crossFade\">\r\n\t\t//\t|\t\t<div>Pane 1!</div>\r\n\t\t//\t|\t\t<div>Pane 2!</div>\r\n\t\t//\t|\t</div>\r\n\r\n\t\t// transition: string\r\n\t\t//\t\tThe name of a function that is passed two panes nodes and a duration,\r\n\t\t//\t\tthen returns a dojo.Animation object. The default value is\r\n\t\t//\t\t\"dojox.widget.rotator.swap\".\r\n\t\ttransition: _defaultTransition,\r\n\r\n\t\t// transitionParams: string\r\n\t\t//\t\tParameters for the transition. The string is read in and eval'd as an\r\n\t\t//\t\tobject.  If the duration is absent, the default value will be used.\r\n\t\ttransitionParams: \"duration:\" + _defaultTransitionDuration,\r\n\r\n\t\t// panes: array\r\n\t\t//\t\tArray of panes to be created in the Rotator. Each array element\r\n\t\t//\t\twill be passed as attributes to a html.create() call.\r\n\t\tpanes: null,\r\n\r\n\t\tconstructor: function(/*Object*/params, /*DomNode|string*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitializes the panes and events.\r\n\t\t\tlang.mixin(this, params);\r\n\r\n\t\t\tvar _t = this,\r\n\t\t\t\tt = _t.transition,\r\n\t\t\t\ttt = _t._transitions = {},\r\n\t\t\t\tidm = _t._idMap = {},\r\n\t\t\t\ttp = _t.transitionParams = eval(\"({ \" + _t.transitionParams + \" })\"),\r\n\t\t\t\tnode = _t._domNode = dom.byId(node),\r\n\t\t\t\tcb = _t._domNodeContentBox = domGeometry.getContentBox(node), // we are going to assume the rotator will not be changing size\r\n\r\n\t\t\t\t// default styles to apply to all the container node and rotator's panes\r\n\t\t\t\tp = {\r\n\t\t\t\t\tleft: 0,\r\n\t\t\t\t\ttop: 0\r\n\t\t\t\t},\r\n\r\n\t\t\t\twarn = function(bt, dt){\r\n\t\t\t\t\tconsole.warn(_t.declaredClass, ' - Unable to find transition \"', bt, '\", defaulting to \"', dt, '\".');\r\n\t\t\t\t};\r\n\r\n\t\t\t// if we don't have an id, then generate one\r\n\t\t\t_t.id = node.id || (new Date()).getTime();\r\n\r\n\t\t\t// force the rotator DOM node to a relative position and attach the container node to it\r\n\t\t\tif(domStyle.get(node, \"position\") == \"static\"){\r\n\t\t\t\tdomStyle.set(node, \"position\", \"relative\");\r\n\t\t\t}\r\n\r\n\t\t\t// create our object for caching transition objects\r\n\t\t\ttt[t] = lang.getObject(t);\r\n\t\t\tif(!tt[t]){\r\n\t\t\t\twarn(t, _defaultTransition);\r\n\t\t\t\ttt[_t.transition = _defaultTransition] = lang.getObject(_defaultTransition);\r\n\t\t\t}\r\n\r\n\t\t\t// clean up the transition params\r\n\t\t\tif(!tp.duration){\r\n\t\t\t\ttp.duration = _defaultTransitionDuration;\r\n\t\t\t}\r\n\r\n\t\t\t// if there are any panes being passed in, add them to this node\r\n\t\t\tarray.forEach(_t.panes, function(p){\r\n\t\t\t\tdomConstruct.create(\"div\", p, node);\r\n\t\t\t});\r\n\r\n\t\t\t// zero out our panes array to store the real pane instance\r\n\t\t\tvar pp = _t.panes = [];\r\n\r\n\t\t\t// find and initialize the panes\r\n\t\t\tquery(\"> *\", node).forEach(function(n, i){\r\n\t\t\t\tvar q = { node: n, idx: i, params: lang.mixin({}, tp, eval(\"({ \" + (domAttr.get(n, \"transitionParams\") || \"\") + \" })\")) },\r\n\t\t\t\t\tr = q.trans = domAttr.get(n, \"transition\") || _t.transition;\r\n\r\n\t\t\t\t// cache each pane's title, duration, and waitForEvent attributes\r\n\t\t\t\tarray.forEach([\"id\", \"title\", \"duration\", \"waitForEvent\"], function(a){\r\n\t\t\t\t\tq[a] = domAttr.get(n, a);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif(q.id){\r\n\t\t\t\t\tidm[q.id] = i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cache the transition function\r\n\t\t\t\tif(!tt[r] && !(tt[r] = lang.getObject(r))){\r\n\t\t\t\t\twarn(r, q.trans = _t.transition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp.position = \"absolute\";\r\n\t\t\t\tp.display = _noneStr;\r\n\r\n\t\t\t\t// find the selected pane and initialize styles\r\n\t\t\t\tif(_t.idx == null || domAttr.get(n, \"selected\")){\r\n\t\t\t\t\tif(_t.idx != null){\r\n\t\t\t\t\t\tdomStyle.set(pp[_t.idx].node, _displayStr, _noneStr);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_t.idx = i;\r\n\t\t\t\t\tp.display = \"\";\r\n\t\t\t\t}\r\n\t\t\t\tdomStyle.set(n, p);\r\n\r\n\t\t\t\t// check for any declarative script blocks\r\n\t\t\t\tquery(\"> script[type^='dojo/method']\", n).orphan().forEach(function(s){\r\n\t\t\t\t\tvar e = domAttr.get(s, \"event\");\r\n\t\t\t\t\tif(e){\r\n\t\t\t\t\t\tq[e] = parser._functionFromScript(s);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// add this pane to the array of panes\r\n\t\t\t\tpp.push(q);\r\n\t\t\t});\r\n\r\n\t\t\t_t._controlSub = topic.subscribe(_t.id + \"/rotator/control\", lang.hitch(_t, this.control));\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroys the Rotator and its DOM node.\r\n\t\t\tarray.forEach([this._controlSub, this.wfe], function(wfe) { wfe.remove() });\r\n\t\t\tdomConstruct.destroy(this._domNode);\r\n\t\t},\r\n\r\n\t\tnext: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransitions the Rotator to the next pane.\r\n\t\t\treturn this.go(this.idx + 1);\r\n\t\t},\r\n\r\n\t\tprev: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransitions the Rotator to the previous pane.\r\n\t\t\treturn this.go(this.idx - 1);\r\n\t\t},\r\n\r\n\t\tgo: function(/*int|string?*/p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransitions the Rotator to the specified pane index.\r\n\t\t\tvar _t = this,\r\n\t\t\t\ti = _t.idx,\r\n\t\t\t\tpp = _t.panes,\r\n\t\t\t\tlen = pp.length,\r\n\t\t\t\tidm = _t._idMap[p];\r\n\r\n\t\t\t// we gotta move on, so if the current pane is waiting for an event, just\r\n\t\t\t// ignore it and clean up\r\n\t\t\t_t._resetWaitForEvent();\r\n\r\n\t\t\t// determine the next index and set it to idx for the next go to\r\n\t\t\tp = idm != null ? idm : (p || 0);\r\n\t\t\tp = p < len ? (p < 0 ? len-1 : p) : 0;\r\n\r\n\t\t\t// if we're already on the requested pane or still transitioning, then return\r\n\t\t\tif(p == i || _t.anim){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// get the current and next panes\r\n\t\t\tvar current = pp[i],\r\n\t\t\t\tnext = pp[p];\r\n\r\n\t\t\t// adjust the zIndexes so our animations look good... this must be done before\r\n\t\t\t// the animation is created so the animation could override it if necessary\r\n\t\t\tdomStyle.set(current.node, _zIndex, 2);\r\n\t\t\tdomStyle.set(next.node, _zIndex, 1);\r\n\r\n\t\t\t// info object passed to animations and onIn/Out events\r\n\t\t\tvar info = {\r\n\t\t\t\t\tcurrent: current,\r\n\t\t\t\t\tnext: next,\r\n\t\t\t\t\trotator: _t\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// get the transition\r\n\t\t\t\tanim = _t.anim = _t._transitions[next.trans](lang.mixin({\r\n\t\t\t\t\trotatorBox: _t._domNodeContentBox\r\n\t\t\t\t}, info, next.params));\r\n\r\n\t\t\tif(anim){\r\n\t\t\t\t// create the deferred that we'll be returning\r\n\t\t\t\tvar def = new Deferred(),\r\n\t\t\t\t\tev = next.waitForEvent,\r\n\r\n\t\t\t\th = aspect.after(anim, \"onEnd\", function(){\r\n\t\t\t\t\t// reset the node styles\r\n\t\t\t\t\tdomStyle.set(current.node, {\r\n\t\t\t\t\t\tdisplay: _noneStr,\r\n\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t\topacity: 1,\r\n\t\t\t\t\t\ttop: 0,\r\n\t\t\t\t\t\tzIndex: 0\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\th.remove();\r\n\t\t\t\t\t_t.anim = null;\r\n\t\t\t\t\t_t.idx = p;\r\n\r\n\t\t\t\t\t// fire end events\r\n\t\t\t\t\tif(current.onAfterOut){ current.onAfterOut(info); }\r\n\t\t\t\t\tif(next.onAfterIn){ next.onAfterIn(info); }\r\n\r\n\t\t\t\t\t_t.onUpdate(\"onAfterTransition\");\r\n\r\n\t\t\t\t\tif(!ev){\r\n\t\t\t\t\t\t// if there is a previous waitForEvent, then we need to make\r\n\t\t\t\t\t\t// sure it gets unsubscribed\r\n\t\t\t\t\t\t_t._resetWaitForEvent();\r\n\r\n\t\t\t\t\t\t// animation is all done, fire the deferred callback.\r\n\t\t\t\t\t\tdef.callback();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true);\r\n\r\n\t\t\t\t// if we're waiting for an event, subscribe to it so we know when to continue\r\n\t\t\t\t_t.wfe = ev ? topic.subscribe(ev, function(){\r\n\t\t\t\t\t_t._resetWaitForEvent();\r\n\t\t\t\t\tdef.callback(true);\r\n\t\t\t\t}) : null;\r\n\r\n\t\t\t\t_t.onUpdate(\"onBeforeTransition\");\r\n\r\n\t\t\t\t// fire start events\r\n\t\t\t\tif(current.onBeforeOut){ current.onBeforeOut(info); }\r\n\t\t\t\tif(next.onBeforeIn){ next.onBeforeIn(info); }\r\n\r\n\t\t\t\t// play the animation\r\n\t\t\t\tanim.play();\r\n\r\n\t\t\t\t// return the deferred\r\n\t\t\t\treturn def; /*Deferred*/\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonUpdate: function(/*string*/type, /*object?*/params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSend a notification to all controllers with the state of the rotator.\r\n\t\t\ttopic.publish(this.id + \"/rotator/update\", type, this, params || {});\r\n\t\t},\r\n\r\n\t\t_resetWaitForEvent: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIf there is a waitForEvent pending, kill it.\r\n\t\t\tif(this.wfe){\r\n\t\t\t\tthis.wfe.remove();\r\n\t\t\t\tdelete this.wfe;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcontrol: function(/*string*/action){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDispatches an action, first to this engine, then to the Rotator.\r\n\t\t\tvar args = lang._toArray(arguments),\r\n\t\t\t\t_t = this;\r\n\t\t\targs.shift();\r\n\r\n\t\t\t_t._resetWaitForEvent();\r\n\r\n\t\t\tif(_t[action]){\r\n\t\t\t\t// action exists, so call it and fire deferred if applicable\r\n\t\t\t\tvar def = _t[action].apply(_t, args);\r\n\t\t\t\tif(def){\r\n\t\t\t\t\tdef.addCallback(function(){\r\n\t\t\t\t\t\t_t.onUpdate(action);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// since this action was triggered by a controller, we assume this was a\r\n\t\t\t\t// manual action, so check if we should pause\r\n\t\t\t\t_t.onManualChange(action);\r\n\t\t\t}else{\r\n\t\t\t\tconsole.warn(_t.declaredClass, ' - Unsupported action \"', action, '\".');\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresize: function(/*int*/width, /*int*/height){\r\n\t\t\tvar b = this._domNodeContentBox = { w: width, h: height };\r\n\t\t\tdomGeometry.setContentSize(this._domNode, b);\r\n\t\t\tarray.forEach(this.panes, function(p){ domGeometry.setContentSize(p.node, b); });\r\n\t\t},\r\n\r\n\t\tonManualChange: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStub function that can be overriden or connected to.\r\n\t\t}\r\n\t});\r\n\r\n\tlang.setObject(_defaultTransition, function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tThe default rotator transition which swaps two panes.\r\n\t\treturn new fx.Animation({ // dojo.Animation\r\n\t\t\tplay: function(){\r\n\t\t\t\tdomStyle.set(args.current.node, _displayStr, _noneStr);\r\n\t\t\t\tdomStyle.set(args.next.node, _displayStr, \"\");\r\n\t\t\t\tthis._fire(\"onEnd\");\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\treturn Rotator;\r\n});\r\n"]}