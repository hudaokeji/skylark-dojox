{"version":3,"sources":["widget/AutoRotator.js"],"names":["define","declare","array","lang","on","mouse","Rotator","suspendOnHover","duration","autoStart","pauseOnManualChange","cycles","random","reverse","constructor","_t","this","_signals","_domNode","enter","anim","wfe","t","_endTime","n","_now","_suspended","_resetTimer","_resumeDuration","leave","playing","play","panes","length","pause","destroy","forEach","signal","remove","dojo","_connects","disconnect","inherited","arguments","skipCycleDecrement","skipDuration","onUpdate","_cycle","r","u","idx","_timer","setTimeout","hitch","Date","getTime","clearTimeout","manual","j","i","Math","floor","def","go","addCallback","onManualChange","action"],"mappings":";;;;;;;AAAAA,QACC,qBACA,mBACA,kBACA,UACA,aACA,wBACE,SAASC,EAASC,EAAOC,EAAMC,EAAIC,EAAOC,GAE7C,OAAOL,EAAQ,2BAA4BK,GAqB1CC,gBAAgB,EAKhBC,SAAU,IAIVC,WAAW,EAKXC,qBAAqB,EAIrBC,QAAS,EAITC,QAAQ,EAIRC,SAAS,EAERC,YAAa,WAIZ,IAAIC,EAAKC,KAGND,EAAGJ,OAAO,GAAKI,EAAGJ,QAAUI,EAAGJ,OAAS,EAE1CI,EAAGJ,SAEHI,EAAGJ,OAASI,EAAGJ,QAAU,EAAI,EAI9BI,EAAGE,UACFb,EAAGW,EAAGG,SAAUb,EAAMc,MAAO,WAG5B,GAAGJ,EAAGR,iBAAmBQ,EAAGK,OAASL,EAAGM,IAAI,CAC3C,IAAIC,EAAIP,EAAGQ,SACVC,EAAIT,EAAGU,OACRV,EAAGW,YAAa,EAChBX,EAAGY,cACHZ,EAAGa,gBAAkBN,EAAIE,EAAIF,EAAIE,EAAI,OAIvCpB,EAAGW,EAAGG,SAAUb,EAAMwB,MAAO,WAGzBd,EAAGR,iBAAmBQ,EAAGK,OAC3BL,EAAGW,YAAa,EACbX,EAAGe,UAAYf,EAAGM,KACpBN,EAAGgB,MAAK,OAOThB,EAAGN,WAAaM,EAAGiB,MAAMC,OAAS,EAEpClB,EAAGgB,OAGHhB,EAAGmB,SAILC,QAAS,WAGRjC,EAAMkC,QAAQpB,KAAKC,SAAU,SAASoB,GAAUA,EAAOC,kBAChDtB,KAAKC,SACZsB,KAAKH,QAAQpB,KAAKwB,UAAWD,KAAKE,YAClCzB,KAAK0B,UAAUC,YAGhBZ,KAAM,SAAqBa,EAAgCC,GAW1D,GARA7B,KAAKc,SAAU,EACfd,KAAKW,eAGqB,IAAvBiB,GAA+B5B,KAAKL,OAAS,GAC/CK,KAAKL,SAGY,GAAfK,KAAKL,OAEPK,KAAKkB,aACA,IAAIlB,KAAKU,WAId,GAHAV,KAAK8B,SAAS,QAGXD,EACF7B,KAAK+B,aACD,CACJ,IAAIC,GAAKhC,KAAKY,iBAAmB,GAAG,EACnCqB,GAAKD,EAAI,EAAIA,EAAKhC,KAAKgB,MAAMhB,KAAKkC,KAAK1C,UAAYQ,KAAKR,UAAW,EAEpEQ,KAAKY,gBAAkB,EACvBZ,KAAKO,SAAWP,KAAKS,OAASwB,EAC9BjC,KAAKmC,OAASC,WAAWjD,EAAKkD,MAAMrC,KAAM,UAAU,GAAQiC,KAK/Df,MAAO,WAGNlB,KAAKc,QAAUd,KAAKU,YAAa,EACjCV,KAAKL,QAAU,EACfK,KAAKW,cAGLX,KAAK8B,SAAS,UAGfrB,KAAM,WAGL,OAAO,IAAK6B,MAAQC,WAGrB5B,YAAa,WAGZ6B,aAAaxC,KAAKmC,SAGnBJ,OAAQ,SAAyBU,GAGhC,IAECC,EAFG3C,EAAKC,KACR2C,EAAI5C,EAAGmC,IAGR,GAAGnC,EAAGH,OAEL,GACC8C,EAAIE,KAAKC,MAAMD,KAAKhD,SAAWG,EAAGiB,MAAMC,OAAS,SAC3CyB,GAAKC,QAEZD,EAAIC,GAAK5C,EAAGF,SAAW,EAAI,GAI5B,IAAIiD,EAAM/C,EAAGgD,GAAGL,GAEbI,GACFA,EAAIE,YAAY,SAAqBnB,GACpC9B,EAAG+B,SAAS,SACT/B,EAAGe,SACLf,EAAGgB,MAAK,EAAOc,MAMnBoB,eAAgB,SAAmBC,GAIlClD,KAAKL,QAAU,EAGF,QAAVuD,IACFlD,KAAKW,cACFX,KAAKN,qBACPM,KAAKkB,SAIJlB,KAAKc,SACPd,KAAKe","file":"../../widget/AutoRotator.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/on\",\r\n\t\"dojo/mouse\",\r\n\t\"dojox/widget/Rotator\"\r\n], function(declare, array, lang, on, mouse, Rotator) {\r\n\r\nreturn declare(\"dojox.widget.AutoRotator\", Rotator,{\r\n\t// summary:\r\n\t//\t\tA rotator that automatically transitions between child nodes.\r\n\t// description:\r\n\t//\t\tAdds automatic rotating to the dojox.widget.Rotator.  The\r\n\t//\t\tAutoRotator has parameters that control how user input can\r\n\t//\t\taffect the rotator including a suspend when hovering over the\r\n\t//\t\trotator and pausing when the user manually advances to another\r\n\t//\t\tpane.\r\n\t// example:\r\n\t//\t|\t<div dojoType=\"dojox.widget.AutoRotator\" duration=\"3000\">\r\n\t//\t|\t\t<div>\r\n\t//\t|\t\t\tPane 1!\r\n\t//\t|\t\t</div>\r\n\t//\t|\t\t<div duration=\"5000\">\r\n\t//\t|\t\t\tPane 2 with an overrided duration!\r\n\t//\t|\t\t</div>\r\n\t//\t|\t</div>\r\n\r\n\t// suspendOnHover: Boolean\r\n\t//\t\tPause the rotator when the mouse hovers over it.\r\n\tsuspendOnHover: false,\r\n\r\n\t// duration: int\r\n\t//\t\tThe time in milliseconds before transitioning to the next pane.  The\r\n\t//\t\tdefault value is 4000 (4 seconds).\r\n\tduration: 4000,\r\n\t\r\n\t// autoStart: Boolean\r\n\t//\t\tStarts the timer to transition children upon creation.\r\n\tautoStart: true,\r\n\t\r\n\t// pauseOnManualChange: Boolean\r\n\t//\t\tPause the rotator when the pane is changed or a controller's next or\r\n\t//\t\tprevious buttons are clicked.\r\n\tpauseOnManualChange: false,\r\n\t\r\n\t// cycles: int\r\n\t//\t\tNumber of cycles before pausing.\r\n\tcycles: -1,\r\n\r\n\t// random: Boolean\r\n\t//\t\tDetermines if the panes should cycle randomly.\r\n\trandom: false,\r\n\r\n\t// reverse: Boolean\r\n\t//\t\tCauses the rotator to rotate in reverse order.\r\n\treverse: false,\r\n\r\n  constructor: function(){\r\n\t// summary:\r\n\t//\t\tInitializes the timer and connect to the rotator.\r\n\r\n\t\t\tvar _t = this;\r\n\r\n\t\t\t// validate the cycles counter\r\n\t\t\tif(_t.cycles-0 == _t.cycles && _t.cycles > 0){\r\n\t\t\t\t// we need to add 1 because we decrement cycles before the animation starts\r\n\t\t\t\t_t.cycles++;\r\n\t\t\t}else{\r\n\t\t\t\t_t.cycles = _t.cycles ? -1 : 0;\r\n\t\t\t}\r\n\r\n\t\t\t// wire up the mouse hover events\r\n\t\t\t_t._signals = [\r\n\t\t\t\ton(_t._domNode, mouse.enter, function(){\r\n\t\t\t\t\t// temporarily suspend the cycling, but don't officially pause\r\n\t\t\t\t\t// it and don't allow suspending if we're transitioning\r\n\t\t\t\t\tif(_t.suspendOnHover && !_t.anim && !_t.wfe){\r\n\t\t\t\t\t\tvar t = _t._endTime,\r\n\t\t\t\t\t\t\tn = _t._now();\r\n\t\t\t\t\t\t_t._suspended = true;\r\n\t\t\t\t\t\t_t._resetTimer();\r\n\t\t\t\t\t\t_t._resumeDuration = t > n ? t - n : 0.01;\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\r\n\t\t\t\ton(_t._domNode, mouse.leave, function(){\r\n\t\t\t\t\t// if we were playing, resume playback unless were in the\r\n\t\t\t\t\t// middle of a transition\r\n\t\t\t\t\tif(_t.suspendOnHover && !_t.anim){\r\n\t\t\t\t\t\t_t._suspended = false;\r\n\t\t\t\t\t\tif(_t.playing && !_t.wfe){\r\n\t\t\t\t\t\t\t_t.play(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t];\r\n\r\n\t\t\t// everything is ready, so start\r\n\t\t\tif(_t.autoStart && _t.panes.length > 1){\r\n\t\t\t\t// start playing\r\n\t\t\t\t_t.play();\r\n\t\t\t}else{\r\n\t\t\t\t// since we're not playing, lets pause\r\n\t\t\t\t_t.pause();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisconnect the AutoRotator's events.\r\n\t\t\tarray.forEach(this._signals, function(signal) { signal.remove(); });\r\n\t\t\tdelete this._signals;\r\n\t\t\tdojo.forEach(this._connects, dojo.disconnect);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tplay: function(/*Boolean?*/skipCycleDecrement, /*Boolean?*/skipDuration){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the state to \"playing\" and schedules the next cycle to run.\r\n\t\t\tthis.playing = true;\r\n\t\t\tthis._resetTimer();\r\n\r\n\t\t\t// don't decrement the count if we're resuming play\r\n\t\t\tif(skipCycleDecrement !== true && this.cycles > 0){\r\n\t\t\t\tthis.cycles--;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.cycles == 0){\r\n\t\t\t\t// we have reached the number of cycles, so pause\r\n\t\t\t\tthis.pause();\r\n\t\t\t}else if(!this._suspended){\r\n\t\t\t\tthis.onUpdate(\"play\");\r\n\t\t\t\t// if we haven't been suspended, then grab the duration for this pane and\r\n\t\t\t\t// schedule a cycle to be run\r\n\t\t\t\tif(skipDuration){\r\n\t\t\t\t\tthis._cycle();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvar r = (this._resumeDuration || 0)-0,\r\n\t\t\t\t\t\tu = (r > 0 ? r : (this.panes[this.idx].duration || this.duration))-0;\r\n\t\t\t\t\t// call _cycle() after a duration and pass in false so it isn't manual\r\n\t\t\t\t\tthis._resumeDuration = 0;\r\n\t\t\t\t\tthis._endTime = this._now() + u;\r\n\t\t\t\t\tthis._timer = setTimeout(lang.hitch(this, \"_cycle\", false), u);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpause: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the state to \"not playing\" and clears the cycle timer.\r\n\t\t\tthis.playing = this._suspended = false;\r\n\t\t\tthis.cycles = -1;\r\n\t\t\tthis._resetTimer();\r\n\r\n\t\t\t// notify the controllers we're paused\r\n\t\t\tthis.onUpdate(\"pause\");\r\n\t\t},\r\n\r\n\t\t_now: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHelper function to return the current system time in milliseconds.\r\n\t\t\treturn (new Date()).getTime(); // int\r\n\t\t},\r\n\r\n\t\t_resetTimer: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResets the timer used to schedule the next transition.\r\n\t\t\tclearTimeout(this._timer);\r\n\t\t},\r\n\r\n\t\t_cycle: function(/*Boolean|int?*/manual){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCycles the rotator to the next/previous pane.\r\n\t\t\tvar _t = this,\r\n\t\t\t\ti = _t.idx,\r\n\t\t\t\tj;\r\n\r\n\t\t\tif(_t.random){\r\n\t\t\t\t// make sure we don't randomly pick the pane we're already on\r\n\t\t\t\tdo{\r\n\t\t\t\t\tj = Math.floor(Math.random() * _t.panes.length + 1);\r\n\t\t\t\t}while(j == i);\r\n\t\t\t}else{\r\n\t\t\t\tj = i + (_t.reverse ? -1 : 1)\r\n\t\t\t}\r\n\r\n\t\t\t// rotate!\r\n\t\t\tvar def = _t.go(j);\r\n\r\n\t\t\tif(def){\r\n\t\t\t\tdef.addCallback(function(/*Boolean?*/skipDuration){\r\n\t\t\t\t\t_t.onUpdate(\"cycle\");\r\n\t\t\t\t\tif(_t.playing){\r\n\t\t\t\t\t\t_t.play(false, skipDuration);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonManualChange: function(/*string*/action){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverride the Rotator's onManualChange so we can pause.\r\n\r\n\t\t\tthis.cycles = -1;\r\n\r\n\t\t\t// obviously we don't want to pause if play was just clicked\r\n\t\t\tif(action != \"play\"){\r\n\t\t\t\tthis._resetTimer();\r\n\t\t\t\tif(this.pauseOnManualChange){\r\n\t\t\t\t\tthis.pause();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.playing){\r\n\t\t\t\tthis.play();\r\n\t\t\t}\r\n\t\t}\t\t\r\n});\r\n});\r\n"]}