{"version":3,"sources":["storage/CookieStorageProvider.js"],"names":["dojo","provide","require","declare","dojox","storage","Provider","store","cookieName","storageLife","initialize","this","fromJson","cookie","initialized","manager","loaded","isAvailable","isSupported","put","key","value","resultsHandler","namespace","_assertIsValidKey","DEFAULT_NAMESPACE","_assertIsValidNamespace","fullKey","getFullKey","toJson","_save","success","remove","SUCCESS","FAILED","get","getKeys","keys","currentKey","_beginsWith","substring","length","push","clear","getNamespaces","results","found","tester","test","currentNS","match","isPermanent","getMaximumSize","hasSettingsUI","isValidKey","keyName","undefined","isValidNamespace","expires","haystack","needle","Error","register","CookieStorageProvider"],"mappings":"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","file":"../../storage/CookieStorageProvider.js","sourcesContent":["dojo.provide(\"dojox.storage.CookieStorageProvider\");\r\n\r\ndojo.require(\"dojox.storage.Provider\");\r\ndojo.require(\"dojox.storage.manager\");\r\ndojo.require(\"dojo.cookie\");\r\n\r\ndojo.declare(\r\n\t\"dojox.storage.CookieStorageProvider\",\r\n\t[dojox.storage.Provider],\r\n\t{\r\n\t\tstore: null,\r\n\r\n\t\tcookieName: 'dojoxStorageCookie',\r\n\r\n\t\tstorageLife: 730, // in days\r\n\r\n\t\tinitialize: function(){\r\n\r\n\t\t\tthis.store = dojo.fromJson(dojo.cookie(this.cookieName)) || {};\r\n\r\n\t\t\tthis.initialized = true;\r\n\t\t\tdojox.storage.manager.loaded();\r\n\t\t},\r\n\r\n\t\tisAvailable: function(){ /*Boolean*/\r\n\t\t\treturn dojo.cookie.isSupported();\r\n\t\t},\r\n\r\n\t\tput: function(\t/*string*/ key,\r\n\t\t\t\t\t\t/*object*/ value,\r\n\t\t\t\t\t\t/*function*/ resultsHandler,\r\n\t\t\t\t\t\t/*string?*/ namespace){\r\n\r\n\t\t\tthis._assertIsValidKey(key);\r\n\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tfullKey = this.getFullKey(key,namespace);\r\n\r\n\t\t\tthis.store[fullKey] = dojo.toJson(value);\r\n\t\t\tthis._save();\r\n\r\n\t\t\tvar success = dojo.toJson(this.store) === dojo.cookie(this.cookieName);\r\n\r\n\t\t\tif(!success){\r\n\t\t\t\tthis.remove(key,namespace);\r\n\t\t\t}\r\n\r\n\t\t\tif(resultsHandler){\r\n\t\t\t\tresultsHandler(success ? this.SUCCESS : this.FAILED, key, null, namespace);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tget: function(/*string*/ key, /*string?*/ namespace){ /*Object*/\r\n\t\t\tthis._assertIsValidKey(key);\r\n\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\t// get our full key name, which is namespace + key\r\n\t\t\tkey = this.getFullKey(key, namespace);\r\n\r\n\t\t\treturn this.store[key] ? dojo.fromJson(this.store[key]) : null;\r\n\t\t},\r\n\r\n\t\tgetKeys: function(/*string?*/ namespace){ /*Array*/\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tnamespace = '__'+namespace+'_';\r\n\r\n\t\t\tvar keys = [];\r\n\t\t\tfor(var currentKey in this.store){\r\n\t\t\t\tif(this._beginsWith(currentKey,namespace)){\r\n\t\t\t\t\tcurrentKey = currentKey.substring(namespace.length);\r\n\t\t\t\t\tkeys.push(currentKey);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn keys;\r\n\t\t},\r\n\r\n\t\tclear: function(/*string?*/ namespace){\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tnamespace = '__'+namespace+'_';\r\n\r\n\t\t\tfor(var currentKey in this.store){\r\n\t\t\t\tif(this._beginsWith(currentKey,namespace)){\r\n\t\t\t\t\tdelete(this.store[currentKey]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._save();\r\n\t\t},\r\n\r\n\t\tremove: function(/*string*/ key, /*string?*/ namespace){\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tthis._assertIsValidKey(key);\r\n\t\t\tkey = this.getFullKey(key, namespace);\r\n\r\n\t\t\tdelete this.store[key];\r\n\t\t\tthis._save();\r\n\t\t},\r\n\r\n\t\tgetNamespaces: function(){ /*string[]*/\r\n\t\t\t// There must be a better way than\r\n\t\t\t// to execute a regex on *every*\r\n\t\t\t// item in the store.\r\n\r\n\t\t\tvar results = [this.DEFAULT_NAMESPACE];\r\n\r\n\t\t\tvar found = {};\r\n\t\t\tfound[this.DEFAULT_NAMESPACE] = true;\r\n\t\t\tvar tester = /^__([^_]*)_/;\r\n\r\n\t\t\tfor(var currentKey in this.store){\r\n\t\t\t\tif(tester.test(currentKey) == true){\r\n\t\t\t\t\tvar currentNS = currentKey.match(tester)[1];\r\n\t\t\t\t\tif(typeof found[currentNS] == \"undefined\"){\r\n\t\t\t\t\t\tfound[currentNS] = true;\r\n\t\t\t\t\t\tresults.push(currentNS);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\t\t},\r\n\r\n\t\tisPermanent: function(){ /*Boolean*/\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetMaximumSize: function(){ /* mixed */\r\n\t\t\treturn 4;\r\n\t\t},\r\n\r\n\t\thasSettingsUI: function(){ /*Boolean*/\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tisValidKey: function(/*string*/ keyName){ /*Boolean*/\r\n\t\t\tif(keyName === null || keyName === undefined){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^[0-9A-Za-z_-]*$/.test(keyName);\r\n\t\t},\r\n\r\n\t\tisValidNamespace: function(/*string*/ keyName){ /*Boolean*/\r\n\t\t\t// we *must* prevent namespaces from having\r\n\t\t\t// underscores - else lookup of namespaces\r\n\t\t\t// via RegEx (e.g. in getNamespaces ) would\r\n\t\t\t// return wrong results.\r\n\t\t\t//\r\n\t\t\t// The only way around this would be to\r\n\t\t\t// disallow underscores in keys.\r\n\r\n\t\t\tif(keyName === null || keyName === undefined){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^[0-9A-Za-z-]*$/.test(keyName);\r\n\t\t},\r\n\r\n\t\tgetFullKey: function(key, namespace){\r\n\t\t\t// checks for valid namespace and\r\n\t\t\t// key are already performed.\r\n\t\t\treturn \"__\" + namespace + \"_\" + key;\r\n\t\t},\r\n\r\n\t\t_save: function(){\r\n\t\t\tdojo.cookie(this.cookieName,dojo.toJson(this.store),{expires: this.storageLife});\r\n\t\t},\r\n\r\n\t\t_beginsWith: function(/* string */ haystack, /* string */ needle) {\r\n\t\t\tif(needle.length > haystack.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn haystack.substring(0,needle.length) === needle;\r\n\t\t},\r\n\r\n\t\t_assertIsValidNamespace: function(/* string */ namespace){\r\n\t\t\tif(this.isValidNamespace(namespace) === false){\r\n\t\t\t\tthrow new Error(\"Invalid namespace given: \" + namespace);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_assertIsValidKey: function(/* string */ key){\r\n\t\t\tif(this.isValidKey(key) === false){\r\n\t\t\t\tthrow new Error(\"Invalid key given: \" + key);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n);\r\n\r\ndojox.storage.manager.register(\"dojox.storage.CookieStorageProvider\", new dojox.storage.CookieStorageProvider());\r\n"]}