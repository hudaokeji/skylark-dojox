{"version":3,"sources":["storage/Provider.js"],"names":["dojo","provide","declare","constructor","SUCCESS","FAILED","PENDING","SIZE_NOT_AVAILABLE","SIZE_NO_LIMIT","DEFAULT_NAMESPACE","onHideSettingsUI","initialize","console","warn","isAvailable","put","key","value","resultsHandler","namespace","get","hasKey","this","getKeys","clear","remove","getNamespaces","isPermanent","getMaximumSize","putMultiple","keys","values","i","length","dojox","storage","getMultiple","results","push","removeMultiple","isValidKeyArray","undefined","isArray","some","isValidKey","hasSettingsUI","showSettingsUI","hideSettingsUI","keyName","test","getResourceList"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,0BAEbD,KAAKE,QAAQ,yBAA0B,MAkBtCC,YAAa,aAMbC,QAAS,UAKTC,OAAQ,SAKRC,QAAS,UAKTC,mBAAoB,qBAKpBC,cAAe,gBAMfC,kBAAmB,UAOnBC,iBAAkB,KAElBC,WAAY,WAOXC,QAAQC,KAAK,6CAGdC,YAAa,WAIZF,QAAQC,KAAK,8CAGdE,IAAK,SAAqBC,EACXC,EACEC,EACDC,GAwCfP,QAAQC,KAAK,sCAGdO,IAAK,SAAoBJ,EAAiBG,GAWzCP,QAAQC,KAAK,sCAGdQ,OAAQ,SAAoBL,EAAiBG,GAG5C,QAASG,KAAKF,IAAIJ,EAAKG,IAGxBI,QAAS,SAAqBJ,GAK7BP,QAAQC,KAAK,0CAGdW,MAAO,SAAqBL,GAK3BP,QAAQC,KAAK,wCAGdY,OAAQ,SAAoBT,EAAiBG,GAG5CP,QAAQC,KAAK,yCAGda,cAAe,WACdd,QAAQC,KAAK,gDAGdc,YAAa,WAIZf,QAAQC,KAAK,8CAGde,eAAgB,WAkBfhB,QAAQC,KAAK,iDAGdgB,YAAa,SAAoBC,EACjBC,EACGb,EACDC,GA0CjB,IAAI,IAAIa,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BE,MAAMC,QAAQpB,IAAIe,EAAKE,GAAID,EAAOC,GAAId,EAAgBC,IAIxDiB,YAAa,SAAmBN,EAAkBX,GAcjD,IADA,IAAIkB,KACIL,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BK,EAAQC,KAAKJ,MAAMC,QAAQf,IAAIU,EAAKE,GAAIb,IAGzC,OAAOkB,GAGRE,eAAgB,SAAmBT,EAAkBX,GAIpD,IAAI,IAAIa,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BE,MAAMC,QAAQV,OAAOK,EAAKE,GAAIb,IAIhCqB,gBAAiB,SAAUV,GAC1B,QAAY,OAATA,QAA0BW,IAATX,IAAuB9B,KAAK0C,QAAQZ,MAMhD9B,KAAK2C,KAAKb,EAAM,SAASd,GAChC,OAAQM,KAAKsB,WAAW5B,IACtBM,OAGJuB,cAAe,WAGd,OAAO,GAGRC,eAAgB,WAIflC,QAAQC,KAAK,iDAGdkC,eAAgB,WAGfnC,QAAQC,KAAK,iDAGd+B,WAAY,SAAoBI,GAM/B,OAAe,OAAZA,QAAgCP,IAAZO,GAIhB,kBAAkBC,KAAKD,IAG/BE,gBAAiB,WAehB","file":"../../storage/Provider.js","sourcesContent":["dojo.provide(\"dojox.storage.Provider\");\r\n\r\ndojo.declare(\"dojox.storage.Provider\", null, {\r\n\t// summary:\r\n\t//\t\tA singleton for working with dojox.storage.\r\n\t// description:\r\n\t//\t\tdojox.storage exposes the current available storage provider on this\r\n\t//\t\tplatform. It gives you methods such as dojox.storage.put(),\r\n\t//\t\tdojox.storage.get(), etc.\r\n\t//\r\n\t//\t\tFor more details on dojox.storage, see the primary documentation\r\n\t//\t\tpage at http://manual.dojotoolkit.org/storage.html.\r\n\t//\r\n\t//\t\tNote for storage provider developers who are creating subclasses-\r\n\t//\t\tThis is the base class for all storage providers Specific kinds of\r\n\t//\t\tStorage Providers should subclass this and implement these methods.\r\n\t//\t\tYou should avoid initialization in storage provider subclass's\r\n\t//\t\tconstructor; instead, perform initialization in your initialize()\r\n\t//\t\tmethod.\r\n\r\n\tconstructor: function(){\r\n\t},\r\n\t\r\n\t// SUCCESS: String\r\n\t//\t\tFlag that indicates a put() call to a\r\n\t//\t\tstorage provider was successful.\r\n\tSUCCESS: \"success\",\r\n\t\r\n\t// FAILED: String\r\n\t//\t\tFlag that indicates a put() call to\r\n\t//\t\ta storage provider failed.\r\n\tFAILED: \"failed\",\r\n\t\r\n\t// PENDING: String\r\n\t//\t\tFlag that indicates a put() call to a\r\n\t//\t\tstorage provider is pending user approval.\r\n\tPENDING: \"pending\",\r\n\t\r\n\t// SIZE_NOT_AVAILABLE: String\r\n\t//\t\tReturned by getMaximumSize() if this storage provider can not determine\r\n\t//\t\tthe maximum amount of data it can support.\r\n\tSIZE_NOT_AVAILABLE: \"Size not available\",\r\n\t\r\n\t// SIZE_NO_LIMIT: String\r\n\t//\t\tReturned by getMaximumSize() if this storage provider has no theoretical\r\n\t//\t\tlimit on the amount of data it can store.\r\n\tSIZE_NO_LIMIT: \"No size limit\",\r\n\r\n\t// DEFAULT_NAMESPACE: String\r\n\t//\t\tThe namespace for all storage operations. This is useful if several\r\n\t//\t\tapplications want access to the storage system from the same domain but\r\n\t//\t\twant different storage silos.\r\n\tDEFAULT_NAMESPACE: \"default\",\r\n\t\r\n\t// onHideSettingsUI: Function\r\n\t//\t\tIf a function is assigned to this property, then when the settings\r\n\t//\t\tprovider's UI is closed this function is called. Useful, for example,\r\n\t//\t\tif the user has just cleared out all storage for this provider using\r\n\t//\t\tthe settings UI, and you want to update your UI.\r\n\tonHideSettingsUI: null,\r\n\r\n\tinitialize: function(){\r\n\t\t// summary:\r\n\t\t//\t\tAllows this storage provider to initialize itself. This is\r\n\t\t//\t\tcalled after the page has finished loading, so you can not do\r\n\t\t//\t\tdocument.writes(). Storage Provider subclasses should initialize\r\n\t\t//\t\tthemselves inside of here rather than in their function\r\n\t\t//\t\tconstructor.\r\n\t\tconsole.warn(\"dojox.storage.initialize not implemented\");\r\n\t},\r\n\t\r\n\tisAvailable: function(){ /*Boolean*/\r\n\t\t// summary:\r\n\t\t//\t\tReturns whether this storage provider is available on this\r\n\t\t//\t\tplatform.\r\n\t\tconsole.warn(\"dojox.storage.isAvailable not implemented\");\r\n\t},\r\n\r\n\tput: function(\t/*string*/ key,\r\n\t\t\t\t\t/*object*/ value,\r\n\t\t\t\t\t/*function*/ resultsHandler,\r\n\t\t\t\t\t/*string?*/ namespace){\r\n\t\t// summary:\r\n\t\t//\t\tPuts a key and value into this storage system.\r\n\t\t// example:\r\n\t\t// |\tvar resultsHandler = function(status, key, message, namespace){\r\n\t\t// |\t  alert(\"status=\"+status+\", key=\"+key+\", message=\"+message);\r\n\t\t// |\t};\r\n\t\t// |\tdojox.storage.put(\"test\", \"hello world\", resultsHandler);\r\n\t\t// description:\r\n\t\t//\t\tImportant note: if you are using Dojo Storage in conjunction with\r\n\t\t//\t\tDojo Offline, then you don't need to provide\r\n\t\t//\t\ta resultsHandler; this is because for Dojo Offline we\r\n\t\t//\t\tuse Google Gears to persist data, which has unlimited data\r\n\t\t//\t\tonce the user has given permission. If you are using Dojo\r\n\t\t//\t\tStorage apart from Dojo Offline, then under the covers hidden\r\n\t\t//\t\tFlash might be used, which is both asychronous and which might\r\n\t\t//\t\tget denied; in this case you must provide a resultsHandler.\r\n\t\t// key:\r\n\t\t//\t\tA string key to use when retrieving this value in the future.\r\n\t\t// value:\r\n\t\t//\t\tA value to store; this can be any JavaScript type.\r\n\t\t// resultsHandler:\r\n\t\t//\t\tA callback function that will receive three arguments. The\r\n\t\t//\t\tfirst argument is one of three values: dojox.storage.SUCCESS,\r\n\t\t//\t\tdojox.storage.FAILED, or dojox.storage.PENDING; these values\r\n\t\t//\t\tdetermine how the put request went. In some storage systems\r\n\t\t//\t\tusers can deny a storage request, resulting in a\r\n\t\t//\t\tdojox.storage.FAILED, while in other storage systems a storage\r\n\t\t//\t\trequest must wait for user approval, resulting in a\r\n\t\t//\t\tdojox.storage.PENDING status until the request is either\r\n\t\t//\t\tapproved or denied, resulting in another call back with\r\n\t\t//\t\tdojox.storage.SUCCESS.\r\n\t\t//\t\tThe second argument in the call back is the key name that was being stored.\r\n\t\t//\t\tThe third argument in the call back is an optional message that\r\n\t\t//\t\tdetails possible error messages that might have occurred during\r\n\t\t//\t\tthe storage process.\r\n\t\t// namespace:\r\n\t\t//\t\tOptional string namespace that this value will be placed into;\r\n\t\t//\t\tif left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE\r\n\t\t\r\n\t\tconsole.warn(\"dojox.storage.put not implemented\");\r\n\t},\r\n\r\n\tget: function(/*string*/ key, /*string?*/ namespace){ /*Object*/\r\n\t\t// summary:\r\n\t\t//\t\tGets the value with the given key. Returns null if this key is\r\n\t\t//\t\tnot in the storage system.\r\n\t\t// key:\r\n\t\t//\t\tA string key to get the value of.\r\n\t\t// namespace:\r\n\t\t//\t\tOptional string namespace that this value will be retrieved from;\r\n\t\t//\t\tif left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE\r\n\t\t// returns:\r\n\t\t//\t\tAny JavaScript object type; null if the key is not present\r\n\t\tconsole.warn(\"dojox.storage.get not implemented\");\r\n\t},\r\n\r\n\thasKey: function(/*string*/ key, /*string?*/ namespace){\r\n\t\t// summary:\r\n\t\t//\t\tDetermines whether the storage has the given key.\r\n\t\treturn !!this.get(key, namespace); // Boolean\r\n\t},\r\n\r\n\tgetKeys: function(/*string?*/ namespace){ /*Array*/\r\n\t\t// summary:\r\n\t\t//\t\tEnumerates all of the available keys in this storage system.\r\n\t\t// returns:\r\n\t\t//\t\tArray of available keys\r\n\t\tconsole.warn(\"dojox.storage.getKeys not implemented\");\r\n\t},\r\n\t\r\n\tclear: function(/*string?*/ namespace){\r\n\t\t// summary:\r\n\t\t//\t\tCompletely clears this storage system of all of it's values and\r\n\t\t//\t\tkeys. If 'namespace' is provided just clears the keys in that\r\n\t\t//\t\tnamespace.\r\n\t\tconsole.warn(\"dojox.storage.clear not implemented\");\r\n\t},\r\n  \r\n\tremove: function(/*string*/ key, /*string?*/ namespace){\r\n\t\t// summary:\r\n\t\t//\t\tRemoves the given key from this storage system.\r\n\t\tconsole.warn(\"dojox.storage.remove not implemented\");\r\n\t},\r\n\t\r\n\tgetNamespaces: function(){ /*string[]*/\r\n\t\tconsole.warn(\"dojox.storage.getNamespaces not implemented\");\r\n\t},\r\n\r\n\tisPermanent: function(){ /*Boolean*/\r\n\t\t// summary:\r\n\t\t//\t\tReturns whether this storage provider's values are persisted\r\n\t\t//\t\twhen this platform is shutdown.\r\n\t\tconsole.warn(\"dojox.storage.isPermanent not implemented\");\r\n\t},\r\n\r\n\tgetMaximumSize: function(){ /* mixed */\r\n\t\t// summary:\r\n\t\t//\t\tThe maximum storage allowed by this provider\r\n\t\t// returns:\r\n\t\t//\t\tReturns the maximum storage size\r\n\t\t//\t\tsupported by this provider, in\r\n\t\t//\t\tthousands of bytes (i.e., if it\r\n\t\t//\t\treturns 60 then this means that 60K\r\n\t\t//\t\tof storage is supported).\r\n\t\t//\r\n\t\t//\t\tIf this provider can not determine\r\n\t\t//\t\tit's maximum size, then\r\n\t\t//\t\tdojox.storage.SIZE_NOT_AVAILABLE is\r\n\t\t//\t\treturned; if there is no theoretical\r\n\t\t//\t\tlimit on the amount of storage\r\n\t\t//\t\tthis provider can return, then\r\n\t\t//\t\tdojox.storage.SIZE_NO_LIMIT is\r\n\t\t//\t\treturned\r\n\t\tconsole.warn(\"dojox.storage.getMaximumSize not implemented\");\r\n\t},\r\n\t\t\r\n\tputMultiple: function(\t/*array*/ keys,\r\n\t\t\t\t\t\t\t/*array*/ values,\r\n\t\t\t\t\t\t\t/*function*/ resultsHandler,\r\n\t\t\t\t\t\t\t/*string?*/ namespace){\r\n\t\t// summary:\r\n\t\t//\t\tPuts multiple keys and values into this storage system.\r\n\t\t// example:\r\n\t\t// |\tvar resultsHandler = function(status, key, message){\r\n\t\t// |\t  alert(\"status=\"+status+\", key=\"+key+\", message=\"+message);\r\n\t\t// |\t};\r\n\t\t// |\tdojox.storage.put([\"test\"], [\"hello world\"], resultsHandler);\r\n\t\t// description:\r\n\t\t//\t\tImportant note: if you are using Dojo Storage in conjunction with\r\n\t\t//\t\tDojo Offline, then you don't need to provide\r\n\t\t//\t\ta resultsHandler; this is because for Dojo Offline we\r\n\t\t//\t\tuse Google Gears to persist data, which has unlimited data\r\n\t\t//\t\tonce the user has given permission. If you are using Dojo\r\n\t\t//\t\tStorage apart from Dojo Offline, then under the covers hidden\r\n\t\t//\t\tFlash might be used, which is both asychronous and which might\r\n\t\t//\t\tget denied; in this case you must provide a resultsHandler.\r\n\t\t// keys:\r\n\t\t//\t\tAn array of string keys to use when retrieving this value in the future,\r\n\t\t//\t\tone per value to be stored\r\n\t\t// values:\r\n\t\t//\t\tAn array of values to store; this can be any JavaScript type, though the\r\n\t\t//\t\tperformance of plain strings is considerably better\r\n\t\t// resultsHandler:\r\n\t\t//\t\tA callback function that will receive three arguments. The\r\n\t\t//\t\tfirst argument is one of three values: dojox.storage.SUCCESS,\r\n\t\t//\t\tdojox.storage.FAILED, or dojox.storage.PENDING; these values\r\n\t\t//\t\tdetermine how the put request went. In some storage systems\r\n\t\t//\t\tusers can deny a storage request, resulting in a\r\n\t\t//\t\tdojox.storage.FAILED, while in other storage systems a storage\r\n\t\t//\t\trequest must wait for user approval, resulting in a\r\n\t\t//\t\tdojox.storage.PENDING status until the request is either\r\n\t\t//\t\tapproved or denied, resulting in another call back with\r\n\t\t//\t\tdojox.storage.SUCCESS.\r\n\t\t//\t\tThe second argument in the call back is the key name that was being stored.\r\n\t\t//\t\tThe third argument in the call back is an optional message that\r\n\t\t//\t\tdetails possible error messages that might have occurred during\r\n\t\t//\t\tthe storage process.\r\n\t\t// namespace:\r\n\t\t//\t\tOptional string namespace that this value will be placed into;\r\n\t\t//\t\tif left off, the value will be placed into dojox.storage.DEFAULT_NAMESPACE\r\n\t\t\r\n\t\tfor(var i = 0; i < keys.length; i++){\r\n\t\t\tdojox.storage.put(keys[i], values[i], resultsHandler, namespace);\r\n\t\t}\r\n\t},\r\n\r\n\tgetMultiple: function(/*array*/ keys, /*string?*/ namespace){ /*Object*/\r\n\t\t// summary:\r\n\t\t//\t\tGets the values corresponding to each of the given keys.\r\n\t\t//\t\tReturns a null array element for each given key that is\r\n\t\t//\t\tnot in the storage system.\r\n\t\t// keys:\r\n\t\t//\t\tAn array of string keys to get the value of.\r\n\t\t// namespace:\r\n\t\t//\t\tOptional string namespace that this value will be retrieved from;\r\n\t\t//\t\tif left off, the value will be retrieved from dojox.storage.DEFAULT_NAMESPACE\r\n\t\t// returns:\r\n\t\t//\t\tAny JavaScript object type; null if the key is not present\r\n\t\t\r\n\t\tvar results = [];\r\n\t\tfor(var i = 0; i < keys.length; i++){\r\n\t\t\tresults.push(dojox.storage.get(keys[i], namespace));\r\n\t\t}\r\n\t\t\r\n\t\treturn results;\r\n\t},\r\n\r\n\tremoveMultiple: function(/*array*/ keys, /*string?*/ namespace) {\r\n\t\t// summary:\r\n\t\t//\t\tRemoves the given keys from this storage system.\r\n\t\t\r\n\t\tfor(var i = 0; i < keys.length; i++){\r\n\t\t\tdojox.storage.remove(keys[i], namespace);\r\n\t\t}\r\n\t},\r\n\t\r\n\tisValidKeyArray: function( keys) {\r\n\t\tif(keys === null || keys === undefined || !dojo.isArray(keys)){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//\tJAC: This could be optimized by running the key validity test\r\n\t\t//\tdirectly over a joined string\r\n\t\treturn !dojo.some(keys, function(key){\r\n\t\t\treturn !this.isValidKey(key);\r\n\t\t}, this); // Boolean\r\n\t},\r\n\r\n\thasSettingsUI: function(){ /*Boolean*/\r\n\t\t// summary:\r\n\t\t//\t\tDetermines whether this provider has a settings UI.\r\n\t\treturn false;\r\n\t},\r\n\r\n\tshowSettingsUI: function(){\r\n\t\t// summary:\r\n\t\t//\t\tIf this provider has a settings UI, determined\r\n\t\t//\t\tby calling hasSettingsUI(), it is shown.\r\n\t\tconsole.warn(\"dojox.storage.showSettingsUI not implemented\");\r\n\t},\r\n\r\n\thideSettingsUI: function(){\r\n\t\t// summary:\r\n\t\t//\t\tIf this provider has a settings UI, hides it.\r\n\t\tconsole.warn(\"dojox.storage.hideSettingsUI not implemented\");\r\n\t},\r\n\t\r\n\tisValidKey: function(/*string*/ keyName){ /*Boolean*/\r\n\t\t// summary:\r\n\t\t//\t\tSubclasses can call this to ensure that the key given is valid\r\n\t\t//\t\tin a consistent way across different storage providers. We use\r\n\t\t//\t\tthe lowest common denominator for key values allowed: only\r\n\t\t//\t\tletters, numbers, and underscores are allowed. No spaces.\r\n\t\tif(keyName === null || keyName === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\t\r\n\t\treturn /^[0-9A-Za-z_]*$/.test(keyName);\r\n\t},\r\n\t\r\n\tgetResourceList: function(){ /* Array[] */\r\n\t\t// summary:\r\n\t\t//\t\tReturns a list of URLs that this\r\n\t\t//\t\tstorage provider might depend on.\r\n\t\t// description:\r\n\t\t//\t\tThis method returns a list of URLs that this\r\n\t\t//\t\tstorage provider depends on to do its work.\r\n\t\t//\t\tThis list is used by the Dojo Offline Toolkit\r\n\t\t//\t\tto cache these resources to ensure the machinery\r\n\t\t//\t\tused by this storage provider is available offline.\r\n\t\t//\t\tWhat is returned is an array of URLs.\r\n\t\t//\t\tNote that Dojo Offline uses Gears as its native\r\n\t\t//\t\tstorage provider, and does not support using other\r\n\t\t//\t\tkinds of storage providers while offline anymore.\r\n\t\t\r\n\t\treturn [];\r\n\t}\r\n});\r\n"]}