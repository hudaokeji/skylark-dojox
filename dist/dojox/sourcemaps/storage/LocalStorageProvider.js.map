{"version":3,"sources":["storage/LocalStorageProvider.js"],"names":["dojo","provide","require","declare","dojox","storage","Provider","store","initialize","this","localStorage","initialized","manager","loaded","isAvailable","put","key","value","resultsHandler","namespace","_assertIsValidKey","DEFAULT_NAMESPACE","_assertIsValidNamespace","fullKey","getFullKey","toJson","setItem","SUCCESS","e","FAILED","toString","get","fromJson","getItem","getKeys","keys","i","length","currentKey","_beginsWith","substring","push","clear","forEach","hitch","remove","removeItem","getNamespaces","results","found","tester","test","currentNS","match","isPermanent","getMaximumSize","SIZE_NO_LIMIT","hasSettingsUI","isValidKey","keyName","undefined","isValidNamespace","haystack","needle","Error","register","LocalStorageProvider"],"mappings":"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","file":"../../storage/LocalStorageProvider.js","sourcesContent":["dojo.provide(\"dojox.storage.LocalStorageProvider\");\r\n\r\ndojo.require(\"dojox.storage.Provider\");\r\ndojo.require(\"dojox.storage.manager\");\r\n\r\ndojo.declare(\r\n\t\"dojox.storage.LocalStorageProvider\",\r\n\t[dojox.storage.Provider],\r\n\t{\r\n\t\tstore: null,\r\n\r\n\t\tinitialize: function(){\r\n\r\n\t\t\tthis.store = localStorage;\r\n\r\n\t\t\tthis.initialized = true;\r\n\t\t\tdojox.storage.manager.loaded();\r\n\t\t},\r\n\r\n\t\tisAvailable: function(){ /*Boolean*/\r\n\t\t\treturn typeof localStorage != 'undefined';\r\n\t\t},\r\n\r\n\t\tput: function(\t/*string*/ key,\r\n\t\t\t\t\t\t/*object*/ value,\r\n\t\t\t\t\t\t/*function*/ resultsHandler,\r\n\t\t\t\t\t\t/*string?*/ namespace){\r\n\r\n\t\t\t// TODO: Use the events as specified in http://dev.w3.org/html5/webstorage/#the-storage-event ?\r\n\t\t\t//\tCurrently, the storage event is not reliable around browsers.\r\n\r\n\t\t\tthis._assertIsValidKey(key);\r\n\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tvar fullKey = this.getFullKey(key,namespace);\r\n\r\n\t\t\t// prepending a prefix to a string value\r\n\t\t\t// will result in that prefix not being\r\n\t\t\t// usable as a value, so we better use\r\n\t\t\t// toJson() always.\r\n\t\t\tvalue = dojo.toJson(value);\r\n\r\n\t\t\ttry { // ua may raise an QUOTA_EXCEEDED_ERR exception\r\n\t\t\t\tthis.store.setItem(fullKey,value);\r\n\r\n\t\t\t\tif(resultsHandler){\r\n\t\t\t\t\tresultsHandler(this.SUCCESS, key, null, namespace);\r\n\t\t\t\t}\r\n\t\t\t} catch(e) {\r\n\t\t\t\tif(resultsHandler){\r\n\t\t\t\t\tresultsHandler(this.FAILED, key, e.toString(), namespace);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tget: function(/*string*/ key, /*string?*/ namespace){ /*Object*/\r\n\t\t\tthis._assertIsValidKey(key);\r\n\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\t// get our full key name, which is namespace + key\r\n\t\t\tkey = this.getFullKey(key, namespace);\r\n\r\n\t\t\treturn dojo.fromJson(this.store.getItem(key));\r\n\t\t},\r\n\r\n\t\tgetKeys: function(/*string?*/ namespace){ /*Array*/\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tnamespace = '__'+namespace+'_'\r\n\r\n\t\t\tvar keys = [];\r\n\t\t\tfor(var i = 0; i < this.store.length; i++){\r\n\t\t\t\tvar currentKey = this.store.key(i);\r\n\t\t\t\tif(this._beginsWith(currentKey,namespace)){\r\n\t\t\t\t\tcurrentKey = currentKey.substring(namespace.length);\r\n\t\t\t\t\tkeys.push(currentKey);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn keys;\r\n\t\t},\r\n\r\n\t\tclear: function(/*string?*/ namespace){\r\n\t\t\t// Um, well, the 'specs' in Provider.js say that if\r\n\t\t\t// no namespace is given, this method should nuke\r\n\t\t\t// the *complete* storage. As other components might\r\n\t\t\t// be using localStorage too, this might not be a\r\n\t\t\t// good idea, so this method won't do it.\r\n\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tnamespace = '__'+namespace+'_';\r\n\r\n\t\t\tvar keys = [];\r\n\t\t\tfor(var i = 0; i < this.store.length; i++){\r\n\t\t\t\tif(this._beginsWith(this.store.key(i),namespace)){\r\n\t\t\t\t\tkeys.push(this.store.key(i));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdojo.forEach(keys, dojo.hitch(this.store, \"removeItem\"));\r\n\t\t},\r\n\r\n\t\tremove: function(/*string*/ key, /*string?*/ namespace){\r\n\t\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\tthis._assertIsValidNamespace(namespace);\r\n\r\n\t\t\tthis.store.removeItem(this.getFullKey(key, namespace));\r\n\t\t},\r\n\r\n\t\tgetNamespaces: function(){ /*string[]*/\r\n\t\t\t// There must be a better way than\r\n\t\t\t// to execute a regex on *every*\r\n\t\t\t// item in the store.\r\n\r\n\t\t\tvar results = [ this.DEFAULT_NAMESPACE];\r\n\r\n\t\t\tvar found = {};\r\n\t\t\tfound[this.DEFAULT_NAMESPACE] = true;\r\n\t\t\tvar tester = /^__([^_]*)_/;\r\n\r\n\t\t\tfor(var i = 0; i < this.store.length; i++){\r\n\t\t\t\tvar currentKey = this.store.key(i);\r\n\t\t\t\tif(tester.test(currentKey) == true){\r\n\t\t\t\t\tvar currentNS = currentKey.match(tester)[1];\r\n\t\t\t\t\tif(typeof found[currentNS] == \"undefined\"){\r\n\t\t\t\t\t\tfound[currentNS] = true;\r\n\t\t\t\t\t\tresults.push(currentNS);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\t\t},\r\n\r\n\t\tisPermanent: function(){ /*Boolean*/\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetMaximumSize: function(){ /* mixed */\r\n\t\t\treturn dojox.storage.SIZE_NO_LIMIT;\r\n\t\t},\r\n\r\n\t\thasSettingsUI: function(){ /*Boolean*/\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tisValidKey: function(/*string*/ keyName){ /*Boolean*/\r\n\t\t\tif(keyName === null || keyName === undefined){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^[0-9A-Za-z_-]*$/.test(keyName);\r\n\t\t},\r\n\r\n\t\tisValidNamespace: function(/*string*/ keyName){ /*Boolean*/\r\n\t\t\t// we *must* prevent namespaces from having\r\n\t\t\t// underscores - else lookup of namespaces\r\n\t\t\t// via RegEx (e.g. in getNamespaces ) would\r\n\t\t\t// return wrong results.\r\n\t\t\t//\r\n\t\t\t// The only way around this would be to\r\n\t\t\t// disallow underscores in keys.\r\n\r\n\t\t\tif(keyName === null || keyName === undefined){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn /^[0-9A-Za-z-]*$/.test(keyName);\r\n\t\t},\r\n\r\n\t\tgetFullKey: function(key, namespace){\r\n\t\t\t// checks for valid namespace and\r\n\t\t\t// key are already performed.\r\n\t\t\treturn \"__\" + namespace + \"_\" + key;\r\n\t\t},\r\n\r\n\t\t_beginsWith: function(/* string */ haystack, /* string */ needle) {\r\n\t\t\tif(needle.length > haystack.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn haystack.substring(0,needle.length) === needle;\r\n\t\t},\r\n\r\n\t\t_assertIsValidNamespace: function(/* string */ namespace){\r\n\t\t\tif(this.isValidNamespace(namespace) === false){\r\n\t\t\t\tthrow new Error(\"Invalid namespace given: \" + namespace);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_assertIsValidKey: function(/* string */ key){\r\n\t\t\tif(this.isValidKey(key) === false){\r\n\t\t\t\tthrow new Error(\"Invalid key given: \" + key);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n);\r\n\r\ndojox.storage.manager.register(\"dojox.storage.LocalStorageProvider\", new dojox.storage.LocalStorageProvider());"]}