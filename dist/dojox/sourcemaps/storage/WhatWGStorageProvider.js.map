{"version":3,"sources":["storage/WhatWGStorageProvider.js"],"names":["dojo","provide","require","declare","dojox","storage","Provider","initialized","_domain","_available","_statusHandler","_allNamespaces","_storageEventListener","initialize","config","this","location","hostname","manager","loaded","isAvailable","globalStorage","e","put","key","value","resultsHandler","namespace","isValidKey","Error","DEFAULT_NAMESPACE","getFullKey","isString","toJson","storageListener","hitch","evt","window","removeEventListener","call","SUCCESS","addEventListener","setItem","FAILED","toString","get","results","getItem","test","substring","length","fromJson","getNamespaces","found","myStorage","tester","i","currentKey","currentNS","match","push","getKeys","namespaceTester","RegExp","keysArray","clear","keys","forEach","remove","removeItem","isPermanent","getMaximumSize","SIZE_NO_LIMIT","hasSettingsUI","showSettingsUI","declaredClass","hideSettingsUI","register","WhatWGStorageProvider"],"mappings":"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","file":"../../storage/WhatWGStorageProvider.js","sourcesContent":["dojo.provide(\"dojox.storage.WhatWGStorageProvider\");\r\ndojo.require(\"dojox.storage.Provider\");\r\ndojo.require(\"dojox.storage.manager\");\r\n\r\ndojo.declare(\"dojox.storage.WhatWGStorageProvider\", [ dojox.storage.Provider ], {\r\n\t// summary:\r\n\t//\t\tStorage provider that uses WHAT Working Group features in Firefox 2\r\n\t//\t\tto achieve permanent storage.\r\n\t// description:\r\n\t//\t\tThe WHAT WG storage API is documented at\r\n\t//\t\thttp://www.whatwg.org/specs/web-apps/current-work/#scs-client-side\r\n\t//\r\n\t//\t\tYou can disable this storage provider with the following djConfig variable:\r\n\t// |\tvar djConfig = { disableWhatWGStorage: true };\r\n\t//\r\n\t//\t\tAuthors of this storage provider:\r\n\t//\r\n\t//\t\t- JB Boisseau, jb.boisseau@eutech-ssii.com\r\n\t//\t\t- Brad Neuberg, bkn3@columbia.edu\r\n\r\n\tinitialized: false,\r\n\t\r\n\t_domain: null,\r\n\t_available: null,\r\n\t_statusHandler: null,\r\n\t_allNamespaces: null,\r\n\t_storageEventListener: null,\r\n\t\r\n\tinitialize: function(){\r\n\t\tif(dojo.config[\"disableWhatWGStorage\"] == true){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t// get current domain\r\n\t\tthis._domain = location.hostname;\r\n\t\t// console.debug(this._domain);\r\n\t\t\r\n\t\t// indicate that this storage provider is now loaded\r\n\t\tthis.initialized = true;\r\n\t\tdojox.storage.manager.loaded();\r\n\t},\r\n\t\r\n\tisAvailable: function(){\r\n\t\ttry{\r\n\t\t\tvar myStorage = globalStorage[location.hostname];\r\n\t\t}catch(e){\r\n\t\t\tthis._available = false;\r\n\t\t\treturn this._available;\r\n\t\t}\r\n\t\t\r\n\t\tthis._available = true;\r\n\t\treturn this._available;\r\n\t},\r\n\r\n\tput: function(key, value, resultsHandler, namespace){\r\n\t\tif(this.isValidKey(key) == false){\r\n\t\t\tthrow new Error(\"Invalid key given: \" + key);\r\n\t\t}\r\n\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\r\n\t\t// get our full key name, which is namespace + key\r\n\t\tkey = this.getFullKey(key, namespace);\r\n\t\t\r\n\t\tthis._statusHandler = resultsHandler;\r\n\t\t\r\n\t\t// serialize the value;\r\n\t\t// handle strings differently so they have better performance\r\n\t\tif(dojo.isString(value)){\r\n\t\t\tvalue = \"string:\" + value;\r\n\t\t}else{\r\n\t\t\tvalue = dojo.toJson(value);\r\n\t\t}\r\n\t\t\r\n\t\t// register for successful storage events.\r\n\t\tvar storageListener = dojo.hitch(this, function(evt){\r\n\t\t\t// remove any old storage event listener we might have added\r\n\t\t\t// to the window on old put() requests; Firefox has a bug\r\n\t\t\t// where it can occassionaly go into infinite loops calling\r\n\t\t\t// our storage event listener over and over -- this is a\r\n\t\t\t// workaround\r\n\t\t\t// FIXME: Simplify this into a test case and submit it\r\n\t\t\t// to Firefox\r\n\t\t\twindow.removeEventListener(\"storage\", storageListener, false);\r\n\t\t\t\r\n\t\t\t// indicate we succeeded\r\n\t\t\tif(resultsHandler){\r\n\t\t\t\tresultsHandler.call(null, this.SUCCESS, key, null, namespace);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\twindow.addEventListener(\"storage\", storageListener, false);\r\n\t\t\r\n\t\t// try to store the value\r\n\t\ttry{\r\n\t\t\tvar myStorage = globalStorage[this._domain];\r\n\t\t\tmyStorage.setItem(key, value);\r\n\t\t}catch(e){\r\n\t\t\t// indicate we failed\r\n\t\t\tthis._statusHandler.call(null, this.FAILED, key, e.toString(), namespace);\r\n\t\t}\r\n\t},\r\n\r\n\tget: function(key, namespace){\r\n\t\tif(this.isValidKey(key) == false){\r\n\t\t\tthrow new Error(\"Invalid key given: \" + key);\r\n\t\t}\r\n\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\r\n\t\t// get our full key name, which is namespace + key\r\n\t\tkey = this.getFullKey(key, namespace);\r\n\t\t\r\n\t\t// sometimes, even if a key doesn't exist, Firefox\r\n\t\t// will return a blank string instead of a null --\r\n\t\t// this _might_ be due to having underscores in the\r\n\t\t// keyname, but I am not sure.\r\n\t\t\r\n\t\t// FIXME: Simplify this bug into a testcase and\r\n\t\t// submit it to Firefox\r\n\t\tvar myStorage = globalStorage[this._domain];\r\n\t\tvar results = myStorage.getItem(key);\r\n\t\t\r\n\t\tif(results == null || results == \"\"){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tresults = results.value;\r\n\t\t\r\n\t\t// destringify the content back into a\r\n\t\t// real JavaScript object;\r\n\t\t// handle strings differently so they have better performance\r\n\t\tif(dojo.isString(results) && (/^string:/.test(results))){\r\n\t\t\tresults = results.substring(\"string:\".length);\r\n\t\t}else{\r\n\t\t\tresults = dojo.fromJson(results);\r\n\t\t}\r\n\t\t\r\n\t\treturn results;\r\n\t},\r\n\t\r\n\tgetNamespaces: function(){\r\n\t\tvar results = [ this.DEFAULT_NAMESPACE ];\r\n\t\t\r\n\t\t// simply enumerate through our array and save any string\r\n\t\t// that starts with __\r\n\t\tvar found = {};\r\n\t\tvar myStorage = globalStorage[this._domain];\r\n\t\tvar tester = /^__([^_]*)_/;\r\n\t\tfor(var i = 0; i < myStorage.length; i++){\r\n\t\t\tvar currentKey = myStorage.key(i);\r\n\t\t\tif(tester.test(currentKey) == true){\r\n\t\t\t\tvar currentNS = currentKey.match(tester)[1];\r\n\t\t\t\t// have we seen this namespace before?\r\n\t\t\t\tif(typeof found[currentNS] == \"undefined\"){\r\n\t\t\t\t\tfound[currentNS] = true;\r\n\t\t\t\t\tresults.push(currentNS);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn results;\r\n\t},\r\n\r\n\tgetKeys: function(namespace){\r\n\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\r\n\t\tif(this.isValidKey(namespace) == false){\r\n\t\t\tthrow new Error(\"Invalid namespace given: \" + namespace);\r\n\t\t}\r\n\t\t\r\n\t\t// create a regular expression to test the beginning\r\n\t\t// of our key names to see if they match our namespace;\r\n\t\t// if it is the default namespace then test for the presence\r\n\t\t// of no namespace for compatibility with older versions\r\n\t\t// of dojox.storage\r\n\t\tvar namespaceTester;\r\n\t\tif(namespace == this.DEFAULT_NAMESPACE){\r\n\t\t\tnamespaceTester = new RegExp(\"^([^_]{2}.*)$\");\r\n\t\t}else{\r\n\t\t\tnamespaceTester = new RegExp(\"^__\" + namespace + \"_(.*)$\");\r\n\t\t}\r\n\t\t\r\n\t\tvar myStorage = globalStorage[this._domain];\r\n\t\tvar keysArray = [];\r\n\t\tfor(var i = 0; i < myStorage.length; i++){\r\n\t\t\tvar currentKey = myStorage.key(i);\r\n\t\t\tif(namespaceTester.test(currentKey) == true){\r\n\t\t\t\t// strip off the namespace portion\r\n\t\t\t\tcurrentKey = currentKey.match(namespaceTester)[1];\r\n\t\t\t\tkeysArray.push(currentKey);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn keysArray;\r\n\t},\r\n\r\n\tclear: function(namespace){\r\n\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\r\n\t\tif(this.isValidKey(namespace) == false){\r\n\t\t\tthrow new Error(\"Invalid namespace given: \" + namespace);\r\n\t\t}\r\n\t\t\r\n\t\t// create a regular expression to test the beginning\r\n\t\t// of our key names to see if they match our namespace;\r\n\t\t// if it is the default namespace then test for the presence\r\n\t\t// of no namespace for compatibility with older versions\r\n\t\t// of dojox.storage\r\n\t\tvar namespaceTester;\r\n\t\tif(namespace == this.DEFAULT_NAMESPACE){\r\n\t\t\tnamespaceTester = new RegExp(\"^[^_]{2}\");\r\n\t\t}else{\r\n\t\t\tnamespaceTester = new RegExp(\"^__\" + namespace + \"_\");\r\n\t\t}\r\n\t\t\r\n\t\tvar myStorage = globalStorage[this._domain];\r\n\t\tvar keys = [];\r\n\t\tfor(var i = 0; i < myStorage.length; i++){\r\n\t\t\tif(namespaceTester.test(myStorage.key(i)) == true){\r\n\t\t\t\tkeys[keys.length] = myStorage.key(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tdojo.forEach(keys, dojo.hitch(myStorage, \"removeItem\"));\r\n\t},\r\n\t\r\n\tremove: function(key, namespace){\r\n\t\t// get our full key name, which is namespace + key\r\n\t\tkey = this.getFullKey(key, namespace);\r\n\t\t\r\n\t\tvar myStorage = globalStorage[this._domain];\r\n\t\tmyStorage.removeItem(key);\r\n\t},\r\n\t\r\n\tisPermanent: function(){\r\n\t\treturn true;\r\n\t},\r\n\r\n\tgetMaximumSize: function(){\r\n\t\treturn this.SIZE_NO_LIMIT;\r\n\t},\r\n\r\n\thasSettingsUI: function(){\r\n\t\treturn false;\r\n\t},\r\n\t\r\n\tshowSettingsUI: function(){\r\n\t\tthrow new Error(this.declaredClass + \" does not support a storage settings user-interface\");\r\n\t},\r\n\t\r\n\thideSettingsUI: function(){\r\n\t\tthrow new Error(this.declaredClass + \" does not support a storage settings user-interface\");\r\n\t},\r\n\t\r\n\tgetFullKey: function(key, namespace){\r\n\t\tnamespace = namespace||this.DEFAULT_NAMESPACE;\r\n\t\t\r\n\t\tif(this.isValidKey(namespace) == false){\r\n\t\t\tthrow new Error(\"Invalid namespace given: \" + namespace);\r\n\t\t}\r\n\t\t\r\n\t\t// don't append a namespace string for the default namespace,\r\n\t\t// for compatibility with older versions of dojox.storage\r\n\t\tif(namespace == this.DEFAULT_NAMESPACE){\r\n\t\t\treturn key;\r\n\t\t}else{\r\n\t\t\treturn \"__\" + namespace + \"_\" + key;\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndojox.storage.manager.register(\"dojox.storage.WhatWGStorageProvider\",\r\n\t\t\t\t\t\t\t\tnew dojox.storage.WhatWGStorageProvider());\r\n"]}