{"version":3,"sources":["dgauges/RectangularSegmentedRangeIndicator.js"],"names":["define","declare","on","gfx","IndicatorBase","start","startThickness","endThickness","fill","stroke","paddingLeft","paddingTop","paddingRight","paddingBottom","segments","segmentSpacing","rounded","ranges","constructor","this","color","width","addInvalidatingProperties","_defaultHorizontalShapeFunc","indicator","group","scale","startX","startY","endPosition","shape","i","gp","radius","length","_contentBox","w","type","colors","x1","y1","x2","y2","rangeStart","entry1","offset","scaler","positionForValue","entry2","size","push","x","y","chicklet","visibleSegments","Math","abs","sw","inc","ew","remain","floor","path","createPath","moveTo","lineTo","arcTo","setFill","setStroke","createPolyline","_defaultVerticalShapeFunc","h","indicatorShapeFunc","_gauge","orientation","refreshRendering","_gfxGroup","spos","pos","value","clear"],"mappings":"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","file":"../../dgauges/RectangularSegmentedRangeIndicator.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/on\", \"dojox/gfx\", \"./IndicatorBase\"], function(declare, on, gfx, IndicatorBase){\r\n\treturn declare(\"dojox.dgauges.RectangularSegmentedRangeIndicator\", IndicatorBase, {\r\n\t\t// summary:\r\n\t\t//\t\tA segmented-style range indicator for rectangular gauges.\r\n\t\t//\t\tThis class will be replaced by a cleaner implementation in a future version.\r\n\t\t\r\n\t\tstart: 0,\r\n\t\tstartThickness: 10,\r\n\t\tendThickness: 10,\r\n\t\tfill: null,\r\n\t\tstroke: null,\r\n\t\tpaddingLeft: 0,\r\n\t\tpaddingTop: 0,\r\n\t\tpaddingRight: 0,\r\n\t\tpaddingBottom: 0,\r\n\t\t\r\n\t\t// segments: Number\r\n\t\t//\t\tThe number of segments making the indicator.\r\n\t\t//\t\tBy default it is 10.\r\n\t\tsegments: 10,\r\n\r\n\t\t// segmentSpacing: Number\r\n\t\t//\t\tThe blank space between two segments. The default value is 2\r\n\t\tsegmentSpacing: 2,\r\n\t\t\r\n\t\t// rounded: Boolean\r\n\t\t//\t\tIndicates if the extremity segments are rounded.\r\n\t\t//\t\tDefault is true.\t\t\r\n\t\trounded: true,\r\n\t\t\r\n\t\t// ranges: Array\r\n\t\t//\t\tAn array containing objects to define color ranges. Example [{color:\"#FF0000\", size:20}, {color:\"#FF8800\", size:50}].\r\n\t\tranges: null,\r\n\t\t\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstructor.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCreates a segmented range indicator.\r\n\t\t\tthis.fill = [255, 120, 0];\r\n\t\t\tthis.stroke = {\r\n\t\t\t\tcolor: \"black\",\r\n\t\t\t\twidth: .2\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tthis.addInvalidatingProperties([\"start\", \"startThickness\", \"endThickness\", \"fill\", \"stroke\",\"segments\",\"segmentSpacing\",\"ranges\"]);\r\n\t\t},\r\n\r\n\t\t_defaultHorizontalShapeFunc: function(indicator, group, scale, startX, startY, endPosition, startThickness, endThickness, fill, stroke){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar length = scale._contentBox.w ;\r\n\t\t\tvar shape, i, gp, radius;\r\n\t\t\t\r\n\t\t\tif(this.ranges){\r\n\t\t\t\t// Configure gradient to represent the ranges\r\n\t\t\t\tfill = {type:\"linear\", colors:[]};\r\n\t\t\t\tfill.x1 = startX;\r\n\t\t\t\tfill.y1 = startY;\r\n\t\t\t\tfill.x2 = startX + length;\r\n\t\t\t\tfill.y2 = startY;\r\n\t\t\t\t\r\n\t\t\t\tvar rangeStart = this.start;\r\n\t\t\t\t\r\n\t\t\t\tfor(i = 0; i < this.ranges.length; i++){\r\n\t\t\t\t\tvar entry1 = {\r\n\t\t\t\t\t\tcolor:this.ranges[i].color,\r\n\t\t\t\t\t\toffset: scale.scaler.positionForValue(rangeStart)\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar entry2 = {\r\n\t\t\t\t\t\tcolor:this.ranges[i].color,\r\n\t\t\t\t\t\toffset: scale.scaler.positionForValue(rangeStart+this.ranges[i].size)\r\n\t\t\t\t\t};\r\n\t\t\t\t\tfill.colors.push(entry1);\r\n\t\t\t\t\tfill.colors.push(entry2);\r\n\t\t\t\t\trangeStart += this.ranges[i].size;\r\n\t\t\t\t}\r\n\t\t\t}else if(fill && fill.colors){\r\n\t\t\t\t// Configure gradient\r\n\t\t\t\tfill.x1 = startX;\r\n\t\t\t\tfill.y1 = startY;\r\n\t\t\t\tfill.x2 = startX + length;\r\n\t\t\t\tfill.y2 = startY;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar x = startX;\r\n\t\t\tvar y = startY;\r\n\t\t\tvar chicklet = (length / this.segments) - this.segmentSpacing;\r\n\t\t\tvar visibleSegments = Math.abs( (endPosition - startX) / (chicklet+this.segmentSpacing) );\r\n\t\t\tvar sw = this.startThickness;\r\n\t\t\tvar inc = (this.endThickness - this.startThickness) /this.segments\r\n\t\t\tvar ew = sw+inc;\t\t\t\r\n\t\t\tvar remain = visibleSegments - Math.floor(visibleSegments);\r\n\t\t\t\r\n\t\t\tfor(i = 0; i < Math.floor(visibleSegments); i++){\r\n\t\t\t\tvar path = group.createPath();\r\n\t\t\t\t\r\n\t\t\t\tif(i == 0 && this.rounded && (sw/2) < chicklet){ // first segment rounded\r\n\t\t\t\t\tradius = sw/2;\r\n\t\t\t\t\tpath.moveTo(x + radius, y);\r\n\t\t\t\t\tpath.lineTo(x + chicklet, y);\r\n\t\t\t\t\tpath.lineTo(x + chicklet, y + ew);\r\n\t\t\t\t\tpath.lineTo(x + radius, y + sw);\r\n\t\t\t\t\tpath.arcTo(radius, radius, 0, 0, 1, x + radius, y)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(i == Math.floor(visibleSegments) - 1 && (remain == 0) && this.rounded && (ew/2) < chicklet){ // last segment rounded\r\n\t\t\t\t\t\tradius = ew/2;\r\n\t\t\t\t\t\tpath.moveTo(x, y);\r\n\t\t\t\t\t\tpath.lineTo(x + chicklet - radius, y);\r\n\t\t\t\t\t\tpath.arcTo(radius, radius, 0, 0, 1, x + chicklet - radius, y + ew)\r\n\t\t\t\t\t\tpath.lineTo(x, y + sw);\r\n\t\t\t\t\t\tpath.lineTo(x, y);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tpath.moveTo(x, y);\r\n\t\t\t\t\t\tpath.lineTo(x + chicklet, y);\r\n\t\t\t\t\t\tpath.lineTo(x + chicklet, y + ew);\r\n\t\t\t\t\t\tpath.lineTo(x, y + sw);\r\n\t\t\t\t\t\tpath.lineTo(x, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpath.setFill(fill).setStroke(stroke);\r\n\t\t\t\tsw = ew;\r\n\t\t\t\tew += inc;\r\n\t\t\t\tx += chicklet + this.segmentSpacing;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// draw the remaining segment part\r\n\t\t\tif(remain > 0){\r\n\t\t\t\tew = sw+( (ew-sw)*remain );\r\n\t\t\t\tgp = [x, y, x+(chicklet*remain), y, x+(chicklet*remain), y  + ew, x, y + sw, x, y]\r\n\t\t\t\tshape = group.createPolyline(gp).setFill(fill).setStroke(stroke);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn shape;\r\n\t\t},\r\n\r\n\t\t_defaultVerticalShapeFunc: function(indicator, group, scale, startX, startY, endPosition, startThickness, endThickness, fill, stroke){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar length = scale._contentBox.h ;\r\n\t\t\tvar shape, i,gp,radius;\r\n\t\t\tif(this.ranges){\r\n\t\t\t\t// Configure gradient to represent the ranges\r\n\t\t\t\tfill = {type:\"linear\", colors:[]};\t\t\t\t\r\n\t\t\t\tfill.x1 = startX;\r\n\t\t\t\tfill.y1 = startY;\r\n\t\t\t\tfill.x2 = startX;\r\n\t\t\t\tfill.y2 = startY + length;\r\n\t\t\t\t\r\n\t\t\t\tvar rangeStart = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor(i = 0; i < this.ranges.length; i++){\r\n\t\t\t\t\tvar entry1 = {\r\n\t\t\t\t\t\tcolor:this.ranges[i].color,\r\n\t\t\t\t\t\toffset: scale.scaler.positionForValue(rangeStart)\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar entry2 = {\r\n\t\t\t\t\t\tcolor:this.ranges[i].color,\r\n\t\t\t\t\t\toffset: scale.scaler.positionForValue(rangeStart+this.ranges[i].size)\r\n\t\t\t\t\t};\r\n\t\t\t\t\tfill.colors.push(entry1);\r\n\t\t\t\t\tfill.colors.push(entry2);\r\n\t\t\t\t\trangeStart += this.ranges[i].size\r\n\t\t\t\t}\r\n\t\t\t}else if(fill && fill.colors){\r\n\t\t\t\t// Configure gradient\r\n\t\t\t\tfill.x1 = startX;\r\n\t\t\t\tfill.y1 = startY;\r\n\t\t\t\tfill.x2 = startX;\r\n\t\t\t\tfill.y2 = startY + length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar x = startX;\r\n\t\t\tvar y = startY;\r\n\t\t\tvar chicklet = (length / this.segments) - this.segmentSpacing;\r\n\t\t\tvar visibleSegments = Math.abs( (endPosition - startY) / (chicklet+this.segmentSpacing) );\r\n\t\t\tvar sw = this.startThickness;\r\n\t\t\tvar inc = (this.endThickness - this.startThickness) /this.segments\r\n\t\t\tvar ew = sw+inc;\t\t\t\r\n\t\t\tvar remain = visibleSegments - Math.floor(visibleSegments);\r\n\t\t\t\r\n\t\t\tfor(i = 0; i < Math.floor(visibleSegments); i++){\r\n\t\t\t\tvar path = group.createPath();\r\n\t\t\t\t\r\n\t\t\t\tif(i == 0 && this.rounded && (sw/2) < chicklet){ // first segment rounded\r\n\t\t\t\t\tradius = sw/2;\r\n\t\t\t\t\tpath.moveTo(x , y+ radius);\r\n\t\t\t\t\tpath.lineTo(x , y+ chicklet);\r\n\t\t\t\t\tpath.lineTo(x + ew, y + chicklet);\r\n\t\t\t\t\tpath.lineTo(x + sw, y + radius);\r\n\t\t\t\t\tpath.arcTo(radius, radius, 0, 0, 0, x , y+ radius)\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(i == Math.floor(visibleSegments) - 1 && (remain == 0) && this.rounded && (ew/2) < chicklet){ // last segment rounded\r\n\t\t\t\t\t\tradius = ew/2;\r\n\t\t\t\t\t\tpath.moveTo(x, y);\r\n\t\t\t\t\t\tpath.lineTo(x , y+ chicklet - radius);\r\n\t\t\t\t\t\tpath.arcTo(radius, radius, 0, 0, 0, x + ew, y + chicklet - radius)\r\n\t\t\t\t\t\tpath.lineTo(x+ sw, y );\r\n\t\t\t\t\t\tpath.lineTo(x, y);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tpath.moveTo(x, y);\r\n\t\t\t\t\t\tpath.lineTo(x , y+ chicklet);\r\n\t\t\t\t\t\tpath.lineTo(x + ew, y + chicklet);\r\n\t\t\t\t\t\tpath.lineTo(x+ sw, y );\r\n\t\t\t\t\t\tpath.lineTo(x, y);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpath.setFill(fill).setStroke(stroke);\r\n\t\t\t\tsw = ew;\r\n\t\t\t\tew += inc;\r\n\t\t\t\ty += chicklet + this.segmentSpacing;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// draw the remaining segment part\r\n\t\t\tif(remain > 0){\r\n\t\t\t\tew = sw+( (ew-sw)*remain );\r\n\t\t\t\tgp = [x, y, x, y+(chicklet*remain), x+ ew, y+(chicklet*remain), x+ sw, y , x, y];\r\n\t\t\t\tshape = group.createPolyline(gp).setFill(fill).setStroke(stroke);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn shape;\r\n\t\t},\r\n\t\t\t\t\r\n\t\tindicatorShapeFunc: function(group, indicator, startX, startY, endPosition, startThickness, endThickness, fill, stroke){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\t\r\n\t\t\tif(indicator.scale._gauge.orientation == \"horizontal\"){\r\n\t\t\t\tthis._defaultHorizontalShapeFunc(indicator, group, indicator.scale, startX, startY, endPosition, startThickness, endThickness, fill, stroke);\r\n\t\t\t}else{\r\n\t\t\t\tthis._defaultVerticalShapeFunc(indicator, group, indicator.scale, startX, startY, endPosition, startThickness, endThickness, fill, stroke);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\trefreshRendering: function(){\r\n\t\t\r\n\t\t\tif(this._gfxGroup == null || this.scale == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// gets position corresponding to the values\r\n\t\t\tvar spos = this.scale.positionForValue(this.start);\r\n\t\t\tvar pos = this.scale.positionForValue(this.value);\r\n\t\t\tthis._gfxGroup.clear();\r\n\t\t\t\r\n\t\t\tvar startX;\r\n\t\t\tvar startY;\r\n\t\t\tvar endPosition;\r\n\t\t\tif(this.scale._gauge.orientation == \"horizontal\"){\r\n\t\t\t\tstartX = spos;\r\n\t\t\t\tstartY = this.paddingTop;\r\n\t\t\t\tendPosition = pos;\r\n\t\t\t}else{\r\n\t\t\t\tstartX = this.paddingLeft;\r\n\t\t\t\tstartY = spos ;\r\n\t\t\t\tendPosition = pos;\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.indicatorShapeFunc(this._gfxGroup, this, startX, startY, endPosition, this.startThickness, this.endThickness, this.fill, this.stroke);\r\n\t\t}\r\n\t})\r\n});\r\n"]}