{"version":3,"sources":["dgauges/ScaleBase.js"],"names":["define","lang","declare","gfx","array","_Invalidating","has","scaler","font","labelPosition","labelGap","tickStroke","_gauge","_gfxGroup","_bgGroup","_fgGroup","_indicators","_indicatorsIndex","_indicatorsRenderers","constructor","this","color","width","addInvalidatingProperties","watch","hitch","_watchScaler","postscript","mixin","inherited","arguments","_watchers","name","oldValue","newValue","forEach","entry","unwatch","props","watchedProperties","push","invalidateRendering","_getFont","defaultFont","positionForValue","value","valueForPosition","position","tickLabelFunc","tickItem","isMinor","String","tickShapeFunc","group","scale","createLine","x1","y1","x2","y2","setStroke","getIndicatorRenderer","removeIndicator","indicator","removeShape","idx","indexOf","splice","_disconnectListeners","_resetMainIndicator","getIndicator","addIndicator","behindScale","_ticksGroup","_createSubGroups","createGroup","refreshRendering"],"mappings":"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","file":"../../dgauges/ScaleBase.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojox/gfx\", \"dojo/_base/array\", \"dojox/widget/_Invalidating\", \"dojo/_base/sniff\"],\r\n\tfunction(lang, declare, gfx, array, _Invalidating, has){\r\n\treturn declare(\"dojox.dgauges.ScaleBase\", _Invalidating, {\r\n\t\t// summary:\r\n\t\t//\t\tThe ScaleBase class is the base class for the circular and rectangular scales.\r\n\t\t//\t\tA scaler must be set to use this class. A scaler is responsible for\r\n\t\t//\t\ttick generation and various data-transform operations.\t\r\n\r\n\t\t// scaler: Object\r\n\t\t//\t\tThe scaler used for tick generation and data-transform operations.\r\n\t\t//\t\tThis property is mandatory for using the scale.\r\n\t\tscaler: null,\r\n\t\t// font: Object\r\n\t\t//\t\tThe font used for the ticks labels.\r\n\t\t//\t\tThis is null by default which means this scale use the font defined \r\n\t\t//\t\ton the gauge.\r\n\t\tfont: null,\r\n\t\t// labelPosition: String\r\n\t\t//\t\tSee CircularScale and RectangularScale for valid values.\r\n\t\tlabelPosition: null,\r\n\t\t// labelGap: Number\r\n\t\t//\t\tThe label gap between the ticks and their labels. Default value is 1.\r\n\t\tlabelGap: 1,\r\n\t\t// tickStroke: Object\r\n\t\t//\t\tThe GFX stroke used by the default tickShapeFunc implementation.\r\n\t\ttickStroke: null,\r\n\t\t_gauge: null,\r\n\t\t_gfxGroup: null,\r\n\t\t_bgGroup: null,\r\n\t\t_fgGroup: null,\r\n\t\t_indicators: null,\r\n\t\t_indicatorsIndex: null,\r\n\t\t_indicatorsRenderers: null,\r\n\t\t\r\n\t\tconstructor: function(){\r\n\t\t\tthis._indicators = [];\r\n\t\t\tthis._indicatorsIndex = {};\r\n\t\t\tthis._indicatorsRenderers = {};\r\n\t\t\tthis._gauge = null;\r\n\t\t\tthis._gfxGroup = null;\r\n\t\t\t// Fix for #1, IE<9 don't render correctly stroke with width<1\r\n\t\t\tthis.tickStroke = {color: \"black\", width: has(\"ie\") <= 8 ? 1 : 0.5};\r\n\t\t\t\r\n\t\t\tthis.addInvalidatingProperties([\"scaler\", \"font\", \"labelGap\", \"labelPosition\", \"tickShapeFunc\", \"tickLabelFunc\", \"tickStroke\"]);\r\n\t\t\t\r\n\t\t\tthis.watch(\"scaler\", lang.hitch(this, this._watchScaler));\r\n\t\t},\r\n\r\n\t\tpostscript: function(mixin){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(mixin && mixin.scaler){\r\n\t\t\t\tthis._watchScaler(\"scaler\", null, mixin.scaler);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_watchers: null,\r\n\r\n\t\t_watchScaler: function(name, oldValue, newValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tarray.forEach(this._watchers, lang.hitch(this, function(entry){\r\n\t\t\t\tentry.unwatch();\r\n\t\t\t}));\r\n\r\n\t\t\t// Get the properties declared by the watched object\r\n\t\t\tvar props = newValue.watchedProperties;\r\n\t\t\tthis._watchers = [];\r\n\t\t\tarray.forEach(props, lang.hitch(this, function(entry){\r\n\t\t\t\tthis._watchers.push(newValue.watch(entry, lang.hitch(this, this.invalidateRendering)));\r\n\t\t\t}));\r\n\t\t},\r\n\t\t\r\n\t\t_getFont: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar font = this.font;\r\n\t\t\tif(!font){\r\n\t\t\t\tfont = this._gauge.font;\r\n\t\t\t}\r\n\t\t\tif(!font){\r\n\t\t\t\tfont = gfx.defaultFont;\r\n\t\t\t}\r\n\t\t\treturn font;\r\n\t\t},\r\n\t\t\r\n\t\tpositionForValue: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee CircularScale and Rectangular for more informations.\r\n\t\t\t// value: Number\r\n\t\t\t//\t\tThe value to convert.\r\n\t\t\t// returns: Number\r\n\t\t\t//\t\tThe position corresponding to the value.\r\n\t\t\treturn 0;\r\n\t\t},\r\n\t\t\r\n\t\tvalueForPosition: function(position){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee CircularScale and Rectangular for more informations.\r\n\t\t\t// position: Number\r\n\t\t\t//\t\tThe position to convert.\r\n\t\t\t// returns: Number\r\n\t\t\t//\t\tThe value corresponding to the position.\r\n\t\t},\r\n\t\t\r\n\t\ttickLabelFunc: function(tickItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCustomize the text of ticks labels.\r\n\t\t\t// tickItem: Object\r\n\t\t\t//\t\tAn object containing the tick informations.\r\n\t\t\t// returns: String\r\n\t\t\t//\t\tThe text to be aligned with the tick. If null, the tick has no label.\r\n\t\t\tif(tickItem.isMinor){\r\n\t\t\t\treturn null;\r\n\t\t\t}else{\r\n\t\t\t\treturn String(tickItem.value);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\ttickShapeFunc: function(group, scale, tickItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCustomize the shape of ticks.\r\n\t\t\t// group: dojox/gfx/Group\r\n\t\t\t//\t\tThe GFX group used for drawing the tick.\r\n\t\t\t// scale: dojox/dgauges/ScaleBase\r\n\t\t\t//\t\tThe scale being processed.\r\n\t\t\t// tickItem: Object\r\n\t\t\t//\t\tAn object containing the tick informations.\r\n\t\t\treturn group.createLine({\r\n\t\t\t\tx1: 0,\r\n\t\t\t\ty1: 0,\r\n\t\t\t\tx2: tickItem.isMinor ? 6 : 10,\r\n\t\t\t\ty2: 0\r\n\t\t\t}).setStroke(this.tickStroke);\r\n\t\t},\r\n\t\t\r\n\t\tgetIndicatorRenderer: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the GFX shape of an indicator.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the indicator as defined using addIndicator.\r\n\t\t\t// returns: dojox/gfx/canvas/Shape\r\n\t\t\t//\t\tThe GFX shape of the indicator.\r\n\t\t\treturn this._indicatorsRenderers[name];\r\n\t\t},\r\n\t\t\r\n\t\tremoveIndicator: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves an indicator.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the indicator as defined using addIndicator.\r\n\t\t\t// returns: IndicatorBase\r\n\t\t\t//\t\tThe removed indicator.\r\n\t\t\tvar indicator = this._indicatorsIndex[name];\r\n\t\t\tif(indicator){\r\n\t\t\t\tindicator._gfxGroup.removeShape();\r\n\t\t\t\tvar idx = this._indicators.indexOf(indicator);\r\n\t\t\t\tthis._indicators.splice(idx, 1);\r\n\t\t\t\t\r\n\t\t\t\tindicator._disconnectListeners();\r\n\t\t\t\t\r\n\t\t\t\tdelete this._indicatorsIndex[name];\r\n\t\t\t\tdelete this._indicatorsRenderers[name];\r\n\t\t\t}\r\n\t\t\tif(this._gauge){\r\n\t\t\t\tthis._gauge._resetMainIndicator();\r\n\t\t\t}\r\n\t\t\tthis.invalidateRendering();\r\n\t\t\treturn indicator;\r\n\t\t},\r\n\t\t\r\n\t\tgetIndicator: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet an indicator instance.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the indicator as defined using addIndicator.\r\n\t\t\t// returns: IndicatorBase\r\n\t\t\t//\t\tThe indicator associated with the name parameter.\r\n\t\t\treturn this._indicatorsIndex[name];\r\n\t\t},\r\n\t\t\r\n\t\taddIndicator: function(name, indicator, behindScale){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd an indicator to the scale. Before calling this function, ensure \r\n\t\t\t//\t\tthis scale has already been added to a gauge using the addElement method\r\n\t\t\t//\t\tof the gauge.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe name of the indicator to be added.\r\n\t\t\t// indicator: dojox/dgauges/IndicatorBase\r\n\t\t\t//\t\tThe indicator to add to this scale.\r\n\t\t\t// behindScale: Boolean\r\n\t\t\t//\t\tIf true, this indicator is drawn behind the scale. Default value is false.\t\r\n\t\t\tif(this._indicatorsIndex[name] && this._indicatorsIndex[name] != indicator){\r\n\t\t\t\tthis.removeIndicator(name);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._indicators.push(indicator);\r\n\t\t\tthis._indicatorsIndex[name] = indicator;\r\n\t\t\t\r\n\t\t\tif(!this._ticksGroup){\r\n\t\t\t\tthis._createSubGroups();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar group = behindScale ? this._bgGroup : this._fgGroup;\r\n\t\t\tindicator._gfxGroup = group.createGroup();\r\n\t\t\t\r\n\t\t\tindicator.scale = this;\r\n\t\t\t\r\n\t\t\treturn this.invalidateRendering();\r\n\t\t},\r\n\t\t\r\n\t\t_createSubGroups: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(!this._gfxGroup || this._ticksGroup){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._bgGroup = this._gfxGroup.createGroup();\r\n\t\t\tthis._ticksGroup = this._gfxGroup.createGroup();\r\n\t\t\tthis._fgGroup = this._gfxGroup.createGroup();\r\n\t\t},\r\n\t\t\r\n\t\trefreshRendering: function(){\r\n\t\t\tif(!this._ticksGroup){\r\n\t\t\t\tthis._createSubGroups();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n\r\n"]}