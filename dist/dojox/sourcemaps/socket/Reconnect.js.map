{"version":3,"sources":["socket/Reconnect.js"],"names":["define","dxSocket","aspect","Reconnect","socket","options","checkForOpen","newSocket","reconnectTime","after","event","clearTimeout","wasClean","disconnected","replace","reconnect","setTimeout","readyState","backoffRate","args","LongPoll","WebSocket","url","URL"],"mappings":";;;;;;;AAAAA,QACC,eACA,eACE,SAASC,EAAUC,GAsDrB,OApDAD,EAASE,UAAY,SAASC,EAAQC,GAarC,IACIC,EAAcC,EADdC,EAAgBH,EAAQG,eAAiB,IAoC7C,OAlCAH,EAAUA,MAEVH,EAAOO,MAAML,EAAQ,UAAW,SAASM,GACxCC,aAAaL,GACTI,EAAME,UACTR,EAAOS,aAAa,WACnBZ,EAASa,QAAQV,EAAQG,EAAYH,EAAOW,iBAG5C,GACCX,EAAOS,eAEVT,EAAOS,aAAe,SAASE,GAC9BC,WAAW,WACVD,IACAT,EAAeU,WAAW,WAEtBT,EAAUU,WAAa,IACzBT,EAAgBH,EAAQG,eAAiB,MAExC,MACDA,GAEHA,GAAiBH,EAAQa,aAAe,IAGtCd,EAAOW,YAEVX,EAAOW,UAAY,WAClB,OAAOX,EAAOe,KACblB,EAASmB,SAAShB,EAAOe,MACzBlB,EAASoB,WAAWC,IAAKlB,EAAOmB,KAAOnB,EAAOkB,QAG1ClB,GAGDH,EAASE","file":"../../socket/Reconnect.js","sourcesContent":["define([\r\n\t\"dojox/socket\",\r\n\t\"dojo/aspect\"\r\n], function(dxSocket, aspect) {\r\n\r\n\tdxSocket.Reconnect = function(socket, options){\r\n\t\t// summary:\r\n\t\t//\t\tProvides auto-reconnection to a websocket after it has been closed\r\n\t\t// socket:\r\n\t\t//\t\tSocket to add reconnection support to.\r\n\t\t// returns:\r\n\t\t//\t\tAn object that implements the WebSocket API\r\n\t\t// example:\r\n\t\t//\t\tYou can use the Reconnect module:\r\n\t\t//\t\t| require[\"dojox/socket\", \"dojox/socket/Reconnect\"], function(dxSocket, reconnect){\r\n\t\t//\t\t|    var socket = dxSocket({url:\"/comet\"});\r\n\t\t//\t\t|    // add auto-reconnect support\r\n\t\t//\t\t|    socket = reconnect(socket);\r\n\t\tvar reconnectTime = options.reconnectTime || 10000;\r\n\t\tvar checkForOpen, newSocket;\r\n\t\toptions = options || {};\r\n\r\n\t\taspect.after(socket, \"onclose\", function(event){\r\n\t\t\tclearTimeout(checkForOpen);\r\n\t\t\tif(!event.wasClean){\r\n\t\t\t\tsocket.disconnected(function(){\r\n\t\t\t\t\tdxSocket.replace(socket, newSocket = socket.reconnect());\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, true);\r\n\t\tif(!socket.disconnected){\r\n\t\t\t// add a default impl if it doesn't exist\r\n\t\t\tsocket.disconnected = function(reconnect){\r\n\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\treconnect();\r\n\t\t\t\t\tcheckForOpen = setTimeout(function(){\r\n\t\t\t\t\t\t//reset the backoff\r\n\t\t\t\t\t\tif(newSocket.readyState < 2){\r\n\t\t\t\t\t\t\treconnectTime = options.reconnectTime || 10000;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 10000);\r\n\t\t\t\t}, reconnectTime);\r\n\t\t\t\t// backoff each time\r\n\t\t\t\treconnectTime *= options.backoffRate || 2;\r\n\t\t\t};\r\n\t\t}\r\n\t\tif(!socket.reconnect){\r\n\t\t\t// add a default impl if it doesn't exist\r\n\t\t\tsocket.reconnect = function(){\r\n\t\t\t\treturn socket.args ?\r\n\t\t\t\t\tdxSocket.LongPoll(socket.args) :\r\n\t\t\t\t\tdxSocket.WebSocket({url: socket.URL || socket.url}); // different cases for different impls\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn socket;\r\n\t};\r\n\r\n\treturn dxSocket.Reconnect;\r\n});\r\n"]}