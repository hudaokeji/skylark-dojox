{"version":3,"sources":["mobile/_StoreMixin.js"],"names":["define","Deferred","declare","store","query","queryOptions","labelProperty","childrenProperty","setStore","this","getValue","item","property","_setQuery","refresh","setQuery","_this","promise","when","results","items","observe","_observe_h","remove","object","previousIndex","newIndex","onDelete","onAdd","onUpdate","onComplete","error","onError","destroy","inherited","arguments"],"mappings":";;;;;;;AAAAA,QACC,sBACA,sBACE,SAASC,EAAUC,GAKrB,OAAOA,EAAQ,2BAA4B,MAc1CC,MAAO,KAIPC,MAAO,KAIPC,aAAc,KAIdC,cAAe,QAIfC,iBAAkB,WAElBC,SAAU,SAAiCL,EAAiBC,EAAiBC,GAG5E,OAAGF,IAAUM,KAAKN,MAAe,MAC9BA,IACFA,EAAMO,SAAW,SAASC,EAAMC,GAC/B,OAAOD,EAAKC,KAGdH,KAAKN,MAAQA,EACbM,KAAKI,UAAUT,EAAOC,GACfI,KAAKK,YAGbC,SAAU,SAAmBX,EAAiBC,GAE7C,OADAI,KAAKI,UAAUT,EAAOC,GACfI,KAAKK,WAGbD,UAAW,SAAmBT,EAAiBC,GAG9CI,KAAKL,MAAQA,EACbK,KAAKJ,aAAeA,GAAgBI,KAAKJ,cAG1CS,QAAS,WAGR,IAAIL,KAAKN,MAAQ,OAAO,KACxB,IAAIa,EAAQP,KACRQ,EAAUR,KAAKN,MAAMC,MAAMK,KAAKL,MAAOK,KAAKJ,cAiDhD,OAhDAJ,EAASiB,KAAKD,EAAS,SAASE,GAC5BA,EAAQC,QACVD,EAAUA,EAAQC,OAEhBH,EAAQI,UACPL,EAAMM,YACRN,EAAMM,WAAWC,SAElBP,EAAMM,WAAaL,EAAQI,QAAQ,SAASG,EAAQC,EAAeC,IAC7C,GAAlBD,EACCC,GAAYD,GAEdT,EAAMW,SAASH,EAAQC,IACP,GAAbC,IACEV,EAAMY,MAETZ,EAAMY,MAAMJ,EAAQE,GAIpBV,EAAMa,SAASL,EAAQE,KAOtBV,EAAMY,OACRZ,EAAMa,SAASL,EAAQE,IAGJ,GAAbA,IAELV,EAAMY,MAERZ,EAAMY,MAAMJ,EAAQE,GAIpBV,EAAMa,SAASL,EAAQE,MAGvB,IAEJV,EAAMc,WAAWX,IACf,SAASY,GACXf,EAAMgB,QAAQD,KAERd,GAGRgB,QAAS,WACLxB,KAAKa,aACPb,KAAKa,WAAab,KAAKa,WAAWC,UAEnCd,KAAKyB,UAAUC","file":"../../mobile/_StoreMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/Deferred\",\r\n\t\"dojo/_base/declare\"\r\n], function(Deferred, declare){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/_StoreMixin\r\n\r\n\treturn declare(\"dojox.mobile._StoreMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for widgets to enable dojo/store data store.\r\n\t\t// description:\r\n\t\t//\t\tBy mixing this class into a widget, it can get data through a\r\n\t\t//\t\tdojo/store data store. The widget must implement the following\r\n\t\t//\t\tmethods to handle the retrieved data:\r\n\t\t//\r\n\t\t//\t\t- onComplete(/*Array*/items), onError(/*Object*/errorData),\r\n\t\t//\t\t- onUpdate(/*Object*/item, /*Number*/insertedInto), and\r\n\t\t//\t\t- onDelete(/*Object*/item, /*Number*/removedFrom).\r\n\t\r\n\t\t// store: Object\r\n\t\t//\t\tReference to data provider object used by this widget.\r\n\t\tstore: null,\r\n\r\n\t\t// query: Object\r\n\t\t//\t\tA query that can be passed to 'store' to initially filter the items.\r\n\t\tquery: null,\r\n\r\n\t\t// queryOptions: Object\r\n\t\t//\t\tAn optional parameter for the query.\r\n\t\tqueryOptions: null,\r\n\r\n\t\t// labelProperty: String\r\n\t\t//\t\tA property name (a property in the dojo/store item) that specifies that item's label.\r\n\t\tlabelProperty: \"label\",\r\n\r\n\t\t// childrenProperty: String\r\n\t\t//\t\tA property name (a property in the dojo/store item) that specifies that item's children.\r\n\t\tchildrenProperty: \"children\",\r\n\r\n\t\tsetStore: function(/*dojo/store/api/Store*/store, /*String*/query, /*Object*/queryOptions){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the store to use with this widget.\r\n\t\t\tif(store === this.store){ return null; }\r\n\t\t\tif(store){\r\n\t\t\t\tstore.getValue = function(item, property){\r\n\t\t\t\t\treturn item[property];\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tthis.store = store;\r\n\t\t\tthis._setQuery(query, queryOptions);\r\n\t\t\treturn this.refresh();\r\n\t\t},\r\n\r\n\t\tsetQuery: function(/*String*/query, /*Object*/queryOptions){\r\n\t\t\tthis._setQuery(query, queryOptions);\r\n\t\t\treturn this.refresh();\r\n\t\t},\r\n\r\n\t\t_setQuery: function(/*String*/query, /*Object*/queryOptions){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.query = query;\r\n\t\t\tthis.queryOptions = queryOptions || this.queryOptions;\r\n\t\t},\r\n\r\n\t\trefresh: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFetches the data and generates the list items.\r\n\t\t\tif(!this.store){ return null; }\r\n\t\t\tvar _this = this;\r\n\t\t\tvar promise = this.store.query(this.query, this.queryOptions);\r\n\t\t\tDeferred.when(promise, function(results){\r\n\t\t\t\tif(results.items){\r\n\t\t\t\t\tresults = results.items; // looks like dojo/data style items array\r\n\t\t\t\t}\r\n\t\t\t\tif(promise.observe){\r\n\t\t\t\t\tif(_this._observe_h){\r\n\t\t\t\t\t\t_this._observe_h.remove();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_this._observe_h = promise.observe(function(object, previousIndex, newIndex){\r\n\t\t\t\t\t\tif(previousIndex != -1){\r\n\t\t\t\t\t\t\tif(newIndex != previousIndex){\r\n\t\t\t\t\t\t\t\t// item removed or moved\r\n\t\t\t\t\t\t\t\t_this.onDelete(object, previousIndex);\r\n\t\t\t\t\t\t\t\tif(newIndex != -1){\r\n\t\t\t\t\t\t\t\t\tif (_this.onAdd) {\r\n\t\t\t\t\t\t\t\t\t\t // new widget with onAdd method defined\r\n\t\t\t\t\t\t\t\t\t\t_this.onAdd(object, newIndex);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\t// TODO remove in 2.0\r\n\t\t\t\t\t\t\t\t\t\t// compatibility with 1.8: onAdd did not exist, add was handled by onUpdate\r\n\t\t\t\t\t\t\t\t\t\t_this.onUpdate(object, newIndex);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t// item modified\r\n\t\t\t\t\t\t\t\t// if onAdd is not defined, we are \"bug compatible\" with 1.8 and we do nothing.\r\n\t\t\t\t\t\t\t\t// TODO remove test in 2.0\r\n\t\t\t\t\t\t\t\tif(_this.onAdd){\r\n\t\t\t\t\t\t\t\t\t_this.onUpdate(object, newIndex);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}else if(newIndex != -1){\r\n\t\t\t\t\t\t\t// item added\r\n\t\t\t\t\t\t\tif(_this.onAdd){\r\n\t\t\t\t\t\t\t\t // new widget with onAdd method defined\r\n\t\t\t\t\t\t\t\t_this.onAdd(object, newIndex);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t// TODO remove in 2.0\r\n\t\t\t\t\t\t\t\t// compatibility with 1.8: onAdd did not exist, add was handled by onUpdate\r\n\t\t\t\t\t\t\t\t_this.onUpdate(object, newIndex);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, true); // we want to be notified of updates\r\n\t\t\t\t}\r\n\t\t\t\t_this.onComplete(results);\r\n\t\t\t}, function(error){\r\n\t\t\t\t_this.onError(error);\r\n\t\t\t});\r\n\t\t\treturn promise;\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tif(this._observe_h){\r\n\t\t\t\tthis._observe_h = this._observe_h.remove();\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\r\n/*=====\r\n\t\t// Subclass MUST implement the following methods.\r\n\r\n\t\t, onComplete: function(items){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA handler that is called after the fetch completes.\r\n\t\t},\r\n\r\n\t\tonError: function(errorData){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn error handler.\r\n\t\t},\r\n\r\n\t\tonUpdate: function(item, insertedInto){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when an existing data item has been modified in the store.\r\n\t\t\t//\t\tNote: for compatibility with previous versions where only onUpdate was present,\r\n\t\t\t//\t\tif onAdd is not defined, onUpdate will be called instead.\r\n\t\t},\r\n\r\n\t\tonDelete: function(item, removedFrom){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when a data item has been removed from the store.\r\n\t\t},\r\n\t\t\r\n\t\t// Subclass should implement the following methods.\r\n\r\n\t\tonAdd: function(item, insertedInto){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when a new data item has been added to the store.\r\n\t\t\t//\t\tNote: for compatibility with previous versions where this function did not exist,\r\n\t\t\t//\t\tif onAdd is not defined, onUpdate will be called instead.\r\n\t\t}\r\n=====*/\r\n\t});\r\n});\r\n"]}