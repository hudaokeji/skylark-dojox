{"version":3,"sources":["mobile/_DataMixin.js"],"names":["define","kernel","array","declare","lang","Deferred","deprecated","store","query","queryOptions","setStore","this","_setQuery","getFeatures","forEach","_conn","disconnect","connect","refresh","setQuery","d","onComplete","hitch","items","request","resolve","onError","errorData","q","fetch","start","count"],"mappings":";;;;;;;AAAAA,QACC,oBACA,mBACA,qBACA,kBACA,uBACE,SAASC,EAAQC,EAAOC,EAASC,EAAMC,GAOzC,OAFAJ,EAAOK,WAAW,0BAA2B,uCAAwC,OAE9EH,EAAQ,0BAA2B,MAUzCI,MAAO,KAIPC,MAAO,KAIPC,aAAc,KAEdC,SAAU,SAA4BH,EAAuCC,EAAkBC,GAG9F,OAAGF,IAAUI,KAAKJ,MAAe,MACjCI,KAAKJ,MAAQA,EACbI,KAAKC,UAAUJ,EAAOC,GACnBF,GAASA,EAAMM,cAAc,gCAC/BX,EAAMY,QAAQH,KAAKI,UAAaJ,KAAKK,WAAYL,MACjDA,KAAKI,OACJJ,KAAKM,QAAQV,EAAO,QAAS,SAC7BI,KAAKM,QAAQV,EAAO,QAAS,SAC7BI,KAAKM,QAAQV,EAAO,WAAY,YAChCI,KAAKM,QAAQV,EAAO,QAAS,kBAGxBI,KAAKO,YAGbC,SAAU,SAAyCX,EAAkBC,GAIpE,OADAE,KAAKC,UAAUJ,EAAOC,GACfE,KAAKO,WAGbN,UAAW,SAASJ,EAAOC,GAG1BE,KAAKH,MAAQA,EACbG,KAAKF,aAAeA,GAAgBE,KAAKF,cAG1CS,QAAS,WAGR,IAAIP,KAAKJ,MAAQ,OAAO,KACxB,IAAIa,EAAI,IAAIf,EACRgB,EAAajB,EAAKkB,MAAMX,KAAM,SAASY,EAAOC,GACjDb,KAAKU,WAAWE,EAAOC,GACvBJ,EAAEK,YAECC,EAAUtB,EAAKkB,MAAMX,KAAM,SAASgB,EAAWH,GAClDb,KAAKe,QAAQC,EAAWH,GACxBJ,EAAEK,YAECG,EAAIjB,KAAKH,MASb,OARAG,KAAKJ,MAAMsB,OACVrB,MAAOoB,EACPnB,aAAcE,KAAKF,aACnBY,WAAYA,EACZK,QAASA,EACTI,MAAOF,GAAKA,EAAEE,MACdC,MAAOH,GAAKA,EAAEG,QAERX","file":"../../mobile/_DataMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/Deferred\"\r\n], function(kernel, array, declare, lang, Deferred){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/_DataMixin\r\n\r\n\tkernel.deprecated(\"dojox/mobile/_DataMixin\", \"Use dojox/mobile/_StoreMixin instead\", \"2.0\");\r\n\r\n\treturn declare(\"dojox.mobile._DataMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for widgets to enable dojo/data data store.\r\n\t\t// description:\r\n\t\t//\t\tBy mixing this class into a widget, it can get data through a\r\n\t\t//\t\tdojo/data data store. The widget must implement\r\n\t\t//\t\tonComplete(/*Array*/items) to handle the retrieved data.\r\n\r\n\t\t// store: Object\r\n\t\t//\t\tReference to data provider object used by this widget.\r\n\t\tstore: null,\r\n\r\n\t\t// query: Object\r\n\t\t//\t\tA query that can be passed to 'store' to initially filter the items.\r\n\t\tquery: null,\r\n\r\n\t\t// queryOptions: Object\r\n\t\t//\t\tAn optional parameter for the query.\r\n\t\tqueryOptions: null,\r\n\r\n\t\tsetStore: function(/*dojo/data/store*/store, /*dojo/data/api/Request|Object*/query, /*Object?*/queryOptions){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the store to use with this widget.\r\n\t\t\tif(store === this.store){ return null; }\r\n\t\t\tthis.store = store;\r\n\t\t\tthis._setQuery(query, queryOptions);\r\n\t\t\tif(store && store.getFeatures()[\"dojo.data.api.Notification\"]){\r\n\t\t\t\tarray.forEach(this._conn || [], this.disconnect, this);\r\n\t\t\t\tthis._conn = [\r\n\t\t\t\t\tthis.connect(store, \"onSet\", \"onSet\"),\r\n\t\t\t\t\tthis.connect(store, \"onNew\", \"onNew\"),\r\n\t\t\t\t\tthis.connect(store, \"onDelete\", \"onDelete\"),\r\n\t\t\t\t\tthis.connect(store, \"close\", \"onStoreClose\")\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\treturn this.refresh();\r\n\t\t},\r\n\r\n\t\tsetQuery: function(/*dojo/data/api/Request|Object*/query, /*Object?*/queryOptions){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets a query.\r\n\t\t\tthis._setQuery(query, queryOptions);\r\n\t\t\treturn this.refresh();\r\n\t\t},\r\n\r\n\t\t_setQuery: function(query, queryOptions){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.query = query;\r\n\t\t\tthis.queryOptions = queryOptions || this.queryOptions;\r\n\t\t},\r\n\r\n\t\trefresh: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFetches the data and generates the list items.\r\n\t\t\tif(!this.store){ return null; }\r\n\t\t\tvar d = new Deferred();\r\n\t\t\tvar onComplete = lang.hitch(this, function(items, request){\r\n\t\t\t\tthis.onComplete(items, request);\r\n\t\t\t\td.resolve();\r\n\t\t\t});\r\n\t\t\tvar onError = lang.hitch(this, function(errorData, request){\r\n\t\t\t\tthis.onError(errorData, request);\r\n\t\t\t\td.resolve();\r\n\t\t\t});\r\n\t\t\tvar q = this.query;\r\n\t\t\tthis.store.fetch({\r\n\t\t\t\tquery: q,\r\n\t\t\t\tqueryOptions: this.queryOptions,\r\n\t\t\t\tonComplete: onComplete,\r\n\t\t\t\tonError: onError,\r\n\t\t\t\tstart: q && q.start,\r\n\t\t\t\tcount: q && q.count\r\n\t\t\t});\r\n\t\t\treturn d;\r\n\t\t}\r\n\r\n/*\r\n\t\t// Subclass MUST implement the following methods.\r\n\r\n\t\tonComplete: function(items, request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn handler that is called after the fetch completes.\r\n\t\t},\r\n\r\n\t\tonError: function(errorData, request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn error handler.\r\n\t\t},\r\n\r\n\t\tonSet: function(item, attribute, oldValue, newValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onSet()\r\n\t\t},\r\n\r\n\t\tonNew: function(newItem, parentInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onNew()\r\n\t\t},\r\n\r\n\t\tonDelete: function(deletedItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onDelete()\r\n\t\t},\r\n\r\n\t\tonStoreClose: function(request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRefresh list on close.\r\n\t\t}\r\n*/\r\n\t});\r\n});\r\n"]}