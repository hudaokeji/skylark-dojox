{"version":3,"sources":["mobile/FilteredListMixin.js"],"names":["define","require","array","declare","lang","dom","domClass","domConstruct","aspect","registry","SearchBox","ScrollableView","viewRegistry","filterBoxRef","placeHolder","filterBoxVisible","_filterBox","_createdFilterBox","_createdScrollableView","startup","this","_started","inherited","arguments","byId","isInstanceOf","Error","set","labelProperty","on","hitch","searchAttr","ignoreCase","incremental","onSearch","selectOnClick","currentDomNode","domNode","parentNode","replaceChild","place","containerNode","searchBoxParentDiv","create","filterBoxClass","add","resize","sv","getEnclosingScrollable","connect","focusNode","value","_previousUnfilteredScrollPos","getPos","store","_initStore","_createStore","_setFilterBoxVisibleAttr","visible","_set","style","display","_setPlaceHolderAttr","getFilterBox","getScrollableView","get","query","DataStore","initStoreFunction","module","Memory","safeMixin","append","createListItem","item","listItem","before","forEach","getChildren","child","removeChild","items","text","label","innerText","textContent","push","idProperty","data","setStore","queryOptions","_onFilter","results","options","onFilter","setQuery","scrollTo","x","y","destroy","preserveDom"],"mappings":"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","file":"../../mobile/FilteredListMixin.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/aspect\",\r\n\t\"dijit/registry\",\r\n\t\"./SearchBox\",\r\n\t\"./ScrollableView\",\r\n\t\"./viewRegistry\"\r\n], function(require, array, declare, lang, dom, domClass, domConstruct,  \r\n\t\t\taspect, registry, SearchBox, ScrollableView, viewRegistry){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/FilteredListMixin\r\n\r\n\treturn declare(\"dojox.mobile.FilteredListMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for filtered lists.\r\n\t\t// description:\r\n\t\t//\t\tThis mixin adds filtering capabilities to all dojox/mobile list widgets:\r\n\t\t//\t\tdojox/mobile/RoundRectList and any of its subclasses (RoundRectStoreList, \r\n\t\t//\t\tRoundRectDataList, EdgeToEdgeList, EdgeToEdgeStoreList, EdgeToEdgeDataList).\r\n\t\t//\t\tWhen mixing this class into a list widget, the list items are dynamically \r\n\t\t//\t\tfiltered depending on the filtering string that the user enters in a \r\n\t\t//\t\tdojox/mobile/SearchBox. \r\n\t\t//\r\n\t\t//\t\tThis mixin supports the following use-cases:\r\n\t\t//\t\t1. For user's convenience, by simply mixing this class into a list widget \r\n\t\t//\t\tthe mixin creates a dojox/mobile/SearchBox and a dojox/mobile/ScrollableView. \r\n\t\t//\t\tThe list is placed inside the ScrollableView and the SearchBox, which allows\r\n\t\t//\t\tfiltering the list, is placed on top of the ScrollableView.\r\n\t\t//\t\t2. Alternatively, the user can create (and style) the instance of dojox/mobile/SearchBox, \r\n\t\t//\t\tand specify its id using the property filterBoxRef of this mixin. This allows\r\n\t\t//\t\tplacing the SearchBox anywhere in the DOM, while the mixin takes care of \r\n\t\t//\t\tthe necessary glue to ensure the list is filtered according to the filter criteria\r\n\t\t//\t\tentered in the SearchBox.\r\n\t\t//\r\n\t\t//\t\tThe filtering works for lists backed by a store (dojo/store or dojo/data), as well \r\n\t\t//\t\tas for lists not backed by a store. When filtering a list backed by a store \r\n\t\t//\t\tcontaining hierarchical data (data items that are children of a parent data item), \r\n\t\t//\t\tthe store must support recursive search queries such that the filtering can match \r\n\t\t//\t\tchild items.\r\n\t\t//\r\n\t\t//\t\tFor configuration purposes, the instance of dojox/mobile/SearchBox can be retrieved\r\n\t\t//\t\tusing the method getFilterBox(). If a dojox/mobile/ScrollableView is created by\r\n\t\t//\t\tthis mixin, it can be retrieved using getScrollableView().\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\t<!-- Markup use-case: -->\r\n\t\t// |\t<!-- SearchBox and ScrollableView created by the mixin. -->\r\n\t\t// |\t<!-- Filtered EdgeToEdgeStoreList created in markup. -->\r\n\t\t// |\t<div data-dojo-type=\"dojox/mobile/View\">\r\n\t\t// |\t\t<h1 data-dojo-type=\"dojox/mobile/Heading\" data-dojo-props=\"fixed: 'top'\">Some heading</h1>\r\n\t\t// |\t\t<ul data-dojo-type=\"dojox/mobile/EdgeToEdgeStoreList\"\r\n\t\t// |\t\t\tdata-dojo-mixins=\"dojox/mobile/FilteredListMixin\"\r\n\t\t// |\t\t\tdata-dojo-props=\"placeHolder: 'Search', store: myStore\"></ul>\r\n\t\t// |\t</div>\r\n\t\t// example:\r\n\t\t// |\t<!-- Markup use-case: -->\r\n\t\t// |\t<!-- SearchBox and ScrollableView created by the mixin. -->\r\n\t\t// |\t<!-- Filtered RoundRectList created in markup. --> \r\n\t\t// |\t<div data-dojo-type=\"dojox/mobile/View\">\r\n\t\t// |\t\t<h1 data-dojo-type=\"dojox/mobile/Heading\" data-dojo-props=\"fixed: 'top'\">Some heading</h1>\r\n\t\t// |\t\t<ul id=\"list\" data-dojo-type=\"dojox/mobile/RoundRectList\"\r\n\t\t// |\t\t\tdata-dojo-mixins=\"dojox/mobile/FilteredListMixin\"\r\n\t\t// |\t\t\tdata-dojo-props=\"placeHolder: 'Search'\">\r\n\t\t// |\t\t\t<li data-dojo-type=\"dojox/mobile/ListItem\">Item 1</li>\r\n\t\t// |\t\t\t<li data-dojo-type=\"dojox/mobile/ListItem\">Item 2</li>\r\n\t\t// |\t\t\t...\r\n\t\t// |\t\t</ul>\r\n\t\t// |\t</div>\r\n\t\t// example:\r\n\t\t// |\t// Programmatic use-case:\r\n\t\t// |\t// SearchBox and ScrollableView created by the mixin.\r\n\t\t// |\t// Filtered EdgeToEdgeStoreList created programmatically.\r\n\t\t// |\trequire([\"dojo/_base/declare\", \"dojo/ready\", \"dojox/mobile\", \"dojox/mobile/EdgeToEdgeStoreList\", \r\n\t\t// |\t\t\t\"dojox/mobile/FilteredListMixin\", ...],\tfunction(declare, ready, registry, ...){\r\n\t\t// |\t\tready(function(){\r\n\t\t// |\t\t\tvar listWidget =\r\n\t\t// |\t\t\t\tnew declare([EdgeToEdgeStoreList, FilteredListMixin])(\r\n\t\t// |\t\t\t\t\t{placeHolder: 'Search', store: myStore, \"filteredList\"});\r\n\t\t// |\t\t\tlistWidget.startup();\r\n\t\t// |\t\t});\r\n\t\t// |\t});\r\n\t\t// |\t...\r\n\t\t// |\t<div id=\"view\" data-dojo-type=\"dojox/mobile/View\">\r\n\t\t// |\t\t<h1 data-dojo-type=\"dojox/mobile/Heading\" data-dojo-props=\"fixed: 'top'\">Some heading</h1>\r\n\t\t// |\t\t<div id=\"filteredList\">\r\n\t\t// |\t</div>\r\n\t\t// example:\r\n\t\t// |\t<!-- Markup use-case: -->\r\n\t\t// |\t<!-- SearchBox and ScrollableView provided by the user. -->\r\n\t\t// |\t<!-- Filtered EdgeToEdgeDataList created in markup. --> \r\n\t\t// |\t<div data-dojo-type=\"dojox/mobile/View\">\r\n\t\t// |\t\t<h1 data-dojo-type=\"dojox/mobile/Heading\" data-dojo-props=\"fixed: 'top'\">Some heading</h1>\r\n\t\t// |\t\t<input id=\"filterBox\" data-dojo-type=\"dojox/mobile/SearchBox\" type=\"search\"\r\n\t\t// |\t\t\tclass=\"mblFilteredEdgeToEdgeListSearchBox\">\t\t\r\n\t\t// |\t\t<div data-dojo-type=\"dojox/mobile/ScrollableView\">\r\n\t\t// |\t\t\t<ul data-dojo-type=\"dojox/mobile/EdgeToEdgeDataList\" \r\n\t\t// |\t\t\t\tdata-dojo-mixins=\"dojox/mobile/FilteredListMixin\"\r\n\t\t// |\t\t\t\tdata-dojo-props=\"filterBoxRef: 'filterBox', placeHolder: 'Search', store: myStore\"></ul>\r\n\t\t// |\t\t</div>\r\n\t\t// |\t</div>\r\n\t\t// example:\r\n\t\t// |\t// Programmatic use-case:\r\n\t\t// |\t// SearchBox and ScrollableView provided by the user.\r\n\t\t// |\t// Filtered EdgeToEdgeStoreList created programmatically.\r\n\t\t// |\trequire([\"dojo/_base/declare\", \"dojo/ready\", \"dijit/registry\", \"dojox/mobile\",\r\n\t\t// |\t\t\t\"dojox/mobile/EdgeToEdgeStoreList\", \"dojox/mobile/FilteredListMixin\",\r\n\t\t// |\t\t\t\"dojox/mobile/ScrollableView\", ...], function(declare, ready, registry, ...){\r\n\t\t// |\t\tready(function(){\r\n\t\t// |\t\t\tvar view = registry.byId(\"scrollableView\");\r\n\t\t// |\t\t\tvar listWidget =\r\n\t\t// |\t\t\t\tnew declare([EdgeToEdgeStoreList, FilteredListMixin])(\r\n\t\t// |\t\t\t\t\t{id:\"list\", filterBoxRef: 'filterBox', placeHolder: 'Search', store: myStore});\r\n\t\t// |\t\t\tlistWidget.placeAt(view.containerNode);\r\n\t\t// |\t\t\tlistWidget.startup();\r\n\t\t// |\t\t});\r\n\t\t// |\t});\r\n\t\t// |\t...\r\n\t\t// |\t<div data-dojo-type=\"dojox/mobile/View\">\r\n\t\t// |\t\t<h1 data-dojo-type=\"dojox/mobile/Heading\" data-dojo-props=\"fixed: 'top'\">Some heading</h1>\r\n\t\t// |\t\t<input id=\"filterBox\" data-dojo-type=\"dojox/mobile/SearchBox\" type=\"search\"\r\n\t\t// |\t\t\tclass=\"mblFilteredEdgeToEdgeListSearchBox\">\t\t\r\n\t\t// |\t\t<div id=\"scrollableView\" data-dojo-type=\"dojox/mobile/ScrollableView\">\r\n\t\t// |\t</div>\r\n\r\n\t\t// Implementation notes:\r\n\t\t// - The mixin requires dojox/mobile/ScrollableView statically. It could be required\r\n\t\t// dynamically, only when needed, that is in the use-case when the mixin creates the \r\n\t\t// ScrollableView by itself. But this would create an usability trouble: if the user \r\n\t\t// would want to get the instance of ScrollableView in a dojo/ready (say, for configuring\r\n\t\t// it), he would need to require it upfront, to cope with the case of asynchronous \r\n\t\t// loading. Thus, requiring it statically has been preferred, because it avoids this\r\n\t\t// constraint on user's side and it is not a serious overhead, because in practice \r\n\t\t// the filtering is used for long lists, for which a ScrollableView is anyway likely \r\n\t\t// to be used. \r\n\t\t// - Differently, the loading of the store/data modules is performed dynamically,\r\n\t\t// in order to avoid their overhead when they are not actually needed.\r\n\t\t\r\n\t\t// filterBoxRef: String\r\n\t\t//\t\tThe reference for the search box allowing to enter the filtering criteria.\r\n\t\t//\t\tOnly used at construction time:\r\n\t\t//\t\t- If unspecified, the mixin creates a dojox/mobile/SearchBox and \r\n\t\t//\t\ta dojox/mobile/ScrollableView. The list is placed inside the ScrollableView and the\r\n\t\t//\t\tSearchBox, wrapped in a DIV, is placed on top of the ScrollableView.\r\n\t\t//\t\t- If the string is the id of a widget which is an instance of dojox/mobile/SearchBox \r\n\t\t//\t\tor a subclass, the mixin uses this SearchBox for filtering the list.\r\n\t\t//\t\t- If the id is specified but does not reference a dojox/mobile/SearchBox or \r\n\t\t//\t\tsubclass, an error is thrown. \r\n\t\tfilterBoxRef: null,\r\n\t\t\r\n\t\t// placeHolder: String\r\n\t\t//\t\tDefines a hint to help users fill out the input field (as defined in HTML 5) of the \r\n\t\t//\t\tdojox/mobile/SearchBox. This should only contain plain text\t(no HTML markup).\r\n\t\t//\t\tWhen the SearchBox is provided by the user (not created by this mixin), its placeHolder\r\n\t\t//\t\tproperty takes precedence.\r\n\t\tplaceHolder: \"\",\r\n\t\t\r\n\t\t// filterBoxVisible: Boolean\r\n\t\t//\t\tA flag which allows to show or hide the dojox/mobile/SearchBox associated with\r\n\t\t//\t\tthe list.\r\n\t\tfilterBoxVisible: true,\r\n\t\t\r\n\t\t// _filterBox: [private] dojox/mobile/SearchBox\r\n\t\t//\t\tThe instance of dojox/mobile/SearchBox used by this mixin. \r\n\t\t//\t\tStored for getFilterBox().\r\n\t\t_filterBox: null,\r\n\t\t\r\n\t\t// _createdFilterBox: [private] dojox/mobile/SearchBox\r\n\t\t//\t\tThe instance of dojox/mobile/SearchBox created by this mixin, or null if none\r\n\t\t//\t\thas been created. Stored for being able to destroy it together with the list widget.\r\n\t\t_createdFilterBox: null,\r\n\t\t\r\n\t\t// _createdScrollableView: [private] dojox/mobile/ScrollableView\r\n\t\t//\t\tThe instance of dojox/mobile/ScrollableView created by this mixin, if any. \r\n\t\t//\t\tStored for getScrollableView() and for being able to destroy it together \r\n\t\t//\t\twith the list widget.\r\n\t\t_createdScrollableView: null,\r\n\t\t\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){ return; }\r\n\t\t\t\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t\r\n\t\t\tif(this.filterBoxRef){\r\n\t\t\t\t// Case #1: search box provided by the user\r\n\t\t\t\tthis._filterBox = registry.byId(this.filterBoxRef);\r\n\t\t\t\t\r\n\t\t\t\tif (this._filterBox && this._filterBox.isInstanceOf(SearchBox)){ \r\n\t\t\t\t\t// If the list is backed by a dojox/mobile/_StoreListMixin, it\r\n\t\t\t\t\t// has a labelProperty which is given precedence. \r\n\t\t\t\t\tthis._filterBox.set(\"searchAttr\", this.labelProperty ? this.labelProperty : \"label\");\r\n\t\t\t\t\tif(!this._filterBox.placeHolder){\r\n\t\t\t\t\t\t// Give precedence to the placeHolder that may be specified on the provided SearchBox\r\n\t\t\t\t\t\tthis._filterBox.set(\"placeHolder\", this.placeHolder);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._filterBox.on(\"search\", lang.hitch(this, \"_onFilter\"));\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error(\"Cannot find a widget of type dojox/mobile/SearchBox or subclass \" +\r\n\t\t\t\t\t\t\"at the specified filterBoxRef: \" + this.filterBoxRef);\r\n\t\t\t\t}\r\n\t\t\t}else{ \r\n\t\t\t\t// Case #2: automatic mode. The mixin creates a SearchBox and a ScrollableView.\r\n\t\t\t\tthis._filterBox =\r\n\t\t\t\t\tnew SearchBox({\r\n\t\t\t\t\t\t// If the list is backed by a dojox/mobile/_StoreListMixin, it\r\n\t\t\t\t\t\t// has a labelProperty which is given precedence. \r\n\t\t\t\t\t\tsearchAttr: this.labelProperty ? this.labelProperty : \"label\",\r\n\t\t\t\t\t\tignoreCase: true,\r\n\t\t\t\t\t\tincremental: true,\r\n\t\t\t\t\t\tonSearch: lang.hitch(this, \"_onFilter\"),\r\n\t\t\t\t\t\tselectOnClick: true,\r\n\t\t\t\t\t\tplaceHolder: this.placeHolder\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t// Store them to be able to destroy them together with the list (see destroy()).\r\n\t\t\t\tthis._createdFilterBox = this._filterBox; \r\n\t\t\t\tthis._createdScrollableView = new ScrollableView();\r\n\t\t\t\t\r\n\t\t\t\tvar currentDomNode = this.domNode,\r\n\t\t\t\t\tlistParentNode = this.domNode.parentNode;\r\n\t\t\t\tlistParentNode.replaceChild(this._createdScrollableView.domNode, this.domNode);\r\n\t\t\t\t// Put the list inside the ScrollableView:\r\n\t\t\t\tdomConstruct.place(currentDomNode, this._createdScrollableView.containerNode);\r\n\t\t\t\t\r\n\t\t\t\tvar searchBoxParentDiv = domConstruct.create(\"div\");\r\n\t\t\t\t// Put the SearchBox as child of the DIV \r\n\t\t\t\tdomConstruct.place(this._createdFilterBox.domNode, searchBoxParentDiv);\r\n\t\t\t\t// Put the DIV as sibling of the ScrollableView: \r\n\t\t\t\tdomConstruct.place(searchBoxParentDiv, this._createdScrollableView.domNode, \"before\");\r\n\t\t\t\t\t\r\n\t\t\t\tif(this.filterBoxClass){\r\n\t\t\t\t\t// Only adding the class when the mixin creates the SearchBox by itself.\r\n\t\t\t\t\tdomClass.add(searchBoxParentDiv, this.filterBoxClass);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tthis._createdFilterBox.startup();\r\n\t\t\t\tthis._createdScrollableView.startup();\r\n\t\t\t\tthis._createdScrollableView.resize();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Do not use this.getScrollableView() here, because this doesn't cover the\r\n\t\t\t// use-case when the scrollable is not created by this mixin.\r\n\t\t\tvar sv = viewRegistry.getEnclosingScrollable(this.domNode);\r\n\t\t\tif(sv){\r\n\t\t\t\tthis.connect(sv, \"onFlickAnimationEnd\", lang.hitch(this, function(){\r\n\t\t\t\t\tif(!this._filterBox.focusNode.value){ // if search criteria is empty\r\n\t\t\t\t\t\t// store the scroll position such that we can reset the \r\n\t\t\t\t\t\t// initial scroll when the user goes back to the unfiltered\r\n\t\t\t\t\t\t// list (as done by some native mobile apps). \r\n\t\t\t\t\t\tthis._previousUnfilteredScrollPos = sv.getPos();\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!this.store){\r\n\t\t\t\tthis._createStore(this._initStore);\r\n\t\t\t}else{\r\n\t\t\t\tthis._initStore();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_setFilterBoxVisibleAttr: function(/* Boolean */ visible){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis._set(\"filterBoxVisible\", visible);\r\n\t\t\tif (this._filterBox && this._filterBox.domNode){\r\n\t\t\t\tthis._filterBox.domNode.style.display = visible ? \"\" : \"none\";\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_setPlaceHolderAttr: function(/* String */ placeHolder){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis._set(\"placeHolder\", placeHolder);\r\n\t\t\tif (this._filterBox){ // allow update after construction time\r\n\t\t\t\tthis._filterBox.set(\"placeHolder\", placeHolder);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tgetFilterBox: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the dojox/mobile/SearchBox widget used for entering the filtering criteria.\r\n\t\t\t//\t\tIf an instance has been referenced at construction time using the property filterBoxRef,\r\n\t\t\t//\t\tthis instance is returned. Otherwise, returns the instance created by the mixin.\r\n\t\t\t//\t\tThis function allows the user to get the instance of SearchBox in order to customize\r\n\t\t\t//\t\tits parameters. \r\n\t\t\treturn this._filterBox;\r\n\t\t},\r\n\t\t\r\n\t\tgetScrollableView: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the instance of dojox/mobile/ScrollableView created by this mixin,\r\n\t\t\t//\t\tor null if none has been created. The mixin creates a ScrollableView if and\r\n\t\t\t//\t\tonly if the property filterBoxRef is unspecified.\r\n\t\t\t//\t\tThis function allows the user to get the instance of ScrollableView in order to\r\n\t\t\t//\t\tcustomize its parameters.\r\n\t\t\treturn this._createdScrollableView;\r\n\t\t},\r\n\t\t\r\n\t\t_initStore: function(){\r\n\t\t\t// description:\r\n\t\t\t//\t\tInitializes the store.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar store = this.store;\r\n\t\t\tif(!store.get || !store.query){ // if old store (dojo/data)\r\n\t\t\t\t// Detect the old dojo/data stores (since the stores don't actually extend a common\r\n\t\t\t\t// base class, there is no direct way to do this check. Hence we rely on the presence \r\n\t\t\t\t// or absence of these two properties of the new stores which are required for the\r\n\t\t\t\t// list widgets).\r\n\t\t\t\t// TODO: to be removed when removing the support for lists backed by the old dojo/data \r\n\t\t\t\t// (EdgeToEdgeDataStore, RoundRectDataList).\r\n\t\t\t\trequire([\"dojo/store/DataStore\"], lang.hitch(this, function(DataStore){\r\n\t\t\t\t\t// wrap the dojo/data store into a dojo/store\r\n\t\t\t\t\tstore = new DataStore({store: store});\t\r\n\t\t\t\t\tthis._filterBox.store = store;\t\t\t\t\r\n\t\t\t\t}));\r\n\t\t\t}else{\r\n\t\t\t\tthis._filterBox.store = store;\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t_createStore: function(initStoreFunction/* Function */){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates the store.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method is used when the list is not backed by a store. In this case,\r\n\t\t\t//\t\ta store is created and filled with items containing the text of the list items.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\trequire([\"./_StoreListMixin\", \"dojo/store/Memory\"], lang.hitch(this, function(module, Memory){\r\n\t\t\t\tdeclare.safeMixin(this, new module());\r\n\t\t\t\t\t\r\n\t\t\t\tthis.append = true; // to avoid that _StoreListMixin.generateList destroys the items\r\n\t\t\t\t\t\r\n\t\t\t\t// _StoreListMixin.createListItem creates a new item. Instead, we want to reuse the\r\n\t\t\t\t// original item instance, hence:\r\n\t\t\t\tthis.createListItem = function(/*Object*/item){\r\n\t\t\t\t\treturn item.listItem;\r\n\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\taspect.before(this, \"generateList\", function(){\r\n\t\t\t\t\t// remove all children\r\n\t\t\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\t\t\tchild.domNode.parentNode.removeChild(child.domNode);\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t// Collect the text from the list items\r\n\t\t\t\tvar items = [];\r\n\t\t\t\tvar text = null;\r\n\t\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\t\ttext = child.label ? child.label : (child.domNode.innerText || child.domNode.textContent);\r\n\t\t\t\t\titems.push({label: text, listItem: child});\r\n\t\t\t\t});\r\n\t\t\t\tvar listData = {items: items};\r\n\t\t\t\t// store for the dojox/mobile/EdgeToEdgeStoreList\r\n\t\t\t\tvar store = new Memory({idProperty:\"label\", data: listData});\r\n\t\t\t\tthis.store = null;\r\n\t\t\t\tthis.query = {};\r\n\t\t\t\tthis.setStore(store, this.query, this.queryOptions);\r\n\t\t\t\tlang.hitch(this, initStoreFunction)();\r\n\t\t\t}));\r\n\t\t},\r\n\t\t\r\n\t\t_onFilter: function(results, query, options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal handler for filtering events.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(this.onFilter(results, query, options) === false){ return; } // user's filtering action\r\n\t\t\tthis.setQuery(query);\r\n\t\t\t\r\n\t\t\t// Do not use this.getScrollableView() because this doesn't cover the\r\n\t\t\t// use-case when the scrollable is not created by this mixin.\r\n\t\t\tvar sv = viewRegistry.getEnclosingScrollable(this.domNode);\r\n\t\t\tif(sv){\r\n\t\t\t\t// When the user goes back to the unfiltered list, restore the previous \r\n\t\t\t\t// scroll position stored for unfiltered list (as done by some native mobile apps).\r\n\t\t\t\t// Otherwise, reset the scroll position, to ensure that the new subset of \r\n\t\t\t\t// items is visible. \r\n\t\t\t\tsv.scrollTo(this._filterBox.focusNode.value ?\r\n\t\t\t\t\t{x:0, y:0} :\r\n\t\t\t\t\tthis._previousUnfilteredScrollPos || {x:0, y:0});\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tonFilter: function(/*===== results, query, options =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser-defined function to handle filter actions. If the function returns false,\r\n\t\t\t//\t\tthe filtering is cancelled.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\t\t\r\n\t\tdestroy: function(/*Boolean?*/ preserveDom){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroys the widget. If the list has created dojox/mobile/SearchBox \r\n\t\t\t//\t\tor dojox/mobile/ScrollableView widgets, these widgets are also destroyed.\r\n\t\t\t// preserveDom: Boolean\r\n\t\t\t//\t\tIf true, this method will leave the original DOM structure alone.\r\n\t\t\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t\r\n\t\t\t// Only destroy widgets created (thus, owned) by this mixin (if any).\r\n\t\t\tif(this._createdFilterBox){ \r\n\t\t\t\tthis._createdFilterBox.destroy(preserveDom);\r\n\t\t\t\tthis._createdFilterBox = null;\r\n\t\t\t}\r\n\t\t\tif(this._createdScrollableView){ \r\n\t\t\t\tthis._createdScrollableView.destroy(preserveDom);\r\n\t\t\t\tthis._createdScrollableView = null;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}