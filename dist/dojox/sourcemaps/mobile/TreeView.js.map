{"version":3,"sources":["mobile/TreeView.js"],"names":["define","kernel","array","declare","lang","win","domConstruct","registry","Heading","ListItem","ProgressIndicator","RoundRectList","ScrollableView","viewRegistry","has","BidiTreeView","experimental","TreeView","postCreate","this","_load","inherited","arguments","_customizeListItem","listItemArgs","model","getRoot","hitch","item","scope","list","label","rootLabel","moveTo","onClick","handleClick","listitem","addChild","li","newViewId","newItemIdAttr","replace","byId","byNode","domNode","transitionTo","prog","getInstance","body","appendChild","start","getChildren","items","forEach","i","store","transition","mayHaveChildren","heading","back","getEnclosingView","id","dir","isLeftToRight","newView","create","startup","stop"],"mappings":";;;;;;;AAAAA,QACC,oBACA,mBACA,qBACA,kBACA,oBACA,qBACA,iBACA,YACA,aACA,sBACA,kBACA,mBACA,iBACA,WACA,iDACE,SAASC,EAAQC,EAAOC,EAASC,EAAMC,EAAKC,EAAcC,EAAUC,EAASC,EAAUC,EAAmBC,EAAeC,EAAgBC,EAAcC,EAAKC,GAK9Jd,EAAOe,aAAa,yBAEpB,IAAIC,EAAWd,EAAQW,EAAI,aAAe,+BAAiC,wBAAyBF,GAQnGM,WAAY,WACXC,KAAKC,QACLD,KAAKE,UAAUC,YAGhBC,mBAAoB,SAASC,KAG7BJ,MAAO,WACND,KAAKM,MAAMC,QACVtB,EAAKuB,MAAMR,KAAM,SAASS,GACzB,IAAIC,EAAQV,KACRW,EAAO,IAAInB,EAEXa,GACHO,MAAOF,EAAMJ,MAAMO,UACnBC,OAAQ,IACRC,QAAS,WAAYL,EAAMM,YAAYhB,OACvCS,KAAMA,GAEPT,KAAKI,mBAAmBC,GACxB,IAAIY,EAAW,IAAI3B,EAASe,GAC5BM,EAAKO,SAASD,GACdjB,KAAKkB,SAASP,OAKjBK,YAAa,SAASG,GAKrB,IAAIC,EAAY,QAOhB,GANGD,EAAGV,KAAKT,KAAKM,MAAMe,eACrBD,GAAaD,EAAGV,KAAKT,KAAKM,MAAMe,eAEhCD,GAAa,WAEdA,EAAYA,EAAUE,QAAQ,IAAK,KAChClC,EAASmC,KAAKH,GAChBhC,EAASoC,OAAOL,EAAGM,SAASC,aAAaN,OAD1C,CAKA,IAAIO,EAAOpC,EAAkBqC,cAC7B1C,EAAI2C,OAAOC,YAAYH,EAAKF,SAC5BE,EAAKI,QAEL/B,KAAKM,MAAM0B,YAAYb,EAAGV,KACzBxB,EAAKuB,MAAMR,KAAM,SAASiC,GACzB,IAAIvB,EAAQV,KACRW,EAAO,IAAInB,EACfT,EAAMmD,QAAQD,EAAO,SAASxB,EAAM0B,GACnC,IAAI9B,GACHI,KAAMA,EACNG,MAAOH,EAAKC,EAAMJ,MAAM8B,MAAMxB,OAC9ByB,WAAY,SAEb3B,EAAMN,mBAAmBC,GACtBK,EAAMJ,MAAMgC,gBAAgB7B,KAC9BJ,EAAaS,OAAS,IACtBT,EAAaU,QAAU,WAAYL,EAAMM,YAAYhB,QAEtD,IAAIiB,EAAW,IAAI3B,EAASe,GAC5BM,EAAKO,SAASD,KAGf,IAAIsB,EAAU,IAAIlD,GACjBuB,MAAO,eACP4B,KAAM,OACN1B,OAAQpB,EAAa+C,iBAAiBtB,EAAGM,SAASiB,GAClDC,IAAK3C,KAAK4C,gBAAkB,MAAQ,QAGjCC,EAAUpD,GACbiD,GAAItB,EACJuB,IAAK3C,KAAK4C,gBAAkB,MAAQ,OAClCzD,EAAa2D,OAAO,MAAO,KAAM5D,EAAI2C,SACxCgB,EAAQ3B,SAASqB,GACjBM,EAAQ3B,SAASP,GACjBkC,EAAQE,UACRpB,EAAKqB,OACL5D,EAASoC,OAAOL,EAAGM,SAASC,aAAamB,EAAQH,WAMrD,OAAO/C,EAAI,aAAeX,EAAQ,yBAA0Bc,EAAUF,IAAiBE","file":"../../mobile/TreeView.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/registry\",\r\n\t\"./Heading\",\r\n\t\"./ListItem\",\r\n\t\"./ProgressIndicator\",\r\n\t\"./RoundRectList\",\r\n\t\"./ScrollableView\",\r\n\t\"./viewRegistry\",\r\n\t\"dojo/has\",\r\n\t\"dojo/has!dojo-bidi?dojox/mobile/bidi/TreeView\"\r\n], function(kernel, array, declare, lang, win, domConstruct, registry, Heading, ListItem, ProgressIndicator, RoundRectList, ScrollableView, viewRegistry, has, BidiTreeView){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/TreeView\r\n\r\n\tkernel.experimental(\"dojox.mobile.TreeView\");\r\n\r\n\tvar TreeView = declare(has(\"dojo-bidi\") ? \"dojox.mobile.NonBidiTreeView\" : \"dojox.mobile.TreeView\", ScrollableView, {\r\n\t\t// summary:\r\n\t\t//\t\tA scrollable view with tree-style navigation.\r\n\t\t// description:\r\n\t\t//\t\tThis widget can be connected to a dojox/data/FileStore as a\r\n\t\t//\t\tquick directory browser. You may use it when implementing the\r\n\t\t//\t\tMaster-Detail pattern.\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis._load();\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\t\t\r\n\t\t_customizeListItem: function(listItemArgs){\r\n\t\t},\r\n\r\n\t\t_load: function(){\r\n\t\t\tthis.model.getRoot(\r\n\t\t\t\tlang.hitch(this, function(item){\r\n\t\t\t\t\tvar scope = this;\r\n\t\t\t\t\tvar list = new RoundRectList();\r\n\t\t\t\t\tvar node = {};\r\n\t\t\t\t\tvar listItemArgs = {\r\n\t\t\t\t\t\tlabel: scope.model.rootLabel,\r\n\t\t\t\t\t\tmoveTo: '#',\r\n\t\t\t\t\t\tonClick: function(){ scope.handleClick(this); },\r\n\t\t\t\t\t\titem: item\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis._customizeListItem(listItemArgs);\r\n\t\t\t\t\tvar listitem = new ListItem(listItemArgs);\r\n\t\t\t\t\tlist.addChild(listitem);\r\n\t\t\t\t\tthis.addChild(list);\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t},\r\n\r\n\t\thandleClick: function(li){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the user clicks a tree item.\r\n\t\t\t// li: dojox/mobile/ListItem\r\n\t\t\t//\t\tThe item that the user clicked.\r\n\t\t\tvar newViewId = \"view_\";\r\n\t\t\tif(li.item[this.model.newItemIdAttr]){\r\n\t\t\t\tnewViewId += li.item[this.model.newItemIdAttr];\r\n\t\t\t}else{\r\n\t\t\t\tnewViewId += \"rootView\";\r\n\t\t\t}\r\n\t\t\tnewViewId = newViewId.replace('/', '_');\r\n\t\t\tif(registry.byId(newViewId)){  // view already exists, just transition to it\r\n\t\t\t\tregistry.byNode(li.domNode).transitionTo(newViewId);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar prog = ProgressIndicator.getInstance();\r\n\t\t\twin.body().appendChild(prog.domNode);\r\n\t\t\tprog.start();\r\n\r\n\t\t\tthis.model.getChildren(li.item,\r\n\t\t\t\tlang.hitch(this, function(items){\r\n\t\t\t\t\tvar scope = this;\r\n\t\t\t\t\tvar list = new RoundRectList();\r\n\t\t\t\t\tarray.forEach(items, function(item, i){\r\n\t\t\t\t\t\tvar listItemArgs = {\r\n\t\t\t\t\t\t\titem: item,\r\n\t\t\t\t\t\t\tlabel: item[scope.model.store.label],\r\n\t\t\t\t\t\t\ttransition: \"slide\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tscope._customizeListItem(listItemArgs);\r\n\t\t\t\t\t\tif(scope.model.mayHaveChildren(item)){\r\n\t\t\t\t\t\t\tlistItemArgs.moveTo = '#';\r\n\t\t\t\t\t\t\tlistItemArgs.onClick = function(){ scope.handleClick(this); };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar listitem = new ListItem(listItemArgs);\r\n\t\t\t\t\t\tlist.addChild(listitem);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tvar heading = new Heading({\r\n\t\t\t\t\t\tlabel: \"Dynamic View\",\r\n\t\t\t\t\t\tback: \"Back\",\r\n\t\t\t\t\t\tmoveTo: viewRegistry.getEnclosingView(li.domNode).id,\r\n\t\t\t\t\t\tdir: this.isLeftToRight() ? \"ltr\" : \"rtl\"\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tvar newView = ScrollableView({\r\n\t\t\t\t\t\tid: newViewId,\r\n\t\t\t\t\t\tdir: this.isLeftToRight() ? \"ltr\" : \"rtl\"\r\n\t\t\t\t\t}, domConstruct.create(\"div\", null, win.body()));\r\n\t\t\t\t\tnewView.addChild(heading);\r\n\t\t\t\t\tnewView.addChild(list);\r\n\t\t\t\t\tnewView.startup();\r\n\t\t\t\t\tprog.stop();\r\n\t\t\t\t\tregistry.byNode(li.domNode).transitionTo(newView.id);\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t}\r\n\t});\r\n\t\r\n\treturn has(\"dojo-bidi\") ? declare(\"dojox.mobile.TreeView\", [TreeView, BidiTreeView]) : TreeView;\t\t\r\n});\r\n"]}