{"version":3,"sources":["mobile/IconMenuItem.js"],"names":["define","declare","lang","domClass","domConstruct","domAttr","iconUtils","ItemBase","closeOnAction","tag","baseClass","selColor","_selStartMethod","_selEndMethod","buildRendering","this","domNode","srcNodeRef","create","set","inherited","arguments","selected","add","label","trim","innerHTML","a","anchorNode","containerNode","className","role","tbl","cell","iconParentNode","insertRow","insertCell","iconNode","labelNode","refNode","position","appendChild","startup","_started","connect","_isOnLine","undefined","_pendingIcon","icon","_onClick","e","type","keyCode","onClick","p","getParent","hide","defaultClickAction","_setSelectedAttr","toggle"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,iBACA,qBACA,gBACA,cACA,eACE,SAASC,EAASC,EAAMC,EAAUC,EAAcC,EAASC,EAAWC,GAItE,OAAON,EAAQ,4BAA6BM,GAY3CC,eAAe,EAIfC,IAAK,KAILC,UAAW,kBACXC,SAAU,qBACVC,gBAAiB,QACjBC,cAAe,QAEfC,eAAgB,WACfC,KAAKC,QAAUD,KAAKE,YAAcb,EAAac,OAAOH,KAAKN,KAC3DJ,EAAQc,IAAIJ,KAAKC,QAAS,OAAQ,oBAClCX,EAAQc,IAAIJ,KAAKC,QAAS,eAAgB,SAC1CD,KAAKK,UAAUC,WACZN,KAAKO,UACPnB,EAASoB,IAAIR,KAAKC,QAASD,KAAKJ,UAG9BI,KAAKE,aACHF,KAAKS,QACRT,KAAKS,MAAQtB,EAAKuB,KAAKV,KAAKE,WAAWS,YAExCX,KAAKE,WAAWS,UAAY,IAG7B,IAAIC,EAAIZ,KAAKa,WAAab,KAAKc,cAAgBzB,EAAac,OAAO,KAClEY,UAAW,wBACXC,KAAM,iBAEHC,EAAM5B,EAAac,OAAO,SAC7BY,UAAW,uBACXC,KAAM,gBACJJ,GACCM,EAAOlB,KAAKmB,eAAiBF,EAAIG,WAAW,GAAGC,YAAY,GAC/DrB,KAAKsB,SAAWjC,EAAac,OAAO,OACnCY,UAAW,uBACTG,GACHlB,KAAKuB,UAAYvB,KAAKwB,QAAUnC,EAAac,OAAO,OACnDY,UAAW,wBACTG,GACHlB,KAAKyB,SAAW,SAChBzB,KAAKC,QAAQyB,YAAYd,IAG1Be,QAAS,WACL3B,KAAK4B,WAER5B,KAAK6B,QAAQ7B,KAAKC,QAAS,YAAa,YAExCD,KAAKK,UAAUC,WACXN,KAAK8B,YACR9B,KAAK8B,WAAY,EAGjB9B,KAAKI,IAAI,YAA8B2B,IAAtB/B,KAAKgC,aAA6BhC,KAAKgC,aAAehC,KAAKiC,aAErEjC,KAAKgC,gBAIdE,SAAU,SAASC,GAKlB,KAAGA,GAAgB,YAAXA,EAAEC,MAAoC,KAAdD,EAAEE,WACX,IAApBrC,KAAKsC,QAAQH,GAAhB,CACA,GAAGnC,KAAKP,cAAc,CACrB,IAAI8C,EAAIvC,KAAKwC,YACVD,GAAKA,EAAEE,MACTF,EAAEE,OAGJzC,KAAK0C,mBAAmBP,KAGzBG,QAAS,aAOTK,iBAAkB,SAAoBpC,GAKrCP,KAAKK,UAAUC,WACflB,EAASwD,OAAO5C,KAAKC,QAASD,KAAKJ,SAAUW,GAC7CjB,EAAQc,IAAIJ,KAAKC,QAAS,eAAgBM,EAAW,OAAS","file":"../../mobile/IconMenuItem.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-attr\",\r\n\t\"./iconUtils\",\r\n\t\"./_ItemBase\"\r\n], function(declare, lang, domClass, domConstruct, domAttr, iconUtils, ItemBase){\r\n\t// module:\r\n\t//\t\tdojox/mobile/IconMenuItem\r\n\r\n\treturn declare(\"dojox.mobile.IconMenuItem\", ItemBase, { \r\n\t\t// summary:\r\n\t\t//\t\tAn item of IconMenu.\r\n\t\t// description:\r\n\t\t//\t\tIconMenuItem represents a menu item of dojox/mobile/MenuItem. \r\n\t\t//\t\tThis widget inherits from dojox/mobile/_ItemBase. Its basic usage is \r\n\t\t//\t\tsimilar to other subclasses such as dojox/mobile/ListItem.\r\n\r\n\t\t// closeOnAction: Boolean\r\n\t\t//\t\tIf true, the internal handler of click events calls the hide() method \r\n\t\t//\t\tof the parent widget, which is typically a dojox/mobile/SimpleDialog.\r\n\t\t//\t\tThe default value is false.\r\n\t\tcloseOnAction: false,\r\n\r\n\t\t// tag: String\r\n\t\t//\t\tThe name of the HTML tag to create as domNode.\r\n\t\ttag: \"li\",\r\n\r\n\t\t/* internal properties */\r\n\t\t// Note these are overrides for similar properties defined in _ItemBase.\r\n\t\tbaseClass: \"mblIconMenuItem\",\r\n\t\tselColor: \"mblIconMenuItemSel\",\r\n\t\t_selStartMethod: \"touch\",\r\n\t\t_selEndMethod: \"touch\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.domNode = this.srcNodeRef || domConstruct.create(this.tag);\r\n\t\t\tdomAttr.set(this.domNode, \"role\", \"menuitemcheckbox\");\r\n\t\t\tdomAttr.set(this.domNode, \"aria-checked\", \"false\");\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.selected){\r\n\t\t\t\tdomClass.add(this.domNode, this.selColor);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.srcNodeRef){\r\n\t\t\t\tif(!this.label){\r\n\t\t\t\t\tthis.label = lang.trim(this.srcNodeRef.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\tthis.srcNodeRef.innerHTML = \"\";\r\n\t\t\t}\r\n\r\n\t\t\tvar a = this.anchorNode = this.containerNode = domConstruct.create(\"a\", {\r\n\t\t\t\tclassName: \"mblIconMenuItemAnchor\",\r\n\t\t\t\trole: \"presentation\"\r\n\t\t\t});\r\n\t\t\tvar tbl = domConstruct.create(\"table\", {\r\n\t\t\t\tclassName: \"mblIconMenuItemTable\",\r\n\t\t\t\trole: \"presentation\"\r\n\t\t\t}, a);\r\n\t\t\tvar cell = this.iconParentNode = tbl.insertRow(-1).insertCell(-1);\r\n\t\t\tthis.iconNode = domConstruct.create(\"div\", {\r\n\t\t\t\tclassName: \"mblIconMenuItemIcon\"\r\n\t\t\t}, cell);\r\n\t\t\tthis.labelNode = this.refNode = domConstruct.create(\"div\", {\r\n\t\t\t\tclassName: \"mblIconMenuItemLabel\"\r\n\t\t\t}, cell);\r\n\t\t\tthis.position = \"before\";\r\n\t\t\tthis.domNode.appendChild(a);\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){ return; }\r\n\r\n\t\t\tthis.connect(this.domNode, \"onkeydown\", \"_onClick\"); // for desktop browsers\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this._isOnLine){\r\n\t\t\t\tthis._isOnLine = true;\r\n\t\t\t\t// retry applying the attribute for which the custom setter delays the actual \r\n\t\t\t\t// work until _isOnLine is true. \r\n\t\t\t\tthis.set(\"icon\", this._pendingIcon !== undefined ? this._pendingIcon : this.icon);\r\n\t\t\t\t// Not needed anymore (this code executes only once per life cycle):\r\n\t\t\t\tdelete this._pendingIcon; \r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onClick: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal handler for click events.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(e && e.type === \"keydown\" && e.keyCode !== 13){ return; }\r\n\t\t\tif(this.onClick(e) === false){ return; } // user's click action\r\n\t\t\tif(this.closeOnAction){\r\n\t\t\t\tvar p = this.getParent(); // maybe SimpleDialog\r\n\t\t\t\tif(p && p.hide){\r\n\t\t\t\t\tp.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.defaultClickAction(e);\r\n\t\t},\r\n\r\n\t\tonClick: function(/*Event*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser-defined function to handle clicks.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\t_setSelectedAttr: function(/*Boolean*/selected){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMakes this widget in the selected or unselected state.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdomClass.toggle(this.domNode, this.selColor, selected);\r\n\t\t\tdomAttr.set(this.domNode, \"aria-checked\", selected ? \"true\" : \"false\");\r\n\t\t}\r\n\t});\r\n});\r\n"]}