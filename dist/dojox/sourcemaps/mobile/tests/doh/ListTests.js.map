{"version":3,"sources":["mobile/tests/doh/ListTests.js"],"names":["require","domConst","ready","registry","runner","EdgeToEdgeList","RoundRectList","ListItem","ITEM_LABEL","ListObject","_createListObjectDeclaratively","id","byId","_createListObjectProgrammatically","placeHolderId","widget","select","assertNotEqual","item","label","checked","addChild","place","domNode","startup","_createListObjectProgrammaticallyWithSourceNodeReference","list","_assertCorrectListObject","children","getChildren","length","assertEqual","toString","assertTrue","IsEdgeToEdgeList","register","list1","list2","list3","performTransition","run"],"mappings":";;;;;;;AAAAA,SACC,qBACA,aACA,iBACA,aACA,8BACA,6BACA,wBACA,eACA,oBACA,sBACA,uBACE,SAASC,EAAUC,EAAOC,EAAUC,EAAQC,EAAgBC,EAAeC,GAE7E,IAAIC,EAAYC,EAYhB,SAASC,EAA+BC,GACvC,OAAOR,EAASS,KAAKD,GAGtB,SAASE,EAAkCC,GAC1C,IAAIC,EAAS,IAAIN,GAAYO,OAAO,WACpCZ,EAAOa,eAAe,KAAMF,GAC5B,IAAIG,EAAO,IAAIX,GAAUY,MAAMX,EAAa,KAAMY,SAAQ,IAM1D,OALAL,EAAOM,SAASH,GAChBA,EAAO,IAAIX,GAAUY,MAAMX,EAAa,OACxCO,EAAOM,SAASH,GAChBjB,EAASqB,MAAMP,EAAOQ,QAAST,EAAe,WAC9CC,EAAOS,UACAT,EAGR,SAASU,EAAyDd,GACjE,IAAIe,EAAO,IAAIjB,GAAYO,OAAO,UAAWL,GACzCO,EAAO,IAAIX,GAAUY,MAAMX,EAAa,KAAMY,SAAQ,IAK1D,OAJAM,EAAKL,SAASH,GACdA,EAAO,IAAIX,GAAUY,MAAMX,EAAa,OACxCkB,EAAKL,SAASH,GACdQ,EAAKF,UACEE,EAGR,SAASC,EAAyBD,GACjCtB,EAAOa,eAAe,KAAMS,GAC5B,IAAIE,EAAWF,EAAKG,cAChBC,EAASF,EAASE,OACtB1B,EAAO2B,YAAY,EAAGD,EAAQJ,EAAKM,YACnC5B,EAAO6B,WAAWL,EAAS,GAAGR,QAASQ,EAAS,GAAGI,YAzCjDE,kBACF1B,EAAa,eACbC,EAAaJ,IAGbG,EAAa,aACbC,EAAaH,GA2CdJ,EAAM,WACLE,EAAO+B,SAAS,6CACf,WACC,IAAIC,EAAQ1B,EAA+B,eACvC2B,EAAQxB,EAAkC,eAC1CyB,EAAQb,EAAyD,eAErEE,EAAyBS,GACzBT,EAAyBU,GACzBV,EAAyBW,IAE1B,WACC,IAAIF,EAAQ1B,EAA+B,eACvC2B,EAAQxB,EAAkC,eAC1CyB,EAAQb,EAAyD,eAlB3DtB,EAASS,KAAK,SACpB2B,kBAAkB,QAAS,EAAG,QAqBlCZ,EAAyBS,GACzBT,EAAyBU,GACzBV,EAAyBW,MAG3BlC,EAAOoC","file":"../../../../mobile/tests/doh/ListTests.js","sourcesContent":["require([\r\n\t\"dojo/dom-construct\", // dojo.place\r\n\t\"dojo/ready\", // dojo.ready\r\n\t\"dijit/registry\",  // dijit.byId\r\n\t\"doh/runner\",\t//doh functions\r\n\t\"dojox/mobile/EdgeToEdgeList\",\r\n\t\"dojox/mobile/RoundRectList\",\r\n\t\"dojox/mobile/ListItem\",\r\n\t\"dojox/mobile\",\t\t\t\t// This is a mobile app.\r\n\t\"dojox/mobile/View\",\t\t// This mobile app uses mobile view\r\n\t\"dojox/mobile/compat\",\t\t// This mobile app supports running on desktop browsers\r\n\t\"dojox/mobile/parser\"\t\t// This mobile app uses declarative programming with fast mobile parser\r\n], function(domConst, ready, registry, runner, EdgeToEdgeList, RoundRectList, ListItem){\r\n\r\n\tvar ITEM_LABEL, ListObject, testName;\r\n\t\r\n\tif(IsEdgeToEdgeList){\r\n\t\tITEM_LABEL = \"Edge To Edge\";\r\n\t\tListObject = EdgeToEdgeList;\r\n\t\ttestName = \"dojox.mobile.test.doh.EdgeToEdgeListTests\";\r\n\t}else{\r\n\t\tITEM_LABEL = \"Round Rect\";\r\n\t\tListObject = RoundRectList;\r\n\t\ttestName = \"dojox.mobile.test.doh.RoundRectListTests\";\r\n\t}\r\n\r\n\tfunction _createListObjectDeclaratively(id) {\r\n\t\treturn registry.byId(id);\r\n\t};\r\n\t\r\n\tfunction _createListObjectProgrammatically(placeHolderId){\r\n\t\tvar widget = new ListObject({select:\"single\"});\r\n\t\trunner.assertNotEqual(null, widget);\r\n\t\tvar item = new ListItem({label:ITEM_LABEL + \" 1\", checked:true});\r\n\t\twidget.addChild(item);\r\n\t\titem = new ListItem({label:ITEM_LABEL + \" 2\"});\r\n\t\twidget.addChild(item);\r\n\t\tdomConst.place(widget.domNode, placeHolderId, \"replace\");\r\n\t\twidget.startup();\r\n\t\treturn widget;\r\n\t};\r\n\t\r\n\tfunction _createListObjectProgrammaticallyWithSourceNodeReference(id){\r\n\t\tvar list = new ListObject({select:\"single\"}, id);\r\n\t\tvar item = new ListItem({label:ITEM_LABEL + \" 1\", checked:true});\r\n\t\tlist.addChild(item);\r\n\t\titem = new ListItem({label:ITEM_LABEL + \" 2\"});\r\n\t\tlist.addChild(item);\r\n\t\tlist.startup();\r\n\t\treturn list;\r\n\t};\r\n\r\n\tfunction _assertCorrectListObject(list){\r\n\t\trunner.assertNotEqual(null, list);\r\n\t\tvar children = list.getChildren();\r\n\t\tvar length = children.length;\r\n\t\trunner.assertEqual(2, length, list.toString());\r\n\t\trunner.assertTrue(children[0].checked, children[0].toString());\r\n\t};\r\n\t\r\n\tfunction _showView2(){\r\n\t\tvar view1 = registry.byId(\"view1\");\r\n\t\tview1.performTransition(\"view2\", 1, \"none\");\r\n\t};\r\n\r\n\tready(function(){\r\n\t\trunner.register(\"dojox.mobile.test.doh.EdgeToEdgeListTests\", [\r\n\t\t\tfunction testInView1(){\r\n\t\t\t\tvar list1 = _createListObjectDeclaratively(\"view1-list1\");\r\n\t\t\t\tvar list2 = _createListObjectProgrammatically(\"view1-list2\");\r\n\t\t\t\tvar list3 = _createListObjectProgrammaticallyWithSourceNodeReference(\"view1-list3\");\r\n\t\t\r\n\t\t\t\t_assertCorrectListObject(list1);\r\n\t\t\t\t_assertCorrectListObject(list2);\r\n\t\t\t\t_assertCorrectListObject(list3);\r\n\t\t\t},\r\n\t\t\tfunction testInView2(){\r\n\t\t\t\tvar list1 = _createListObjectDeclaratively(\"view2-list1\");\r\n\t\t\t\tvar list2 = _createListObjectProgrammatically(\"view2-list2\");\r\n\t\t\t\tvar list3 = _createListObjectProgrammaticallyWithSourceNodeReference(\"view2-list3\");\r\n\t\t\t\t\r\n\t\t\t\t_showView2();\r\n\t\t\t\t\r\n\t\t\t\t_assertCorrectListObject(list1);\r\n\t\t\t\t_assertCorrectListObject(list2);\r\n\t\t\t\t_assertCorrectListObject(list3);\r\n\t\t\t}\r\n\t\t]);\r\n\t\trunner.run();\r\n\t});\r\n})\r\n"]}