{"version":3,"sources":["mobile/tests/doh/bidi/SwapViewTests_rtl.js"],"names":["require","connect","domConst","domClass","ready","registry","runner","SwapView","WIDGET_CLASSNAME1","WIDGET_CLASSNAME2","_createSwapViewProgrammatically","placeHolderId","widgetId","selected","innerHTML","r","dojox","mobile","id","assertNotEqual","place","domNode","startup","_createSwapViewProgrammaticallyWithSourceNodeReference","_assertCorrectSwapView","widget","display","assertTrue","contains","assertEqual","style","WIDGET_PROGRAMMATICALLY","register","name","timeout","runTest","byId","d","Deferred","setTimeout","getTestCallback","widget1","widget2","goTo","run"],"mappings":";;;;;;;AAAAA,SACC,qBACA,qBACA,iBACA,aACA,iBACA,aACA,wBACA,eACA,sBACA,uBACE,SAASC,EAASC,EAAUC,EAAUC,EAAOC,EAAUC,EAAQC,GAGjE,IACIC,EAAoB,UACpBC,EAAoB,cAOxB,SAASC,EAAgCC,EAAeC,EAAUC,EAAUC,GAE3E,IAAIC,EAAI,IAAIC,MAAMC,OAAOV,UAAUW,GAAGN,EAAUC,SAASA,EAAUC,UAAUA,IAK7E,OAJAR,EAAOa,eAAe,KAAMJ,GAC5Bb,EAASkB,MAAML,EAAEM,QAASV,EAAe,WACzCI,EAAEO,UAEKP,EAGR,SAASQ,EAAuDX,EAAUC,GAEzE,IAAIE,EAAI,IAAIR,GAAUM,SAASA,GAAWD,GAG1C,OADAG,EAAEO,UACKP,EAGR,SAASS,EAAuBC,EAAQC,GACvCpB,EAAOa,eAAe,KAAMM,EAAQ,uCACpCnB,EAAOqB,WAAWxB,EAASyB,SAASH,EAAOJ,QAASb,GAAoBA,GACxEF,EAAOqB,WAAWxB,EAASyB,SAASH,EAAOJ,QAASZ,GAAoBA,GACxEH,EAAOuB,YAAYH,EAAQ,GAAG,OAAQD,EAAOJ,QAAQS,MAAMJ,QAAS,gCAQrEtB,EAAM,WAC0B,IAA5B2B,yBACFrB,EAAgC,WAAY,OAAO,EAAM,uBACzDA,EAAgC,WAAY,OAAO,EAAO,wBACtB,IAA5BqB,0BACRR,EAAuD,OAAO,GAC9DA,EAAuD,OAAO,IAG/DjB,EAAO0B,SAAS,wCAEdC,KAAM,yBACNC,QAAS,IACTC,QAAS,WAEM9B,EAAS+B,KAAK,OACd/B,EAAS+B,KAAK,OAD5B,IAGIC,EAAI,IAAI/B,EAAOgC,SAQnB,OAPAC,WAAWF,EAAEG,gBAAgB,WAC5B,IAAIC,EAAUpC,EAAS+B,KAAK,OACxBM,EAAUrC,EAAS+B,KAAK,OAC5BZ,EAAuBiB,GAAS,GAChCjB,EAAuBkB,GAAS,GAChCD,EAAQE,MAAM,KA/DG,KAiEXN,KAKRJ,KAAM,yBACNC,QAAS,IACTC,QAAS,WACR,IAAIE,EAAI,IAAI/B,EAAOgC,SAOnB,OANAC,WAAWF,EAAEG,gBAAgB,WAC5B,IAAIC,EAAUpC,EAAS+B,KAAK,OACxBM,EAAUrC,EAAS+B,KAAK,OAC5BZ,EAAuBiB,GAAS,GAChCjB,EAAuBkB,GAAS,KA9Ef,KAgFXL,MAIV/B,EAAOsC","file":"../../../../../mobile/tests/doh/bidi/SwapViewTests_rtl.js","sourcesContent":["require([\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/dom-construct\", // dojo.place\r\n\t\"dojo/dom-class\", // dojo.hasClass\r\n\t\"dojo/ready\", // dojo.ready\r\n\t\"dijit/registry\",  // dijit.byId\r\n\t\"doh/runner\",\t//doh functions\r\n\t\"dojox/mobile/SwapView\",\t// This mobile app uses mobile view\r\n\t\"dojox/mobile\",\t\t\t\t// This is a mobile app.\r\n\t\"dojox/mobile/compat\",\t\t// This mobile app supports running on desktop browsers\r\n\t\"dojox/mobile/parser\"\t\t// This mobile app uses declarative programming with fast mobile parser\r\n], function(connect, domConst, domClass, ready, registry, runner, SwapView){\r\n\r\n\r\n\tvar timeoutInterval = 1000;\r\n\tvar WIDGET_CLASSNAME1 = \"mblView\";\r\n\tvar WIDGET_CLASSNAME2 = \"mblSwapView\";\r\n\r\n\r\n\tfunction _createSwapViewDeclaratively(widgetId) {\r\n\t\treturn registry.byId(widgetId);\r\n\t};\r\n\r\n\tfunction _createSwapViewProgrammatically(placeHolderId, widgetId, selected, innerHTML){\r\n\t\t// Create SwapView\r\n\t\tvar r = new dojox.mobile.SwapView({id:widgetId, selected:selected, innerHTML:innerHTML});\r\n\t\trunner.assertNotEqual(null, r);\r\n\t\tdomConst.place(r.domNode, placeHolderId, \"replace\");\r\n\t\tr.startup();\r\n\t\t\r\n\t\treturn r;\r\n\t};\r\n\r\n\tfunction _createSwapViewProgrammaticallyWithSourceNodeReference(widgetId, selected){\r\n\t\t// Create IconContainer\r\n\t\tvar r = new SwapView({selected:selected}, widgetId);\r\n\r\n\t\tr.startup();\r\n\t\treturn r;\r\n\t};\r\n\r\n\tfunction _assertCorrectSwapView(widget, display){\r\n\t\trunner.assertNotEqual(null, widget, \"IconContainer: Did not instantiate.\");\r\n\t\trunner.assertTrue(domClass.contains(widget.domNode, WIDGET_CLASSNAME1), WIDGET_CLASSNAME1);\r\n\t\trunner.assertTrue(domClass.contains(widget.domNode, WIDGET_CLASSNAME2), WIDGET_CLASSNAME2);\r\n\t\trunner.assertEqual(display?\"\":\"none\", widget.domNode.style.display, \"widget.domNode.style.display\");\r\n\t\t\r\n\t};\r\n\r\n\tfunction _assertCorrectSwapViewPos(widgetId, top, left){\r\n\t};\r\n\r\n\r\n\tready(function(){\r\n\t\tif(WIDGET_PROGRAMMATICALLY === 1){\r\n\t\t\t_createSwapViewProgrammatically(\"fooPlace\", \"foo\", true, \"<h1>SwapView 1</h1>\");\r\n\t\t\t_createSwapViewProgrammatically(\"barPlace\", \"bar\", false, \"<h1>SwapView 2</h1>\");\r\n\t\t}else if(WIDGET_PROGRAMMATICALLY === 2){\r\n\t\t\t_createSwapViewProgrammaticallyWithSourceNodeReference(\"foo\", true);\r\n\t\t\t_createSwapViewProgrammaticallyWithSourceNodeReference(\"bar\", false);\r\n\t\t}\r\n\r\n\t\trunner.register(\"dojox.mobile.test.doh.SwapViewTests\", [\r\n\t\t\t{\r\n\t\t\t\tname: \"SwapView Verification1\",\r\n\t\t\t\ttimeout: 4000,\r\n\t\t\t\trunTest: function(){\r\n\r\n\t\t\t\t\tvar widget1 = registry.byId(\"foo\");\r\n\t\t\t\t\tvar widget2 = registry.byId(\"bar\");\r\n\r\n\t\t\t\t\tvar d = new runner.Deferred();\r\n\t\t\t\t\tsetTimeout(d.getTestCallback(function(){\r\n\t\t\t\t\t\tvar widget1 = registry.byId(\"foo\");\r\n\t\t\t\t\t\tvar widget2 = registry.byId(\"bar\");\r\n\t\t\t\t\t\t_assertCorrectSwapView(widget1, true);\r\n\t\t\t\t\t\t_assertCorrectSwapView(widget2, false);\r\n\t\t\t\t\t\twidget1.goTo(-1);\r\n\t\t\t\t\t}), timeoutInterval);\r\n\t\t\t\t\treturn d;\r\n\t\t\t\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tname: \"SwapView Verification2\",\r\n\t\t\t\ttimeout: 4000,\r\n\t\t\t\trunTest: function(){\r\n\t\t\t\t\tvar d = new runner.Deferred();\r\n\t\t\t\t\tsetTimeout(d.getTestCallback(function(){\r\n\t\t\t\t\t\tvar widget1 = registry.byId(\"foo\");\r\n\t\t\t\t\t\tvar widget2 = registry.byId(\"bar\");\r\n\t\t\t\t\t\t_assertCorrectSwapView(widget1, false);\r\n\t\t\t\t\t\t_assertCorrectSwapView(widget2, true);\r\n\t\t\t\t\t}), timeoutInterval);\r\n\t\t\t\t\treturn d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]);\r\n\t\trunner.run();\r\n\t});\r\n})\r\n"]}