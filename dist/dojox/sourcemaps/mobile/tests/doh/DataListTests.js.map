{"version":3,"sources":["mobile/tests/doh/DataListTests.js"],"names":["fruits11","fruits12","fruits13","fruits21","fruits22","fruits23","require","lang","ItemFileWriteStore","domConst","ready","registry","runner","EdgeToEdgeDataList","RoundRectDataList","CLASS_NAME","DataList","testName","IsEdgeToEdgeList","fruitsData","items","label","moveTo","_createDataListDeclaratively","id","byId","_createDataListProgrammatically","fruits","placeHolderId","widget","store","query","assertNotEqual","place","domNode","startup","_createDataListProgrammaticallyWithSourceNodeReference","_assertCorrectDataList","dataList","assertEqual","className","toString","length","children","item","newItem","_arrayOfTopLevelItems","deleteItem","data","clone","register","dataList1","dataList2","dataList3","performTransition","run"],"mappings":";;;;;;;AAAA,IAAIA,SAAUC,SAAUC,SAAUC,SAAUC,SAAUC,SAEtDC,SACC,kBACA,+BACA,qBACA,aACA,iBACA,aACA,kCACA,iCACA,eACA,oBACA,sBACA,uBACE,SAASC,EAAMC,EAAoBC,EAAUC,EAAOC,EAAUC,EAAQC,EAAoBC,GAE5F,IAAIC,EACAC,EACAC,EAEDC,kBACFH,EAAa,oBACbC,EAAWH,EACXI,EAAW,kDAEXF,EAAa,mBACbC,EAAWF,EACXG,EAAW,gDAEZ,IAAIE,GACHC,QACEC,MAAM,QAAUC,OAAO,UACvBD,MAAM,SAAWC,OAAO,UACxBD,MAAM,SAAWC,OAAO,WAU3B,SAASC,EAA6BC,GACrC,OAAOb,EAASc,KAAKD,GAGtB,SAASE,EAAgCC,EAAQC,GAChD,IAAIC,EAAS,IAAIb,GAAUc,MAAMH,EAAQI,OAAOV,MAAM,OAItD,OAHAT,EAAOoB,eAAe,KAAMH,GAC5BpB,EAASwB,MAAMJ,EAAOK,QAASN,EAAe,WAC9CC,EAAOM,UACAN,EAGR,SAASO,EAAuDT,EAAQH,GACvE,IAAIK,EAAS,IAAIb,GAAUc,MAAMH,EAAQI,OAAOV,MAAM,MAAOG,GAE7D,OADAK,EAAOM,UACAN,EAGR,SAASQ,EAAuBV,EAAQW,GACvC1B,EAAOoB,eAAe,KAAMM,GAE5B1B,EAAO2B,YAAYxB,EAAYuB,EAASJ,QAAQM,UAAWF,EAASG,YACpE7B,EAAO2B,YAAYpB,EAAWC,MAAMsB,OAAQJ,EAASJ,QAAQS,SAASD,OAAQ,aAAeJ,EAASJ,QAAQV,IAE9G,IAAIoB,EAAOjB,EAAOkB,SAASxB,MAAO,OAAQC,OAAQ,UAClDV,EAAO2B,YAAYZ,EAAOmB,sBAAsBJ,OAAQJ,EAASJ,QAAQS,SAASD,OAAQ,iBAAmBJ,EAASJ,QAAQV,IAE9HG,EAAOoB,WAAWH,GAClBhC,EAAO2B,YAAYZ,EAAOmB,sBAAsBJ,OAAQJ,EAASJ,QAAQS,SAASD,OAAQ,oBAAsBJ,EAASJ,QAAQV,IAnClIxB,SAAW,IAAIQ,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KACnDlB,SAAW,IAAIO,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KACnDjB,SAAW,IAAIM,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KACnDhB,SAAW,IAAIK,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KACnDf,SAAW,IAAII,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KACnDd,SAAW,IAAIG,GAAoBwC,KAAKzC,EAAK0C,MAAM9B,KAsCnDT,EAAM,WACLE,EAAOsC,SAASjC,GACf,WACC,IAAIkC,EAAY5B,EAA6B,mBACzC6B,EAAY1B,EAAgCzB,SAAU,mBACtDoD,EAAYjB,EAAuDlC,SAAU,mBAEjFmC,EAAuBrC,SAAUmD,GACjCd,EAAuBpC,SAAUmD,GACjCf,EAAuBnC,SAAUmD,IAElC,WACC,IAAIF,EAAY5B,EAA6B,mBACzC6B,EAAY1B,EAAgCtB,SAAU,mBACtDiD,EAAYjB,EAAuD/B,SAAU,mBAlBvEM,EAASc,KAAK,SACpB6B,kBAAkB,QAAS,EAAG,QAqBlCjB,EAAuBlC,SAAUgD,GACjCd,EAAuBjC,SAAUgD,GACjCf,EAAuBhC,SAAUgD,MAGnCzC,EAAO2C","file":"../../../../mobile/tests/doh/DataListTests.js","sourcesContent":["var fruits11, fruits12, fruits13, fruits21, fruits22, fruits23;\r\n\r\nrequire([\r\n\t\"dojo/_base/lang\", //dojo.clone\r\n\t\"dojo/data/ItemFileWriteStore\", // dojo.data.ItemFileWriteStore\r\n\t\"dojo/dom-construct\", // dojo.place\r\n\t\"dojo/ready\", // dojo.ready\r\n\t\"dijit/registry\",  // dijit.byId\r\n\t\"doh/runner\",\t//doh functions\r\n\t\"dojox/mobile/EdgeToEdgeDataList\",\r\n\t\"dojox/mobile/RoundRectDataList\",\r\n\t\"dojox/mobile\",\t\t\t\t// This is a mobile app.\r\n\t\"dojox/mobile/View\",\t\t// This mobile app uses mobile view\r\n\t\"dojox/mobile/compat\",\t\t// This mobile app supports running on desktop browsers\r\n\t\"dojox/mobile/parser\"\t\t// This mobile app uses declarative programming with fast mobile parser\r\n], function(lang, ItemFileWriteStore, domConst, ready, registry, runner, EdgeToEdgeDataList, RoundRectDataList){\r\n\r\n\tvar CLASS_NAME;\r\n\tvar DataList;\r\n\tvar testName;\r\n\r\n\tif(IsEdgeToEdgeList){\r\n\t\tCLASS_NAME = \"mblEdgeToEdgeList\";\r\n\t\tDataList = EdgeToEdgeDataList;\r\n\t\ttestName = \"dojox.mobile.test.doh.EdgeToEdgeDataListTests\";\r\n\t}else{\r\n\t\tCLASS_NAME = \"mblRoundRectList\";\r\n\t\tDataList = RoundRectDataList;\r\n\t\ttestName = \"dojox.mobile.test.doh.RoundRectDataListTests\";\r\n\t}\r\n\tvar fruitsData = { \r\n\t\titems:[ \r\n\t\t\t{label:\"Apple\",\t\tmoveTo:\"dummy\"},\r\n\t\t\t{label:\"Banana\", \tmoveTo:\"dummy\"},\r\n\t\t\t{label:\"Cherry\", \tmoveTo:\"dummy\"}\r\n\t\t]};\r\n\t\t\t\t\t\r\n\tfruits11 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\tfruits12 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\tfruits13 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\tfruits21 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\tfruits22 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\tfruits23 = new ItemFileWriteStore({data:lang.clone(fruitsData)});\r\n\t\t\t\r\n\tfunction _createDataListDeclaratively(id) {\r\n\t\treturn registry.byId(id);\r\n\t};\r\n\t\r\n\tfunction _createDataListProgrammatically(fruits, placeHolderId){\r\n\t\tvar widget = new DataList({store:fruits, query:{label:\"*\"}});\r\n\t\trunner.assertNotEqual(null, widget);\r\n\t\tdomConst.place(widget.domNode, placeHolderId, \"replace\");\r\n\t\twidget.startup();\r\n\t\treturn widget;\r\n\t};\r\n\t\r\n\tfunction _createDataListProgrammaticallyWithSourceNodeReference(fruits, id){\r\n\t\tvar widget = new DataList({store:fruits, query:{label:\"*\"}}, id);\r\n\t\twidget.startup();\r\n\t\treturn widget;\r\n\t};\r\n\r\n\tfunction _assertCorrectDataList(fruits, dataList){\r\n\t\trunner.assertNotEqual(null, dataList);\r\n\t\t\r\n\t\trunner.assertEqual(CLASS_NAME, dataList.domNode.className, dataList.toString());\r\n\t\trunner.assertEqual(fruitsData.items.length, dataList.domNode.children.length, \"length id=\" + dataList.domNode.id);\r\n\t\t\r\n\t\tvar item = fruits.newItem({label: \"Date\", moveTo: \"dummy\"});\r\n\t\trunner.assertEqual(fruits._arrayOfTopLevelItems.length, dataList.domNode.children.length, \"new length id=\" + dataList.domNode.id);\r\n\t\t\r\n\t\tfruits.deleteItem(item);\r\n\t\trunner.assertEqual(fruits._arrayOfTopLevelItems.length, dataList.domNode.children.length, \"delete length id=\" + dataList.domNode.id);\r\n\t};\r\n\t\r\n\tfunction _showView2(){\r\n\t\tvar view1 = registry.byId(\"view1\");\r\n\t\tview1.performTransition(\"view2\", 1, \"none\");\r\n\t};\r\n\r\n\tready(function(){\r\n\t\trunner.register(testName, [\r\n\t\t\tfunction testInView1(){\r\n\t\t\t\tvar dataList1 = _createDataListDeclaratively(\"view1-dataList1\");\r\n\t\t\t\tvar dataList2 = _createDataListProgrammatically(fruits12, \"view1-dataList2\");\r\n\t\t\t\tvar dataList3 = _createDataListProgrammaticallyWithSourceNodeReference(fruits13, \"view1-dataList3\");\r\n\t\t\r\n\t\t\t\t_assertCorrectDataList(fruits11, dataList1);\r\n\t\t\t\t_assertCorrectDataList(fruits12, dataList2);\r\n\t\t\t\t_assertCorrectDataList(fruits13, dataList3);\r\n\t\t\t},\r\n\t\t\tfunction testInView2(){\r\n\t\t\t\tvar dataList1 = _createDataListDeclaratively(\"view2-dataList1\");\r\n\t\t\t\tvar dataList2 = _createDataListProgrammatically(fruits22, \"view2-dataList2\");\r\n\t\t\t\tvar dataList3 = _createDataListProgrammaticallyWithSourceNodeReference(fruits23, \"view2-dataList3\");\r\n\t\t\t\t\r\n\t\t\t\t_showView2();\r\n\t\t\t\t\r\n\t\t\t\t_assertCorrectDataList(fruits21, dataList1);\r\n\t\t\t\t_assertCorrectDataList(fruits22, dataList2);\r\n\t\t\t\t_assertCorrectDataList(fruits23, dataList3);\r\n\t\t\t}\r\n\t\t]);\r\n\t\trunner.run();\r\n\t});\r\n})\r\n"]}