{"version":3,"sources":["mobile/ScrollableView.js"],"names":["define","array","declare","domClass","domConstruct","registry","View","ScrollableMixin","scrollableParams","keepScrollPos","constructor","this","noResize","buildRendering","inherited","arguments","add","domNode","style","overflow","top","containerNode","create","className","position","scrollDir","width","startup","_started","fixedFooter","isLocalFooter","_fixedAppFooter","reparent","resize","forEach","getChildren","child","_dim","getDim","_conn","resetScrollBar","isTopLevel","e","parent","getParent","addFixedBar","widget","c","fixed","checkFixedBar","appendChild","fixedHeaderHeight","offsetHeight","isLocalHeader","fixedFooterHeight","bottom","i","idx","len","childNodes","length","removeChild","onAfterTransitionIn","moveTo","dir","transition","context","method","flashScrollBar","fixedWidget","children","fixedHeader","parentNode","byNode","push","_addTransitionPaddingTop","value","paddingTop","_removeTransitionPaddingTop"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,iBACA,qBACA,iBACA,SACA,sBACE,SAASC,EAAOC,EAASC,EAAUC,EAAcC,EAAUC,EAAMC,GAKnE,OAAOL,EAAQ,+BAAgCI,EAAMC,IAgBpDC,iBAAkB,KAIlBC,eAAe,EAEfC,YAAa,WAGZC,KAAKH,kBAAoBI,UAAU,IAGpCC,eAAgB,WACfF,KAAKG,UAAUC,WACfZ,EAASa,IAAIL,KAAKM,QAAS,qBAC3BN,KAAKM,QAAQC,MAAMC,SAAW,SAC9BR,KAAKM,QAAQC,MAAME,IAAM,MACzBT,KAAKU,cAAgBjB,EAAakB,OAAO,OACvCC,UAAU,8BAA+BZ,KAAKM,SAChDN,KAAKU,cAAcH,MAAMM,SAAW,WACpCb,KAAKU,cAAcH,MAAME,IAAM,MACT,MAAnBT,KAAKc,YACPd,KAAKU,cAAcH,MAAMQ,MAAQ,SAInCC,QAAS,WACLhB,KAAKiB,WAELjB,KAAKkB,cAAgBlB,KAAKmB,gBAC5BnB,KAAKoB,gBAAkBpB,KAAKkB,YAC5BlB,KAAKkB,YAAc,IAEpBlB,KAAKqB,WACLrB,KAAKG,UAAUC,aAGhBkB,OAAQ,WAGPtB,KAAKG,UAAUC,WACfd,EAAMiC,QAAQvB,KAAKwB,cAAe,SAASC,GACvCA,EAAMH,QAASG,EAAMH,WAEzBtB,KAAK0B,KAAO1B,KAAK2B,SACd3B,KAAK4B,OAEP5B,KAAK6B,kBAIPC,WAAY,SAAkBC,GAI7B,IAAIC,EAAShC,KAAKiC,WAAajC,KAAKiC,YACpC,OAASD,IAAWA,EAAOV,QAG5BY,YAAa,SAAmBC,GAQ/B,IAAIC,EAAID,EAAO7B,QACX+B,EAAQrC,KAAKsC,cAAcF,GAAG,GAC9BC,IAEJrC,KAAKM,QAAQiC,YAAYH,GACZ,QAAVC,GACFrC,KAAKwC,kBAAoBJ,EAAEK,aAC3BzC,KAAK0C,eAAgB,GACH,WAAVL,IACRrC,KAAK2C,kBAAoBP,EAAEK,aAC3BzC,KAAKmB,eAAgB,EACrBiB,EAAE7B,MAAMqC,OAAS,OAElB5C,KAAKsB,WAGND,SAAU,WAIT,IAAIwB,EAAGC,EAAKC,EAAKX,EACjB,IAAIS,EAAI,EAAGC,EAAM,EAAGC,EAAM/C,KAAKM,QAAQ0C,WAAWC,OAAQJ,EAAIE,EAAKF,KAClET,EAAIpC,KAAKM,QAAQ0C,WAAWF,MAEnB9C,KAAKU,eAAiBV,KAAKsC,cAAcF,GAAG,GACpDU,IAGD9C,KAAKU,cAAc6B,YAAYvC,KAAKM,QAAQ4C,YAAYd,KAI1De,oBAAqB,SAASC,EAAQC,EAAKC,EAAYC,EAASC,GAI/DxD,KAAKyD,kBAGNjC,YAAa,WAIZ,IACIkC,EADAC,EAAW3D,KAAKG,UAAUC,WAc9B,OAZGJ,KAAK4D,aAAe5D,KAAK4D,YAAYC,aAAe7D,KAAKM,UAC3DoD,EAAchE,EAASoE,OAAO9D,KAAK4D,eAElCD,EAASI,KAAKL,GAGb1D,KAAKkB,aAAelB,KAAKkB,YAAY2C,aAAe7D,KAAKM,UAC3DoD,EAAchE,EAASoE,OAAO9D,KAAKkB,eAElCyC,EAASI,KAAKL,GAGTC,GAGRK,yBAA0B,SAA4BC,GAErDjE,KAAKM,QAAQC,MAAM2D,WAAaD,EAAQ,KACxCjE,KAAKU,cAAcH,MAAM2D,WAAaD,EAAQ,MAG/CE,4BAA6B,WAE5BnE,KAAKM,QAAQC,MAAM2D,WAAa,GAChClE,KAAKU,cAAcH,MAAM2D,WAAa","file":"../../mobile/ScrollableView.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/registry\",\t// registry.byNode\r\n\t\"./View\",\r\n\t\"./_ScrollableMixin\"\r\n], function(array, declare, domClass, domConstruct, registry, View, ScrollableMixin){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ScrollableView\r\n\r\n\treturn declare(\"dojox.mobile.ScrollableView\", [View, ScrollableMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA container that has a touch scrolling capability.\r\n\t\t// description:\r\n\t\t//\t\tScrollableView is a subclass of View (dojox/mobile/View).\r\n\t\t//\t\tUnlike the base View class, ScrollableView's domNode always stays\r\n\t\t//\t\tat the top of the screen and its height is \"100%\" of the screen.\r\n\t\t//\t\tInside this fixed domNode, the containerNode scrolls. The browser's\r\n\t\t//\t\tdefault scrolling behavior is disabled, and the scrolling mechanism is\r\n\t\t//\t\treimplemented in JavaScript. Thus the user does not need to use the\r\n\t\t//\t\ttwo-finger operation to scroll the inner DIV (containerNode).\r\n\t\t//\t\tThe main purpose of this widget is to realize fixed-positioned header\r\n\t\t//\t\tand/or footer bars.\r\n\r\n\t\t// scrollableParams: Object\r\n\t\t//\t\tParameters for dojox/mobile/scrollable.init().\r\n\t\tscrollableParams: null,\r\n\r\n\t\t// keepScrollPos: Boolean\r\n\t\t//\t\tOverrides dojox/mobile/View/keepScrollPos.\r\n\t\tkeepScrollPos: false,\r\n\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a new instance of the class.\r\n\t\t\tthis.scrollableParams = {noResize: true};\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdomClass.add(this.domNode, \"mblScrollableView\");\r\n\t\t\tthis.domNode.style.overflow = \"hidden\";\r\n\t\t\tthis.domNode.style.top = \"0px\";\r\n\t\t\tthis.containerNode = domConstruct.create(\"div\",\r\n\t\t\t\t{className:\"mblScrollableViewContainer\"}, this.domNode);\r\n\t\t\tthis.containerNode.style.position = \"absolute\";\r\n\t\t\tthis.containerNode.style.top = \"0px\"; // view bar is relative\r\n\t\t\tif(this.scrollDir === \"v\"){\r\n\t\t\t\tthis.containerNode.style.width = \"100%\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){ return; }\r\n\t\t\t// user can initialize the app footers using a value for fixedFooter (we keep this value for non regression of existing apps)\r\n\t\t\tif(this.fixedFooter && !this.isLocalFooter){\r\n\t\t\t\tthis._fixedAppFooter = this.fixedFooter;\r\n\t\t\t\tthis.fixedFooter = \"\";\r\n\t\t\t}\r\n\t\t\tthis.reparent();\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tresize: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalls resize() of each child widget.\r\n\t\t\tthis.inherited(arguments); // scrollable#resize() will be called\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tif(child.resize){ child.resize(); }\r\n\t\t\t});\r\n\t\t\tthis._dim = this.getDim(); // update dimension cache\r\n\t\t\tif(this._conn){\r\n\t\t\t\t// if a resize happens during a scroll, update the scrollbar\r\n\t\t\t\tthis.resetScrollBar();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tisTopLevel: function(/*Event*/e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if this is a top-level widget.\r\n\t\t\t//\t\tOverrides dojox/mobile/scrollable.isTopLevel.\r\n\t\t\tvar parent = this.getParent && this.getParent();\r\n\t\t\treturn (!parent || !parent.resize); // top level widget\r\n\t\t},\r\n\r\n\t\taddFixedBar: function(/*Widget*/widget){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds a view local fixed bar to this widget.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method can be used to programmatically add a view local\r\n\t\t\t//\t\tfixed bar to ScrollableView. The bar is appended to this\r\n\t\t\t//\t\twidget's domNode. The addChild API cannot be used for this\r\n\t\t\t//\t\tpurpose, because it adds the given widget to containerNode.\r\n\t\t\tvar c = widget.domNode;\r\n\t\t\tvar fixed = this.checkFixedBar(c, true);\r\n\t\t\tif(!fixed){ return; }\r\n\t\t\t// Fixed bar has to be added to domNode, not containerNode.\r\n\t\t\tthis.domNode.appendChild(c);\r\n\t\t\tif(fixed === \"top\"){\r\n\t\t\t\tthis.fixedHeaderHeight = c.offsetHeight;\r\n\t\t\t\tthis.isLocalHeader = true;\r\n\t\t\t}else if(fixed === \"bottom\"){\r\n\t\t\t\tthis.fixedFooterHeight = c.offsetHeight;\r\n\t\t\t\tthis.isLocalFooter = true;\r\n\t\t\t\tc.style.bottom = \"0px\";\r\n\t\t\t}\r\n\t\t\tthis.resize();\r\n\t\t},\r\n\r\n\t\treparent: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMoves all the children, except header and footer, to\r\n\t\t\t//\t\tcontainerNode.\r\n\t\t\tvar i, idx, len, c;\r\n\t\t\tfor(i = 0, idx = 0, len = this.domNode.childNodes.length; i < len; i++){\r\n\t\t\t\tc = this.domNode.childNodes[idx];\r\n\t\t\t\t// search for view-specific header or footer\r\n\t\t\t\tif(c === this.containerNode || this.checkFixedBar(c, true)){\r\n\t\t\t\t\tidx++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tthis.containerNode.appendChild(this.domNode.removeChild(c));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonAfterTransitionIn: function(moveTo, dir, transition, context, method){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrides View.onAfterTransitionIn to flash the scroll bar\r\n\t\t\t//\t\tafter performing a view transition.\r\n\t\t\tthis.flashScrollBar();\r\n\t\t},\r\n\r\n\t\tgetChildren: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrides _WidgetBase.getChildren to add local fixed bars,\r\n\t\t\t//\t\twhich are not under containerNode, to the children array.\r\n\t\t\tvar children = this.inherited(arguments);\r\n\t\t\tvar fixedWidget;\r\n\t\t\tif(this.fixedHeader && this.fixedHeader.parentNode === this.domNode){\r\n\t\t\t\tfixedWidget = registry.byNode(this.fixedHeader);\r\n\t\t\t\tif(fixedWidget){\r\n\t\t\t\t\tchildren.push(fixedWidget);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.fixedFooter && this.fixedFooter.parentNode === this.domNode){\r\n\t\t\t\tfixedWidget = registry.byNode(this.fixedFooter);\r\n\t\t\t\tif(fixedWidget){\r\n\t\t\t\t\tchildren.push(fixedWidget);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn children;\r\n\t\t},\r\n\r\n\t\t_addTransitionPaddingTop: function(/*String|Integer*/ value){\r\n\t\t\t// add padding top to the view in order to get alignment during the transition\r\n\t\t\tthis.domNode.style.paddingTop = value + \"px\";\r\n\t\t\tthis.containerNode.style.paddingTop = value + \"px\";\r\n\t\t},\r\n\r\n\t\t_removeTransitionPaddingTop: function(){\r\n\t\t\t// remove padding top from the view after the transition\r\n\t\t\tthis.domNode.style.paddingTop = \"\";\r\n\t\t\tthis.containerNode.style.paddingTop = \"\";\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}