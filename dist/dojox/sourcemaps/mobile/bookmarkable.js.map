{"version":3,"sources":["mobile/bookmarkable.js"],"names":["define","array","connect","lang","win","hash","registry","TransitionEvent","View","viewRegistry","b","settingHash","transitionInfo","getTransitionInfo","fromViewId","toViewId","this","replace","addTransitionInfo","args","findTransitionViews","moveTo","view","byId","v","getParent","isVisible","getShowingView","onHashChange","value","params","handleFragIds","hashchange","body","dispatch","fragIds","arr","ids","split","i","length","success","getParentView","indexOf","id","forEach","getSiblingViews","domNode","style","display","initialView","dir","transitionDir","transition","setFragIds","toView","filter","getViews","map","join","subscribe","apply","arguments","extend"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,kBACA,oBACA,YACA,iBACA,oBACA,SACA,kBACE,SAASC,EAAOC,EAASC,EAAMC,EAAKC,EAAMC,EAAUC,EAAiBC,EAAMC,GAK7E,IAAIC,GAMHC,aAAa,EAIbC,kBAEAC,kBAAmB,SAAoBC,EAAuBC,GAG7D,OAAOC,KAAKJ,eAAeE,EAAWG,QAAQ,KAAM,IAAM,IAAMF,EAASE,QAAQ,KAAM,MAGxFC,kBAAmB,SAAoBJ,EAAuBC,EAAoBI,GAGjFH,KAAKJ,eAAeE,EAAWG,QAAQ,KAAM,IAAM,IAAMF,EAASE,QAAQ,KAAM,KAAOE,GAGxFC,oBAAqB,SAAmBC,GAGvC,IAAIA,EAAS,SACb,IAAIC,EAAOhB,EAASiB,KAAKF,EAAOJ,QAAQ,KAAM,KAC9C,IAAIK,EAAO,SACX,IAAI,IAAIE,EAAIF,EAAKG,YAAaD,EAAGA,EAAIA,EAAEC,YACnCD,EAAEE,YAAcF,EAAEE,cACpBJ,EAAOE,GAIT,OAAQF,EAAKK,iBAAkBL,IAGhCM,aAAc,SAASC,GAGtB,GAAGb,KAAKL,YACPK,KAAKL,aAAc,MADpB,CAIA,IAAImB,EAASd,KAAKe,cAAcF,GAChCC,EAAOE,YAAa,EACpB,IAAIzB,EAAgBH,EAAI6B,OAAQH,GAAQI,aAGzCH,cAAe,SAAmBI,GAQjC,IAAIC,EAAKf,EACT,GAAIc,EAKH,IADA,IAAIE,EAAMF,EAAQlB,QAAQ,KAAM,IAAIqB,MAAM,KAClCC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CAGlC,IAAIjB,EAAOhB,EAASiB,KAAKc,EAAIE,IAG7B,IAAGjB,EAAKI,YAAR,CAOA,IADA,IAAIe,GAAU,EACNjB,EAAIf,EAAaiC,cAAcpB,GAAOE,EAAGA,EAAIf,EAAaiC,cAAclB,GAC/E,IAAiC,IAA9BvB,EAAM0C,QAAQN,EAAKb,EAAEoB,IAAW,CAClCH,GAAU,EACV,MAGEA,EASc,KADlBL,EAAMpB,KAAKI,oBAAoBiB,EAAIE,KAC5BC,SACNnB,EAASgB,EAAIE,IARbtC,EAAM4C,QAAQvB,EAAKwB,kBAAmB,SAAStB,GAC9CA,EAAEuB,QAAQC,MAAMC,QAAWzB,IAAMF,EAAQ,GAAK,eA1BjDD,EAASZ,EAAayC,YAAYN,GAClCR,EAAMpB,KAAKI,oBAAoBC,GAuChC,IAAIF,EAAOH,KAAKH,kBAAkBuB,EAAI,GAAGQ,GAAIR,EAAI,GAAGQ,IAChDO,EAAM,EAMV,OALIhC,IACHA,EAAOH,KAAKH,kBAAkBuB,EAAI,GAAGQ,GAAIR,EAAI,GAAGQ,IAChDO,GAAO,IAIP9B,OAAQ,IAAMA,EACd+B,cAAejC,EAAOA,EAAKiC,cAAgBD,EAAM,EACjDE,WAAYlC,EAAOA,EAAKkC,WAAa,SAIvCC,WAAY,SAAmBC,GAO9B,IAAInB,EAAMnC,EAAMuD,OAAO/C,EAAagD,WAAY,SAASjC,GAAI,OAAOA,EAAEE,cACtEV,KAAKL,aAAc,EACnBN,EAAKJ,EAAMyD,IAAItB,EAAK,SAASZ,GAAI,OAAOA,EAAEoB,KAAOe,KAAK,QAaxD,OATAzD,EAAQ0D,UAAU,mBAAoB,KAAM,WAAYlD,EAAEkB,aAAaiC,MAAMnD,EAAGoD,aAEhF3D,EAAK4D,OAAOvD,GACXK,kBAAmB,WAAYH,EAAEG,kBAAkBgD,MAAMnD,EAAGoD,YAC5D5C,kBAAmB,WAAYR,EAAEQ,kBAAkB2C,MAAMnD,EAAGoD,YAC5D/B,cAAe,WAAYrB,EAAEqB,cAAc8B,MAAMnD,EAAGoD,YACpDR,WAAY,WAAY5C,EAAE4C,WAAWO,MAAMnD,EAAGoD,cAGxCpD","file":"../../mobile/bookmarkable.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/hash\",\r\n\t\"dijit/registry\",\r\n\t\"./TransitionEvent\",\r\n\t\"./View\",\r\n\t\"./viewRegistry\"\r\n], function(array, connect, lang, win, hash, registry, TransitionEvent, View, viewRegistry){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/bookmarkable\r\n\r\n\tvar b = {\r\n\t\t// summary:\r\n\t\t//\t\tUtilities to make the view transitions bookmarkable.\r\n\r\n\t\t// settingHash: [private] Boolean\r\n\t\t//\t\tWhether the browser URL needs to be updated to include the hash.\r\n\t\tsettingHash: false,\r\n\t\t\r\n\t\t// transitionInfo: Array\r\n\t\t//\t\tAn array containing information about the transition.\r\n\t\ttransitionInfo: [],\r\n\r\n\t\tgetTransitionInfo: function(/*String*/ fromViewId, /*String*/ toViewId){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array containing the transition information.\r\n\t\t\treturn this.transitionInfo[fromViewId.replace(/^#/, \"\") + \":\" + toViewId.replace(/^#/, \"\")]; // Array\r\n\t\t},\r\n\r\n\t\taddTransitionInfo: function(/*String*/ fromViewId, /*String*/ toViewId, /*Object*/args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds transition information.\r\n\t\t\tthis.transitionInfo[fromViewId.replace(/^#/, \"\") + \":\" + toViewId.replace(/^#/, \"\")] = args;\r\n\t\t},\r\n\r\n\t\tfindTransitionViews: function(/*String*/moveTo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSearches for a starting view and a destination view.\r\n\t\t\tif(!moveTo){ return []; }\r\n\t\t\tvar view = registry.byId(moveTo.replace(/^#/, \"\"));\r\n\t\t\tif(!view){ return []; }\r\n\t\t\tfor(var v = view.getParent(); v; v = v.getParent()){ // search for the topmost invisible parent node\r\n\t\t\t\tif(v.isVisible && !v.isVisible()){\r\n\t\t\t\t\tview = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// fromView, toView\r\n\t\t\treturn [view.getShowingView(), view]; // Array \r\n\t\t},\r\n\r\n\t\tonHashChange: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled on \"/dojo/hashchange\" events.\r\n\t\t\tif(this.settingHash){\r\n\t\t\t\tthis.settingHash = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar params = this.handleFragIds(value);\r\n\t\t\tparams.hashchange = true;\r\n\t\t\tnew TransitionEvent(win.body(), params).dispatch();\r\n\t\t},\r\n\r\n\t\thandleFragIds: function(/*String*/fragIds){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAnalyzes the given hash (fragment id).\r\n\t\t\t// description:\r\n\t\t\t//\t\tGiven a comma-separated list of view IDs, this method\r\n\t\t\t//\t\tsearches for a transition destination, and makes all the\r\n\t\t\t//\t\tviews in the hash visible.\r\n\r\n\t\t\tvar arr, moveTo;\r\n\t\t\tif(!fragIds){\r\n\t\t\t\tmoveTo = viewRegistry.initialView.id;\r\n\t\t\t\tarr = this.findTransitionViews(moveTo);\r\n\t\t\t}else{\r\n\t\t\t\tvar ids = fragIds.replace(/^#/, \"\").split(/,/);\r\n\t\t\t\tfor(var i = 0; i < ids.length; i++){\r\n\t\t\t\t\t// Search for a transition destination view.\r\n\r\n\t\t\t\t\tvar view = registry.byId(ids[i]);\r\n\r\n\t\t\t\t\t// Skip a visible view. Visible view can't be a destination candidate.\r\n\t\t\t\t\tif(view.isVisible()){ continue; }\r\n\r\n\t\t\t\t\t// Check if all the ancestors are in the fragIds.\r\n\t\t\t\t\t// If not, obviously the view was NOT visible before the previous transition.\r\n\t\t\t\t\t// That means the previous transition can't happen from that view,\r\n\t\t\t\t\t// which means the view can't be a destination.\r\n\t\t\t\t\tvar success = true;\r\n\t\t\t\t\tfor(var v = viewRegistry.getParentView(view); v; v = viewRegistry.getParentView(v)){\r\n\t\t\t\t\t\tif(array.indexOf(ids, v.id) === -1){\r\n\t\t\t\t\t\t\tsuccess = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!success){\r\n\t\t\t\t\t\t// Simply make the view visible without transition.\r\n\t\t\t\t\t\tarray.forEach(view.getSiblingViews(), function(v){\r\n\t\t\t\t\t\t\tv.domNode.style.display = (v === view) ? \"\" : \"none\";\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tarr = this.findTransitionViews(ids[i]);\r\n\t\t\t\t\tif(arr.length === 2){\r\n\t\t\t\t\t\tmoveTo = ids[i];\r\n\t\t\t\t\t\t// The destination found. But continue the loop to make\r\n\t\t\t\t\t\t// the other views in the fragIds visible.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar args = this.getTransitionInfo(arr[0].id, arr[1].id);\r\n\t\t\tvar dir = 1;\r\n\t\t\tif(!args){\r\n\t\t\t\targs = this.getTransitionInfo(arr[1].id, arr[0].id);\r\n\t\t\t\tdir = -1;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmoveTo: \"#\" + moveTo,\r\n\t\t\t\ttransitionDir: args ? args.transitionDir * dir : 1,\r\n\t\t\t\ttransition: args ? args.transition : \"none\"\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tsetFragIds: function(/*Widget*/toView){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the hash (fragment id) in the browser URL.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe hash value consists of one or more visible view ids\r\n\t\t\t//\t\tseparated with commas.\r\n\r\n\t\t\tvar arr = array.filter(viewRegistry.getViews(), function(v){ return v.isVisible(); });\r\n\t\t\tthis.settingHash = true;\r\n\t\t\thash(array.map(arr, function(v){ return v.id; }).join(\",\"));\r\n\t\t}\r\n\t};\r\n\r\n\tconnect.subscribe(\"/dojo/hashchange\", null, function(){ b.onHashChange.apply(b, arguments); });\r\n\r\n\tlang.extend(View, {\r\n\t\tgetTransitionInfo: function(){ b.getTransitionInfo.apply(b, arguments); },\r\n\t\taddTransitionInfo: function(){ b.addTransitionInfo.apply(b, arguments); },\r\n\t\thandleFragIds: function(){ b.handleFragIds.apply(b, arguments); },\r\n\t\tsetFragIds: function(){ b.setFragIds.apply(b, arguments); }\r\n\t});\r\n\r\n\treturn b;\r\n});\r\n"]}