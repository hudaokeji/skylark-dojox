{"version":3,"sources":["mobile/ScreenSizeAware.js"],"names":["define","kernel","array","config","connect","declare","lang","win","dom","registry","experimental","cls","splitterId","leftPaneId","rightPaneId","leftViewId","leftListId","constructor","options","mixin","this","subscribe","dim","transformUI","init","_initialized","splitter","byId","filter","findWidgets","body","c","declaredClass","indexOf","leftPane","getChildren","rightPane","leftView","containerNode","leftList","console","error","isPhone","_currentMode","getShowingView","firstView","selected","updateStateful","set","getDestinationId","item","moveTo","updateBackButton","forEach","id","view","heading","backButton","domNode","style","display","backBtnNode","updateTransition","transition","moveList","appendChild","showLeftView","show","showRightView","leftItemSelected","updateSelectedItem","items","length","deselectAll","mode","_instance","getInstance"],"mappings":"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","file":"../../mobile/ScreenSizeAware.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/config\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/dom\",\r\n\t\"dijit/registry\"\r\n], function(kernel, array, config, connect, declare, lang, win, dom, registry){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ScreenSizeAware\r\n\r\n\tkernel.experimental(\"dojox.mobile.ScreenSizeAware\"); // should consider support for other UI layout patterns\r\n\r\n\tvar cls = declare(\"dojox.mobile.ScreenSizeAware\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA module to make a screen size aware application.\r\n\t\t// description:\r\n\t\t//\t\tThis module helps for creating applications that transform their\r\n\t\t//\t\tUI layout according to the screen size. It assumes that the\r\n\t\t//\t\tapplication consists of two horizontally split panes, and the\r\n\t\t//\t\tleft pane has a list widget. If you require this module in such an\r\n\t\t//\t\tapplication, in a tablet-sized screen, the application shows a horizontally \r\n\t\t//\t\tsplit view whose left pane is a list widget.\r\n\t\t//\t\tIn a phone-sized screen, the application shows a list widget that fills the screen.\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\t<span data-dojo-type=\"dojox.mobile.ScreenSizeAware\"></span>\r\n\t\t// |\t<div data-dojo-type=\"dojox.mobile.FixedSplitter\" data-dojo-props='orientation:\"H\"'>\r\n\t\t// |\t  <div data-dojo-type=\"dojox.mobile.Container\" style=\"width:300px;\">\r\n\t\t// |\t    <div id=\"leftView\" data-dojo-type=\"dojox.mobile.ScrollableView\">\r\n\t\t// |\t      <h1 data-dojo-type=\"dojox.mobile.Heading\" data-dojo-props='fixed:\"top\"'>Left Pane</h1>\r\n\t\t// |\t      <ul data-dojo-type=\"dojox.mobile.EdgeToEdgeList\" data-dojo-props='stateful:true'>\r\n\t\t// |\t        <li data-dojo-type=\"dojox.mobile.ListItem\" data-dojo-props='label:\"View1\", moveTo:\"view1\"'></li>\r\n\t\t// |\t        ....\r\n\t\t// |\t      </ul>\r\n\t\t// |\t    </div>\r\n\t\t// |\t  </div>\r\n\t\t// |\t  <div data-dojo-type=\"dojox.mobile.Container\">\r\n\t\t// |\t    <div id=\"view1\" data-dojo-type=\"dojox.mobile.ScrollableView\">\r\n\t\t// |\t      <h1 data-dojo-type=\"dojox.mobile.Heading\" data-dojo-props='fixed:\"top\", back:\"Home\", moveTo:\"leftView\"'>Right Pane</h1>\r\n\t\t// |\t      ....\r\n\t\t// |\t    </div>\r\n\t\t// |\t  </div>\r\n\t\t// |\t</div>\r\n\r\n\t\t// splitterId: String\r\n\t\t//\t\tThe id of the FixedSplitter.\r\n\t\tsplitterId: \"\",\r\n\r\n\t\t// leftPaneId: String\r\n\t\t//\t\tThe id of the left pane.\r\n\t\tleftPaneId: \"\",\r\n\r\n\t\t// rightPaneId: String\r\n\t\t//\t\tThe id of the right pane.\r\n\t\trightPaneId: \"\",\r\n\r\n\t\t// leftViewId: String\r\n\t\t//\t\tThe id of the left View.\r\n\t\tleftViewId: \"\",\r\n\r\n\t\t// leftListId: String\r\n\t\t//\t\tThe id of the list widget in the left view.\r\n\t\tleftListId: \"\",\r\n\r\n\t\tconstructor: function(/*Object?*/options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a new instance of the class.\r\n\t\t\t// options:\r\n\t\t\t//\t\tContains properties to be set.\r\n\t\t\tif (options){\r\n\t\t\t\tlang.mixin(this, options);\r\n\t\t\t}\r\n\t\t\tconnect.subscribe(\"/dojox/mobile/screenSize/tablet\", this, function(dim){\r\n\t\t\t\tthis.transformUI(\"tablet\");\r\n\t\t\t});\r\n\t\t\tconnect.subscribe(\"/dojox/mobile/screenSize/phone\", this, function(dim){\r\n\t\t\t\tthis.transformUI(\"phone\");\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tinit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitializes the application.\r\n\t\t\tif(this._initialized){ return; }\r\n\t\t\tthis._initialized = true;\r\n\r\n\t\t\t// analyze the page structure\r\n\t\t\tthis.splitter = this.splitterId ? registry.byId(this.splitterId) :\r\n\t\t\t\tarray.filter(registry.findWidgets(win.body()),\r\n\t\t\t\t\tfunction(c){ return c.declaredClass.indexOf(\"Splitter\") !== -1; })[0];\r\n\t\t\tif(!this.splitter){\r\n\t\t\t\tconsole.error(\"Splitter not found.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.leftPane = this.leftPaneId ? registry.byId(this.leftPaneId) :\r\n\t\t\t\tthis.splitter.getChildren()[0];\r\n\t\t\tif(!this.leftPane){\r\n\t\t\t\tconsole.error(\"Left pane not found.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.rightPane = this.rightPaneId ? registry.byId(this.rightPaneId) :\r\n\t\t\t\tthis.splitter.getChildren()[1];\r\n\t\t\tif(!this.rightPane){\r\n\t\t\t\tconsole.error(\"Right pane not found.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.leftView = this.leftViewId ? registry.byId(this.leftViewId) :\r\n\t\t\t\tarray.filter(registry.findWidgets(this.leftPane.containerNode),\r\n\t\t\t\t\tfunction(c){ return c.declaredClass.indexOf(\"View\") !== -1; })[0];\r\n\t\t\tif(!this.leftView){\r\n\t\t\t\tconsole.error(\"Left view not found.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.leftList = this.leftListId ? registry.byId(this.leftListId) :\r\n\t\t\t\tarray.filter(registry.findWidgets(this.leftView.containerNode),\r\n\t\t\t\t\tfunction(c){ return c.declaredClass.indexOf(\"List\") !== -1 ||\r\n\t\t\t\t\t\t\t\t c.declaredClass.indexOf(\"IconContainer\") !== -1; })[0];\r\n\t\t\tif(!this.leftList){\r\n\t\t\t\tconsole.error(\"Left list not found.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tisPhone: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if the current mode set by transformUI(mode) is \"phone\".\r\n\t\t\treturn this._currentMode === \"phone\"; // Boolean\r\n\t\t},\r\n\r\n\t\tgetShowingView: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the view currently shown.\r\n\t\t\tvar firstView =\r\n\t\t\t\tarray.filter(this.rightPane.getChildren(), function(c){ return c.declaredClass.indexOf(\"View\") !== -1; })[0];\r\n\t\t\tif(!firstView){ return null; }\r\n\t\t\treturn firstView.getShowingView() ||\r\n\t\t\t\tarray.filter(this.rightPane.getChildren(), function(c){ return c.selected; })[0] ||\r\n\t\t\t\tfirstView;\r\n\t\t},\r\n\r\n\t\tupdateStateful: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the stateful property of the list widget in the left-side pane.\r\n\t\t\tthis.leftList.set(\"stateful\", !this.isPhone());\r\n\t\t},\r\n\r\n\t\tgetDestinationId: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the id of the target view of the given item.\r\n\t\t\treturn item.moveTo;\r\n\t\t},\r\n\r\n\t\tupdateBackButton: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the back button.\r\n\t\t\tarray.forEach(this.leftList.getChildren(), function(item){\r\n\t\t\t\tvar id = this.getDestinationId(item);\r\n\t\t\t\tvar view = registry.byId(id);\r\n\t\t\t\tif(view){\r\n\t\t\t\t\tvar heading = array.filter(view.getChildren(), function(c){ return c.declaredClass.indexOf(\"Heading\") !== -1; })[0];\r\n\t\t\t\t\tif(heading.backButton){\r\n\t\t\t\t\t\theading.backButton.domNode.style.display = this.isPhone() ? \"\" : \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(heading.backBtnNode){ // TODO: remove this block later\r\n\t\t\t\t\t\theading.backBtnNode.style.display = this.isPhone() ? \"\" : \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t},\r\n\r\n\t\tupdateTransition: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the transition property of the items in the left-side widget. \r\n\t\t\tvar transition = this.isPhone() ? \"slide\" : \"none\";\r\n\t\t\tarray.forEach(this.leftList.getChildren(), function(item){\r\n\t\t\t\titem.set(\"transition\", transition);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tmoveList: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPlaces the list widget. If the current mode is \"phone\", it \r\n\t\t\t//\t\tplaces the list widget in the right pane, otherwise in the left pane. \r\n\t\t\tvar to = this.isPhone() ? this.rightPane: this.leftPane;\r\n\t\t\tto.containerNode.appendChild(this.leftView.domNode);\r\n\t\t},\r\n\r\n\t\tshowLeftView: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tShows the left-side view.\r\n\t\t\tthis.leftPane.domNode.style.display = this.isPhone() ? \"none\" : \"\";\r\n\t\t\tthis.leftView.show();\r\n\t\t},\r\n\r\n\t\tshowRightView: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tShows the right-side view.\r\n\t\t\tif(this.isPhone()){ return; }\r\n\t\t\tvar view = this.getShowingView();\r\n\t\t\tif(view){\r\n\t\t\t\tview.show();\r\n\t\t\t}else{\r\n\t\t\t\tthis.leftItemSelected();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateSelectedItem: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the selected item.\r\n\t\t\tvar id;\r\n\t\t\tvar view = this.getShowingView();\r\n\t\t\tif(view && !this.isPhone()){\r\n\t\t\t\tid = view.id;\r\n\t\t\t}\r\n\t\t\tif(id){\r\n\t\t\t\tvar items = array.filter(this.leftList.getChildren(),\r\n\t\t\t\t\tfunction(item){ return this.getDestinationId(item) === id; }, this);\r\n\t\t\t\tif(items && items.length > 0){\r\n\t\t\t\t\titems[0].set(\"selected\", true);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.leftList.deselectAll && this.leftList.deselectAll();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tleftItemSelected: function(/*Event*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction called when an item in the left-side list is selected.\r\n\t\t},\r\n\r\n\t\ttransformUI: function(/*String*/mode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies an UI mode.\r\n\t\t\t// mode: \r\n\t\t\t//\t\tIf this argument is \"phone\", sets the UI in phone mode, otherwise \r\n\t\t\t//\t\tin tablet mode.\t\t \r\n\t\t\tthis.init();\r\n\t\t\tif(mode === this._currentMode){ return; }\r\n\t\t\tthis._currentMode = mode;\r\n\t\t\tthis.updateStateful();\r\n\t\t\tthis.updateBackButton();\r\n\t\t\tthis.updateTransition();\r\n\t\t\tthis.moveList();\r\n\t\t\tthis.showLeftView();\r\n\t\t\tthis.showRightView();\r\n\t\t\tthis.updateSelectedItem();\r\n\t\t}\r\n\t});\r\n\r\n\tcls._instance = null;\r\n\tcls.getInstance = function(){\r\n\t\tif(!cls._instance){\r\n\t\t\tcls._instance = new cls();\r\n\t\t}\r\n\t\treturn cls._instance;\r\n\t};\r\n\r\n\treturn cls;\r\n});\r\n"]}