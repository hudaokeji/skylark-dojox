{"version":3,"sources":["mobile/ValuePickerTimePicker.js"],"names":["define","declare","domClass","TimePickerMixin","ToolBarButton","ValuePicker","ValuePickerSlot","readOnly","is24h","hourPlusBtnLabel","hourPlusBtnLabelRef","minutePlusBtnLabel","minutePlusBtnLabelRef","hourMinusBtnLabel","hourMinusBtnLabelRef","minuteMinusBtnLabel","minuteMinusBtnLabelRef","slotClasses","slotProps","labelFrom","labelTo","style","width","zeroPad","buildRendering","p","this","_setBtnLabels","inherited","arguments","items","slots","_zero","slice","_pm","add","domNode","ampmButton","addChild","_conn","connect","set","to12h","a","h","ampm","to24h","onBtnClick","get","v","onValueChanged","_setIs24hAttr","length","concat","splice","_set","display","_getValuesAttr","_setValuesAttr","values","_getValues12Attr","_setValues12Attr","plusBtnLabel","plusBtnLabelRef","minusBtnLabel","minusBtnLabelRef"],"mappings":"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","file":"../../mobile/ValuePickerTimePicker.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/dom-class\",\r\n\t\"./_TimePickerMixin\",\r\n\t\"./ToolBarButton\",\r\n\t\"./ValuePicker\",\r\n\t\"./ValuePickerSlot\"\r\n], function(declare, domClass, TimePickerMixin, ToolBarButton, ValuePicker, ValuePickerSlot){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ValuePickerTimePicker\r\n\r\n\treturn declare(\"dojox.mobile.ValuePickerTimePicker\", [ValuePicker, TimePickerMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA ValuePicker-based time picker widget.\r\n\t\t// description:\r\n\t\t//\t\tValuePickerTimePicker is a time picker widget. It is a subclass of\r\n\t\t//\t\tdojox.mobile.ValuePicker. It has two slots: hour and minute.\r\n\r\n\t\t// readOnly: [const] Boolean\r\n\t\t//\t\tIf true, slot input fields are read-only. Only the plus and\r\n\t\t//\t\tminus buttons can be used to change the values.\r\n\t\t//\t\tNote that changing the value of the property after the widget\r\n\t\t//\t\tcreation has no effect.\r\n\t\treadOnly: false,\r\n\r\n\t\t// is24h: Boolean\r\n\t\t//\t\tIf true, the time is displayed in 24h format.\r\n\t\t//\t\tOtherwise, displayed in AM/PM mode.\r\n\t\tis24h: false,\r\n\r\n\t\t/*=====\r\n\t\t// values: Array\r\n\t\t//\t\tThe time value, as an array in 24h format: [hour24, minute] (ex. [\"22\",\"06\"]).\r\n\t\t//\t\tWarning: Do not use this property directly, make sure to call set() or get() methods.\r\n\t\tvalues: null,\r\n\r\n\t\t// values12: Array\r\n\t\t//\t\tThe time value, as an array in 12h format: [hour12, minute, ampm] (ex. [\"10\",\"06\",\"PM\"]).\r\n\t\t//\t\tWarning: Do not use this property directly, make sure to call set() or get() methods.\r\n\t\tvalues12: null,\r\n\t\t=====*/\r\n\t\t\r\n\t\t// hourPlusBtnLabel: String\r\n\t\t//\t\t(Accessibility) Label for hour plus button\r\n\t\thourPlusBtnLabel: \"\",\r\n\t\t\r\n\t\t// hourPlusBtnLabelRef: String\r\n\t\t//\t\t(Accessibility) Reference to a node id containing text label for the hour plus button\r\n\t\thourPlusBtnLabelRef: \"\",\r\n\t\t\r\n\t\t// minutePlusBtnLabel: String\r\n\t\t//\t\t(Accessibility) Label for minute plus button\r\n\t\tminutePlusBtnLabel: \"\",\r\n\t\t\r\n\t\t// minutePlusBtnLabelRef: String\r\n\t\t//\t\t(Accessibility) Reference to a node id containing text label for the minute plus button\r\n\t\tminutePlusBtnLabelRef: \"\",\r\n\t\t\r\n\t\t// hourMinusBtnLabel: String\r\n\t\t//\t\t(Accessibility) Label for hour minus button\r\n\t\thourMinusBtnLabel: \"\",\r\n\t\t\r\n\t\t// hourMinusBtnLabelRef: String\r\n\t\t//\t\t(Accessibility) Reference to a node id containing text label for the hour minus button\r\n\t\thourMinusBtnLabelRef: \"\",\r\n\t\t\r\n\t\t// minuteMinusBtnLabel: String\r\n\t\t//\t\t(Accessibility) Label for minute minus button\r\n\t\tminuteMinusBtnLabel: \"\",\r\n\t\t\r\n\t\t// minuteMinusBtnLabelRef: String\r\n\t\t//\t\t(Accessibility) Reference to a node id containing text label for the minute minus button\r\n\t\tminuteMinusBtnLabelRef: \"\",\r\n\r\n\t\tslotClasses: [\r\n\t\t\tValuePickerSlot,\r\n\t\t\tValuePickerSlot\r\n\t\t],\r\n\r\n\t\tslotProps: [\r\n\t\t\t{labelFrom:0, labelTo:23, style:{width:\"72px\"}},\r\n\t\t\t{labelFrom:0, labelTo:59, zeroPad:2, style:{width:\"72px\"}}\r\n\t\t],\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tvar p = this.slotProps;\r\n\t\t\tp[0].readOnly = p[1].readOnly = this.readOnly;\r\n\t\t\tthis._setBtnLabels(p);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tvar items = this.slots[0].items;\r\n\t\t\tthis._zero = items.slice(0, 1);\r\n\t\t\tthis._pm = items.slice(13);\r\n\r\n\t\t\tdomClass.add(this.domNode, \"mblValuePickerTimePicker\");\r\n\t\t\tdomClass.add(this.slots[0].domNode, \"mblValuePickerTimePickerHourSlot\");\r\n\t\t\tdomClass.add(this.slots[1].domNode, \"mblValuePickerTimePickerMinuteSlot\");\r\n\r\n\t\t\tthis.ampmButton = new ToolBarButton();\r\n\t\t\tthis.addChild(this.ampmButton);\r\n\t\t\tthis._conn = [\r\n\t\t\t\tthis.connect(this.ampmButton, \"onClick\", \"onBtnClick\")\r\n\t\t\t];\r\n\t\t\tthis.set(\"is24h\", this.is24h);\r\n\t\t},\r\n\r\n\t\tto12h: function(a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts a 24h time to a 12h time.\r\n\t\t\t// a: Array\r\n\t\t\t//\t\t[hour24, minute] (ex. [\"22\",\"06\"])\r\n\t\t\t// returns: Array\r\n\t\t\t//\t\t[hour12, minute, ampm] (ex. [\"10\",\"06\",\"PM\"])\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar h = a[0] - 0;\r\n\t\t\tvar ampm = h < 12 ? \"AM\" : \"PM\";\r\n\t\t\tif(h == 0){\r\n\t\t\t\th = 12;\r\n\t\t\t}else if(h > 12){\r\n\t\t\t\th = h - 12;\r\n\t\t\t}\r\n\t\t\treturn [h + \"\", a[1], ampm]; // [hour12, minute, ampm]\r\n\t\t},\r\n\r\n\t\tto24h: function(a){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConverts a 12h time to a 24h time.\r\n\t\t\t// a: Array\r\n\t\t\t//\t\t[hour12, minute, ampm] (ex. [\"10\",\"06\",\"PM\"])\r\n\t\t\t// returns: Array\r\n\t\t\t//\t\t[hour24, minute] (ex. [\"22\",\"06\"])\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar h = a[0] - 0;\r\n\t\t\tif(a[2] == \"AM\"){\r\n\t\t\t\th = h == 12 ? 0 : h; // 12AM is 0h\r\n\t\t\t}else{\r\n\t\t\t\th = h == 12 ? h : h + 12; // 12PM is 12h\r\n\t\t\t}\r\n\t\t\treturn [h + \"\", a[1]]; // [hour24, minute]\r\n\t\t},\r\n\r\n\t\tonBtnClick: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe handler for the AM/PM button.\r\n\t\t\tvar ampm = this.ampmButton.get(\"label\") == \"AM\" ? \"PM\" : \"AM\";\r\n\t\t\tvar v = this.get(\"values12\");\r\n\t\t\tv[2] = ampm;\r\n\t\t\tthis.set(\"values12\", v);\r\n\t\t\tif(this.onValueChanged){\r\n\t\t\t\tthis.onValueChanged(this.slots[0]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setIs24hAttr: function(/*Boolean*/is24h){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChanges the time display mode, 24h or 12h.\r\n\t\t\tvar items = this.slots[0].items;\r\n\t\t\tif(is24h && items.length != 24){ // 24h: 0 - 23\r\n\t\t\t\tthis.slots[0].items = this._zero.concat(items).concat(this._pm);\r\n\t\t\t}else if(!is24h && items.length != 12){ // 12h: 1 - 12\r\n\t\t\t\titems.splice(0, 1);\r\n\t\t\t\titems.splice(12);\r\n\t\t\t}\r\n\t\t\tvar v = this.get(\"values\");\r\n\t\t\tthis._set(\"is24h\", is24h);\r\n\t\t\tthis.ampmButton.domNode.style.display = is24h ? \"none\" : \"\";\r\n\t\t\tthis.set(\"values\", v);\r\n\t\t},\r\n\r\n\t\t_getValuesAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array of hour and minute in 24h format.\r\n\t\t\tvar v = this.inherited(arguments); // [hour, minute]\r\n\t\t\treturn this.is24h ? v : this.to24h([v[0], v[1], this.ampmButton.get(\"label\")]);\r\n\t\t},\r\n\r\n\t\t_setValuesAttr: function(/*Array*/values){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets an array of hour and minute in 24h format.\r\n\t\t\t// values:\r\n\t\t\t//\t\t[hour24, minute] (ex. [\"22\",\"06\"])\r\n\t\t\tif(this.is24h){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}else{\r\n\t\t\t\tvalues = this.to12h(values);\r\n\t\t\t\tthis.ampmButton.set(\"label\", values[2]);\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getValues12Attr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an array of hour and minute in 12h format.\r\n\t\t\treturn this.to12h(this._getValuesAttr());\r\n\t\t},\r\n\r\n\t\t_setValues12Attr: function(/*Array*/values){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets an array of hour and minute in 12h format.\r\n\t\t\t// values:\r\n\t\t\t//\t\t[hour12, minute, ampm] (ex. [\"10\",\"06\",\"PM\"])\r\n\t\t\tthis.set(\"values\", this.to24h(values));\r\n\t\t},\r\n\t\t\r\n\t\t_setBtnLabels: function(slotProps){\r\n\t\t    slotProps[0].plusBtnLabel = this.hourPlusBtnLabel; \r\n\t\t\tslotProps[0].plusBtnLabelRef = this.hourPlusBtnLabelRef;\r\n\t\t\tslotProps[0].minusBtnLabel = this.hourMinusBtnLabel;\r\n\t\t\tslotProps[0].minusBtnLabelRef = this.hourMinusBtnLabelRef;\r\n\t\t\tslotProps[1].plusBtnLabel = this.minutePlusBtnLabel;\r\n\t\t\tslotProps[1].plusBtnLabelRef = this.minutePlusBtnLabelRef;\r\n\t\t\tslotProps[1].minusBtnLabel = this.minuteMinusBtnLabel;\r\n\t\t\tslotProps[1].minusBtnLabelRef = this.minuteMinusBtnLabelRef;\r\n\t\t}\r\n\t});\r\n});\r\n"]}