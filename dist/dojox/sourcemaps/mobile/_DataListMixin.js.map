{"version":3,"sources":["mobile/_DataListMixin.js"],"names":["define","array","declare","registry","DataMixin","ListItem","has","BidiDataListMixin","_DataListMixin","append","itemMap","itemRenderer","buildRendering","this","inherited","arguments","store","setStore","query","queryOptions","createListItem","item","attr","arr","getLabelAttributes","labelAttr","forEach","getAttributes","name","getLabel","getValue","isLeftToRight","w","_widgetId","id","generateList","items","dataObject","getChildren","child","destroyRecursive","index","addChild","onComplete","request","onError","errorData","onSet","attribute","oldValue","newValue","onNew","newItem","parentInfo","onDelete","deletedItem","byId","onStoreClose","clearOnClose","refresh"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,iBACA,eACA,aACA,WACA,wDACE,SAASC,EAAOC,EAASC,EAAUC,EAAWC,EAAUC,EAAKC,GAK/D,IAAIC,EAAiBN,EAAQI,EAAI,aAAe,qCAAuC,8BAA+BF,GAWrHK,QAAQ,EAMRC,QAAS,KAITC,aAAcN,EAEdO,eAAgB,WAEf,GADAC,KAAKC,UAAUC,WACXF,KAAKG,MAAT,CACA,IAAIA,EAAQH,KAAKG,MACjBH,KAAKG,MAAQ,KACbH,KAAKI,SAASD,EAAOH,KAAKK,MAAOL,KAAKM,gBAGvCC,eAAgB,SAAmBC,GAGlC,IAAIC,KACAC,EAAMV,KAAKG,MAAMQ,mBAAmBH,GACpCI,EAAYF,EAAMA,EAAI,GAAK,KAC/BtB,EAAMyB,QAAQb,KAAKG,MAAMW,cAAcN,GAAO,SAASO,GACnDA,IAASH,EACXH,EAAY,MAAIT,KAAKG,MAAMa,SAASR,GAEpCC,EAAMT,KAAKH,SAAWG,KAAKH,QAAQkB,IAAUA,GAAQf,KAAKG,MAAMc,SAAST,EAAMO,IAE9Ef,MAIAP,EAAI,mBAAsC,IAAfgB,EAAU,MACvCA,EAAU,IAAIT,KAAKkB,gBAAkB,MAAQ,OAE9C,IAAIC,EAAI,IAAInB,KAAKF,aAAaW,GAE9B,OADAD,EAAKY,UAAYD,EAAEE,GACZF,GAERG,aAAc,SAAkBC,EAAiBC,GAG5CxB,KAAKJ,QACRR,EAAMyB,QAAQb,KAAKyB,cAAe,SAASC,GAC1CA,EAAMC,qBAGRvC,EAAMyB,QAAQU,EAAO,SAASf,EAAMoB,GACnC5B,KAAK6B,SAAS7B,KAAKO,eAAeC,KAChCR,OAGJ8B,WAAY,SAAkBP,EAAiBQ,GAG9C/B,KAAKsB,aAAaC,EAAOQ,IAG1BC,QAAS,SAAmBC,EAAqBF,KAKjDG,MAAO,SAAmB1B,EAAgB2B,EAA2BC,EAA0BC,KAK/FC,MAAO,SAAmBC,EAAoBC,GAG7CxC,KAAK6B,SAAS7B,KAAKO,eAAegC,KAGnCE,SAAU,SAAmBC,GAG5BpD,EAASqD,KAAKD,EAAYtB,WAAWO,oBAGtCiB,aAAc,SAAoBb,GAG9B/B,KAAKG,MAAM0C,cACb7C,KAAK8C,aAIR,OAAOrD,EAAI,aAAeJ,EAAQ,+BAAgCM,EAAgBD,IAAsBC","file":"../../mobile/_DataListMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dijit/registry\",\r\n\t\"./_DataMixin\",\r\n\t\"./ListItem\",\r\n\t\"dojo/has\",\r\n\t\"dojo/has!dojo-bidi?dojox/mobile/bidi/_StoreListMixin\"\r\n], function(array, declare, registry, DataMixin, ListItem, has, BidiDataListMixin){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/_DataListMixin\r\n\r\n\tvar _DataListMixin = declare(has(\"dojo-bidi\") ? \"dojox.mobile._NonBidiDataListMixin\" : \"dojox.mobile._DataListMixin\", DataMixin, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for widgets to generate the list items corresponding to\r\n\t\t//\t\tthe data provider object.\r\n\t\t// description:\r\n\t\t//\t\tBy mixing this class into the widgets, the list item nodes are\r\n\t\t//\t\tgenerated as the child nodes of the widget and automatically\r\n\t\t//\t\tregenerated whenever the corresponding data items are modified.\r\n\r\n\t\t// append: Boolean\r\n\t\t//\t\tIf true, refresh() does not clear the existing items.\r\n\t\tappend: false,\r\n\r\n\t\t// itemMap: Object\r\n\t\t//\t\tAn optional parameter mapping field names from the store to ItemList name.\r\n\t\t// example:\r\n\t\t//\t|\titemMap:{text:'label', profile_image_url:'icon' }\r\n\t\titemMap: null,\r\n\r\n\t\t// itemRenderer: ListItem class or subclass\r\n\t\t//\t\tThe class used to create list items. Default is dojox/mobile/ListItem.\r\n\t\titemRenderer: ListItem,\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.store){ return; }\r\n\t\t\tvar store = this.store;\r\n\t\t\tthis.store = null;\r\n\t\t\tthis.setStore(store, this.query, this.queryOptions);\r\n\t\t},\r\n\r\n\t\tcreateListItem: function(/*Object*/item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a list item widget.\r\n\t\t\tvar attr = {};\r\n\t\t\tvar arr = this.store.getLabelAttributes(item);\r\n\t\t\tvar labelAttr = arr ? arr[0] : null;\r\n\t\t\tarray.forEach(this.store.getAttributes(item), function(name){\r\n\t\t\t\tif(name === labelAttr){\r\n\t\t\t\t\tattr[\"label\"] = this.store.getLabel(item);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tattr[(this.itemMap && this.itemMap[name]) || name] = this.store.getValue(item, name);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// TODO this code should be like for textDir in the bidi mixin createListItem method\r\n\t\t\t// however for that dynamic set/get of the dir property must be supported first\r\n\t\t\t// that is why for now as a workaround we keep the code here\r\n\t\t\tif(has(\"dojo-bidi\") && typeof attr[\"dir\"] == \"undefined\"){\r\n\t\t\t\tattr[\"dir\"] = this.isLeftToRight() ? \"ltr\" : \"rtl\";\r\n\t\t\t}\r\n\t\t\tvar w = new this.itemRenderer(attr);\r\n\t\t\titem._widgetId = w.id;\r\n\t\t\treturn w;\r\n\t\t},\r\n\t\tgenerateList: function(/*Array*/items, /*Object*/dataObject){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGiven the data, generates a list of items.\r\n\t\t\tif(!this.append){\r\n\t\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\t\tchild.destroyRecursive();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tarray.forEach(items, function(item, index){\r\n\t\t\t\tthis.addChild(this.createListItem(item));\r\n\t\t\t}, this);\r\n\t\t},\r\n\r\n\t\tonComplete: function(/*Array*/items, /*Object*/request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn handler that is called after the fetch completes.\r\n\t\t\tthis.generateList(items, request);\r\n\t\t},\r\n\r\n\t\tonError: function(/*Object*/errorData, /*Object*/request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAn error handler.\r\n\t\t},\r\n\r\n\t\tonSet: function(/*Object*/item, /*String*/attribute, /*Object|Array*/oldValue, /*Object|Array*/newValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onSet().\r\n\t\t},\r\n\r\n\t\tonNew: function(/*Object*/newItem, /*Object?*/parentInfo){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onNew().\r\n\t\t\tthis.addChild(this.createListItem(newItem));\r\n\t\t},\r\n\r\n\t\tonDelete: function(/*Object*/deletedItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSee dojo/data/api/Notification.onDelete().\r\n\t\t\tregistry.byId(deletedItem._widgetId).destroyRecursive();\r\n\t\t},\r\n\r\n\t\tonStoreClose: function(/*Object?*/request){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRefresh list on close.\r\n\t\t\tif(this.store.clearOnClose){\r\n\t\t\t\tthis.refresh();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn has(\"dojo-bidi\") ? declare(\"dojox.mobile._DataListMixin\", [_DataListMixin, BidiDataListMixin]) : _DataListMixin;\t\r\n});\r\n"]}