{"version":3,"sources":["mobile/ScrollablePane.js"],"names":["define","array","declare","has","win","domConstruct","domStyle","common","ScrollableMixin","Pane","maskUtils","roundCornerMask","radius","baseClass","buildRendering","c","this","containerNode","create","className","style","width","scrollDir","inherited","arguments","srcNodeRef","i","len","childNodes","length","appendChild","firstChild","node","mask","maskNode","domNode","setSelectable","resize","createRoundMask","forEach","getChildren","child","isTopLevel","e","parent","getParent","offsetHeight","height","nodeType","r","getRadius","n","parseInt","get","item","offsetWidth","w","h","t","b","l"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,aACA,oBACA,qBACA,iBACA,WACA,qBACA,SACA,gBACE,SAASC,EAAOC,EAASC,EAAKC,EAAKC,EAAcC,EAAUC,EAAQC,EAAiBC,EAAMC,GAK5F,OAAOR,EAAQ,+BAAgCO,EAAMD,IAOpDG,iBAAiB,EAIjBC,OAAQ,EAIRC,UAAW,oBAEXC,eAAgB,WACf,IAAIC,EAAIC,KAAKC,cAAgBZ,EAAaa,OAAO,OAChDC,UAAW,6BACXC,OACCC,MAA0B,MAAnBL,KAAKM,UAAoB,OAAS,MAK3C,GAFAN,KAAKO,UAAUC,WAEZR,KAAKS,WAEP,IAAI,IAAIC,EAAI,EAAGC,EAAMX,KAAKS,WAAWG,WAAWC,OAAQH,EAAIC,EAAKD,IAChEV,KAAKC,cAAca,YAAYd,KAAKS,WAAWM,YAIjD,GAAGf,KAAKL,iBAAoBR,EAAI,cAAe,CAC9C,IAAI6B,EAAOhB,KAAKC,cACZgB,EAAOjB,KAAKkB,SAAW7B,EAAaa,OAAO,OAC9CC,UAAW,0BAEZc,EAAKH,YAAYE,GACjBjB,EAAIkB,EAGLjB,KAAKmB,QAAQL,YAAYf,GACzBR,EAAO6B,cAAcpB,KAAKC,eAAe,IAG1CoB,OAAQ,WAGPrB,KAAKO,UAAUC,WACZR,KAAKL,iBACPK,KAAKsB,kBAENrC,EAAMsC,QAAQvB,KAAKwB,cAAe,SAASC,GACvCA,EAAMJ,QAASI,EAAMJ,YAI1BK,WAAY,SAASC,GAIpB,IAAIC,EAAS5B,KAAK6B,WAAa7B,KAAK6B,YACpC,OAASD,IAAWA,EAAOP,QAG5BC,gBAAiB,WAMhB,GAAGnC,EAAI,cAAc,CACpB,GAAgC,GAA7Ba,KAAKmB,QAAQW,aAAoB,OACpC9B,KAAKkB,SAASd,MAAM2B,OAAS/B,KAAKmB,QAAQW,aAAe,KACzD,IAAIL,EAAQzB,KAAKwB,cAAc,GAC9BzB,EAAIC,KAAKC,cACTe,EAAOS,EAAQA,EAAMN,QACnBpB,EAAEa,WAAWC,OAAS,IAAmC,IAA7Bd,EAAEa,WAAW,GAAGoB,SAAiBjC,EAAEa,WAAW,GAAKb,EAAEa,WAAW,IAE3FqB,EAAIjC,KAAKJ,OACb,IAAIqC,EAAE,CACL,IAAIC,EAAY,SAASC,GAAI,OAAOC,SAAS9C,EAAS+C,IAAIF,EAAG,yBAC7D,GAAGV,GAEF,KADAQ,EAAIC,EAAUT,EAAMN,UACd,CACL,IAAImB,EAAOb,EAAMD,cAAc,GAC/BS,EAAIK,EAAOJ,EAAUI,EAAKnB,SAAW,QAGtCc,EAAIC,EAAUlB,GAIPhB,KAAKmB,QAAQoB,YAAtB,IACCC,EAAIxB,EAAKuB,YACTE,EAAIzC,KAAKmB,QAAQW,aACjBY,EAAIpD,EAAS+C,IAAIrB,EAAM,aACvB2B,EAAIrD,EAAS+C,IAAIrB,EAAM,gBACvB4B,EAAItD,EAAS+C,IAAIrB,EAAM,cAExBtB,EAAU4B,gBAAgBtB,KAAKkB,SAAU0B,EAAGF,EAAG,EAAGC,EAAGH,EAAGC,EAAIE,EAAID,EAAGT,EAAGA","file":"../../mobile/ScrollablePane.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/sniff\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-style\",\r\n\t\"./common\",\r\n\t\"./_ScrollableMixin\",\r\n\t\"./Pane\",\r\n\t\"./_maskUtils\"\r\n], function(array, declare, has, win, domConstruct, domStyle, common, ScrollableMixin, Pane, maskUtils){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ScrollablePane\r\n\r\n\treturn declare(\"dojox.mobile.ScrollablePane\", [Pane, ScrollableMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA pane that has the touch-scrolling capability.\r\n\r\n\t\t// roundCornerMask: Boolean\r\n\t\t//\t\tIf true, creates a rounded corner mask to clip corners of a \r\n\t\t//\t\tchild widget or DOM node. Works only on WebKit-based browsers.\r\n\t\troundCornerMask: false,\r\n\r\n\t\t// radius: Number\r\n\t\t//\t\tRadius of the rounded corner mask.\r\n\t\tradius: 0,\r\n\r\n\t\t// baseClass: String\r\n\t\t//\t\tThe name of the CSS class of this widget.\r\n\t\tbaseClass: \"mblScrollablePane\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tvar c = this.containerNode = domConstruct.create(\"div\", {\r\n\t\t\t\tclassName: \"mblScrollableViewContainer\",\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\twidth: this.scrollDir === \"v\" ? \"100%\" : \"\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(this.srcNodeRef){\r\n\t\t\t\t// reparent\r\n\t\t\t\tfor(var i = 0, len = this.srcNodeRef.childNodes.length; i < len; i++){\r\n\t\t\t\t\tthis.containerNode.appendChild(this.srcNodeRef.firstChild);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.roundCornerMask && (has(\"mask-image\"))){\r\n\t\t\t\tvar node = this.containerNode;\r\n\t\t\t\tvar mask = this.maskNode = domConstruct.create(\"div\", {\r\n\t\t\t\t\tclassName: \"mblScrollablePaneMask\"\r\n\t\t\t\t});\r\n\t\t\t\tmask.appendChild(node);\r\n\t\t\t\tc = mask;\r\n\t\t\t}\r\n\r\n\t\t\tthis.domNode.appendChild(c);\r\n\t\t\tcommon.setSelectable(this.containerNode, false);\r\n\t\t},\r\n\r\n\t\tresize: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalls resize() of each child widget.\r\n\t\t\tthis.inherited(arguments); // scrollable#resize() will be called\r\n\t\t\tif(this.roundCornerMask){\r\n\t\t\t\tthis.createRoundMask();\r\n\t\t\t}\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tif(child.resize){ child.resize(); }\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tisTopLevel: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if this is a top-level widget.\r\n\t\t\t//\t\tOverrides dojox/mobile/scrollable.\r\n\t\t\tvar parent = this.getParent && this.getParent();\r\n\t\t\treturn (!parent || !parent.resize); // top level widget\r\n\t\t},\r\n\r\n\t\tcreateRoundMask: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a rounded corner rectangle mask.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCreates a rounded corner rectangle mask.\r\n\t\t\t//\t\tThis function works only on WebKit-based browsers.\r\n\t\t\tif(has(\"mask-image\")){\r\n\t\t\t\tif(this.domNode.offsetHeight == 0){ return; } // in a hidden view\r\n\t\t\t\tthis.maskNode.style.height = this.domNode.offsetHeight + \"px\";\r\n\t\t\t\tvar child = this.getChildren()[0],\r\n\t\t\t\t\tc = this.containerNode,\r\n\t\t\t\t\tnode = child ? child.domNode :\r\n\t\t\t\t\t\t(c.childNodes.length > 0 && (c.childNodes[0].nodeType === 1 ? c.childNodes[0] : c.childNodes[1]));\r\n\r\n\t\t\t\tvar r = this.radius;\r\n\t\t\t\tif(!r){\r\n\t\t\t\t\tvar getRadius = function(n){ return parseInt(domStyle.get(n, \"borderTopLeftRadius\")); };\r\n\t\t\t\t\tif(child){\r\n\t\t\t\t\t\tr = getRadius(child.domNode);\r\n\t\t\t\t\t\tif(!r){\r\n\t\t\t\t\t\t\tvar item = child.getChildren()[0];\r\n\t\t\t\t\t\t\tr = item ? getRadius(item.domNode) : 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tr = getRadius(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pw = this.domNode.offsetWidth, // pane width\r\n\t\t\t\t\tw = node.offsetWidth,\r\n\t\t\t\t\th = this.domNode.offsetHeight,\r\n\t\t\t\t\tt = domStyle.get(node, \"marginTop\"),\r\n\t\t\t\t\tb = domStyle.get(node, \"marginBottom\"),\r\n\t\t\t\t\tl = domStyle.get(node, \"marginLeft\");\r\n\t\t\t\t\r\n\t\t\t\tmaskUtils.createRoundMask(this.maskNode, l, t, 0, b, w, h - b - t, r, r);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}