{"version":3,"sources":["mobile/app/ImageView.js"],"names":["dojo","provide","experimental","require","declare","dojox","mobile","app","_Widget","zoom","zoomCenterX","zoomCenterY","maxZoom","autoZoomLevel","disableAutoZoom","disableSwipe","autoZoomEvent","_leftImg","_centerImg","_rightImg","_leftSmallImg","_centerSmallImg","_rightSmallImg","constructor","this","panX","panY","handleLoad","hitch","_updateAnimatedZoom","_updateAnimatedPan","_onAnimPanEnd","buildRendering","inherited","arguments","canvas","create","domNode","addClass","postCreate","size","marginBox","style","width","w","height","h","_this","connect","event","isAnimating","handleDragEnd","downX","targetTouches","clientX","downY","clientY","x","pageX","y","pageY","Math","abs","render","_loaded","set","pos","_abs","xRatio","yRatio","zoomTo","_anim","status","console","log","leftLoaded","rightLoaded","_baseWidth","moveTo","_animPanTo","fx","easing","expoOut","handleFlick","duration","direction","toImg","_moveDir","_switchImage","onChange","fromImg","toSmallImgName","toImgName","fromSmallImgName","fromImgName","_type","to","callback","_animCallback","Animation","curve","onAnimate","onEnd","play","amount","centerX","centerY","getContext","clearRect","_renderImg","smallImg","largeImg","panDir","img","cxt","baseWidth","baseHeight","_baseHeight","desiredWidth","desiredHeight","destWidth","min","destHeight","sourceWidth","dispWidth","sourceHeight","dispHeight","floor","max","sourceX","round","_centerX","sourceY","_centerY","destX","destY","oldDestWidth","oldSourceWidth","drawImage","e","_setZoomAttr","_setZoomCenterXAttr","value","_setZoomCenterYAttr","_setZoomCenterAttr","_setAnimatedZoomAttr","_onAnimEnd","_setCenterUrlAttr","urlOrObj","_setImage","_setLeftUrlAttr","_setRightUrlAttr","name","smallUrl","largeUrl","isString","large","small","_src","Image","_conn","_isSmall","src","evt","target","disconnect","onLoad","type","url","isSmall"],"mappings":"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","file":"../../../mobile/app/ImageView.js","sourcesContent":["dojo.provide(\"dojox.mobile.app.ImageView\");\r\ndojo.experimental(\"dojox.mobile.app.ImageView\");\r\ndojo.require(\"dojox.mobile.app._Widget\");\r\n\r\ndojo.require(\"dojo.fx.easing\");\r\n\r\ndojo.declare(\"dojox.mobile.app.ImageView\", dojox.mobile.app._Widget, {\r\n\r\n\t// zoom: Number\r\n\t//\t\tThe current level of zoom.  This should not be set manually.\r\n\tzoom: 1,\r\n\r\n\t// zoomCenterX: Number\r\n\t//\t\tThe X coordinate in the image where the zoom is focused\r\n\tzoomCenterX: 0,\r\n\r\n\t// zoomCenterY: Number\r\n\t//\t\tThe Y coordinate in the image where the zoom is focused\r\n\tzoomCenterY: 0,\r\n\r\n\t// maxZoom: Number\r\n\t//\t\tThe highest degree to which an image can be zoomed.  For example,\r\n\t//\t\ta maxZoom of 5 means that the image will be 5 times larger than normal\r\n\tmaxZoom: 5,\r\n\r\n\t// autoZoomLevel: Number\r\n\t//\t\tThe degree to which the image is zoomed when auto zoom is invoked.\r\n\t//\t\tThe higher the number, the more the image is zoomed in.\r\n\tautoZoomLevel: 3,\r\n\r\n\t// disableAutoZoom: Boolean\r\n\t//\t\tDisables auto zoom\r\n\tdisableAutoZoom: false,\r\n\r\n\t// disableSwipe: Boolean\r\n\t//\t\tDisables the users ability to swipe from one image to the next.\r\n\tdisableSwipe: false,\r\n\r\n\t// autoZoomEvent: String\r\n\t//\t\tOverrides the default event listened to which invokes auto zoom\r\n\tautoZoomEvent: null,\r\n\r\n\t// _leftImg: Node\r\n\t//\t\tThe full sized image to the left\r\n\t_leftImg: null,\r\n\r\n\t// _centerImg: Node\r\n\t//\t\tThe full sized image in the center\r\n\t_centerImg: null,\r\n\r\n\t// _rightImg: Node\r\n\t//\t\tThe full sized image to the right\r\n\t_rightImg: null,\r\n\r\n\t// _leftImg: Node\r\n\t//\t\tThe small sized image to the left\r\n\t_leftSmallImg: null,\r\n\r\n\t// _centerImg: Node\r\n\t//\t\tThe small sized image in the center\r\n\t_centerSmallImg: null,\r\n\r\n\t// _rightImg: Node\r\n\t//\t\tThe small sized image to the right\r\n\t_rightSmallImg: null,\r\n\r\n\tconstructor: function(){\r\n\r\n\t\tthis.panX = 0;\r\n\t\tthis.panY = 0;\r\n\r\n\t\tthis.handleLoad = dojo.hitch(this, this.handleLoad);\r\n\t\tthis._updateAnimatedZoom = dojo.hitch(this, this._updateAnimatedZoom);\r\n\t\tthis._updateAnimatedPan = dojo.hitch(this, this._updateAnimatedPan);\r\n\t\tthis._onAnimPanEnd = dojo.hitch(this, this._onAnimPanEnd);\r\n\t},\r\n\r\n\tbuildRendering: function(){\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\tthis.canvas = dojo.create(\"canvas\", {}, this.domNode);\r\n\r\n\t\tdojo.addClass(this.domNode, \"mblImageView\");\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\tthis.size = dojo.marginBox(this.domNode);\r\n\r\n\t\tdojo.style(this.canvas, {\r\n\t\t\twidth: this.size.w + \"px\",\r\n\t\t\theight: this.size.h + \"px\"\r\n\t\t});\r\n\t\tthis.canvas.height = this.size.h;\r\n\t\tthis.canvas.width = this.size.w;\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\t// Listen to the mousedown/touchstart event.  Record the position\r\n\t\t// so we can use it to pan the image.\r\n\t\tthis.connect(this.domNode, \"onmousedown\", function(event){\r\n\t\t\tif(_this.isAnimating()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(_this.panX){\r\n\t\t\t\t_this.handleDragEnd();\r\n\t\t\t}\r\n\r\n\t\t\t_this.downX = event.targetTouches ? event.targetTouches[0].clientX : event.clientX;\r\n\t\t\t_this.downY = event.targetTouches ? event.targetTouches[0].clientY : event.clientY;\r\n\t\t});\r\n\r\n\t\t// record the movement of the mouse.\r\n\t\tthis.connect(this.domNode, \"onmousemove\", function(event){\r\n\t\t\tif(_this.isAnimating()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif((!_this.downX && _this.downX !== 0) || (!_this.downY && _this.downY !== 0)){\r\n\t\t\t\t// If the touch didn't begin on this widget, ignore the movement\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif((!_this.disableSwipe && _this.zoom == 1)\r\n\t\t\t\t|| (!_this.disableAutoZoom && _this.zoom != 1)){\r\n\t\t\t\tvar x = event.targetTouches ?\r\n\t\t\t\t\t\t\tevent.targetTouches[0].clientX : event.pageX;\r\n\t\t\t\tvar y = event.targetTouches ?\r\n\t\t\t\t\t\t\tevent.targetTouches[0].clientY : event.pageY;\r\n\r\n\t\t\t\t_this.panX = x - _this.downX;\r\n\t\t\t\t_this.panY = y - _this.downY;\r\n\r\n\t\t\t\tif(_this.zoom == 1){\r\n\t\t\t\t\t// If not zoomed in, then try to move to the next or prev image\r\n\t\t\t\t\t// but only if the mouse has moved more than 10 pixels\r\n\t\t\t\t\t// in the X direction\r\n\t\t\t\t\tif(Math.abs(_this.panX) > 10){\r\n\t\t\t\t\t\t_this.render();\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// If zoomed in, pan the image if the mouse has moved more\r\n\t\t\t\t\t// than 10 pixels in either direction.\r\n\t\t\t\t\tif(Math.abs(_this.panX) > 10 || Math.abs(_this.panY) > 10){\r\n\t\t\t\t\t\t_this.render();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.connect(this.domNode, \"onmouseout\", function(event){\r\n\t\t\tif(!_this.isAnimating() && _this.panX){\r\n\t\t\t\t_this.handleDragEnd();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.connect(this.domNode, \"onmouseover\", function(event){\r\n\t\t\t_this.downX = _this.downY = null;\r\n\t\t});\r\n\r\n\t\t// Set up AutoZoom, which zooms in a fixed amount when the user taps\r\n\t\t// a part of the canvas\r\n\t\tthis.connect(this.domNode, \"onclick\", function(event){\r\n\t\t\tif(_this.isAnimating()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(_this.downX == null || _this.downY == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar x = (event.targetTouches ?\r\n\t\t\t\t\t\tevent.targetTouches[0].clientX : event.pageX);\r\n\t\t\tvar y = (event.targetTouches ?\r\n\t\t\t\t\t\tevent.targetTouches[0].clientY : event.pageY);\r\n\r\n\t\t\t// If the mouse/finger has moved more than 14 pixels from where it\r\n\t\t\t// started, do not treat it as a click.  It is a drag.\r\n\t\t\tif(Math.abs(_this.panX) > 14 || Math.abs(_this.panY) > 14){\r\n\t\t\t\t_this.downX = _this.downY = null;\r\n\t\t\t\t_this.handleDragEnd();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t_this.downX = _this.downY = null;\r\n\r\n\t\t\tif(!_this.disableAutoZoom){\r\n\r\n\t\t\t\tif(!_this._centerImg || !_this._centerImg._loaded){\r\n\t\t\t\t\t// Do nothing until the image is loaded\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(_this.zoom != 1){\r\n\t\t\t\t\t_this.set(\"animatedZoom\", 1);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pos = dojo._abs(_this.domNode);\r\n\r\n\t\t\t\t// Translate the clicked point to a point on the source image\r\n\t\t\t\tvar xRatio = _this.size.w / _this._centerImg.width;\r\n\t\t\t\tvar yRatio = _this.size.h / _this._centerImg.height;\r\n\r\n\t\t\t\t// Do an animated zoom to the point which was clicked.\r\n\t\t\t\t_this.zoomTo(\r\n\t\t\t\t\t((x - pos.x) / xRatio) - _this.panX,\r\n\t\t\t\t\t((y - pos.y) / yRatio) - _this.panY,\r\n\t\t\t\t\t_this.autoZoomLevel);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Listen for Flick events\r\n\t\tdojo.connect(this.domNode, \"flick\", this, \"handleFlick\");\r\n\t},\r\n\r\n\tisAnimating: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns true if an animation is in progress, false otherwise.\r\n\t\treturn this._anim && this._anim.status() == \"playing\";\r\n\t},\r\n\r\n\thandleDragEnd: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHandles the end of a dragging event. If not zoomed in, it\r\n\t\t//\t\tdetermines if the next or previous image should be transitioned\r\n\t\t//\t\tto.\r\n\t\tthis.downX = this.downY = null;\r\n\t\tconsole.log(\"handleDragEnd\");\r\n\r\n\t\tif(this.zoom == 1){\r\n\t\t\tif(!this.panX){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar leftLoaded = (this._leftImg && this._leftImg._loaded)\r\n\t\t\t\t\t\t\t|| (this._leftSmallImg && this._leftSmallImg._loaded);\r\n\t\t\tvar rightLoaded = (this._rightImg && this._rightImg._loaded)\r\n\t\t\t\t\t\t\t|| (this._rightSmallImg && this._rightSmallImg._loaded);\r\n\r\n\t\t\t// Check if the drag has moved the image more than half its length.\r\n\t\t\t// If so, move to either the previous or next image.\r\n\t\t\tvar doMove =\r\n\t\t\t\t!(Math.abs(this.panX) < this._centerImg._baseWidth / 2) &&\r\n\t\t\t\t(\r\n\t\t\t\t\t(this.panX > 0 && leftLoaded ? 1 : 0) ||\r\n\t\t\t\t\t(this.panX < 0 && rightLoaded ? 1 : 0)\r\n\t\t\t\t);\r\n\r\n\r\n\t\t\tif(!doMove){\r\n\t\t\t\t// If not moving to another image, animate the sliding of the\r\n\t\t\t\t// image back into place.\r\n\t\t\t\tthis._animPanTo(0, dojo.fx.easing.expoOut, 700);\r\n\t\t\t}else{\r\n\t\t\t\t// Move to another image.\r\n\t\t\t\tthis.moveTo(this.panX);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(!this.panX && !this.panY){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Recenter the zoomed image based on where it was panned to\r\n\t\t\t// previously\r\n\t\t\tthis.zoomCenterX -= (this.panX / this.zoom);\r\n\t\t\tthis.zoomCenterY -= (this.panY / this.zoom);\r\n\r\n\t\t\tthis.panX = this.panY = 0;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thandleFlick: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tHandle a flick event.\r\n\t\tif(this.zoom == 1 && event.duration < 500){\r\n\t\t\t// Only handle quick flicks here, less than 0.5 seconds\r\n\r\n\t\t\t// If not zoomed in, then check if we should move to the next photo\r\n\t\t\t// or not\r\n\t\t\tif(event.direction == \"ltr\"){\r\n\t\t\t\tthis.moveTo(1);\r\n\t\t\t}else if(event.direction == \"rtl\"){\r\n\t\t\t\tthis.moveTo(-1);\r\n\t\t\t}\r\n\t\t\t// If an up or down flick occurs, it means nothing so ignore it\r\n\t\t\tthis.downX = this.downY = null;\r\n\t\t}\r\n\t},\r\n\r\n\tmoveTo: function(direction){\r\n\t\tdirection = direction > 0 ? 1 : -1;\r\n\t\tvar toImg;\r\n\r\n\t\tif(direction < 1){\r\n\t\t\tif(this._rightImg && this._rightImg._loaded){\r\n\t\t\t\ttoImg = this._rightImg;\r\n\t\t\t}else if(this._rightSmallImg && this._rightSmallImg._loaded){\r\n\t\t\t\ttoImg = this._rightSmallImg;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(this._leftImg && this._leftImg._loaded){\r\n\t\t\t\ttoImg = this._leftImg;\r\n\t\t\t}else if(this._leftSmallImg && this._leftSmallImg._loaded){\r\n\t\t\t\ttoImg = this._leftSmallImg;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._moveDir = direction;\r\n\t\tvar _this = this;\r\n\r\n\t\tif(toImg && toImg._loaded){\r\n\t\t\t// If the image is loaded, make a linear animation to show it\r\n\t\t\tthis._animPanTo(this.size.w * direction, null, 500, function(){\r\n\t\t\t\t_this.panX = 0;\r\n\t\t\t\t_this.panY = 0;\r\n\r\n\t\t\t\tif(direction < 0){\r\n\t\t\t\t\t// Moving to show the right image\r\n\t\t\t\t\t_this._switchImage(\"left\", \"right\");\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// Moving to show the left image\r\n\t\t\t\t\t_this._switchImage(\"right\", \"left\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_this.render();\r\n\t\t\t\t_this.onChange(direction * -1);\r\n\t\t\t});\r\n\r\n\t\t}else{\r\n\t\t\t// If the next image is not loaded, make an animation to\r\n\t\t\t// move the center image to half the width of the widget and back\r\n\t\t\t// again\r\n\r\n\t\t\tconsole.log(\"moveTo image not loaded!\", toImg);\r\n\r\n\t\t\tthis._animPanTo(0, dojo.fx.easing.expoOut, 700);\r\n\t\t}\r\n\t},\r\n\r\n\t_switchImage: function(toImg, fromImg){\r\n\t\tvar toSmallImgName = \"_\" + toImg + \"SmallImg\";\r\n\t\tvar toImgName = \"_\" + toImg + \"Img\";\r\n\r\n\t\tvar fromSmallImgName = \"_\" + fromImg + \"SmallImg\";\r\n\t\tvar fromImgName = \"_\" + fromImg + \"Img\";\r\n\r\n\t\tthis[toImgName] = this._centerImg;\r\n\t\tthis[toSmallImgName] = this._centerSmallImg;\r\n\r\n\t\tthis[toImgName]._type = toImg;\r\n\r\n\t\tif(this[toSmallImgName]){\r\n\t\t\tthis[toSmallImgName]._type = toImg;\r\n\t\t}\r\n\r\n\t\tthis._centerImg = this[fromImgName];\r\n\t\tthis._centerSmallImg = this[fromSmallImgName];\r\n\t\tthis._centerImg._type = \"center\";\r\n\r\n\t\tif(this._centerSmallImg){\r\n\t\t\tthis._centerSmallImg._type = \"center\";\r\n\t\t}\r\n\t\tthis[fromImgName] = this[fromSmallImgName] = null;\r\n\t},\r\n\r\n\t_animPanTo: function(to, easing, duration, callback){\r\n\t\tthis._animCallback = callback;\r\n\t\tthis._anim = new dojo.Animation({\r\n\t\t\tcurve: [this.panX, to],\r\n\t\t\tonAnimate: this._updateAnimatedPan,\r\n\t\t\tduration: duration || 500,\r\n\t\t\teasing: easing,\r\n\t\t\tonEnd: this._onAnimPanEnd\r\n\t\t});\r\n\r\n\t\tthis._anim.play();\r\n\t\treturn this._anim;\r\n\t},\r\n\r\n\tonChange: function(direction){\r\n\t\t// summary:\r\n\t\t//\t\tStub function that can be listened to in order to provide\r\n\t\t//\t\tnew images when the displayed image changes\r\n\t},\r\n\r\n\t_updateAnimatedPan: function(amount){\r\n\t\tthis.panX = amount;\r\n\t\tthis.render();\r\n\t},\r\n\r\n\t_onAnimPanEnd: function(){\r\n\t\tthis.panX = this.panY = 0;\r\n\r\n\t\tif(this._animCallback){\r\n\t\t\tthis._animCallback();\r\n\t\t}\r\n\t},\r\n\r\n\tzoomTo: function(centerX, centerY, zoom){\r\n\t\tthis.set(\"zoomCenterX\", centerX);\r\n\t\tthis.set(\"zoomCenterY\", centerY);\r\n\r\n\t\tthis.set(\"animatedZoom\", zoom);\r\n\t},\r\n\r\n\trender: function(){\r\n\t\tvar cxt = this.canvas.getContext('2d');\r\n\r\n\t\tcxt.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\t\t// Render the center image\r\n\t\tthis._renderImg(\r\n\t\t\tthis._centerSmallImg,\r\n\t\t\tthis._centerImg,\r\n\t\t\tthis.zoom == 1 ? (this.panX < 0 ? 1 : this.panX > 0 ? -1 : 0) : 0);\r\n\r\n\t\tif(this.zoom == 1 && this.panX != 0){\r\n\t\t\tif(this.panX > 0){\r\n\t\t\t\t// Render the left image, showing the right side of it\r\n\t\t\t\tthis._renderImg(this._leftSmallImg, this._leftImg, 1);\r\n\t\t\t}else{\r\n\t\t\t\t// Render the right image, showing the left side of it\r\n\t\t\t\tthis._renderImg(this._rightSmallImg, this._rightImg, -1);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_renderImg: function(smallImg, largeImg, panDir){\r\n\t\t// summary:\r\n\t\t//\t\tRenders a single image\r\n\r\n\r\n\t\t// If zoomed, we just display the center img\r\n\t\tvar img = (largeImg && largeImg._loaded) ? largeImg : smallImg;\r\n\r\n\t\tif(!img || !img._loaded){\r\n\t\t\t// If neither the large or small image is loaded, display nothing\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar cxt = this.canvas.getContext('2d');\r\n\r\n\t\tvar baseWidth = img._baseWidth;\r\n\t\tvar baseHeight = img._baseHeight;\r\n\r\n\t\t// Calculate the size the image would be if there were no bounds\r\n\t\tvar desiredWidth = baseWidth * this.zoom;\r\n\t\tvar desiredHeight = baseHeight * this.zoom;\r\n\r\n\t\t// Calculate the actual size of the viewable image\r\n\t\tvar destWidth = Math.min(this.size.w, desiredWidth);\r\n\t\tvar destHeight = Math.min(this.size.h, desiredHeight);\r\n\r\n\r\n\t\t// Calculate the size of the window on the original image to use\r\n\t\tvar sourceWidth = this.dispWidth = img.width * (destWidth / desiredWidth);\r\n\t\tvar sourceHeight = this.dispHeight = img.height * (destHeight / desiredHeight);\r\n\r\n\t\tvar zoomCenterX = this.zoomCenterX - (this.panX / this.zoom);\r\n\t\tvar zoomCenterY = this.zoomCenterY - (this.panY / this.zoom);\r\n\r\n\t\t// Calculate where the center of the view should be\r\n\t\tvar centerX = Math.floor(Math.max(sourceWidth / 2,\r\n\t\t\t\tMath.min(img.width - sourceWidth / 2, zoomCenterX)));\r\n\t\tvar centerY = Math.floor(Math.max(sourceHeight / 2,\r\n\t\t\t\tMath.min(img.height - sourceHeight / 2, zoomCenterY)));\r\n\r\n\r\n\t\tvar sourceX = Math.max(0,\r\n\t\t\tMath.round((img.width - sourceWidth)/2 + (centerX - img._centerX)) );\r\n\t\tvar sourceY = Math.max(0,\r\n\t\t\tMath.round((img.height - sourceHeight) / 2 + (centerY - img._centerY))\r\n\t\t\t\t\t\t);\r\n\r\n\t\tvar destX = Math.round(Math.max(0, this.canvas.width - destWidth)/2);\r\n\t\tvar destY = Math.round(Math.max(0, this.canvas.height - destHeight)/2);\r\n\r\n\t\tvar oldDestWidth = destWidth;\r\n\t\tvar oldSourceWidth = sourceWidth;\r\n\r\n\t\tif(this.zoom == 1 && panDir && this.panX){\r\n\r\n\t\t\tif(this.panX < 0){\r\n\t\t\t\tif(panDir > 0){\r\n\t\t\t\t\t// If the touch is moving left, and the right side of the\r\n\t\t\t\t\t// image should be shown, then reduce the destination width\r\n\t\t\t\t\t// by the absolute value of panX\r\n\t\t\t\t\tdestWidth -= Math.abs(this.panX);\r\n\t\t\t\t\tdestX = 0;\r\n\t\t\t\t}else if(panDir < 0){\r\n\t\t\t\t\t// If the touch is moving left, and the left side of the\r\n\t\t\t\t\t// image should be shown, then set the displayed width\r\n\t\t\t\t\t// to the absolute value of panX, less some pixels for\r\n\t\t\t\t\t// a padding between images\r\n\t\t\t\t\tdestWidth = Math.max(1, Math.abs(this.panX) - 5);\r\n\t\t\t\t\tdestX = this.size.w - destWidth;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(panDir > 0){\r\n\t\t\t\t\t// If the touch is moving right, and the right side of the\r\n\t\t\t\t\t// image should be shown, then set the destination width\r\n\t\t\t\t\t// to the absolute value of the pan, less some pixels for\r\n\t\t\t\t\t// padding\r\n\t\t\t\t\tdestWidth = Math.max(1, Math.abs(this.panX) - 5);\r\n\t\t\t\t\tdestX = 0;\r\n\t\t\t\t}else if(panDir < 0){\r\n\t\t\t\t\t// If the touch is moving right, and the left side of the\r\n\t\t\t\t\t// image should be shown, then reduce the destination width\r\n\t\t\t\t\t// by the widget width minus the absolute value of panX\r\n\t\t\t\t\tdestWidth -= Math.abs(this.panX);\r\n\t\t\t\t\tdestX = this.size.w - destWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsourceWidth = Math.max(1,\r\n\t\t\t\t\t\tMath.floor(sourceWidth * (destWidth / oldDestWidth)));\r\n\r\n\t\t\tif(panDir > 0){\r\n\t\t\t\t// If the right side of the image should be displayed, move\r\n\t\t\t\t// the sourceX to be the width of the image minus the difference\r\n\t\t\t\t// between the original sourceWidth and the new sourceWidth\r\n\t\t\t\tsourceX = (sourceX + oldSourceWidth) - (sourceWidth);\r\n\t\t\t}\r\n\t\t\tsourceX = Math.floor(sourceX);\r\n\t\t}\r\n\r\n\t\ttry{\r\n\r\n\t\t\t// See https://developer.mozilla.org/en/Canvas_tutorial/Using_images\r\n\t\t\tcxt.drawImage(\r\n\t\t\t\timg,\r\n\t\t\t\tMath.max(0, sourceX),\r\n\t\t\t\tsourceY,\r\n\t\t\t\tMath.min(oldSourceWidth, sourceWidth),\r\n\t\t\t\tsourceHeight,\r\n\t\t\t\tdestX, \t// Xpos\r\n\t\t\t\tdestY, // Ypos\r\n\t\t\t\tMath.min(oldDestWidth, destWidth),\r\n\t\t\t\tdestHeight\r\n\t\t\t);\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(\"Caught Error\",e,\r\n\r\n\t\t\t\t\t\"type=\", img._type,\r\n\t\t\t\t\t\"oldDestWidth = \", oldDestWidth,\r\n\t\t\t\t\t\"destWidth\", destWidth,\r\n\t\t\t\t\t\"destX\", destX\r\n\t\t\t\t\t, \"oldSourceWidth=\",oldSourceWidth,\r\n\t\t\t\t\t\"sourceWidth=\", sourceWidth,\r\n\t\t\t\t\t\"sourceX = \" + sourceX\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\r\n\t_setZoomAttr: function(amount){\r\n\t\tthis.zoom = Math.min(this.maxZoom, Math.max(1, amount));\r\n\r\n\t\tif(this.zoom == 1\r\n\t\t\t\t&& this._centerImg\r\n\t\t\t\t&& this._centerImg._loaded){\r\n\r\n\t\t\tif(!this.isAnimating()){\r\n\t\t\t\tthis.zoomCenterX = this._centerImg.width / 2;\r\n\t\t\t\tthis.zoomCenterY = this._centerImg.height / 2;\r\n\t\t\t}\r\n\t\t\tthis.panX = this.panY = 0;\r\n\t\t}\r\n\r\n\t\tthis.render();\r\n\t},\r\n\r\n\t_setZoomCenterXAttr: function(value){\r\n\t\tif(value != this.zoomCenterX){\r\n\t\t\tif(this._centerImg && this._centerImg._loaded){\r\n\t\t\t\tvalue = Math.min(this._centerImg.width, value);\r\n\t\t\t}\r\n\t\t\tthis.zoomCenterX = Math.max(0, Math.round(value));\r\n\t\t}\r\n\t},\r\n\r\n\t_setZoomCenterYAttr: function(value){\r\n\t\tif(value != this.zoomCenterY){\r\n\t\t\tif(this._centerImg && this._centerImg._loaded){\r\n\t\t\t\tvalue = Math.min(this._centerImg.height, value);\r\n\t\t\t}\r\n\t\t\tthis.zoomCenterY = Math.max(0, Math.round(value));\r\n\t\t}\r\n\t},\r\n\r\n\t_setZoomCenterAttr: function(value){\r\n\t\tif(value.x != this.zoomCenterX || value.y != this.zoomCenterY){\r\n\t\t\tthis.set(\"zoomCenterX\", value.x);\r\n\t\t\tthis.set(\"zoomCenterY\", value.y);\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t},\r\n\r\n\t_setAnimatedZoomAttr: function(amount){\r\n\t\tif(this._anim && this._anim.status() == \"playing\"){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._anim = new dojo.Animation({\r\n\t\t\tcurve: [this.zoom, amount],\r\n\t\t\tonAnimate: this._updateAnimatedZoom,\r\n\t\t\tonEnd: this._onAnimEnd\r\n\t\t});\r\n\r\n\t\tthis._anim.play();\r\n\t},\r\n\r\n\t_updateAnimatedZoom: function(amount){\r\n\t\tthis._setZoomAttr(amount);\r\n\t},\r\n\r\n\t_setCenterUrlAttr: function(urlOrObj){\r\n\t\tthis._setImage(\"center\", urlOrObj);\r\n\t},\r\n\t_setLeftUrlAttr: function(urlOrObj){\r\n\t\tthis._setImage(\"left\", urlOrObj);\r\n\t},\r\n\t_setRightUrlAttr: function(urlOrObj){\r\n\t\tthis._setImage(\"right\", urlOrObj);\r\n\t},\r\n\r\n\t_setImage: function(name, urlOrObj){\r\n\t\tvar smallUrl = null;\r\n\r\n\t\tvar largeUrl = null;\r\n\r\n\t\tif(dojo.isString(urlOrObj)){\r\n\t\t\t// If the argument is a string, then just load the large url\r\n\t\t\tlargeUrl = urlOrObj;\r\n\t\t}else{\r\n\t\t\tlargeUrl = urlOrObj.large;\r\n\t\t\tsmallUrl = urlOrObj.small;\r\n\t\t}\r\n\r\n\t\tif(this[\"_\" + name + \"Img\"] && this[\"_\" + name + \"Img\"]._src == largeUrl){\r\n\t\t\t// Identical URL, ignore it\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Just do the large image for now\r\n\t\tvar largeImg = this[\"_\" + name + \"Img\"] = new Image();\r\n\t\tlargeImg._type = name;\r\n\t\tlargeImg._loaded = false;\r\n\t\tlargeImg._src = largeUrl;\r\n\t\tlargeImg._conn = dojo.connect(largeImg, \"onload\", this.handleLoad);\r\n\r\n\t\tif(smallUrl){\r\n\t\t\t// If a url to a small version of the image has been provided,\r\n\t\t\t// load that image first.\r\n\t\t\tvar smallImg = this[\"_\" + name + \"SmallImg\"] = new Image();\r\n\t\t\tsmallImg._type = name;\r\n\t\t\tsmallImg._loaded = false;\r\n\t\t\tsmallImg._conn = dojo.connect(smallImg, \"onload\", this.handleLoad);\r\n\t\t\tsmallImg._isSmall = true;\r\n\t\t\tsmallImg._src = smallUrl;\r\n\t\t\tsmallImg.src = smallUrl;\r\n\t\t}\r\n\r\n\t\t// It's important that the large url's src is set after the small image\r\n\t\t// to ensure it's loaded second.\r\n\t\tlargeImg.src = largeUrl;\r\n\t},\r\n\r\n\thandleLoad: function(evt){\r\n\t\t// summary:\r\n\t\t//\t\tHandles the loading of an image, both the large and small\r\n\t\t//\t\tversions.  A render is triggered as a result of each image load.\r\n\r\n\t\tvar img = evt.target;\r\n\t\timg._loaded = true;\r\n\r\n\t\tdojo.disconnect(img._conn);\r\n\r\n\t\tvar type = img._type;\r\n\r\n\t\tswitch(type){\r\n\t\t\tcase \"center\":\r\n\t\t\t\tthis.zoomCenterX = img.width / 2;\r\n\t\t\t\tthis.zoomCenterY = img.height / 2;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tvar height = img.height;\r\n\t\tvar width = img.width;\r\n\r\n\t\tif(width / this.size.w < height / this.size.h){\r\n\t\t\t// Fit the height to the height of the canvas\r\n\t\t\timg._baseHeight = this.canvas.height;\r\n\t\t\timg._baseWidth = width / (height / this.size.h);\r\n\t\t}else{\r\n\t\t\t// Fix the width to the width of the canvas\r\n\t\t\timg._baseWidth = this.canvas.width;\r\n\t\t\timg._baseHeight = height / (width / this.size.w);\r\n\t\t}\r\n\t\timg._centerX = width / 2;\r\n\t\timg._centerY = height / 2;\r\n\r\n\t\tthis.render();\r\n\r\n\t\tthis.onLoad(img._type, img._src, img._isSmall);\r\n\t},\r\n\r\n\tonLoad: function(type, url, isSmall){\r\n\t\t// summary:\r\n\t\t//\t\tDummy function that is called whenever an image loads.\r\n\t\t// type: String\r\n\t\t//\t\tThe position of the image that has loaded, either\r\n\t\t//\t\t\"center\", \"left\" or \"right\"\r\n\t\t// url: String\r\n\t\t//\t\tThe src of the image\r\n\t\t// isSmall: Boolean\r\n\t\t//\t\tTrue if it is a small version of the image that has loaded,\r\n\t\t//\t\tfalse otherwise.\r\n\t}\r\n});\r\n"]}