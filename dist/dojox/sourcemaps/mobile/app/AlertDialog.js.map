{"version":3,"sources":["mobile/app/AlertDialog.js"],"names":["dojo","provide","experimental","require","declare","dijit","_WidgetBase","title","text","controller","buttons","defaultButtonLabel","onChoose","constructor","this","onClick","hitch","_handleSelect","buildRendering","domNode","create","class","dlgBody","innerHTML","btnContainer","length","label","value","_this","forEach","btnInfo","btn","dojox","mobile","Button","btnClass","_dialogValue","place","connect","viewportSize","getWindowSize","mask","style","width","w","height","h","assistant","hide","postCreate","subscribe","event","node","console","log","target","byNode","parentNode","undefined","show","_doTransition","dir","marginBox","firstChild","bodyHeight","high","low","anim1","fx","slideTo","duration","top","start","end","anim2","anim","combine","display","destroy","play","inherited","arguments"],"mappings":"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","file":"../../../mobile/app/AlertDialog.js","sourcesContent":["dojo.provide(\"dojox.mobile.app.AlertDialog\");\r\ndojo.experimental(\"dojox.mobile.app.AlertDialog\");\r\ndojo.require(\"dijit._WidgetBase\");\r\n\r\ndojo.declare(\"dojox.mobile.app.AlertDialog\", dijit._WidgetBase, {\r\n\r\n\t// title: String\r\n\t//\t\tThe title of the AlertDialog\r\n\ttitle: \"\",\r\n\r\n\t// text: String\r\n\t//\t\tThe text message displayed in the AlertDialog\r\n\ttext: \"\",\r\n\r\n\t// controller: Object\r\n\t//\t\tThe SceneController for the currently active scene\r\n\tcontroller: null,\r\n\r\n\t// buttons: Array\r\n\tbuttons: null,\r\n\r\n\tdefaultButtonLabel: \"OK\",\r\n\r\n\t// onChoose: Function\r\n\t//\t\tThe callback function that is invoked when a button is tapped.\r\n\t//\t\tIf the dialog is cancelled, no parameter is passed to this function.\r\n\tonChoose: null,\r\n\r\n\tconstructor: function(){\r\n\t\tthis.onClick = dojo.hitch(this, this.onClick);\r\n\t\tthis._handleSelect = dojo.hitch(this, this._handleSelect);\r\n\t},\r\n\r\n\tbuildRendering: function(){\r\n\t\tthis.domNode = dojo.create(\"div\",{\r\n\t\t\t\"class\": \"alertDialog\"\r\n\t\t});\r\n\r\n\t\t// Create the outer dialog body\r\n\t\tvar dlgBody = dojo.create(\"div\", {\"class\": \"alertDialogBody\"}, this.domNode);\r\n\r\n\t\t// Create the title\r\n\t\tdojo.create(\"div\", {\"class\": \"alertTitle\", innerHTML: this.title || \"\"}, dlgBody);\r\n\r\n\t\t// Create the text\r\n\t\tdojo.create(\"div\", {\"class\": \"alertText\", innerHTML: this.text || \"\"}, dlgBody);\r\n\r\n\t\t// Create the node that encapsulates all the buttons\r\n\t\tvar btnContainer = dojo.create(\"div\", {\"class\": \"alertBtns\"}, dlgBody);\r\n\r\n\t\t// If no buttons have been defined, default to a single button saying OK\r\n\t\tif(!this.buttons || this.buttons.length == 0){\r\n\t\t\tthis.buttons = [{\r\n\t\t\t\tlabel: this.defaultButtonLabel,\r\n\t\t\t\tvalue: \"ok\",\r\n\t\t\t\t\"class\": \"affirmative\"\r\n\t\t\t}];\r\n\t\t}\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\t// Create each of the buttons\r\n\t\tdojo.forEach(this.buttons, function(btnInfo){\r\n\t\t\tvar btn = new dojox.mobile.Button({\r\n\t\t\t\tbtnClass: btnInfo[\"class\"] || \"\",\r\n\t\t\t\tlabel: btnInfo.label\r\n\t\t\t});\r\n\t\t\tbtn._dialogValue = btnInfo.value;\r\n\t\t\tdojo.place(btn.domNode, btnContainer);\r\n\t\t\t_this.connect(btn, \"onClick\", _this._handleSelect);\r\n\t\t});\r\n\r\n\t\tvar viewportSize = this.controller.getWindowSize();\r\n\r\n\t\t// Create the mask that blocks out the rest of the screen\r\n\t\tthis.mask = dojo.create(\"div\", {\"class\": \"dialogUnderlayWrapper\",\r\n\t\t\tinnerHTML: \"<div class=\\\"dialogUnderlay\\\"></div>\",\r\n\t\t\tstyle: {\r\n\t\t\t\twidth: viewportSize.w + \"px\",\r\n\t\t\t\theight: viewportSize.h + \"px\"\r\n\t\t\t}\r\n\t\t}, this.controller.assistant.domNode);\r\n\r\n\t\tthis.connect(this.mask, \"onclick\", function(){\r\n\t\t\t_this.onChoose && _this.onChoose();\r\n\t\t\t_this.hide();\r\n\t\t});\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.subscribe(\"/dojox/mobile/app/goback\", this._handleSelect);\r\n\t},\r\n\r\n\t_handleSelect: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tHandle the selection of a value\r\n\t\tvar node;\r\n\t\tconsole.log(\"handleSelect\");\r\n\t\tif(event && event.target){\r\n\t\t\tnode = event.target;\r\n\r\n\t\t\t// Find the widget that was tapped.\r\n\t\t\twhile(!dijit.byNode(node)){\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If an onChoose function was provided, tell it what button\r\n\t\t// value was chosen\r\n\t\tif(this.onChoose){\r\n\t\t\tthis.onChoose(node ? dijit.byNode(node)._dialogValue: undefined);\r\n\t\t}\r\n\t\t// Hide the dialog\r\n\t\tthis.hide();\r\n\t},\r\n\r\n\tshow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tShow the dialog\r\n\t\tthis._doTransition(1);\r\n\t},\r\n\r\n\thide: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHide the dialog\r\n\t\tthis._doTransition(-1);\r\n\t},\r\n\r\n\t_doTransition: function(dir){\r\n\t\t// summary:\r\n\t\t//\t\tEither shows or hides the dialog.\r\n\t\t// dir:\r\n\t\t//\t\tAn integer.  If positive, the dialog is shown. If negative,\r\n\t\t//\t\tthe dialog is hidden.\r\n\r\n\t\t// TODO: replace this with CSS transitions\r\n\r\n\t\tvar anim;\r\n\t\tvar h = dojo.marginBox(this.domNode.firstChild).h;\r\n\r\n\r\n\t\tvar bodyHeight = this.controller.getWindowSize().h;\r\n\t\tconsole.log(\"dialog height = \" + h, \" body height = \" + bodyHeight);\r\n\r\n\t\tvar high = bodyHeight - h;\r\n\t\tvar low = bodyHeight;\r\n\r\n\t\tvar anim1 = dojo.fx.slideTo({\r\n\t\t\tnode: this.domNode,\r\n\t\t\tduration: 400,\r\n\t\t\ttop: {start: dir < 0 ? high : low, end: dir < 0 ? low: high}\r\n\t\t});\r\n\r\n\t\tvar anim2 = dojo[dir < 0 ? \"fadeOut\" : \"fadeIn\"]({\r\n\t\t\tnode: this.mask,\r\n\t\t\tduration: 400\r\n\t\t});\r\n\r\n\t\tvar anim = dojo.fx.combine([anim1, anim2]);\r\n\r\n\t\tvar _this = this;\r\n\r\n\t\tdojo.connect(anim, \"onEnd\", this, function(){\r\n\t\t\tif(dir < 0){\r\n\t\t\t\t_this.domNode.style.display = \"none\";\r\n\t\t\t\tdojo.destroy(_this.domNode);\r\n\t\t\t\tdojo.destroy(_this.mask);\r\n\t\t\t}\r\n\t\t});\r\n\t\tanim.play();\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tdojo.destroy(this.mask);\r\n\t},\r\n\r\n\r\n\tonClick: function(){\r\n\r\n\t}\r\n});"]}