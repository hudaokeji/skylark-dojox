{"version":3,"sources":["mobile/ProgressBar.js"],"names":["define","declare","domClass","domConstruct","WidgetBase","value","maximum","label","baseClass","buildRendering","this","inherited","arguments","progressNode","create","className","domNode","msgNode","_setValueAttr","_set","percent","Math","min","indexOf","parseFloat","style","width","toggle","onChange","_setLabelAttr","innerHTML"],"mappings":";;;;;;;AAAAA,QACC,qBACA,iBACA,qBACA,qBACE,SAASC,EAASC,EAAUC,EAAcC,GAK5C,OAAOH,EAAQ,2BAA4BG,GAW1CC,MAAO,IAIPC,QAAS,IAITC,MAAO,GAMPC,UAAW,iBAEXC,eAAgB,WACfC,KAAKC,UAAUC,WACfF,KAAKG,aAAeV,EAAaW,OAAO,OACvCC,UAAW,0BACTL,KAAKM,SACRN,KAAKO,QAAUd,EAAaW,OAAO,OAClCC,UAAW,qBACTL,KAAKM,UAGTE,cAAe,SAAmBb,GAKjCA,GAAS,GACTK,KAAKS,KAAK,QAASd,GAEnB,IAAIe,EAAUC,KAAKC,IAAI,KAA6B,GAAvBjB,EAAMkB,QAAQ,KAC1CC,WAAWnB,GAASK,KAAKJ,QAAU,IAAMD,EAAQK,KAAKJ,QAAU,GACjEI,KAAKG,aAAaY,MAAMC,MAAQN,EAAU,IAC1ClB,EAASyB,OAAOjB,KAAKG,aAAc,4BAA6BO,GAChElB,EAASyB,OAAOjB,KAAKG,aAAc,yBAAqC,KAAXO,GAC7DV,KAAKkB,SAASvB,EAAOK,KAAKJ,QAASc,IAGpCS,cAAe,SAAStB,GAKvBG,KAAKO,QAAQa,UAAYvB,GAG1BqB,SAAU","file":"../../mobile/ProgressBar.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/_WidgetBase\"\r\n], function(declare, domClass, domConstruct, WidgetBase){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ProgressBar\r\n\r\n\treturn declare(\"dojox.mobile.ProgressBar\", WidgetBase, {\r\n\t\t// summary:\r\n\t\t//\t\tA widget that shows the progress of a task.\r\n\t\t// description:\r\n\t\t//\t\tThe current progress can be specified either using a number (0 to maximum) \r\n\t\t//\t\tor percentage (0% to 100%). The setter of the 'value' property can be used to\r\n\t\t//\t\tupdate the degree of completion of the task.\r\n\t\t\r\n\t\t// value: String\r\n\t\t//\t\tNumber (\"0\" to maximum) or percentage (\"0%\" to \"100%\")\r\n\t\t//\t\tindicating the degree of completion of the task.\r\n\t\tvalue: \"0\",\r\n\r\n\t\t// maximum: Number\r\n\t\t//\t\tMaximum value.\r\n\t\tmaximum: 100,\r\n\r\n\t\t// label: String\r\n\t\t//\t\tA text to be shown at the center of the progress bar.\r\n\t\tlabel: \"\",\r\n\r\n\t\t/* internal properties */\t\r\n\t\t\r\n\t\t// baseClass: String\r\n\t\t//\t\tThe name of the CSS class of this widget.\r\n\t\tbaseClass: \"mblProgressBar\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.progressNode = domConstruct.create(\"div\", {\r\n\t\t\t\tclassName: \"mblProgressBarProgress\"\r\n\t\t\t}, this.domNode);\r\n\t\t\tthis.msgNode = domConstruct.create(\"div\", {\r\n\t\t\t\tclassName: \"mblProgressBarMsg\"\r\n\t\t\t}, this.domNode);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String*/value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the new value to the progress bar.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvalue += \"\";\r\n\t\t\tthis._set(\"value\", value);\r\n\r\n\t\t\tvar percent = Math.min(100, (value.indexOf(\"%\") != -1 ?\r\n\t\t\t\tparseFloat(value) : this.maximum ? 100 * value / this.maximum : 0));\r\n\t\t\tthis.progressNode.style.width = percent + \"%\";\r\n\t\t\tdomClass.toggle(this.progressNode, \"mblProgressBarNotStarted\", !percent);\r\n\t\t\tdomClass.toggle(this.progressNode, \"mblProgressBarComplete\", percent == 100);\r\n\t\t\tthis.onChange(value, this.maximum, percent);\r\n\t\t},\r\n\r\n\t\t_setLabelAttr: function(label){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets a label text to be shown at the center of the progress bar.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.msgNode.innerHTML = label;\r\n\t\t},\r\n\r\n\t\tonChange: function(/*Number*/ /*===== percent =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser-defined function called when progress updates.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t}\r\n\t});\r\n});\r\n"]}