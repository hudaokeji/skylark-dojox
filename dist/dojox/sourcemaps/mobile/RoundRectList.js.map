{"version":3,"sources":["mobile/RoundRectList.js"],"names":["define","array","declare","event","lang","win","domConstruct","domAttr","Contained","Container","WidgetBase","transition","iconBase","iconPos","select","stateful","syncWithViews","editable","tag","editableMixinClass","baseClass","filterBoxClass","buildRendering","this","domNode","srcNodeRef","create","set","inherited","arguments","postCreate","require","hitch","module","safeMixin","connect","stop","f","view","moveTo","dir","context","method","child","filter","getChildren","w","id","subscribe","resize","forEach","onCheckStateChanged","_setStatefulAttr","_set","selectOne","setArrow","deselectItem","item","deselectAll","selectItem"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,mBACA,kBACA,oBACA,qBACA,gBACA,mBACA,mBACA,qBACE,SAASC,EAAOC,EAASC,EAAOC,EAAMC,EAAKC,EAAcC,EAASC,EAAWC,EAAWC,GAK1F,OAAOR,EAAQ,8BAA+BQ,EAAYD,EAAWD,IASpEG,WAAY,QAIZC,SAAU,GAIVC,QAAS,GAQTC,OAAQ,GAIRC,UAAU,EAOVC,eAAe,EAMfC,UAAU,EAIVC,IAAK,KAKLC,mBAAoB,kCAIpBC,UAAW,mBAMXC,eAAgB,oCAEhBC,eAAgB,WACfC,KAAKC,QAAUD,KAAKE,YAAcnB,EAAaoB,OAAOH,KAAKL,KACxDK,KAAKT,SACPP,EAAQoB,IAAIJ,KAAKC,QAAS,OAAQ,WACf,aAAhBD,KAAKT,QACPP,EAAQoB,IAAIJ,KAAKC,QAAS,uBAAwB,SAGpDD,KAAKK,UAAUC,YAGhBC,WAAY,WAQX,GAPGP,KAAKN,UACPc,SAASR,KAAKJ,oBAAqBf,EAAK4B,MAAMT,KAAM,SAASU,GAC5D/B,EAAQgC,UAAUX,KAAM,IAAIU,MAG9BV,KAAKY,QAAQZ,KAAKC,QAAS,gBAAiBrB,EAAMiC,MAE/Cb,KAAKP,cAAc,CACrB,IAAIqB,EAAI,SAASC,EAAMC,EAAQC,EAAK7B,EAAY8B,EAASC,GACxD,IAAIC,EAAQ1C,EAAM2C,OAAOrB,KAAKsB,cAAe,SAASC,GACrD,OAAOA,EAAEP,SAAW,IAAMD,EAAKS,IAAMD,EAAEP,SAAWD,EAAKS,KAAO,GAC5DJ,GAAQA,EAAMhB,IAAI,YAAY,IAElCJ,KAAKyB,UAAU,kCAAmCX,GAClDd,KAAKyB,UAAU,0BAA2BX,KAI5CY,OAAQ,WAGPhD,EAAMiD,QAAQ3B,KAAKsB,cAAe,SAASF,GACvCA,EAAMM,QAASN,EAAMM,YAI1BE,oBAAqB,aAOrBC,iBAAkB,SAASrC,GAG1BQ,KAAK8B,KAAK,WAAYtC,GACtBQ,KAAK+B,UAAYvC,EACjBd,EAAMiD,QAAQ3B,KAAKsB,cAAe,SAASF,GAC1CA,EAAMY,UAAYZ,EAAMY,cAI1BC,aAAc,SAAkCC,GAG/CA,EAAK9B,IAAI,YAAY,IAGtB+B,YAAa,WAGZzD,EAAMiD,QAAQ3B,KAAKsB,cAAe,SAASF,GAC1CA,EAAMhB,IAAI,YAAY,MAIxBgC,WAAY,SAAqBF,GAGhCA,EAAK9B,IAAI,YAAY","file":"../../mobile/RoundRectList.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/event\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-attr\",\r\n\t\"dijit/_Contained\",\r\n\t\"dijit/_Container\",\r\n\t\"dijit/_WidgetBase\"\r\n], function(array, declare, event, lang, win, domConstruct, domAttr, Contained, Container, WidgetBase){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/RoundRectList\r\n\r\n\treturn declare(\"dojox.mobile.RoundRectList\", [WidgetBase, Container, Contained], {\r\n\t\t// summary:\r\n\t\t//\t\tA rounded rectangle list.\r\n\t\t// description:\r\n\t\t//\t\tRoundRectList is a rounded rectangle list, which can be used to\r\n\t\t//\t\tdisplay a group of items. Each item must be a dojox/mobile/ListItem.\r\n\r\n\t\t// transition: String\r\n\t\t//\t\tThe default animated transition effect for child items.\r\n\t\ttransition: \"slide\",\r\n\r\n\t\t// iconBase: String\r\n\t\t//\t\tThe default icon path for child items.\r\n\t\ticonBase: \"\",\r\n\r\n\t\t// iconPos: String\r\n\t\t//\t\tThe default icon position for child items.\r\n\t\ticonPos: \"\",\r\n\r\n\t\t// select: String\r\n\t\t//\t\tSelection mode of the list. The check mark is shown for the\r\n\t\t//\t\tselected list item(s). The value can be \"single\", \"multiple\", or \"\".\r\n\t\t//\t\tIf \"single\", there can be only one selected item at a time.\r\n\t\t//\t\tIf \"multiple\", there can be multiple selected items at a time.\r\n\t\t//\t\tIf \"\", the check mark is not shown.\r\n\t\tselect: \"\",\r\n\r\n\t\t// stateful: Boolean\r\n\t\t//\t\tIf true, the last selected item remains highlighted.\r\n\t\tstateful: false,\r\n\r\n\t\t// syncWithViews: [const] Boolean\r\n\t\t//\t\tIf true, this widget listens to view transition events to be\r\n\t\t//\t\tsynchronized with view's visibility.\r\n\t\t//\t\tNote that changing the value of the property after the widget\r\n\t\t//\t\tcreation has no effect.\r\n\t\tsyncWithViews: false,\r\n\r\n\t\t// editable: [const] Boolean\r\n\t\t//\t\tIf true, the list can be reordered.\r\n\t\t//\t\tNote that changing the value of the property after the widget\r\n\t\t//\t\tcreation has no effect.\r\n\t\teditable: false,\r\n\r\n\t\t// tag: String\r\n\t\t//\t\tA name of html tag to create as domNode.\r\n\t\ttag: \"ul\",\r\n\r\n\t\t/* internal properties */\r\n\t\t// editableMixinClass: String\r\n\t\t//\t\tThe name of the mixin class.\r\n\t\teditableMixinClass: \"dojox/mobile/_EditableListMixin\",\r\n\t\t\r\n\t\t// baseClass: String\r\n\t\t//\t\tThe name of the CSS class of this widget.\r\n\t\tbaseClass: \"mblRoundRectList\",\r\n\t\t\r\n\t\t// filterBoxClass: String\r\n\t\t//\t\tThe name of the CSS class added to the DOM node inside which is placed the \r\n\t\t//\t\tdojox/mobile/SearchBox created when mixing dojox/mobile/FilteredListMixin.\r\n\t\t//\t\tThe default value is \"mblFilteredRoundRectListSearchBox\".  \r\n\t\tfilterBoxClass: \"mblFilteredRoundRectListSearchBox\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.domNode = this.srcNodeRef || domConstruct.create(this.tag);\r\n\t\t\tif(this.select){\r\n\t\t\t\tdomAttr.set(this.domNode, \"role\", \"listbox\");\r\n\t\t\t\tif(this.select === \"multiple\"){\r\n\t\t\t\t\tdomAttr.set(this.domNode, \"aria-multiselectable\", \"true\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tif(this.editable){\r\n\t\t\t\trequire([this.editableMixinClass], lang.hitch(this, function(module){\r\n\t\t\t\t\tdeclare.safeMixin(this, new module());\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\tthis.connect(this.domNode, \"onselectstart\", event.stop);\r\n\r\n\t\t\tif(this.syncWithViews){ // see also TabBar#postCreate\r\n\t\t\t\tvar f = function(view, moveTo, dir, transition, context, method){\r\n\t\t\t\t\tvar child = array.filter(this.getChildren(), function(w){\r\n\t\t\t\t\t\treturn w.moveTo === \"#\" + view.id || w.moveTo === view.id; })[0];\r\n\t\t\t\t\tif(child){ child.set(\"selected\", true); }\r\n\t\t\t\t};\r\n\t\t\t\tthis.subscribe(\"/dojox/mobile/afterTransitionIn\", f);\r\n\t\t\t\tthis.subscribe(\"/dojox/mobile/startView\", f);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresize: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalls resize() of each child widget.\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tif(child.resize){ child.resize(); }\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tonCheckStateChanged: function(/*Widget*//*===== listItem, =====*/ /*String*//*===== newState =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStub function to connect to from your application.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCalled when the check state has been changed.\r\n\t\t},\r\n\r\n\t\t_setStatefulAttr: function(stateful){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis._set(\"stateful\", stateful);\r\n\t\t\tthis.selectOne = stateful;\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tchild.setArrow && child.setArrow();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tdeselectItem: function(/*dojox/mobile/ListItem*/item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeselects the given item.\r\n\t\t\titem.set(\"selected\", false);\r\n\t\t},\r\n\r\n\t\tdeselectAll: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeselects all the items.\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tchild.set(\"selected\", false);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tselectItem: function(/*ListItem*/item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelects the given item.\r\n\t\t\titem.set(\"selected\", true);\r\n\t\t}\r\n\t});\r\n});\r\n"]}