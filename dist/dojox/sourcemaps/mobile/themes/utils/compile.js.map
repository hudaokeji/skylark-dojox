{"version":3,"sources":["mobile/themes/utils/compile.js"],"names":["fs","require","path","less","themeFolders","commonFolders","batchQueue","batchIndex","processProgress","batch","length","beginProcess","endProcess","processFolder","folder","usingCommonSubstitution","folderFiles","getLessFiles","outputFile","commonFiles","array","forEach","commonFile","themeFile","dic","applyLess","replace","fileName","indexOf","file","prependText","console","log","parser","paths","dirname","filename","optimization","lessContent","readFileSync","parse","error","tree","writeError","process","exit","fd","openSync","write","toCSS","compress","f","close","filesMap","filesArray","readdirSync","filter","test","map","push"],"mappings":";;;;;;;AAAA,IAAIA,GAAKC,QAAQ,MACbC,KAAOD,QAAQ,QACfE,KAAOF,QAAQ,QAEfG,cAAgB,aAAc,YAAa,gBAAiB,cAAe,aAAc,YAAa,WACtGC,eAAiB,uBAAwB,yBAEzCC,cACAC,WAAa,EACbC,gBAAkB,EAmBtB,SAASC,QACLF,WAAaD,WAAWI,SAC1BJ,WAAWC,cACXA,cAIF,SAASI,eACRH,kBAED,SAASI,aAEe,KADvBJ,iBAECC,QAIF,SAASI,cAAcC,EAAQC,GAC9B,IAAIC,EAAcC,aAAaH,GAE/B,GAAGC,EAAwB,CAC1B,IACIG,EADAC,EAAcF,aAAa,aAE/BE,EAAYC,MAAMC,QAAQ,SAASC,GAClC,IAAIC,EAAYP,EAAYQ,IAAIL,EAAYK,IAAIF,IAChD,GAAGC,EAGFE,UAAUF,EAAW,KADrBL,EAAaK,EAAUG,QAAQ,QAAS,aAEpC,CAEJ,IAAIC,EAAWR,EAAYK,IAAIF,GAC/BJ,EAAaJ,EAAS,IAAMa,EAASD,QAAQ,QAAS,SAEtB,GAA7BC,EAASC,QAAQ,QACnBH,UAAUH,EAAY,YAAcR,EAAS,oBAAqBI,GAElEO,UAAUH,EAAY,YAAcR,EAAS,wBAAyBI,WAKzEF,EAAYI,MAAMC,QAAQ,SAASQ,GAClCJ,UAAUI,EAAM,KAAMA,EAAKH,QAAQ,QAAS,WAK/C,SAASD,UAAUI,EAAMC,EAAaZ,GACrCP,eACAoB,QAAQC,IAAI,aAAcH,GAE1B,IAAII,EAAS,IAAI9B,KAAW,QAAG+B,OAAQhC,KAAKiC,QAAQN,IAAQO,SAAUP,EAAMQ,aAAc,IACtFC,EAActC,GAAGuC,aAAaV,EAAM,SAErCC,IACFQ,EAAcR,EAAcQ,GAE7BL,EAAOO,MAAMF,EAAa,SAASG,EAAOC,GACtCD,IACFtC,KAAKwC,WAAWF,GAChBG,QAAQC,KAAK,IAEd,IAAIC,EAAK9C,GAAG+C,SAAS7B,EAAY,KAEjClB,GAAGgD,MAAMF,EAAIJ,EAAKO,OAAOC,UAAU,IAAQxB,QAAQ,MAAO,QAAS,EAAG,QAAS,SAASyB,GACvFnD,GAAGoD,MAAMN,GACTf,QAAQC,IAAI,WAAYd,GACxBN,iBAKH,SAASK,aAAaH,GACrB,IAAIuC,KACAC,EAAatD,GAAGuD,YAAYzC,GAYhC,OAAQM,MANRkC,GALAA,EAAaA,EAAWE,OAAO,SAAS3B,GACvC,OAAOA,GAAQ,UAAU4B,KAAK5B,KAAU,mBAAmB4B,KAAK5B,KAAU,cAAc4B,KAAK5B,KACzF,uBAAuB4B,KAAK5B,MAGT6B,IAAI,SAAS7B,GAGnC,OAFAwB,EAASxB,GAAQf,EAAS,IAAMe,EAChCwB,EAASvC,EAAS,IAAMe,GAAQA,EACzBwB,EAASxB,KAGSL,IAAK6B,GAxGjCjD,aAAaiB,QAAQ,SAASP,GAC7BR,WAAWqD,KAAK,WACf9C,cAAcC,GAAQ,GACtBD,cAAcC,EAAS,UAAU,OAInCT,cAAcgB,QAAQ,SAASP,GAC9BR,WAAWqD,KAAK,WACf9C,cAAcC,GAAQ,OAIxBL","file":"../../../../mobile/themes/utils/compile.js","sourcesContent":["var fs = require(\"fs\");\r\nvar path = require(\"path\");\r\nvar less = require(\"less\");\r\n\r\nvar themeFolders = [\"../android\", \"../iphone\", \"../blackberry\", \"../holodark\", \"../windows\", \"../custom\", \"../ios7\"];\r\nvar commonFolders = [\"../common/domButtons\", \"../common/transitions\"];\r\n\r\nvar batchQueue = [];\r\nvar batchIndex = 0;\r\nvar processProgress = 0; \r\n\r\nthemeFolders.forEach(function(folder){ \r\n\tbatchQueue.push(function(){\r\n\t\tprocessFolder(folder, true);\r\n\t\tprocessFolder(folder + \"/dijit\", false);\r\n\t});\r\n});\r\n\r\ncommonFolders.forEach(function(folder){ \r\n\tbatchQueue.push(function(){\r\n\t\tprocessFolder(folder, false);\r\n\t});\r\n});\r\n\r\nbatch();\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction batch(){\r\n\tif(batchIndex < batchQueue.length){\r\n\t\tbatchQueue[batchIndex]();\r\n\t\tbatchIndex++;\r\n\t}\r\n}\r\n\r\nfunction beginProcess(){\r\n\tprocessProgress++;\r\n}\r\nfunction endProcess(){\r\n\tprocessProgress--;\r\n\tif (processProgress == 0){\r\n\t\tbatch();\r\n\t}\r\n}\r\n\r\nfunction processFolder(folder, usingCommonSubstitution){\r\n\tvar folderFiles = getLessFiles(folder);\r\n\t\r\n\tif(usingCommonSubstitution){\r\n\t\tvar commonFiles = getLessFiles(\"../common\");\r\n\t\tvar outputFile;\r\n\t\tcommonFiles.array.forEach(function(commonFile){\r\n\t\t\tvar themeFile = folderFiles.dic[commonFiles.dic[commonFile]];\r\n\t\t\tif(themeFile){\r\n\t\t\t\t// If there is a .less file in the theme folder, use it. \r\n\t\t\t\toutputFile = themeFile.replace(\".less\", \".css\");\r\n\t\t\t\tapplyLess(themeFile, null, outputFile);\r\n\t\t\t}else{\r\n\t\t\t\t// Otherwise, fall back to the .less file which is in 'common'.\r\n\t\t\t\tvar fileName = commonFiles.dic[commonFile];\r\n\t\t\t\toutputFile = folder + \"/\" + fileName.replace(\".less\", \".css\");\r\n\t\t\t\t// dojox.mobile mirroring support\r\n\t\t\t\tif(fileName.indexOf(\"_rtl\") == -1){ \r\n\t\t\t\t\tapplyLess(commonFile, '@import \"' + folder + '/variables.less\";', outputFile);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tapplyLess(commonFile, '@import \"' + folder + '/variables_rtl.less\";', outputFile);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}else{\r\n\t\tfolderFiles.array.forEach(function(file){\r\n\t\t\tapplyLess(file, null, file.replace(\".less\", \".css\"));\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction applyLess(file, prependText, outputFile){ \r\n\tbeginProcess();\r\n\tconsole.log(\"compiling:\", file);\r\n\t\r\n\tvar parser = new(less.Parser)({paths: [path.dirname(file)], filename: file, optimization: 1});\r\n\tvar lessContent = fs.readFileSync(file, \"utf-8\");\r\n\t\r\n\tif(prependText){\r\n\t\tlessContent = prependText + lessContent;\r\n\t}\r\n\tparser.parse(lessContent, function(error, tree){\r\n\t\tif(error){\r\n\t\t\tless.writeError(error);\r\n\t\t\tprocess.exit(1);\r\n\t\t}\r\n\t\tvar fd = fs.openSync(outputFile, \"w\");\r\n\t\t\r\n\t\tfs.write(fd, tree.toCSS({compress: false}).replace(/\\n/g, \"\\r\\n\"), 0, \"utf-8\", function(f){\r\n\t\t\tfs.close(fd);\r\n\t\t\tconsole.log(\"writing:\", outputFile);\r\n\t\t\tendProcess();\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction getLessFiles(folder){ \r\n\tvar filesMap = {};\r\n\tvar filesArray = fs.readdirSync(folder);\r\n\tfilesArray = filesArray.filter(function(file){\r\n\t\treturn file && /\\.less$/.test(file) && !/variables\\.less$/.test(file) && !/css3\\.less$/.test(file) \r\n\t\t&& !/variables_rtl\\.less$/.test(file);\r\n\t});\r\n\t\r\n\tfilesArray = filesArray.map(function(file){\r\n\t\t\tfilesMap[file] = folder + \"/\" + file;\r\n\t\t\tfilesMap[folder + \"/\" + file] = file;\r\n\t\t\treturn filesMap[file]; \r\n\t});\r\n\t\r\n\treturn {array: filesArray, dic: filesMap};\r\n}\r\n"]}