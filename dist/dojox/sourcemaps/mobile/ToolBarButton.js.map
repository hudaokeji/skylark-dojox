{"version":3,"sources":["mobile/ToolBarButton.js"],"names":["define","declare","lang","win","domClass","domConstruct","domStyle","domAttr","has","ItemBase","BidiToolBarButton","ToolBarButton","selected","arrow","light","defaultColor","selColor","baseClass","_selStartMethod","_selEndMethod","buildRendering","this","label","srcNodeRef","innerHTML","trim","domNode","tagName","create","set","inherited","arguments","icon","labelNode","tableNode","bodyNode","iconParentNode","add","arrowNode","className","cellPadding","cellSpacing","border","role","row","insertRow","insertCell","startup","_started","connect","_isOnLine","undefined","_pendingIcon","_onClick","e","type","keyCode","onClick","defaultClickAction","_setLabelAttr","text","toggle","_setSelectedAttr","replace","node","a","b"],"mappings":"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","file":"../../mobile/ToolBarButton.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-attr\",\r\n\t\"./sniff\",\r\n\t\"./_ItemBase\",\r\n\t\"dojo/has!dojo-bidi?dojox/mobile/bidi/ToolBarButton\"\r\n], function(declare, lang, win, domClass, domConstruct, domStyle, domAttr, has, ItemBase, BidiToolBarButton){\r\n\r\n\t// module:\r\n\t//\t\tdojox/mobile/ToolBarButton\r\n\r\n\tvar ToolBarButton = declare(has(\"dojo-bidi\") ? \"dojox.mobile.NonBidiToolBarButton\" : \"dojox.mobile.ToolBarButton\", ItemBase, {\r\n\t\t// summary:\r\n\t\t//\t\tA button widget which is placed in the Heading widget.\r\n\t\t// description:\r\n\t\t//\t\tToolBarButton is a button which is typically placed in the\r\n\t\t//\t\tHeading widget. It is a subclass of dojox/mobile/_ItemBase just\r\n\t\t//\t\tlike ListItem or IconItem. So, unlike Button, it has basically\r\n\t\t//\t\tthe same capability as ListItem or IconItem, such as icon\r\n\t\t//\t\tsupport, transition, etc.\r\n\r\n\t\t// selected: Boolean\r\n\t\t//\t\tIf true, the button is in the selected state.\r\n\t\tselected: false,\r\n\r\n\t\t// arrow: [const] String\r\n\t\t//\t\tSpecifies \"right\" or \"left\" to be an arrow button.\r\n\t\t//\t\tNote that changing the value of the property after the widget \r\n\t\t//\t\tcreation has no effect.\r\n\t\tarrow: \"\",\r\n\r\n\t\t// light: [const] Boolean\r\n\t\t//\t\tIf true, this widget produces only a single `<span>` node when it\r\n\t\t//\t\thas only an icon or only a label, and has no arrow. In that\r\n\t\t//\t\tcase, you cannot have both icon and label, or arrow even if you\r\n\t\t//\t\ttry to set them.\r\n\t\t//\t\tNote that changing the value of the property after the widget \r\n\t\t//\t\tcreation has no effect.\r\n\t\tlight: true,\r\n\r\n\t\t// defaultColor: String\r\n\t\t//\t\tCSS class for the default color.\r\n\t\t//\t\tNote: If this button has an arrow (typically back buttons on iOS),\r\n\t\t//\t\tthe class selector used for it is the value of defaultColor + \"45\".\r\n\t\t//\t\tFor example, by default the arrow selector is \"mblColorDefault45\".\r\n\t\tdefaultColor: \"mblColorDefault\",\r\n\r\n\t\t// selColor: String\r\n\t\t//\t\tCSS class for the selected color.\r\n\t\t//\t\tNote: If this button has an arrow (typically back buttons on iOS),\r\n\t\t//\t\tthe class selector used for it is the value of selColor + \"45\".\r\n\t\t//\t\tFor example, by default the selected arrow selector is \"mblColorDefaultSel45\".\r\n\t\tselColor: \"mblColorDefaultSel\",\r\n\r\n\t\t/* internal properties */\r\n\t\tbaseClass: \"mblToolBarButton\",\r\n\r\n\t\t_selStartMethod: \"touch\",\r\n\t\t_selEndMethod: \"touch\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tif(!this.label && this.srcNodeRef){\r\n\t\t\t\tthis.label = this.srcNodeRef.innerHTML;\r\n\t\t\t}\r\n\t\t\tthis.label = lang.trim(this.label);\r\n\t\t\tthis.domNode = (this.srcNodeRef && this.srcNodeRef.tagName === \"SPAN\") ?\r\n\t\t\t\tthis.srcNodeRef : domConstruct.create(\"span\");\r\n\t\t\tdomAttr.set(this.domNode, \"role\", \"button\");\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(this.light && !this.arrow && (!this.icon || !this.label)){\r\n\t\t\t\tthis.labelNode = this.tableNode = this.bodyNode = this.iconParentNode = this.domNode;\r\n\t\t\t\tdomClass.add(this.domNode, this.defaultColor + \" mblToolBarButtonBody\" +\r\n\t\t\t\t\t\t\t (this.icon ? \" mblToolBarButtonLightIcon\" : \" mblToolBarButtonLightText\"));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.domNode.innerHTML = \"\";\r\n\t\t\tif(this.arrow === \"left\" || this.arrow === \"right\"){\r\n\t\t\t\tthis.arrowNode = domConstruct.create(\"span\", {\r\n\t\t\t\t\tclassName: \"mblToolBarButtonArrow mblToolBarButton\" +\r\n\t\t\t\t\t(this.arrow === \"left\" ? \"Left\" : \"Right\") + \"Arrow \" +\r\n\t\t\t\t\t(has(\"ie\") < 10 ? \"\" : (this.defaultColor + \" \" + this.defaultColor + \"45\"))\r\n\t\t\t\t}, this.domNode);\r\n\t\t\t\tdomClass.add(this.domNode, \"mblToolBarButtonHas\" +\r\n\t\t\t\t\t(this.arrow === \"left\" ? \"Left\" : \"Right\") + \"Arrow\");\r\n\t\t\t}\r\n\t\t\tthis.bodyNode = domConstruct.create(\"span\", {className:\"mblToolBarButtonBody\"}, this.domNode);\r\n\t\t\tthis.tableNode = domConstruct.create(\"table\", {cellPadding:\"0\",cellSpacing:\"0\",border:\"0\",role:\"presentation\"}, this.bodyNode);\r\n\t\t\tif(!this.label && this.arrow){\r\n\t\t\t\t// The class mblToolBarButtonText is needed for arrow shape too.\r\n\t\t\t\t// If the button has a label, the class is set by _setLabelAttr. If no label, do it here.\r\n\t\t\t\tthis.tableNode.className = \"mblToolBarButtonText\";\r\n\t\t\t}\r\n\r\n\t\t\tvar row = this.tableNode.insertRow(-1);\r\n\t\t\tthis.iconParentNode = row.insertCell(-1);\r\n\t\t\tthis.labelNode = row.insertCell(-1);\r\n\t\t\tthis.iconParentNode.className = \"mblToolBarButtonIcon\";\r\n\t\t\tthis.labelNode.className = \"mblToolBarButtonLabel\";\r\n\r\n\t\t\tif(this.icon && this.icon !== \"none\" && this.label){\r\n\t\t\t\tdomClass.add(this.domNode, \"mblToolBarButtonHasIcon\");\r\n\t\t\t\tdomClass.add(this.bodyNode, \"mblToolBarButtonLabeledIcon\");\r\n\t\t\t}\r\n\r\n\t\t\tdomClass.add(this.bodyNode, this.defaultColor);\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){ return; }\r\n\r\n\t\t\tthis.connect(this.domNode, \"onkeydown\", \"_onClick\"); // for desktop browsers\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this._isOnLine){\r\n\t\t\t\tthis._isOnLine = true;\r\n\t\t\t\t// retry applying the attribute for which the custom setter delays the actual \r\n\t\t\t\t// work until _isOnLine is true. \r\n\t\t\t\tthis.set(\"icon\", this._pendingIcon !== undefined ? this._pendingIcon : this.icon);\r\n\t\t\t\t// Not needed anymore (this code executes only once per life cycle):\r\n\t\t\t\tdelete this._pendingIcon; \r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onClick: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal handler for click events.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(e && e.type === \"keydown\" && e.keyCode !== 13){ return; }\r\n\t\t\tif(this.onClick(e) === false){ return; } // user's click action\r\n\t\t\tthis.defaultClickAction(e);\r\n\t\t},\r\n\r\n\t\tonClick: function(/*Event*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser defined function to handle clicks\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\t_setLabelAttr: function(/*String*/text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the button label text.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdomClass.toggle(this.tableNode, \"mblToolBarButtonText\", text || this.arrow); // also needed if only arrow\r\n\t\t},\r\n\r\n\t\t_setSelectedAttr: function(/*Boolean*/selected){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMakes this widget in the selected or unselected state.\r\n\t\t\tvar replace = function(node, a, b){\r\n\t\t\t\tdomClass.replace(node, a + \" \" + a + \"45\", b + \" \" + b + \"45\");\r\n\t\t\t};\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(selected){\r\n\t\t\t\tdomClass.replace(this.bodyNode, this.selColor, this.defaultColor);\r\n\t\t\t\tif(!(has(\"ie\") < 10) && this.arrowNode){\r\n\t\t\t\t\treplace(this.arrowNode, this.selColor, this.defaultColor);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tdomClass.replace(this.bodyNode, this.defaultColor, this.selColor);\r\n\t\t\t\tif(!(has(\"ie\") < 10) && this.arrowNode){\r\n\t\t\t\t\treplace(this.arrowNode, this.defaultColor, this.selColor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdomClass.toggle(this.domNode, \"mblToolBarButtonSelected\", selected);\r\n\t\t\tdomClass.toggle(this.bodyNode, \"mblToolBarButtonBodySelected\", selected);\r\n\t\t}\r\n\t});\r\n\treturn has(\"dojo-bidi\") ? declare(\"dojox.mobile.ToolBarButton\", [ToolBarButton, BidiToolBarButton]) : ToolBarButton;\r\n});\r\n"]}