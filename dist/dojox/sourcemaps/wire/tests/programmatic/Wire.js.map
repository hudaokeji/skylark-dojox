{"version":3,"sources":["wire/tests/programmatic/Wire.js"],"names":["dojo","provide","require","declare","convert","v","isBrowser","window","__wireTestConverterFunction","tests","register","t","source","a","b","c","target","value","dojox","wire","Wire","object","property","getValue","setValue","assertEqual","getA","this","_a","setA","getPropertyValue","p","setPropertyValue","string","number","type","converter"],"mappings":"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","file":"../../../../wire/tests/programmatic/Wire.js","sourcesContent":["dojo.provide(\"dojox.wire.tests.programmatic.Wire\");\r\ndojo.require(\"dojox.wire.Wire\");\r\n\r\n//Simple connverter class to try to use.\r\ndojo.declare(\"dojox.wire.tests.programmatic.Wire.Converter\", null, {\r\n\tconvert: function(v){\r\n\t\treturn v + 1;\r\n\t}\r\n});\r\n\r\n//Simple converter function to try to use.\r\n//To get it in the global namespace, gotta assign it to the\r\n//'window' toplevel object.  Otherwise it ends up in the\r\n//dojo NS and can't be found.\r\nif (dojo.isBrowser) {\r\n\twindow[\"__wireTestConverterFunction\"] = function(v){\r\n\t\treturn v + 1;\r\n\t};\r\n}else{\r\n\tvar __wireTestConverterFunction = function(v){\r\n\t\treturn v + 1;\r\n\t};\r\n}\r\n\r\ntests.register(\"dojox.wire.tests.programmatic.Wire\", [\r\n\r\n\tfunction test_Wire_property(t){\r\n\t\tvar source = {a: \"A\", b: {c: \"B.C\"}};\r\n\t\tvar target = {a: \"a\", b: {c: \"b.c\"}};\r\n\t\tvar value = new dojox.wire.Wire({object: source, property: \"a\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"a\"}).setValue(value);\r\n\t\tt.assertEqual(source.a, target.a);\r\n\r\n\t\t// child property\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"b.c\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"b.c\"}).setValue(value);\r\n\t\tt.assertEqual(source.b.c, target.b.c);\r\n\r\n\t\t// new property\r\n\t\ttarget = {};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"a\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"a\"}).setValue(value);\r\n\t\tt.assertEqual(source.a, target.a);\r\n\r\n\t\t// new parent and child property\r\n\t\ttarget.b = {};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"b.c\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"b.c\"}).setValue(value);\r\n\t\tt.assertEqual(source.b.c, target.b.c);\r\n\r\n\t\t// new parent and child property\r\n\t\ttarget = {};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"b.c\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"b.c\"}).setValue(value);\r\n\t\tt.assertEqual(source.b.c, target.b.c);\r\n\r\n\t\t// new array property\r\n\t\tsource = {a: [\"A\"]};\r\n\t\ttarget = {};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"a[0]\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"a[0]\"}).setValue(value);\r\n\t\tt.assertEqual(source.a[0], target.a[0]);\r\n\r\n\t\t// by getter/setter\r\n\t\tsource = {getA: function() { return this._a; }, _a: \"A\"};\r\n\t\ttarget = {setA: function(a) { this._a = a; }};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"a\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"a\"}).setValue(value);\r\n\t\tt.assertEqual(source._a, target._a);\r\n\r\n\t\t// by get/setPropertyValue\r\n\t\tsource = {getPropertyValue: function(p) { return this[\"_\" + p]; }, _a: \"A\"};\r\n\t\ttarget = {setPropertyValue: function(p, v) { this[\"_\" + p] = v; }};\r\n\t\tvalue = new dojox.wire.Wire({object: source, property: \"a\"}).getValue();\r\n\t\tnew dojox.wire.Wire({object: target, property: \"a\"}).setValue(value);\r\n\t\tt.assertEqual(source._a, target._a);\r\n\t},\r\n\r\n\tfunction test_Wire_type(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar string = new dojox.wire.Wire({object: source, property: \"a\"}).getValue();\r\n\t\tt.assertEqual(\"11\", string + 1);\r\n\t\tvar number = new dojox.wire.Wire({object: source, property: \"a\", type: \"number\"}).getValue();\r\n\t\tt.assertEqual(2, number + 1);\r\n\t},\r\n\r\n\tfunction test_Wire_converterObject(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar converter = {convert: function(v) { return v + 1; }};\r\n\t\tvar string = new dojox.wire.Wire({object: source, property: \"a\", converter: converter}).getValue();\r\n\t\tt.assertEqual(\"11\", string);\r\n\t},\r\n\r\n\tfunction test_Wire_converterFunction(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar converter = {convert: function(v) { return v + 1; }};\r\n\t\tvar number = new dojox.wire.Wire({object: source, property: \"a\", type: \"number\", converter: converter.convert}).getValue();\r\n\t\tt.assertEqual(2, number);\r\n\t},\r\n\r\n\tfunction test_Wire_converterObjectByString(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar number = new dojox.wire.Wire({object: source, property: \"a\", type: \"number\", converter: \"dojox.wire.tests.programmatic.Wire.Converter\"}).getValue();\r\n\t\tt.assertEqual(2, number);\r\n\t},\r\n\r\n\tfunction test_Wire_converterFunctionByString(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar number = new dojox.wire.Wire({object: source, property: \"a\", type: \"number\", converter: \"__wireTestConverterFunction\"}).getValue();\r\n\t\tt.assertEqual(2, number);\r\n\t},\r\n\r\n\tfunction test_Wire_converterObjectByStringDynamic(t){\r\n\t\tvar source = {a: \"1\"};\r\n\t\tvar number = new dojox.wire.Wire({object: source, property: \"a\", type: \"number\", converter: \"dojox.wire.tests.programmatic.ConverterDynamic\"}).getValue();\r\n\t\tt.assertEqual(2, number);\r\n\t}\r\n\r\n]);\r\n"]}