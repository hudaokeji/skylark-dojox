{"version":3,"sources":["wire/tests/programmatic/_base.js"],"names":["dojo","provide","require","tests","register","t","wire","dojox","create","assertTrue","Wire","property","attribute","DataWire","path","XmlWire","children","CompositeWire","columns","TableAdapter","nodes","TreeAdapter","segments","TextAdapter","wireClass","source","a","target","transfer","object","assertEqual","trigger","transferArgument","connect","scope","event","topic","publish","transferDisconnect","connection","disconnect","undefined"],"mappings":"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","file":"../../../../wire/tests/programmatic/_base.js","sourcesContent":["dojo.provide(\"dojox.wire.tests.programmatic._base\");\r\n\r\ndojo.require(\"dojox.wire._base\");\r\n\r\ntests.register(\"dojox.wire.tests.programmatic._base\", [\r\n\r\n\tfunction test_create(t){\r\n\t\tvar wire = dojox.wire.create({});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.Wire);\r\n\r\n\t\twire = dojox.wire.create({property: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.Wire);\r\n\r\n\t\twire = dojox.wire.create({attribute: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.DataWire);\r\n\r\n\t\twire = dojox.wire.create({path: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.XmlWire);\r\n\r\n\t\twire = dojox.wire.create({children: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.CompositeWire);\r\n\r\n\t\twire = dojox.wire.create({columns: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.TableAdapter);\r\n\r\n\t\twire = dojox.wire.create({nodes: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.TreeAdapter);\r\n\r\n\t\twire = dojox.wire.create({segments: \"a\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.TextAdapter);\r\n\r\n\t\twire = dojox.wire.create({wireClass: \"dojox.wire.DataWire\"});\r\n\t\tt.assertTrue(wire instanceof dojox.wire.DataWire);\r\n\t},\r\n\t\r\n\tfunction test_transfer(t){\r\n\t\tvar source = {a: \"A\"};\r\n\t\tvar target = {};\r\n\t\tdojox.wire.transfer(\r\n\t\t\t{object: source, property: \"a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\tt.assertEqual(source.a, target.a);\r\n\t},\r\n\r\n\tfunction test_connect(t){\r\n\t\tvar trigger = {transfer: function() {}, transferArgument: function() {}};\r\n\t\tvar source = {a: \"A\"};\r\n\t\tvar target = {};\r\n\t\tdojox.wire.connect({scope: trigger, event: \"transfer\"},\r\n\t\t\t{object: source, property: \"a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\ttrigger.transfer();\r\n\t\tt.assertEqual(source.a, target.a);\r\n\r\n\t\t// with argument\r\n\t\ttarget = {};\r\n\t\tdojox.wire.connect({scope: trigger, event: \"transferArgument\"},\r\n\t\t\t{property: \"[0].a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\ttrigger.transferArgument(source);\r\n\t\tt.assertEqual(source.a, target.a);\r\n\r\n\t\t// by topic\r\n\t\ttarget = {};\r\n\t\tdojox.wire.connect({topic: \"transfer\"},\r\n\t\t\t{object: source, property: \"a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\tdojo.publish(\"transfer\");\r\n\t\tt.assertEqual(source.a, target.a);\r\n\r\n\t\t// by topic with argument\r\n\t\ttarget = {};\r\n\t\tdojox.wire.connect({topic: \"transferArgument\"},\r\n\t\t\t{property: \"[0].a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\tdojo.publish(\"transferArgument\", [source]);\r\n\t\tt.assertEqual(source.a, target.a);\r\n\t},\r\n\r\n\tfunction test_disconnect(t){\r\n\t\tvar trigger = {transferDisconnect: function() {}};\r\n\t\tvar source = {a: \"A\"};\r\n\t\tvar target = {};\r\n\t\tvar connection = dojox.wire.connect({scope: trigger, event: \"transferDisconnect\"},\r\n\t\t\t{object: source, property: \"a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\ttrigger.transferDisconnect();\r\n\t\tt.assertEqual(source.a, target.a);\r\n\t\tdelete target.a;\r\n\t\tdojox.wire.disconnect(connection);\r\n\t\ttrigger.transferDisconnect();\r\n\t\tt.assertEqual(undefined, target.a);\r\n\r\n\t\t// by topic\r\n\t\ttarget = {};\r\n\t\tconnection = dojox.wire.connect({topic: \"transferDisconnect\"},\r\n\t\t\t{object: source, property: \"a\"},\r\n\t\t\t{object: target, property: \"a\"});\r\n\t\tdojo.publish(\"transferDisconnect\");\r\n\t\tt.assertEqual(source.a, target.a);\r\n\t\tdelete target.a;\r\n\t\tdojox.wire.disconnect(connection);\r\n\t\tdojo.publish(\"transferDisconnect\");\r\n\t\tt.assertEqual(undefined, target.a);\r\n\t}\r\n\r\n]);\r\n"]}