{"version":3,"sources":["wire/DataWire.js"],"names":["dojo","provide","require","declare","dojox","wire","Wire","_wireClass","constructor","args","this","dataStore","parent","_getValue","object","attribute","value","list","split","i","_getAttributeValue","_setValue","item","last","length","_setAttributeValue","undefined","i1","indexOf","i2","index","substring","array","getValues","getValue","setValues","setValue"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,uBAEbD,KAAKE,QAAQ,mBAEbF,KAAKG,QAAQ,sBAAuBC,MAAMC,KAAKC,MAc9CC,WAAY,sBAEZC,YAAa,SAAoBC,IAW5BC,KAAKC,WAAaD,KAAKE,SAC1BF,KAAKC,UAAYD,KAAKE,OAAOD,YAG/BE,UAAW,SAAmBC,GAe7B,IAAIA,IAAWJ,KAAKK,YAAcL,KAAKC,UACtC,OAAOG,EAGR,IAAIE,EAAQF,EACRG,EAAOP,KAAKK,UAAUG,MAAM,KAChC,IAAI,IAAIC,KAAKF,EAEZ,KADAD,EAAQN,KAAKU,mBAAmBJ,EAAOC,EAAKE,KAE3C,OAGF,OAAOH,GAGRK,UAAW,SAAmBP,EAAoBE,GAkBjD,IAAIF,IAAWJ,KAAKK,YAAcL,KAAKC,UACtC,OAAOG,EAMR,IAHA,IAAIQ,EAAOR,EACPG,EAAOP,KAAKK,UAAUG,MAAM,KAC5BK,EAAON,EAAKO,OAAS,EACjBL,EAAI,EAAGA,EAAII,EAAMJ,IAExB,KADAG,EAAOZ,KAAKU,mBAAmBE,EAAML,EAAKE,KAEzC,OAIF,OADAT,KAAKe,mBAAmBH,EAAML,EAAKM,GAAOP,GACnCF,GAGRM,mBAAoB,SAAmBE,EAAgBP,GAgBtD,IAAIC,OAAQU,EACRC,EAAKZ,EAAUa,QAAQ,KAC3B,GAAGD,GAAM,EAAE,CACV,IAAIE,EAAKd,EAAUa,QAAQ,KACvBE,EAAQf,EAAUgB,UAAUJ,EAAK,EAAGE,GACxCd,EAAYA,EAAUgB,UAAU,EAAGJ,GACnC,IAAIK,EAAQtB,KAAKC,UAAUsB,UAAUX,EAAMP,GACxCiB,IAIDhB,EAHGc,EAGKE,EAAMF,GAFNE,QAMVhB,EAAQN,KAAKC,UAAUuB,SAASZ,EAAMP,GAEvC,OAAOC,GAGRS,mBAAoB,SAAmBH,EAAgBP,EAAuBC,GAiB7E,IAAIW,EAAKZ,EAAUa,QAAQ,KAC3B,GAAGD,GAAM,EAAE,CACV,IAAIE,EAAKd,EAAUa,QAAQ,KACvBE,EAAQf,EAAUgB,UAAUJ,EAAK,EAAGE,GACxCd,EAAYA,EAAUgB,UAAU,EAAGJ,GACnC,IAAIK,EAAQ,KACRF,IAGHE,EAAQtB,KAAKC,UAAUsB,UAAUX,EAAMP,MAEtCiB,MAEDA,EAAMF,GAASd,GANfgB,EAAQhB,EAQTN,KAAKC,UAAUwB,UAAUb,EAAMP,EAAWiB,QAE1CtB,KAAKC,UAAUyB,SAASd,EAAMP,EAAWC","file":"../../wire/DataWire.js","sourcesContent":["dojo.provide(\"dojox.wire.DataWire\");\r\n\r\ndojo.require(\"dojox.wire.Wire\");\r\n\r\ndojo.declare(\"dojox.wire.DataWire\", dojox.wire.Wire, {\r\n\t// summary:\r\n\t//\t\tA Wire for item attributes of data stores\r\n\t// description:\r\n\t//\t\tThis class accesses item attributes of data stores with a dotted\r\n\t//\t\tnotation of attribute names specified to 'attribute' property,\r\n\t//\t\tusing data APIs of a data store specified to 'dataStore' property.\r\n\t//\t\tThe root object for this class must be an item of the data store.\r\n\t//\t\tIntermediate attribute names in the dotted notation specify\r\n\t//\t\tattributes for child items, which are used for repeated calls to\r\n\t//\t\tdata APIs until reached to a descendant attribute.\r\n\t//\t\tAttribute names may have an array index, such as \"a[0]\", to\r\n\t//\t\tidentify an array element of the attribute value.\r\n\t\r\n\t_wireClass: \"dojox.wire.DataWire\",\r\n\r\n\tconstructor: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize properties\r\n\t\t// description:\r\n\t\t//\t\tIf 'dataStore' property is not specified, but 'parent' property\r\n\t\t//\t\tis specified, 'dataStore' property is copied from the parent.\r\n\t\t// args:\r\n\t\t//\t\tArguments to initialize properties:\r\n\t\t//\r\n\t\t//\t\t- dataStore: A data store\r\n\t\t//\t\t- attribute: A dotted notation to a descendant attribute\r\n\t\tif(!this.dataStore && this.parent){\r\n\t\t\tthis.dataStore = this.parent.dataStore;\r\n\t\t}\r\n\t},\r\n\t_getValue: function(/*Object*/object){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value of an item\r\n\t\t// description:\r\n\t\t//\t\tThis method uses a root item passed in 'object' argument and\r\n\t\t//\t\t'attribute' property to call getValue() method of\r\n\t\t//\t\t'dataStore'.\r\n\t\t//\t\tIf an attribute name have an array suffix (\"[]\"), getValues()\r\n\t\t//\t\tmethod is called, instead.\r\n\t\t//\t\tIf an index is specified in the array suffix, an array element\r\n\t\t//\t\tfor the index is returned, instead of the array itself.\r\n\t\t// object:\r\n\t\t//\t\tA root item\r\n\t\t// returns:\r\n\t\t//\t\tA value found, otherwise 'undefined'\r\n\t\tif(!object || !this.attribute || !this.dataStore){\r\n\t\t\treturn object; //Object\r\n\t\t}\r\n\r\n\t\tvar value = object;\r\n\t\tvar list = this.attribute.split('.');\r\n\t\tfor(var i in list){\r\n\t\t\tvalue = this._getAttributeValue(value, list[i]);\r\n\t\t\tif(!value){\r\n\t\t\t\treturn undefined; //undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value; //anything\r\n\t},\r\n\r\n\t_setValue: function(/*Object*/object, /*anything*/value){\r\n\t\t// summary:\r\n\t\t//\t\tSet an attribute value to an item\r\n\t\t// description:\r\n\t\t//\t\tThis method uses a root item passed in 'object' argument and\r\n\t\t//\t\t'attribute' property to identify an item.\r\n\t\t//\t\tThen, setValue() method of 'dataStore' is called with a leaf\r\n\t\t//\t\tattribute name and 'value' argument.\r\n\t\t//\t\tIf an attribute name have an array suffix (\"[]\"), setValues()\r\n\t\t//\t\tmethod is called, instead.\r\n\t\t//\t\tIf an index is specified in the array suffix, an array element\r\n\t\t//\t\tfor the index is set to 'value', instead of the array itself.\r\n\t\t// object:\r\n\t\t//\t\tA root item\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\t// returns:\r\n\t\t//\t\t'object', or 'undefined' for invalid attribute\r\n\t\tif(!object || !this.attribute || !this.dataStore){\r\n\t\t\treturn object; //Object\r\n\t\t}\r\n\r\n\t\tvar item = object;\r\n\t\tvar list = this.attribute.split('.');\r\n\t\tvar last = list.length - 1;\r\n\t\tfor(var i = 0; i < last; i++){\r\n\t\t\titem = this._getAttributeValue(item, list[i]);\r\n\t\t\tif(!item){\r\n\t\t\t\treturn undefined; //undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._setAttributeValue(item, list[last], value);\r\n\t\treturn object; //Object\r\n\t},\r\n\r\n\t_getAttributeValue: function(/*Object*/item, /*String*/attribute){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value of an item\r\n\t\t// description:\r\n\t\t//\t\tThis method uses an item passed in 'item' argument and\r\n\t\t//\t\t'attribute' argument to call getValue() method of 'dataStore'.\r\n\t\t//\t\tIf an attribute name have an array suffix (\"[]\"), getValues()\r\n\t\t//\t\tmethod is called, instead.\r\n\t\t//\t\tIf an index is specified in the array suffix, an array element\r\n\t\t//\t\tfor the index is returned, instead of the array itself.\r\n\t\t// item:\r\n\t\t//\t\tAn item\r\n\t\t// attribute:\r\n\t\t//\t\tAn attribute name\r\n\t\t// returns:\r\n\t\t//\t\tA value found, otherwise 'undefined'\r\n\t\tvar value = undefined;\r\n\t\tvar i1 = attribute.indexOf('[');\r\n\t\tif(i1 >= 0){\r\n\t\t\tvar i2 = attribute.indexOf(']');\r\n\t\t\tvar index = attribute.substring(i1 + 1, i2);\r\n\t\t\tattribute = attribute.substring(0, i1);\r\n\t\t\tvar array = this.dataStore.getValues(item, attribute);\r\n\t\t\tif(array){\r\n\t\t\t\tif(!index){ // return array for \"attribute[]\"\r\n\t\t\t\t\tvalue = array;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tvalue = array[index];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tvalue = this.dataStore.getValue(item, attribute);\r\n\t\t}\r\n\t\treturn value; //anything\r\n\t},\r\n\r\n\t_setAttributeValue: function(/*Object*/item, /*String*/attribute, /*anything*/value){\r\n\t\t// summary:\r\n\t\t//\t\tSet an attribute value to an item\r\n\t\t// description:\r\n\t\t//\t\tThis method uses an item passed in 'item' argument and\r\n\t\t//\t\t'attribute' argument to call setValue() method of 'dataStore'\r\n\t\t//\t\twith 'value' argument.\r\n\t\t//\t\tIf an attribute name have an array suffix (\"[]\"), setValues()\r\n\t\t//\t\tmethod is called, instead.\r\n\t\t//\t\tIf an index is specified in the array suffix, an array element\r\n\t\t//\t\tfor the index is set to 'value', instead of the array itself.\r\n\t\t// item:\r\n\t\t//\t\tAn item\r\n\t\t// attribute:\r\n\t\t//\t\tAn attribute name\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\tvar i1 = attribute.indexOf('[');\r\n\t\tif(i1 >= 0){\r\n\t\t\tvar i2 = attribute.indexOf(']');\r\n\t\t\tvar index = attribute.substring(i1 + 1, i2);\r\n\t\t\tattribute = attribute.substring(0, i1);\r\n\t\t\tvar array = null;\r\n\t\t\tif(!index){ // replace whole array for \"attribute[]\"\r\n\t\t\t\tarray = value;\r\n\t\t\t}else{\r\n\t\t\t\tarray = this.dataStore.getValues(item, attribute);\r\n\t\t\t\tif(!array){\r\n\t\t\t\t\tarray = [];\r\n\t\t\t\t}\r\n\t\t\t\tarray[index] = value;\r\n\t\t\t}\r\n\t\t\tthis.dataStore.setValues(item, attribute, array);\r\n\t\t}else{\r\n\t\t\tthis.dataStore.setValue(item, attribute, value);\r\n\t\t}\r\n\t}\r\n});\r\n"]}