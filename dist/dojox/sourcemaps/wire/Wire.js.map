{"version":3,"sources":["wire/Wire.js"],"names":["dojo","provide","require","declare","_wireClass","constructor","args","mixin","this","converter","isString","convertObject","getObject","isFunction","testObj","convert","e","isObject","converterClass","dojox","wire","_getClass","undefined","getValue","defaultObject","object","isWire","property","list","split","i","_getPropertyValue","value","_getValue","type","toString","parseInt","isArray","setValue","o","Error","last","length","p","_setPropertyValue","_setValue","newObject","i1","indexOf","i2","index","substring","array","getPropertyValue","getter","charAt","toUpperCase","_useGet","get","_useAttr","attr","setPropertyValue","setter","_useSet","set","useGet","useSet","useAttr"],"mappings":"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","file":"../../wire/Wire.js","sourcesContent":["dojo.provide(\"dojox.wire.Wire\");\r\n\r\ndojo.require(\"dojox.wire._base\");\r\n\r\ndojo.declare(\"dojox.wire.Wire\", null, {\r\n\t// summary:\r\n\t//\t\tA default and base Wire to access an object property\r\n\t// description:\r\n\t//\t\tThis class accesses a property of an object with a dotted notation\r\n\t//\t\tspecified to 'property' property, such as \"a.b.c\", which identifies\r\n\t//\t\ta descendant property, \"object.a.b.c\".\r\n\t//\t\tProperty names in the dotted notation may have an array index, such\r\n\t//\t\tas \"a[0]\", to identify an array element, literally, \"object.a[0]\".\r\n\t//\t\tWhen a notation start with an array index, such as \"[0].a\", it\r\n\t//\t\tspecifies an array element of the root object (array),\r\n\t//\t\t\"object[0].a\".\r\n\t//\t\tThis class also serves as a base class for other Wire classes,\r\n\t//\t\tpreparing a root object and converting a return value, so that\r\n\t//\t\tsub-classes just can implement _getValue() and _setValue() called\r\n\t//\t\tfrom getValue() and setValue() implemented by this calss.\r\n\t\r\n\t_wireClass: \"dojox.wire.Wire\",\r\n\t\r\n\tconstructor: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize properties\r\n\t\t// description:\r\n\t\t//\t\tIf 'converter' property is specified and is a string for\r\n\t\t//\t\ta converter class, an instanceof the converter class is\r\n\t\t//\t\tcreated.\r\n\t\t// args:\r\n\t\t//\t\tArguments to initialize properties:\r\n\t\t//\r\n\t\t//\t\t- object: A root object (or another Wire to access a root object)\r\n\t\t//\t\t- property: A dotted notation to a descendant property\r\n\t\t//\t\t- type: A type of the return value (for the source Wire)\r\n\t\t//\t\t- converter: A converter object (or class name) to convert the return\r\n\t\t//\t\t\tvalue (for the source Wire)\r\n\t\tdojo.mixin(this, args);\r\n\r\n\t\tif(this.converter){\r\n\t\t\tif(dojo.isString(this.converter)){\r\n\t\t\t\t//First check the object tree for it.  Might be defined variable\r\n\t\t\t\t//name/global function (like a jsId, or just a function name).\r\n\t\t\t\tvar convertObject = dojo.getObject(this.converter);\r\n\t\t\t\tif(dojo.isFunction(convertObject)){\r\n\t\t\t\t\t//We need to see if this is a pure function or an object constructor...\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tvar testObj = new convertObject();\r\n\t\t\t\t\t\tif(testObj && !dojo.isFunction(testObj[\"convert\"])){\r\n\t\t\t\t\t\t\t//Looks like a 'pure' function...\r\n\t\t\t\t\t\t\tthis.converter = {convert: convertObject};\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tthis.converter = testObj;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t//Do if this fails.\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(dojo.isObject(convertObject)){\r\n\t\t\t\t\t//It's an object, like a jsId ... see if it has a convert function\r\n\t\t\t\t\tif(dojo.isFunction(convertObject[\"convert\"])){\r\n\t\t\t\t\t\tthis.converter = convertObject;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//No object with that name (Converter is still a string),\r\n\t\t\t\t//then look for a class that needs to be dynamically loaded...\r\n\t\t\t\tif(dojo.isString(this.converter)){\r\n\t\t\t\t\tvar converterClass = dojox.wire._getClass(this.converter);\r\n\t\t\t\t\tif(converterClass){\r\n\t\t\t\t\t\tthis.converter = new converterClass();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis.converter = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else if(dojo.isFunction(this.converter)){\r\n\t\t\t\tthis.converter = {convert: this.converter};\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tgetValue: function(/*Object||Array*/defaultObject){\r\n\t\t// summary:\r\n\t\t//\t\tReturn a value of an object\r\n\t\t// description:\r\n\t\t//\t\tThis method first determines a root object as follows:\r\n\t\t//\r\n\t\t//\t\t\t1. If 'object' property specified,\r\n\t\t//\t\t\t1.1 If 'object' is a Wire, its getValue() method is called to\r\n\t\t//\t\t\tobtain a root object.\r\n\t\t//\t\t\t1.2 Otherwise, use 'object' as a root object.\r\n\t\t//\t\t\t2. Otherwise, use 'defaultObject' argument.\r\n\t\t//\t\t\t3. If 'property' is specified, it is used to get a property\r\n\t\t//\t\t\t\tvalue.\r\n\t\t//\r\n\t\t//\t\tThen, if a sub-class implements _getValue() method, it is\r\n\t\t//\t\tcalled with the root object to get the return value.\r\n\t\t//\t\tOtherwise, the root object (typically, a property valye) is\r\n\t\t//\t\tused for the return value.\r\n\t\t//\t\tFinally, if 'type' property is specified, the return value is\r\n\t\t//\t\tconverted to the specified primitive type (\"string\", \"number\",\r\n\t\t//\t\t\"boolean\" and \"array\").\r\n\t\t//\t\tIf 'converter' property is specified, its convert() method is\r\n\t\t//\t\tcalled to convert the value.\r\n\t\t// defaultObject:\r\n\t\t//\t\tA default root object\r\n\t\t// returns:\r\n\t\t//\t\tA value found\r\n\t\tvar object = undefined;\r\n\t\tif(dojox.wire.isWire(this.object)){\r\n\t\t\tobject = this.object.getValue(defaultObject);\r\n\t\t}else{\r\n\t\t\tobject = (this.object || defaultObject);\r\n\t\t}\r\n\r\n\t\tif(this.property){\r\n\t\t\tvar list = this.property.split('.');\r\n\t\t\tfor(var i in list){\r\n\t\t\t\tif(!object){\r\n\t\t\t\t\treturn object; //anything (null, undefined, etc)\r\n\t\t\t\t}\r\n\t\t\t\tobject = this._getPropertyValue(object, list[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar value = undefined;\r\n\t\tif(this._getValue){\r\n\t\t\tvalue = this._getValue(object);\r\n\t\t}else{\r\n\t\t\tvalue = object;\r\n\t\t}\r\n\r\n\t\tif(value){\r\n\t\t\tif(this.type){\r\n\t\t\t\tif(this.type == \"string\"){\r\n\t\t\t\t\tvalue = value.toString();\r\n\t\t\t\t}else if(this.type == \"number\"){\r\n\t\t\t\t\tvalue = parseInt(value, 10);\r\n\t\t\t\t}else if(this.type == \"boolean\"){\r\n\t\t\t\t\tvalue = (value != \"false\");\r\n\t\t\t\t}else if(this.type == \"array\"){\r\n\t\t\t\t\tif(!dojo.isArray(value)){\r\n\t\t\t\t\t\tvalue = [value];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.converter && this.converter.convert){\r\n\t\t\t\tvalue = this.converter.convert(value, this); // optional \"this\" context\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value; //anything\r\n\t},\r\n\r\n\tsetValue: function(/*anything*/value, /*Object||Array*/defaultObject){\r\n\t\t// summary:\r\n\t\t//\t\tSet a value to an object\r\n\t\t// description:\r\n\t\t//\t\tThis method first determines a root object as follows:\r\n\t\t//\r\n\t\t//\t\t\t1. If 'object' property specified,\r\n\t\t//\t\t\t1.1 If 'object' is a Wire, its getValue() method is called to\r\n\t\t//\t\t\t\tobtain a root object.\r\n\t\t//\t\t\t1.2 Otherwise, use 'object' as a root object.\r\n\t\t//\t\t\t2. Otherwise, use 'defaultObject' argument.\r\n\t\t//\t\t\t3. If 'property' is specified, it is used to get a property\r\n\t\t//\t\t\t\tvalue.\r\n\t\t//\r\n\t\t//\t\tThen, if a sub-class implements _setValue() method, it is\r\n\t\t//\t\tcalled with the root object and 'value' argument to set\r\n\t\t//\t\tthe value.\r\n\t\t//\t\tOtherwise, 'value' is set to a property specified with\r\n\t\t//\t\t'property' property.\r\n\t\t//\t\tIf the root object is undefined and 'object' property is a Wire\r\n\t\t//\t\tand a new object is created and returned by _setValue() it is\r\n\t\t//\t\tset through 'object' (setValue() method).\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\t// defaultObject:\r\n\t\t//\t\tA default root object\r\n\t\tvar object = undefined;\r\n\t\tif(dojox.wire.isWire(this.object)){\r\n\t\t\tobject = this.object.getValue(defaultObject);\r\n\t\t}else{\r\n\t\t\tobject = (this.object || defaultObject);\r\n\t\t}\r\n\r\n\t\tvar property = undefined;\r\n\t\tvar o;\r\n\t\tif(this.property){\r\n\t\t\tif(!object){\r\n\t\t\t\tif(dojox.wire.isWire(this.object)){\r\n\t\t\t\t\tobject = {};\r\n\t\t\t\t\tthis.object.setValue(object, defaultObject);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error(this._wireClass + \".setValue(): invalid object\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar list = this.property.split('.');\r\n\t\t\tvar last = list.length - 1;\r\n\t\t\tfor(var i = 0; i < last; i++){\r\n\t\t\t\tvar p = list[i];\r\n\t\t\t\to = this._getPropertyValue(object, p);\r\n\t\t\t\tif(!o){\r\n\t\t\t\t\to = {};\r\n\t\t\t\t\tthis._setPropertyValue(object, p, o);\r\n\t\t\t\t}\r\n\t\t\t\tobject = o;\r\n\t\t\t}\r\n\t\t\tproperty = list[last];\r\n\t\t}\r\n\r\n\t\tif(this._setValue){\r\n\t\t\tif(property){\r\n\t\t\t\to = this._getPropertyValue(object, property);\r\n\t\t\t\tif(!o){\r\n\t\t\t\t\to = {};\r\n\t\t\t\t\tthis._setPropertyValue(object, property, o);\r\n\t\t\t\t}\r\n\t\t\t\tobject = o;\r\n\t\t\t}\r\n\t\t\tvar newObject = this._setValue(object, value);\r\n\t\t\tif(!object && newObject){\r\n\t\t\t\tif(dojox.wire.isWire(this.object)){\r\n\t\t\t\t\tthis.object.setValue(newObject, defaultObject);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error(this._wireClass + \".setValue(): invalid object\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tif(property){\r\n\t\t\t\tthis._setPropertyValue(object, property, value);\r\n\t\t\t}else{\r\n\t\t\t\tif(dojox.wire.isWire(this.object)){\r\n\t\t\t\t\tthis.object.setValue(value, defaultObject);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthrow new Error(this._wireClass + \".setValue(): invalid property\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_getPropertyValue: function(/*Object||Array*/object, /*String*/property){\r\n\t\t// summary:\r\n\t\t//\t\tReturn a property value of an object\r\n\t\t// description:\r\n\t\t//\t\tA value for 'property' of 'object' is returned.\r\n\t\t//\t\tIf 'property' ends with an array index, it is used to indentify\r\n\t\t//\t\tan element of an array property.\r\n\t\t//\t\tIf 'object' implements getPropertyValue(), it is called with\r\n\t\t//\t\t'property' to obtain the property value.\r\n\t\t//\t\tIf 'object' implements a getter for the property, it is called\r\n\t\t//\t\tto obtain the property value.\r\n\t\t// object:\r\n\t\t//\t\tA default root object\r\n\t\t// property:\r\n\t\t//\t\tA property name\r\n\t\t// returns:\r\n\t\t//\t\tA value found, otherwise 'undefined'\r\n\t\tvar value = undefined;\r\n\t\tvar i1 = property.indexOf('[');\r\n\t\tif(i1 >= 0){\r\n\t\t\tvar i2 = property.indexOf(']');\r\n\t\t\tvar index = property.substring(i1 + 1, i2);\r\n\t\t\tvar array = null;\r\n\t\t\tif(i1 === 0){ // object is array\r\n\t\t\t\tarray = object;\r\n\t\t\t}else{\r\n\t\t\t\tproperty = property.substring(0, i1);\r\n\t\t\t\tarray = this._getPropertyValue(object, property);\r\n\t\t\t\tif(array && !dojo.isArray(array)){\r\n\t\t\t\t\tarray = [array];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(array){\r\n\t\t\t\tvalue = array[index];\r\n\t\t\t}\r\n\t\t}else if(object.getPropertyValue){\r\n\t\t\tvalue = object.getPropertyValue(property);\r\n\t\t}else{\r\n\t\t\tvar getter = \"get\" + property.charAt(0).toUpperCase() + property.substring(1);\r\n\t\t\tif(this._useGet(object)){\r\n\t\t\t\tvalue = object.get(property);\r\n\t\t\t}else if(this._useAttr(object)){\r\n\t\t\t\tvalue = object.attr(property);\r\n\t\t\t} else if(object[getter]){\r\n\t\t\t\tvalue = object[getter]();\r\n\t\t\t}else{\r\n\t\t\t\tvalue = object[property];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value; //anything\r\n\t},\r\n\r\n\t_setPropertyValue: function(/*Object||Array*/object, /*String*/property, /*anything*/value){\r\n\t\t// summary:\r\n\t\t//\t\tSet a property value to an object\r\n\t\t// description:\r\n\t\t//\t\t'value' is set to 'property' of 'object'.\r\n\t\t//\t\tIf 'property' ends with an array index, it is used to indentify\r\n\t\t//\t\tan element of an array property to set the value.\r\n\t\t//\t\tIf 'object' implements setPropertyValue(), it is called with\r\n\t\t//\t\t'property' and 'value' to set the property value.\r\n\t\t//\t\tIf 'object' implements a setter for the property, it is called\r\n\t\t//\t\twith 'value' to set the property value.\r\n\t\t// object:\r\n\t\t//\t\tAn object\r\n\t\t// property:\r\n\t\t//\t\tA property name\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\tvar i1 = property.indexOf('[');\r\n\t\tif(i1 >= 0){\r\n\t\t\tvar i2 = property.indexOf(']');\r\n\t\t\tvar index = property.substring(i1 + 1, i2);\r\n\t\t\tvar array = null;\r\n\t\t\tif(i1 === 0){ // object is array\r\n\t\t\t\tarray = object;\r\n\t\t\t}else{\r\n\t\t\t\tproperty = property.substring(0, i1);\r\n\t\t\t\tarray = this._getPropertyValue(object, property);\r\n\t\t\t\tif(!array){\r\n\t\t\t\t\tarray = [];\r\n\t\t\t\t\tthis._setPropertyValue(object, property, array);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarray[index] = value;\r\n\t\t}else if(object.setPropertyValue){\r\n\t\t\tobject.setPropertyValue(property, value);\r\n\t\t}else{\r\n\t\t\tvar setter = \"set\" + property.charAt(0).toUpperCase() + property.substring(1);\r\n\t\t\tif(this._useSet(object)){\r\n\t\t\t\tobject.set(property, value);\r\n\t\t\t}else if(this._useAttr(object)){\r\n\t\t\t\tobject.attr(property, value);\r\n\t\t\t}else if(object[setter]){\r\n\t\t\t\tobject[setter](value);\r\n\t\t\t}else{\r\n\t\t\t\tobject[property] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_useGet: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to detect if dijit.get support exists on the target\r\n\t\t// object:\r\n\t\t//\t\tThe target object to set the property of.\r\n\t\tvar useGet = false;\r\n\t\tif(dojo.isFunction(object.get)){\r\n\t\t\tuseGet = true;\r\n\t\t}\r\n\t\treturn useGet;\r\n\t},\r\n\r\n\t_useSet: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to detect if dijit.set support exists on the target\r\n\t\t// object:\r\n\t\t//\t\tThe target object to set the property of.\r\n\t\tvar useSet = false;\r\n\t\tif(dojo.isFunction(object.set)){\r\n\t\t\tuseSet = true;\r\n\t\t}\r\n\t\treturn useSet;\r\n\t},\r\n\r\n\t_useAttr: function(object){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to detect if dijit.attr support exists on the target\r\n\t\t// object:\r\n\t\t//\t\tThe target object to set the property of.\r\n\t\tvar useAttr = false;\r\n\t\tif(dojo.isFunction(object.attr)){\r\n\t\t\tuseAttr = true;\r\n\t\t}\r\n\t\treturn useAttr;\r\n\t}\r\n});\r\n"]}