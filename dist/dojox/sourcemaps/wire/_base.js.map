{"version":3,"sources":["wire/_base.js"],"names":["dojo","provide","dojox","wire","_defaultWireClass","_wireClasses","attribute","path","children","columns","nodes","segments","register","wireClass","key","_getClass","name","getObject","create","args","isString","isWire","_wireClass","transfer","source","target","defaultObject","defaultTargetObject","value","getValue","setValue","connect","trigger","connection","topic","handle","subscribe","arguments","event","scope","disconnect","unsubscribe"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,oBAEbC,MAAMC,KAAKC,kBAAoB,kBAE/BF,MAAMC,KAAKE,cACVC,UAAa,sBACbC,KAAQ,qBACRC,SAAY,2BACZC,QAAW,0BACXC,MAAS,yBACTC,SAAY,0BAGbT,MAAMC,KAAKS,SAAW,SAA6BC,EAAqBC,GAUnED,GAAcC,IAGfZ,MAAMC,KAAKE,aAAaS,KAG3BZ,MAAMC,KAAKE,aAAaS,GAAOD,KAGhCX,MAAMC,KAAKY,UAAY,SAAmBC,GAWzC,OADAhB,KAAc,QAAEgB,GACThB,KAAKiB,UAAUD,IAGvBd,MAAMC,KAAKe,OAAS,SAAmBC,GAalCA,IACHA,MAED,IAAIN,EAAYM,EAAKN,UACrB,GAAGA,EACCb,KAAKoB,SAASP,KAChBA,EAAYX,MAAMC,KAAKY,UAAUF,SAGlC,IAAI,IAAIC,KAAOK,EACd,GAAIA,EAAKL,KAGTD,EAAYX,MAAMC,KAAKE,aAAaS,IACvB,CACTd,KAAKoB,SAASP,KAChBA,EAAYX,MAAMC,KAAKY,UAAUF,GACjCX,MAAMC,KAAKE,aAAaS,GAAOD,GAEhC,MAUH,OANIA,IACAb,KAAKoB,SAASlB,MAAMC,KAAKC,qBAC3BF,MAAMC,KAAKC,kBAAoBF,MAAMC,KAAKY,UAAUb,MAAMC,KAAKC,oBAEhES,EAAYX,MAAMC,KAAKC,mBAEjB,IAAIS,EAAUM,IAGtBjB,MAAMC,KAAKkB,OAAS,SAAmBlB,GAUtC,OAAQA,GAAQA,EAAKmB,YAGtBpB,MAAMC,KAAKoB,SAAW,SAAyBC,EAAwBC,EAAmBC,EAA0BC,GAmBnH,GAAIH,GAAWC,EAAf,CAGIvB,MAAMC,KAAKkB,OAAOG,KACrBA,EAAStB,MAAMC,KAAKe,OAAOM,IAExBtB,MAAMC,KAAKkB,OAAOI,KACrBA,EAASvB,MAAMC,KAAKe,OAAOO,IAG5B,IAAIG,EAAQJ,EAAOK,SAASH,GAC5BD,EAAOK,SAASF,EAAQD,GAAuBD,KAGhDxB,MAAMC,KAAK4B,QAAU,SAAmBC,EAAyBR,EAAwBC,GAoBxF,GAAIO,GAAYR,GAAWC,EAA3B,CAIA,IAAIQ,GAAcC,MAAOF,EAAQE,OAUjC,OATGF,EAAQE,MACVD,EAAWE,OAASnC,KAAKoC,UAAUJ,EAAQE,MAAO,WACjDhC,MAAMC,KAAKoB,SAASC,EAAQC,EAAQY,aAE7BL,EAAQM,QAChBL,EAAWE,OAASnC,KAAK+B,QAAQC,EAAQO,MAAOP,EAAQM,MAAO,WAC9DpC,MAAMC,KAAKoB,SAASC,EAAQC,EAAQY,cAG/BJ,IAGR/B,MAAMC,KAAKqC,WAAa,SAAmBP,GAQtCA,GAAeA,EAAWE,SAI3BF,EAAWC,MACblC,KAAKyC,YAAYR,EAAWE,QAE5BnC,KAAKwC,WAAWP,EAAWE","file":"../../wire/_base.js","sourcesContent":["dojo.provide(\"dojox.wire._base\");\r\n\r\ndojox.wire._defaultWireClass = \"dojox.wire.Wire\";\r\n\r\ndojox.wire._wireClasses = {\r\n\t\"attribute\": \"dojox.wire.DataWire\",\r\n\t\"path\": \"dojox.wire.XmlWire\",\r\n\t\"children\": \"dojox.wire.CompositeWire\",\r\n\t\"columns\": \"dojox.wire.TableAdapter\",\r\n\t\"nodes\": \"dojox.wire.TreeAdapter\",\r\n\t\"segments\": \"dojox.wire.TextAdapter\"\r\n};\r\n\r\ndojox.wire.register = function(/*Function||String*/wireClass, /*String*/key){\r\n\t// summary:\r\n\t//\t\tRegister a Wire class\r\n\t// description:\r\n\t//\t\tThe specified Wire class or a class name is registered with\r\n\t//\t\ta key property of arguments to create a Wire\r\n\t// wireClass:\r\n\t//\t\tA class or full qualified class name\r\n\t// key:\r\n\t//\t\tA key property of arguments to create a Wire\r\n\tif(!wireClass || !key){\r\n\t\treturn; //undefined\r\n\t}\r\n\tif(dojox.wire._wireClasses[key]){ // key already in use\r\n\t\treturn; //undefined\r\n\t}\r\n\tdojox.wire._wireClasses[key] = wireClass;\r\n};\r\n\r\ndojox.wire._getClass = function(/*String*/name){\r\n\t// summary:\r\n\t//\t\tReturns a class\r\n\t// description:\r\n\t//\t\tThe class is loaded by dojo.require() and returned\r\n\t//\t\tby dojo.getObject().\r\n\t// name:\r\n\t//\t\tA class name\r\n\t// returns:\r\n\t//\t\tA class\r\n\tdojo[\"require\"](name); // use dojo[\"require\"] instead of dojo.require to avoid a build problem\r\n\treturn dojo.getObject(name); //Function\r\n};\r\n\r\ndojox.wire.create = function(/*Object*/args){\r\n\t// summary:\r\n\t//\t\tCreate a Wire from arguments\r\n\t// description:\r\n\t//\t\tIf 'args' specifies 'wireClass', it is used as a class or full\r\n\t//\t\tqualified class name to create a Wire with 'args' as arguments.\r\n\t//\t\tOtherwise, a Wire class is determined by other proeprties of 'args'\r\n\t//\t\tchecking if 'args' specifies a key property for a Wire class.\r\n\t//\t\tIf no key property found, the default Wire class is used.\r\n\t// args:\r\n\t//\t\tArguments to create a Wire\r\n\t// returns:\r\n\t//\t\tA Wire\r\n\tif(!args){\r\n\t\targs = {};\r\n\t}\r\n\tvar wireClass = args.wireClass;\r\n\tif(wireClass){\r\n\t\tif(dojo.isString(wireClass)){\r\n\t\t\twireClass = dojox.wire._getClass(wireClass);\r\n\t\t}\r\n\t}else{\r\n\t\tfor(var key in args){\r\n\t\t\tif(!args[key]){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\twireClass = dojox.wire._wireClasses[key];\r\n\t\t\tif(wireClass){\r\n\t\t\t\tif(dojo.isString(wireClass)){\r\n\t\t\t\t\twireClass = dojox.wire._getClass(wireClass);\r\n\t\t\t\t\tdojox.wire._wireClasses[key] = wireClass;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(!wireClass){\r\n\t\tif(dojo.isString(dojox.wire._defaultWireClass)){\r\n\t\t\tdojox.wire._defaultWireClass = dojox.wire._getClass(dojox.wire._defaultWireClass);\r\n\t\t}\r\n\t\twireClass = dojox.wire._defaultWireClass;\r\n\t}\r\n\treturn new wireClass(args); //Object\r\n};\r\n\r\ndojox.wire.isWire = function(/*Object*/wire){\r\n\t// summary:\r\n\t//\t\tCheck if an object is a Wire\r\n\t// description:\r\n\t//\t\tIf the specified object is a Wire, true is returned.\r\n\t//\t\tOtherwise, false is returned.\r\n\t// wire:\r\n\t//\t\tAn object to check\r\n\t// returns:\r\n\t//\t\tTrue if the object is a Wire, otherwise false\r\n\treturn (wire && wire._wireClass); //Boolean\r\n};\r\n\r\ndojox.wire.transfer = function(/*Wire||Object*/source, /*Wire||Object*/target, /*Object?*/defaultObject, /*Object?*/defaultTargetObject){\r\n\t// summary:\r\n\t//\t\tTransfer a source value to a target value\r\n\t// description:\r\n\t//\t\tIf 'source' and/or 'target' are not Wires, Wires are created with\r\n\t//\t\tthem as arguments.\r\n\t//\t\tA value is got through the source Wire and set through the target\r\n\t//\t\tWire.\r\n\t//\t\t'defaultObject' is passed to Wires as a default root object.\r\n\t//\t\tIf 'defaultTargetObject' is specified, it is passed to the target\r\n\t//\t\tWire as a default root object, instead of 'defaultObject'.\r\n\t// source:\r\n\t//\t\tA Wire or arguments to create a Wire for a source value\r\n\t// target:\r\n\t//\t\tA Wire or arguments to create a Wire for a target value\r\n\t// defaultObject:\r\n\t//\t\tOptional default root object passed to Wires\r\n\t// defaultTargetObject:\r\n\t//\t\tOptional default root object passed to Wires\r\n\tif(!source || !target){\r\n\t\treturn; //undefined\r\n\t}\r\n\tif(!dojox.wire.isWire(source)){\r\n\t\tsource = dojox.wire.create(source);\r\n\t}\r\n\tif(!dojox.wire.isWire(target)){\r\n\t\ttarget = dojox.wire.create(target);\r\n\t}\r\n\r\n\tvar value = source.getValue(defaultObject);\r\n\ttarget.setValue(value, (defaultTargetObject || defaultObject));\r\n};\r\n\r\ndojox.wire.connect = function(/*Object*/trigger, /*Wire||Object*/source, /*Wire||Object*/target){\r\n\t// summary:\r\n\t//\t\tTransfer a source value to a target value on a trigger event or\r\n\t//\t\ttopic\r\n\t// description:\r\n\t//\t\tIf 'trigger' specifies 'topic', the topic is subscribed to transer\r\n\t//\t\ta value on the topic.\r\n\t//\t\tOtherwise, the event specified to 'event' of 'trigger' is listened\r\n\t//\t\tto transfer a value.\r\n\t//\t\tOn the specified event or topic, transfer() is called with\r\n\t//\t\t'source', 'target' and the arguments of the event or topic (as\r\n\t//\t\tdefault root objects).\r\n\t// trigger:\r\n\t//\t\tAn event or topic to trigger a transfer\r\n\t// source:\r\n\t//\t\tA Wire or arguments to create a Wire for a source value\r\n\t// target:\r\n\t//\t\tA Wire or arguments to create a Wire for a target value\r\n\t// returns:\r\n\t//\t\tA connection handle for disconnect()\r\n\tif(!trigger || !source || !target){\r\n\t\treturn; //undefined\r\n\t}\r\n\r\n\tvar connection = {topic: trigger.topic};\r\n\tif(trigger.topic){\r\n\t\tconnection.handle = dojo.subscribe(trigger.topic, function(){\r\n\t\t\tdojox.wire.transfer(source, target, arguments);\r\n\t\t});\r\n\t}else if(trigger.event){\r\n\t\tconnection.handle = dojo.connect(trigger.scope, trigger.event, function(){\r\n\t\t\tdojox.wire.transfer(source, target, arguments);\r\n\t\t});\r\n\t}\r\n\treturn connection; //Object\r\n};\r\n\r\ndojox.wire.disconnect = function(/*Object*/connection){\r\n\t// summary:\r\n\t//\t\tRemove a connection or subscription for transfer\r\n\t// description:\r\n\t//\t\tIf 'handle' has 'topic', the topic is unsubscribed.\r\n\t//\t\tOtherwise, the listener to an event is removed.\r\n\t// connection:\r\n\t//\t\tA connection handle returned by connect()\r\n\tif(!connection || !connection.handle){\r\n\t\treturn; //undefined\r\n\t}\r\n\r\n\tif(connection.topic){\r\n\t\tdojo.unsubscribe(connection.handle);\r\n\t}else{\r\n\t\tdojo.disconnect(connection.handle);\r\n\t}\r\n};\r\n"]}