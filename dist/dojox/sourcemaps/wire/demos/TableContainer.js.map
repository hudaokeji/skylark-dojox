{"version":3,"sources":["wire/demos/TableContainer.js"],"names":["dojo","provide","require","declare","dijit","_Widget","_Templated","_Container","templateString","rowCount","headers","addRow","array","row","document","createElement","i","this","addClass","cell","text","createTextNode","appendChild","tableContainer","e","console","debug","clearTable","firstChild","nextSibling","removeChild","postCreate","split","tr","header","th"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,mCAEbD,KAAKE,QAAQ,eACbF,KAAKE,QAAQ,iBACbF,KAAKE,QAAQ,oBAEbF,KAAKG,QAAQ,mCAAqCC,MAAMC,QAASD,MAAME,WAAYF,MAAMG,aAMxFC,eAAgB,yFAChBC,SAAU,EACVC,QAAS,GACTC,OAAQ,SAASC,GAKhB,IACC,IAAIC,EAAMC,SAASC,cAAc,MAKjC,IAAI,IAAIC,KAJJC,KAAKR,SAAS,GAAO,GACxBT,KAAKkB,SAASL,EAAK,aAEpBI,KAAKR,WACQG,EAAM,CAClB,IAAIO,EAAOL,SAASC,cAAc,MAC9BK,EAAON,SAASO,eAAeT,EAAMI,IACzCG,EAAKG,YAAYF,GACjBP,EAAIS,YAAYH,GAGjBF,KAAKM,eAAeD,YAAYT,GAChC,MAAMW,GAAIC,QAAQC,MAAMF,KAG1BG,WAAY,WAKX,KAAMV,KAAKM,eAAeK,WAAWC,aACpCZ,KAAKM,eAAeO,YAAYb,KAAKM,eAAeK,WAAWC,aAEhEZ,KAAKR,SAAW,GAGjBsB,WAAY,WAGX,IAAIrB,EAAUO,KAAKP,QAAQsB,MAAM,KAC7BC,EAAKnB,SAASC,cAAc,MAChC,IAAIC,KAAKN,EAAQ,CAEhB,IAAIwB,EAASxB,EAAQM,GACjBmB,EAAKrB,SAASC,cAAc,MAC5BK,EAAON,SAASO,eAAea,GACnCC,EAAGb,YAAYF,GACfa,EAAGX,YAAYa,GAEhBlB,KAAKM,eAAeD,YAAYW","file":"../../../wire/demos/TableContainer.js","sourcesContent":["dojo.provide(\"dojox.wire.demos.TableContainer\");\r\n\r\ndojo.require(\"dojo.parser\");\r\ndojo.require(\"dijit._Widget\");\r\ndojo.require(\"dijit._Templated\");\r\n\r\ndojo.declare(\"dojox.wire.demos.TableContainer\", [ dijit._Widget, dijit._Templated, dijit._Container ], {\r\n\t// summary:\r\n\t//\t\tExtremely simple 'widget' that is a table generator with an addRow function that takes an array\r\n\t//\t\tas the row to add, where each entry is a cell in the row.  This demo widget is for use with the\r\n\t//\t\twire demos.\r\n\r\n\ttemplateString: \"<table class='tablecontainer'><tbody dojoAttachPoint='tableContainer'></tbody></table>\",\r\n\trowCount: 0,\r\n\theaders: \"\",\r\n\taddRow: function(array){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to add in a new row from the elements in the array map to cells in the row.\r\n\t\t// array:\r\n\t\t//\t\tArray of row values to add.\r\n\t\ttry{\r\n\t\t\tvar row = document.createElement(\"tr\");\r\n\t\t\tif((this.rowCount%2) === 0){\r\n\t\t\t\tdojo.addClass(row, \"alternate\");\r\n\t\t\t}\r\n\t\t\tthis.rowCount++;\r\n\t\t\tfor(var i in array){\r\n\t\t\t\tvar cell = document.createElement(\"td\");\r\n\t\t\t\tvar text = document.createTextNode(array[i]);\r\n\t\t\t\tcell.appendChild(text);\r\n\t\t\t\trow.appendChild(cell);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis.tableContainer.appendChild(row);\r\n\t\t}catch(e){ console.debug(e); }\r\n\t},\r\n\r\n\tclearTable: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to clear all the current rows in the table, except for the header.\r\n\r\n\t\t//Always leave the first row, which is the table header.\r\n\t\twhile(this.tableContainer.firstChild.nextSibling){\r\n\t\t\tthis.tableContainer.removeChild(this.tableContainer.firstChild.nextSibling);\r\n\t\t}\r\n\t\tthis.rowCount = 0;\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tWidget lifecycle function to handle generation of the header elements in the table.\r\n\t\tvar headers = this.headers.split(\",\");\r\n\t\tvar tr = document.createElement(\"tr\");\r\n\t\tfor(i in headers){\r\n\t\t\t\r\n\t\t\tvar header = headers[i];\r\n\t\t\tvar th = document.createElement(\"th\");\r\n\t\t\tvar text = document.createTextNode(header);\r\n\t\t\tth.appendChild(text);\r\n\t\t\ttr.appendChild(th);\r\n\t\t}\r\n\t\tthis.tableContainer.appendChild(tr);\r\n\t}\r\n});\r\n"]}