{"version":3,"sources":["wire/TreeAdapter.js"],"names":["dojo","provide","require","declare","dojox","wire","CompositeWire","_wireClass","constructor","args","this","_initializeChildren","nodes","_getValue","object","array","isArray","i","i2","concat","_getNodes","_setValue","value","Error","children","child","node","parent","isWire","create","title","getValue","length","push"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,0BAEbD,KAAKE,QAAQ,4BAEbF,KAAKG,QAAQ,yBAA0BC,MAAMC,KAAKC,eA2BjDC,WAAY,yBAEZC,YAAa,SAAoBC,GAYhCC,KAAKC,oBAAoBD,KAAKE,QAE/BC,UAAW,SAAkBC,GAqB5B,IAAIA,IAAWJ,KAAKE,MACnB,OAAOE,EAGR,IAAIC,EAAQD,EACRd,KAAKgB,QAAQD,KAChBA,GAASA,IAGV,IAAIH,KACJ,IAAI,IAAIK,KAAKF,EACZ,IAAI,IAAIG,KAAMR,KAAKE,MAClBA,EAAQA,EAAMO,OAAOT,KAAKU,UAAUL,EAAME,GAAIP,KAAKE,MAAMM,KAG3D,OAAON,GAGRS,UAAW,SAAkBP,EAAiBQ,GAG7C,MAAM,IAAIC,MAAM,oBAAsBb,KAAKH,WAAa,eAGzDI,oBAAqB,SAAkBa,GAWtC,GAAIA,EAIJ,IAAI,IAAIP,KAAKO,EAAS,CACrB,IAAIC,EAAQD,EAASP,GAClBQ,EAAMC,OACRD,EAAMC,KAAKC,OAASjB,KAChBN,MAAMC,KAAKuB,OAAOH,EAAMC,QAC3BD,EAAMC,KAAOtB,MAAMC,KAAKwB,OAAOJ,EAAMC,QAGpCD,EAAMK,QACRL,EAAMK,MAAMH,OAASjB,KACjBN,MAAMC,KAAKuB,OAAOH,EAAMK,SAC3BL,EAAMK,MAAQ1B,MAAMC,KAAKwB,OAAOJ,EAAMK,SAGrCL,EAAMD,UACRd,KAAKC,oBAAoBc,EAAMD,YAKlCJ,UAAW,SAAmBN,EAAkBW,GAqB/C,IAAIV,EAAQ,KACZ,GAAGU,EAAMC,KAAK,CAEb,KADAX,EAAQU,EAAMC,KAAKK,SAASjB,IAE3B,SAEGd,KAAKgB,QAAQD,KAChBA,GAASA,SAGVA,GAASD,GAGV,IAAIF,KACJ,IAAI,IAAIK,KAAKF,EAAM,CAClBD,EAASC,EAAME,GACf,IAAIS,KAMJ,GALGD,EAAMK,MACRJ,EAAKI,MAAQL,EAAMK,MAAMC,SAASjB,GAElCY,EAAKI,MAAQhB,EAEXW,EAAMD,SAAS,CACjB,IAAIA,KACJ,IAAI,IAAIN,KAAMO,EAAMD,SACnBA,EAAWA,EAASL,OAAOT,KAAKU,UAAUN,EAAQW,EAAMD,SAASN,KAE/DM,EAASQ,OAAS,IACpBN,EAAKF,SAAWA,GAGlBZ,EAAMqB,KAAKP,GAEZ,OAAOd","file":"../../wire/TreeAdapter.js","sourcesContent":["dojo.provide(\"dojox.wire.TreeAdapter\");\r\n\r\ndojo.require(\"dojox.wire.CompositeWire\");\r\n\r\ndojo.declare(\"dojox.wire.TreeAdapter\", dojox.wire.CompositeWire, {\r\n\t// summary:\r\n\t//\t\tA composite Wire for tree nodes\r\n\t// description:\r\n\t//\t\tThis class has multiple child Wires for tree nodes, their title and\r\n\t//\t\tchild nodes.\r\n\t//\t\tThe root object for this class must be an array.\r\n\t//\t\t'node' Wires in 'nodes' property is used to identify an object\r\n\t//\t\trepresenting a node.\r\n\t//\t\t'title' Wires in 'nodes' property is used to get the title string\r\n\t//\t\tof a node.\r\n\t//\t\t'children' Wires in 'nodes' property is used to iterate over child\r\n\t//\t\tnode objects.\r\n\t//\t\tThe node values are returned in an array as follows:\r\n\t// |\t\t[\r\n\t// |\t\t\t{title: title1,\r\n\t// |\t  \t \tchildren: [\r\n\t// |\t\t\t\t{title: title2,\r\n\t// |\t\t\t\t child: ...},\r\n\t// |\t\t\t\t{title: title3,\r\n\t// |\t\t\t\t child: ...},\r\n\t// |\t\t\t\t...\r\n\t// |\t\t\t]},\r\n\t// |\t\t\t...\r\n\t// |\t\t]\r\n\t//\t\tThis class only supports getValue(), but not setValue().\r\n\t\r\n\t_wireClass: \"dojox.wire.TreeAdapter\",\r\n\t\r\n\tconstructor: function(/*Object*/ args){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize properties\r\n\t\t// description:\r\n\t\t//\t\tIf object properties ('node', 'title' and 'children') of array\r\n\t\t//\t\telements specified in 'nodes' property are not Wires, Wires are\r\n\t\t//\t\tcreated from them as arguments, with 'parent' property set to\r\n\t\t//\t\tthis Wire instance.\r\n\t\t// args:\r\n\t\t//\t\tArguments to initialize properties:\r\n\t\t//\r\n\t\t//\t\t- nodes: An array containing objects for child Wires for node values\r\n\t\tthis._initializeChildren(this.nodes);\r\n\t},\r\n\t_getValue: function(/*Array*/object){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an array of tree node values\r\n\t\t// description:\r\n\t\t//\t\tThis method iterates over an array specified to 'object'\r\n\t\t//\t\targument and calls getValue() method of 'node' Wires with each\r\n\t\t//\t\telement of the array to get object(s) that represents nodes.\r\n\t\t//\t\t(If 'node' Wires are omitted, the array element is used for\r\n\t\t//\t\tfurther processing.)\r\n\t\t//\t\tThen, getValue() method of 'title' Wires are called to get\r\n\t\t//\t\ttitle strings for nodes.\r\n\t\t//\t\t(If 'title' Wires are omitted, the objects representing nodes\r\n\t\t//\t\tare used as title strings.)\r\n\t\t//\t\tAnd if an array of objects with 'node' and 'title' Wires is\r\n\t\t//\t\tspecified to 'children', it is used to gather child nodes and\r\n\t\t//\t\ttheir title strings in the same way recursively.\r\n\t\t//\t\tFinally, an array of the top-level node objects are retuned.\r\n\t\t// object:\r\n\t\t//\t\tA root array\r\n\t\t// returns:\r\n\t\t//\t\tAn array of tree node values\r\n\t\tif(!object || !this.nodes){\r\n\t\t\treturn object; //Array\r\n\t\t}\r\n\r\n\t\tvar array = object;\r\n\t\tif(!dojo.isArray(array)){\r\n\t\t\tarray = [array];\r\n\t\t}\r\n\r\n\t\tvar nodes = [];\r\n\t\tfor(var i in array){\r\n\t\t\tfor(var i2 in this.nodes){\r\n\t\t\t\tnodes = nodes.concat(this._getNodes(array[i], this.nodes[i2]));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nodes; //Array\r\n\t},\r\n\r\n\t_setValue: function(/*Array*/object, /*Array*/value){\r\n\t\t// summary:\r\n\t\t//\t\tNot supported\r\n\t\tthrow new Error(\"Unsupported API: \" + this._wireClass + \"._setValue\");\r\n\t},\r\n\r\n\t_initializeChildren: function(/*Array*/children){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize child Wires\r\n\t\t// description:\r\n\t\t//\t\tIf 'node' or 'title' properties of array elements specified in\r\n\t\t//\t\t'children' argument are not Wires, Wires are created from them\r\n\t\t//\t\tas arguments, with 'parent' property set to this Wire instance.\r\n\t\t//\t\tIf an array element has 'children' property, this method is\r\n\t\t//\t\tcalled recursively with it.\r\n\t\t// children:\r\n\t\t//\t\tAn array of objects containing child Wires\r\n\t\tif(!children){\r\n\t\t\treturn; //undefined\r\n\t\t}\r\n\r\n\t\tfor(var i in children){\r\n\t\t\tvar child = children[i];\r\n\t\t\tif(child.node){\r\n\t\t\t\tchild.node.parent = this;\r\n\t\t\t\tif(!dojox.wire.isWire(child.node)){\r\n\t\t\t\t\tchild.node = dojox.wire.create(child.node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(child.title){\r\n\t\t\t\tchild.title.parent = this;\r\n\t\t\t\tif(!dojox.wire.isWire(child.title)){\r\n\t\t\t\t\tchild.title = dojox.wire.create(child.title);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(child.children){\r\n\t\t\t\tthis._initializeChildren(child.children);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_getNodes: function(/*Object*/object, /*Object*/child){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an array of tree node values\r\n\t\t// description:\r\n\t\t//\t\tThis method calls getValue() method of 'node' Wires with\r\n\t\t//\t\t'object' argument to get object(s) that represents nodes.\r\n\t\t//\t\t(If 'node' Wires are omitted, 'object' is used for further\r\n\t\t//\t\tprocessing.)\r\n\t\t//\t\tThen, getValue() method of 'title' Wires are called to get\r\n\t\t//\t\ttitle strings for nodes.\r\n\t\t//\t\t(If 'title' Wires are omitted, the objects representing nodes\r\n\t\t//\t\tare used as title strings.)\r\n\t\t//\t\tAnd if an array of objects with 'node' and 'title' Wires is\r\n\t\t//\t\tspecified to 'children', it is used to gather child nodes and\r\n\t\t//\t\ttheir title strings in the same way recursively.\r\n\t\t//\t\tFinally, an array of node objects are returned.\r\n\t\t// object:\r\n\t\t//\t\tAn object\r\n\t\t// child:\r\n\t\t//\t\tAn object with child Wires\r\n\t\t// returns:\r\n\t\tvar array = null;\r\n\t\tif(child.node){\r\n\t\t\tarray = child.node.getValue(object);\r\n\t\t\tif(!array){\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\tif(!dojo.isArray(array)){\r\n\t\t\t\tarray = [array];\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tarray = [object];\r\n\t\t}\r\n\r\n\t\tvar nodes = [];\r\n\t\tfor(var i in array){\r\n\t\t\tobject = array[i];\r\n\t\t\tvar node = {};\r\n\t\t\tif(child.title){\r\n\t\t\t\tnode.title = child.title.getValue(object);\r\n\t\t\t}else{\r\n\t\t\t\tnode.title = object;\r\n\t\t\t}\r\n\t\t\tif(child.children){\r\n\t\t\t\tvar children = [];\r\n\t\t\t\tfor(var i2 in child.children){\r\n\t\t\t\t\tchildren = children.concat(this._getNodes(object, child.children[i2]));\r\n\t\t\t\t}\r\n\t\t\t\tif(children.length > 0){\r\n\t\t\t\t\tnode.children = children;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnodes.push(node);\r\n\t\t}\r\n\t\treturn nodes; //Array\r\n\t}\r\n});\r\n"]}