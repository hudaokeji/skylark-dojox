{"version":3,"sources":["wire/ml/RestHandler.js"],"names":["dojo","provide","require","declare","contentType","handleAs","bind","method","parameters","deferred","url","toUpperCase","self","this","args","_getUrl","headers","preventCache","d","postData","_getContent","rawXhrPost","putData","rawXhrPut","xhrDelete","xhrGet","addCallbacks","result","callback","_getResult","error","errback","query","length","queryString","name","value","encodeURIComponent","variable","index","indexOf","substring","data"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,6BAEbD,KAAKE,QAAQ,oBACbF,KAAKE,QAAQ,sBAEbF,KAAKG,QAAQ,4BAA6B,MAOzCC,YAAa,aACbC,SAAU,OAEVC,KAAM,SAASC,EAAQC,EAAYC,EAAUC,GAiB5CH,EAASA,EAAOI,cAChB,IAAIC,EAAOC,KACPC,GACHJ,IAAKG,KAAKE,QAAQR,EAAQC,EAAYE,GACtCN,YAAaS,KAAKT,YAClBC,SAAUQ,KAAKR,SACfW,QAASH,KAAKG,QACdC,aAAcJ,KAAKI,cAEhBC,EAAI,KACK,QAAVX,GACFO,EAAKK,SAAWN,KAAKO,YAAYb,EAAQC,GACzCU,EAAIlB,KAAKqB,WAAWP,IACF,OAAVP,GACRO,EAAKQ,QAAUT,KAAKO,YAAYb,EAAQC,GACxCU,EAAIlB,KAAKuB,UAAUT,IAEnBI,EADkB,UAAVX,EACJP,KAAKwB,UAAUV,GAEfd,KAAKyB,OAAOX,GAEjBI,EAAEQ,aAAa,SAASC,GACvBlB,EAASmB,SAAShB,EAAKiB,WAAWF,KAChC,SAASG,GACXrB,EAASsB,QAAQD,MAInBf,QAAS,SAAmBR,EAAiBC,EAAsBE,GAiBlE,IAAIsB,EAUJ,GATa,OAAVzB,GAA6B,UAAVA,EAClBC,EAAWyB,OAAS,IACtBD,EAAQxB,EAAW,IAGjBA,EAAWyB,OAAS,IACtBD,EAAQxB,EAAW,IAGlBwB,EAAM,CACR,IAAIE,EAAc,GAClB,IAAI,IAAIC,KAAQH,EAAM,CACrB,IAAII,EAAQJ,EAAMG,GAClB,GAAGC,EAAM,CACRA,EAAQC,mBAAmBD,GAC3B,IAAIE,EAAW,IAAMH,EAAO,IACxBI,EAAQ7B,EAAI8B,QAAQF,GACrBC,GAAS,EACX7B,EAAMA,EAAI+B,UAAU,EAAGF,GAASH,EAAQ1B,EAAI+B,UAAUF,EAAQD,EAASL,SAEpEC,IACFA,GAAe,KAEhBA,GAAgBC,EAAO,IAAMC,IAI7BF,IACFxB,GAAO,IAAMwB,GAGf,OAAOxB,GAGRU,YAAa,SAAmBb,EAAiBC,GAYhD,OAAa,QAAVD,GAA8B,OAAVA,IACdC,EAAaA,EAAW,GAEzB,MAITqB,WAAY,SAAqBa,GAShC,OAAOA","file":"../../../wire/ml/RestHandler.js","sourcesContent":["dojo.provide(\"dojox.wire.ml.RestHandler\");\r\n\r\ndojo.require(\"dojox.wire._base\");\r\ndojo.require(\"dojox.wire.ml.util\");\r\n\r\ndojo.declare(\"dojox.wire.ml.RestHandler\", null, {\r\n\t// summary:\r\n\t//\t\tA REST service handler\r\n\t// description:\r\n\t//\t\tThis class serves as a base REST service.\r\n\t//\t\tSub-classes may override _getContent() and _getResult() to handle\r\n\t//\t\tspecific content types.\r\n\tcontentType: \"text/plain\",\r\n\thandleAs: \"text\",\r\n\r\n\tbind: function(method, parameters, deferred, url){\r\n\t\t// summary:\r\n\t\t//\t\tCall a service method with parameters.\r\n\t\t// description:\r\n\t\t//\t\tA service is called with a URL generated by _getUrl() and\r\n\t\t//\t\tan HTTP method specified with 'method'.\r\n\t\t//\t\tFor \"POST\" and \"PUT\", a content is generated by _getContent().\r\n\t\t//\t\tWhen data is loaded, _getResult() is used to pass the result to\r\n\t\t//\t\tDeferred.callback().\r\n\t\t// method:\r\n\t\t//\t\tA method name\r\n\t\t// parameters:\r\n\t\t//\t\tAn array of parameters\r\n\t\t// deferred:\r\n\t\t//\t\t'Deferred'\r\n\t\t// url:\r\n\t\t//\t\tA URL for the method\r\n\t\tmethod = method.toUpperCase();\r\n\t\tvar self = this;\r\n\t\tvar args = {\r\n\t\t\turl: this._getUrl(method, parameters, url),\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\thandleAs: this.handleAs,\r\n\t\t\theaders: this.headers,\r\n\t\t\tpreventCache: this.preventCache\r\n\t\t};\r\n\t\tvar d = null;\r\n\t\tif(method == \"POST\"){\r\n\t\t\targs.postData = this._getContent(method, parameters);\r\n\t\t\td = dojo.rawXhrPost(args);\r\n\t\t}else if(method == \"PUT\"){\r\n\t\t\targs.putData = this._getContent(method, parameters);\r\n\t\t\td = dojo.rawXhrPut(args);\r\n\t\t}else if(method == \"DELETE\"){\r\n\t\t\td = dojo.xhrDelete(args);\r\n\t\t}else{ // \"GET\"\r\n\t\t\td = dojo.xhrGet(args);\r\n\t\t}\r\n\t\td.addCallbacks(function(result){\r\n\t\t\tdeferred.callback(self._getResult(result));\r\n\t\t}, function(error){\r\n\t\t\tdeferred.errback(error);\r\n\t\t});\r\n\t},\r\n\r\n\t_getUrl: function(/*String*/method, /*Array*/parameters, /*String*/url){\r\n\t\t// summary:\r\n\t\t//\t\tGenerate a URL\r\n\t\t// description:\r\n\t\t//\t\tIf 'method' is \"GET\" or \"DELETE\", a query string is generated\r\n\t\t//\t\tfrom a query object specified to the first parameter in\r\n\t\t//\t\t'parameters' and appended to 'url'.\r\n\t\t//\t\tIf 'url' contains variable seguments (\"{parameter_name}\"),\r\n\t\t//\t\tthey are replaced with corresponding parameter values, instead.\r\n\t\t// method:\r\n\t\t//\t\tA method name\r\n\t\t// parameters:\r\n\t\t//\t\tAn array of parameters\r\n\t\t// url:\r\n\t\t//\t\tA base URL\r\n\t\t// returns:\r\n\t\t//\t\tA URL\r\n\t\tvar query;\r\n\t\tif(method == \"GET\" || method == \"DELETE\"){\r\n\t\t\tif(parameters.length > 0){\r\n\t\t\t\tquery = parameters[0];\r\n\t\t\t}\r\n\t\t}else{ // \"POST\" || \"PUT\"\r\n\t\t\tif(parameters.length > 1){\r\n\t\t\t\tquery = parameters[1];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(query){\r\n\t\t\tvar queryString = \"\";\r\n\t\t\tfor(var name in query){\r\n\t\t\t\tvar value = query[name];\r\n\t\t\t\tif(value){\r\n\t\t\t\t\tvalue = encodeURIComponent(value);\r\n\t\t\t\t\tvar variable = \"{\" + name + \"}\";\r\n\t\t\t\t\tvar index = url.indexOf(variable);\r\n\t\t\t\t\tif(index >= 0){ // encode in path\r\n\t\t\t\t\t\turl = url.substring(0, index) + value + url.substring(index + variable.length);\r\n\t\t\t\t\t}else{ // encode as query string\r\n\t\t\t\t\t\tif(queryString){\r\n\t\t\t\t\t\t\tqueryString += \"&\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tqueryString += (name + \"=\" + value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(queryString){\r\n\t\t\t\turl += \"?\" + queryString;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn url; //String\r\n\t},\r\n\r\n\t_getContent: function(/*String*/method, /*Array*/parameters){\r\n\t\t// summary:\r\n\t\t//\t\tGenerate a request content\r\n\t\t// description:\r\n\t\t//\t\tIf 'method' is \"POST\" or \"PUT\", the first parameter in\r\n\t\t//\t\t'parameters' is returned.\r\n\t\t// method:\r\n\t\t//\t\tA method name\r\n\t\t// parameters:\r\n\t\t//\t\tAn array of parameters\r\n\t\t// returns:\r\n\t\t//\t\tA request content\r\n\t\tif(method == \"POST\" || method == \"PUT\"){\r\n\t\t\treturn (parameters ? parameters[0] : null); //anything\r\n\t\t}else{\r\n\t\t\treturn null; //null\r\n\t\t}\r\n\t},\r\n\r\n\t_getResult: function(/*anything*/data){\r\n\t\t// summary:\r\n\t\t//\t\tExtract a result\r\n\t\t// description:\r\n\t\t//\t\tA response data is returned as is.\r\n\t\t// data:\r\n\t\t//\t\tA response data returned by a service\r\n\t\t// returns:\r\n\t\t//\t\tA result object\r\n\t\treturn data; //anything\r\n\t}\r\n});\r\n"]}