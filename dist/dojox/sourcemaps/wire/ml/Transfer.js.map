{"version":3,"sources":["wire/ml/Transfer.js"],"names":["dojo","provide","require","declare","dojox","wire","ml","Action","source","sourceStore","sourceAttribute","sourcePath","type","converter","target","targetStore","targetAttribute","targetPath","delimiter","_run","sourceWire","this","_getWire","targetWire","transfer","arguments","which","args","undefined","object","dataStore","attribute","path","length","substring","property","i","indexOf","_getValue","childArgs","children","getChildren","child","ChildWire","_addWire","create","dijit","_Widget","name","parent","push","column","columns","_Container","titleProperty","titleAttribute","titlePath","nodes","_getWires","node","title","NodeWire","segments"],"mappings":"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","file":"../../../wire/ml/Transfer.js","sourcesContent":["dojo.provide(\"dojox.wire.ml.Transfer\");\r\n\r\ndojo.require(\"dijit._Widget\");\r\ndojo.require(\"dijit._Container\");\r\ndojo.require(\"dojox.wire._base\");\r\ndojo.require(\"dojox.wire.ml.Action\");\r\n\r\ndojo.declare(\"dojox.wire.ml.Transfer\", dojox.wire.ml.Action, {\r\n\t// summary:\r\n\t//\t\tA widget to transfer values through source and target Wires\r\n\t// description:\r\n\t//\t\tThis widget represents a controller task to transfer a value from\r\n\t//\t\ta source to a target, through a source and a target Wires, when\r\n\t//\t\tan event (a function) or a topic is issued.\r\n\t//\t\tIf this widget has child ChildWire widgets, their _addWire()\r\n\t//\t\tmethods are called to add Wire arguments to a source or a target\r\n\t//\t\tWire.\r\n\r\n\t// source:\r\n\t//\t\tA source object and/or property\r\n\tsource: \"\",\r\n\r\n\t// sourceStore:\r\n\t//\t\tA data store for a source data item\r\n\tsourceStore: \"\",\r\n\r\n\t// sourceAttribute:\r\n\t//\t\tAn attribute of a source data item\r\n\tsourceAttribute: \"\",\r\n\r\n\t// sourcePath:\r\n\t//\t\tA simplified XPath to a source property of an XML element\r\n\tsourcePath: \"\",\r\n\r\n\t// type:\r\n\t//\t\tA type of the value to be transferred\r\n\ttype: \"\",\r\n\r\n\t// converter:\r\n\t//\t\tA class name of a converter for the value to be transferred\r\n\tconverter: \"\",\r\n\r\n\t// target:\r\n\t//\t\tA target object and/or property\r\n\ttarget: \"\",\r\n\r\n\t// targetStore:\r\n\t//\t\tA data store for a target data item\r\n\ttargetStore: \"\",\r\n\r\n\t// targetAttribute:\r\n\t//\t\tAn attribute of a target data item\r\n\ttargetAttribute: \"\",\r\n\r\n\t// targetPath:\r\n\t//\t\tA simplified XPath to a target property of an XML element\r\n\ttargetPath: \"\",\r\n\r\n\tdelimiter: \"\",\r\n\r\n\t_run: function(){\r\n\t\t// summary:\r\n\t\t//\t\tTransfer a value from a source to a target\r\n\t\t// description:\r\n\t\t//\t\tFirst, Wires for a source and a target are created from attributes.\r\n\t\t//\t\tThen, a value is obtained by getValue() of the source Wire is set\r\n\t\t//\t\tby setValue() of the target Wire.\r\n\t\t//\t\tThe arguments to this method is passed to getValue() and setValue()\r\n\t\t//\t\tof Wires, so that they can be used to identify the root objects off\r\n\t\t//\t\tthe arguments.\r\n\t\tvar sourceWire = this._getWire(\"source\");\r\n\t\tvar targetWire = this._getWire(\"target\");\r\n\t\tdojox.wire.transfer(sourceWire, targetWire, arguments);\r\n\t},\r\n\r\n\t_getWire: function(/*String*/which){\r\n\t\t// summary:\r\n\t\t//\t\tBuild Wire arguments from attributes\r\n\t\t// description:\r\n\t\t//\t\tArguments object for a source or a target Wire, specified by\r\n\t\t//\t\t'which' argument, are build from corresponding attributes,\r\n\t\t//\t\tincluding '*Store' (for 'dataStore'), '*Attribute'\r\n\t\t//\t\t(for 'attribute), '*Path' (for 'path'), 'type' and 'converter'.\r\n\t\t//\t\t'source' or 'target' attribute is parsed as:\r\n\t\t// |\t\t\"object_id.property_name[.sub_property_name...]\"\r\n\t\t//\t\tIf 'source' or 'target' starts with \"arguments\", 'object'\r\n\t\t//\t\targument for a Wire is set to null, so that the root object is\r\n\t\t//\t\tgiven as an event or topic arguments.\r\n\t\t//\t\tIf this widget has child ChildWire widgets with a corresponding\r\n\t\t//\t\t'which' attribute, their _addWire() methods are called to add\r\n\t\t//\t\tadditional Wire arguments and nested Wire is created,\r\n\t\t//\t\tspecifying the Wire defined by this widget to 'object' argument.\r\n\t\t// which:\r\n\t\t//\t\tWhich Wire arguments to build, \"source\" or \"target\"\r\n\t\t// returns:\r\n\t\t//\t\tWire arguments object\r\n\t\tvar args = undefined;\r\n\t\tif(which == \"source\"){\r\n\t\t\targs = {\r\n\t\t\t\tobject: this.source,\r\n\t\t\t\tdataStore: this.sourceStore,\r\n\t\t\t\tattribute: this.sourceAttribute,\r\n\t\t\t\tpath: this.sourcePath,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tconverter: this.converter\r\n\t\t\t};\r\n\t\t}else{ // \"target\"\r\n\t\t\targs = {\r\n\t\t\t\tobject: this.target,\r\n\t\t\t\tdataStore: this.targetStore,\r\n\t\t\t\tattribute: this.targetAttribute,\r\n\t\t\t\tpath: this.targetPath\r\n\t\t\t};\r\n\t\t}\r\n\t\tif(args.object){\r\n\t\t\tif(args.object.length >= 9 && args.object.substring(0, 9) == \"arguments\"){\r\n\t\t\t\targs.property = args.object.substring(9);\r\n\t\t\t\targs.object = null;\r\n\t\t\t}else{\r\n\t\t\t\tvar i = args.object.indexOf('.');\r\n\t\t\t\tif(i < 0){\r\n\t\t\t\t\targs.object = dojox.wire.ml._getValue(args.object);\r\n\t\t\t\t}else{\r\n\t\t\t\t\targs.property = args.object.substring(i + 1);\r\n\t\t\t\t\targs.object = dojox.wire.ml._getValue(args.object.substring(0, i));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(args.dataStore){\r\n\t\t\targs.dataStore = dojox.wire.ml._getValue(args.dataStore);\r\n\t\t}\r\n\t\tvar childArgs = undefined;\r\n\t\tvar children = this.getChildren();\r\n\t\tfor(var i in children){\r\n\t\t\tvar child = children[i];\r\n\t\t\tif(child instanceof dojox.wire.ml.ChildWire && child.which == which){\r\n\t\t\t\tif(!childArgs){\r\n\t\t\t\t\tchildArgs = {};\r\n\t\t\t\t}\r\n\t\t\t\tchild._addWire(this, childArgs);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(childArgs){ // make nested Wires\r\n\t\t\tchildArgs.object = dojox.wire.create(args);\r\n\t\t\tchildArgs.dataStore = args.dataStore;\r\n\t\t\targs = childArgs;\r\n\t\t}\r\n\t\treturn args; //Object\r\n\t}\r\n});\r\n\r\ndojo.declare(\"dojox.wire.ml.ChildWire\", dijit._Widget, {\r\n\t// summary:\r\n\t//\t\tA widget to add a child wire\r\n\t// description:\r\n\t//\t\tAttributes of this widget are used to add a child Wire to\r\n\t//\t\ta composite Wire of the parent Transfer widget.\r\n\t// which:\r\n\t//\t\tWhich Wire to add a child Wire, \"source\" or \"target\", default to\r\n\t//\t\t\"source\"\r\n\t// object:\r\n\t//\t\tA root object for the value\r\n\t// property:\r\n\t//\t\tA property for the value\r\n\t// type:\r\n\t//\t\tA type of the value\r\n\t// converter:\r\n\t//\t\tA class name of a converter for the value\r\n\t// attribute:\r\n\t//\t\tA data item attribute for the value\r\n\t// path:\r\n\t//\t\tA simplified XPath for the value\r\n\t// name:\r\n\t//\t\tA composite property name\r\n\twhich: \"source\",\r\n\tobject: \"\",\r\n\tproperty: \"\",\r\n\ttype: \"\",\r\n\tconverter: \"\",\r\n\tattribute: \"\",\r\n\tpath: \"\",\r\n\tname: \"\",\r\n\r\n\t_addWire: function(/*Transfer*/parent, /*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tAdd a child Wire to Wire arguments\r\n\t\t// description:\r\n\t\t//\t\tIf 'name' attribute is specified, a child Wire is added as\r\n\t\t//\t\tthe named property of 'children' object of 'args'.\r\n\t\t//\t\tOtherwise, a child Wire is added to 'children' array of 'args'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// args:\r\n\t\t//\t\tWire arguments\r\n\t\tif(this.name){ // object\r\n\t\t\tif(!args.children){\r\n\t\t\t\targs.children = {};\r\n\t\t\t}\r\n\t\t\targs.children[this.name] = this._getWire(parent);\r\n\t\t}else{ // array\r\n\t\t\tif(!args.children){\r\n\t\t\t\targs.children = [];\r\n\t\t\t}\r\n\t\t\targs.children.push(this._getWire(parent));\r\n\t\t}\r\n\t},\r\n\r\n\t_getWire: function(/*Transfer*/parent){\r\n\t\t// summary:\r\n\t\t//\t\tBuild child Wire arguments from attributes\r\n\t\t// description:\r\n\t\t//\t\tArguments object for a child Wire are build from attributes,\r\n\t\t//\t\tincluding 'object', 'property', 'type', 'converter',\r\n\t\t//\t\t'attribute' and 'path'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// returns:\r\n\t\t//\t\tWire arguments object\r\n\t\treturn {\r\n\t\t\tobject: (this.object ? dojox.wire.ml._getValue(this.object) : undefined),\r\n\t\t\tproperty: this.property,\r\n\t\t\ttype: this.type,\r\n\t\t\tconverter: this.converter,\r\n\t\t\tattribute: this.attribute,\r\n\t\t\tpath: this.path\r\n\t\t}; //Object\r\n\t}\r\n});\r\n\r\ndojo.declare(\"dojox.wire.ml.ColumnWire\", dojox.wire.ml.ChildWire, {\r\n\t// summary:\r\n\t//\t\tA widget to add a column wire\r\n\t// description:\r\n\t//\t\tAttributes of this widget are used to add a column Wire to\r\n\t//\t\ta TableAdapter of the parent Transfer widget.\r\n\t// column:\r\n\t//\t\tA column name\r\n\tcolumn: \"\",\r\n\r\n\t_addWire: function(/*Transfer*/parent, /*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tAdd a column Wire to Wire arguments\r\n\t\t// description:\r\n\t\t//\t\tIf 'column' attribute is specified, a column Wire is added as\r\n\t\t//\t\tthe named property of 'columns' object of 'args'.\r\n\t\t//\t\tOtherwise, a column Wire is added to 'columns' array of 'args'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// args:\r\n\t\t//\t\tWire arguments\r\n\t\tif(this.column){ // object\r\n\t\t\tif(!args.columns){\r\n\t\t\t\targs.columns = {};\r\n\t\t\t}\r\n\t\t\targs.columns[this.column] = this._getWire(parent);\r\n\t\t}else{ // array\r\n\t\t\tif(!args.columns){\r\n\t\t\t\targs.columns = [];\r\n\t\t\t}\r\n\t\t\targs.columns.push(this._getWire(parent));\r\n\t\t}\r\n\t}\r\n});\r\n\r\ndojo.declare(\"dojox.wire.ml.NodeWire\", [dojox.wire.ml.ChildWire, dijit._Container], {\r\n\t// summary:\r\n\t//\t\tA widget to add node wires\r\n\t// description:\r\n\t//\t\tAttributes of this widget are used to add node Wires to\r\n\t//\t\ta TreeAdapter of the parent Transfer widget.\r\n\t// titleProperty:\r\n\t//\t\tA property for the node title\r\n\t// titleAttribute:\r\n\t//\t\tA data item attribute for the node title\r\n\t// titlePath:\r\n\t//\t\tA simplified XPath for the node title\r\n\ttitleProperty: \"\",\r\n\ttitleAttribute: \"\",\r\n\ttitlePath: \"\",\r\n\r\n\t_addWire: function(/*Transfer*/parent, /*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tAdd node Wires to Wire arguments\r\n\t\t// description:\r\n\t\t//\t\tNode Wires are added to 'nodes' array of 'args'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// args:\r\n\t\t//\t\tWire arguments\r\n\t\tif(!args.nodes){\r\n\t\t\targs.nodes = [];\r\n\t\t}\r\n\t\targs.nodes.push(this._getWires(parent));\r\n\t},\r\n\r\n\t_getWires: function(/*Transfer*/parent){\r\n\t\t// summary:\r\n\t\t//\t\tBuild node Wires arguments from attributes\r\n\t\t// description:\r\n\t\t//\t\tArguments object for 'node' Wire are build from attributes,\r\n\t\t//\t\tincluding 'object', 'property', 'type', 'converter',\r\n\t\t//\t\t'attribute' and 'path'.\r\n\t\t//\t\tArguments object for 'title' Wire are build from another set of\r\n\t\t//\t\tattributes, 'titleProperty', 'titleAttribute' and 'titlePath'.\r\n\t\t//\t\tIf this widget has child NodeWire widgets, their _getWires()\r\n\t\t//\t\tmethods are called recursively to build 'children' array of\r\n\t\t//\t\t'args'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// returns:\r\n\t\t//\t\tWire arguments object\r\n\t\tvar args = {\r\n\t\t\tnode: this._getWire(parent),\r\n\t\t\ttitle: {\r\n\t\t\t\ttype: \"string\",\r\n\t\t\t\tproperty: this.titleProperty,\r\n\t\t\t\tattribute: this.titleAttribute,\r\n\t\t\t\tpath: this.titlePath\r\n\t\t\t}\r\n\t\t};\r\n\t\tvar childArgs = [];\r\n\t\tvar children = this.getChildren();\r\n\t\tfor(var i in children){\r\n\t\t\tvar child = children[i];\r\n\t\t\tif(child instanceof dojox.wire.ml.NodeWire){\r\n\t\t\t\tchildArgs.push(child._getWires(parent));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(childArgs.length > 0){\r\n\t\t\targs.children = childArgs;\r\n\t\t}\r\n\t\treturn args; //Object\r\n\t}\r\n});\r\n\r\ndojo.declare(\"dojox.wire.ml.SegmentWire\", dojox.wire.ml.ChildWire, {\r\n\t// summary:\r\n\t//\t\tA widget to add a segment wire\r\n\t// description:\r\n\t//\t\tAttributes of this widget are used to add a segment Wire to\r\n\t//\t\ta TextAdapter of the parent Transfer widget.\r\n\r\n\t_addWire: function(/*Transfer*/parent, /*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tAdd a segment Wire to Wire arguments\r\n\t\t// description:\r\n\t\t//\t\tA segment Wire is added to 'segments' array of 'args'.\r\n\t\t//\t\tIf 'parent' has 'delimiter' attribute, it is used for\r\n\t\t//\t\t'delimiter' property of 'args'.\r\n\t\t// parent:\r\n\t\t//\t\tA parent Transfer widget\r\n\t\t// args:\r\n\t\t//\t\tWire arguments\r\n\t\tif(!args.segments){\r\n\t\t\targs.segments = [];\r\n\t\t}\r\n\t\targs.segments.push(this._getWire(parent));\r\n\t\tif(parent.delimiter && !args.delimiter){\r\n\t\t\targs.delimiter = parent.delimiter;\r\n\t\t}\r\n\t}\r\n});\r\n"]}