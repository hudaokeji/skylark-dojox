{"version":3,"sources":["wire/ml/Service.js"],"names":["dojo","provide","require","declare","dijit","_Widget","url","serviceUrl","serviceType","handlerClass","preventCache","postCreate","this","handler","_createHandler","_handlerClasses","TEXT","XML","JSON","JSON-RPC","self","xhrGet","handleAs","sync","addCallback","result","smd","serviceURL","undefined","dojox","wire","_getClass","isString","callMethod","method","parameters","deferred","Deferred","bind"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,yBAEbD,KAAKE,QAAQ,iBACbF,KAAKE,QAAQ,oBACbF,KAAKE,QAAQ,oBACbF,KAAKE,QAAQ,sBAEbF,KAAKG,QAAQ,wBAAyBC,MAAMC,SAW3CC,IAAK,GAILC,WAAY,GAIZC,YAAa,GAIbC,aAAc,GAEdC,cAAc,EAEdC,WAAY,WAKXC,KAAKC,QAAUD,KAAKE,kBAGrBC,iBACCC,KAAQ,4BACRC,IAAO,2BACPC,KAAQ,4BACRC,WAAY,wBAGbL,eAAgB,WAWf,GAAGF,KAAKN,IAAI,CACX,IAAIc,EAAOR,KACHZ,KAAKqB,QACZf,IAAKM,KAAKN,IACVgB,SAAU,OACVC,MAAM,IAELC,YAAY,SAASC,GACtBL,EAAKM,IAAMD,IAETb,KAAKc,MAAQd,KAAKL,aACpBK,KAAKL,WAAcK,KAAKc,IAAInB,YAAcK,KAAKc,IAAIC,YAGrD,IAAIlB,OAAemB,EAgBnB,OAfGhB,KAAKH,aACPA,EAAeoB,MAAMC,KAAKC,UAAUnB,KAAKH,cACjCG,KAAKJ,aACbC,EAAeG,KAAKG,gBAAgBH,KAAKJ,eACtBR,KAAKgC,SAASvB,KAChCA,EAAeoB,MAAMC,KAAKC,UAAUtB,GACpCG,KAAKG,gBAAgBH,KAAKJ,aAAeC,GAElCG,KAAKc,KAAOd,KAAKc,IAAIlB,cAC7BC,EAAeG,KAAKG,gBAAgBH,KAAKc,IAAIlB,eAC1BR,KAAKgC,SAASvB,KAChCA,EAAeoB,MAAMC,KAAKC,UAAUtB,GACpCG,KAAKG,gBAAgBH,KAAKc,IAAIlB,aAAeC,GAG3CA,EAGG,IAAIA,EAFH,MAKTwB,WAAY,SAASC,EAAQC,GAO5B,IAAIC,EAAW,IAAIpC,KAAKqC,SAExB,OADAzB,KAAKC,QAAQyB,KAAKJ,EAAQC,EAAYC,EAAUxB,KAAKL,YAC9C6B","file":"../../../wire/ml/Service.js","sourcesContent":["dojo.provide(\"dojox.wire.ml.Service\");\r\n\r\ndojo.require(\"dijit._Widget\");\r\ndojo.require(\"dojox.xml.parser\");\r\ndojo.require(\"dojox.wire._base\");\r\ndojo.require(\"dojox.wire.ml.util\");\r\n\r\ndojo.declare(\"dojox.wire.ml.Service\", dijit._Widget, {\r\n\t// summary:\r\n\t//\t\tA widget for a service\r\n\t// description:\r\n\t//\t\tThis widget represents a service defined by a service description\r\n\t//\t\tspecified with 'url' attribute.\r\n\t//\t\tIf 'serviceType' and 'serviceUrl' attributes are specified, 'url'\r\n\t//\t\tattribute can be omitted.\r\n\r\n\t// url:\r\n\t//\t\tA URL to a service description\r\n\turl: \"\",\r\n\r\n\t// serviceUrl:\r\n\t//\t\tA URL to a service\r\n\tserviceUrl: \"\",\r\n\r\n\t// serviceType:\r\n\t//\t\tA service type\r\n\tserviceType: \"\",\r\n\r\n\t// handlerClass:\r\n\t//\t\tA service handler class name\r\n\thandlerClass: \"\",\r\n\r\n\tpreventCache: true,\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCall _createHandler()\r\n\t\t// description:\r\n\t\t//\t\tSee _createHandler().\r\n\t\tthis.handler = this._createHandler();\r\n\t},\r\n\r\n\t_handlerClasses: {\r\n\t\t\"TEXT\": \"dojox.wire.ml.RestHandler\",\r\n\t\t\"XML\": \"dojox.wire.ml.XmlHandler\",\r\n\t\t\"JSON\": \"dojox.wire.ml.JsonHandler\",\r\n\t\t\"JSON-RPC\": \"dojo.rpc.JsonService\"\r\n\t},\r\n\r\n\t_createHandler: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCreate a service handler\r\n\t\t// description:\r\n\t\t//\t\tA service handler class is determined by:\r\n\t\t//\r\n\t\t//\t\t1. 'handlerClass' attribute\r\n\t\t//\t\t2. 'serviceType' attribute\r\n\t\t//\t\t3. 'serviceType' property in a service description\r\n\t\t// returns:\r\n\t\t//\t\tA service handler\r\n\t\tif(this.url){\r\n\t\t\tvar self = this;\r\n\t\t\tvar d = dojo.xhrGet({\r\n\t\t\t\turl: this.url,\r\n\t\t\t\thandleAs: \"json\",\r\n\t\t\t\tsync: true\r\n\t\t\t});\r\n\t\t\td.addCallback(function(result){\r\n\t\t\t\tself.smd = result;\r\n\t\t\t});\r\n\t\t\tif(this.smd && !this.serviceUrl){\r\n\t\t\t\tthis.serviceUrl = (this.smd.serviceUrl || this.smd.serviceURL);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar handlerClass = undefined;\r\n\t\tif(this.handlerClass){\r\n\t\t\thandlerClass = dojox.wire._getClass(this.handlerClass);\r\n\t\t}else if(this.serviceType){\r\n\t\t\thandlerClass = this._handlerClasses[this.serviceType];\r\n\t\t\tif(handlerClass && dojo.isString(handlerClass)){\r\n\t\t\t\thandlerClass = dojox.wire._getClass(handlerClass);\r\n\t\t\t\tthis._handlerClasses[this.serviceType] = handlerClass;\r\n\t\t\t}\r\n\t\t}else if(this.smd && this.smd.serviceType){\r\n\t\t\thandlerClass = this._handlerClasses[this.smd.serviceType];\r\n\t\t\tif(handlerClass && dojo.isString(handlerClass)){\r\n\t\t\t\thandlerClass = dojox.wire._getClass(handlerClass);\r\n\t\t\t\tthis._handlerClasses[this.smd.serviceType] = handlerClass;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!handlerClass){\r\n\t\t\treturn null; //null\r\n\t\t}\r\n\t\treturn new handlerClass(); //Object\r\n\t},\r\n\r\n\tcallMethod: function(method, parameters){\r\n\t\t// summary:\r\n\t\t//\t\tCall a service method with parameters\r\n\t\t// method:\r\n\t\t//\t\tA method name\r\n\t\t// parameters:\r\n\t\t//\t\tAn array parameters\r\n\t\tvar deferred = new dojo.Deferred();\r\n\t\tthis.handler.bind(method, parameters, deferred, this.serviceUrl);\r\n\t\treturn deferred;\r\n\t}\r\n});\r\n"]}