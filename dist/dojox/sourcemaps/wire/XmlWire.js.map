{"version":3,"sources":["wire/XmlWire.js"],"names":["dojo","provide","require","declare","dojox","wire","Wire","_wireClass","constructor","args","_getValue","object","this","path","i","node","charAt","indexOf","substring","list","split","last","length","_getChildNode","_getNodeValue","_setValue","value","doc","_getDocument","name","createElement","child","appendChild","_setNodeValue","exp","undefined","attribute","getAttribute","text","firstChild","nodeValue","childNodes","nodeType","nodeName","push","setAttribute","removeAttribute","removeChild","createTextNode","index","i1","i2","count","ownerDocument","xml","parser","parse"],"mappings":"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","file":"../../wire/XmlWire.js","sourcesContent":["dojo.provide(\"dojox.wire.XmlWire\");\r\n\r\ndojo.require(\"dojox.xml.parser\");\r\ndojo.require(\"dojox.wire.Wire\");\r\n\r\ndojo.declare(\"dojox.wire.XmlWire\", dojox.wire.Wire, {\r\n\t// summary:\r\n\t//\t\tA Wire for XML nodes or values (element, attribute and text)\r\n\t// description:\r\n\t//\t\tThis class accesses XML nodes or value with a simplified XPath\r\n\t//\t\tspecified to 'path' property.\r\n\t//\t\tThe root object for this class must be an DOM document or element\r\n\t//\t\tnode.\r\n\t//\t\t\"@name\" accesses to an attribute value of an element and \"text()\"\r\n\t//\t\taccesses to a text value of an element.\r\n\t//\t\tThe hierarchy of the elements from the root node can be specified\r\n\t//\t\twith slash-separated list, such as \"a/b/@c\", which specifies\r\n\t//\t\tthe value of an attribute named \"c\" of an element named \"b\" as\r\n\t//\t\ta child of another element named \"a\" of a child of the root node.\r\n\t\r\n\t_wireClass: \"dojox.wire.XmlWire\",\r\n\t\r\n\tconstructor: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tInitialize properties\r\n\t\t// description:\r\n\t\t//\t\t'args' is just mixed in with no further processing.\r\n\t\t// args:\r\n\t\t//\t\tArguments to initialize properties:\r\n\t\t//\r\n\t\t//\t\t- path: A simplified XPath to an attribute, a text or elements\r\n\t},\r\n\t_getValue: function(/*Node*/object){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value, a text value or an array of elements\r\n\t\t// description:\r\n\t\t//\t\tThis method first uses a root node passed in 'object' argument\r\n\t\t//\t\tand 'path' property to identify an attribute, a text or\r\n\t\t//\t\telements.\r\n\t\t//\t\tIf 'path' starts with a slash (absolute), the first path\r\n\t\t//\t\tsegment is ignored assuming it point to the root node.\r\n\t\t//\t\t(That is, \"/a/b/@c\" and \"b/@c\" against a root node access\r\n\t\t//\t\tthe same attribute value, assuming the root node is an element\r\n\t\t//\t\twith a tag name, \"a\".)\r\n\t\t// object:\r\n\t\t//\t\tA root node\r\n\t\t// returns:\r\n\t\t//\t\tA value found, otherwise 'undefined'\r\n\t\tif(!object || !this.path){\r\n\t\t\treturn object; //Node\r\n\t\t}\r\n\r\n\t\tvar node = object;\r\n\t\tvar path = this.path;\r\n\t\tvar i;\r\n\t\tif(path.charAt(0) == '/'){ // absolute\r\n\t\t\t// skip the first expression (supposed to select the top node)\r\n\t\t\ti = path.indexOf('/', 1);\r\n\t\t\tpath = path.substring(i + 1);\r\n\t\t}\r\n\t\tvar list = path.split('/');\r\n\t\tvar last = list.length - 1;\r\n\t\tfor(i = 0; i < last; i++){\r\n\t\t\tnode = this._getChildNode(node, list[i]);\r\n\t\t\tif(!node){\r\n\t\t\t\treturn undefined; //undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar value = this._getNodeValue(node, list[last]);\r\n\t\treturn value; //String||Array\r\n\t},\r\n\r\n\t_setValue: function(/*Node*/object, /*String*/value){\r\n\t\t// summary:\r\n\t\t//\t\tSet an attribute value or a child text value to an element\r\n\t\t// description:\r\n\t\t//\t\tThis method first uses a root node passed in 'object' argument\r\n\t\t//\t\tand 'path' property to identify an attribute, a text or\r\n\t\t//\t\telements.\r\n\t\t//\t\tIf an intermediate element does not exist, it creates\r\n\t\t//\t\tan element of the tag name in the 'path' segment as a child\r\n\t\t//\t\tnode of the current node.\r\n\t\t//\t\tFinally, 'value' argument is set to an attribute or a text\r\n\t\t//\t\t(a child node) of the leaf element.\r\n\t\t// object:\r\n\t\t//\t\tA root node\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\tif(!this.path){\r\n\t\t\treturn object; //Node\r\n\t\t}\r\n\r\n\t\tvar node = object;\r\n\t\tvar doc = this._getDocument(node);\r\n\t\tvar path = this.path;\r\n\t\tvar i;\r\n\t\tif(path.charAt(0) == '/'){ // absolute\r\n\t\t\ti = path.indexOf('/', 1);\r\n\t\t\tif(!node){\r\n\t\t\t\tvar name = path.substring(1, i);\r\n\t\t\t\tnode = doc.createElement(name);\r\n\t\t\t\tobject = node; // to be returned as a new object\r\n\t\t\t}\r\n\t\t\t// skip the first expression (supposed to select the top node)\r\n\t\t\tpath = path.substring(i + 1);\r\n\t\t}else{\r\n\t\t\tif(!node){\r\n\t\t\t\treturn undefined; //undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar list = path.split('/');\r\n\t\tvar last = list.length - 1;\r\n\t\tfor(i = 0; i < last; i++){\r\n\t\t\tvar child = this._getChildNode(node, list[i]);\r\n\t\t\tif(!child){\r\n\t\t\t\tchild = doc.createElement(list[i]);\r\n\t\t\t\tnode.appendChild(child);\r\n\t\t\t}\r\n\t\t\tnode = child;\r\n\t\t}\r\n\t\tthis._setNodeValue(node, list[last], value);\r\n\t\treturn object; //Node\r\n\t},\r\n\r\n\t_getNodeValue: function(/*Node*/node, /*String*/exp){\r\n\t\t// summary:\r\n\t\t//\t\tReturn an attribute value, a text value or an array of elements\r\n\t\t// description:\r\n\t\t//\t\tIf 'exp' starts with '@', an attribute value of the specified\r\n\t\t//\t\tattribute is returned.\r\n\t\t//\t\tIf 'exp' is \"text()\", a child text value is returned.\r\n\t\t//\t\tOtherwise, an array of child elements, the tag name of which\r\n\t\t//\t\tmatch 'exp', is returned.\r\n\t\t// node:\r\n\t\t//\t\tA node\r\n\t\t// exp:\r\n\t\t//\t\tAn expression for attribute, text or elements\r\n\t\t// returns:\r\n\t\t//\t\tA value found, otherwise 'undefined'\r\n\t\tvar value = undefined;\r\n\t\tif(exp.charAt(0) == '@'){\r\n\t\t\tvar attribute = exp.substring(1);\r\n\t\t\tvalue = node.getAttribute(attribute);\r\n\t\t}else if(exp == \"text()\"){\r\n\t\t\tvar text = node.firstChild;\r\n\t\t\tif(text){\r\n\t\t\t\tvalue = text.nodeValue;\r\n\t\t\t}\r\n\t\t}else{ // assume elements\r\n\t\t\tvalue = [];\r\n\t\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\t\tvar child = node.childNodes[i];\r\n\t\t\t\tif(child.nodeType === 1 /* ELEMENT_NODE */ && child.nodeName == exp){\r\n\t\t\t\t\tvalue.push(child);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value; //String||Array\r\n\t},\r\n\r\n\t_setNodeValue: function(/*Node*/node, /*String*/exp, /*String*/value){\r\n\t\t// summary:\r\n\t\t//\t\tSet an attribute value or a child text value to an element\r\n\t\t// description:\r\n\t\t//\t\tIf 'exp' starts with '@', 'value' is set to the specified\r\n\t\t//\t\tattribute.\r\n\t\t//\t\tIf 'exp' is \"text()\", 'value' is set to a child text.\r\n\t\t// node:\r\n\t\t//\t\tA node\r\n\t\t// exp:\r\n\t\t//\t\tAn expression for attribute or text\r\n\t\t// value:\r\n\t\t//\t\tA value to set\r\n\t\tif(exp.charAt(0) == '@'){\r\n\t\t\tvar attribute = exp.substring(1);\r\n\t\t\tif(value){\r\n\t\t\t\tnode.setAttribute(attribute, value);\r\n\t\t\t}else{\r\n\t\t\t\tnode.removeAttribute(attribute);\r\n\t\t\t}\r\n\t\t}else if(exp == \"text()\"){\r\n\t\t\twhile(node.firstChild){\r\n\t\t\t\tnode.removeChild(node.firstChild);\r\n\t\t\t}\r\n\t\t\tif(value){\r\n\t\t\t\tvar text = this._getDocument(node).createTextNode(value);\r\n\t\t\t\tnode.appendChild(text);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// else not supported\r\n\t},\r\n\r\n\t_getChildNode: function(/*Node*/node, /*String*/name){\r\n\t\t// summary:\r\n\t\t//\t\tReturn a child node\r\n\t\t// description:\r\n\t\t//\t\tA child element of the tag name specified with 'name' is\r\n\t\t//\t\treturned.\r\n\t\t//\t\tIf 'name' ends with an array index, it is used to pick up\r\n\t\t//\t\tthe corresponding element from multiple child elements.\r\n\t\t// node:\r\n\t\t//\t\tA parent node\r\n\t\t// name:\r\n\t\t//\t\tA tag name\r\n\t\t// returns:\r\n\t\t//\t\tA child node\r\n\t\tvar index = 1;\r\n\t\tvar i1 = name.indexOf('[');\r\n\t\tif(i1 >= 0){\r\n\t\t\tvar i2 = name.indexOf(']');\r\n\t\t\tindex = name.substring(i1 + 1, i2);\r\n\t\t\tname = name.substring(0, i1);\r\n\t\t}\r\n\t\tvar count = 1;\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\t\t\tif(child.nodeType === 1 /* ELEMENT_NODE */ && child.nodeName == name){\r\n\t\t\t\tif(count == index){\r\n\t\t\t\t\treturn child; //Node\r\n\t\t\t\t}\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null; //null\r\n\t},\r\n\r\n\t_getDocument: function(/*Node*/node){\r\n\t\t// summary:\r\n\t\t//\t\tReturn a DOM document\r\n\t\t// description:\r\n\t\t//\t\tIf 'node' is specified, a DOM document of the node is returned.\r\n\t\t//\t\tOtherwise, a DOM document is created.\r\n\t\t// returns:\r\n\t\t//\t\tA DOM document\r\n\t\tif(node){\r\n\t\t\treturn (node.nodeType == 9 /* DOCUMENT_NODE */ ? node : node.ownerDocument); //Document\r\n\t\t}else{\r\n\t\t\treturn dojox.xml.parser.parse(); //Document\r\n\t\t}\r\n\t}\r\n});\r\n"]}