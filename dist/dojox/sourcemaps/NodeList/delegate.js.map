{"version":3,"sources":["NodeList/delegate.js"],"names":["define","lang","query","NodeList","extend","delegate","selector","eventName","fn","this","connect","evt","closest","target","length","call"],"mappings":";;;;;;;AAAAA,QACC,kBACA,aACA,sBACA,0BACE,SAASC,EAAMC,GAKlB,IAAIC,EAAWD,EAAMC,SAsDrB,OApDAF,EAAKG,OAAOD,GACXE,SAAU,SAAoBC,EAAqBC,EAAwBC,GA0C1E,OAAOC,KAAKC,QAAQH,EAAW,SAASI,GACvC,IAAIC,EAAUV,EAAMS,EAAIE,QAAQD,QAAQN,EAAUG,MAC/CG,EAAQE,QACVN,EAAGO,KAAKH,EAAQ,GAAID,QAMjBR","file":"../../NodeList/delegate.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/query\",\r\n\t\"dojo/_base/NodeList\",\t// for this.connect()\r\n\t\"dojo/NodeList-traverse\"\r\n], function(lang, query) {\r\n\r\n// module:\r\n//\t\tdojox/NodeList/delegate\r\n\r\nvar NodeList = query.NodeList;\r\n\r\nlang.extend(NodeList, {\r\n\tdelegate: function(/*String*/ selector, /*String*/ eventName, /*Function*/ fn){\r\n\t\t// summary:\r\n\t\t//\t\tMonitor nodes in this NodeList for [bubbled] events on nodes that match selector.\r\n\t\t//\t\tCalls fn(evt) for those events, where (inside of fn()), this == the node\r\n\t\t//\t\tthat matches the selector.\r\n\t\t// description:\r\n\t\t//\t\tSets up event handlers that can catch events on any subnodes matching a given selector,\r\n\t\t//\t\tincluding nodes created after delegate() has been called.\r\n\t\t//\r\n\t\t//\t\tThis allows an app to setup a single event handler on a high level node, rather than many\r\n\t\t//\t\tevent handlers on subnodes. For example, one onclick handler for a Tree widget, rather than separate\r\n\t\t//\t\thandlers for each node in the tree.\r\n\t\t//\t\tSince setting up many event handlers is expensive, this can increase performance.\r\n\t\t//\r\n\t\t//\t\tNote that delegate() will not work for events that don't bubble, like focus.\r\n\t\t//\t\tonmouseenter/onmouseleave also don't currently work.\r\n\t\t// selector:\r\n\t\t//\t\tCSS selector valid to `dojo.query`, like \".foo\" or \"div > span\".  The\r\n\t\t//\t\tselector is relative to the nodes in this NodeList, not the document root.\r\n\t\t//\t\tFor example myNodeList.delegate(\"> a\", \"onclick\", ...) will catch events on\r\n\t\t//\t\tanchor nodes which are (immediate) children of the nodes in myNodeList.\r\n\t\t// eventName:\r\n\t\t//\t\tStandard event name used as an argument to `dojo.connect`, like \"onclick\".\r\n\t\t// fn:\r\n\t\t//\t\tCallback function passed the event object, and where this == the node that matches the selector.\r\n\t\t//\t\tThat means that for example, after setting up a handler via\r\n\t\t// |\t\t dojo.query(\"body\").delegate(\"fieldset\", \"onclick\", ...)\r\n\t\t//\t\tclicking on a fieldset or *any nodes inside of a fieldset* will be reported\r\n\t\t//\t\tas a click on the fieldset itself.\r\n\t\t// example:\r\n\t\t//\t|\tdojo.query(\"navbar\").delegate(\"a\", \"onclick\", function(evt){\r\n\t\t//\t|\t\t\tconsole.log(\"user clicked anchor \", this.node);\r\n\t\t//\t|\t});\r\n\r\n\t\t// Possible future tasks:\r\n\t\t//\t- change signature of callback to be fn(node, evt), and then have scope argument\r\n\t\t//\t\tto delegate(selector, eventName, scope, fn)?\r\n\t\t//\t- support non-bubbling events like focus\r\n\t\t//\t- support onmouseenter/onmouseleave\r\n\t\t// \t- maybe should return an array of connect handles instead, to allow undelegate()?\r\n\t\t//\t- single node version\r\n\r\n\t\treturn this.connect(eventName, function(evt){\r\n\t\t\tvar closest = query(evt.target).closest(selector, this);\r\n\t\t\tif(closest.length){\r\n\t\t\t\tfn.call(closest[0], evt);\r\n\t\t\t}\r\n\t\t}); //dojo/NodeList\r\n\t}\r\n});\r\n\r\nreturn NodeList;\r\n});\r\n"]}