{"version":3,"sources":["xmpp/RosterService.js"],"names":["dojo","provide","dojox","xmpp","roster","ADDED","CHANGED","REMOVED","declare","constructor","xmppSession","this","session","addRosterItem","jid","name","groups","Error","req","id","getNextIqId","from","resource","type","request","string","Builder","util","createElement","append","xmlns","encodeJid","indexOf","domain","xmlEncode","i","length","def","dispatchPacket","toString","addCallback","updateRosterItem","getRosterIndex","item","newGroups","x","verifyRoster","res","getAttribute","err","processXmppError","onAddRosterItemFailed","addRosterItemToGroup","group","index","found","INVALID_ID","concat","removeRosterGroup","j","splice","renameRosterGroup","newGroup","removeRosterItemFromGroup","rosterItemRenameGroup","oldGroup","renameRosterItem","newName","removeRosterItem","subscription","getAvatar","publishAvatar","binval","onVerifyRoster","onVerifyRosterFailed"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,4BAEbC,MAAMC,KAAKC,QACVC,MAAO,IACPC,QAAS,IACTC,QAAS,KAGVP,KAAKQ,QAAQ,2BAA4B,MACxCC,YAAa,SAASC,GACrBC,KAAKC,QAAUF,GAGhBG,cAAe,SAASC,EAAKC,EAAMC,GAClC,IAAIF,EACH,MAAM,IAAIG,MAAO,6CAElB,IACIC,GACHC,GAFUR,KAAKC,QAAQQ,cAGvBC,KAAMV,KAAKC,QAAQE,IAAM,IAAMH,KAAKC,QAAQU,SAC5CC,KAAM,OAGHC,EAAU,IAAItB,MAAMuB,OAAOC,QAAQxB,MAAMC,KAAKwB,KAAKC,cAAc,KAAMV,GAAK,IAUhF,GATAM,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,SAASE,MAAO,qBAAoB,KAEzD,IADxBhB,EAAMZ,MAAMC,KAAKwB,KAAKI,UAAUjB,IACxBkB,QAAQ,OACflB,EAAMA,EAAM,IAAMH,KAAKC,QAAQqB,QAIhCT,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,QAAQd,IAAIA,EAAIC,KAAKb,MAAMC,KAAKwB,KAAKO,UAAUnB,KAAO,IAE/FC,EACH,IAAK,IAAImB,EAAE,EAAGA,EAAEnB,EAAOoB,OAAQD,IAC9BX,EAAQK,OAAO,WACfL,EAAQK,OAAOb,EAAOmB,IACtBX,EAAQK,OAAO,YAIjBL,EAAQK,OAAO,wBAGf,IAAIQ,EAAM1B,KAAKC,QAAQ0B,eAAed,EAAQe,WAAW,KAAKrB,EAAIC,IAElE,OADAkB,EAAIG,YAAY7B,KAAM,gBACf0B,GAGRI,iBAAkB,SAAS3B,EAAKC,EAAMC,IACZ,GAArBF,EAAIkB,QAAQ,OACflB,GAAOA,EAAM,IAAMH,KAAKC,QAAQqB,QAGjC,IAAIf,GACHC,GAAIR,KAAKC,QAAQQ,cACjBC,KAAMV,KAAKC,QAAQE,IAAM,IAAMH,KAAKC,QAAQU,SAC5CC,KAAM,OAGHC,EAAU,IAAItB,MAAMuB,OAAOC,QAAQxB,MAAMC,KAAKwB,KAAKC,cAAc,KAAMV,GAAK,IAChFM,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,SAASE,MAAO,qBAAoB,IAEjF,IAAIK,EAAIxB,KAAKC,QAAQ8B,eAAe5B,GAGpC,IAAQ,GAAJqB,EAAJ,CACA,IAAIQ,GACH7B,IAAIA,GAEFC,EACF4B,EAAK5B,KAAOA,EACHJ,KAAKC,QAAQR,OAAO+B,GAAGpB,OAChC4B,EAAK5B,KAAOJ,KAAKC,QAAQR,OAAO+B,GAAGpB,MAEjC4B,EAAK5B,OACP4B,EAAK5B,KAAOb,MAAMC,KAAKwB,KAAKO,UAAUS,EAAK5B,OAE5CS,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,OAAOe,GAAK,IAEzD,IAAIC,EAAY5B,GAAkBL,KAAKC,QAAQR,OAAO+B,GAAGnB,OAEzD,GAAI4B,EACH,IAAK,IAAIC,EAAE,EAAEA,EAAED,EAAUR,OAAOS,IAC/BrB,EAAQK,OAAO,WACfL,EAAQK,OAAOe,EAAUC,IACzBrB,EAAQK,OAAO,YAIjBL,EAAQK,OAAO,wBAEf,IAAIQ,EAAM1B,KAAKC,QAAQ0B,eAAed,EAAQe,WAAW,KAAKrB,EAAIC,IAElE,OADAkB,EAAIG,YAAY7B,KAAM,gBACf0B,IAGRS,aAAc,SAASC,GACtB,GAA8B,UAA1BA,EAAIC,aAAa,aAEhB,CACJ,IAAIC,EAAItC,KAAKC,QAAQsC,iBAAiBH,GACtCpC,KAAKwC,sBAAsBF,GAE5B,OAAOF,GAGRK,qBAAsB,SAAStC,EAAKuC,GACnC,IAAKvC,EAAK,MAAM,IAAIG,MAAM,2DAC1B,IAAKoC,EAAO,MAAM,IAAIpC,MAAM,6DAE5B,IAAIqC,EAAQ3C,KAAKC,QAAQ8B,eAAe5B,GACxC,IAAY,GAARwC,EAAJ,CAOA,IALA,IAAIX,EAAOhC,KAAKC,QAAQR,OAAOkD,GAG3BC,GAAQ,EAEHpB,EAAE,EAAKQ,EAAKA,EAAK3B,OAAOoB,SAAamB,EAASpB,IAClDQ,EAAK3B,OAAOmB,IAAIkB,IACpBE,GAAM,GAGP,OAAIA,EAIGrD,MAAMC,KAAKA,KAAKqD,WAHf7C,KAAK8B,iBAAiB3B,EAAK6B,EAAK5B,KAAM4B,EAAK3B,OAAOyC,OAAOJ,GAAOC,KAMzEI,kBAAmB,SAASL,GAE3B,IADA,IAAIjD,EAASO,KAAKC,QAAQR,OAClB+B,EAAE,EAAEA,EAAE/B,EAAOgC,OAAOD,IAAI,CAC/B,IAAIQ,EAAOvC,EAAO+B,GAClB,GAAGQ,EAAK3B,OAAOoB,OAAS,EAEvB,IAAI,IAAIuB,EAAI,EAAEA,EAAIhB,EAAK3B,OAAOoB,OAAQuB,IACjChB,EAAK3B,OAAO2C,IAAIN,IACnBV,EAAK3B,OAAO4C,OAAOD,EAAE,GACrBhD,KAAK8B,iBAAiBE,EAAK7B,IAAK6B,EAAK5B,KAAM4B,EAAK3B,WAQrD6C,kBAAmB,SAASR,EAAOS,GAElC,IADA,IAAI1D,EAASO,KAAKC,QAAQR,OAClB+B,EAAE,EAAEA,EAAE/B,EAAOgC,OAAOD,IAAI,CAC/B,IAAIQ,EAAOvC,EAAO+B,GAClB,GAAGQ,EAAK3B,OAAOoB,OAAS,EAEvB,IAAI,IAAIuB,EAAI,EAAEA,EAAIhB,EAAK3B,OAAOoB,OAAQuB,IACjChB,EAAK3B,OAAO2C,IAAIN,IACnBV,EAAK3B,OAAO2C,GAAKG,EACjBnD,KAAK8B,iBAAiBE,EAAK7B,IAAK6B,EAAK5B,KAAM4B,EAAK3B,WAQrD+C,0BAA2B,SAASjD,EAAKuC,GACxC,IAAKvC,EAAK,MAAM,IAAIG,MAAM,2DAC1B,IAAKoC,EAAO,MAAM,IAAIpC,MAAM,6DAE5B,IAAIqC,EAAQ3C,KAAKC,QAAQ8B,eAAe5B,GACxC,IAAY,GAARwC,EAAJ,CAKA,IAHA,IAAIX,EAAOhC,KAAKC,QAAQR,OAAOkD,GAC3BC,GAAQ,EAEHpB,EAAE,EAAKA,EAAEQ,EAAK3B,OAAOoB,SAAamB,EAASpB,IAC/CQ,EAAK3B,OAAOmB,IAAIkB,IACpBE,GAAM,EACND,EAAQnB,GAGT,OAAU,GAAPoB,GACFZ,EAAK3B,OAAO4C,OAAON,EAAM,GAClB3C,KAAK8B,iBAAiB3B,EAAK6B,EAAK5B,KAAM4B,EAAK3B,SAG5Cd,MAAMC,KAAKA,KAAKqD,aAGxBQ,sBAAuB,SAASlD,EAAKmD,EAAUH,GAC9C,IAAKhD,EAAK,MAAM,IAAIG,MAAM,4DAC1B,IAAK6C,EAAU,MAAM,IAAI7C,MAAM,8DAE/B,IAAIqC,EAAQ3C,KAAKC,QAAQ8B,eAAe5B,GACxC,IAAY,GAARwC,EAAJ,CAKA,IAHA,IAAIX,EAAOhC,KAAKC,QAAQR,OAAOkD,GAC3BC,GAAQ,EAEHpB,EAAE,EAAKA,EAAEQ,EAAK3B,OAAOoB,SAAamB,EAASpB,IAC/CQ,EAAK3B,OAAOmB,IAAI8B,IACnBtB,EAAK3B,OAAOmB,GAAK2B,EACjBP,GAAM,GAIR,OAAU,GAAPA,EACK5C,KAAK8B,iBAAiB3B,EAAK6B,EAAK5B,KAAM4B,EAAK3B,QAG5Cd,MAAMC,KAAKA,KAAKqD,aAGxBU,iBAAkB,SAASpD,EAAIqD,GAC9B,IAAKrD,EAAK,MAAM,IAAIG,MAAM,2DAC1B,IAAKkD,EAAS,MAAM,IAAIlD,MAAM,gEAE9B,IAAIqC,EAAQ3C,KAAKC,QAAQ8B,eAAe5B,GACxC,IAAY,GAARwC,EAEJ,OAAO3C,KAAK8B,iBAAiB3B,EAAKqD,EAASxD,KAAKC,QAAQR,OAAOY,OAAOsC,IAGvEc,iBAAkB,SAAStD,GAC1B,IAAKA,EAAK,MAAM,IAAIG,MAAM,2DAE1B,IAAIC,GACHC,GAAIR,KAAKC,QAAQQ,cACjBC,KAAMV,KAAKC,QAAQE,IAAM,IAAMH,KAAKC,QAAQU,SAC5CC,KAAM,OAEHC,EAAU,IAAItB,MAAMuB,OAAOC,QAAQxB,MAAMC,KAAKwB,KAAKC,cAAc,KAAMV,GAAK,IAEhFM,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,SAASE,MAAO,qBAAoB,KAEzD,GAApBhB,EAAIkB,QAAQ,OACflB,GAAOA,EAAM,IAAMH,KAAKC,QAAQqB,QAGjCT,EAAQK,OAAO3B,MAAMC,KAAKwB,KAAKC,cAAc,QAAQd,IAAIA,EAAIuD,aAAa,WAAU,IAEpF7C,EAAQK,OAAO,iBAEf,IAAIQ,EAAM1B,KAAKC,QAAQ0B,eAAed,EAAQe,WAAW,KAAKrB,EAAIC,IAElE,OADAkB,EAAIG,YAAY7B,KAAM,gBACf0B,GAKRiC,UAAW,SAASxD,KAGpByD,cAAe,SAAShD,EAAKiD,KAM7BC,eAAgB,SAAStD,KAIzBuD,qBAAsB,SAASzB","file":"../../xmpp/RosterService.js","sourcesContent":["dojo.provide(\"dojox.xmpp.RosterService\");\r\n\r\ndojox.xmpp.roster = {\r\n\tADDED: 101,\r\n\tCHANGED: 102,\r\n\tREMOVED: 103\r\n};\r\n\r\ndojo.declare(\"dojox.xmpp.RosterService\", null, {\r\n\tconstructor: function(xmppSession){\r\n\t\tthis.session = xmppSession;\r\n\t},\r\n\r\n\taddRosterItem: function(jid, name, groups){\r\n\t\tif(!jid){\r\n\t\t\tthrow new Error (\"Roster::addRosterItem() - User ID is null\");\r\n\t\t}\r\n\t\tvar iqId = this.session.getNextIqId();\r\n\t\tvar req = {\r\n\t\t\tid: iqId,\r\n\t\t\tfrom: this.session.jid + \"/\" + this.session.resource,\r\n\t\t\ttype: \"set\"\r\n\t\t}\r\n\r\n\t\tvar request = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\", req, false));\r\n\t\trequest.append(dojox.xmpp.util.createElement(\"query\",{xmlns: 'jabber:iq:roster'},false));\r\n\t\tjid = dojox.xmpp.util.encodeJid(jid);\r\n\t\tif (jid.indexOf('@')== -1){\r\n\t\t\tjid = jid + '@' + this.session.domain;\r\n\t\t}\r\n\r\n\r\n\t\trequest.append(dojox.xmpp.util.createElement(\"item\",{jid:jid,name:dojox.xmpp.util.xmlEncode(name)},false));\r\n\r\n\t\tif (groups){\r\n\t\t\tfor (var i=0; i<groups.length; i++){\r\n\t\t\t\trequest.append(\"<group>\");\r\n\t\t\t\trequest.append(groups[i]);\r\n\t\t\t\trequest.append(\"</group>\");\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\trequest.append(\"</item></query></iq>\");\r\n\t\t//console.log(request.toString());\r\n\r\n\t\tvar def = this.session.dispatchPacket(request.toString(),\"iq\",req.id);\r\n\t\tdef.addCallback(this, \"verifyRoster\");\r\n\t\treturn def;\r\n\t},\r\n\r\n\tupdateRosterItem: function(jid, name, groups){\r\n\t\tif (jid.indexOf('@') == -1){\r\n\t\t\tjid += jid + '@' + this.session.domain;\r\n\t\t}\r\n\r\n\t\tvar req = {\r\n\t\t\tid: this.session.getNextIqId(),\r\n\t\t\tfrom: this.session.jid + \"/\" + this.session.resource,\r\n\t\t\ttype: \"set\"\r\n\t\t}\r\n\r\n\t\tvar request = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\", req, false));\r\n\t\trequest.append(dojox.xmpp.util.createElement(\"query\",{xmlns: 'jabber:iq:roster'},false));\r\n\r\n\t\tvar i = this.session.getRosterIndex(jid);\r\n\r\n\t\t//item not found\r\n\t\tif (i==-1){return;}\r\n\t\tvar item = {\r\n\t\t\tjid:jid\r\n\t\t};\r\n\t\tif(name){\r\n\t\t\titem.name = name;\r\n\t\t} else if(this.session.roster[i].name){\r\n\t\t\titem.name = this.session.roster[i].name;\r\n\t\t}\r\n\t\tif(item.name) {\r\n\t\t\titem.name = dojox.xmpp.util.xmlEncode(item.name);\r\n\t\t}\r\n\t\trequest.append(dojox.xmpp.util.createElement(\"item\",item,false));\r\n\t\t\r\n\t\tvar newGroups = groups ? groups : this.session.roster[i].groups;\r\n\t\t\r\n\t\tif (newGroups){\r\n\t\t\tfor (var x=0;x<newGroups.length;x++){\r\n\t\t\t\trequest.append(\"<group>\");\r\n\t\t\t\trequest.append(newGroups[x]);\r\n\t\t\t\trequest.append(\"</group>\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\trequest.append(\"</item></query></iq>\");\r\n\t\t\r\n\t\tvar def = this.session.dispatchPacket(request.toString(),\"iq\",req.id);\r\n\t\tdef.addCallback(this, \"verifyRoster\");\r\n\t\treturn def;\r\n\t},\r\n\r\n\tverifyRoster: function(res){\r\n\t\tif (res.getAttribute('type')=='result'){\r\n\t\t\t//this.onAddRosterItem(res.getAttribute('id'));\r\n\t\t}else{\r\n\t\t\tvar err=this.session.processXmppError(res);\r\n\t\t\tthis.onAddRosterItemFailed(err);\r\n\t\t}\r\n\t\treturn res;\r\n\t},\r\n\r\n\taddRosterItemToGroup: function(jid, group){\r\n\t\tif (!jid) throw new Error(\"Roster::addRosterItemToGroup() JID is null or undefined\");\r\n\t\tif (!group) throw new Error(\"Roster::addRosterItemToGroup() group is null or undefined\");\r\n\r\n\t\tvar index = this.session.getRosterIndex(jid);\r\n\t\tif (index==-1){return;}\r\n\r\n\t\tvar item = this.session.roster[index];\r\n\t\tvar tgroups = [];\r\n\r\n\t\tvar found = false;\r\n\r\n\t\tfor (var i=0; ((item<item.groups.length) && (!found)); i++){\r\n\t\t\tif (item.groups[i]!=group){continue;}\r\n\t\t\tfound=true;\r\n\t\t}\r\n\t\r\n\t\tif(!found){\r\n\t\t\treturn this.updateRosterItem(jid, item.name, item.groups.concat(group),index);\r\n\t\t}\r\n\t\r\n\t\treturn dojox.xmpp.xmpp.INVALID_ID;\r\n\t},\r\n\t\r\n\tremoveRosterGroup: function(group) {\r\n\t\tvar roster = this.session.roster;\r\n\t\tfor(var i=0;i<roster.length;i++){\r\n\t\t\tvar item = roster[i];\r\n\t\t\tif(item.groups.length > 0) {\r\n\t\t\t\t//var found = false;\r\n\t\t\t\tfor(var j = 0;j < item.groups.length; j++) {\r\n\t\t\t\t\tif (item.groups[j]==group){\r\n\t\t\t\t\t\titem.groups.splice(j,1);\r\n\t\t\t\t\t\tthis.updateRosterItem(item.jid, item.name, item.groups);\r\n\t\t\t\t\t\t//found=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n\trenameRosterGroup: function(group, newGroup) {\r\n\t\tvar roster = this.session.roster;\r\n\t\tfor(var i=0;i<roster.length;i++){\r\n\t\t\tvar item = roster[i];\r\n\t\t\tif(item.groups.length > 0) {\r\n\t\t\t\t//var found = false;\r\n\t\t\t\tfor(var j = 0;j < item.groups.length; j++) {\r\n\t\t\t\t\tif (item.groups[j]==group){\r\n\t\t\t\t\t\titem.groups[j] = newGroup;\r\n\t\t\t\t\t\tthis.updateRosterItem(item.jid, item.name, item.groups);\r\n\t\t\t\t//\t\tfound=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremoveRosterItemFromGroup: function(jid, group){\r\n\t\tif (!jid) throw new Error(\"Roster::addRosterItemToGroup() JID is null or undefined\");\r\n\t\tif (!group) throw new Error(\"Roster::addRosterItemToGroup() group is null or undefined\");\r\n\r\n\t\tvar index = this.session.getRosterIndex(jid);\r\n\t\tif (index==-1){return;}\r\n\r\n\t\tvar item = this.session.roster[index];\r\n\t\tvar found = false;\r\n\r\n\t\tfor (var i=0; ((i<item.groups.length) && (!found)); i++){\r\n\t\t\tif (item.groups[i]!=group){continue;}\r\n\t\t\tfound=true;\r\n\t\t\tindex = i;\r\n\t\t}\r\n\r\n\t\tif(found==true){\r\n\t\t\titem.groups.splice(index,1);\r\n\t\t\treturn this.updateRosterItem(jid, item.name, item.groups);\r\n\t\t}\r\n\t\t\r\n\t\treturn dojox.xmpp.xmpp.INVALID_ID;\r\n\t},\r\n\t\r\n\trosterItemRenameGroup: function(jid, oldGroup, newGroup){\r\n\t\tif (!jid) throw new Error(\"Roster::rosterItemRenameGroup() JID is null or undefined\");\r\n\t\tif (!newGroup) throw new Error(\"Roster::rosterItemRenameGroup() group is null or undefined\");\r\n\t\r\n\t\tvar index = this.session.getRosterIndex(jid);\r\n\t\tif (index==-1){return;}\r\n\r\n\t\tvar item = this.session.roster[index];\r\n\t\tvar found = false;\r\n\r\n\t\tfor (var i=0; ((i<item.groups.length) && (!found)); i++){\r\n\t\t\tif (item.groups[i]==oldGroup){\r\n\t\t\t\titem.groups[i] = newGroup;\r\n\t\t\t\tfound=true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(found==true){\r\n\t\t\treturn this.updateRosterItem(jid, item.name, item.groups);\r\n\t\t}\r\n\t\t\r\n\t\treturn dojox.xmpp.xmpp.INVALID_ID;\r\n\t},\r\n\r\n\trenameRosterItem: function(jid,newName){\r\n\t\tif (!jid) throw new Error(\"Roster::addRosterItemToGroup() JID is null or undefined\");\r\n\t\tif (!newName) throw new Error(\"Roster::addRosterItemToGroup() New Name is null or undefined\");\r\n\r\n\t\tvar index = this.session.getRosterIndex(jid);\r\n\t\tif (index==-1){return;}\r\n\r\n\t\treturn this.updateRosterItem(jid, newName, this.session.roster.groups,index);\r\n\t},\r\n\r\n\tremoveRosterItem: function(jid){\r\n\t\tif (!jid) throw new Error(\"Roster::addRosterItemToGroup() JID is null or undefined\");\r\n\t\t\r\n\t\tvar req={\r\n\t\t\tid: this.session.getNextIqId(),\r\n\t\t\tfrom: this.session.jid + \"/\" + this.session.resource,\r\n\t\t\ttype: 'set'\r\n\t\t};\r\n\t\tvar request = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\", req, false));\r\n\t\t\r\n\t\trequest.append(dojox.xmpp.util.createElement(\"query\",{xmlns: \"jabber:iq:roster\"},false));\r\n\r\n\t\tif (jid.indexOf('@')== -1){\r\n\t\t\tjid += jid + '@' + this.session.domain;\r\n\t\t}\r\n\r\n\t\trequest.append(dojox.xmpp.util.createElement('item',{jid:jid,subscription:\"remove\"},true));\r\n\r\n\t\trequest.append(\"</query></iq>\");\r\n\r\n\t\tvar def = this.session.dispatchPacket(request.toString(),\"iq\",req.id);\r\n\t\tdef.addCallback(this, \"verifyRoster\");\r\n\t\treturn def;\r\n\t},\r\n\r\n\t//Avatar functions...I removed this stuff for now..can we even do anything useful\r\n\t//with this data even if we have it?\r\n\tgetAvatar: function(jid){\r\n\t},\r\n\r\n\tpublishAvatar: function(type,binval){\r\n\r\n\t},\r\n\r\n\t//EVENTS\r\n\r\n\tonVerifyRoster: function(id){\r\n\t\t//console.log(\"Roster::onVerifyRoster() - \", id);\r\n\t},\r\n\r\n\tonVerifyRosterFailed: function(err){\r\n\t\t//console.log(\"onVerifyRosterFailed: \", err);\r\n\t}\r\n});\r\n"]}