{"version":3,"sources":["xmpp/bosh.js"],"names":["dojo","provide","require","dojox","xmpp","bosh","transportIframes","initialize","args","this","scopedObj","_scopeName","c","connect","getObject","index","load","disconnect","i","iframes","fname","iframe","byId","window","frames","destroy","io","create","push","_iframeOnload","doc","write","findOpenIframe","length","win","contentWindow","isLoaded","transmiting","handle","msg","rid","dfd","xmlMsg","xml","parser","parse","ioArgs","xmppMessage","errback","Error","get","iframeDoc","frameDoc","_makeScriptDeferred","_ioAddQueryToUrl","_ioNotifyStart","script","attach","id","url","_ioWatch","_validCheck","_ioCheck","_resHandle","remove","frameDocument","_ioSetArgs","_deferredCancel","_deferredOk","_deferredError","canDelete","canceled","_addDeadScript","error","dojoType","_deadScripts","_self","deadScripts","callback"],"mappings":"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","file":"../../xmpp/bosh.js","sourcesContent":["dojo.provide(\"dojox.xmpp.bosh\");\r\n\r\ndojo.require(\"dojo.io.script\");\r\ndojo.require(\"dojo.io.iframe\");\r\ndojo.require(\"dojox.xml.parser\");\r\n\r\n/*=====\r\ndojo.declare(\"dojox.xmpp.bosh.__initArgs\", null, {\r\n\tconstructor: function(){\r\n\t\t// summary:\r\n\t\t//\t\tThe arguments passed to dojox.xmpp.bosh.initialize\r\n\t\t// iframes:\r\n\t\t//\t\tThe number of iframes to use for transmission\r\n\t\t// load:\r\n\t\t//\t\tThe function called when the first iframe is\r\n\t\t//\t\tloaded.  Generally used to signal when to send\r\n\t\t//\t\tlogin information\r\n\t\tthis.iframes = iframes;\r\n\t\tthis.load = load;\r\n\t}\r\n});\r\ndojo.declare(\"dojox.xmpp.bosh.__ioArgs\", dojo.__IoArgs, {\r\n\tconstructor: function(){\r\n\t\t// summary:\r\n\t\t//\t\tAll the properties described in the dojo.__ioArgs type, apply to this\r\n\t\t//\t\ttype as well, EXCEPT \"handleAs\". It is not applicable to\r\n\t\t//\t\tdojox.xmpp.bosh.get() calls, since it is implied that the\r\n\t\t//\t\treturn will be a string of XML.\r\n\t\t// rid:\r\n\t\t//\t\tThe rid of the message being sent.\r\n\t\tthis.rid = rid;\r\n\t}\r\n});\r\n=====*/\r\n\r\ndojox.xmpp.bosh = {\r\n\ttransportIframes: [],\r\n\tinitialize: function(/*dojox.xmpp.bosh.__initArgs*/ args){\r\n\t\tthis.transportIframes = [];\r\n\r\n\t\tvar scopedObj = dojox._scopeName + '.xmpp.bosh';\r\n\r\n\t\tvar c = dojo.connect(dojo.getObject(scopedObj), '_iframeOnload', this, function(index){\r\n\t\t\tif(index==0){\r\n\t\t\t\targs.load();\r\n\t\t\t\tdojo.disconnect(c);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfor(var i = 0; i < args.iframes; i++){\r\n\t\t\tvar fname = 'xmpp-transport-'+i;\r\n\t\t\tvar iframe = dojo.byId('xmpp-transport-'+i);\r\n\t\t\tif(iframe){\r\n\t\t\t\t// we have to clean up the dojo.io.iframe references\r\n\t\t\t\tif(window[fname]){ window[fname] = null; }\r\n\t\t\t\tif(window.frames[fname]){ window.frames[fname] = null; }\r\n\t\t\t\tdojo.destroy(iframe);\r\n\t\t\t}\r\n\t\t\tiframe = dojo.io.iframe.create(\"xmpp-transport-\" + i, scopedObj + \"._iframeOnload(\"+i+\");\" );\r\n\t\t\tthis.transportIframes.push(iframe);\r\n\t\t}\r\n\t},\r\n\r\n\t_iframeOnload: function(index){\r\n\t\tvar doc = dojo.io.iframe.doc(dojo.byId(\"xmpp-transport-\" + index));\r\n\t\tdoc.write(\"<script>var isLoaded=true; var rid=0; var transmiting=false; function _BOSH_(msg) { transmiting=false; parent.dojox.xmpp.bosh.handle(msg, rid); } </script>\");\r\n\t},\r\n\r\n\tfindOpenIframe: function() {\r\n\t\tfor(var i = 0; i < this.transportIframes.length; i++) {\r\n\t\t\tvar iframe = this.transportIframes[i];\r\n\t\t\tvar win = iframe.contentWindow;\r\n\t\t\t//console.log(\"Open transport?\", win, win.isLoaded, win.transmiting);\r\n\t\t\t\r\n\t\t\tif(win.isLoaded && !win.transmiting) {\r\n\t\t\t\treturn iframe;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\thandle: function(msg, rid){\r\n\t\tvar dfd = this['rid'+rid];\r\n\r\n\t\tvar xmlMsg = dojox.xml.parser.parse(msg, 'text/xml');\r\n\r\n\t\tif(xmlMsg){\r\n\t\t\tdfd.ioArgs.xmppMessage = xmlMsg;\r\n\t\t}else{\r\n\t\t\tdfd.errback(new Error(\"Received bad document from server: \" + msg));\r\n\t\t}\r\n\t},\r\n\r\n\tget: function(/*dojox.xmpp.bosh.__ioArgs*/args){\r\n\t\t// summary:\r\n\t\t//\t\tsends a get request using a dynamically created script tag.\r\n\t\tvar iframe = this.findOpenIframe();\r\n\t\tvar iframeDoc = dojo.io.iframe.doc(iframe);\r\n\r\n\t\targs.frameDoc = iframeDoc;\r\n\r\n\t\tvar dfd = this._makeScriptDeferred(args);\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\r\n\t\tiframe.contentWindow.rid=ioArgs.rid;\r\n\t\tiframe.contentWindow.transmiting=true;\r\n\r\n\t\tdojo._ioAddQueryToUrl(ioArgs);\r\n\t\tdojo._ioNotifyStart(dfd);\r\n\r\n\t\tdojo.io.script.attach(ioArgs.id, ioArgs.url, iframeDoc);\r\n\r\n\t\tdojo._ioWatch(dfd, this._validCheck, this._ioCheck, this._resHandle);\r\n\t\treturn dfd;\r\n\t},\r\n\r\n\tremove: function(/*String*/id, /*Document?*/frameDocument){\r\n\t\t// summary:\r\n\t\t//\t\tremoves the script element with the given id, from the given frameDocument.\r\n\t\t//\t\tIf no frameDocument is passed, the current document is used.\r\n\t\tdojo.destroy(dojo.byId(id, frameDocument));\r\n\r\n\t\t//Remove the BOSH callback on dojox.xmpp.bosh, if it exists.\r\n\t\tif(this[id]){\r\n\t\t\tdelete this[id];\r\n\t\t}\r\n\t},\r\n\r\n\t_makeScriptDeferred: function(/*Object*/args){\r\n\t\t// summary:\r\n\t\t//\t\tsets up a Deferred object for an IO request.\r\n\t\tvar dfd = dojo._ioSetArgs(args, this._deferredCancel, this._deferredOk, this._deferredError);\r\n\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\r\n\t\tioArgs.id = 'rid' + args.rid;\r\n\t\tioArgs.rid = args.rid;\r\n\t\tioArgs.canDelete = true;\r\n\t\tioArgs.frameDoc = args.frameDoc;\r\n\r\n\t\tthis[ioArgs.id] = dfd;\r\n\r\n\t\treturn dfd; // dojo.Deferred\r\n\t},\r\n\r\n\t_deferredCancel: function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tcanceller function for dojo._ioSetArgs call.\r\n\r\n\t\t//DO NOT use \"this\" and expect it to be dojox.xmpp.bosh.\r\n\t\tdfd.canceled = true;\r\n\t\tif(dfd.ioArgs.canDelete){\r\n\t\t\tdojox.xmpp.bosh._addDeadScript(dfd.ioArgs);\r\n\t\t}\r\n\t},\r\n\r\n\t_deferredOk: function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tokHandler function for dojo._ioSetArgs call.\r\n\r\n\t\t//DO NOT use \"this\" and expect it to be dojo.xmpp.bosh.\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\r\n\t\t//Add script to list of things that can be removed.\r\n\t\tif(ioArgs.canDelete){\r\n\t\t\tdojox.xmpp.bosh._addDeadScript(ioArgs);\r\n\t\t}\r\n\r\n\t\t//Favor JSONP responses, script load events then lastly ioArgs.\r\n\t\t//The ioArgs are goofy, but cannot return the dfd since that stops\r\n\t\t//the callback chain in Deferred. The return value is not that important\r\n\t\t//in that case, probably a checkString case.\r\n\t\treturn ioArgs.xmppMessage || ioArgs;\r\n\t},\r\n\r\n\t_deferredError: function(/*Error*/error, /*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\terrHandler function for dojo._ioSetArgs call.\r\n\r\n\t\tif(dfd.ioArgs.canDelete){\r\n\t\t\t//DO NOT use \"this\" and expect it to be dojox.xmpp.bosh\r\n\t\t\tif(error.dojoType == \"timeout\"){\r\n\t\t\t\t//For timeouts, remove the script element immediately to\r\n\t\t\t\t//avoid a response from it coming back later and causing trouble.\r\n\t\t\t\tdojox.xmpp.bosh.remove(dfd.ioArgs.id, dfd.ioArgs.frameDoc);\r\n\t\t\t}else{\r\n\t\t\t\tdojox.xmpp.bosh._addDeadScript(dfd.ioArgs);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn error;\r\n\t},\r\n\r\n\t_deadScripts: [],\r\n\t_addDeadScript: function(/*Object*/ioArgs){\r\n\t\t// summary:\r\n\t\t//\t\tsets up an entry in the deadScripts array.\r\n\t\tdojox.xmpp.bosh._deadScripts.push({id: ioArgs.id, frameDoc: ioArgs.frameDoc});\r\n\t\t//Being extra paranoid about leaks:\r\n\t\tioArgs.frameDoc = null;\r\n\t},\r\n\r\n\t_validCheck: function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tinflight check function to see if dfd is still valid.\r\n\r\n\t\t//Do script cleanup here. We wait for one inflight pass\r\n\t\t//to make sure we don't get any weird things by trying to remove a script\r\n\t\t//tag that is part of the call chain (IE 6 has been known to\r\n\t\t//crash in that case).\r\n\t\tvar _self = dojox.xmpp.bosh;\r\n\t\tvar deadScripts = _self._deadScripts;\r\n\t\tif(deadScripts && deadScripts.length > 0){\r\n\t\t\tfor(var i = 0; i < deadScripts.length; i++){\r\n\t\t\t\t//Remove the script tag\r\n\t\t\t\t_self.remove(deadScripts[i].id, deadScripts[i].frameDoc);\r\n\t\t\t\tdeadScripts[i].frameDoc = null;\r\n\t\t\t}\r\n\t\t\tdojox.xmpp.bosh._deadScripts = [];\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t},\r\n\r\n\t_ioCheck: function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tinflight check function to see if IO finished.\r\n\t\tvar ioArgs = dfd.ioArgs;\r\n\t\t//Check for returned message\r\n\t\tif(ioArgs.xmppMessage){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t},\r\n\r\n\t_resHandle: function(/*Deferred*/dfd){\r\n\t\t// summary:\r\n\t\t//\t\tinflight function to handle a completed response.\r\n\t\tif(dojox.xmpp.bosh._ioCheck(dfd)){\r\n\t\t\tdfd.callback(dfd);\r\n\t\t}else{\r\n\t\t\t//This path should never happen since the only way we can get\r\n\t\t\t//to _resHandle is if _ioCheck is true.\r\n\t\t\tdfd.errback(new Error(\"inconceivable dojox.xmpp.bosh._resHandle error\"));\r\n\t\t}\r\n\t}\r\n};\r\n"]}