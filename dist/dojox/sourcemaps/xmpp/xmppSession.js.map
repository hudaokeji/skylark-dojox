{"version":3,"sources":["xmpp/xmppSession.js"],"names":["dojo","provide","require","dojox","xmpp","STREAM_NS","CLIENT_NS","STANZA_NS","SASL_NS","BIND_NS","SESSION_NS","BODY_NS","XHTML_BODY_NS","XHTML_IM_NS","INACTIVE","CONNECTED","ACTIVE","TERMINATE","LOGIN_FAILURE","INVALID_ID","NO_ID","error","BAD_REQUEST","CONFLICT","FEATURE_NOT_IMPLEMENTED","FORBIDDEN","GONE","INTERNAL_SERVER_ERROR","ITEM_NOT_FOUND","ID_MALFORMED","NOT_ACCEPTABLE","NOT_ALLOWED","NOT_AUTHORIZED","SERVICE_UNAVAILABLE","SUBSCRIPTION_REQUIRED","UNEXPECTED_REQUEST","xmppSession","props","this","roster","chatRegister","_iqId","Math","round","random","isObject","mixin","session","TransportSession","connect","extend","open","user","password","resource","Error","jid","indexOf","domain","close","state","util","createElement","type","xmlns","processProtocolResponse","msg","nodeName","nsIndex","substring","getAttribute","saslHandler","messageHandler","chatHandler","simpleMessageHandler","iqHandler","iqSetHandler","presenceHandler","presenceSubscriptionRequest","processXmppError","presenceUpdate","featuresHandler","authMechanisms","hasBindFeature","hasSessionFeature","hasChildNodes","i","childNodes","length","n","x","push","firstChild","nodeValue","auth","bindResource","sasl","registry","match","e","console","warn","onLoginFailure","setState","onChallenge","onSuccess","sendRestart","_sendRestart","message","from","to","chatid","body","subject","xhtml","getElementsByTagName","found","ci","uid","getBareJid","receiveMessage","chatInstance","ChatService","firstMessage","useChatState","registerChatInstance","setSession","onRegisterChatInstance","fn","rosterSetHandler","sendIqResult","iqId","req","id","dispatchPacket","elem","r","rosterItem","previousCopy","name","groups","y","splice","REMOVED","clone","itemName","status","substatus","presence","SUBSCRIPTION_SUBSTATUS_NONE","SUBSCRIPTION_REQUEST_PENDING","groupNode","gname","CHANGED","createRosterEntry","ADDED","onRosterAdded","onRosterRemoved","onRosterChanged","fromRes","getResourceFromJid","p","show","STATUS_ONLINE","priority","hasAvatar","STATUS_OFFLINE","parseInt","avatarHash","onPresenceUpdate","retrieveRoster","getNextIqId","string","Builder","append","addCallback","getRosterIndex","re","SUBSCRIPTION_NONE","hasSession","bindReq","onBindResource","onSubscriptionRequest","matchId","search","searchString","service","searchAttribute","xml:lang","lang","request","toString","_onSearchResults","onSearchResults","onLogin","bindTag","fulljid","err","onBindSession","results","onRetrieveRoster","query","onRosterUpdated","onTransportReady","rosterService","RosterService","presenceService","PresenceService","userService","UserService","onTransportTerminate","newState","oldState","onConnected","onTerminate","onActive","ri","stanzaType","errorType","cn","condition","sendStanzaError","text","textAttr"],"mappings":"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","file":"../../xmpp/xmppSession.js","sourcesContent":["dojo.provide(\"dojox.xmpp.xmppSession\");\r\n\r\ndojo.require(\"dojox.xmpp.TransportSession\");\r\ndojo.require(\"dojox.xmpp.RosterService\");\r\ndojo.require(\"dojox.xmpp.PresenceService\");\r\ndojo.require(\"dojox.xmpp.UserService\");\r\ndojo.require(\"dojox.xmpp.ChatService\");\r\ndojo.require(\"dojox.xmpp.sasl\");\r\n\r\ndojox.xmpp.xmpp = {\r\n\tSTREAM_NS:  'http://etherx.jabber.org/streams',\r\n\tCLIENT_NS: 'jabber:client',\r\n\tSTANZA_NS: 'urn:ietf:params:xml:ns:xmpp-stanzas',\r\n\tSASL_NS: 'urn:ietf:params:xml:ns:xmpp-sasl',\r\n\tBIND_NS: 'urn:ietf:params:xml:ns:xmpp-bind',\r\n\tSESSION_NS: 'urn:ietf:params:xml:ns:xmpp-session',\r\n\tBODY_NS: \"http://jabber.org/protocol/httpbind\",\r\n\r\n\tXHTML_BODY_NS: \"http://www.w3.org/1999/xhtml\",\r\n\tXHTML_IM_NS: \"http://jabber.org/protocol/xhtml-im\",\r\n\r\n\tINACTIVE: \"Inactive\",\r\n\tCONNECTED: \"Connected\",\r\n\tACTIVE: \"Active\",\r\n\tTERMINATE: \"Terminate\",\r\n\tLOGIN_FAILURE: \"LoginFailure\",\r\n\r\n\tINVALID_ID: -1,\r\n\tNO_ID: 0,\r\n\r\n\terror:{\r\n\t\tBAD_REQUEST: 'bad-request',\r\n\t\tCONFLICT: 'conflict',\r\n\t\tFEATURE_NOT_IMPLEMENTED: 'feature-not-implemented',\r\n\t\tFORBIDDEN: 'forbidden',\r\n\t\tGONE: 'gone',\r\n\t\tINTERNAL_SERVER_ERROR: 'internal-server-error',\r\n\t\tITEM_NOT_FOUND: 'item-not-found',\r\n\t\tID_MALFORMED: 'jid-malformed',\r\n\t\tNOT_ACCEPTABLE: 'not-acceptable',\r\n\t\tNOT_ALLOWED: 'not-allowed',\r\n\t\tNOT_AUTHORIZED: 'not-authorized',\r\n\t\tSERVICE_UNAVAILABLE: 'service-unavailable',\r\n\t\tSUBSCRIPTION_REQUIRED: 'subscription-required',\r\n\t\tUNEXPECTED_REQUEST: 'unexpected-request'\r\n\t}\r\n};\r\n\r\ndojox.xmpp.xmppSession = function(props){\r\n\tthis.roster = [];\r\n\tthis.chatRegister = [];\r\n\tthis._iqId = Math.round(Math.random() * 1000000000);\r\n\r\n\t//mixin any options that we want to provide to this service\r\n\tif (props && dojo.isObject(props)) {\r\n\t\tdojo.mixin(this, props);\r\n\t}\r\n\r\n\tthis.session = new dojox.xmpp.TransportSession(props);\r\n\tdojo.connect(this.session, \"onReady\", this, \"onTransportReady\");\r\n\tdojo.connect(this.session, \"onTerminate\", this, \"onTransportTerminate\");\r\n\tdojo.connect(this.session, \"onProcessProtocolResponse\", this, \"processProtocolResponse\");\r\n};\r\n\r\n\r\ndojo.extend(dojox.xmpp.xmppSession, {\r\n\r\n\t\troster: [],\r\n\t\tchatRegister: [],\r\n\t\t_iqId: 0,\r\n\r\n\t\topen: function(user, password, resource){\r\n\r\n\t\t\tif (!user) {\r\n\t\t\t\tthrow new Error(\"User id cannot be null\");\r\n\t\t\t} else {\r\n\t\t\t\tthis.jid = user;\r\n\t\t\t\tif(user.indexOf('@') == -1) {\r\n\t\t\t\t\tthis.jid = this.jid + '@' + this.domain;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//allow null password here as its not needed in the SSO case\r\n\t\t\tif (password) {\r\n\t\t\t\tthis.password = password;\r\n\t\t\t}\r\n\r\n\t\t\t//normally you should NOT supply a resource and let the server send you one\r\n\t\t\t//as part of your jid...see onBindResource()\r\n\t\t\tif (resource) {\r\n\t\t\t\tthis.resource = resource;\r\n\t\t\t}\r\n\r\n\t\t\tthis.session.open();\r\n\t\t},\r\n\r\n\t\tclose: function(){\r\n\t\t\tthis.state = dojox.xmpp.xmpp.TERMINATE;\r\n\t\t\tthis.session.close(dojox.xmpp.util.createElement(\"presence\",{type:\"unavailable\",xmlns:dojox.xmpp.xmpp.CLIENT_NS},true));\r\n\t\t},\r\n\r\n\t\tprocessProtocolResponse: function(msg){\r\n\t\t\t//console.log(\"xmppSession::processProtocolResponse() \", msg, msg.nodeName);\r\n\t\t\tvar type = msg.nodeName;\r\n\t\t\tvar nsIndex =type.indexOf(\":\");\r\n\t\t\tif(nsIndex > 0) {\r\n\t\t\t\ttype = type.substring(nsIndex+1);\r\n\t\t\t}\r\n\t\t\tswitch(type){\r\n\t\t\t\tcase \"iq\":\r\n\t\t\t\tcase \"presence\":\r\n\t\t\t\tcase \"message\":\r\n\t\t\t\tcase \"features\":\r\n\t\t\t\t\tthis[type + \"Handler\"](msg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t//console.log(\"default action?\", msg.getAttribute('xmlns'));\r\n\t\t\t\t\tif(msg.getAttribute('xmlns')==dojox.xmpp.xmpp.SASL_NS){\r\n\t\t\t\t\t\tthis.saslHandler(msg);\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t//HANDLERS\r\n\r\n\t\tmessageHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::messageHandler() \",msg);\r\n\t\t\tswitch(msg.getAttribute('type')){\r\n\t\t\t\tcase \"chat\":\r\n\t\t\t\t\tthis.chatHandler(msg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"normal\":\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.simpleMessageHandler(msg);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tiqHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::iqHandler()\", msg);\r\n\t\t\tif (msg.getAttribute('type')==\"set\"){\r\n\t\t\t\tthis.iqSetHandler(msg);\r\n\t\t\t\treturn;\r\n\t\t\t} else if (msg.getAttribute('type')=='get'){\r\n\t\t\t//\tthis.sendStanzaError('iq', this.domain, msg.getAttribute('from'), 'cancel', 'service-unavailable', 'service not implemented');\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpresenceHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::presenceHandler()\");\r\n\t\t\tswitch(msg.getAttribute('type')){\r\n\t\t\t\tcase 'subscribe':\r\n\t\t\t\t\t//console.log(\"PresenceHandler: \", msg.getAttribute('from'));\r\n\t\t\t\t\tthis.presenceSubscriptionRequest(msg.getAttribute('from'));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'subscribed':\r\n\t\t\t\tcase 'unsubscribed':\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'error':\r\n\t\t\t\t\tthis.processXmppError(msg);\r\n\t\t\t\t\t//console.log(\"xmppService::presenceHandler() Error\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.presenceUpdate(msg);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfeaturesHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::featuresHandler() \",msg);\r\n\t\t\tvar authMechanisms = [];\r\n\t\t\tvar hasBindFeature = false;\r\n\t\t\tvar hasSessionFeature = false;\r\n\r\n\t\t\tif(msg.hasChildNodes()){\r\n\t\t\t\tfor(var i=0; i<msg.childNodes.length;i++){\r\n\t\t\t\t\tvar n = msg.childNodes[i];\r\n\t\t\t\t\t//console.log(\"featuresHandler::node\", n);\r\n\t\t\t\t\tswitch(n.nodeName){\r\n\t\t\t\t\t\tcase 'mechanisms':\r\n\t\t\t\t\t\t\tfor (var x=0; x<n.childNodes.length; x++){\r\n\t\t\t\t\t\t\t\t//console.log(\"featuresHandler::node::mechanisms\", n.childNodes[x].firstChild.nodeValue);\r\n\t\t\t\t\t\t\t\tauthMechanisms.push(n.childNodes[x].firstChild.nodeValue);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'bind':\r\n\t\t\t\t\t\t\t//if (n.getAttribute('xmlns')==dojox.xmpp.xmpp.BIND_NS) {\r\n\t\t\t\t\t\t\thasBindFeature = true;\r\n\t\t\t\t\t\t//\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'session':\r\n\t\t\t\t\t\t\thasSessionFeature = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//console.log(\"Has connected/bind?\", this.state, hasBindFeature, authMechanisms);\r\n\t\t\tif(this.state == dojox.xmpp.xmpp.CONNECTED){\r\n\t\t\t\tif(!this.auth){\r\n\t\t\t\t\t// start the login\r\n\t\t\t\t\tfor(var i=0; i<authMechanisms.length; i++){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tthis.auth = dojox.xmpp.sasl.registry.match(authMechanisms[i], this);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\t\tconsole.warn(\"No suitable auth mechanism found for: \", authMechanisms[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(hasBindFeature){\r\n\t\t\t\t\tthis.bindResource(hasSessionFeature);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsaslHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::saslHandler() \", msg);\r\n\t\t\tif(msg.nodeName==\"success\"){\r\n\t\t\t\tthis.auth.onSuccess();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(msg.nodeName==\"challenge\"){\r\n\t\t\t\tthis.auth.onChallenge(msg);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(msg.hasChildNodes()){\r\n\t\t\t\tthis.onLoginFailure(msg.firstChild.nodeName);\r\n\t\t\t\tthis.session.setState('Terminate', msg.firstChild.nodeName);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsendRestart: function(){\r\n\t\t\tthis.session._sendRestart();\r\n\t\t},\r\n\r\n\r\n\t\t//SUB HANDLERS\r\n\r\n\t\tchatHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::chatHandler() \", msg);\r\n\t\t\tvar message = {\r\n\t\t\t\tfrom: msg.getAttribute('from'),\r\n\t\t\t\tto: msg.getAttribute('to')\r\n\t\t\t};\r\n\r\n\t\t\tvar chatState = null;\r\n\t\t\t\t//console.log(\"chat child node \", msg.childNodes, msg.childNodes.length);\r\n\t\t\tfor (var i=0; i<msg.childNodes.length; i++){\r\n\t\t\t\tvar n = msg.childNodes[i];\r\n\t\t\t\tif (n.hasChildNodes()){\r\n\t\t\t\t\t//console.log(\"chat child node \", n);\r\n\t\t\t\t\tswitch(n.nodeName){\r\n\t\t\t\t\t\tcase 'thread':\r\n\t\t\t\t\t\t\tmessage.chatid = n.firstChild.nodeValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'body':\r\n\t\t\t\t\t\t\tif (!n.getAttribute('xmlns') || (n.getAttribute('xmlns')===\"\")){\r\n\t\t\t\t\t\t\t\tmessage.body = n.firstChild.nodeValue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'subject':\r\n\t\t\t\t\t\t\tmessage.subject = n.firstChild.nodeValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'html':\r\n\t\t\t\t\t\t\tif (n.getAttribute('xmlns')==dojox.xmpp.xmpp.XHTML_IM_NS){\r\n\t\t\t\t\t\t\t\tmessage.xhtml = n.getElementsByTagName(\"body\")[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'x':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//console.log(\"xmppSession::chatHandler() Unknown node type: \",n.nodeName);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t/*//console.log(\"Foo\", n, n.nodeName);\r\n\t\t\t\tif(n.getAttribute('xmlns')==dojox.xmpp.chat.CHAT_STATE_NS){\r\n\t\t\t\t\tchatState = n.nodeName;\r\n\t\t\t\t}*/\r\n\t\t\t}\r\n\r\n\t\t\tvar found = -1;\r\n\t\t\tif (message.chatid){\r\n\t\t\t\tfor (var i=0; i< this.chatRegister.length; i++){\r\n\t\t\t\t\tvar ci = this.chatRegister[i];\r\n\t\t\t\t\t////console.log(\"ci.chatid: \", ci.chatid, message.chatid);\r\n\t\t\t\t\tif (ci && ci.chatid == message.chatid) {\r\n\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i=0; i< this.chatRegister.length; i++){\r\n\t\t\t\t\tvar ci = this.chatRegister[i];\r\n\t\t\t\t\tif(ci){\r\n\t\t\t\t\t\tif (ci.uid==this.getBareJid(message.from)){\r\n\t\t\t\t\t\t\tfound = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (found>-1 && chatState){\r\n\t\t\t\tvar chat = this.chatRegister[found];\r\n\t\t\t\tchat.setState(chatState);\r\n\r\n\t\t\t\tif (chat.firstMessage){\r\n\t\t\t\t\tif (chatState == dojox.xmpp.chat.ACTIVE_STATE) {\r\n\t\t\t\t\t\tchat.useChatState = (chatState !== null) ? true : false;\r\n\t\t\t\t\t\tchat.firstMessage = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((!message.body || message.body===\"\") && !message.xhtml) {return;}\r\n\r\n\t\t\tif (found>-1){\r\n\t\t\t\tvar chat = this.chatRegister[found];\r\n\t\t\t\tchat.receiveMessage(message);\r\n\t\t\t}else{\r\n\t\t\t\tvar chatInstance = new dojox.xmpp.ChatService();\r\n\t\t\t\tchatInstance.uid = this.getBareJid(message.from);\r\n\t\t\t\tchatInstance.chatid = message.chatid;\r\n\t\t\t\tchatInstance.firstMessage = true;\r\n\t\t\t\tif(!chatState || chatState != dojox.xmpp.chat.ACTIVE_STATE){\r\n\t\t\t\t\tthis.useChatState = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.registerChatInstance(chatInstance, message);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsimpleMessageHandler: function(msg){\r\n\t\t\t//console.log(\"xmppSession::simpleMessageHandler() \", msg);\r\n\t\t},\r\n\r\n\t\tregisterChatInstance: function(chatInstance, message){\r\n\t\t\tchatInstance.setSession(this);\r\n\t\t\tthis.chatRegister.push(chatInstance);\r\n\t\t\tthis.onRegisterChatInstance(chatInstance, message);\r\n\t\t\tchatInstance.receiveMessage(message,true);\r\n\t\t},\r\n\r\n\t\tiqSetHandler: function(msg){\r\n\t\t\tif (msg.hasChildNodes()){\r\n\t\t\t\tvar fn = msg.firstChild;\r\n\t\t\t\tswitch(fn.nodeName){\r\n\t\t\t\t\tcase 'query':\r\n\t\t\t\t\t\tif(fn.getAttribute('xmlns') == \"jabber:iq:roster\"){\r\n\t\t\t\t\t\t\tthis.rosterSetHandler(fn);\r\n\t\t\t\t\t\t\tthis.sendIqResult(msg.getAttribute('id'), msg.getAttribute('from'));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t//\tthis.sendStanzaError('iq', this.domain, msg.getAttribute('id'), 'cancel', 'service-unavailable', 'service not implemented');\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsendIqResult: function(iqId, to){\r\n\t\t\tvar req = {\r\n\t\t\t\tid: iqId,\r\n\t\t\t\tto: to || this.domain,\r\n\t\t\t\ttype: 'result',\r\n\t\t\t\tfrom: this.jid + \"/\" + this.resource\r\n\t\t\t};\r\n\t\t\tthis.dispatchPacket(dojox.xmpp.util.createElement(\"iq\",req,true));\r\n\t\t},\r\n\r\n\t\trosterSetHandler: function(elem){\r\n\t\t\t//console.log(\"xmppSession::rosterSetHandler()\", arguments);\r\n\t\t\tvar r;\r\n\t\t\tfor (var i=0; i<elem.childNodes.length;i++){\r\n\t\t\t\tvar n = elem.childNodes[i];\r\n\r\n\t\t\t\tif (n.nodeName==\"item\"){\r\n\t\t\t\t\tvar found = false;\r\n\t\t\t\t\tvar state = -1;\r\n\t\t\t\t\tvar rosterItem = null;\r\n\t\t\t\t\tvar previousCopy = null;\r\n\t\t\t\t\tfor(var x=0; x<this.roster.length;x++){\r\n\t\t\t\t\t\tr = this.roster[x];\r\n\t\t\t\t\t\tif(n.getAttribute('jid')==r.jid){\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\tif(n.getAttribute('subscription')=='remove'){\r\n\t\t\t\t\t\t\t\t//remove the item\r\n\t\t\t\t\t\t\t\trosterItem = {\r\n\t\t\t\t\t\t\t\t\tid: r.jid,\r\n\t\t\t\t\t\t\t\t\tname: r.name,\r\n\t\t\t\t\t\t\t\t\tgroups:[]\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tfor (var y=0;y<r.groups.length;y++){\r\n\t\t\t\t\t\t\t\t\trosterItem.groups.push(r.groups[y]);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tthis.roster.splice(x,1);\r\n\t\t\t\t\t\t\t\tstate = dojox.xmpp.roster.REMOVED;\r\n\r\n\t\t\t\t\t\t\t} else { //update\r\n\t\t\t\t\t\t\t\tpreviousCopy = dojo.clone(r);\r\n\t\t\t\t\t\t\t\tvar itemName = n.getAttribute('name');\r\n\t\t\t\t\t\t\t\tif (itemName){\r\n\t\t\t\t\t\t\t\t\tthis.roster[x].name = itemName;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tr.groups = [];\r\n\r\n\t\t\t\t\t\t\t\tif (n.getAttribute('subscription')){\r\n\t\t\t\t\t\t\t\t\tr.status = n.getAttribute('subscription');\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tr.substatus = dojox.xmpp.presence.SUBSCRIPTION_SUBSTATUS_NONE;\r\n\t\t\t\t\t\t\t\tif(n.getAttribute('ask')=='subscribe'){\r\n\t\t\t\t\t\t\t\t\tr.substatus = dojox.xmpp.presence.SUBSCRIPTION_REQUEST_PENDING;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tfor(var y=0;y<n.childNodes.length;y++){\r\n\t\t\t\t\t\t\t\t\tvar groupNode = n.childNodes[y];\r\n\t\t\t\t\t\t\t\t\tif ((groupNode.nodeName=='group')&&(groupNode.hasChildNodes())){\r\n\t\t\t\t\t\t\t\t\t\tvar gname = groupNode.firstChild.nodeValue;\r\n\t\t\t\t\t\t\t\t\t\tr.groups.push(gname);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\trosterItem = r;\r\n\t\t\t\t\t\t\t\tstate = dojox.xmpp.roster.CHANGED;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!found && (n.getAttribute('subscription')!='remove')){\r\n\t\t\t\t\t\tr = this.createRosterEntry(n);\r\n\t\t\t\t\t\trosterItem = r;\r\n\t\t\t\t\t\tstate = dojox.xmpp.roster.ADDED;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tswitch(state){\r\n\t\t\t\t\t\tcase dojox.xmpp.roster.ADDED:\r\n\t\t\t\t\t\t\tthis.onRosterAdded(rosterItem);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase dojox.xmpp.roster.REMOVED:\r\n\t\t\t\t\t\t\tthis.onRosterRemoved(rosterItem);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase dojox.xmpp.roster.CHANGED:\r\n\t\t\t\t\t\t\tthis.onRosterChanged(rosterItem, previousCopy);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpresenceUpdate: function(msg){\r\n\t\t\tif(msg.getAttribute('to')){\r\n\t\t\t\tvar jid = this.getBareJid(msg.getAttribute('to'));\r\n\t\t\t\tif(jid != this.jid) {\r\n\t\t\t\t\t//console.log(\"xmppService::presenceUpdate Update Received with wrong address - \",jid);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar fromRes = this.getResourceFromJid(msg.getAttribute('from'));\r\n\r\n\t\t\tvar p = {\r\n\t\t\t\tfrom: this.getBareJid(msg.getAttribute('from')),\r\n\t\t\t\tresource: fromRes,\r\n\t\t\t\tshow: dojox.xmpp.presence.STATUS_ONLINE,\r\n\t\t\t\tpriority: 5,\r\n\t\t\t\thasAvatar: false\r\n\t\t\t};\r\n\r\n\t\t\tif(msg.getAttribute('type')=='unavailable'){\r\n\t\t\t\tp.show=dojox.xmpp.presence.STATUS_OFFLINE;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i=0; i<msg.childNodes.length;i++){\r\n\t\t\t\tvar n=msg.childNodes[i];\r\n\t\t\t\tif (n.hasChildNodes()){\r\n\t\t\t\t\tswitch(n.nodeName){\r\n\t\t\t\t\t\tcase 'status':\r\n\t\t\t\t\t\tcase 'show':\r\n\t\t\t\t\t\t\tp[n.nodeName]=n.firstChild.nodeValue;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'priority':\r\n\t\t\t\t\t\t\tp.priority=parseInt(n.firstChild.nodeValue, 10);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'x':\r\n\t\t\t\t\t\t\tif(n.firstChild && n.firstChild.firstChild && n.firstChild.firstChild.nodeValue !== \"\") {\r\n\t\t\t\t\t\t\t\tp.avatarHash= n.firstChild.firstChild.nodeValue;\r\n\t\t\t\t\t\t\t\tp.hasAvatar = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.onPresenceUpdate(p);\r\n\t\t},\r\n\r\n\t\tretrieveRoster: function(){\r\n\t\t\t////console.log(\"xmppService::retrieveRoster()\");\r\n\t\t\tvar props={\r\n\t\t\t\tid: this.getNextIqId(),\r\n\t\t\t\tfrom: this.jid + \"/\" + this.resource,\r\n\t\t\t\ttype: \"get\"\r\n\t\t\t};\r\n\t\t\tvar req = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\",props,false));\r\n\t\t\treq.append(dojox.xmpp.util.createElement(\"query\",{xmlns: \"jabber:iq:roster\"},true));\r\n\t\t\treq.append(\"</iq>\");\r\n\r\n\t\t\tvar def = this.dispatchPacket(req,\"iq\", props.id);\r\n\t\t\tdef.addCallback(this, \"onRetrieveRoster\");\r\n\r\n\t\t},\r\n\r\n\t\tgetRosterIndex: function(jid){\r\n\t\t\tif(jid.indexOf('@')==-1){\r\n\t\t\t\tjid += '@' + this.domain;\r\n\t\t\t}\r\n\t\t\tfor (var i=0; i<this.roster.length;i++){\r\n\t\t\t\tif(jid == this.roster[i].jid) { return i; }\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t},\r\n\r\n\t\tcreateRosterEntry: function(elem){\r\n\t\t\t////console.log(\"xmppService::createRosterEntry()\");\r\n\t\t\tvar re = {\r\n\t\t\t\tname: elem.getAttribute('name'),\r\n\t\t\t\tjid: elem.getAttribute('jid'),\r\n\t\t\t\tgroups: [],\r\n\t\t\t\tstatus: dojox.xmpp.presence.SUBSCRIPTION_NONE,\r\n\t\t\t\tsubstatus: dojox.xmpp.presence.SUBSCRIPTION_SUBSTATUS_NONE\r\n\t\t\t//\tdisplayToUser: false\r\n\t\t\t};\r\n\r\n\t\t\tif (!re.name){\r\n\t\t\t\tre.name = re.id;\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tfor(var i=0; i<elem.childNodes.length;i++){\r\n\t\t\t\tvar n = elem.childNodes[i];\r\n\t\t\t\tif (n.nodeName=='group' && n.hasChildNodes()){\r\n\t\t\t\t\tre.groups.push(n.firstChild.nodeValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (elem.getAttribute('subscription')){\r\n\t\t\t\tre.status = elem.getAttribute('subscription');\r\n\t\t\t}\r\n\r\n\t\t\tif (elem.getAttribute('ask')=='subscribe'){\r\n\t\t\t\tre.substatus = dojox.xmpp.presence.SUBSCRIPTION_REQUEST_PENDING;\r\n\t\t\t}\r\n\t\t\t//Display contact rules from http://www.xmpp.org/extensions/xep-0162.html#contacts\r\n\t\t/*\tif(re.status == dojox.xmpp.presence.SUBSCRIPTION_REQUEST_PENDING ||\r\n\t\t\t\tre.status == dojox.xmpp.presence.SUBSCRIPTION_TO ||\r\n\t\t\t\tre.status == dojox.xmpp.presence.SUBSCRIPTION_BOTH ||\r\n\t\t\t\tre.groups.length > 0 ||\r\n\t\t\t\tre.name\r\n\t\t\t\t) {\r\n\t\t\t\t\tre.displayToUser = true;\r\n\t\t\t\t}\r\n*/\r\n\t\t\treturn re;\r\n\t\t},\r\n\r\n\t\tbindResource: function(hasSession){\r\n\t\t\tvar props = {\r\n\t\t\t\tid: this.getNextIqId(),\r\n\t\t\t\ttype: \"set\"\r\n\t\t\t};\r\n\t\t\tvar bindReq = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\", props, false));\r\n\t\t\tbindReq.append(dojox.xmpp.util.createElement(\"bind\", {xmlns: dojox.xmpp.xmpp.BIND_NS}, false));\r\n\r\n\t\t\tif (this.resource){\r\n\t\t\t\tbindReq.append(dojox.xmpp.util.createElement(\"resource\"));\r\n\t\t\t\tbindReq.append(this.resource);\r\n\t\t\t\tbindReq.append(\"</resource>\");\r\n\t\t\t}\r\n\r\n\t\t\tbindReq.append(\"</bind></iq>\");\r\n\r\n\t\t\tvar def = this.dispatchPacket(bindReq, \"iq\", props.id);\r\n\t\t\tdef.addCallback(this, function(msg){\r\n\t\t\t\tthis.onBindResource(msg, hasSession);\r\n\t\t\t\treturn msg;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tgetNextIqId: function(){\r\n\t\t\treturn \"im_\" + this._iqId++;\r\n\t\t},\r\n\r\n\t\tpresenceSubscriptionRequest: function(msg) {\r\n\t\t\tthis.onSubscriptionRequest(msg);\r\n\t\t\t/*\r\n\t\t\tthis.onSubscriptionRequest({\r\n\t\t\t\tfrom: msg,\r\n\t\t\t\tresource:\"\",\r\n\t\t\t\tshow:\"\",\r\n\t\t\t\tstatus:\"\",\r\n\t\t\t\tpriority: 5\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\tdispatchPacket: function(msg, type, matchId){\r\n\t\t\tif (this.state != \"Terminate\") {\r\n\t\t\t\treturn this.session.dispatchPacket(msg,type,matchId);\r\n\t\t\t}else{\r\n\r\n\t\t\t\t//console.log(\"xmppSession::dispatchPacket - Session in Terminate state, dropping packet\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetState: function(state, message){\r\n\t\t\tif (this.state != state){\r\n\t\t\t\tif (this[\"on\"+state]){\r\n\t\t\t\t\tthis[\"on\"+state](state, this.state, message);\r\n\t\t\t\t}\r\n\t\t\t\tthis.state=state;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsearch: function(searchString, service, searchAttribute){\r\n\t\t\tvar req={\r\n\t\t\t\tid: this.getNextIqId(),\r\n\t\t\t\t\"xml:lang\": this.lang,\r\n\t\t\t\ttype: 'set',\r\n\t\t\t\tfrom: this.jid + '/' + this.resource,\r\n\t\t\t\tto: service\r\n\t\t\t};\r\n\t\t\tvar request = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\",req,false));\r\n\t\t\trequest.append(dojox.xmpp.util.createElement('query',{xmlns:'jabber:iq:search'},false));\r\n\t\t\trequest.append(dojox.xmpp.util.createElement(searchAttribute,{},false));\r\n\t\t\trequest.append(searchString);\r\n\t\t\trequest.append(\"</\").append(searchAttribute).append(\">\");\r\n\t\t\trequest.append(\"</query></iq>\");\r\n\r\n\t\t\tvar def = this.dispatchPacket(request.toString,\"iq\",req.id);\r\n\t\t\tdef.addCallback(this, \"_onSearchResults\");\r\n\t\t},\r\n\r\n\t\t_onSearchResults: function(msg){\r\n\t\t\tif ((msg.getAttribute('type')=='result')&&(msg.hasChildNodes())){\r\n\t\t\t\t//console.log(\"xmppSession::_onSearchResults(): \", msg.firstChild);\r\n\r\n\t\t\t\t//call the search results event with an array of results\r\n\t\t\t\tthis.onSearchResults([]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// EVENTS\r\n\r\n\t\tonLogin: function(){\r\n\t\t\t////console.log(\"xmppSession::onLogin()\");\r\n\t\t\tthis.retrieveRoster();\r\n\t\t},\r\n\r\n\t\tonLoginFailure: function(msg){\r\n\t\t\t//console.log(\"xmppSession::onLoginFailure \", msg);\r\n\t\t},\r\n\r\n\t\tonBindResource: function(msg, hasSession){\r\n\t\t\t//console.log(\"xmppSession::onBindResource() \", msg);\r\n\r\n\t\t\tif (msg.getAttribute('type')=='result'){\r\n\t\t\t\t//console.log(\"xmppSession::onBindResource() Got Result Message\");\r\n\t\t\t\tif ((msg.hasChildNodes()) && (msg.firstChild.nodeName==\"bind\")){\r\n\t\t\t\t\tvar bindTag = msg.firstChild;\r\n\t\t\t\t\tif ((bindTag.hasChildNodes()) && (bindTag.firstChild.nodeName==\"jid\")){\r\n\t\t\t\t\t\tif (bindTag.firstChild.hasChildNodes()){\r\n\t\t\t\t\t\t\tvar fulljid = bindTag.firstChild.firstChild.nodeValue;\r\n\t\t\t\t\t\t\tthis.jid = this.getBareJid(fulljid);\r\n\t\t\t\t\t\t\tthis.resource = this.getResourceFromJid(fulljid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(hasSession){\r\n\t\t\t\t\t\tvar props = {\r\n\t\t\t\t\t\t\tid: this.getNextIqId(),\r\n\t\t\t\t\t\t\ttype: \"set\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tvar bindReq = new dojox.string.Builder(dojox.xmpp.util.createElement(\"iq\", props, false));\r\n\t\t\t\t\t\tbindReq.append(dojox.xmpp.util.createElement(\"session\", {xmlns: dojox.xmpp.xmpp.SESSION_NS}, true));\r\n\t\t\t\t\t\tbindReq.append(\"</iq>\");\r\n\r\n\t\t\t\t\t\tvar def = this.dispatchPacket(bindReq, \"iq\", props.id);\r\n\t\t\t\t\t\tdef.addCallback(this, \"onBindSession\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//console.log(\"xmppService::onBindResource() No Bind Element Found\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.onLogin();\r\n\r\n\t\t\t}else if(msg.getAttribute('type')=='error'){\r\n\t\t\t\t//console.log(\"xmppSession::onBindResource() Bind Error \", msg);\r\n\t\t\t\tvar err = this.processXmppError(msg);\r\n\t\t\t\tthis.onLoginFailure(err);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBindSession: function(msg){\r\n\t\t\tif(msg.getAttribute('type')=='error'){\r\n\t\t\t\t//console.log(\"xmppSession::onBindSession() Bind Error \", msg);\r\n\t\t\t\tvar err = this.processXmppError(msg);\r\n\t\t\t\tthis.onLoginFailure(err);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onLogin();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonSearchResults: function(results){\r\n\t\t\t//console.log(\"xmppSession::onSearchResult() \", results);\r\n\t\t},\r\n\r\n\t\tonRetrieveRoster: function(msg){\r\n\t\t\t////console.log(\"xmppService::onRetrieveRoster() \", arguments);\r\n\r\n\t\t\tif ((msg.getAttribute('type')=='result') && msg.hasChildNodes()){\r\n\t\t\t\tvar query = msg.getElementsByTagName('query')[0];\r\n\t\t\t\tif (query.getAttribute('xmlns')==\"jabber:iq:roster\"){\r\n\t\t\t\t\tfor (var i=0;i<query.childNodes.length;i++){\r\n\t\t\t\t\t\tif (query.childNodes[i].nodeName==\"item\"){\r\n\t\t\t\t\t\t\tthis.roster[i] = this.createRosterEntry(query.childNodes[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else if(msg.getAttribute('type')==\"error\"){\r\n\t\t\t\t//console.log(\"xmppService::storeRoster()  Error received on roster get\");\r\n\t\t\t}\r\n\r\n\t\t\t////console.log(\"Roster: \", this.roster);\r\n\t\t\tthis.setState(dojox.xmpp.xmpp.ACTIVE);\r\n\t\t\tthis.onRosterUpdated();\r\n\r\n\t\t\treturn msg;\r\n\t\t},\r\n\r\n\t\tonRosterUpdated: function() {},\r\n\r\n\t\tonSubscriptionRequest: function(req){},\r\n\r\n\t\tonPresenceUpdate: function(p){},\r\n\r\n\t\tonTransportReady: function(){\r\n\t\t\tthis.setState(dojox.xmpp.xmpp.CONNECTED);\r\n\t\t\tthis.rosterService = new dojox.xmpp.RosterService(this);\r\n\t\t\tthis.presenceService= new dojox.xmpp.PresenceService(this);\r\n\t\t\tthis.userService = new dojox.xmpp.UserService(this);\r\n\r\n\t\t\t////console.log(\"xmppSession::onTransportReady()\");\r\n\t\t},\r\n\r\n\t\tonTransportTerminate: function(newState, oldState, message){\r\n\t\t\tthis.setState(dojox.xmpp.xmpp.TERMINATE, message);\r\n\t\t},\r\n\r\n\t\tonConnected: function(){\r\n\t\t\t////console.log(\"xmppSession::onConnected()\");\r\n\t\t},\r\n\r\n\t\tonTerminate: function(newState, oldState, message){\r\n\t\t\t//console.log(\"xmppSession::onTerminate()\", newState, oldState, message);\r\n\t\t},\r\n\r\n\t\tonActive: function(){\r\n\t\t\t////console.log(\"xmppSession::onActive()\");\r\n\t\t\t//this.presenceService.publish({show: dojox.xmpp.presence.STATUS_ONLINE});\r\n\t\t},\r\n\r\n\t\tonRegisterChatInstance: function(chatInstance, message){\r\n\t\t\t////console.log(\"xmppSession::onRegisterChatInstance()\");\r\n\t\t},\r\n\r\n\t\tonRosterAdded: function(ri){},\r\n\t\tonRosterRemoved: function(ri){},\r\n\t\tonRosterChanged: function(ri, previousCopy){},\r\n\r\n\t\t//Utilities\r\n\r\n\t\tprocessXmppError: function(msg){\r\n\t\t\t////console.log(\"xmppSession::processXmppError() \", msg);\r\n\t\t\tvar err = {\r\n\t\t\t\tstanzaType: msg.nodeName,\r\n\t\t\t\tid: msg.getAttribute('id')\r\n\t\t\t};\r\n\r\n\t\t\tfor (var i=0; i<msg.childNodes.length; i++){\r\n\t\t\t\tvar n = msg.childNodes[i];\r\n\t\t\t\tswitch(n.nodeName){\r\n\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\terr.errorType = n.getAttribute('type');\r\n\t\t\t\t\t\tfor (var x=0; x< n.childNodes.length; x++){\r\n\t\t\t\t\t\t\tvar cn = n.childNodes[x];\r\n\t\t\t\t\t\t\tif ((cn.nodeName==\"text\") && (cn.getAttribute('xmlns') == dojox.xmpp.xmpp.STANZA_NS) && cn.hasChildNodes()) {\r\n\t\t\t\t\t\t\t\terr.message = cn.firstChild.nodeValue;\r\n\t\t\t\t\t\t\t} else if ((cn.getAttribute('xmlns') == dojox.xmpp.xmpp.STANZA_NS) &&(!cn.hasChildNodes())){\r\n\t\t\t\t\t\t\t\terr.condition = cn.nodeName;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn err;\r\n\t\t},\r\n\r\n\t\tsendStanzaError: function(stanzaType,to,id,errorType,condition,text){\r\n\t\t\t////console.log(\"xmppSession: sendStanzaError() \", arguments);\r\n\t\t\tvar req = {type:'error'};\r\n\t\t\tif (to) { req.to=to; }\r\n\t\t\tif (id) { req.id=id; }\r\n\r\n\t\t\tvar request = new dojox.string.Builder(dojox.xmpp.util.createElement(stanzaType,req,false));\r\n\t\t\trequest.append(dojox.xmpp.util.createElement('error',{type:errorType},false));\r\n\t\t\trequest.append(dojox.xmpp.util.createElement('condition',{xmlns:dojox.xmpp.xmpp.STANZA_NS},true));\r\n\r\n\t\t\tif(text){\r\n\t\t\t\tvar textAttr={\r\n\t\t\t\t\txmlns: dojox.xmpp.xmpp.STANZA_NS,\r\n\t\t\t\t\t\"xml:lang\":this.lang\r\n\t\t\t\t};\r\n\t\t\t\trequest.append(dojox.xmpp.util.createElement('text',textAttr,false));\r\n\t\t\t\trequest.append(text).append(\"</text>\");\r\n\t\t\t}\r\n\t\t\trequest.append(\"</error></\").append(stanzaType).append(\">\");\r\n\r\n\t\t\tthis.dispatchPacket(request.toString());\r\n\t\t},\r\n\r\n\t\tgetBareJid: function(jid){\r\n\t\t\tvar i = jid.indexOf('/');\r\n\t\t\tif (i != -1){\r\n\t\t\t\treturn jid.substring(0, i);\r\n\t\t\t}\r\n\t\t\treturn jid;\r\n\t\t},\r\n\r\n\t\tgetResourceFromJid: function(jid){\r\n\t\t\tvar i = jid.indexOf('/');\r\n\t\t\tif (i != -1){\r\n\t\t\t\treturn jid.substring((i + 1), jid.length);\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\r\n});\r\n"]}