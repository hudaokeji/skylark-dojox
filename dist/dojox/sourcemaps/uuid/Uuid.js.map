{"version":3,"sources":["uuid/Uuid.js"],"names":["define","dojo","uuid","dojox","Uuid","input","this","_uuidString","NIL_UUID","assert","isString","toLowerCase","isValid","ourGenerator","getGenerator","compare","uuidOne","uuidTwo","uuidStringOne","toString","uuidStringTwo","setGenerator","generator","isFunction","_ourGenerator","prototype","otherUuid","isEqual","getVariant","getVersion","_versionNumber","getNode","_nodeString","getTimestamp","returnType","String","Date","toUTCString","_timestampAsHexString","_timestampAsDate"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,WAAY,SAASC,EAAMC,GAoMtD,OAlMAC,MAAMD,KAAKE,KAAO,SAAqBC,GAetC,GADAC,KAAKC,YAAcJ,MAAMD,KAAKM,SAC3BH,EACFF,MAAMD,KAAKO,OAAOR,EAAKS,SAASL,IAChCC,KAAKC,YAAcF,EAAMM,cACzBR,MAAMD,KAAKO,OAAOH,KAAKM,eACnB,CACJ,IAAIC,EAAeV,MAAMD,KAAKE,KAAKU,eAChCD,IACFP,KAAKC,YAAcM,IACnBV,MAAMD,KAAKO,OAAOH,KAAKM,cAK1BT,MAAMD,KAAKE,KAAKW,QAAU,SAA6BC,EAA6BC,GAmBnF,IAAIC,EAAgBF,EAAQG,WACxBC,EAAgBH,EAAQE,WAC5B,OAAID,EAAgBE,EAAsB,EACtCF,EAAgBE,GAAuB,EACpC,GAGRjB,MAAMD,KAAKE,KAAKiB,aAAe,SAAuBC,GAMrDnB,MAAMD,KAAKO,QAAQa,GAAarB,EAAKsB,WAAWD,IAChDnB,MAAMD,KAAKE,KAAKoB,cAAgBF,GAGjCnB,MAAMD,KAAKE,KAAKU,aAAe,WAG9B,OAAOX,MAAMD,KAAKE,KAAKoB,eAGxBrB,MAAMD,KAAKE,KAAKqB,UAAUN,SAAW,WAIpC,OAAOb,KAAKC,aAGbJ,MAAMD,KAAKE,KAAKqB,UAAUV,QAAU,SAA6BW,GAOhE,OAAOvB,MAAMD,KAAKE,KAAKW,QAAQT,KAAMoB,IAGtCvB,MAAMD,KAAKE,KAAKqB,UAAUE,QAAU,SAA6BD,GAIhE,OAAmC,GAA3BpB,KAAKS,QAAQW,IAGtBvB,MAAMD,KAAKE,KAAKqB,UAAUb,QAAU,WAGnC,OAAOT,MAAMD,KAAKU,QAAQN,OAG3BH,MAAMD,KAAKE,KAAKqB,UAAUG,WAAa,WActC,OAAOzB,MAAMD,KAAK0B,WAAWtB,OAG9BH,MAAMD,KAAKE,KAAKqB,UAAUI,WAAa,WAatC,OAHIvB,KAAKwB,iBACRxB,KAAKwB,eAAiB3B,MAAMD,KAAK2B,WAAWvB,OAEtCA,KAAKwB,gBAGb3B,MAAMD,KAAKE,KAAKqB,UAAUM,QAAU,WAUnC,OAHKzB,KAAK0B,cACT1B,KAAK0B,YAAc7B,MAAMD,KAAK6B,QAAQzB,OAEhCA,KAAK0B,aAGb7B,MAAMD,KAAKE,KAAKqB,UAAUQ,aAAe,SAAqBC,GAmB7D,OADIA,IAAYA,EAAa,MACtBA,GACN,IAAK,SACL,KAAKC,OACJ,OAAO7B,KAAK2B,aAAaG,MAAMC,cAEhC,IAAK,MAMJ,OAHK/B,KAAKgC,wBACThC,KAAKgC,sBAAwBnC,MAAMD,KAAK+B,aAAa3B,KAAM,QAErDA,KAAKgC,sBAEb,KAAK,KACL,IAAK,OACL,KAAKF,KAKJ,OAHK9B,KAAKiC,mBACTjC,KAAKiC,iBAAmBpC,MAAMD,KAAK+B,aAAa3B,KAAM8B,OAEhD9B,KAAKiC,iBAEb,QAECpC,MAAMD,KAAKO,QAAO,EAAO,4EAA8EyB,KAKnG/B,MAAMD,KAAKE","file":"../../uuid/Uuid.js","sourcesContent":["define(['dojo/_base/lang', './_base'], function(dojo, uuid){\r\n\r\ndojox.uuid.Uuid = function(/*String?*/ input){\r\n\t// summary:\r\n\t//\t\tThis is the constructor for the Uuid class.  The Uuid class offers\r\n\t//\t\tmethods for inspecting existing UUIDs.\r\n\t// input: A 36-character string that conforms to the UUID spec.\r\n\t// examples:\r\n\t//\t\tvar uuid;\r\n\t//\t\tuuid = new dojox.uuid.Uuid(\"3b12f1df-5232-4804-897e-917bf397618a\");\r\n\t//\t\tuuid = new dojox.uuid.Uuid(); // \"00000000-0000-0000-0000-000000000000\"\r\n\t//\t\tuuid = new dojox.uuid.Uuid(dojox.uuid.generateRandomUuid());\r\n\t//\t\tuuid = new dojox.uuid.Uuid(dojox.uuid.generateTimeBasedUuid());\r\n\t//\t\tdojox.uuid.Uuid.setGenerator(dojox.uuid.generateRandomUuid);\r\n\t//\t\tuuid = new dojox.uuid.Uuid();\r\n\t//\t\tdojox.uuid.assert(!uuid.isEqual(dojox.uuid.NIL_UUID));\r\n\tthis._uuidString = dojox.uuid.NIL_UUID;\r\n\tif(input){\r\n\t\tdojox.uuid.assert(dojo.isString(input));\r\n\t\tthis._uuidString = input.toLowerCase();\r\n\t\tdojox.uuid.assert(this.isValid());\r\n\t}else{\r\n\t\tvar ourGenerator = dojox.uuid.Uuid.getGenerator();\r\n\t\tif(ourGenerator){\r\n\t\t\tthis._uuidString = ourGenerator();\r\n\t\t\tdojox.uuid.assert(this.isValid());\r\n\t\t}\r\n\t}\r\n};\r\n\r\ndojox.uuid.Uuid.compare = function(/*dojox.uuid.Uuid*/ uuidOne, /*dojox.uuid.Uuid*/ uuidTwo){\r\n\t// summary:\r\n\t//\t\tGiven two UUIDs to compare, this method returns 0, 1, or -1.\r\n\t// description:\r\n\t//\t\tThis method is designed to be used by sorting routines, like the\r\n\t//\t\tJavaScript built-in Array sort() method. This implementation is\r\n\t//\t\tintended to match the sample implementation in IETF RFC 4122:\r\n\t//\t\thttp://www.ietf.org/rfc/rfc4122.txt\r\n\t// uuidOne: Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.\r\n\t// uuidTwo: Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.\r\n\r\n\t// examples:\r\n\t//\t\tvar uuid;\r\n\t//\t\tvar generator = dojox.uuid.TimeBasedGenerator;\r\n\t//\t\tvar a = new dojox.uuid.Uuid(generator);\r\n\t//\t\tvar b = new dojox.uuid.Uuid(generator);\r\n\t//\t\tvar c = new dojox.uuid.Uuid(generator);\r\n\t//\t\tvar array = new Array(a, b, c);\r\n\t//\t\tarray.sort(dojox.uuid.Uuid.compare);\r\n\tvar uuidStringOne = uuidOne.toString();\r\n\tvar uuidStringTwo = uuidTwo.toString();\r\n\tif (uuidStringOne > uuidStringTwo) return 1;   // integer\r\n\tif (uuidStringOne < uuidStringTwo) return -1;  // integer\r\n\treturn 0; // integer (either 0, 1, or -1)\r\n};\r\n\r\ndojox.uuid.Uuid.setGenerator = function(/*Function?*/ generator){\r\n\t// summary:\r\n\t//\t\tSets the default generator, which will be used by the\r\n\t//\t\t\"new dojox.uuid.Uuid()\" constructor if no parameters\r\n\t//\t\tare passed in.\r\n\t// generator: A UUID generator function, such as dojox.uuid.generateTimeBasedUuid.\r\n\tdojox.uuid.assert(!generator || dojo.isFunction(generator));\r\n\tdojox.uuid.Uuid._ourGenerator = generator;\r\n};\r\n\r\ndojox.uuid.Uuid.getGenerator = function(){\r\n\t// summary:\r\n\t//\t\tReturns the default generator.  See setGenerator().\r\n\treturn dojox.uuid.Uuid._ourGenerator; // generator (A UUID generator, such as dojox.uuid.TimeBasedGenerator).\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.toString = function(){\r\n\t// summary:\r\n\t//\t\tThis method returns a standard 36-character string representing\r\n\t//\t\tthe UUID, such as \"3b12f1df-5232-4804-897e-917bf397618a\".\r\n\treturn this._uuidString; // string\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.compare = function(/*dojox.uuid.Uuid*/ otherUuid){\r\n\t// summary:\r\n\t//\t\tCompares this UUID to another UUID, and returns 0, 1, or -1.\r\n\t// description:\r\n\t//\t\tThis implementation is intended to match the sample implementation\r\n\t//\t\tin IETF RFC 4122: http://www.ietf.org/rfc/rfc4122.txt\r\n\t// otherUuid: Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.\r\n\treturn dojox.uuid.Uuid.compare(this, otherUuid); // integer (either 0, 1, or -1)\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.isEqual = function(/*dojox.uuid.Uuid*/ otherUuid){\r\n\t// summary:\r\n\t//\t\tReturns true if this UUID is equal to the otherUuid, or false otherwise.\r\n\t// otherUuid: Any object that has toString() method that returns a 36-character string that conforms to the UUID spec.\r\n\treturn (this.compare(otherUuid) == 0); // boolean\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.isValid = function(){\r\n\t// summary:\r\n\t//\t\tReturns true if the UUID was initialized with a valid value.\r\n\treturn dojox.uuid.isValid(this);\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.getVariant = function(){\r\n\t// summary:\r\n\t//\t\tReturns a variant code that indicates what type of UUID this is.\r\n\t//\t\tReturns one of the enumerated dojox.uuid.variant values.\r\n\r\n\t// example:\r\n\t//\t\tvar uuid = new dojox.uuid.Uuid(\"3b12f1df-5232-4804-897e-917bf397618a\");\r\n\t//\t\tvar variant = uuid.getVariant();\r\n\t//\t\tdojox.uuid.assert(variant == dojox.uuid.variant.DCE);\r\n\t// example:\r\n\t// | \"3b12f1df-5232-4804-897e-917bf397618a\"\r\n\t// |                     ^\r\n\t// |                     |\r\n\t// |         (variant \"10__\" == DCE)\r\n\treturn dojox.uuid.getVariant(this);\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.getVersion = function(){\r\n\t// summary:\r\n\t//\t\tReturns a version number that indicates what type of UUID this is.\r\n\t//\t\tReturns one of the enumerated dojox.uuid.version values.\r\n\t// example:\r\n\t//\t\tvar uuid = new dojox.uuid.Uuid(\"b4308fb0-86cd-11da-a72b-0800200c9a66\");\r\n\t//\t\tvar version = uuid.getVersion();\r\n\t//\t\tdojox.uuid.assert(version == dojox.uuid.version.TIME_BASED);\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a DCE Variant UUID.\r\n\tif(!this._versionNumber){\r\n\t\tthis._versionNumber = dojox.uuid.getVersion(this);\r\n\t}\r\n\treturn this._versionNumber; // dojox.uuid.version\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.getNode = function(){\r\n\t// summary:\r\n\t//\t\tIf this is a version 1 UUID (a time-based UUID), getNode() returns a\r\n\t//\t\t12-character string with the \"node\" or \"pseudonode\" portion of the UUID,\r\n\t//\t\twhich is the rightmost 12 characters.\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a version 1 UUID.\r\n\tif (!this._nodeString) {\r\n\t\tthis._nodeString = dojox.uuid.getNode(this);\r\n\t}\r\n\treturn this._nodeString; // String (a 12-character string, which will look something like \"917bf397618a\")\r\n};\r\n\r\ndojox.uuid.Uuid.prototype.getTimestamp = function(/*String?*/ returnType){\r\n\t// summary:\r\n\t//\t\tIf this is a version 1 UUID (a time-based UUID), this method returns\r\n\t//\t\tthe timestamp value encoded in the UUID.  The caller can ask for the\r\n\t//\t\ttimestamp to be returned either as a JavaScript Date object or as a\r\n\t//\t\t15-character string of hex digits.\r\n\t// returnType: Any of these five values: \"string\", String, \"hex\", \"date\", Date\r\n\t// returns:\r\n\t//\t\tReturns the timestamp value as a JavaScript Date object or a 15-character string of hex digits.\r\n\t// examples:\r\n\t//\t\tvar uuid = new dojox.uuid.Uuid(\"b4308fb0-86cd-11da-a72b-0800200c9a66\");\r\n\t//\t\tvar date, string, hexString;\r\n\t//\t\tdate   = uuid.getTimestamp();         // returns a JavaScript Date\r\n\t//\t\tdate   = uuid.getTimestamp(Date);     //\r\n\t//\t\tstring = uuid.getTimestamp(String);   // \"Mon, 16 Jan 2006 20:21:41 GMT\"\r\n\t//\t\thexString = uuid.getTimestamp(\"hex\"); // \"1da86cdb4308fb0\"\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a version 1 UUID.\r\n\tif(!returnType){returnType = null};\r\n\tswitch(returnType){\r\n\t\tcase \"string\":\r\n\t\tcase String:\r\n\t\t\treturn this.getTimestamp(Date).toUTCString(); // String (e.g. \"Mon, 16 Jan 2006 20:21:41 GMT\")\r\n\t\t\tbreak;\r\n\t\tcase \"hex\":\r\n\t\t\t// Return a 15-character string of hex digits containing the\r\n\t\t\t// timestamp for this UUID, with the high-order bits first.\r\n\t\t\tif (!this._timestampAsHexString) {\r\n\t\t\t\tthis._timestampAsHexString = dojox.uuid.getTimestamp(this, \"hex\");\r\n\t\t\t}\r\n\t\t\treturn this._timestampAsHexString; // String (e.g. \"1da86cdb4308fb0\")\r\n\t\t\tbreak;\r\n\t\tcase null: // no returnType was specified, so default to Date\r\n\t\tcase \"date\":\r\n\t\tcase Date:\r\n\t\t\t// Return a JavaScript Date object.\r\n\t\t\tif (!this._timestampAsDate) {\r\n\t\t\t\tthis._timestampAsDate = dojox.uuid.getTimestamp(this, Date);\r\n\t\t\t}\r\n\t\t\treturn this._timestampAsDate; // Date\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// we got passed something other than a valid returnType\r\n\t\t\tdojox.uuid.assert(false, \"The getTimestamp() method dojox.uuid.Uuid was passed a bogus returnType: \" + returnType);\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nreturn dojox.uuid.Uuid;\r\n\r\n});\r\n"]}