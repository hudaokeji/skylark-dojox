{"version":3,"sources":["uuid/_base.js"],"names":["define","dojo","getObject","dojox","uuid","NIL_UUID","version","UNKNOWN","TIME_BASED","DCE_SECURITY","NAME_BASED_MD5","RANDOM","NAME_BASED_SHA1","variant","NCS","DCE","MICROSOFT","assert","booleanValue","message","Error","generateNilUuid","isValid","uuidString","toString","valid","isString","length","toLowerCase","arrayOfParts","split","i","part","integer","parseInt","isFinite","getVariant","_ourVariantLookupTable","lookupTable","variantCharacter","charAt","variantNumber","getVersion","versionCharacter","getNode","getTimestamp","returnType","String","Date","toUTCString","arrayOfStrings","hexTimeLow","hexTimeMid","hexTimeHigh","timestampAsHexString","slice","timeLow","timeMid","hundredNanosecondIntervalsSince1582","secondsBetween1582and1970"],"mappings":"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","file":"../../uuid/_base.js","sourcesContent":["define(['dojo/_base/kernel', 'dojo/_base/lang'], function(dojo){\r\n\r\ndojo.getObject(\"uuid\", true, dojox);\r\n\r\n// Public constants:\r\ndojox.uuid.NIL_UUID = \"00000000-0000-0000-0000-000000000000\";\r\ndojox.uuid.version = {\r\n\t//\tEnumeration for the different UUID versions.\r\n\tUNKNOWN: 0,\r\n\tTIME_BASED: 1,\r\n\tDCE_SECURITY: 2,\r\n\tNAME_BASED_MD5: 3,\r\n\tRANDOM: 4,\r\n\tNAME_BASED_SHA1: 5 };\r\ndojox.uuid.variant = {\r\n\t//\tEnumeration for the different UUID variants.\r\n\tNCS: \"0\",\r\n\tDCE: \"10\",\r\n\tMICROSOFT: \"110\",\r\n\tUNKNOWN: \"111\" };\r\n\r\ndojox.uuid.assert = function(/*Boolean*/ booleanValue, /*String?*/ message){\r\n\t// summary:\r\n\t//\t\tThrows an exception if the assertion fails.\r\n\t// description:\r\n\t//\t\tIf the asserted condition is true, this method does nothing. If the\r\n\t//\t\tcondition is false, we throw an error with a error message.\r\n\t// booleanValue: Must be true for the assertion to succeed.\r\n\t// message: A string describing the assertion.\r\n\t// throws: Throws an Error if 'booleanValue' is false.\r\n\tif(!booleanValue){\r\n\t\tif(!message){\r\n\t\t\tmessage = \"An assert statement failed.\\n\" +\r\n\t\t\t\"The method dojox.uuid.assert() was called with a 'false' value.\\n\";\r\n\t\t}\r\n\t\tthrow new Error(message);\r\n\t}\r\n};\r\n\r\ndojox.uuid.generateNilUuid = function(){\r\n\t// summary:\r\n\t//\t\tThis function returns the Nil UUID: \"00000000-0000-0000-0000-000000000000\".\r\n\t// description:\r\n\t//\t\tThe Nil UUID is described in section 4.1.7 of\r\n\t//\t\tRFC 4122: http://tools.ietf.org/html/rfc4122#section-4.1.7\r\n\t// examples:\r\n\t//\t\tvar string = dojox.uuid.generateNilUuid();\r\n\treturn dojox.uuid.NIL_UUID; // String\r\n};\r\n\r\ndojox.uuid.isValid = function(/*String*/ uuidString){\r\n\t// summary:\r\n\t//\t\tReturns true if the UUID was initialized with a valid value.\r\n\tuuidString = uuidString.toString();\r\n\tvar valid = (dojo.isString(uuidString) &&\r\n\t\t(uuidString.length == 36) &&\r\n\t\t(uuidString == uuidString.toLowerCase()));\r\n\tif(valid){\r\n\t\tvar arrayOfParts = uuidString.split(\"-\");\r\n\t\tvalid = ((arrayOfParts.length == 5) &&\r\n\t\t\t(arrayOfParts[0].length == 8) &&\r\n\t\t\t(arrayOfParts[1].length == 4) &&\r\n\t\t\t(arrayOfParts[2].length == 4) &&\r\n\t\t\t(arrayOfParts[3].length == 4) &&\r\n\t\t\t(arrayOfParts[4].length == 12));\r\n\t\tvar HEX_RADIX = 16;\r\n\t\tfor (var i in arrayOfParts) {\r\n\t\t\tvar part = arrayOfParts[i];\r\n\t\t\tvar integer = parseInt(part, HEX_RADIX);\r\n\t\t\tvalid = valid && isFinite(integer);\r\n\t\t}\r\n\t}\r\n\treturn valid; // boolean\r\n};\r\n\r\ndojox.uuid.getVariant = function(/*String*/ uuidString){\r\n\t// summary:\r\n\t//\t\tReturns a variant code that indicates what type of UUID this is.\r\n\t//\t\tReturns one of the enumerated dojox.uuid.variant values.\r\n\t// example:\r\n\t//\t\tvar variant = dojox.uuid.getVariant(\"3b12f1df-5232-4804-897e-917bf397618a\");\r\n\t//\t\tdojox.uuid.assert(variant == dojox.uuid.variant.DCE);\r\n\t// example:\r\n\t//\t|\t\"3b12f1df-5232-4804-897e-917bf397618a\"\r\n\t//\t|                   ^\r\n\t//\t|                   |\r\n\t//\t|       (variant \"10__\" == DCE)\r\n\tif(!dojox.uuid._ourVariantLookupTable){\r\n\t\tvar variant = dojox.uuid.variant;\r\n\t\tvar lookupTable = [];\r\n\r\n\t\tlookupTable[0x0] = variant.NCS;       // 0000\r\n\t\tlookupTable[0x1] = variant.NCS;       // 0001\r\n\t\tlookupTable[0x2] = variant.NCS;       // 0010\r\n\t\tlookupTable[0x3] = variant.NCS;       // 0011\r\n\r\n\t\tlookupTable[0x4] = variant.NCS;       // 0100\r\n\t\tlookupTable[0x5] = variant.NCS;       // 0101\r\n\t\tlookupTable[0x6] = variant.NCS;       // 0110\r\n\t\tlookupTable[0x7] = variant.NCS;       // 0111\r\n\r\n\t\tlookupTable[0x8] = variant.DCE;       // 1000\r\n\t\tlookupTable[0x9] = variant.DCE;       // 1001\r\n\t\tlookupTable[0xA] = variant.DCE;       // 1010\r\n\t\tlookupTable[0xB] = variant.DCE;       // 1011\r\n\r\n\t\tlookupTable[0xC] = variant.MICROSOFT; // 1100\r\n\t\tlookupTable[0xD] = variant.MICROSOFT; // 1101\r\n\t\tlookupTable[0xE] = variant.UNKNOWN;   // 1110\r\n\t\tlookupTable[0xF] = variant.UNKNOWN;   // 1111\r\n\t\t\r\n\t\tdojox.uuid._ourVariantLookupTable = lookupTable;\r\n\t}\r\n\r\n\tuuidString = uuidString.toString();\r\n\tvar variantCharacter = uuidString.charAt(19);\r\n\tvar HEX_RADIX = 16;\r\n\tvar variantNumber = parseInt(variantCharacter, HEX_RADIX);\r\n\tdojox.uuid.assert((variantNumber >= 0) && (variantNumber <= 16));\r\n\treturn dojox.uuid._ourVariantLookupTable[variantNumber]; // dojox.uuid.variant\r\n};\r\n\r\ndojox.uuid.getVersion = function(/*String*/ uuidString){\r\n\t// summary:\r\n\t//\t\tReturns a version number that indicates what type of UUID this is.\r\n\t//\t\tReturns one of the enumerated dojox.uuid.version values.\r\n\t// example:\r\n\t//\t\tvar version = dojox.uuid.getVersion(\"b4308fb0-86cd-11da-a72b-0800200c9a66\");\r\n\t//\t\tdojox.uuid.assert(version == dojox.uuid.version.TIME_BASED);\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a DCE Variant UUID.\r\n\tvar errorMessage = \"dojox.uuid.getVersion() was not passed a DCE Variant UUID.\";\r\n\tdojox.uuid.assert(dojox.uuid.getVariant(uuidString) == dojox.uuid.variant.DCE, errorMessage);\r\n\tuuidString = uuidString.toString();\r\n\t\r\n\t\t// \"b4308fb0-86cd-11da-a72b-0800200c9a66\"\r\n\t\t//\t\t\t      ^\r\n\t\t//\t\t\t      |\r\n\t\t//\t\t (version 1 == TIME_BASED)\r\n\tvar versionCharacter = uuidString.charAt(14);\r\n\tvar HEX_RADIX = 16;\r\n\tvar versionNumber = parseInt(versionCharacter, HEX_RADIX);\r\n\treturn versionNumber; // dojox.uuid.version\r\n};\r\n\r\ndojox.uuid.getNode = function(/*String*/ uuidString){\r\n\t// summary:\r\n\t//\t\tIf this is a version 1 UUID (a time-based UUID), getNode() returns a\r\n\t//\t\t12-character string with the \"node\" or \"pseudonode\" portion of the UUID,\r\n\t//\t\twhich is the rightmost 12 characters.\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a version 1 UUID.\r\n\tvar errorMessage = \"dojox.uuid.getNode() was not passed a TIME_BASED UUID.\";\r\n\tdojox.uuid.assert(dojox.uuid.getVersion(uuidString) == dojox.uuid.version.TIME_BASED, errorMessage);\r\n\r\n\tuuidString = uuidString.toString();\r\n\tvar arrayOfStrings = uuidString.split('-');\r\n\tvar nodeString = arrayOfStrings[4];\r\n\treturn nodeString; // String (a 12-character string, which will look something like \"917bf397618a\")\r\n};\r\n\r\ndojox.uuid.getTimestamp = function(/*String*/ uuidString, /*String?*/ returnType){\r\n\t// summary:\r\n\t//\t\tIf this is a version 1 UUID (a time-based UUID), this method returns\r\n\t//\t\tthe timestamp value encoded in the UUID.  The caller can ask for the\r\n\t//\t\ttimestamp to be returned either as a JavaScript Date object or as a\r\n\t//\t\t15-character string of hex digits.\r\n\t// returnType:\r\n\t//\t\tAny of these five values: \"string\", String, \"hex\", \"date\", Date\r\n\t// returns:\r\n\t//\t\tReturns the timestamp value as a JavaScript Date object or a 15-character string of hex digits.\r\n\t// examples:\r\n\t//\t\tvar uuidString = \"b4308fb0-86cd-11da-a72b-0800200c9a66\";\r\n\t//\t\tvar date, string, hexString;\r\n\t//\t\tdate   = dojox.uuid.getTimestamp(uuidString);         // returns a JavaScript Date\r\n\t//\t\tdate   = dojox.uuid.getTimestamp(uuidString, Date);     //\r\n\t//\t\tstring = dojox.uuid.getTimestamp(uuidString, String);   // \"Mon, 16 Jan 2006 20:21:41 GMT\"\r\n\t//\t\thexString = dojox.uuid.getTimestamp(uuidString, \"hex\"); // \"1da86cdb4308fb0\"\r\n\t// exceptions:\r\n\t//\t\tThrows an Error if this is not a version 1 UUID.\r\n\tvar errorMessage = \"dojox.uuid.getTimestamp() was not passed a TIME_BASED UUID.\";\r\n\tdojox.uuid.assert(dojox.uuid.getVersion(uuidString) == dojox.uuid.version.TIME_BASED, errorMessage);\r\n\t\r\n\tuuidString = uuidString.toString();\r\n\tif(!returnType){returnType = null};\r\n\tswitch(returnType){\r\n\t\tcase \"string\":\r\n\t\tcase String:\r\n\t\t\treturn dojox.uuid.getTimestamp(uuidString, Date).toUTCString(); // String (e.g. \"Mon, 16 Jan 2006 20:21:41 GMT\")\r\n\t\t\tbreak;\r\n\t\tcase \"hex\":\r\n\t\t\t// Return a 15-character string of hex digits containing the\r\n\t\t\t// timestamp for this UUID, with the high-order bits first.\r\n\t\t\tvar arrayOfStrings = uuidString.split('-');\r\n\t\t\tvar hexTimeLow = arrayOfStrings[0];\r\n\t\t\tvar hexTimeMid = arrayOfStrings[1];\r\n\t\t\tvar hexTimeHigh = arrayOfStrings[2];\r\n\t\t\r\n\t\t\t// Chop off the leading \"1\" character, which is the UUID\r\n\t\t\t// version number for time-based UUIDs.\r\n\t\t\thexTimeHigh = hexTimeHigh.slice(1);\r\n\t\t\r\n\t\t\tvar timestampAsHexString = hexTimeHigh + hexTimeMid + hexTimeLow;\r\n\t\t\tdojox.uuid.assert(timestampAsHexString.length == 15);\r\n\t\t\treturn timestampAsHexString; // String (e.g. \"1da86cdb4308fb0\")\r\n\t\t\tbreak;\r\n\t\tcase null: // no returnType was specified, so default to Date\r\n\t\tcase \"date\":\r\n\t\tcase Date:\r\n\t\t\t// Return a JavaScript Date object.\r\n\t\t\tvar GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;\r\n\t\t\tvar HEX_RADIX = 16;\r\n\t\t\r\n\t\t\tvar arrayOfParts = uuidString.split('-');\r\n\t\t\tvar timeLow = parseInt(arrayOfParts[0], HEX_RADIX);\r\n\t\t\tvar timeMid = parseInt(arrayOfParts[1], HEX_RADIX);\r\n\t\t\tvar timeHigh = parseInt(arrayOfParts[2], HEX_RADIX);\r\n\t\t\tvar hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;\r\n\t\t\thundredNanosecondIntervalsSince1582 <<= 16;\r\n\t\t\thundredNanosecondIntervalsSince1582 += timeMid;\r\n\t\t\t// What we really want to do next is shift left 32 bits, but the\r\n\t\t\t// result will be too big to fit in an int, so we'll multiply by 2^32,\r\n\t\t\t// and the result will be a floating point approximation.\r\n\t\t\thundredNanosecondIntervalsSince1582 *= 0x100000000;\r\n\t\t\thundredNanosecondIntervalsSince1582 += timeLow;\r\n\t\t\tvar millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;\r\n\t\t\r\n\t\t\t// Again, this will be a floating point approximation.\r\n\t\t\t// We can make things exact later if we need to.\r\n\t\t\tvar secondsPerHour = 60 * 60;\r\n\t\t\tvar hoursBetween1582and1970 = GREGORIAN_CHANGE_OFFSET_IN_HOURS;\r\n\t\t\tvar secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;\r\n\t\t\tvar millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;\r\n\t\t\tvar millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;\r\n\t\t\r\n\t\t\tvar timestampAsDate = new Date(millisecondsSince1970);\r\n\t\t\treturn timestampAsDate; // Date\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// we got passed something other than a valid returnType\r\n\t\t\tdojox.uuid.assert(false, \"dojox.uuid.getTimestamp was not passed a valid returnType: \" + returnType);\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nreturn dojox.uuid;\r\n\r\n});\r\n"]}