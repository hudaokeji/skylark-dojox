{"version":3,"sources":["uuid/tests/uuid.js"],"names":["define","doh","dojo","dxuuid","Uuid","generateRandomUuid","generateTimeBasedUuid","checkValidityOfUuidString","uuidString","assertTrue","length","character","position","i","charAt","indexOf","arrayOfParts","split","section3","binaryString","parseInt","toString","checkValidityOfTimeBasedUuidString","section2","checkForPseudoNodeBitInTimeBasedUuidString","firstBit","firstChar","register","uuidRL","uuidRU","uuidTL","uuidTU","isEqual","uuid","uuidToo","isValid","getVariant","variant","DCE","getVersion","version","RANDOM","String","TIME_BASED","getNode","timestamp","getTimestamp","date","Date","hexString","now","valueOf","generators","generateNilUuid","generator","compare","uuidStringOne","uuidStringTwo","setGenerator","uuidOne","uuidTwo","getGenerator","oneVsTwo","twoVsOne","isString","string1","uuid2","string3","string4","string5","setNode","string6","uuid7","returnedNode","string","uuidStrings","push","numberOfFailures","e"],"mappings":"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","file":"../../../uuid/tests/uuid.js","sourcesContent":["define(['doh', 'dojo/_base/lang', '../_base', '../Uuid', '../generateRandomUuid', '../generateTimeBasedUuid'], function(doh, dojo, dxuuid, Uuid, generateRandomUuid, generateTimeBasedUuid){\r\n\r\nvar checkValidityOfUuidString = function(/*String*/uuidString){\r\n\t// summary:\r\n\t//\t\tA helper function that's used by the registered test functions\r\n\tvar NIL_UUID = \"00000000-0000-0000-0000-000000000000\";\r\n\tif (uuidString == NIL_UUID) {\r\n\t\t// We'll consider the Nil UUID to be valid, so now\r\n\t\t// we can just return, with not further checks.\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tdoh.assertTrue(uuidString.length == 36); // UUIDs have 36 characters\r\n\r\n\tvar validCharacters = \"0123456789abcedfABCDEF-\";\r\n\tvar character;\r\n\tvar position;\r\n\tfor(var i = 0; i < 36; ++i){\r\n\t\tcharacter = uuidString.charAt(i);\r\n\t\tposition = validCharacters.indexOf(character);\r\n\t\tdoh.assertTrue(position != -1); // UUIDs have only valid characters\r\n\t}\r\n\r\n\tvar arrayOfParts = uuidString.split(\"-\");\r\n\tdoh.assertTrue(arrayOfParts.length == 5); // UUIDs have 5 sections separated by 4 hyphens\r\n\tdoh.assertTrue(arrayOfParts[0].length == 8); // Section 0 has 8 characters\r\n\tdoh.assertTrue(arrayOfParts[1].length == 4); // Section 1 has 4 characters\r\n\tdoh.assertTrue(arrayOfParts[2].length == 4); // Section 2 has 4 characters\r\n\tdoh.assertTrue(arrayOfParts[3].length == 4); // Section 3 has 4 characters\r\n\tdoh.assertTrue(arrayOfParts[4].length == 12); // Section 4 has 8 characters\r\n\r\n\t// check to see that the \"UUID variant code\" starts with the binary bits '10'\r\n\tvar section3 = arrayOfParts[3];\r\n\tvar HEX_RADIX = 16;\r\n\tvar hex3 = parseInt(section3, HEX_RADIX);\r\n\tvar binaryString = hex3.toString(2);\r\n\t// alert(\"section3 = \" + section3 + \"\\n binaryString = \" + binaryString);\r\n\tdoh.assertTrue(binaryString.length == 16); // section 3 has 16 bits\r\n\tdoh.assertTrue(binaryString.charAt(0) == '1'); // first bit of section 3 is 1\r\n\tdoh.assertTrue(binaryString.charAt(1) == '0'); // second bit of section 3 is 0\r\n}\r\n\r\nvar checkValidityOfTimeBasedUuidString = function(/*String*/uuidString){\r\n\t// summary:\r\n\t//\t\tA helper function that's used by the registered test functions\r\n\tcheckValidityOfUuidString(uuidString);\r\n\tvar arrayOfParts = uuidString.split(\"-\");\r\n\tvar section2 = arrayOfParts[2];\r\n\tdoh.assertTrue(section2.charAt(0) == \"1\"); // Section 2 starts with a 1\r\n}\r\n\r\nvar checkForPseudoNodeBitInTimeBasedUuidString = function(/*String*/uuidString){\r\n\t// summary:\r\n\t//\t\tA helper function that's used by the registered test functions\r\n\tvar arrayOfParts = uuidString.split(\"-\");\r\n\tvar section4 = arrayOfParts[4];\r\n\tvar firstChar = section4.charAt(0);\r\n\tvar HEX_RADIX = 16;\r\n\tvar hexFirstChar = parseInt(firstChar, HEX_RADIX);\r\n\tvar binaryString = hexFirstChar.toString(2);\r\n\tvar firstBit;\r\n\tif(binaryString.length == 4){\r\n\t\tfirstBit = binaryString.charAt(0);\r\n\t}else{\r\n\t\tfirstBit = '0';\r\n\t}\r\n\tdoh.assertTrue(firstBit == '1'); // first bit of section 4 is 1\r\n}\r\n\r\ndoh.register(\"dojox.uuid.tests.uuid\",\r\n\t[\r\n\t\t/*\r\n\t\tfunction test_uuid_performance(){\r\n\t\t\tvar start = new Date();\r\n\t\t\tvar startMS = start.valueOf();\r\n\t\t\tvar nowMS = startMS;\r\n\t\t\tvar i;\r\n\t\t\tvar now;\r\n\t\t\tvar numTrials = 100000;\r\n\t\t\r\n\t\t\twhile(nowMS == startMS){\r\n\t\t\t\tnow = new Date();\r\n\t\t\t\tnowMS = now.valueOf();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tstartMS = nowMS;\r\n\t\t\tfor(i = 0; i < numTrials; ++i){\r\n\t\t\t\tvar a = dojox.uuid.LightweightGenerator.generate();\r\n\t\t\t}\r\n\t\t\tnow = new Date();\r\n\t\t\tnowMS = now.valueOf();\r\n\t\t\tvar elapsedMS = nowMS - startMS;\r\n\t\t\t// dojo.log.debug(\"created \" + numTrials + \" UUIDs in \" + elapsedMS + \" milliseconds\");\r\n\t\t},\r\n\t\t*/\r\n\r\n\t\tfunction test_uuid_capitalization(){\r\n\t\t\tvar randomLowercaseString = \"3b12f1df-5232-4804-897e-917bf397618a\";\r\n\t\t\tvar randomUppercaseString = \"3B12F1DF-5232-4804-897E-917BF397618A\";\r\n\t\t\t\r\n\t\t\tvar timebasedLowercaseString = \"b4308fb0-86cd-11da-a72b-0800200c9a66\";\r\n\t\t\tvar timebasedUppercaseString = \"B4308FB0-86CD-11DA-A72B-0800200C9A66\";\r\n\t\t\t\r\n\t\t\tvar uuidRL = new Uuid(randomLowercaseString);\r\n\t\t\tvar uuidRU = new Uuid(randomUppercaseString);\r\n\t\t\t\r\n\t\t\tvar uuidTL = new Uuid(timebasedLowercaseString);\r\n\t\t\tvar uuidTU = new Uuid(timebasedUppercaseString);\r\n\t\t\t\r\n\t\t\tdoh.assertTrue(uuidRL.isEqual(uuidRU));\r\n\t\t\tdoh.assertTrue(uuidRU.isEqual(uuidRL));\r\n\t\t\t\r\n\t\t\tdoh.assertTrue(uuidTL.isEqual(uuidTU));\r\n\t\t\tdoh.assertTrue(uuidTU.isEqual(uuidTL));\r\n\t\t},\r\n\t\r\n\t\tfunction test_uuid_constructor(){\r\n\t\t\tvar uuid, uuidToo;\r\n\t\t\t\r\n\t\t\tvar nilUuid = '00000000-0000-0000-0000-000000000000';\r\n\t\t\tuuid = new Uuid();\r\n\t\t\tdoh.assertTrue(uuid == nilUuid); // 'new dojox.uuid.Uuid()' returns the Nil UUID\r\n\t\t\t\r\n\t\t\tvar randomUuidString = \"3b12f1df-5232-4804-897e-917bf397618a\";\r\n\t\t\tuuid = new Uuid(randomUuidString);\r\n\t\t\tdoh.assertTrue(uuid.isValid());\r\n\t\t\tdoh.assertTrue(uuid.getVariant() == dxuuid.variant.DCE);\r\n\t\t\tdoh.assertTrue(uuid.getVersion() == dxuuid.version.RANDOM);\r\n\t\t\tuuidToo = new Uuid(new String(randomUuidString));\r\n\t\t\tdoh.assertTrue(uuid.isEqual(uuidToo));\r\n\t\t\r\n\t\t\tvar timeBasedUuidString = \"b4308fb0-86cd-11da-a72b-0800200c9a66\";\r\n\t\t\tuuid = new Uuid(timeBasedUuidString);\r\n\t\t\tdoh.assertTrue(uuid.isValid());\r\n\t\t\tdoh.assertTrue(uuid.getVariant() == dxuuid.variant.DCE);\r\n\t\t\tdoh.assertTrue(uuid.getVersion() == dxuuid.version.TIME_BASED);\r\n\t\t\tdoh.assertTrue(uuid.getNode() == \"0800200c9a66\");\r\n\t\t\tvar timestamp = uuid.getTimestamp();\r\n\t\t\tvar date = uuid.getTimestamp(Date);\r\n\t\t\tvar dateString = uuid.getTimestamp(String);\r\n\t\t\tvar hexString = uuid.getTimestamp(\"hex\");\r\n\t\t\tvar now = new Date();\r\n\t\t\tdoh.assertTrue(timestamp.valueOf() == date.valueOf());\r\n\t\t\tdoh.assertTrue(hexString == \"1da86cdb4308fb0\");\r\n\t\t\tdoh.assertTrue(timestamp < now);\r\n\t\t},\r\n\t\t\r\n\t\tfunction test_uuid_generators(){\r\n\t\t\tvar generators = [\r\n\t\t\t\tdxuuid.generateNilUuid,\r\n\t\t\t\tgenerateRandomUuid,\r\n\t\t\t\tgenerateTimeBasedUuid\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\tfor(var i in generators){\r\n\t\t\t\tvar generator = generators[i];\r\n\t\t\t\tvar uuidString = generator();\r\n\r\n\t\t\t\tdoh.assertTrue((typeof uuidString) == 'string');\r\n\t\t\t\tcheckValidityOfUuidString(uuidString);\r\n\r\n\t\t\t\tvar uuid = new Uuid(uuidString);\r\n\t\t\t\tif(generator != dxuuid.generateNilUuid){\r\n\t\t\t\t\tdoh.assertTrue(uuid.getVariant() == dxuuid.variant.DCE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdoh.assertTrue(uuid.isEqual(uuid));\r\n\t\t\t\tdoh.assertTrue(uuid.compare(uuid) == 0);\r\n\t\t\t\tdoh.assertTrue(Uuid.compare(uuid, uuid) == 0);\r\n\t\t\t\tcheckValidityOfUuidString(uuid.toString());\r\n\t\t\t\tdoh.assertTrue(uuid.toString().length == 36);\r\n\t\t\r\n\t\t\t\tif(generator != dxuuid.generateNilUuid){\r\n\t\t\t\t\tvar uuidStringOne = generator();\r\n\t\t\t\t\tvar uuidStringTwo = generator();\r\n\t\t\t\t\tdoh.assertTrue(uuidStringOne != uuidStringTwo);\r\n\t\t\t\t\t\r\n\t\t\t\t\tUuid.setGenerator(generator);\r\n\t\t\t\t\tvar uuidOne = new Uuid();\r\n\t\t\t\t\tvar uuidTwo = new Uuid();\r\n\t\t\t\t\tdoh.assertTrue(generator === Uuid.getGenerator());\r\n\t\t\t\t\tUuid.setGenerator(null);\r\n\t\t\t\t\tdoh.assertTrue(uuidOne != uuidTwo);\r\n\t\t\t\t\tdoh.assertTrue(!uuidOne.isEqual(uuidTwo));\r\n\t\t\t\t\tdoh.assertTrue(!uuidTwo.isEqual(uuidOne));\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar oneVsTwo = Uuid.compare(uuidOne, uuidTwo); // either 1 or -1\r\n\t\t\t\t\tvar twoVsOne = Uuid.compare(uuidTwo, uuidOne); // either -1 or 1\r\n\t\t\t\t\tdoh.assertTrue(oneVsTwo + twoVsOne == 0);\r\n\t\t\t\t\tdoh.assertTrue(oneVsTwo != 0);\r\n\t\t\t\t\tdoh.assertTrue(twoVsOne != 0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tdoh.assertTrue(!uuidTwo.isEqual(uuidOne));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(generator == generateRandomUuid){\r\n\t\t\t\t\tdoh.assertTrue(uuid.getVersion() == dxuuid.version.RANDOM);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(generator == generateTimeBasedUuid){\r\n\t\t\t\t\tcheckValidityOfTimeBasedUuidString(uuid.toString());\r\n\t\t\t\t\tdoh.assertTrue(uuid.getVersion() == dxuuid.version.TIME_BASED);\r\n\t\t\t\t\tdoh.assertTrue(dojo.isString(uuid.getNode()));\r\n\t\t\t\t\tdoh.assertTrue(uuid.getNode().length == 12);\r\n\t\t\t\t\tvar timestamp = uuid.getTimestamp();\r\n\t\t\t\t\tvar date = uuid.getTimestamp(Date);\r\n\t\t\t\t\tvar dateString = uuid.getTimestamp(String);\r\n\t\t\t\t\tvar hexString = uuid.getTimestamp(\"hex\");\r\n\t\t\t\t\tdoh.assertTrue(date instanceof Date);\r\n\t\t\t\t\tdoh.assertTrue(timestamp.valueOf() == date.valueOf());\r\n\t\t\t\t\tdoh.assertTrue(hexString.length == 15);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\tfunction test_uuid_nilGenerator(){\r\n\t\t\tvar nilUuidString = '00000000-0000-0000-0000-000000000000';\r\n\t\t\tvar uuidString = dxuuid.generateNilUuid();\r\n\t\t\tdoh.assertTrue(uuidString == nilUuidString);\r\n\t\t},\r\n\t\t\r\n\t\tfunction test_uuid_timeBasedGenerator(){\r\n\t\t\tvar uuid;   // an instance of dojox.uuid.Uuid\r\n\t\t\tvar string; // a simple string literal\r\n\t\t\tvar generator = generateTimeBasedUuid;\r\n\r\n\t\t\tvar string1 = generator();\r\n\t\t\tvar uuid2    = new Uuid(generator());\r\n\t\t\tvar string3 = generator(\"017bf397618a\");         // hardwareNode\r\n\t\t\tvar string4 = generator(\"f17bf397618a\");         // pseudoNode\r\n\t\t\tvar string5 = generator(new String(\"017BF397618A\"));\r\n\t\t\t\r\n\t\t\tgenerateTimeBasedUuid.setNode(\"017bf397618a\");\r\n\t\t\tvar string6 = generator(); // the generated UUID has node == \"017bf397618a\"\r\n\t\t\tvar uuid7   = new Uuid(generator()); // the generated UUID has node == \"017bf397618a\"\r\n\t\t\tvar returnedNode = generateTimeBasedUuid.getNode();\r\n\t\t\tdoh.assertTrue(returnedNode == \"017bf397618a\");\r\n\t\t\r\n\t\t\tfunction getNode(string){\r\n\t\t\t\tvar arrayOfStrings = string.split('-');\r\n\t\t\t\treturn arrayOfStrings[4];\r\n\t\t\t}\r\n\t\t\tcheckForPseudoNodeBitInTimeBasedUuidString(string1);\r\n\t\t\tcheckForPseudoNodeBitInTimeBasedUuidString(uuid2.toString());\r\n\t\t\tcheckForPseudoNodeBitInTimeBasedUuidString(string4);\r\n\t\t\t\r\n\t\t\tdoh.assertTrue(getNode(string3) == \"017bf397618a\");\r\n\t\t\tdoh.assertTrue(getNode(string4) == \"f17bf397618a\");\r\n\t\t\tdoh.assertTrue(getNode(string5) == \"017bf397618a\");\r\n\t\t\tdoh.assertTrue(getNode(string6) == \"017bf397618a\");\r\n\t\t\tdoh.assertTrue(uuid7.getNode() == \"017bf397618a\");\r\n\t\t\t\r\n\t\t\tcheckValidityOfTimeBasedUuidString(string1);\r\n\t\t\tcheckValidityOfTimeBasedUuidString(uuid2.toString());\r\n\t\t\tcheckValidityOfTimeBasedUuidString(string3);\r\n\t\t\tcheckValidityOfTimeBasedUuidString(string4);\r\n\t\t\tcheckValidityOfTimeBasedUuidString(string5);\r\n\t\t\tcheckValidityOfTimeBasedUuidString(string6);\r\n\t\t\tcheckValidityOfTimeBasedUuidString(uuid7.toString());\r\n\t\t},\r\n\r\n\t\tfunction test_uuid_invalidUuids(){\r\n\t\t\tvar uuidStrings = [];\r\n\t\t\tuuidStrings.push(\"Hello world!\");                          // not a UUID\r\n\t\t\tuuidStrings.push(\"3B12F1DF-5232-1804-897E-917BF39761\");    // too short\r\n\t\t\tuuidStrings.push(\"3B12F1DF-5232-1804-897E-917BF39761-8A\"); // extra '-'\r\n\t\t\tuuidStrings.push(\"3B12F1DF-5232-1804-897E917BF39761-8A\");  // last '-' in wrong place\r\n\t\t\tuuidStrings.push(\"HB12F1DF-5232-1804-897E-917BF397618A\");  // \"HB12F1DF\" is not a hex string\r\n\t\t\r\n\t\t\tvar numberOfFailures = 0;\r\n\t\t\tfor(var i in uuidStrings){\r\n\t\t\t\tvar uuidString = uuidStrings[i];\r\n\t\t\t\ttry{\r\n\t\t\t\t\tnew Uuid(uuidString);\r\n\t\t\t\t}catch (e){\r\n\t\t\t\t\t++numberOfFailures;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdoh.assertTrue(numberOfFailures == uuidStrings.length);\r\n\t\t}\r\n\t]\r\n);\r\n\r\n\r\n\r\n/*\r\nfunction test_uuid_get64bitArrayFromFloat(){\r\n\t// summary:\r\n\t//\t\tThis is a test we'd like to be able to run, but we can't run it\r\n\t//\t\tbecause it tests a function which is private in generateTimeBasedUuid\r\n\tvar x = Math.pow(2, 63) + Math.pow(2, 15);\r\n\tvar result = generateTimeBasedUuid._get64bitArrayFromFloat(x);\r\n\tdoh.assertTrue(result[0] === 0x8000);\r\n\tdoh.assertTrue(result[1] === 0x0000);\r\n\tdoh.assertTrue(result[2] === 0x0000);\r\n\tdoh.assertTrue(result[3] === 0x8000);\r\n\r\n\tvar date = new Date();\r\n\tx = date.valueOf();\r\n\tresult = generateTimeBasedUuid._get64bitArrayFromFloat(x);\r\n\tvar reconstructedFloat = result[0];\r\n\treconstructedFloat *= 0x10000;\r\n\treconstructedFloat += result[1];\r\n\treconstructedFloat *= 0x10000;\r\n\treconstructedFloat += result[2];\r\n\treconstructedFloat *= 0x10000;\r\n\treconstructedFloat += result[3];\r\n\r\n\tdoh.assertTrue(reconstructedFloat === x);\r\n}\r\n\r\nfunction test_uuid_addTwo64bitArrays(){\r\n\t// summary:\r\n\t//\t\tThis is a test we'd like to be able to run, but we can't run it\r\n\t//\t\tbecause it tests a function which is private in generateTimeBasedUuid\r\n\tvar a = [0x0000, 0x0000, 0x0000, 0x0001];\r\n\tvar b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];\r\n\tvar result = generateTimeBasedUuid._addTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 0x1000);\r\n\tdoh.assertTrue(result[1] === 0x0000);\r\n\tdoh.assertTrue(result[2] === 0x0000);\r\n\tdoh.assertTrue(result[3] === 0x0000);\r\n\r\n\ta = [0x4000, 0x8000, 0x8000, 0x8000];\r\n\tb = [0x8000, 0x8000, 0x8000, 0x8000];\r\n\tresult = generateTimeBasedUuid._addTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 0xC001);\r\n\tdoh.assertTrue(result[1] === 0x0001);\r\n\tdoh.assertTrue(result[2] === 0x0001);\r\n\tdoh.assertTrue(result[3] === 0x0000);\r\n\r\n\ta = [7, 6, 2, 5];\r\n\tb = [1, 0, 3, 4];\r\n\tresult = generateTimeBasedUuid._addTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 8);\r\n\tdoh.assertTrue(result[1] === 6);\r\n\tdoh.assertTrue(result[2] === 5);\r\n\tdoh.assertTrue(result[3] === 9);\r\n}\r\n\r\nfunction test_uuid_multiplyTwo64bitArrays(){\r\n\t// summary:\r\n\t//\t\tThis is a test we'd like to be able to run, but we can't run it\r\n\t//\t\tbecause it tests a function which is private in generateTimeBasedUuid\r\n\tvar a = [     0, 0x0000, 0x0000, 0x0003];\r\n\tvar b = [0x1111, 0x1234, 0x0000, 0xFFFF];\r\n\tvar result = generateTimeBasedUuid._multiplyTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 0x3333);\r\n\tdoh.assertTrue(result[1] === 0x369C);\r\n\tdoh.assertTrue(result[2] === 0x0002);\r\n\tdoh.assertTrue(result[3] === 0xFFFD);\r\n\r\n\ta = [0, 0, 0, 5];\r\n\tb = [0, 0, 0, 4];\r\n\tresult = generateTimeBasedUuid._multiplyTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 0);\r\n\tdoh.assertTrue(result[1] === 0);\r\n\tdoh.assertTrue(result[2] === 0);\r\n\tdoh.assertTrue(result[3] === 20);\r\n\r\n\ta = [0, 0, 2, 5];\r\n\tb = [0, 0, 3, 4];\r\n\tresult = generateTimeBasedUuid._multiplyTwo64bitArrays(a, b);\r\n\tdoh.assertTrue(result[0] === 0);\r\n\tdoh.assertTrue(result[1] === 6);\r\n\tdoh.assertTrue(result[2] === 23);\r\n\tdoh.assertTrue(result[3] === 20);\r\n}\r\n*/\r\n});\r\n"]}