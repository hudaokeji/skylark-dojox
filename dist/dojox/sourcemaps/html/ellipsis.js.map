{"version":3,"sources":["html/ellipsis.js"],"names":["define","d","isFF","delay","config","Number","dojoxFFEllipsisDelay","isNaN","createXULEllipsis","sNS","xml","document","createElementNS","label","setAttribute","appendChild","n","x","cloneNode","firstChild","textContent","innerHTML","e","s","fn","opt","create","dd","doc","dp","place","iFrame","className","src","style","display","rollRange","r","cnt","collapsed","endContainer","nodeType","endOffset","setEnd","setEndBefore","childNodes","length","nCont","hc","hasClass","querySelectorAll","getElementsByClassName","fx","forEach","apply","_djx_ellipsis_done","c","parentNode","replaceChild","i","ns","es","resizeNode","scrollWidth","offsetWidth","createRange","selectNodeContents","done","numRolls","cloneContents","sw","ow","pct","Math","max","round","onload","contentWindow","onresize","createIFrameEllipsis","addOnLoad","t","connFx","disconnect","clearTimeout","setTimeout","connect","body"],"mappings":";;;;;;;AAAAA,OAAO,uBAAuB,oBAAqB,kBAAmB,mBAAoB,mBAAoB,eAAgB,SAASC,GAatI,GAAGA,EAAEC,KAAO,EAAE,CAIb,IAAIC,EAAQ,EACT,yBAA0BF,EAAEG,SAC9BD,EAAQE,OAAOJ,EAAEG,OAAOE,sBACrBC,MAAMJ,KACRA,EAAQ,IAGV,IACC,IAAIK,GAICC,EAAM,gEACNC,EAAMC,SAASC,gBAAgBH,EAAK,WACpCI,EAAQF,SAASC,gBAAgBH,EAAK,gBACpCK,aAAa,OAAQ,OAC3BJ,EAAIK,YAAYF,GAET,SAAoBG,GAI1B,IAAIC,EAAIP,EAAIQ,WAAU,GACtBD,EAAEE,WAAWL,aAAa,QAASE,EAAEI,aACrCJ,EAAEK,UAAY,GACdL,EAAED,YAAYE,KAGhB,MAAMK,IAGP,IA+FIC,EAAGC,EAAIC,EA/FPC,EAASzB,EAAEyB,OACXC,EAAK1B,EAAE2B,IACPC,EAAK5B,EAAE6B,MACPC,EAASL,EAAO,UAAWM,UAAW,sBACvCC,IAAK,2IAA2IC,OAAQC,QAAS,UAChKC,EAAY,SAAyBC,EAAcC,GAOtD,IAAGD,EAAEE,UAIL,GAAGD,EAAM,EACR,GACCF,EAAUC,GACVC,UACMA,QAGR,GAA8B,GAA3BD,EAAEG,aAAaC,UAAiBJ,EAAEK,UAAY,EAChDL,EAAEM,OAAON,EAAEG,aAAcH,EAAEK,UAAY,OAClC,CAAA,GAA8B,GAA3BL,EAAEG,aAAaC,SAGvB,OAFAJ,EAAEO,aAAaP,EAAEG,mBACjBJ,EAAUC,GAEL,KAAGA,EAAEK,WAAaL,EAAEG,aAAaK,WAAWC,QAAUT,EAAEK,WAgB7D,OAFAL,EAAEO,aAAaP,EAAEG,mBACjBJ,EAAUC,GAdV,IAAIU,EAAQV,EAAEG,aAAaK,WAAWR,EAAEK,UAAY,GACpD,GAAqB,GAAlBK,EAAMN,SAEH,OAAGM,EAAMF,WAAWC,QACzBT,EAAEM,OAAOI,EAAOA,EAAMF,WAAWC,aACjCV,EAAUC,KAGVA,EAAEO,aAAaG,QACfX,EAAUC,IAPVA,EAAEM,OAAOI,EAAOA,EAAMD,OAAS,KA6D9BE,EAAK/C,EAAEgD,SACPrB,EAAM3B,EAAE2B,IAETA,EAAIsB,kBACN3B,EAAIK,EACJJ,EAAK,mBACLC,EAAM,kBACEG,EAAIuB,wBACZ5B,EAAIK,EACJJ,EAAK,yBACLC,EAAM,kBAENF,EAAItB,EACJuB,EAAK,QACLC,EAAM,kBAEP2B,GAAK,WACJnD,EAAEoD,QAAQ9B,EAAEC,GAAI8B,MAAM/B,GAAIE,IAAO,SAAST,GACrCA,IAAKA,EAAEuC,qBACXvC,EAAEuC,oBAAqB,EACpB/C,GAAqBQ,EAAEI,aAAeJ,EAAEK,YAAc2B,EAAGhC,EAAG,2BAE9DR,EAAkBQ,GAnEM,SAAoBA,GAO9C,IAAIwC,EAAI9B,EAAO,OAAQM,UAAW,2BAC9BV,EAAII,EAAO,OAAQM,UAAW,qBAAsBE,OAAQC,QAAS,UACzEnB,EAAEyC,WAAWC,aAAaF,EAAGxC,GAC7BwC,EAAEzC,YAAYC,GACdwC,EAAEzC,YAAYO,GACd,IAAIqC,EAAI5B,EAAOb,WAAU,GACrB0C,EAAK5C,EAAEkB,MACP2B,EAAKvC,EAAEY,MAEP4B,EAAa,WAGhB,GAFAF,EAAGzB,QAAU,GACb0B,EAAG1B,QAAU,SACVnB,EAAE+C,aAAe/C,EAAEgD,aAAtB,CACA,IAAI3B,EAAIV,EAAGsC,cACX5B,EAAE6B,mBAAmBlD,GACrB4C,EAAGzB,QAAU,OACb0B,EAAG1B,QAAU,GACb,IAAIgC,GAAO,EACX,EAAE,CACD,IAAIC,EAAW,EACfvC,EAAGQ,EAAEgC,gBAAiB/C,EAAG,QACzB,IAAIgD,EAAKhD,EAAEyC,YAAaQ,EAAKjD,EAAE0C,YAC/BG,EAAQG,GAAMC,EACd,IAAIC,EAAO,EAAW,EAALD,EAAUD,EACxBE,EAAM,IACRJ,EAAWK,KAAKC,IAAID,KAAKE,MAAMrD,EAAEF,YAAY0B,OAAS0B,GAAO,EAAG,IAEjEpC,EAAUC,EAAG+B,UACN/B,EAAEE,YAAc4B,KAEzBR,EAAEiB,OAAS,WACVjB,EAAEkB,cAAcC,SAAWhB,EAC3BA,KAEDN,EAAEzC,YAAY4C,GA4BZoB,CAAqB/D,OAKxBf,EAAE+E,UAAU,WAEX,IAAIC,EAAI,KACJzB,EAAI,KACJ0B,EAAS,WACT1B,IAEFvD,EAAEkF,WAAW3B,GACbA,EAAI,MAEFyB,GAAIG,aAAaH,GACpBA,EAAII,WAAW,WACdJ,EAAI,KACJ7B,KAGAI,EAAIvD,EAAEqF,QAAQrF,EAAEsF,OAAQ,qBAAsBL,IAC5C/E,IAEJ+E,MApKwB,IAInBzE,EACAC,EACAG","file":"../../html/ellipsis.js","sourcesContent":["define(\"dojox/html/ellipsis\",[\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/array\", \"dojo/_base/Color\", \"dojo/colors\"], function(d){\r\n\t/*=====\r\n\treturn {\r\n\t\t// summary:\r\n\t\t//\t\toffers cross-browser support for text-overflow: ellipsis\r\n\t\t// description:\r\n\t\t//\t\tAdd \"dojoxEllipsis\" on any node that you want to ellipsis-ize. In order to function properly,\r\n\t\t//\t\tthe node with the dojoxEllipsis class set on it should be a child of a node with a defined width.\r\n\t\t//\t\tIt should also be a block-level element (i.e. `<div>`) - it will not work on td elements.\r\n\t\t//\t\tNOTE: When using the dojoxEllipsis class within tables, the table needs to have the table-layout: fixed style\r\n\t};\r\n\t=====*/\r\n\t\r\n\tif(d.isFF < 7){ //TODO: feature detect text-overflow in computed style?\r\n\t\t// The delay (in ms) to wait so that we don't keep querying when many\r\n\t\t// changes happen at once - set config \"dojoxFFEllipsisDelay\" if you\r\n\t\t// want a different value\r\n\t\tvar delay = 1;\r\n\t\tif(\"dojoxFFEllipsisDelay\" in d.config){\r\n\t\t\tdelay = Number(d.config.dojoxFFEllipsisDelay);\r\n\t\t\tif(isNaN(delay)){\r\n\t\t\t\tdelay = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tvar createXULEllipsis = (function(){\r\n\t\t\t\t// Create our stub XUL elements for cloning later\r\n\t\t\t\t// NOTE: this no longer works as of FF 4.0:\r\n\t\t\t\t// https://developer.mozilla.org/En/Firefox_4_for_developers#Remote_XUL_support_removed\r\n\t\t\t\tvar sNS = 'http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul';\r\n\t\t\t\tvar xml = document.createElementNS(sNS, 'window');\r\n\t\t\t\tvar label = document.createElementNS(sNS, 'description');\r\n\t\t\t\tlabel.setAttribute('crop', 'end');\r\n\t\t\t\txml.appendChild(label);\r\n\r\n\t\t\t\treturn function(/* Node */ n){\r\n\t\t\t\t\t// Summary:\r\n\t\t\t\t\t//\t\tGiven a node, it creates the XUL and sets its\r\n\t\t\t\t\t//\t\tcontent so that it will have an ellipsis\r\n\t\t\t\t\tvar x = xml.cloneNode(true);\r\n\t\t\t\t\tx.firstChild.setAttribute('value', n.textContent);\r\n\t\t\t\t\tn.innerHTML = '';\r\n\t\t\t\t\tn.appendChild(x);\r\n\t\t\t\t};\r\n\t\t\t})();\r\n\t\t}catch(e){}\r\n\t\t\r\n\t\t// Create our iframe elements for cloning later\r\n\t\tvar create = d.create;\r\n\t\tvar dd = d.doc;\r\n\t\tvar dp = d.place;\r\n\t\tvar iFrame = create(\"iframe\", {className: \"dojoxEllipsisIFrame\",\r\n\t\t\t\t\tsrc: \"javascript:'<html><head><script>if(\\\"loadFirebugConsole\\\" in window){window.loadFirebugConsole();}</script></head><body></body></html>'\", style: {display: \"none\"}});\r\n\t\tvar rollRange = function(/* W3C Range */ r, /* int? */ cnt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRolls the given range back one character from the end\r\n\t\t\t// r: W3C Range\r\n\t\t\t//\t\tThe range to roll back\r\n\t\t\t// cnt: int?\r\n\t\t\t//\t\tAn optional number of times to roll back (defaults 1)\r\n\t\t\tif(r.collapsed){\r\n\t\t\t\t// Do nothing - we are already collapsed\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(cnt > 0){\r\n\t\t\t\tdo{\r\n\t\t\t\t\trollRange(r);\r\n\t\t\t\t\tcnt--;\r\n\t\t\t\t}while(cnt);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(r.endContainer.nodeType == 3 && r.endOffset > 0){\r\n\t\t\t\tr.setEnd(r.endContainer, r.endOffset - 1);\r\n\t\t\t}else if(r.endContainer.nodeType == 3){\r\n\t\t\t\tr.setEndBefore(r.endContainer);\r\n\t\t\t\trollRange(r);\r\n\t\t\t\treturn;\r\n\t\t\t}else if(r.endOffset && r.endContainer.childNodes.length >= r.endOffset){\r\n\t\t\t\tvar nCont = r.endContainer.childNodes[r.endOffset - 1];\r\n\t\t\t\tif(nCont.nodeType == 3){\r\n\t\t\t\t\tr.setEnd(nCont, nCont.length - 1);\r\n\t\t\t\t}else if(nCont.childNodes.length){\r\n\t\t\t\t\tr.setEnd(nCont, nCont.childNodes.length);\r\n\t\t\t\t\trollRange(r);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tr.setEndBefore(nCont);\r\n\t\t\t\t\trollRange(r);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tr.setEndBefore(r.endContainer);\r\n\t\t\t\trollRange(r);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t};\r\n\t\tvar createIFrameEllipsis = function(/* Node */ n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGiven a node, it creates an iframe and and ellipsis div and\r\n\t\t\t//\t\tsets up the connections so that they will work correctly.\r\n\t\t\t//\t\tThis function is used when createXULEllipsis is not able\r\n\t\t\t//\t\tto be used (because there is markup within the node) - it's\r\n\t\t\t//\t\ta bit slower, but does the trick\r\n\t\t\tvar c = create(\"div\", {className: \"dojoxEllipsisContainer\"});\r\n\t\t\tvar e = create(\"div\", {className: \"dojoxEllipsisShown\", style: {display: \"none\"}});\r\n\t\t\tn.parentNode.replaceChild(c, n);\r\n\t\t\tc.appendChild(n);\r\n\t\t\tc.appendChild(e);\r\n\t\t\tvar i = iFrame.cloneNode(true);\r\n\t\t\tvar ns = n.style;\r\n\t\t\tvar es = e.style;\r\n\t\t\tvar ranges;\r\n\t\t\tvar resizeNode = function(){\r\n\t\t\t\tns.display = \"\";\r\n\t\t\t\tes.display = \"none\";\r\n\t\t\t\tif(n.scrollWidth <= n.offsetWidth){ return; }\r\n\t\t\t\tvar r = dd.createRange();\r\n\t\t\t\tr.selectNodeContents(n);\r\n\t\t\t\tns.display = \"none\";\r\n\t\t\t\tes.display = \"\";\r\n\t\t\t\tvar done = false;\r\n\t\t\t\tdo{\r\n\t\t\t\t\tvar numRolls = 1;\r\n\t\t\t\t\tdp(r.cloneContents(), e, \"only\");\r\n\t\t\t\t\tvar sw = e.scrollWidth, ow = e.offsetWidth;\r\n\t\t\t\t\tdone = (sw <= ow);\r\n\t\t\t\t\tvar pct = (1 - ((ow * 1) / sw));\r\n\t\t\t\t\tif(pct > 0){\r\n\t\t\t\t\t\tnumRolls = Math.max(Math.round(e.textContent.length * pct) - 1, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\trollRange(r, numRolls);\r\n\t\t\t\t}while(!r.collapsed && !done);\r\n\t\t\t};\r\n\t\t\ti.onload = function(){\r\n\t\t\t\ti.contentWindow.onresize = resizeNode;\r\n\t\t\t\tresizeNode();\r\n\t\t\t};\r\n\t\t\tc.appendChild(i);\r\n\t\t};\r\n\r\n\t\t// Function for updating the ellipsis\r\n\t\tvar hc = d.hasClass;\r\n\t\tvar doc = d.doc;\r\n\t\tvar s, fn, opt;\r\n\t\tif(doc.querySelectorAll){\r\n\t\t\ts = doc;\r\n\t\t\tfn = \"querySelectorAll\";\r\n\t\t\topt = \".dojoxEllipsis\";\r\n\t\t}else if(doc.getElementsByClassName){\r\n\t\t\ts = doc;\r\n\t\t\tfn = \"getElementsByClassName\";\r\n\t\t\topt = \"dojoxEllipsis\";\r\n\t\t}else{\r\n\t\t\ts = d;\r\n\t\t\tfn = \"query\";\r\n\t\t\topt = \".dojoxEllipsis\";\r\n\t\t}\r\n\t\tfx = function(){\r\n\t\t\td.forEach(s[fn].apply(s, [opt]), function(n){\r\n\t\t\t\tif(!n || n._djx_ellipsis_done){ return; }\r\n\t\t\t\tn._djx_ellipsis_done = true;\r\n\t\t\t\tif(createXULEllipsis && n.textContent == n.innerHTML && !hc(n, \"dojoxEllipsisSelectable\")){\r\n\t\t\t\t\t// We can do the faster XUL version, instead of calculating\r\n\t\t\t\t\tcreateXULEllipsis(n);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcreateIFrameEllipsis(n);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\td.addOnLoad(function(){\r\n\t\t\t// Apply our initial stuff\r\n\t\t\tvar t = null;\r\n\t\t\tvar c = null;\r\n\t\t\tvar connFx = function(){\r\n\t\t\t\tif(c){\r\n\t\t\t\t\t// disconnect us - so we don't fire anymore\r\n\t\t\t\t\td.disconnect(c);\r\n\t\t\t\t\tc = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(t){ clearTimeout(t); }\r\n\t\t\t\tt = setTimeout(function(){\r\n\t\t\t\t\tt = null;\r\n\t\t\t\t\tfx();\r\n\t\t\t\t\t// Connect to the modified function so that we can catch\r\n\t\t\t\t\t// our next change\r\n\t\t\t\t\tc = d.connect(d.body(), \"DOMSubtreeModified\", connFx);\r\n\t\t\t\t}, delay);\r\n\t\t\t};\r\n\t\t\tconnFx();\r\n\t\t});\r\n\t}\r\n});\r\n"]}