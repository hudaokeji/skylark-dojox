{"version":3,"sources":["collections/BinaryTree.js"],"names":["define","dojo","darray","dxc","BinaryTree","data","this","add","i","n","node","rnode","lnode","value","right","left","clone","c","compare","compareData","d","current","root","parent","count","clear","itr","getIterator","atEnd","get","contains","search","deleteData","leftmost","lmParent","a","inorderTraversalBuildup","push","Iterator","searchHelper","toString","order","sep","TraversalMethods","Inorder","s","Preorder","preorderTraversal","inorderTraversal","Postorder","postorderTraversal","length","substring"],"mappings":"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","file":"../../collections/BinaryTree.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/array\", \"./_base\"], function(dojo, darray, dxc){\r\n\r\n\tdxc.BinaryTree=function(data){\r\n\t\tfunction node(data, rnode, lnode){\r\n\t\t\tthis.value=data||null;\r\n\t\t\tthis.right=rnode||null;\r\n\t\t\tthis.left=lnode||null;\r\n\t\t\tthis.clone=function(){\r\n\t\t\t\tvar c=new node();\r\n\t\t\t\tif(this.value.value){\r\n\t\t\t\t\tc.value=this.value.clone();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tc.value=this.value;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.left!=null){\r\n\t\t\t\t\tc.left=this.left.clone();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.right!=null){\r\n\t\t\t\t\tc.right=this.right.clone();\r\n\t\t\t\t}\r\n\t\t\t\treturn c;\r\n\t\t\t}\r\n\t\t\tthis.compare=function(n){\r\n\t\t\t\tif(this.value>n.value){ return 1; }\r\n\t\t\t\tif(this.value<n.value){ return -1; }\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tthis.compareData=function(d){\r\n\t\t\t\tif(this.value>d){ return 1; }\r\n\t\t\t\tif(this.value<d){ return -1; }\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction inorderTraversalBuildup(current, a){\r\n\t\t\tif(current){\r\n\t\t\t\tinorderTraversalBuildup(current.left, a);\r\n\t\t\t\ta.push(current.value);\r\n\t\t\t\tinorderTraversalBuildup(current.right, a);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction preorderTraversal(current, sep){\r\n\t\t\tvar s=\"\";\r\n\t\t\tif (current){\r\n\t\t\t\ts=current.value.toString() + sep;\r\n\t\t\t\ts+=preorderTraversal(current.left, sep);\r\n\t\t\t\ts+=preorderTraversal(current.right, sep);\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tfunction inorderTraversal(current, sep){\r\n\t\t\tvar s=\"\";\r\n\t\t\tif (current){\r\n\t\t\t\ts=inorderTraversal(current.left, sep);\r\n\t\t\t\ts+=current.value.toString() + sep;\r\n\t\t\t\ts+=inorderTraversal(current.right, sep);\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\tfunction postorderTraversal(current, sep){\r\n\t\t\tvar s=\"\";\r\n\t\t\tif (current){\r\n\t\t\t\ts=postorderTraversal(current.left, sep);\r\n\t\t\t\ts+=postorderTraversal(current.right, sep);\r\n\t\t\t\ts+=current.value.toString() + sep;\r\n\t\t\t}\r\n\t\t\treturn s;\r\n\t\t}\r\n\t\t\r\n\t\tfunction searchHelper(current, data){\r\n\t\t\tif(!current){ return null; }\r\n\t\t\tvar i=current.compareData(data);\r\n\t\t\tif(i==0){ return current; }\r\n\t\t\tif(i>0){ return searchHelper(current.left, data); }\r\n\t\t\telse{ return searchHelper(current.right, data); }\r\n\t\t}\r\n\r\n\t\tthis.add=function(data){\r\n\t\t\tvar n=new node(data);\r\n\t\t\tvar i;\r\n\t\t\tvar current=root;\r\n\t\t\tvar parent=null;\r\n\t\t\twhile(current){\r\n\t\t\t\ti=current.compare(n);\r\n\t\t\t\tif(i==0){ return; }\r\n\t\t\t\tparent=current;\r\n\t\t\t\tif(i>0){ current=current.left; }\r\n\t\t\t\telse{ current=current.right; }\r\n\t\t\t}\r\n\t\t\tthis.count++;\r\n\t\t\tif(!parent){\r\n\t\t\t\troot=n;\r\n\t\t\t}else{\r\n\t\t\t\ti=parent.compare(n);\r\n\t\t\t\tif(i>0){\r\n\t\t\t\t\tparent.left=n;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tparent.right=n;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.clear=function(){\r\n\t\t\troot=null;\r\n\t\t\tthis.count=0;\r\n\t\t};\r\n\t\tthis.clone=function(){\r\n\t\t\tvar c=new dxc.BinaryTree();\r\n\t\t\tvar itr=this.getIterator();\r\n\t\t\twhile(!itr.atEnd()){\r\n\t\t\t\tc.add(itr.get());\r\n\t\t\t}\r\n\t\t\treturn c;\r\n\t\t};\r\n\t\tthis.contains=function(data){\r\n\t\t\treturn this.search(data) != null;\r\n\t\t};\r\n\t\tthis.deleteData=function(data){\r\n\t\t\tvar current=root;\r\n\t\t\tvar parent=null;\r\n\t\t\tvar i=current.compareData(data);\r\n\t\t\twhile(i!=0&&current!=null){\r\n\t\t\t\tif(i>0){\r\n\t\t\t\t\tparent=current;\r\n\t\t\t\t\tcurrent=current.left;\r\n\t\t\t\t}else if(i<0){\r\n\t\t\t\t\tparent=current;\r\n\t\t\t\t\tcurrent=current.right;\r\n\t\t\t\t}\r\n\t\t\t\ti=current.compareData(data);\r\n\t\t\t}\r\n\t\t\tif(!current){ return; }\r\n\t\t\tthis.count--;\r\n\t\t\tif(!current.right){\r\n\t\t\t\tif(!parent){\r\n\t\t\t\t\troot=current.left;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ti=parent.compare(current);\r\n\t\t\t\t\tif(i>0){ parent.left=current.left; }\r\n\t\t\t\t\telse if(i<0){ parent.right=current.left; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(!current.right.left){\r\n\t\t\t\tif(!parent){\r\n\t\t\t\t\troot=current.right;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ti=parent.compare(current);\r\n\t\t\t\t\tif(i>0){ parent.left=current.right; }\r\n\t\t\t\t\telse if(i<0){ parent.right=current.right; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar leftmost=current.right.left;\r\n\t\t\t\tvar lmParent=current.right;\r\n\t\t\t\twhile(leftmost.left!=null){\r\n\t\t\t\t\tlmParent=leftmost;\r\n\t\t\t\t\tleftmost=leftmost.left;\r\n\t\t\t\t}\r\n\t\t\t\tlmParent.left=leftmost.right;\r\n\t\t\t\tleftmost.left=current.left;\r\n\t\t\t\tleftmost.right=current.right;\r\n\t\t\t\tif(!parent){\r\n\t\t\t\t\troot=leftmost;\r\n\t\t\t\t}else{\r\n\t\t\t\t\ti=parent.compare(current);\r\n\t\t\t\t\tif(i>0){ parent.left=leftmost; }\r\n\t\t\t\t\telse if(i<0){ parent.right=leftmost; }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.getIterator=function(){\r\n\t\t\tvar a=[];\r\n\t\t\tinorderTraversalBuildup(root, a);\r\n\t\t\treturn new dxc.Iterator(a);\r\n\t\t};\r\n\t\tthis.search=function(data){\r\n\t\t\treturn searchHelper(root, data);\r\n\t\t};\r\n\t\tthis.toString=function(order, sep){\r\n\t\t\tif(!order){ order=dxc.BinaryTree.TraversalMethods.Inorder; }\r\n\t\t\tif(!sep){ sep=\",\"; }\r\n\t\t\tvar s=\"\";\r\n\t\t\tswitch(order){\r\n\t\t\t\tcase dxc.BinaryTree.TraversalMethods.Preorder:\r\n\t\t\t\t\ts=preorderTraversal(root, sep);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase dxc.BinaryTree.TraversalMethods.Inorder:\r\n\t\t\t\t\ts=inorderTraversal(root, sep);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase dxc.BinaryTree.TraversalMethods.Postorder:\r\n\t\t\t\t\ts=postorderTraversal(root, sep);\r\n\t\t\t\t\tbreak;\r\n\t\t\t};\r\n\t\t\tif(s.length==0){ return \"\"; }\r\n\t\t\telse{ return s.substring(0, s.length - sep.length); }\r\n\t\t};\r\n\r\n\t\tthis.count=0;\r\n\t\tvar root=this.root=null;\r\n\t\tif(data){\r\n\t\t\tthis.add(data);\r\n\t\t}\r\n\t}\r\n\tdxc.BinaryTree.TraversalMethods={\r\n\t\tPreorder: 1, Inorder: 2, Postorder: 3\r\n\t};\r\n\treturn dxc.BinaryTree;\r\n});\r\n"]}