{"version":3,"sources":["collections/tests/Stack.js"],"names":["dojo","provide","require","tests","register","t","s","dojox","collections","Stack","assertEqual","count","clear","cloned","clone","toArray","join","assertTrue","contains","assertFalse","itr","getIterator","atEnd","get","element","peek","pop","push"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,iCACbD,KAAKE,QAAQ,2BAEbC,MAAMC,SAAS,iCACd,SAAkBC,GACjB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,EAAGJ,EAAEK,QAEpB,SAAmBN,GAClB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDH,EAAEM,QACFP,EAAEK,YAAY,EAAGJ,EAAEK,QAEpB,SAAmBN,GAClB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SAClDI,EAAOP,EAAEQ,QACbT,EAAEK,YAAYJ,EAAEK,MAAOE,EAAOF,OAC9BN,EAAEK,YAAYJ,EAAES,UAAUC,OAAQH,EAAOE,UAAUC,SAEpD,SAAsBX,GACrB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEY,WAAWX,EAAEY,SAAS,QACxBb,EAAEc,YAAYb,EAAEY,SAAS,SAE1B,SAAyBb,GAGxB,IAFA,IACIe,EADE,IAAIb,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SAC5CY,eACHD,EAAIE,SAAUF,EAAIG,MACzBlB,EAAEK,YAAY,OAAQU,EAAII,UAE3B,SAAkBnB,GACjB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,OAAQJ,EAAEmB,SAEzB,SAAiBpB,GAChB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,OAAQJ,EAAEoB,OACxBrB,EAAEK,YAAY,OAAQJ,EAAEoB,QAEzB,SAAkBrB,GACjB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDH,EAAEqB,KAAK,OACPtB,EAAEK,YAAY,MAAOJ,EAAEmB","file":"../../../collections/tests/Stack.js","sourcesContent":["dojo.provide(\"dojox.collections.tests.Stack\");\r\ndojo.require(\"dojox.collections.Stack\");\r\n\r\ntests.register(\"dojox.collections.tests.Stack\", [\r\n\tfunction testCtor(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(4, s.count);\r\n\t},\r\n\tfunction testClear(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\ts.clear();\r\n\t\tt.assertEqual(0, s.count);\r\n\t},\r\n\tfunction testClone(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar cloned=s.clone();\r\n\t\tt.assertEqual(s.count, cloned.count);\r\n\t\tt.assertEqual(s.toArray().join(), cloned.toArray().join());\r\n\t},\r\n\tfunction testContains(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertTrue(s.contains(\"bar\"));\r\n\t\tt.assertFalse(s.contains(\"faz\"));\r\n\t},\r\n\tfunction testGetIterator(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar itr=s.getIterator();\r\n\t\twhile(!itr.atEnd()){ itr.get(); }\r\n\t\tt.assertEqual(\"bull\", itr.element);\r\n\t},\r\n\tfunction testPeek(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(\"bull\", s.peek());\r\n\t},\r\n\tfunction testPop(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(\"bull\", s.pop());\r\n\t\tt.assertEqual(\"test\", s.pop());\r\n\t},\r\n\tfunction testPush(t){\r\n\t\tvar s=new dojox.collections.Stack([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\ts.push(\"bug\");\r\n\t\tt.assertEqual(\"bug\", s.peek());\r\n\t}\r\n]);\r\n"]}