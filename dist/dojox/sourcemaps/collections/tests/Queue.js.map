{"version":3,"sources":["collections/tests/Queue.js"],"names":["dojo","provide","require","tests","register","t","q","dojox","collections","Queue","assertEqual","count","clear","cloned","clone","toArray","join","assertTrue","contains","assertFalse","itr","getIterator","atEnd","get","element","peek","dequeue","enqueue","pop"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,iCACbD,KAAKE,QAAQ,2BAEbC,MAAMC,SAAS,iCACd,SAAkBC,GACjB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,EAAGJ,EAAEK,QAEpB,SAAmBN,GAClB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDH,EAAEM,QACFP,EAAEK,YAAY,EAAGJ,EAAEK,QAEpB,SAAmBN,GAClB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SAClDI,EAAOP,EAAEQ,QACbT,EAAEK,YAAYJ,EAAEK,MAAOE,EAAOF,OAC9BN,EAAEK,YAAYJ,EAAES,UAAUC,OAAQH,EAAOE,UAAUC,SAEpD,SAAsBX,GACrB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEY,WAAWX,EAAEY,SAAS,QACxBb,EAAEc,YAAYb,EAAEY,SAAS,SAE1B,SAAyBb,GAGxB,IAFA,IACIe,EADE,IAAIb,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SAC5CY,eACHD,EAAIE,SAAUF,EAAIG,MACzBlB,EAAEK,YAAY,OAAQU,EAAII,UAE3B,SAAkBnB,GACjB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,MAAOJ,EAAEmB,SAExB,SAAqBpB,GACpB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDJ,EAAEK,YAAY,MAAOJ,EAAEoB,WACvBrB,EAAEK,YAAY,gBAAiBJ,EAAES,UAAUC,KAAK,OAEjD,SAAqBX,GACpB,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,OAAO,MAAM,MAAM,OAAO,SACtDH,EAAEqB,QAAQ,QACVtB,EAAEK,YAAY,OAAQJ,EAAES,UAAUa","file":"../../../collections/tests/Queue.js","sourcesContent":["dojo.provide(\"dojox.collections.tests.Queue\");\r\ndojo.require(\"dojox.collections.Queue\");\r\n\r\ntests.register(\"dojox.collections.tests.Queue\", [\r\n\tfunction testCtor(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(4, q.count);\r\n\t},\r\n\tfunction testClear(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tq.clear();\r\n\t\tt.assertEqual(0, q.count);\r\n\t},\r\n\tfunction testClone(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar cloned=q.clone();\r\n\t\tt.assertEqual(q.count, cloned.count);\r\n\t\tt.assertEqual(q.toArray().join(), cloned.toArray().join());\r\n\t},\r\n\tfunction testContains(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertTrue(q.contains(\"bar\"));\r\n\t\tt.assertFalse(q.contains(\"faz\"));\r\n\t},\r\n\tfunction testGetIterator(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar itr=q.getIterator();\r\n\t\twhile(!itr.atEnd()){ itr.get(); }\r\n\t\tt.assertEqual(\"bull\", itr.element);\r\n\t},\r\n\tfunction testPeek(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(\"foo\", q.peek());\r\n\t},\r\n\tfunction testDequeue(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(\"foo\", q.dequeue());\r\n\t\tt.assertEqual(\"bar,test,bull\", q.toArray().join(\",\"));\r\n\t},\r\n\tfunction testEnqueue(t){\r\n\t\tvar q=new dojox.collections.Queue([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tq.enqueue(\"bull\");\r\n\t\tt.assertEqual(\"bull\", q.toArray().pop());\r\n\t}\r\n]);\r\n"]}