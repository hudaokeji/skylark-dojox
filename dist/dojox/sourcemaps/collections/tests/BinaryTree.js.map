{"version":3,"sources":["collections/tests/BinaryTree.js"],"names":["dojo","provide","require","tests","register","t","bt","dojox","collections","BinaryTree","assertTrue","add","assertEqual","toString","clear","count","bt2","clone","contains","assertFalse","deleteData","itr","getIterator","atEnd","get","element","search","value"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,sCACbD,KAAKE,QAAQ,gCAEbC,MAAMC,SAAS,sCACd,SAAkBC,GACjB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCJ,EAAEK,WAAWJ,aAAcC,MAAMC,YAAYC,aAE9C,SAAiBJ,GAChB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACPN,EAAEO,YAAY,8BAA8BN,EAAGO,aAEhD,SAAmBR,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACPL,EAAGQ,QACHT,EAAEO,YAAYN,EAAGS,MAAO,IAEzB,SAAmBV,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACP,IAAIK,EAAIV,EAAGW,QACXZ,EAAEO,YAAYI,EAAID,MAAO,GACzBV,EAAEO,YAAYN,EAAGO,WAAYG,EAAIH,aAElC,SAAsBR,GACrB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACPN,EAAEK,WAAWJ,EAAGY,SAAS,SACzBb,EAAEc,YAAYb,EAAGY,SAAS,UAE3B,SAAwBb,GACvB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACPL,EAAGc,WAAW,QACdf,EAAEO,YAAY,yBAAyBN,EAAGO,aAE3C,SAAyBR,GACxB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SAEP,IADA,IAAIU,EAAIf,EAAGgB,eACJD,EAAIE,SAAUF,EAAIG,MACzBnB,EAAEO,YAAY,OAAQS,EAAII,UAE3B,SAAoBpB,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,OACxCH,EAAGK,IAAI,OACPL,EAAGK,IAAI,OACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,QACPL,EAAGK,IAAI,SACPN,EAAEO,YAAY,OAAQN,EAAGoB,OAAO,QAAQC","file":"../../../collections/tests/BinaryTree.js","sourcesContent":["dojo.provide(\"dojox.collections.tests.BinaryTree\");\r\ndojo.require(\"dojox.collections.BinaryTree\");\r\n\r\ntests.register(\"dojox.collections.tests.BinaryTree\", [\r\n\tfunction testCtor(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tt.assertTrue(bt instanceof dojox.collections.BinaryTree);\r\n\t},\r\n\tfunction testAdd(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tt.assertEqual(\"apple,bar,baz,buck,foo,shot\",bt.toString());\r\n\t},\r\n\tfunction testClear(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tbt.clear();\r\n\t\tt.assertEqual(bt.count, 0);\r\n\t},\r\n\tfunction testClone(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tvar bt2=bt.clone();\r\n\t\tt.assertEqual(bt2.count, 6);\r\n\t\tt.assertEqual(bt.toString(), bt2.toString());\r\n\t},\r\n\tfunction testContains(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tt.assertTrue(bt.contains(\"buck\"));\r\n\t\tt.assertFalse(bt.contains(\"duck\"));\r\n\t},\r\n\tfunction testDeleteData(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tbt.deleteData(\"buck\");\r\n\t\tt.assertEqual(\"apple,bar,baz,foo,shot\",bt.toString());\r\n\t},\r\n\tfunction testGetIterator(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tvar itr=bt.getIterator();\r\n\t\twhile(!itr.atEnd()){ itr.get(); }\r\n\t\tt.assertEqual(\"shot\", itr.element);\r\n\t},\r\n\tfunction testSearch(t){\r\n\t\tvar bt=new dojox.collections.BinaryTree(\"foo\");\r\n\t\tbt.add(\"bar\");\r\n\t\tbt.add(\"baz\");\r\n\t\tbt.add(\"buck\");\r\n\t\tbt.add(\"shot\");\r\n\t\tbt.add(\"apple\");\r\n\t\tt.assertEqual(\"buck\", bt.search(\"buck\").value);\r\n\t}\r\n]);\r\n"]}