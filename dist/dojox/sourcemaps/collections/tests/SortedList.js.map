{"version":3,"sources":["collections/tests/SortedList.js"],"names":["dojo","provide","require","tests","register","t","sl","dojox","collections","SortedList","assertTrue","add","assertEqual","item","valueOf","clear","count","sl2","clone","contains","assertFalse","containsKey","containsValue","getKeyList","join","getValueList","arr","copyTo","getByIndex","getKey","indexOfKey","indexOfValue","remove","undefined","removeAt","replace","setByIndex","a","forEach","push"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,sCACbD,KAAKE,QAAQ,gCAEbC,MAAMC,SAAS,sCACd,SAAkBC,GACjB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BJ,EAAEK,WAAWJ,aAAcC,MAAMC,YAAYC,aAE9C,SAAiBJ,GAChB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbN,EAAEO,YAAY,MAAON,EAAGO,KAAK,OAAOC,YAErC,SAAmBT,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGS,QACHV,EAAEO,YAAY,EAAGN,EAAGU,QAErB,SAAmBX,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACf,IAAIM,EAAIX,EAAGY,QACXb,EAAEK,WAAWO,EAAIE,SAAS,SAE3B,SAAsBd,GACrB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEK,WAAWJ,EAAGa,SAAS,QACzBd,EAAEe,YAAYd,EAAGa,SAAS,SAE3B,SAAyBd,GACxB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEK,WAAWJ,EAAGe,YAAY,SAC5BhB,EAAEe,YAAYd,EAAGe,YAAY,SAE9B,SAA2BhB,GAC1B,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEK,WAAWJ,EAAGgB,cAAc,SAC9BjB,EAAEe,YAAYd,EAAGgB,cAAc,SAEhC,SAAwBjB,GACvB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,qBAAqBN,EAAGiB,aAAaC,KAAK,OAEzD,SAA0BnB,GACzB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,sBAAsBN,EAAGmB,eAAeD,KAAK,OAE5D,SAAoBnB,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACf,IAAIe,GAAK,OACTpB,EAAGqB,OAAOD,EAAI,GACdrB,EAAEO,YAAY,0BAA2Bc,EAAIF,KAAK,OAEnD,SAAwBnB,GACvB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,OAAQN,EAAGsB,WAAW,KAErC,SAAoBvB,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,QAASN,EAAGuB,OAAO,KAElC,SAAwBxB,GACvB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,EAAGN,EAAGwB,WAAW,WAEhC,SAA0BzB,GACzB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfN,EAAEO,YAAY,EAAGN,EAAGyB,aAAa,SAElC,SAAoB1B,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfL,EAAG0B,OAAO,OACV3B,EAAEO,YAAY,EAAGN,EAAGU,OACpBX,EAAEO,iBAAYqB,EAAW3B,EAAGO,KAAK,SAElC,SAAsBR,GACrB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfL,EAAG4B,SAAS,GACZ7B,EAAEO,iBAAYqB,EAAW3B,EAAGO,KAAK,UAElC,SAAqBR,GACpB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfL,EAAG6B,QAAQ,OAAO,UAClB9B,EAAEO,YAAYN,EAAGO,KAAK,QAAQC,UAAW,WAE1C,SAAwBT,GACvB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UACfL,EAAG8B,WAAW,EAAG,OACjB/B,EAAEO,YAAY,MAAON,EAAGsB,WAAW,KAEpC,SAAqBvB,GACpB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAC7BH,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,MAAM,OACbL,EAAGK,IAAI,OAAO,QACdL,EAAGK,IAAI,QAAQ,UAEf,IAAI0B,KACJ/B,EAAGgC,QAAQ,SAASzB,GACnBwB,EAAEE,KAAK1B,KAERR,EAAEO,YAAY,sBAAuByB,EAAEb","file":"../../../collections/tests/SortedList.js","sourcesContent":["dojo.provide(\"dojox.collections.tests.SortedList\");\r\ndojo.require(\"dojox.collections.SortedList\");\r\n\r\ntests.register(\"dojox.collections.tests.SortedList\", [\r\n\tfunction testCtor(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tt.assertTrue(sl instanceof dojox.collections.SortedList);\r\n\t},\r\n\tfunction testAdd(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tt.assertEqual(\"bar\", sl.item(\"foo\").valueOf());\r\n\t},\r\n\tfunction testClear(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.clear();\r\n\t\tt.assertEqual(0, sl.count);\r\n\t},\r\n\tfunction testClone(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tvar sl2=sl.clone();\r\n\t\tt.assertTrue(sl2.contains(\"baz\"));\r\n\t},\r\n\tfunction testContains(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertTrue(sl.contains(\"baz\"));\r\n\t\tt.assertFalse(sl.contains(\"faz\"));\r\n\t},\r\n\tfunction testContainsKey(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertTrue(sl.containsKey(\"buck\"));\r\n\t\tt.assertFalse(sl.containsKey(\"faz\"));\r\n\t},\r\n\tfunction testContainsValue(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertTrue(sl.containsValue(\"shot\"));\r\n\t\tt.assertFalse(sl.containsValue(\"faz\"));\r\n\t},\r\n\tfunction testGetKeyList(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(\"foo,baz,buck,apple\",sl.getKeyList().join(','));\r\n\t},\r\n\tfunction testGetValueList(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(\"bar,fab,shot,orange\",sl.getValueList().join(','));\r\n\t},\r\n\tfunction testCopyTo(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tvar arr=[\"bek\"];\r\n\t\tsl.copyTo(arr,0);\r\n\t\tt.assertEqual(\"bar,fab,shot,orange,bek\", arr.join(','));\r\n\t},\r\n\tfunction testGetByIndex(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(\"shot\", sl.getByIndex(2));\r\n\t},\r\n\tfunction testGetKey(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(\"apple\", sl.getKey(0));\r\n\t},\r\n\tfunction testIndexOfKey(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(0, sl.indexOfKey(\"apple\"));\r\n\t},\r\n\tfunction testIndexOfValue(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tt.assertEqual(3, sl.indexOfValue(\"bar\"));\r\n\t},\r\n\tfunction testRemove(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tsl.remove(\"baz\");\r\n\t\tt.assertEqual(3, sl.count);\r\n\t\tt.assertEqual(undefined, sl.item(\"baz\"));\r\n\t},\r\n\tfunction testRemoveAt(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tsl.removeAt(2);\r\n\t\tt.assertEqual(undefined, sl.item(\"buck\"));\r\n\t},\r\n\tfunction testReplace(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tsl.replace(\"buck\",\"dollar\");\r\n\t\tt.assertEqual(sl.item(\"buck\").valueOf(), \"dollar\");\r\n\t},\r\n\tfunction testSetByIndex(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\t\tsl.setByIndex(0, \"bar\");\r\n\t\tt.assertEqual(\"bar\", sl.getByIndex(0));\r\n\t},\r\n\tfunction testSorting(t){\r\n\t\tvar sl=new dojox.collections.SortedList();\r\n\t\tsl.add(\"foo\",\"bar\");\r\n\t\tsl.add(\"baz\",\"fab\");\r\n\t\tsl.add(\"buck\",\"shot\");\r\n\t\tsl.add(\"apple\",\"orange\");\r\n\r\n\t\tvar a=[];\r\n\t\tsl.forEach(function(item){\r\n\t\t\ta.push(item);\r\n\t\t});\r\n\t\tt.assertEqual(\"orange,fab,shot,bar\", a.join());\r\n\t}\r\n]);\r\n"]}