{"version":3,"sources":["collections/tests/ArrayList.js"],"names":["dojo","provide","require","tests","register","t","al","dojox","collections","ArrayList","assertEqual","count","add","toString","addRange","clear","cloned","clone","assertTrue","contains","assertFalse","itr","getIterator","atEnd","get","element","indexOf","insert","item","remove","removeAt","reverse","sort","a","toArray","join"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,qCACbD,KAAKE,QAAQ,+BAEbC,MAAMC,SAAS,qCACd,SAAkBC,GACjB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DJ,EAAEK,YAAY,EAAGJ,EAAGK,QAErB,SAAiBN,GAChB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGM,IAAI,QACPP,EAAEK,YAAY,yBAA0BJ,EAAGO,YAC3CP,EAAGQ,UAAU,MAAM,QACnBT,EAAEK,YAAY,iCAAkCJ,EAAGO,aAEpD,SAAmBR,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGS,QACHV,EAAEK,YAAY,EAAGJ,EAAGK,QAErB,SAAmBN,GAClB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SACvDO,EAAOV,EAAGW,QACdZ,EAAEK,YAAYJ,EAAGO,WAAYG,EAAOH,aAErC,SAAsBR,GACrB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DJ,EAAEa,WAAWZ,EAAGa,SAAS,QACzBd,EAAEe,YAAYd,EAAGa,SAAS,SAE3B,SAAyBd,GAGxB,IAFA,IACIgB,EADG,IAAId,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAChDa,eACJD,EAAIE,SACVF,EAAIG,MAELnB,EAAEK,YAAY,OAAQW,EAAII,UAE3B,SAAqBpB,GACpB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DJ,EAAEK,YAAY,EAAGJ,EAAGoB,QAAQ,SAE7B,SAAoBrB,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGqB,OAAO,EAAG,OACbtB,EAAEK,YAAY,EAAGJ,EAAGoB,QAAQ,SAE7B,SAAkBrB,GACjB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DJ,EAAEK,YAAY,OAAQJ,EAAGsB,KAAK,KAE/B,SAAoBvB,GACnB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGuB,OAAO,OACVxB,EAAEK,YAAY,gBAAiBJ,EAAGO,YAClCR,EAAEK,YAAY,EAAGJ,EAAGK,QAErB,SAAsBN,GACrB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGwB,SAAS,GACZzB,EAAEK,YAAY,eAAgBJ,EAAGO,YACjCR,EAAEK,YAAY,EAAGJ,EAAGK,QAErB,SAAqBN,GACpB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAGyB,UACH1B,EAAEK,YAAY,oBAAqBJ,EAAGO,aAEvC,SAAkBR,GACjB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SAC3DH,EAAG0B,OACH3B,EAAEK,YAAY,oBAAqBJ,EAAGO,aAEvC,SAAqBR,GACpB,IAAIC,EAAG,IAAIC,MAAMC,YAAYC,WAAW,MAAM,MAAM,OAAO,SACvDwB,EAAE3B,EAAG4B,UACT7B,EAAEK,YAAYuB,EAAEE,KAAK,KAAM7B,EAAGO","file":"../../../collections/tests/ArrayList.js","sourcesContent":["dojo.provide(\"dojox.collections.tests.ArrayList\");\r\ndojo.require(\"dojox.collections.ArrayList\");\r\n\r\ntests.register(\"dojox.collections.tests.ArrayList\", [\r\n\tfunction testCtor(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(4, al.count);\r\n\t},\r\n\tfunction testAdd(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.add(\"carp\");\r\n\t\tt.assertEqual(\"foo,bar,test,bull,carp\", al.toString());\r\n\t\tal.addRange([\"oof\",\"rab\"]);\r\n\t\tt.assertEqual(\"foo,bar,test,bull,carp,oof,rab\", al.toString());\r\n\t},\r\n\tfunction testClear(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.clear();\r\n\t\tt.assertEqual(0, al.count);\r\n\t},\r\n\tfunction testClone(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar cloned=al.clone();\r\n\t\tt.assertEqual(al.toString(), cloned.toString());\r\n\t},\r\n\tfunction testContains(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertTrue(al.contains(\"bar\"));\r\n\t\tt.assertFalse(al.contains(\"faz\"));\r\n\t},\r\n\tfunction testGetIterator(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar itr=al.getIterator();\r\n\t\twhile(!itr.atEnd()){\r\n\t\t\titr.get();\r\n\t\t}\r\n\t\tt.assertEqual(\"bull\", itr.element);\r\n\t},\r\n\tfunction testIndexOf(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(1, al.indexOf(\"bar\"));\r\n\t},\r\n\tfunction testInsert(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.insert(2, \"baz\");\r\n\t\tt.assertEqual(2, al.indexOf(\"baz\"));\r\n\t},\r\n\tfunction testItem(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tt.assertEqual(\"test\", al.item(2));\r\n\t},\r\n\tfunction testRemove(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.remove(\"bar\");\r\n\t\tt.assertEqual(\"foo,test,bull\", al.toString());\r\n\t\tt.assertEqual(3, al.count);\r\n\t},\r\n\tfunction testRemoveAt(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.removeAt(3);\r\n\t\tt.assertEqual(\"foo,bar,test\", al.toString());\r\n\t\tt.assertEqual(3, al.count);\r\n\t},\r\n\tfunction testReverse(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.reverse();\r\n\t\tt.assertEqual(\"bull,test,bar,foo\", al.toString());\r\n\t},\r\n\tfunction testSort(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tal.sort();\r\n\t\tt.assertEqual(\"bar,bull,foo,test\", al.toString());\r\n\t},\r\n\tfunction testToArray(t){\r\n\t\tvar al=new dojox.collections.ArrayList([\"foo\",\"bar\",\"test\",\"bull\"]);\r\n\t\tvar a=al.toArray();\r\n\t\tt.assertEqual(a.join(\",\"), al.toString());\r\n\t}\r\n]);\r\n"]}