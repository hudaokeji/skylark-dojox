{"version":3,"sources":["collections/tests/_base.js"],"names":["dojo","provide","require","tests","register","t","d","dojox","collections","DictionaryEntry","assertEqual","valueOf","toString","itr","Iterator","element","assertTrue","atEnd","get","reset","a","map","elm","DictionaryIterator","first","second","third","fourth"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,iCACbD,KAAKE,QAAQ,qBAEbC,MAAMC,SAAS,iCACd,SAA6BC,GAC5B,IAAIC,EAAE,IAAIC,MAAMC,YAAYC,gBAAgB,MAAM,OAClDJ,EAAEK,YAAY,MAAOJ,EAAEK,WACvBN,EAAEK,YAAY,MAAOJ,EAAEM,aAGxB,SAAsBP,GACrB,IAAIQ,EAAI,IAAIN,MAAMC,YAAYM,UAAU,MAAM,MAAM,MAAM,QAC1DT,EAAEK,YAAY,MAAOG,EAAIE,SACzBV,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEW,WAAWH,EAAII,SACjBZ,EAAEK,YAAY,KAAMG,EAAIK,OAExBL,EAAIM,QACJd,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,MAAOG,EAAIE,SAGzB,IAAIK,EAAEP,EAAIQ,IAAI,SAASC,GACtB,OAAOA,EAAI,YAEZT,EAAI,IAAIN,MAAMC,YAAYM,SAASM,GACnCf,EAAEK,YAAY,aAAcG,EAAIE,SAChCV,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEW,WAAWH,EAAII,SACjBZ,EAAEK,YAAY,KAAMG,EAAIK,QAGzB,SAAgCb,GAS/B,IAAIQ,EAAI,IAAIN,MAAMC,YAAYe,oBAC7BC,MAAM,MAAOC,OAAO,MAAOC,MAAM,MAAOC,OAAO,QAEhDtB,EAAEK,YAAY,MAAOG,EAAIE,SACzBV,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEK,YAAY,MAAOG,EAAIK,OACzBb,EAAEW,WAAWH,EAAII,SACjBZ,EAAEK,YAAY,KAAMG,EAAIK,OAExBL,EAAIM,QACJd,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,MAAOG,EAAIE,SAGzB,IAAIK,EAAEP,EAAIQ,IAAI,SAASC,GACtB,OAAOA,EAAI,YAEZT,EAAI,IAAIN,MAAMC,YAAYM,SAASM,GACnCf,EAAEK,YAAY,aAAcG,EAAIE,SAChCV,EAAEW,YAAYH,EAAII,SAClBZ,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEK,YAAY,aAAcG,EAAIK,OAChCb,EAAEW,WAAWH,EAAII,SACjBZ,EAAEK,YAAY,KAAMG,EAAIK","file":"../../../collections/tests/_base.js","sourcesContent":["dojo.provide(\"dojox.collections.tests._base\");\r\ndojo.require(\"dojox.collections\");\r\n\r\ntests.register(\"dojox.collections.tests._base\", [\r\n\tfunction testDictionaryEntry(t){\r\n\t\tvar d=new dojox.collections.DictionaryEntry(\"foo\",\"bar\");\r\n\t\tt.assertEqual(\"bar\", d.valueOf());\r\n\t\tt.assertEqual(\"bar\", d.toString());\r\n\t},\r\n\r\n\tfunction testIterator(t){\r\n\t\tvar itr=new dojox.collections.Iterator([\"foo\",\"bar\",\"baz\",\"zoo\"]);\r\n\t\tt.assertEqual(\"foo\", itr.element);\t//\ttest initialization\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo\", itr.get());\t//\tmake sure the first get doesn't advance.\r\n\t\tt.assertEqual(\"bar\", itr.get());\r\n\t\tt.assertEqual(\"baz\", itr.get());\r\n\t\tt.assertEqual(\"zoo\", itr.get());\r\n\t\tt.assertTrue(itr.atEnd());\r\n\t\tt.assertEqual(null, itr.get());\r\n\r\n\t\titr.reset();\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo\", itr.element);\r\n\r\n\t\t//\ttest map\r\n\t\tvar a=itr.map(function(elm){\r\n\t\t\treturn elm+\"-mapped\";\r\n\t\t});\r\n\t\titr=new dojox.collections.Iterator(a);\r\n\t\tt.assertEqual(\"foo-mapped\", itr.element);\t//\ttest initialization\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo-mapped\", itr.get());\t//\tmake sure the first get doesn't advance.\r\n\t\tt.assertEqual(\"bar-mapped\", itr.get());\r\n\t\tt.assertEqual(\"baz-mapped\", itr.get());\r\n\t\tt.assertEqual(\"zoo-mapped\", itr.get());\r\n\t\tt.assertTrue(itr.atEnd());\r\n\t\tt.assertEqual(null, itr.get());\r\n\t},\r\n\r\n\tfunction testDictionaryIterator(t){\r\n\t\t/*\r\n\t\t\tin the context of any of the Dictionary-based collections, the\r\n\t\t\telement would normally return a DictionaryEntry.  However, since\r\n\t\t\tthe DictionaryIterator is really an iterator of pure objects,\r\n\t\t\twe will just test with an object here.  This means all property\r\n\t\t\tnames are lost in the translation, but...that's why there's a\r\n\t\t\tDictionaryEntry object :)\r\n\t\t*/\r\n\t\tvar itr=new dojox.collections.DictionaryIterator({\r\n\t\t\tfirst:\"foo\", second:\"bar\", third:\"baz\", fourth:\"zoo\"\r\n\t\t});\r\n\t\tt.assertEqual(\"foo\", itr.element);\t//\ttest initialization\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo\", itr.get());\t//\tmake sure the first get doesn't advance.\r\n\t\tt.assertEqual(\"bar\", itr.get());\r\n\t\tt.assertEqual(\"baz\", itr.get());\r\n\t\tt.assertEqual(\"zoo\", itr.get());\r\n\t\tt.assertTrue(itr.atEnd());\r\n\t\tt.assertEqual(null, itr.get());\r\n\r\n\t\titr.reset();\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo\", itr.element);\r\n\r\n\t\t//\ttest map\r\n\t\tvar a=itr.map(function(elm){\r\n\t\t\treturn elm+\"-mapped\";\r\n\t\t});\r\n\t\titr=new dojox.collections.Iterator(a);\r\n\t\tt.assertEqual(\"foo-mapped\", itr.element);\t//\ttest initialization\r\n\t\tt.assertTrue(!itr.atEnd());\r\n\t\tt.assertEqual(\"foo-mapped\", itr.get());\t//\tmake sure the first get doesn't advance.\r\n\t\tt.assertEqual(\"bar-mapped\", itr.get());\r\n\t\tt.assertEqual(\"baz-mapped\", itr.get());\r\n\t\tt.assertEqual(\"zoo-mapped\", itr.get());\r\n\t\tt.assertTrue(itr.atEnd());\r\n\t\tt.assertEqual(null, itr.get());\r\n\t}\r\n]);\r\n"]}