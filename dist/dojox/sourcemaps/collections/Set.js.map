{"version":3,"sources":["collections/Set.js"],"names":["define","dxc","ArrayList","Set","conv","arr","constructor","Array","this","union","setA","setB","result","toArray","e","getIterator","atEnd","item","get","contains","add","intersection","difference","isSubSet","isSuperSet"],"mappings":";;;;;;;AAAAA,QAAQ,UAAW,eAAgB,SAASC,EAAKC,GAiFhD,OA/EAD,EAAIE,IAAI,IAAI,WACX,SAASC,EAAKC,GACb,OAAGA,EAAIC,aAAaC,MACZ,IAAIL,EAAUG,GAEfA,EAERG,KAAKC,MAAQ,SAAmBC,EAAgBC,GAG/CD,EAAKN,EAAKM,GACVC,EAAKP,EAAKO,GAGV,IAFA,IAAIC,EAAS,IAAIV,EAAUQ,EAAKG,WAC5BC,EAAIH,EAAKI,eACND,EAAEE,SAAQ,CAChB,IAAIC,EAAKH,EAAEI,MACPN,EAAOO,SAASF,IACnBL,EAAOQ,IAAIH,GAGb,OAAOL,GAERJ,KAAKa,aAAe,SAAmBX,EAAgBC,GAGtDD,EAAKN,EAAKM,GACVC,EAAKP,EAAKO,GAGV,IAFA,IAAIC,EAAS,IAAIV,EACbY,EAAIH,EAAKI,eACND,EAAEE,SAAQ,CAChB,IAAIC,EAAKH,EAAEI,MACRR,EAAKS,SAASF,IAChBL,EAAOQ,IAAIH,GAGb,OAAOL,GAERJ,KAAKc,WAAa,SAAmBZ,EAAgBC,GAGpDD,EAAKN,EAAKM,GACVC,EAAKP,EAAKO,GAGV,IAFA,IAAIC,EAAS,IAAIV,EACbY,EAAEJ,EAAKK,eACJD,EAAEE,SAAQ,CAChB,IAAIC,EAAKH,EAAEI,MACPP,EAAKQ,SAASF,IACjBL,EAAOQ,IAAIH,GAGb,OAAOL,GAERJ,KAAKe,SAAW,SAAmBb,EAAgBC,GAGlDD,EAAKN,EAAKM,GACVC,EAAKP,EAAKO,GAEV,IADA,IAAIG,EAAIJ,EAAKK,eACND,EAAEE,SACR,IAAIL,EAAKQ,SAASL,EAAEI,OACnB,OAAO,EAGT,OAAO,GAERV,KAAKgB,WAAa,SAAmBd,EAAgBC,GAGpDD,EAAKN,EAAKM,GAGV,IADA,IAAII,GADJH,EAAKP,EAAKO,IACGI,eACND,EAAEE,SACR,IAAIN,EAAKS,SAASL,EAAEI,OACnB,OAAO,EAGT,OAAO,IAGFjB,EAAIE","file":"../../collections/Set.js","sourcesContent":["define([\"./_base\", \"./ArrayList\"], function(dxc, ArrayList){\r\n\r\n\tdxc.Set=new (function(){\r\n\t\tfunction conv(arr){\r\n\t\t\tif(arr.constructor==Array){\r\n\t\t\t\treturn new ArrayList(arr);\t//\tdojox.collections.ArrayList\r\n\t\t\t}\r\n\t\t\treturn arr;\t\t//\tdojox.collections.ArrayList\r\n\t\t}\r\n\t\tthis.union = function(/*array*/ setA, /*array*/ setB){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the union of the two passed sets.\r\n\t\t\tsetA=conv(setA);\r\n\t\t\tsetB=conv(setB);\r\n\t\t\tvar result = new ArrayList(setA.toArray());\r\n\t\t\tvar e = setB.getIterator();\r\n\t\t\twhile(!e.atEnd()){\r\n\t\t\t\tvar item=e.get();\r\n\t\t\t\tif(!result.contains(item)){\r\n\t\t\t\t\tresult.add(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\t//\tdojox.collections.ArrayList\r\n\t\t};\r\n\t\tthis.intersection = function(/*array*/ setA, /*array*/ setB){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the intersection of the two passed sets.\r\n\t\t\tsetA=conv(setA);\r\n\t\t\tsetB=conv(setB);\r\n\t\t\tvar result = new ArrayList();\r\n\t\t\tvar e = setB.getIterator();\r\n\t\t\twhile(!e.atEnd()){\r\n\t\t\t\tvar item=e.get();\r\n\t\t\t\tif(setA.contains(item)){\r\n\t\t\t\t\tresult.add(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\t//\tdojox.collections.ArrayList\r\n\t\t};\r\n\t\tthis.difference = function(/*array*/ setA, /*array*/ setB){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns everything in setA that is not in setB.\r\n\t\t\tsetA=conv(setA);\r\n\t\t\tsetB=conv(setB);\r\n\t\t\tvar result = new ArrayList();\r\n\t\t\tvar e=setA.getIterator();\r\n\t\t\twhile(!e.atEnd()){\r\n\t\t\t\tvar item=e.get();\r\n\t\t\t\tif(!setB.contains(item)){\r\n\t\t\t\t\tresult.add(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\t//\tdojox.collections.ArrayList\r\n\t\t};\r\n\t\tthis.isSubSet = function(/*array*/ setA, /*array*/ setB) {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns if set B is a subset of set A.\r\n\t\t\tsetA=conv(setA);\r\n\t\t\tsetB=conv(setB);\r\n\t\t\tvar e = setA.getIterator();\r\n\t\t\twhile(!e.atEnd()){\r\n\t\t\t\tif(!setB.contains(e.get())){\r\n\t\t\t\t\treturn false;\t//\tboolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\t//\tboolean\r\n\t\t};\r\n\t\tthis.isSuperSet = function(/*array*/ setA, /*array*/ setB){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns if set B is a superset of set A.\r\n\t\t\tsetA=conv(setA);\r\n\t\t\tsetB=conv(setB);\r\n\t\t\tvar e = setB.getIterator();\r\n\t\t\twhile(!e.atEnd()){\r\n\t\t\t\tif(!setA.contains(e.get())){\r\n\t\t\t\t\treturn false;\t//\tboolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\t//\tboolean\r\n\t\t};\r\n\t})();\r\n\treturn dxc.Set;\r\n});\r\n"]}