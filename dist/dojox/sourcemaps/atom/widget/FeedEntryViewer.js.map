{"version":3,"sources":["atom/widget/FeedEntryViewer.js"],"names":["define","dojo","connect","declare","fx","arrayUtil","domStyle","domConstruct","_Widget","_Templated","_Container","ContentPane","Connection","template","headerTemplate","i18nViewer","experimental","FeedEntryViewer","entrySelectionTopic","_validEntryFields","displayEntrySections","_displayEntrySections","enableMenu","enableMenuFade","_optionButtonDisplayed","templateString","_entry","_feed","_editMode","postCreate","this","_subscriptions","subscribe","_nlsResources","displayOptions","innerHTML","feedEntryCheckBoxLabelTitle","title","feedEntryCheckBoxLabelAuthors","authors","feedEntryCheckBoxLabelContributors","contributors","feedEntryCheckBoxLabelId","id","close","feedEntryCheckBoxLabelUpdated","updated","feedEntryCheckBoxLabelSummary","summary","feedEntryCheckBoxLabelContent","content","startup","split","_setDisplaySectionsCheckboxes","set","feedEntryViewerMenu","entryCheckBoxRow","entryCheckBoxRow2","fadeOut","node","duration","play","clear","destroyDescendants","clearNodes","forEach","part","firstChild","destroy","setEntry","entry","feed","leaveMenuState","entryTitleHeader","setTitleHeader","entryTitleNode","setTitle","entryAuthorHeader","setAuthorsHeader","entryAuthorNode","setAuthors","entryContributorHeader","setContributorsHeader","entryContributorNode","setContributors","entryIdHeader","setIdHeader","entryIdNode","setId","entryUpdatedHeader","setUpdatedHeader","entryUpdatedNode","setUpdated","entrySummaryHeader","setSummaryHeader","entrySummaryNode","setSummary","entryContentHeader","setContentHeader","entryContentNode","setContent","_displaySections","titleHeaderNode","value","titleHeader","EntryHeader","appendChild","domNode","titleAnchorNode","editMode","type","titleNode","document","createTextNode","titleViewNode","createElement","titleView","refreshOnShow","executeScripts","attr","setFieldValidity","authorHeaderNode","length","authorHeader","authorsAnchorNode","i","name","anchor","uri","link","href","email","authorNode","breakNode","contributorsHeaderNode","contributorHeader","contributorsAnchorNode","contributorNode","idHeaderNode","idHeader","idAnchorNode","idNode","updatedHeaderNode","updatedHeader","updatedAnchorNode","updatedNode","summaryHeaderNode","summaryHeader","summaryAnchorNode","summaryViewNode","summaryView","contentHeaderNode","contentHeader","contentAnchorNode","contentViewNode","contentView","entryTitleRow","entryAuthorRow","entryContributorRow","entrySummaryRow","entryContentRow","entryIdRow","entryUpdatedRow","section","toLowerCase","isFieldValid","setDisplaySections","sectionsArray","items","indexOf","substring","toUpperCase","checked","_readDisplaySections","checkedList","feedEntryCheckBoxTitle","push","feedEntryCheckBoxAuthors","feedEntryCheckBoxContributors","feedEntryCheckBoxSummary","feedEntryCheckBoxContent","feedEntryCheckBoxId","feedEntryCheckBoxUpdated","_toggleCheckbox","checkBox","_toggleOptions","anim","anim2","entryCheckBoxDisplayOptions","fadeIn","_handleEvent","entrySelectionEvent","source","action","field","isValid","getEntry","getFeed","unsubscribe","setListHeader","textNode","entryHeaderNode","childNodes","removeChild"],"mappings":"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","file":"../../../atom/widget/FeedEntryViewer.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/fx\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_Templated\",\r\n\t\"dijit/_Container\",\r\n\t\"dijit/layout/ContentPane\",\r\n\t\"../io/Connection\",\r\n\t\"dojo/text!./templates/FeedEntryViewer.html\",\r\n\t\"dojo/text!./templates/EntryHeader.html\",\r\n\t\"dojo/i18n!./nls/FeedEntryViewer\"\r\n], function (dojo, connect, declare, fx, arrayUtil, domStyle, domConstruct, _Widget, _Templated, _Container, ContentPane, Connection, template, headerTemplate, i18nViewer) {\r\n\r\ndojo.experimental(\"dojox.atom.widget.FeedEntryViewer\");\r\n\r\n\r\nvar FeedEntryViewer = declare(\"dojox.atom.widget.FeedEntryViewer\", [_Widget, _Templated, _Container],{\r\n\t// summary:\r\n\t//\t\tAn ATOM feed entry editor for publishing updated ATOM entries, or viewing non-editable entries.\r\n\r\n\tentrySelectionTopic: \"\",\t//The topic to listen on for entries to edit.\r\n\r\n\t_validEntryFields: {},\t\t//The entry fields that were present on the entry and are being displayed.\r\n\t\t\t\t\t\t\t\t//This works in conjunction with what is selected to be displayed.\r\n\tdisplayEntrySections: \"\", //What current sections of the entries to display as a comma separated list.\r\n\t_displayEntrySections: null,\r\n\t\r\n\t//Control options for the display options menu.\r\n\tenableMenu: false,\r\n\tenableMenuFade: false,\r\n\t_optionButtonDisplayed: true,\r\n\r\n\t//Templates for the HTML rendering.  Need to figure these out better, admittedly.\r\n\ttemplateString: template,\r\n\t\r\n\t_entry: null, //The entry that is being viewed/edited.\r\n\t_feed: null, //The feed the entry came from.\r\n\r\n\t_editMode: false, //Flag denoting the state of the widget, in edit mode or not.\r\n\t\r\n\tpostCreate: function(){\r\n\t\tif(this.entrySelectionTopic !== \"\"){\r\n\t\t\tthis._subscriptions = [dojo.subscribe(this.entrySelectionTopic, this, \"_handleEvent\")];\r\n\t\t}\r\n\t\tvar _nlsResources = i18nViewer;\r\n\t\tthis.displayOptions.innerHTML = _nlsResources.displayOptions;\r\n\t\tthis.feedEntryCheckBoxLabelTitle.innerHTML = _nlsResources.title;\r\n\t\tthis.feedEntryCheckBoxLabelAuthors.innerHTML = _nlsResources.authors;\r\n\t\tthis.feedEntryCheckBoxLabelContributors.innerHTML = _nlsResources.contributors;\r\n\t\tthis.feedEntryCheckBoxLabelId.innerHTML = _nlsResources.id;\r\n\t\tthis.close.innerHTML = _nlsResources.close;\r\n\t\tthis.feedEntryCheckBoxLabelUpdated.innerHTML = _nlsResources.updated;\r\n\t\tthis.feedEntryCheckBoxLabelSummary.innerHTML = _nlsResources.summary;\r\n\t\tthis.feedEntryCheckBoxLabelContent.innerHTML = _nlsResources.content;\r\n\t},\r\n\r\n\tstartup: function(){\r\n\t\tif(this.displayEntrySections === \"\"){\r\n\t\t\tthis._displayEntrySections = [\"title\",\"authors\",\"contributors\",\"summary\",\"content\",\"id\",\"updated\"];\r\n\t\t}else{\r\n\t\t\tthis._displayEntrySections = this.displayEntrySections.split(\",\");\r\n\t\t}\r\n\t\tthis._setDisplaySectionsCheckboxes();\r\n\r\n\t\tif(this.enableMenu){\r\n\t\t\tdomStyle.set(this.feedEntryViewerMenu, 'display', '');\r\n\t\t\tif(this.entryCheckBoxRow && this.entryCheckBoxRow2){\r\n\t\t\t\tif(this.enableMenuFade){\r\n\t\t\t\t\tfx.fadeOut({node: this.entryCheckBoxRow,duration: 250}).play();\r\n\t\t\t\t\tfx.fadeOut({node: this.entryCheckBoxRow2,duration: 250}).play();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tclear: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to clear the state of the widget.\r\n\r\n\t\tthis.destroyDescendants();\r\n\t\tthis._entry=null;\r\n\t\tthis._feed=null;\r\n\t\tthis.clearNodes();\r\n\t},\r\n\t\r\n\tclearNodes: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to clear all the display nodes for the ATOM entry from the viewer.\r\n\r\n\t\tarrayUtil.forEach([\r\n\t\t\t\"entryTitleRow\", \"entryAuthorRow\", \"entryContributorRow\", \"entrySummaryRow\", \"entryContentRow\",\r\n\t\t\t\"entryIdRow\", \"entryUpdatedRow\"\r\n\t\t\t], function(node){\r\n\t\t\t\tdomStyle.set(this[node], \"display\", \"none\");\r\n\t\t\t}, this);\r\n\r\n\t\tarrayUtil.forEach([\r\n\t\t\t\"entryTitleNode\", \"entryTitleHeader\", \"entryAuthorHeader\", \"entryContributorHeader\",\r\n\t\t\t\"entryContributorNode\", \"entrySummaryHeader\", \"entrySummaryNode\", \"entryContentHeader\",\r\n\t\t\t\"entryContentNode\", \"entryIdNode\", \"entryIdHeader\", \"entryUpdatedHeader\", \"entryUpdatedNode\"\r\n\t\t\t], function(part){\r\n\t\t\t\twhile(this[part].firstChild){\r\n\t\t\t\t\tdomConstruct.destroy(this[part].firstChild);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t,this);\r\n\t\t\r\n\t},\r\n\r\n\tsetEntry: function(/*object*/entry, /*object*/feed, /*boolean*/leaveMenuState){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the current entry that is being edited.\r\n\t\t// entry:\r\n\t\t//\t\tInstance of dojox.atom.io.model.Entry to display for reading/editing.\r\n\t\tthis.clear();\r\n\t\tthis._validEntryFields = {};\r\n\t\tthis._entry = entry;\r\n\t\tthis._feed = feed;\r\n\r\n\t\tif(entry !== null){\r\n\t\t\t// Handle the title.\r\n\t\t\tif(this.entryTitleHeader){\r\n\t\t\t\tthis.setTitleHeader(this.entryTitleHeader, entry);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this.entryTitleNode){\r\n\t\t\t\tthis.setTitle(this.entryTitleNode, this._editMode, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryAuthorHeader){\r\n\t\t\t\tthis.setAuthorsHeader(this.entryAuthorHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryAuthorNode){\r\n\t\t\t\tthis.setAuthors(this.entryAuthorNode, this._editMode, entry);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this.entryContributorHeader){\r\n\t\t\t\tthis.setContributorsHeader(this.entryContributorHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryContributorNode){\r\n\t\t\t\tthis.setContributors(this.entryContributorNode, this._editMode, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryIdHeader){\r\n\t\t\t\tthis.setIdHeader(this.entryIdHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryIdNode){\r\n\t\t\t\tthis.setId(this.entryIdNode, this._editMode, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryUpdatedHeader){\r\n\t\t\t\tthis.setUpdatedHeader(this.entryUpdatedHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryUpdatedNode){\r\n\t\t\t\tthis.setUpdated(this.entryUpdatedNode, this._editMode, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entrySummaryHeader){\r\n\t\t\t\tthis.setSummaryHeader(this.entrySummaryHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entrySummaryNode){\r\n\t\t\t\tthis.setSummary(this.entrySummaryNode, this._editMode, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryContentHeader){\r\n\t\t\t\tthis.setContentHeader(this.entryContentHeader, entry);\r\n\t\t\t}\r\n\r\n\t\t\tif(this.entryContentNode){\r\n\t\t\t\tthis.setContent(this.entryContentNode, this._editMode, entry);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._displaySections();\r\n\t},\r\n\r\n\tsetTitleHeader: function(/*DOMNode*/ titleHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the title header node in the template to some value.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the title header node in the template to some value.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// titleAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the title data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\r\n\t\tif(entry.title && entry.title.value && entry.title.value !== null){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar titleHeader = new EntryHeader({title: _nlsResources.title});\r\n\t\t\ttitleHeaderNode.appendChild(titleHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\tsetTitle: function(titleAnchorNode, editMode, entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the title node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the title node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// titleAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the title data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.title && entry.title.value && entry.title.value !== null){\r\n\t\t\tif(entry.title.type == \"text\"){\r\n\t\t\t\tvar titleNode = document.createTextNode(entry.title.value);\r\n\t\t\t\ttitleAnchorNode.appendChild(titleNode);\r\n\t\t\t}else{\r\n\t\t\t\tvar titleViewNode = document.createElement(\"span\");\r\n\t\t\t\tvar titleView = new ContentPane({refreshOnShow: true, executeScripts: false}, titleViewNode);\r\n\t\t\t\ttitleView.attr('content', entry.title.value);\r\n\t\t\t\ttitleAnchorNode.appendChild(titleView.domNode);\r\n\t\t\t}\r\n\t\t\tthis.setFieldValidity(\"title\", true);\r\n\t\t}\r\n\t},\r\n\r\n\tsetAuthorsHeader: function(/*DOMNode*/ authorHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the title format for the authors section of the author row in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the title format for the authors section of the author row in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the author data is filled out from an entry.\r\n\t\t// authorHeaderNode:\r\n\t\t//\t\tThe DOM node to attach the author section header data to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.authors && entry.authors.length > 0){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar authorHeader = new EntryHeader({title: _nlsResources.authors});\r\n\t\t\tauthorHeaderNode.appendChild(authorHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\tsetAuthors: function(/*DOMNode*/ authorsAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the author node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the author node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// authorsAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the author data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tauthorsAnchorNode.innerHTML = \"\";\r\n\t\tif(entry.authors && entry.authors.length > 0){\r\n\t\t\tfor(var i in entry.authors){\r\n\t\t\t\tif(entry.authors[i].name){\r\n\t\t\t\t\tvar anchor = authorsAnchorNode;\r\n\t\t\t\t\tif(entry.authors[i].uri){\r\n\t\t\t\t\t\tvar link = document.createElement(\"a\");\r\n\t\t\t\t\t\tanchor.appendChild(link);\r\n\t\t\t\t\t\tlink.href = entry.authors[i].uri;\r\n\t\t\t\t\t\tanchor = link;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar name = entry.authors[i].name;\r\n\t\t\t\t\tif(entry.authors[i].email){\r\n\t\t\t\t\t\tname = name + \" (\" + entry.authors[i].email + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar authorNode = document.createTextNode(name);\r\n\t\t\t\t\tanchor.appendChild(authorNode);\r\n\t\t\t\t\tvar breakNode = document.createElement(\"br\");\r\n\t\t\t\t\tauthorsAnchorNode.appendChild(breakNode);\r\n\t\t\t\t\tthis.setFieldValidity(\"authors\", true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tsetContributorsHeader: function(/*DOMNode*/ contributorsHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the contributor header node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the contributor header node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// contributorsHeaderNode:\r\n\t\t//\t\tThe DOM node to attach the contributor title to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.contributors && entry.contributors.length > 0){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar contributorHeader = new EntryHeader({title: _nlsResources.contributors});\r\n\t\t\tcontributorsHeaderNode.appendChild(contributorHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tsetContributors: function(/*DOMNode*/ contributorsAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the contributor node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the contributor node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// contributorsAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the contributor data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.contributors && entry.contributors.length > 0){\r\n\t\t\tfor(var i in entry.contributors){\r\n\t\t\t\tvar contributorNode = document.createTextNode(entry.contributors[i].name);\r\n\t\t\t\tcontributorsAnchorNode.appendChild(contributorNode);\r\n\t\t\t\tvar breakNode = document.createElement(\"br\");\r\n\t\t\t\tcontributorsAnchorNode.appendChild(breakNode);\r\n\t\t\t\tthis.setFieldValidity(\"contributors\", true);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t\t\t\t \r\n\tsetIdHeader: function(/*DOMNode*/ idHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the ID  node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the ID node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// idAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the ID data to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.id && entry.id !== null){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar idHeader = new EntryHeader({title: _nlsResources.id});\r\n\t\t\tidHeaderNode.appendChild(idHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tsetId: function(/*DOMNode*/ idAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the ID  node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the ID node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// idAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the ID data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.id && entry.id !== null){\r\n\t\t\tvar idNode = document.createTextNode(entry.id);\r\n\t\t\tidAnchorNode.appendChild(idNode);\r\n\t\t\tthis.setFieldValidity(\"id\", true);\r\n\t\t}\r\n\t},\r\n\t\r\n\tsetUpdatedHeader: function(/*DOMNode*/ updatedHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the updated header node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the updated header node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// updatedHeaderNode:\r\n\t\t//\t\tThe DOM node to attach the updated header data to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.updated && entry.updated !== null){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar updatedHeader = new EntryHeader({title: _nlsResources.updated});\r\n\t\t\tupdatedHeaderNode.appendChild(updatedHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\tsetUpdated: function(/*DOMNode*/ updatedAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the updated  node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the updated node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// updatedAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the udpated data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.updated && entry.updated !== null){\r\n\t\t\tvar updatedNode = document.createTextNode(entry.updated);\r\n\t\t\tupdatedAnchorNode.appendChild(updatedNode);\r\n\t\t\tthis.setFieldValidity(\"updated\", true);\r\n\t\t}\r\n\t},\r\n\r\n\tsetSummaryHeader: function(/*DOMNode*/ summaryHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the summary  node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the summary node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// summaryHeaderNode:\r\n\t\t//\t\tThe DOM node to attach the summary title to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.summary && entry.summary.value && entry.summary.value !== null){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar summaryHeader = new EntryHeader({title: _nlsResources.summary});\r\n\t\t\tsummaryHeaderNode.appendChild(summaryHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tsetSummary: function(/*DOMNode*/ summaryAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the summary  node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the summary node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// summaryAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the summary data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.summary && entry.summary.value && entry.summary.value !== null){\r\n\t\t\tvar summaryViewNode = document.createElement(\"span\");\r\n\t\t\tvar summaryView = new ContentPane({refreshOnShow: true, executeScripts: false}, summaryViewNode);\r\n\t\t\tsummaryView.attr('content', entry.summary.value);\r\n\t\t\tsummaryAnchorNode.appendChild(summaryView.domNode);\r\n\t\t\tthis.setFieldValidity(\"summary\", true);\r\n\t\t}\r\n\t},\r\n\r\n\tsetContentHeader: function(/*DOMNode*/ contentHeaderNode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the content node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the content node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// contentHeaderNode:\r\n\t\t//\t\tThe DOM node to attach the content data to.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.content && entry.content.value && entry.content.value !== null){\r\n\t\t\tvar _nlsResources = i18nViewer;\r\n\t\t\tvar contentHeader = new EntryHeader({title: _nlsResources.content});\r\n\t\t\tcontentHeaderNode.appendChild(contentHeader.domNode);\r\n\t\t}\r\n\t},\r\n\r\n\tsetContent: function(/*DOMNode*/ contentAnchorNode, /*boolean*/editMode, /*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the contents of the content node in the template to some value from the entry.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set the contents of the content node in the template to some value from the entry.\r\n\t\t//\t\tThis exists specifically so users can over-ride how the title data is filled out from an entry.\r\n\t\t// contentAnchorNode:\r\n\t\t//\t\tThe DOM node to attach the content data to.\r\n\t\t// editMode:\r\n\t\t//\t\tBoolean to indicate if the display should be in edit mode or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe Feed Entry to work with.\r\n\t\tif(entry.content && entry.content.value && entry.content.value !== null){\r\n\t\t\tvar contentViewNode = document.createElement(\"span\");\r\n\t\t\tvar contentView = new ContentPane({refreshOnShow: true, executeScripts: false},contentViewNode);\r\n\t\t\tcontentView.attr('content', entry.content.value);\r\n\t\t\tcontentAnchorNode.appendChild(contentView.domNode);\r\n\t\t\tthis.setFieldValidity(\"content\", true);\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t_displaySections: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for determining which sections of the view to actually display.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tdomStyle.set(this.entryTitleRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entryAuthorRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entryContributorRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entrySummaryRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entryContentRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entryIdRow, 'display', 'none');\r\n\t\tdomStyle.set(this.entryUpdatedRow, 'display', 'none');\r\n\r\n\t\tfor(var i in this._displayEntrySections){\r\n\t\t\tvar section = this._displayEntrySections[i].toLowerCase();\r\n\t\t\tif(section === \"title\" && this.isFieldValid(\"title\")){\r\n\t\t\t\tdomStyle.set(this.entryTitleRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"authors\" && this.isFieldValid(\"authors\")){\r\n\t\t\t\tdomStyle.set(this.entryAuthorRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"contributors\" && this.isFieldValid(\"contributors\")){\r\n\t\t\t\tdomStyle.set(this.entryContributorRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"summary\" && this.isFieldValid(\"summary\")){\r\n\t\t\t\tdomStyle.set(this.entrySummaryRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"content\" && this.isFieldValid(\"content\")){\r\n\t\t\t\tdomStyle.set(this.entryContentRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"id\" && this.isFieldValid(\"id\")){\r\n\t\t\t\tdomStyle.set(this.entryIdRow, 'display', '');\r\n\t\t\t}\r\n\t\t\tif(section === \"updated\" && this.isFieldValid(\"updated\")){\r\n\t\t\t\tdomStyle.set(this.entryUpdatedRow, 'display', '');\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t},\r\n\r\n\tsetDisplaySections: function(/*array*/sectionsArray){\r\n\t\t// summary:\r\n\t\t//\t\tFunction for setting which sections of the entry should be displayed.\r\n\t\t// sectionsArray:\r\n\t\t//\t\tArray of string names that indicate which sections to display.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(sectionsArray !== null){\r\n\t\t\tthis._displayEntrySections = sectionsArray;\r\n\t\t\tthis._displaySections();\r\n\t\t}else{\r\n\t\t\tthis._displayEntrySections = [\"title\",\"authors\",\"contributors\",\"summary\",\"content\",\"id\",\"updated\"];\r\n\t\t}\r\n\t},\r\n\r\n\t_setDisplaySectionsCheckboxes: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for setting which checkboxes on the display are selected.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tvar items = [\"title\",\"authors\",\"contributors\",\"summary\",\"content\",\"id\",\"updated\"];\r\n\t\tfor(var i in items){\r\n\t\t\tif(arrayUtil.indexOf(this._displayEntrySections, items[i]) == -1){\r\n\t\t\t\tdomStyle.set(this[\"feedEntryCell\"+items[i]], 'display', 'none');\r\n\t\t\t}else{\r\n\t\t\t\tthis[\"feedEntryCheckBox\"+items[i].substring(0,1).toUpperCase()+items[i].substring(1)].checked=true;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_readDisplaySections: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for reading what is currently checked for display and generating the display list from it.\r\n\t\tvar checkedList = [];\r\n\r\n\t\tif(this.feedEntryCheckBoxTitle.checked){\r\n\t\t\tcheckedList.push(\"title\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxAuthors.checked){\r\n\t\t\tcheckedList.push(\"authors\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxContributors.checked){\r\n\t\t\tcheckedList.push(\"contributors\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxSummary.checked){\r\n\t\t\tcheckedList.push(\"summary\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxContent.checked){\r\n\t\t\tcheckedList.push(\"content\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxId.checked){\r\n\t\t\tcheckedList.push(\"id\");\r\n\t\t}\r\n\t\tif(this.feedEntryCheckBoxUpdated.checked){\r\n\t\t\tcheckedList.push(\"updated\");\r\n\t\t}\r\n\t\tthis._displayEntrySections = checkedList;\r\n\t},\r\n\r\n\t_toggleCheckbox: function(/*object*/checkBox){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t// description:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t//\t\tThis is used for determining if the delete action should be displayed or not.\r\n\t\t// checkBox:\r\n\t\t//\t\tThe checkbox object to toggle the selection on.\r\n\t\tif(checkBox.checked){\r\n\t\t\tcheckBox.checked=false;\r\n\t\t}else{\r\n\t\t\tcheckBox.checked=true;\r\n\t\t}\r\n\t\tthis._readDisplaySections();\r\n\t\tthis._displaySections();\r\n\t},\r\n\r\n\t_toggleOptions: function(/*object*/checkBox){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t// description:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t//\t\tThis is used for determining if the delete action should be displayed or not.\r\n\t\t// checkBox:\r\n\t\t//\t\tThe checkbox object to toggle the selection on.\r\n\t\tif(this.enableMenu){\r\n\t\t\tvar fade = null;\r\n\t\t\tvar anim;\r\n\t\t\tvar anim2;\r\n\t\t\tif(this._optionButtonDisplayed){\r\n\t\t\t\tif(this.enableMenuFade){\r\n\t\t\t\t\tanim = fx.fadeOut({node: this.entryCheckBoxDisplayOptions,duration: 250});\r\n\t\t\t\t\tconnect.connect(anim, \"onEnd\", this, function(){\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxDisplayOptions, 'display', 'none');\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow, 'display', '');\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow2, 'display', '');\r\n\t\t\t\t\t\tfx.fadeIn({node: this.entryCheckBoxRow, duration: 250}).play();\r\n\t\t\t\t\t\tfx.fadeIn({node: this.entryCheckBoxRow2, duration: 250}).play();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tanim.play();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxDisplayOptions, 'display', 'none');\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow, 'display', '');\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow2, 'display', '');\r\n\t\t\t\t}\r\n\t\t\t\tthis._optionButtonDisplayed=false;\r\n\t\t\t}else{\r\n\t\t\t\tif(this.enableMenuFade){\r\n\t\t\t\t\tanim = fx.fadeOut({node: this.entryCheckBoxRow,duration: 250});\r\n\t\t\t\t\tanim2 = fx.fadeOut({node: this.entryCheckBoxRow2,duration: 250});\r\n\t\t\t\t\tconnect.connect(anim, \"onEnd\", this, function(){\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow, 'display', 'none');\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow2, 'display', 'none');\r\n\t\t\t\t\t\tdomStyle.set(this.entryCheckBoxDisplayOptions, 'display', '');\r\n\t\t\t\t\t\tfx.fadeIn({node: this.entryCheckBoxDisplayOptions, duration: 250}).play();\r\n\t\t\t\t\t});\r\n\t\t\t\t\tanim.play();\r\n\t\t\t\t\tanim2.play();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow, 'display', 'none');\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxRow2, 'display', 'none');\r\n\t\t\t\t\tdomStyle.set(this.entryCheckBoxDisplayOptions, 'display', '');\r\n\t\t\t\t}\r\n\t\t\t\tthis._optionButtonDisplayed=true;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_handleEvent: function(/*object*/entrySelectionEvent){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for listening to a topic that will handle entry notification.\r\n\t\t// entrySelectionEvent:\r\n\t\t//\t\tThe topic message containing the entry that was selected for view.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(entrySelectionEvent.source != this){\r\n\t\t\tif(entrySelectionEvent.action == \"set\" && entrySelectionEvent.entry){\r\n\t\t\t\tthis.setEntry(entrySelectionEvent.entry, entrySelectionEvent.feed);\r\n\t\t\t}else if(entrySelectionEvent.action == \"delete\" && entrySelectionEvent.entry && entrySelectionEvent.entry == this._entry){\r\n\t\t\t\tthis.clear();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tsetFieldValidity: function(/*string*/field, /*boolean*/isValid){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set whether a field in the view is valid and displayable.\r\n\t\t// description:\r\n\t\t//\t\tFunction to set whether a field in the view is valid and displayable.\r\n\t\t//\t\tThis is needed for over-riding of the set* functions and customization of how data is displayed in the attach point.\r\n\t\t//\t\tSo if custom implementations use their own display logic, they can still enable the field.\r\n\t\t// field:\r\n\t\t//\t\tThe field name to set the valid parameter on.  Such as 'content', 'id', etc.\r\n\t\t// isValid:\r\n\t\t//\t\tFlag denoting if the field is valid or not.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(field){\r\n\t\t\tvar lowerField = field.toLowerCase();\r\n\t\t\tthis._validEntryFields[field] = isValid;\r\n\t\t}\r\n\t},\r\n\t\r\n\tisFieldValid: function(/*string*/field){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to return if a displayable field is valid or not\r\n\t\t// field:\r\n\t\t//\t\tThe field name to get the valid parameter of.  Such as 'content', 'id', etc.\r\n\t\t// returns:\r\n\t\t//\t\tboolean denoting if the field is valid and set.\r\n\t\treturn this._validEntryFields[field.toLowerCase()];\r\n\t},\r\n\r\n\tgetEntry: function(){\r\n\t\treturn this._entry;\r\n\t},\r\n\r\n\tgetFeed: function(){\r\n\t\t return this._feed;\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\tthis.clear();\r\n\t\tarrayUtil.forEach(this._subscriptions, dojo.unsubscribe);\r\n\t}\r\n});\r\n\r\nvar EntryHeader = FeedEntryViewer.EntryHeader = declare(\"dojox.atom.widget.EntryHeader\", [_Widget, _Templated, _Container],{\r\n\t// summary:\r\n\t//\t\tWidget representing a header in a FeedEntryViewer/Editor\r\n\ttitle: \"\",\r\n\ttemplateString: headerTemplate,\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.setListHeader();\r\n\t},\r\n\r\n\tsetListHeader: function(/*string*/title){\r\n\t\tthis.clear();\r\n\t\tif(title){\r\n\t\t\tthis.title = title;\r\n\t\t}\r\n\t\tvar textNode = document.createTextNode(this.title);\r\n\t\tthis.entryHeaderNode.appendChild(textNode);\r\n\t},\r\n\r\n\tclear: function(){\r\n\t\tthis.destroyDescendants();\r\n\t\t if(this.entryHeaderNode){\r\n\t\t\t for(var i = 0; i < this.entryHeaderNode.childNodes.length; i++){\r\n\t\t\t\t this.entryHeaderNode.removeChild(this.entryHeaderNode.childNodes[i]);\r\n\t\t\t }\r\n\t\t }\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\tthis.clear();\r\n\t}\r\n});\r\n\r\n\r\nreturn FeedEntryViewer;\r\n});\r\n"]}