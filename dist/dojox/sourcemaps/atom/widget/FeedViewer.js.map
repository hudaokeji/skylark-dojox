{"version":3,"sources":["atom/widget/FeedViewer.js"],"names":["define","dojo","lang","arrayUtil","connect","declare","domClass","_Widget","_Templated","_Container","Connection","template","entryTemplate","groupingTemplate","i18nViewer","experimental","FeedViewer","feedViewerTableBody","feedViewerTable","entrySelectionTopic","url","xmethod","localSaveOnly","templateString","_feed","_currentSelection","_includeFilters","alertsEnabled","postCreate","this","_subscriptions","subscribe","atomIO","childWidgets","startup","containerNode","children","getDescendants","i","child","isFilter","push","CategoryIncludeFilter","scheme","term","label","destroy","setFeedFromUrl","clear","destroyDescendants","_isRelativeURL","baseUrl","charAt","_calculateBaseURL","window","location","href","getFeed","hitch","setFeed","feed","dateStr","dpts","sortedEntries","entries","sort","a","b","dispA","_displayDateForEntry","dispB","lastSectionTitle","length","entry","_isFilterAccepted","time","sectionTitle","toLocaleString","split","pop","join","getMonth","getDate","getFullYear","appendGrouping","appendEntry","updated","modified","issued","Date","titleText","entryWidget","FeedViewerGrouping","setText","addChild","FeedViewerEntry","setTitle","title","value","setTime","toLocaleTimeString","domNode","entryNode","_entryWidget","deleteEntry","entryRow","_removeEntry","publish","action","source","success","idx","indexOf","before","after","isInstanceOf","widget","undefined","_rowSelected","evt","selectedNode","target","contains","parentNode","add","remove","timeNode","onEntrySelected","_isEditable","enableDelete","_deselectCurrentSelection","disableDelete","retVal","links","x","rel","isFileURL","isHttpURL","fullURL","currentPageRelative","baseURL","index","substring","lastIndexOf","protocol","fragmentURL","accepted","match","addCategoryIncludeFilter","filter","addIt","eFilter","removeCategoryIncludeFilter","newFilters","_handleEvent","entrySelectionEvent","updateEntry","callback","_addEntry","addEntry","forEach","unsubscribe","deleteButton","_nlsResources","innerHTML","text","titleNode","lastChild","removeChild","titleTextNode","document","createElement","appendChild","timeText","timeTextNode","createTextNode","style","display","event","preventDefault","stopPropagation","onClick","e","groupingNode","textNode","AtomEntryCategoryFilter","constructor","matched","categories","category"],"mappings":"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","file":"../../../atom/widget/FeedViewer.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/dom-class\",\r\n\t\"dijit/_Widget\",\r\n\t\"dijit/_Templated\",\r\n\t\"dijit/_Container\",\r\n\t\"../io/Connection\",\r\n\t\"dojo/text!./templates/FeedViewer.html\",\r\n\t\"dojo/text!./templates/FeedViewerEntry.html\",\r\n\t\"dojo/text!./templates/FeedViewerGrouping.html\",\r\n\t\"dojo/i18n!./nls/FeedViewerEntry\"\r\n], function (dojo, lang, arrayUtil, connect, declare, domClass, _Widget, _Templated, _Container, Connection, template, entryTemplate, groupingTemplate, i18nViewer) {\r\ndojo.experimental(\"dojox.atom.widget.FeedViewer\");\r\n\r\nvar FeedViewer = declare(\"dojox.atom.widget.FeedViewer\", [_Widget, _Templated, _Container],{\r\n\t// summary:\r\n\t//\t\tAn ATOM feed viewer that allows for viewing a feed, deleting entries, and editing entries.\r\n\r\n\tfeedViewerTableBody: null,\t//The body of the feed viewer table so we can access it and populate it.  Will be assigned via template.\r\n\tfeedViewerTable: null,\t\t//The overal table container which contains the feed viewer table.  Will be assigned via template.\r\n\tentrySelectionTopic: \"\",\t//The topic to broadcast when any entry is clicked so that a listener can pick up it and display it.\r\n\turl: \"\",\t\t\t\t\t//The URL to which to connect to initially on creation.\r\n\txmethod: false,\r\n\tlocalSaveOnly: false,\r\n\r\n\t//Templates for the HTML rendering.  Need to figure these out better, admittedly.\r\n\ttemplateString: template,\r\n\r\n\t_feed: null,\r\n\t_currentSelection: null, // Currently selected entry\r\n\r\n\t_includeFilters: null,\r\n\r\n\talertsEnabled: false,\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tThe postCreate function.\r\n\t\t// description:\r\n\t\t//\t\tThe postCreate function.  Creates our AtomIO object for future interactions and subscribes to the\r\n\t\t//\t\tevent given in markup/creation.\r\n\t\tthis._includeFilters = [];\r\n\r\n\t\tif(this.entrySelectionTopic !== \"\"){\r\n\t\t\tthis._subscriptions = [dojo.subscribe(this.entrySelectionTopic, this, \"_handleEvent\")];\r\n\t\t}\r\n\t\tthis.atomIO = new Connection();\r\n\t\tthis.childWidgets = [];\r\n\t},\r\n\t\r\n\tstartup: function(){\r\n\t\t// summary:\r\n\t\t//\t\tThe startup function.\r\n\t\t// description:\r\n\t\t//\t\tThe startup function.  Parses the filters and sets the feed based on the given url.\r\n\t\tthis.containerNode = this.feedViewerTableBody;\r\n\t\tvar children = this.getDescendants();\r\n\t\tfor(var i in children){\r\n\t\t\tvar child = children[i];\r\n\t\t\tif(child && child.isFilter){\r\n\t\t\t\tthis._includeFilters.push(new FeedViewer.CategoryIncludeFilter(child.scheme, child.term, child.label));\r\n\t\t\t\tchild.destroy();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(this.url !== \"\"){\r\n\t\t\tthis.setFeedFromUrl(this.url);\r\n\t\t}\r\n\t},\r\n\r\n\tclear: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction clearing all current entries in the feed view.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tthis.destroyDescendants();\r\n\t},\r\n\r\n\tsetFeedFromUrl: function(/*string*/url){\r\n\t\t// summary:\r\n\t\t//\t\tFunction setting the feed from a URL which to get the feed.\r\n\t\t// url:\r\n\t\t//\t\tThe URL to the feed to load.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(url !== \"\"){\r\n\t\t\tif(this._isRelativeURL(url)){\r\n\t\t\t\tvar baseUrl = \"\";\r\n\t\t\t\tif(url.charAt(0) !== '/'){\r\n\t\t\t\t\tbaseUrl = this._calculateBaseURL(window.location.href, true);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbaseUrl = this._calculateBaseURL(window.location.href, false);\r\n\t\t\t\t}\r\n\t\t\t\tthis.url = baseUrl + url;\r\n\t\t\t}\r\n\r\n\t\t\tthis.atomIO.getFeed(url,lang.hitch(this,this.setFeed));\r\n\t\t}\r\n\t},\r\n\r\n\r\n\tsetFeed: function(/*object*/feed){\r\n\t\t// summary:\r\n\t\t//\t\tFunction setting the dojox.atom.io.model.Feed data into the view.\r\n\t\t// entry:\r\n\t\t//\t\tThe dojox.atom.io.model.Feed object to process\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tthis._feed = feed;\r\n\t\tthis.clear();\r\n\t\tvar entrySorter=function(a,b){\r\n\t\t\tvar dispA = this._displayDateForEntry(a);\r\n\t\t\tvar dispB = this._displayDateForEntry(b);\r\n\t\t\tif(dispA > dispB){return -1;}\r\n\t\t\tif(dispA < dispB){return 1;}\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// This function may not be safe in different locales.\r\n\t\tvar groupingStr = function(dateStr){\r\n\t\t\tvar dpts = dateStr.split(',');\r\n\t\t\t\r\n\t\t\tdpts.pop(); // remove year and time\r\n\t\t\treturn dpts.join(\",\");\r\n\t\t};\r\n\t\tvar sortedEntries = feed.entries.sort(lang.hitch(this,entrySorter));\r\n\t\tif(feed){\r\n\t\t\tvar lastSectionTitle = null;\r\n\t\t\tfor(var i=0;i<sortedEntries.length;i++){\r\n\t\t\t\t\r\n\t\t\t\tvar entry = sortedEntries[i];\r\n\r\n\t\t\t\tif(this._isFilterAccepted(entry)){\r\n\t\t\t\t\tvar time = this._displayDateForEntry(entry);\r\n\t\t\t\t\tvar sectionTitle = \"\";\r\n\r\n\t\t\t\t\tif(time !== null){\r\n\t\t\t\t\t\tsectionTitle = groupingStr(time.toLocaleString());\r\n\r\n\t\t\t\t\t\tif(sectionTitle === \"\" ){\r\n\t\t\t\t\t\t\t//Generally an issue on Opera with how its toLocaleString() works, so do a quick and dirty date construction M/D/Y\r\n\t\t\t\t\t\t\tsectionTitle = \"\" + (time.getMonth() + 1) + \"/\" + time.getDate() + \"/\" + time.getFullYear();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif((lastSectionTitle === null) || (lastSectionTitle != sectionTitle)){\r\n\t\t\t\t\t\tthis.appendGrouping(sectionTitle);\r\n\t\t\t\t\t\tlastSectionTitle = sectionTitle;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.appendEntry(entry);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_displayDateForEntry: function(/*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for determining the appropriate date to display.\r\n\t\t// entry:\r\n\t\t//\t\tThe dojox.atom.io.model.Entry object to examine.\r\n\t\t// returns:\r\n\t\t//\t\tAn appropriate date for the feed viewer display.\r\n\t\tif(entry.updated){return entry.updated;}\r\n\t\tif(entry.modified){return entry.modified;}\r\n\t\tif(entry.issued){return entry.issued;}\r\n\t\treturn new Date();\r\n\t},\r\n\r\n\tappendGrouping: function(/*string*/titleText){\r\n\t\t// summary:\r\n\t\t//\t\tFunction for appending a new grouping of entries to the feed view.\r\n\t\t// entry:\r\n\t\t//\t\tThe title of the new grouping to create on the view.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tvar entryWidget = new FeedViewerGrouping({});\r\n\t\tentryWidget.setText(titleText);\r\n\t\tthis.addChild(entryWidget);\r\n\t\tthis.childWidgets.push(entryWidget);\r\n\t},\r\n\r\n\tappendEntry: function(/*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction for appending an entry to the feed view.\r\n\t\t// entry:\r\n\t\t//\t\tThe dojox.atom.io.model.Entry object to append\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tvar entryWidget = new FeedViewerEntry({\"xmethod\": this.xmethod});\r\n\t\tentryWidget.setTitle(entry.title.value);\r\n\t\tentryWidget.setTime(this._displayDateForEntry(entry).toLocaleTimeString());\r\n\t\tentryWidget.entrySelectionTopic = this.entrySelectionTopic;\r\n\t\tentryWidget.feed = this;\r\n\t\tthis.addChild(entryWidget);\r\n\t\tthis.childWidgets.push(entryWidget);\r\n\t\tthis.connect(entryWidget, \"onClick\", \"_rowSelected\");\r\n\t\tentry.domNode = entryWidget.entryNode;\r\n\t\t\r\n\t\t//Need to set up a bi-directional reference here to control events between the two.\r\n\t\tentry._entryWidget = entryWidget;\r\n\t\tentryWidget.entry = entry;\r\n\t},\r\n\t\r\n\tdeleteEntry: function(/*object*/entryRow){\r\n\t\t// summary:\r\n\t\t//\t\tFunction for deleting a row from the view\r\n\t\tif(!this.localSaveOnly){\r\n\t\t\tthis.atomIO.deleteEntry(entryRow.entry, lang.hitch(this, this._removeEntry, entryRow), null, this.xmethod);\r\n\t\t}else{\r\n\t\t\tthis._removeEntry(entryRow, true);\r\n\t\t}\r\n\t\tdojo.publish(this.entrySelectionTopic, [{ action: \"delete\", source: this, entry: entryRow.entry }]);\r\n\t},\r\n\r\n\t_removeEntry: function(/*FeedViewerEntry*/ entry, /* boolean */success){\r\n\t\t// summary:\r\n\t\t//\t\tcallback for when an entry is deleted from a feed.\r\n\t\tif(success){\r\n\t\t\t/* Check if this is the last Entry beneath the given date */\r\n\t\t\tvar idx = arrayUtil.indexOf(this.childWidgets, entry);\r\n\t\t\tvar before = this.childWidgets[idx-1];\r\n\t\t\tvar after = this.childWidgets[idx+1];\r\n\t\t\tif( before.isInstanceOf(widget.FeedViewerGrouping) &&\r\n\t\t\t\t(after === undefined || after.isInstanceOf(widget.FeedViewerGrouping))){\r\n\t\t\t\tbefore.destroy();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/* Destroy the FeedViewerEntry to remove it from the view */\r\n\t\t\tentry.destroy();\r\n\t\t}else{}\r\n\t},\r\n\t\r\n\t_rowSelected: function(/*object*/evt){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for handling the selection of feed entries.\r\n\t\t// evt:\r\n\t\t//\t\tThe click event that triggered a selection.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tvar selectedNode = evt.target;\r\n\t\twhile(selectedNode){\r\n\t\t\tif(domClass.contains(selectedNode, 'feedViewerEntry')) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tselectedNode = selectedNode.parentNode;\r\n\t\t}\r\n\r\n\t\tfor(var i=0;i<this._feed.entries.length;i++){\r\n\t\t\tvar entry = this._feed.entries[i];\r\n\t\t\tif( (selectedNode === entry.domNode) && (this._currentSelection !== entry) ){\r\n\t\t\t\t//Found it and it isn't already selected.\r\n\t\t\t\tdomClass.add(entry.domNode, \"feedViewerEntrySelected\");\r\n\t\t\t\tdomClass.remove(entry._entryWidget.timeNode, \"feedViewerEntryUpdated\");\r\n\t\t\t\tdomClass.add(entry._entryWidget.timeNode, \"feedViewerEntryUpdatedSelected\");\r\n\r\n\t\t\t\tthis.onEntrySelected(entry);\r\n\t\t\t\tif(this.entrySelectionTopic !== \"\"){\r\n\t\t\t\t\tdojo.publish(this.entrySelectionTopic, [{ action: \"set\", source: this, feed: this._feed, entry: entry }]);\r\n\t\t\t\t}\r\n\t\t\t\tif(this._isEditable(entry)){\r\n\t\t\t\t\tentry._entryWidget.enableDelete();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._deselectCurrentSelection();\r\n\t\t\t\tthis._currentSelection = entry;\r\n\t\t\t\tbreak;\r\n\t\t\t}else if( (selectedNode === entry.domNode) && (this._currentSelection === entry) ){\r\n\t\t\t\t//Found it and it is the current selection, we just want to de-select it so users can 'unselect rows' if they want.\r\n\t\t\t\tdojo.publish(this.entrySelectionTopic, [{ action: \"delete\", source: this, entry: entry }]);\r\n\t\t\t\tthis._deselectCurrentSelection();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_deselectCurrentSelection: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for unselecting the current selection.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(this._currentSelection){\r\n\t\t\tdomClass.add(this._currentSelection._entryWidget.timeNode, \"feedViewerEntryUpdated\");\r\n\t\t\tdomClass.remove(this._currentSelection.domNode, \"feedViewerEntrySelected\");\r\n\t\t\tdomClass.remove(this._currentSelection._entryWidget.timeNode, \"feedViewerEntryUpdatedSelected\");\r\n\t\t\tthis._currentSelection._entryWidget.disableDelete();\r\n\t\t\tthis._currentSelection = null;\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t_isEditable: function(/*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t// description:\r\n\t\t//\t\tInternal function for determining of a particular entry is editable.\r\n\t\t//\t\tThis is used for determining if the delete action should be displayed or not.\r\n\t\t// entry:\r\n\t\t//\t\tThe dojox.atom.io.model.Entry object to examine\r\n\t\t// returns:\r\n\t\t//\t\tBoolean denoting if the entry seems editable or not..\r\n\t\tvar retVal = false;\r\n\t\tif(entry && entry !== null && entry.links && entry.links !== null){\r\n\t\t\tfor(var x in entry.links){\r\n\t\t\t\tif(entry.links[x].rel && entry.links[x].rel == \"edit\"){\r\n\t\t\t\t\tretVal = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retVal;\r\n\t},\r\n\r\n\tonEntrySelected: function(/*object*/entry){\r\n\t\t// summary:\r\n\t\t//\t\tFunction intended for over-riding/replacement as an attachpoint to for other items to receive\r\n\t\t//\t\tselection notification.\r\n\t\t// entry:\r\n\t\t//\t\tThe dojox.atom.io.model.Entry object selected.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t},\r\n\r\n\t_isRelativeURL: function(/*string*/url){\r\n\t\t// summary:\r\n\t\t//\t\tMethod to determine if the URL is relative or absolute.\r\n\t\t// description:\r\n\t\t//\t\tMethod to determine if the URL is relative or absolute.  Basic assumption is if it doesn't start\r\n\t\t//\t\twith http:// or file://, it's relative to the current document.\r\n\t\t// url:\r\n\t\t//\t\tThe URL to inspect.\r\n\t\t// returns:\r\n\t\t//\t\tboolean indicating whether it's a relative url or not.\r\n\t\tvar isFileURL = function(url){\r\n\t\t\tvar retVal = false;\r\n\t\t\tif(url.indexOf(\"file://\") === 0){\r\n\t\t\t\tretVal = true;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t};\r\n\r\n\t\tvar isHttpURL = function(url){\r\n\t\t\tvar retVal = false;\r\n\t\t\tif(url.indexOf(\"http://\") === 0){\r\n\t\t\t\tretVal = true;\r\n\t\t\t}\r\n\t\t\treturn retVal;\r\n\t\t};\r\n\r\n\t\tvar retVal = false;\r\n\t\tif(url !== null){\r\n\t\t\tif(!isFileURL(url) && !isHttpURL(url)){\r\n\t\t\t\tretVal = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retVal;\r\n\t},\r\n\r\n\t_calculateBaseURL: function(/*string*/fullURL, /*boolean*/currentPageRelative){\r\n\t\t// summary:\r\n\t\t//\t\tInternal function to calculate a baseline URL from the provided full URL.\r\n\t\t// fullURL:\r\n\t\t//\t\tThe full URL as a string.\r\n\t\t// currentPageRelative:\r\n\t\t//\t\tFlag to denote of the base URL should be calculated as just the server base, or relative to the current page/location in the URL.\r\n\t\t// returns:\r\n\t\t//\t\tString of the baseline URL\r\n\t\tvar baseURL = null;\r\n\t\tif(fullURL !== null){\r\n\t\t\t//Check to see if we need to strip off any query parameters from the URL.\r\n\t\t\tvar index = fullURL.indexOf(\"?\");\r\n\t\t\tif(index != -1){\r\n\t\t\t\tfullURL = fullURL.substring(0,index);\r\n\t\t\t\t//console.debug(\"Removed query parameters.  URL now: \" + fullURL);\r\n\t\t\t}\r\n\r\n\t\t\tif(currentPageRelative){\r\n\t\t\t\t//Relative to the 'current page' in the URL, so we need to trim that off.\r\n\t\t\t\t//Now we need to trim if necessary.  If it ends in /, then we don't have a filename to trim off\r\n\t\t\t\t//so we can return.\r\n\t\t\t\tindex = fullURL.lastIndexOf(\"/\");\r\n\t\t\t\tif((index > 0) && (index < fullURL.length) && (index !== (fullURL.length -1))){\r\n\t\t\t\t\t//We want to include the terminating /\r\n\t\t\t\t\tbaseURL = fullURL.substring(0,(index + 1));\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbaseURL = fullURL;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t//We want to find the first occurrence of / after the <protocol>://\r\n\t\t\t\tindex = fullURL.indexOf(\"://\");\r\n\t\t\t\tif(index > 0){\r\n\t\t\t\t\tindex = index + 3;\r\n\t\t\t\t\tvar protocol = fullURL.substring(0,index);\r\n\t\t\t\t\tvar fragmentURL = fullURL.substring(index, fullURL.length);\r\n\t\t\t\t\tindex = fragmentURL.indexOf(\"/\");\r\n\t\t\t\t\tif((index < fragmentURL.length) && (index > 0) ){\r\n\t\t\t\t\t\tbaseURL = protocol + fragmentURL.substring(0,index);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbaseURL = protocol + fragmentURL;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn baseURL;\r\n\t},\r\n\r\n\t_isFilterAccepted: function(/*object*/entry) {\r\n\t\t// summary:\r\n\t\t//\t\tInternal function to do matching of category filters to widgets.\r\n\t\t// returns:\r\n\t\t//\t\tboolean denoting if this entry matched one of the accept filters.\r\n\t\tvar accepted = false;\r\n\t\tif (this._includeFilters && (this._includeFilters.length > 0)) {\r\n\t\t\tfor (var i = 0; i < this._includeFilters.length; i++) {\r\n\t\t\t\tvar filter = this._includeFilters[i];\r\n\t\t\t\tif (filter.match(entry)) {\r\n\t\t\t\t\taccepted = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\taccepted = true;\r\n\t\t}\r\n\t\treturn accepted;\r\n\t},\r\n\r\n\taddCategoryIncludeFilter: function(/*object*/filter) {\r\n\t\t// summary:\r\n\t\t//\t\tFunction to add a filter for entry inclusion in the feed view.\r\n\t\t// filter:\r\n\t\t//\t\tThe basic items to filter on and the values.\r\n\t\t//\t\tShould be of format: {scheme: ``some text or null``, term: ``some text or null``, label: ``some text or null``}\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (filter) {\r\n\t\t\tvar scheme = filter.scheme;\r\n\t\t\tvar term = filter.term;\r\n\t\t\tvar label = filter.label;\r\n\t\t\tvar addIt = true;\r\n\r\n\t\t\tif (!scheme) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\tif (!term) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\tif (!label) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this._includeFilters && this._includeFilters.length > 0) {\r\n\t\t\t\tfor (var i = 0; i < this._includeFilters.length; i++) {\r\n\t\t\t\t\tvar eFilter = this._includeFilters[i];\r\n\t\t\t\t\tif ((eFilter.term === term) && (eFilter.scheme === scheme) && (eFilter.label === label)) {\r\n\t\t\t\t\t\t//Verify we don't have this filter already.\r\n\t\t\t\t\t\taddIt = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (addIt) {\r\n\t\t\t\tthis._includeFilters.push(widget.FeedViewer.CategoryIncludeFilter(scheme, term, label));\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremoveCategoryIncludeFilter: function(/*object*/filter) {\r\n\t\t// summary:\r\n\t\t//\t\tFunction to remove a filter for entry inclusion in the feed view.\r\n\t\t// filter:\r\n\t\t//\t\tThe basic items to identify the filter that is present.\r\n\t\t//\t\tShould be of format: {scheme: ``some text or null``, term: ``some text or null``, label: ``some text or null``}\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (filter) {\r\n\t\t\tvar scheme = filter.scheme;\r\n\t\t\tvar term = filter.term;\r\n\t\t\tvar label = filter.label;\r\n\r\n\t\t\tif (!scheme) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\tif (!term) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\tif (!label) {\r\n\t\t\t\tscheme = null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar newFilters = [];\r\n\t\t\tif (this._includeFilters && this._includeFilters.length > 0) {\r\n\t\t\t\tfor (var i = 0; i < this._includeFilters.length; i++) {\r\n\t\t\t\t\tvar eFilter = this._includeFilters[i];\r\n\t\t\t\t\tif (!((eFilter.term === term) && (eFilter.scheme === scheme) && (eFilter.label === label))) {\r\n\t\t\t\t\t\t//Keep only filters that do not match\r\n\t\t\t\t\t\tnewFilters.push(eFilter);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._includeFilters = newFilters;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_handleEvent: function(/*object*/entrySelectionEvent) {\r\n\t\t// summary:\r\n\t\t//\t\tInternal function for listening to a topic that will handle entry notification.\r\n\t\t// entrySelectionEvent:\r\n\t\t//\t\tThe topic message containing the entry that was selected for view.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif(entrySelectionEvent.source != this) {\r\n\t\t\tif(entrySelectionEvent.action == \"update\" && entrySelectionEvent.entry) {\r\n                var evt = entrySelectionEvent;\r\n\t\t\t\tif(!this.localSaveOnly){\r\n\t\t\t\t\tthis.atomIO.updateEntry(evt.entry, lang.hitch(evt.source,evt.callback), null, true);\r\n\t\t\t\t}\r\n\t\t\t\tthis._currentSelection._entryWidget.setTime(this._displayDateForEntry(evt.entry).toLocaleTimeString());\r\n\t\t\t\tthis._currentSelection._entryWidget.setTitle(evt.entry.title.value);\r\n\t\t\t} else if(entrySelectionEvent.action == \"post\" && entrySelectionEvent.entry) {\r\n\t\t\t\tif(!this.localSaveOnly){\r\n\t\t\t\t\tthis.atomIO.addEntry(entrySelectionEvent.entry, this.url, lang.hitch(this,this._addEntry));\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._addEntry(entrySelectionEvent.entry);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\r\n\t_addEntry: function(/*object*/entry) {\r\n\t\t// summary:\r\n\t\t//\t\tcallback function used when adding an entry to the feed.\r\n\t\t// description:\r\n\t\t//\t\tcallback function used when adding an entry to the feed.  After the entry has been posted to the feed,\r\n\t\t//\t\twe add it to our feed representation (to show it on the page) and publish an event to update any entry viewers.\r\n\t\tthis._feed.addEntry(entry);\r\n\t\tthis.setFeed(this._feed);\r\n\t\tdojo.publish(this.entrySelectionTopic, [{ action: \"set\", source: this, feed: this._feed, entry: entry }]);\r\n\t},\r\n\r\n\tdestroy: function(){\r\n\t\t// summary:\r\n\t\t//\t\tDestroys this widget, including all descendants and subscriptions.\r\n\t\tthis.clear();\r\n\t\tarrayUtil.forEach(this._subscriptions, dojo.unsubscribe);\r\n\t}\r\n});\r\n\r\nvar FeedViewerEntry = FeedViewer.FeedViewerEntry = declare(\"dojox.atom.widget.FeedViewerEntry\", [_Widget, _Templated],{\r\n\t// summary:\r\n\t//\t\tWidget for handling the display of an entry and specific events associated with it.\r\n\r\n\ttemplateString: entryTemplate,\r\n\r\n\tentryNode: null,\r\n\ttimeNode: null,\r\n\tdeleteButton: null,\r\n\tentry: null,\r\n\tfeed: null,\r\n\r\n\tpostCreate: function(){\r\n\t\tvar _nlsResources = i18nViewer;\r\n\t\tthis.deleteButton.innerHTML = _nlsResources.deleteButton;\r\n\t},\r\n\r\n\tsetTitle: function(/*string*/text){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the title of the entry.\r\n\t\t// text:\r\n\t\t//\t\tThe title.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (this.titleNode.lastChild){this.titleNode.removeChild(this.titleNode.lastChild);}\r\n\t\t\r\n\t\tvar titleTextNode = document.createElement(\"div\");\r\n\t\ttitleTextNode.innerHTML = text;\r\n\t\tthis.titleNode.appendChild(titleTextNode);\r\n\t},\r\n\r\n\tsetTime: function(/*string*/timeText){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to set the time of the entry.\r\n\t\t// timeText:\r\n\t\t//\t\tThe string form of the date.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (this.timeNode.lastChild){this.timeNode.removeChild(this.timeNode.lastChild);}\r\n\t\tvar timeTextNode = document.createTextNode(timeText);\r\n\t\tthis.timeNode.appendChild(timeTextNode);\r\n\t},\r\n\r\n\tenableDelete: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to enable the delete action on this entry.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (this.deleteButton !== null) {\r\n\t\t\t//TODO Fix this\r\n\t\t\tthis.deleteButton.style.display = 'inline';\r\n\t\t}\r\n\t},\r\n\r\n\tdisableDelete: function(){\r\n\t\t// summary:\r\n\t\t//\t\tFunction to disable the delete action on this entry.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tif (this.deleteButton !== null) {\r\n\t\t\tthis.deleteButton.style.display = 'none';\r\n\t\t}\r\n\t},\r\n\r\n\tdeleteEntry: function(/*object*/event) {\r\n\t\t// summary:\r\n\t\t//\t\tFunction to handle the delete event and delete the entry.\r\n\t\t// returns:\r\n\t\t//\t\tNothing.\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\t\tthis.feed.deleteEntry(this);\r\n\t},\r\n\r\n\tonClick: function(/*object*/e){\r\n\t\t// summary:\r\n\t\t//\t\tAttach point for when a row is clicked on.\r\n\t\t// e:\r\n\t\t//\t\tThe event generated by the click.\r\n\t}\r\n});\r\n\r\nvar FeedViewerGrouping = FeedViewer.FeedViewerGrouping = declare(\"dojox.atom.widget.FeedViewerGrouping\", [_Widget, _Templated],{\r\n\t// summary:\r\n\t//\t\tGrouping of feed entries.\r\n\r\n\ttemplateString: groupingTemplate,\r\n\t\r\n\tgroupingNode: null,\r\n\ttitleNode: null,\r\n\r\n\tsetText: function(text){\r\n\t\t// summary:\r\n\t\t//\t\tSets the text to be shown above this grouping.\r\n\t\t// text:\r\n\t\t//\t\tThe text to show.\r\n\t\tif (this.titleNode.lastChild){this.titleNode.removeChild(this.titleNode.lastChild);}\r\n\t\tvar textNode = document.createTextNode(text);\r\n\t\tthis.titleNode.appendChild(textNode);\r\n\t}\r\n});\r\n\r\nFeedViewer.AtomEntryCategoryFilter = declare(\"dojox.atom.widget.AtomEntryCategoryFilter\",  null,{\r\n\t// summary:\r\n\t//\t\tA filter to be applied to the list of entries.\r\n\tscheme: \"\",\r\n\tterm: \"\",\r\n\tlabel: \"\",\r\n\tisFilter: true\r\n});\r\n\r\nFeedViewer.CategoryIncludeFilter = declare(\"dojox.atom.widget.FeedViewer.CategoryIncludeFilter\", null,{\r\n\tconstructor: function(scheme, term, label){\r\n\t\t// summary:\r\n\t\t//\t\tThe initializer function.\r\n\t\tthis.scheme = scheme;\r\n\t\tthis.term = term;\r\n\t\tthis.label = label;\r\n\t},\r\n\r\n\tmatch: function(entry) {\r\n\t\t// summary:\r\n\t\t//\t\tFunction to determine if this category filter matches against a category on an atom entry\r\n\t\t// returns:\r\n\t\t//\t\tboolean denoting if this category filter matched to this entry.\r\n\t\tvar matched = false;\r\n\t\tif (entry !== null) {\r\n\t\t\tvar categories = entry.categories;\r\n\t\t\tif (categories !== null) {\r\n\t\t\t\tfor (var i = 0; i < categories.length; i++) {\r\n\t\t\t\t\tvar category = categories[i];\r\n\r\n\t\t\t\t\tif (this.scheme !== \"\") {\r\n\t\t\t\t\t\tif (this.scheme !== category.scheme) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (this.term !== \"\") {\r\n\t\t\t\t\t\tif (this.term !== category.term) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this.label !== \"\") {\r\n\t\t\t\t\t\tif (this.label !== category.label) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Made it this far, everything matched.\r\n\t\t\t\t\tmatched = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn matched;\r\n\t}\r\n});\r\n\r\nreturn FeedViewer;\r\n});"]}