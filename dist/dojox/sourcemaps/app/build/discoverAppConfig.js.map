{"version":3,"sources":["app/build/discoverAppConfig.js"],"names":["define","argv","fs","bc","messages","process","json","parseViews","mids","mainLayer","views","params","key","indexOf","view","controller","mid","replace","layers","multipleAppConfigLayers","include","exclude","push","template","text","nls","dependencies","Array","prototype","splice","apply","length","concat","config","fromJson","readFileSync","getSrcModuleInfo","args","appConfigFile","url","e","console","log","loaderConfig","require","appConfigLayer","l","controllers","modules","transit","exit"],"mappings":";;;;;;;AAAAA,QACC,aACA,WACA,qBACA,iBACA,gBACA,kBACE,SAASC,EAAMC,EAAIC,EAAIC,EAAUC,EAASC,GAC5C,IAAIC,EAAa,SAASC,EAAMC,EAAWC,EAAOC,GACjD,IAAI,IAAIC,KAAOF,EAEd,GAAuB,GAApBE,EAAIC,QAAQ,KAAf,CAGA,IAAIC,EAAOJ,EAAME,GAEjB,GAAGE,EAAKC,YAAiC,QAAnBD,EAAKC,WAAqB,CAC/C,IAAIC,EAAMF,EAAKC,WAAWE,QAAQ,UAAW,KACzCd,EAAGe,OAAOF,IAAQb,EAAGgB,0BACxBhB,EAAGe,OAAOF,IAASI,WAAaC,SAAW,YAAaZ,IACxDD,EAAOL,EAAGe,OAAOF,GAAKI,SAEvBZ,EAAKc,KAAKN,GAERF,EAAKS,WAGHZ,EAAOa,OACVb,EAAOa,MAAO,EACdrB,EAAGe,OAAOT,GAAWW,QAAQE,KAAK,cAEnCd,EAAKc,KAAKR,EAAKS,WAEbT,EAAKW,MAEHd,EAAOc,MACVd,EAAOc,KAAM,EACbtB,EAAGe,OAAOT,GAAWW,QAAQE,KAAK,cAEnCd,EAAKc,KAAKR,EAAKW,MAEbX,EAAKY,cACPC,MAAMC,UAAUC,OAAOC,MAAMtB,GAAQA,EAAKuB,OAAQ,GAAIC,OAAOlB,EAAKY,eAEhEZ,EAAKJ,OACPH,EAAWC,EAAMC,EAAWK,EAAKJ,MAAOC,KAI3C,OAAO,WACN,IAAIsB,EACJ,IACCA,EAAS3B,EAAK4B,SAAShC,EAAGiC,aAAahC,EAAGiC,iBAAiBnC,EAAKoC,KAAKC,cAAe,MAAM,GAAOC,MACjG,MAAMC,GACNC,QAAQC,IAAIF,GAEb,GAAGP,EAAO,CACT,IAKIxB,EALAD,KAAWG,KAMf,GALGsB,EAAOU,cACTC,QAAQX,EAAOU,cAIZ1C,EAAKoC,KAAKQ,eAObpC,EAAYR,EAAKoC,KAAKQ,eAClB1C,EAAGe,OAAOT,KACbN,EAAGe,OAAOT,IAAeW,WAAaC,SAAW,oBAPlD,IAAI,IAAIyB,KAAK3C,EAAGe,OAAO,CACtBT,EAAYqC,EACZ,MAQCb,EAAOP,eACTlB,EAAOA,EAAKwB,OAAOC,EAAOP,eAExBO,EAAOc,cACTvC,EAAOA,EAAKwB,OAAOC,EAAOc,cAExBd,EAAOe,UACTxC,EAAOA,EAAKwB,OAAOC,EAAOe,UAExBf,EAAOgB,QACTzC,EAAKc,KAAKW,EAAOgB,SAEjBzC,EAAKc,KAAK,sBAERW,EAAOV,WACTZ,EAAOa,MAAO,EACdrB,EAAGe,OAAOT,GAAWW,QAAQE,KAAK,aAClCd,EAAKc,KAAKW,EAAOV,WAEfU,EAAOlB,YAAmC,QAArBkB,EAAOlB,YAC9BP,EAAKc,KAAKW,EAAOlB,WAAWE,QAAQ,UAAW,KAE7CgB,EAAOR,MAETd,EAAOc,KAAM,EACbtB,EAAGe,OAAOT,GAAWW,QAAQE,KAAK,aAClCd,EAAKc,KAAKW,EAAOR,MAEfQ,EAAOnB,KAETN,EAAKc,KAAKW,EAAOnB,MAGjBN,EAAKc,KAAK,kBAGRW,EAAOvB,OACTH,EAAWC,EAAMC,EAAWwB,EAAOvB,MAAOC,GAE3CgB,MAAMC,UAAUC,OAAOC,MAAM3B,EAAGe,OAAOT,GAAWW,SAAUjB,EAAGe,OAAOT,GAAWsB,OAAQ,GAAGC,OAAOxB,SAEnGJ,EAASsC,IAAI,SAAUzC,EAAKoC,KAAKC,cAAc,8CAC/CjC,EAAQ6C,MAAM","file":"../../../app/build/discoverAppConfig.js","sourcesContent":["define([\r\n\t\"build/argv\",\r\n\t\"build/fs\",\r\n\t\"build/buildControl\",\r\n\t\"build/messages\",\r\n\t\"build/process\",\r\n\t\"dojox/json/ref\"\r\n], function(argv, fs, bc, messages, process, json){\r\n\tvar parseViews = function(mids, mainLayer, views, params){\r\n\t\tfor(var key in views){\r\n\t\t\t// ignore naming starting with _ (jsonref adding is own stuff in there)\r\n\t\t\tif(key.indexOf(\"_\") == 0){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar view = views[key];\r\n\t\t\t// TODO deal with \"./\" shortcut & default view location (which relies on \"./\")\r\n\t\t\tif(view.controller && view.controller != \"none\"){\r\n\t\t\t\tvar mid = view.controller.replace(/(\\.js)$/, \"\");\r\n\t\t\t\tif(!bc.layers[mid] && bc.multipleAppConfigLayers){\r\n\t\t\t\t\tbc.layers[mid] = { include: [], exclude: [ \"dojo/dojo\", mainLayer ] };\r\n\t\t\t\t\tmids = bc.layers[mid].include;\r\n\t\t\t\t}\r\n\t\t\t\tmids.push(mid);\r\n\t\t\t}\r\n\t\t\tif(view.template){\r\n\t\t\t\t// we need dojo/text to load templates, let's put it in the main layer in all cases\r\n\t\t\t\t// as this will be shared by a lot of views\r\n\t\t\t\tif(!params.text){\r\n\t\t\t\t\tparams.text = true;\r\n\t\t\t\t\tbc.layers[mainLayer].include.push(\"dojo/text\");\r\n\t\t\t\t}\r\n\t\t\t\tmids.push(view.template);\r\n\t\t\t}\r\n\t\t\tif(view.nls){\r\n\t\t\t\t// we use nls let's add dojo/i18n to the main layer as it will be shared by a lot of views\r\n\t\t\t\tif(!params.nls){\r\n\t\t\t\t\tparams.nls = true;\r\n\t\t\t\t\tbc.layers[mainLayer].include.push(\"dojo/i18n\");\r\n\t\t\t\t}\r\n\t\t\t\tmids.push(view.nls);\r\n\t\t\t}\r\n\t\t\tif(view.dependencies){\r\n\t\t\t\tArray.prototype.splice.apply(mids, [ mids.length, 0 ].concat(view.dependencies));\r\n\t\t\t}\r\n\t\t\tif(view.views){\r\n\t\t\t\tparseViews(mids, mainLayer, view.views, params);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn function(){\r\n\t\tvar config;\r\n\t\ttry{\r\n\t\t\tconfig = json.fromJson(fs.readFileSync(bc.getSrcModuleInfo(argv.args.appConfigFile, null, false).url));\r\n\t\t}catch(e){\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t\tif(config){\r\n\t\t\tvar mids = [], params = {};\r\n\t\t\tif(config.loaderConfig){\r\n\t\t\t\trequire(config.loaderConfig);\r\n\t\t\t}\r\n\t\t\t// main layer\r\n\t\t\tvar mainLayer;\r\n\t\t\tif(!argv.args.appConfigLayer){\r\n\t\t\t\t// no layer specified, take the first one\r\n\t\t\t\tfor(var l in bc.layers){\r\n\t\t\t\t\tmainLayer = l;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tmainLayer = argv.args.appConfigLayer;\r\n\t\t\t\tif(!bc.layers[mainLayer]){\r\n\t\t\t\t\tbc.layers[mainLayer] = { include: [], exclude: [ \"dojo/dojo\"] };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(config.dependencies){\r\n\t\t\t\tmids = mids.concat(config.dependencies);\r\n\t\t\t}\r\n\t\t\tif(config.controllers){\r\n\t\t\t\tmids = mids.concat(config.controllers);\r\n\t\t\t}\r\n\t\t\tif(config.modules){\r\n\t\t\t\tmids = mids.concat(config.modules);\r\n\t\t\t}\r\n\t\t\tif(config.transit){\r\n\t\t\t\tmids.push(config.transit);\r\n\t\t\t}else{\r\n\t\t\t\tmids.push(\"dojox/css3/transit\");\r\n\t\t\t}\r\n\t\t\tif(config.template){\r\n\t\t\t\tparams.text = true;\r\n\t\t\t\tbc.layers[mainLayer].include.push(\"dojo/text\");\r\n\t\t\t\tmids.push(config.template);\r\n\t\t\t}\r\n\t\t\tif(config.controller && config.controller != \"none\"){\r\n\t\t\t\tmids.push(config.controller.replace(/(\\.js)$/, \"\"));\r\n\t\t\t}\r\n\t\t\tif(config.nls){\r\n\t\t\t\t// we use nls let's add dojo/i18n to the main layer as it will be shared by a lot of views\r\n\t\t\t\tparams.nls = true;\r\n\t\t\t\tbc.layers[mainLayer].include.push(\"dojo/i18n\");\r\n\t\t\t\tmids.push(config.nls);\r\n\t\t\t}\r\n\t\t\tif(config.view){\r\n\t\t\t\t// we use a custom view class\r\n\t\t\t\tmids.push(config.view);\r\n\t\t\t}else{\r\n\t\t\t\t// regular view\r\n\t\t\t\tmids.push(\"dojox/app/View\");\r\n\t\t\t}\r\n\t\t\t// go into the view children\r\n\t\t\tif(config.views){\r\n\t\t\t\tparseViews(mids, mainLayer, config.views, params);\r\n\t\t\t}\r\n\t\t\tArray.prototype.splice.apply(bc.layers[mainLayer].include, [bc.layers[mainLayer].length, 0].concat(mids));\r\n\t\t}else{\r\n\t\t\tmessages.log(\"pacify\", argv.args.appConfigFile+\" is not a valid dojox/app JSON config file\");\r\n\t\t\tprocess.exit(-1);\r\n\t\t}\r\n\t};\r\n});\r\n\r\n"]}