{"version":3,"sources":["app/widgets/Container.js"],"names":["define","declare","lang","registry","domAttr","domGeom","domStyle","WidgetBase","Container","Contained","array","query","layoutUtils","ScrollableMixin","scrollable","fixedFooter","fixedHeader","buildRendering","this","_constraint","set","srcNodeRef","inherited","arguments","domNode","style","position","width","height","startup","_started","resize","changeSize","resultSize","node","layout","setMarginBox","mb","mixin","getMarginBox","cs","getComputedStyle","me","getMarginExtents","be","getBorderExtents","bb","_borderBox","w","h","pe","getPadExtents","_contentBox","l","toPixelValue","paddingLeft","t","paddingTop","children","map","getEnclosingWidget","get","layoutChildren","forEach","getChildren","child"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,kBAAmB,iBAAkB,gBAAiB,oBACnF,iBAAkB,oBAAqB,mBAAoB,mBAAoB,mBAAoB,aAAc,kBAAmB,sBACrI,SAASC,EAASC,EAAMC,EAAUC,EAASC,EAASC,EAAUC,EAAYC,EAAWC,EAAWC,EAAOC,EAAOC,EAAaC,GAC1H,OAAOZ,EAAQ,+BAAgCM,EAAYC,EAAWC,EAAWI,IAChFC,YAAY,EACZC,YAAY,GACZC,YAAY,GAEZC,eAAgB,WAEXC,KAAKC,cACRD,KAAKC,YAAc,SACnBf,EAAQgB,IAAIF,KAAKG,WAAY,sBAAuB,WAErDH,KAAKI,UAAUC,WAGfjB,EAASc,IAAIF,KAAKM,QAAS,aAAc,UACzClB,EAASc,IAAIF,KAAKM,QAAS,aAAc,QAGtCN,KAAKJ,aACPI,KAAKI,UAAUC,WACfL,KAAKM,QAAQC,MAAMC,SAAW,WAC9BR,KAAKM,QAAQC,MAAME,MAAQ,OAC3BT,KAAKM,QAAQC,MAAMG,OAAS,SAI9BC,QAAS,WACLX,KAAKY,WAILZ,KAAKJ,YACPI,KAAKI,UAAUC,WAEhBL,KAAKY,UAAW,IAGjBC,OAAQ,SAASC,EAAYC,GAuC5B,IAAIC,EAAOhB,KAAKM,QAEhB,GAAGN,KAAKJ,WAGP,OAFAI,KAAKI,UAAUC,gBACfL,KAAKiB,SAKHH,GACF3B,EAAQ+B,aAAaF,EAAMF,GAM5B,IAAIK,EAAKJ,MACT/B,EAAKoC,MAAMD,EAAIL,OACT,MAAOK,GAAS,MAAOA,IAC5BA,EAAKnC,EAAKoC,MAAMjC,EAAQkC,aAAaL,GAAOG,IAK7C,IAAIG,EAAKlC,EAASmC,iBAAiBP,GAC/BQ,EAAKrC,EAAQsC,iBAAiBT,EAAMM,GACpCI,EAAKvC,EAAQwC,iBAAiBX,EAAMM,GACpCM,EAAM5B,KAAK6B,YACdC,EAAGX,EAAGW,GAAKN,EAAGM,EAAIJ,EAAGI,GACrBC,EAAGZ,EAAGY,GAAKP,EAAGO,EAAIL,EAAGK,IAElBC,EAAK7C,EAAQ8C,cAAcjB,EAAMM,GACrCtB,KAAKkC,aACJC,EAAG/C,EAASgD,aAAapB,EAAMM,EAAGe,aAClCC,EAAGlD,EAASgD,aAAapB,EAAMM,EAAGiB,YAClCT,EAAGF,EAAGE,EAAIE,EAAGF,EACbC,EAAGH,EAAGG,EAAIC,EAAGD,GAId/B,KAAKiB,UAGNA,OAAQ,WAIP,IAAIuB,EAAW/C,EAAM,0BAA2BO,KAAKM,SAASmC,IAAI,SAASzB,GAC1E,IAAIc,EAAI7C,EAASyD,mBAAmB1B,GACpC,OAAGc,GACFA,EAAE7B,YAAcf,EAAQyD,IAAI3B,EAAM,uBAC3Bc,IAIPxB,QAASU,EACTf,YAAaf,EAAQyD,IAAI3B,EAAM,0BAI9BhB,KAAKkC,aACPxC,EAAYkD,eAAe5C,KAAKM,QAASN,KAAKkC,YAAaM,GAE5DhD,EAAMqD,QAAQ7C,KAAK8C,cAAe,SAASC,IACtCA,EAAMnC,UAAYmC,EAAMpC,SAC3BoC,EAAMpC","file":"../../../app/widgets/Container.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/_base/lang\", \"dijit/registry\", \"dojo/dom-attr\", \"dojo/dom-geometry\",\r\n\t\"dojo/dom-style\", \"dijit/_WidgetBase\", \"dijit/_Container\", \"dijit/_Contained\", \"dojo/_base/array\", \"dojo/query\", \"../utils/layout\", \"./_ScrollableMixin\"],\r\nfunction(declare, lang, registry, domAttr, domGeom, domStyle, WidgetBase, Container, Contained, array, query, layoutUtils, ScrollableMixin){\r\n\treturn declare(\"dojox.app.widgets.Container\", [WidgetBase, Container, Contained, ScrollableMixin], {\r\n\t\tscrollable: false,\r\n\t\tfixedFooter:\"\",\r\n\t\tfixedHeader:\"\",\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\t//set default _constraint=\"center\"\r\n\t\t\tif(!this._constraint){\r\n\t\t\t\tthis._constraint = \"center\";\r\n\t\t\t\tdomAttr.set(this.srcNodeRef, \"data-app-constraint\", \"center\");\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t//fix slide transition issue on tablet\r\n\t\t\tdomStyle.set(this.domNode, \"overflow-x\", \"hidden\");\r\n\t\t\tdomStyle.set(this.domNode, \"overflow-y\", \"auto\");\r\n\r\n\t\t\t// build scrollable container if scrollable=true\r\n\t\t\tif(this.scrollable){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.domNode.style.position = \"absolute\";\r\n\t\t\t\tthis.domNode.style.width = \"100%\";\r\n\t\t\t\tthis.domNode.style.height = \"100%\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// startup scrollable container if scrollable=true\r\n\t\t\tif(this.scrollable){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t\tthis._started = true;\r\n\t\t},\r\n\r\n\t\tresize: function(changeSize, resultSize){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall this to resize a widget, or after its size has changed.\r\n\t\t\t// description:\r\n\t\t\t//\t\t####Change size mode\r\n\t\t\t//\r\n\t\t\t//\t\tWhen changeSize is specified, changes the marginBox of this widget\r\n\t\t\t//\t\tand forces it to re-layout its contents accordingly.\r\n\t\t\t//\t\tchangeSize may specify height, width, or both.\r\n\t\t\t//\r\n\t\t\t//\t\tIf resultSize is specified it indicates the size the widget will\r\n\t\t\t//\t\tbecome after changeSize has been applied.\r\n\t\t\t//\r\n\t\t\t//\t\t####Notification mode\r\n\t\t\t//\r\n\t\t\t//\t\tWhen changeSize is null, indicates that the caller has already changed\r\n\t\t\t//\t\tthe size of the widget, or perhaps it changed because the browser\r\n\t\t\t//\t\twindow was resized.  Tells widget to re-layout its contents accordingly.\r\n\t\t\t//\r\n\t\t\t//\t\tIf resultSize is also specified it indicates the size the widget has\r\n\t\t\t//\t\tbecome.\r\n\t\t\t//\r\n\t\t\t//\t\tIn either mode, this method also:\r\n\t\t\t//\r\n\t\t\t//\t\t1. Sets this._borderBox and this._contentBox to the new size of\r\n\t\t\t//\t\t\tthe widget.  Queries the current domNode size if necessary.\r\n\t\t\t//\t\t2. Calls layout() to resize contents (and maybe adjust child widgets).\r\n\t\t\t//\r\n\t\t\t// changeSize: Object?\r\n\t\t\t//\t\tSets the widget to this margin-box size and position.\r\n\t\t\t//\t\tMay include any/all of the following properties:\r\n\t\t\t//\t|\t{w: int, h: int, l: int, t: int}\r\n\t\t\t//\r\n\t\t\t// resultSize: Object?\r\n\t\t\t//\t\tThe margin-box size of this widget after applying changeSize (if\r\n\t\t\t//\t\tchangeSize is specified).  If caller knows this size and\r\n\t\t\t//\t\tpasses it in, we don't need to query the browser to get the size.\r\n\t\t\t//\t|\t{w: int, h: int}\r\n\r\n\t\t\tvar node = this.domNode;\r\n\r\n\t\t\tif(this.scrollable){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.layout();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// set margin box size, unless it wasn't specified, in which case use current size\r\n\t\t\tif(changeSize){\r\n\t\t\t\tdomGeom.setMarginBox(node, changeSize);\r\n\t\t\t}\r\n\r\n\t\t\t// If either height or width wasn't specified by the user, then query node for it.\r\n\t\t\t// But note that setting the margin box and then immediately querying dimensions may return\r\n\t\t\t// inaccurate results, so try not to depend on it.\r\n\t\t\tvar mb = resultSize || {};\r\n\t\t\tlang.mixin(mb, changeSize || {});\t// changeSize overrides resultSize\r\n\t\t\tif( !(\"h\" in mb) || !(\"w\" in mb) ){\r\n\t\t\t\tmb = lang.mixin(domGeom.getMarginBox(node), mb);\t// just use domGeometry.marginBox() to fill in missing values\r\n\t\t\t}\r\n\r\n\t\t\t// Compute and save the size of my border box and content box\r\n\t\t\t// (w/out calling domGeometry.getContentBox() since that may fail if size was recently set)\r\n\t\t\tvar cs = domStyle.getComputedStyle(node);\r\n\t\t\tvar me = domGeom.getMarginExtents(node, cs);\r\n\t\t\tvar be = domGeom.getBorderExtents(node, cs);\r\n\t\t\tvar bb = (this._borderBox = {\r\n\t\t\t\tw: mb.w - (me.w + be.w),\r\n\t\t\t\th: mb.h - (me.h + be.h)\r\n\t\t\t});\r\n\t\t\tvar pe = domGeom.getPadExtents(node, cs);\r\n\t\t\tthis._contentBox = {\r\n\t\t\t\tl: domStyle.toPixelValue(node, cs.paddingLeft),\r\n\t\t\t\tt: domStyle.toPixelValue(node, cs.paddingTop),\r\n\t\t\t\tw: bb.w - pe.w,\r\n\t\t\t\th: bb.h - pe.h\r\n\t\t\t};\r\n\r\n\t\t\t// Callback for widget to adjust size of its children\r\n\t\t\tthis.layout();\r\n\t\t},\r\n\r\n\t\tlayout: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tlayout container\r\n\r\n\t\t\tvar children = query(\"> [data-app-constraint]\", this.domNode).map(function(node){\r\n\t\t\t\tvar w = registry.getEnclosingWidget(node);\r\n\t\t\t\tif(w){\r\n\t\t\t\t\tw._constraint = domAttr.get(node, \"data-app-constraint\");\r\n\t\t\t\t\treturn w;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tdomNode: node,\r\n\t\t\t\t\t_constraint: domAttr.get(node, \"data-app-constraint\")\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\tif(this._contentBox){\r\n\t\t\t\tlayoutUtils.layoutChildren(this.domNode, this._contentBox, children);\r\n\t\t\t}\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tif(!child._started && child.startup){\r\n\t\t\t\t\tchild.startup();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n});\r\n"]}