{"version":3,"sources":["app/tests/domOrderByConstraint/controllers/UnloadViewController.js"],"names":["define","lang","declare","Deferred","array","domConstruct","registry","Controller","constructor","app","this","events","unload-view","unloadView","event","parent","view","viewId","id","selectedChildren","console","warn","children","unloadChild","callback","viewToUnload","child","domNode","widList","findWidgets","wid","destroyRecursive","destroy"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAkB,qBAAsB,gBAAiB,mBAAoB,qBAAsB,iBAAkB,wBAC5H,SAASC,EAAMC,EAASC,EAAUC,EAAOC,EAAcC,EAAUC,GAQjE,OAAOL,EAAQ,wEAAyEK,GAEvFC,YAAa,SAASC,GACrBC,KAAKD,IAAMA,EAQXC,KAAKC,QACJC,cAAeF,KAAKG,aAItBA,WAAY,SAASC,GAYpB,IAAIC,EAASD,EAAMC,QAAUL,KAAKD,IAC9BO,EAAOF,EAAME,MAAQ,GACrBC,EAASD,EAAKE,GAEdH,GAAWC,GAASC,EAKrBF,EAAOI,iBAAiBF,GAC1BG,QAAQC,KAAK,8FAAgGJ,EAAS,MAInHF,EAAOO,SAASL,IAKpBP,KAAKa,YAAYR,EAAQC,GAGtBF,EAAMU,UACRV,EAAMU,YARNJ,QAAQC,KAAK,4FAA8FJ,EAAS,MAVpHG,QAAQC,KAAK,iFAAkFL,IAsBjGO,YAAa,SAASR,EAAQU,GAW7B,IAAI,IAAIC,KAASD,EAAaH,SAC7BZ,KAAKa,YAAYE,EAAcC,GAEhC,GAAGD,EAAaE,QAAQ,CAEvB,IAAIC,EAAUtB,EAASuB,YAAYJ,EAAaE,SAChD,IAAI,IAAIG,KAAOF,EACdA,EAAQE,GAAKC,mBAEd1B,EAAa2B,QAAQP,EAAaE,gBAG5BZ,EAAOO,SAASG,EAAaP,IACjCO,EAAaO,SACfP,EAAaO","file":"../../../../../app/tests/domOrderByConstraint/controllers/UnloadViewController.js","sourcesContent":["define([\"dojo/_base/lang\",\"dojo/_base/declare\", \"dojo/Deferred\", \"dojo/_base/array\", \"dojo/dom-construct\", \"dijit/registry\", \"dojox/app/Controller\"],\r\n\tfunction(lang, declare, Deferred, array, domConstruct, registry, Controller){\r\n\t// module:\r\n\t//\t\tdojox/app/tests/domOrderByConstraint/controllers/UnloadViewController\r\n\t// summary:\r\n\t//\t\tUsed to Unload Views when they are no longer needed\r\n\t//\t\tBind \"unload-view\" event on dojox/app application instance.\r\n\t//\t\tDo transition from one view to another view.\r\n\r\n\treturn declare(\"dojox/app/tests/domOrderByConstraint/controllers/UnloadViewController\", Controller, {\r\n\r\n\t\tconstructor: function(app){\r\n\t\t\tthis.app = app;\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbind \"app-transition\" event on application instance.\r\n\t\t\t//\r\n\t\t\t// app:\r\n\t\t\t//\t\tdojox/app application instance.\r\n\t\t\t// events:\r\n\t\t\t//\t\t{event : handler}\r\n\t\t\tthis.events = {\r\n\t\t\t\t\"unload-view\": this.unloadView\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tunloadView: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"unload-view\" event.\r\n\t\t\t// \t\tIf a view has children loaded the view and any children of the child will be unloaded.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse trigger() to trigger \"unload-view\" event, and this function will response the event. For example:\r\n\t\t\t//\t\t|\tthis.trigger(\"unload-view\", {\"parent\":parent, \"view\":view, \"callback\":function(){...}});\r\n\t\t\t//\r\n\t\t\t// event: Object\r\n\t\t\t//\t\tunloadView event parameter. It should be like this: {\"parent\":parent, \"view\":view, \"callback\":function(){...}}\r\n\r\n\t\t\tvar parent = event.parent || this.app;\r\n\t\t\tvar view = event.view || \"\";\r\n\t\t\tvar viewId = view.id;\r\n\r\n\t\t\tif(!parent || !view || !viewId){\r\n\t\t\t\tconsole.warn(\"unload-view event for view with no parent or with an invalid view with view = \", view);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(parent.selectedChildren[viewId]){\r\n\t\t\t\tconsole.warn(\"unload-view event for a view which is still in use so it can not be unloaded for view id = \" + viewId + \"'.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(!parent.children[viewId]){\r\n\t\t\t\tconsole.warn(\"unload-view event for a view which was not found in parent.children[viewId] for viewId = \" + viewId + \"'.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.unloadChild(parent, view);\r\n\r\n\t\t\t// call Load event callback\r\n\t\t\tif(event.callback){\r\n\t\t\t\tevent.callback();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tunloadChild: function(parent, viewToUnload){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnload the view, and all of its child views recursively.\r\n\t\t\t// \t\tDestroy all children, destroy all widgets, destroy the domNode, remove the view from the parent.children,\r\n\t\t\t// \t\tthen destroy the view.\r\n\t\t\t//\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tparent of this view.\r\n\t\t\t// viewToUnload: Object\r\n\t\t\t//\t\tthe view to be unloaded.\r\n\r\n\t\t\tfor(var child in viewToUnload.children){\r\n\t\t\t\tthis.unloadChild(viewToUnload, child);  // unload children then unload the view itself\r\n\t\t\t}\r\n\t\t\tif(viewToUnload.domNode){\r\n\t\t\t\t// destroy all widgets, then destroy the domNode, then destroy the view.\r\n\t\t\t\tvar widList = registry.findWidgets(viewToUnload.domNode);\r\n\t\t\t\tfor(var wid in widList){\r\n\t\t\t\t\twidList[wid].destroyRecursive();\r\n\t\t\t\t}\r\n\t\t\t\tdomConstruct.destroy(viewToUnload.domNode);\r\n\t\t\t}\r\n\r\n\t\t\tdelete parent.children[viewToUnload.id]; // remove it from the parents children\r\n\t\t\tif(viewToUnload.destroy){\r\n\t\t\t\tviewToUnload.destroy(); // call destroy for the view.\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}