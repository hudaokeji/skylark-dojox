{"version":3,"sources":["app/controllers/History.js"],"names":["define","lang","declare","on","Controller","hash","topic","_currentPosition","currentState","constructor","this","events","app-domNode","onDomNodeChange","app","domNode","oldNode","newNode","bind","window","hitch","onPopState","evt","unbind","onStartTransition","currentHash","location","currentView","getTarget","defaultView","currentParams","getParams","_detail","clone","detail","target","title","url","params","id","history","length","pushState","href","bwdTransition","transition","mixin","replaceState","newHash","buildWithParams","fwdTransition","publish","getStatus","lifecycle","STARTED","state","backward","opts","reverse","emit","viewId"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,qBAAsB,UAAW,gBAAiB,gBAAiB,cAC9F,SAASC,EAAMC,EAASC,EAAIC,EAAYC,EAAMC,GAS7C,OAAOJ,EAAQ,gCAAiCE,GAK/CG,iBAAkB,EAIlBC,gBAEAC,YAAa,WAOZC,KAAKC,QACJC,cAAeF,KAAKG,iBAElBH,KAAKI,IAAIC,SACXL,KAAKG,iBAAiBG,QAAS,KAAMC,QAASP,KAAKI,IAAIC,UAExDL,KAAKQ,KAAKC,OAAQ,WAAYlB,EAAKmB,MAAMV,KAAMA,KAAKW,cAGrDR,gBAAiB,SAASS,GACP,MAAfA,EAAIN,SACNN,KAAKa,OAAOD,EAAIN,QAAS,mBAE1BN,KAAKQ,KAAKI,EAAIL,QAAS,kBAAmBhB,EAAKmB,MAAMV,KAAMA,KAAKc,qBAGjEA,kBAAmB,SAASF,GAgB3B,IAAIG,EAAcN,OAAOO,SAASrB,KAC9BsB,EAActB,EAAKuB,UAAUH,EAAaf,KAAKI,IAAIe,aACnDC,EAAiBzB,EAAK0B,UAAUN,GAChCO,EAAU/B,EAAKgC,MAAMX,EAAIY,QAC7BF,EAAQG,OAASH,EAAQI,MAAQT,EACjCK,EAAQK,IAAMZ,EACdO,EAAQM,OAASR,EACjBE,EAAQO,GAAK7B,KAAKH,iBAGG,GAAlBiC,QAAQC,QACVD,QAAQE,UAAUV,EAASA,EAAQW,KAAMlB,GAI1CO,EAAQY,cAAgBZ,EAAQa,WAChC5C,EAAK6C,MAAMpC,KAAKF,aAAcwB,GAC9BQ,QAAQO,aAAarC,KAAKF,aAAcE,KAAKF,aAAamC,KAAMlB,GAGhEf,KAAKH,kBAAoB,EACzBe,EAAIY,OAAOK,GAAK7B,KAAKH,iBAErB,IAAIyC,EAAU1B,EAAIY,OAAOG,KAAO,IAAMf,EAAIY,OAAOC,OAE9Cb,EAAIY,OAAOI,SACbU,EAAU3C,EAAK4C,gBAAgBD,EAAS1B,EAAIY,OAAOI,SAGpDhB,EAAIY,OAAOgB,cAAgB5B,EAAIY,OAAOW,WACtCL,QAAQE,UAAUpB,EAAIY,OAAQZ,EAAIY,OAAOS,KAAMK,GAC/CtC,KAAKF,aAAeP,EAAKgC,MAAMX,EAAIY,QAGnC5B,EAAM6C,QAAQ,yBAA0B7B,EAAIY,OAAOC,SAGpDd,WAAY,SAASC,GAUpB,GAAIZ,KAAKI,IAAIsC,cAAgB1C,KAAKI,IAAIuC,UAAUC,SAAahC,EAAIiC,MAAjE,CAKA,IAAIC,EAAWlC,EAAIiC,MAAMhB,GAAK7B,KAAKH,iBACnCiD,EAAW9C,KAAKH,kBAAoB,EAAIG,KAAKH,kBAAoB,EAIjE,IAAIkD,EAAOxD,EAAK6C,OAAOY,UAASF,GAA0BlC,EAAIiC,OAC9DE,EAAKZ,WAAaW,EAAWC,EAAKb,cAAgBa,EAAKP,cACvDxC,KAAKI,IAAI6C,KAAK,kBACbC,OAAQtC,EAAIiC,MAAMpB,OAClBsB,KAAMA,IAEPnD,EAAM6C,QAAQ,wBAAyB7B,EAAIiC,MAAMpB","file":"../../../app/controllers/History.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/on\", \"../Controller\", \"../utils/hash\", \"dojo/topic\"],\r\nfunction(lang, declare, on, Controller, hash, topic){\r\n\t// module:\r\n\t//\t\tdojox/app/controllers/History\r\n\t// summary:\r\n\t//\t\tBind \"app-domNode\" event on dojox/app application instance.\r\n\t//\t\tBind \"startTransition\" event on dojox/app application domNode.\r\n\t//\t\tBind \"popstate\" event on window object.\r\n\t//\t\tMaintain history by HTML5 \"pushState\" method and \"popstate\" event.\r\n\r\n\treturn declare(\"dojox.app.controllers.History\", Controller, {\r\n\t\t// _currentPosition:     Integer\r\n\t\t//              Persistent variable which indicates the current position/index in the history\r\n\t\t//              (so as to be able to figure out whether the popState event was triggerd by\r\n\t\t//              a backward or forward action).\r\n\t\t_currentPosition: 0,\r\n\r\n\t\t// currentState: Object\r\n\t\t//              Current state\r\n\t\tcurrentState: {},\r\n\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tBind \"app-domNode\" event on dojox/app application instance.\r\n\t\t\t//\t\tBind \"startTransition\" event on dojox/app application domNode.\r\n\t\t\t//\t\tBind \"popstate\" event on window object.\r\n\t\t\t//\r\n\r\n\t\t\tthis.events = {\r\n\t\t\t\t\"app-domNode\": this.onDomNodeChange\r\n\t\t\t};\r\n\t\t\tif(this.app.domNode){\r\n\t\t\t\tthis.onDomNodeChange({oldNode: null, newNode: this.app.domNode});\r\n\t\t\t}\r\n\t\t\tthis.bind(window, \"popstate\", lang.hitch(this, this.onPopState));\r\n\t\t},\r\n\r\n\t\tonDomNodeChange: function(evt){\r\n\t\t\tif(evt.oldNode != null){\r\n\t\t\t\tthis.unbind(evt.oldNode, \"startTransition\");\r\n\t\t\t}\r\n\t\t\tthis.bind(evt.newNode, \"startTransition\", lang.hitch(this, this.onStartTransition));\r\n\t\t},\r\n\r\n\t\tonStartTransition: function(evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"startTransition\" event.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse \"dojox/mobile/TransitionEvent\" to trigger \"startTransition\" event, and this function will response the event. For example:\r\n\t\t\t//\t\t|\tvar transOpts = {\r\n\t\t\t//\t\t|\t\ttitle:\"List\",\r\n\t\t\t//\t\t|\t\ttarget:\"items,list\",\r\n\t\t\t//\t\t|\t\turl: \"#items,list\",\r\n\t\t\t//\t\t|\t\tparams: {\"param1\":\"p1value\"}\r\n\t\t\t//\t\t|\t};\r\n\t\t\t//\t\t|\tnew TransitionEvent(domNode, transOpts, e).dispatch();\r\n\t\t\t//\r\n\t\t\t// evt: Object\r\n\t\t\t//\t\tTransition options parameter\r\n\t\t\tvar currentHash = window.location.hash;\r\n\t\t\tvar currentView = hash.getTarget(currentHash, this.app.defaultView);\r\n\t\t\tvar currentParams =  hash.getParams(currentHash);\r\n\t\t\tvar _detail = lang.clone(evt.detail);\r\n\t\t\t_detail.target = _detail.title = currentView;\r\n\t\t\t_detail.url = currentHash;\r\n\t\t\t_detail.params = currentParams;\r\n\t\t\t_detail.id = this._currentPosition;\r\n\r\n\t\t\t// Create initial state if necessary\r\n\t\t\tif(history.length == 1){\r\n\t\t\t\thistory.pushState(_detail, _detail.href, currentHash);\r\n\t\t\t}\r\n\r\n\t\t\t// Update the current state\r\n\t\t\t_detail.bwdTransition = _detail.transition;\r\n\t\t\tlang.mixin(this.currentState, _detail);\r\n\t\t\thistory.replaceState(this.currentState, this.currentState.href, currentHash);\r\n\r\n\t\t\t// Create a new \"current state\" history entry\r\n\t\t\tthis._currentPosition += 1;\r\n\t\t\tevt.detail.id = this._currentPosition;\r\n\r\n\t\t\tvar newHash = evt.detail.url || \"#\" + evt.detail.target;\r\n\r\n\t\t\tif(evt.detail.params){\r\n\t\t\t\tnewHash = hash.buildWithParams(newHash, evt.detail.params);\r\n\t\t\t}\r\n\r\n\t\t\tevt.detail.fwdTransition = evt.detail.transition;\r\n\t\t\thistory.pushState(evt.detail, evt.detail.href, newHash);\r\n\t\t\tthis.currentState = lang.clone(evt.detail);\r\n\r\n\t\t\t// Finally: Publish pushState topic\r\n\t\t\ttopic.publish(\"/app/history/pushState\", evt.detail.target);\r\n\t\t},\r\n\r\n\t\tonPopState: function(evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"popstate\" event.\r\n\t\t\t//\r\n\t\t\t// evt: Object\r\n\t\t\t//\t\tTransition options parameter\r\n\r\n\t\t\t// Clean browser's cache and refresh the current page will trigger popState event,\r\n\t\t\t// but in this situation the application has not started and throws an error.\r\n\t\t\t// So we need to check application status, if application not STARTED, do nothing.\r\n\t\t\tif((this.app.getStatus() !== this.app.lifecycle.STARTED) || !evt.state ){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Get direction of navigation and update _currentPosition accordingly\r\n\t\t\tvar backward = evt.state.id < this._currentPosition;\r\n\t\t\tbackward ? this._currentPosition -= 1 : this._currentPosition += 1;\r\n\r\n\t\t\t// Publish popState topic and transition to the target view. Important: Use correct transition.\r\n\t\t\t// Reverse transitionDir only if the user navigates backwards.\r\n\t\t\tvar opts = lang.mixin({reverse: backward ? true : false}, evt.state);\r\n\t\t\topts.transition = backward ? opts.bwdTransition : opts.fwdTransition;\r\n\t\t\tthis.app.emit(\"app-transition\", {\r\n\t\t\t\tviewId: evt.state.target,\r\n\t\t\t\topts: opts\r\n\t\t\t});\r\n\t\t\ttopic.publish(\"/app/history/popState\", evt.state.target);\r\n\t\t}\r\n\t});\r\n});\r\n"]}