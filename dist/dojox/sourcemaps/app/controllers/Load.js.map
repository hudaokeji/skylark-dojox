{"version":3,"sources":["app/controllers/Load.js"],"names":["define","require","lang","declare","on","Deferred","when","domStyle","Controller","View","_waitingQueue","constructor","app","events","this","app-init","init","app-load","load","event","createView","parent","templateString","controller","type","newView","start","callback","log","viewId","viewArray","parts","split","length","shift","push","proceedLoadViewDef","loadView","i","newEvent","clone","proceedLoadView","hitch","loadEvt","def","nextEvt","resolve","loadEvent","childId","subIds","join","params","_handleDefault","_defaultHasPlus","loadChild","initLoad","childViews","emit","defaultView","forceTransitionNone","opts","createChild","id","views","defaultParams","view","children","name","mixin","Error","_getViewNamesFromDefaults","indexOf","createPromise","loadChildDeferred","ex","console","warn","reject","promise","child","subLoadDeferred","parentNames","item"],"mappings":"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","file":"../../../app/controllers/Load.js","sourcesContent":["define([\"require\", \"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/on\", \"dojo/Deferred\", \"dojo/when\", \"dojo/dom-style\", \"../Controller\"],\r\n\tfunction(require, lang, declare, on, Deferred, when, domStyle, Controller, View){\r\n\t// module:\r\n\t//\t\tdojox/app/controllers/Load\r\n\t// summary:\r\n\t//\t\tBind \"app-load\" event on dojox/app application instance.\r\n\t//\t\tLoad child view and sub children at one time.\r\n\r\n\treturn declare(\"dojox.app.controllers.Load\", Controller, {\r\n\r\n\r\n\t\t_waitingQueue:[],\r\n\r\n\t\tconstructor: function(app, events){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbind \"app-load\" event on application instance.\r\n\t\t\t//\r\n\t\t\t// app:\r\n\t\t\t//\t\tdojox/app application instance.\r\n\t\t\t// events:\r\n\t\t\t//\t\t{event : handler}\r\n\t\t\tthis.events = {\r\n\t\t\t\t\"app-init\": this.init,\r\n\t\t\t\t\"app-load\": this.load\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tinit: function(event){\r\n\t\t\t// when the load controller received \"app-init\", before the lifecycle really starts we create the root view\r\n\t\t\t// if any. This used to be done in main.js but must be done in Load to be able to create custom\r\n\t\t\t// views from the Load controller.\r\n\t\t\t//create and start child. return Deferred\r\n\t\t\twhen(this.createView(event.parent, null, null, {\r\n\t\t\t\t\ttemplateString: event.templateString,\r\n\t\t\t\t\tcontroller: event.controller\r\n\t\t\t}, null, event.type), function(newView){\r\n\t\t\t\twhen(newView.start(), event.callback);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tload: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"loadArray\" event.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse trigger() to trigger \"loadArray\" event, and this function will response the event. For example:\r\n\t\t\t//\t\t|\tthis.trigger(\"app-load\", {\"parent\":parent, \"viewId\":viewId, \"viewArray\":viewArray, \"callback\":function(){...}});\r\n\t\t\t//\r\n\t\t\t// event: Object\r\n\t\t\t//\t\tLoadArray event parameter. It should be like this: {\"parent\":parent, \"viewId\":viewId, \"viewArray\":viewArray, \"callback\":function(){...}}\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA dojo/Deferred object.\r\n\t\t\t//\t\tThe return value cannot return directly.\r\n\t\t\t//\t\tIf the caller need to use the return value, pass callback function in event parameter and process return value in callback function.\r\n\r\n\t\t\tthis.app.log(\"in app/controllers/Load event.viewId=\"+event.viewId+\" event =\", event);\r\n\t\t\tvar views = event.viewId || \"\";\r\n\t\t\tvar viewArray = [];\r\n\t\t\t// create an array from the diff views in event.viewId (they are separated by +)\r\n\t\t\tvar parts = views.split('+');\r\n\t\t\twhile(parts.length > 0){\r\n\t\t\t\tvar viewId = parts.shift();\r\n\t\t\t\tviewArray.push(viewId);\r\n\t\t\t}\r\n\r\n\t\t\tvar def;\r\n\t\t\tthis.proceedLoadViewDef = new Deferred();\r\n\t\t\tif(viewArray && viewArray.length > 1){\r\n\t\t\t\t// loop thru the array calling loadView for each item in the array\r\n\t\t\t\tfor(var i = 0; i < viewArray.length-1; i++){\r\n\t\t\t\t\tvar newEvent = lang.clone(event);\r\n\t\t\t\t\tnewEvent.callback = null;\t// skip callback until after last view is loaded.\r\n\t\t\t\t\tnewEvent.viewId = viewArray[i];\r\n\t\t\t\t\tthis._waitingQueue.push(newEvent);\r\n\t\t\t\t}\r\n\t\t\t\tthis.proceedLoadView(this._waitingQueue.shift());\r\n\t\t\t\twhen(this.proceedLoadViewDef, lang.hitch(this, function(){\r\n\t\t\t\t\t// for last view leave the callback to be notified\r\n\t\t\t\t\tvar newEvent = lang.clone(event);\r\n\t\t\t\t\tnewEvent.viewId = viewArray[i];\r\n\t\t\t\t\tdef = this.loadView(newEvent);\r\n\t\t\t\t\treturn def;\r\n\t\t\t\t}));\r\n\t\t\t}else{\r\n\t\t\t\tdef = this.loadView(event);\r\n\t\t\t\treturn def;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tproceedLoadView: function(loadEvt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProceed load queue by FIFO by default.\r\n\t\t\t//\t\tIf load is in proceeding, add the next load to waiting queue.\r\n\t\t\t//\r\n\t\t\t// loadEvt: Object\r\n\t\t\t//\t\tLoadArray event parameter. It should be like this: {\"parent\":parent, \"viewId\":viewId, \"viewArray\":viewArray, \"callback\":function(){...}}\r\n\r\n\t\t\tvar def = this.loadView(loadEvt);\r\n\t\t\twhen(def, lang.hitch(this, function(){\r\n\t\t\t\t\t\tthis.app.log(\"in app/controllers/Load proceedLoadView back from loadView for event\", loadEvt);\r\n\t\t\t\t\t\tvar nextEvt = this._waitingQueue.shift();\r\n\t\t\t\t\t\tif(nextEvt){\r\n\t\t\t\t\t\t\tthis.app.log(\"in app/controllers/Load proceedLoadView back from loadView calling this.proceedLoadView(nextEvt) for \",nextEvt);\r\n\t\t\t\t\t\t\tthis.proceedLoadView(nextEvt);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tthis._waitingQueue = [];\r\n\t\t\t\t\t\t\tthis.proceedLoadViewDef.resolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t}));\r\n\t\t},\r\n\r\n\t\tloadView: function(loadEvent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"app-load\" event.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse trigger() to trigger \"app-load\" event, and this function will response the event. For example:\r\n\t\t\t//\t\t|\tthis.trigger(\"app-load\", {\"parent\":parent, \"viewId\":viewId, \"callback\":function(){...}});\r\n\t\t\t//\r\n\t\t\t// loadEvent: Object\r\n\t\t\t//\t\tLoad event parameter. It should be like this: {\"parent\":parent, \"viewId\":viewId, \"callback\":function(){...}}\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA dojo/Deferred object.\r\n\t\t\t//\t\tThe return value cannot return directly.\r\n\t\t\t//\t\tIf the caller need to use the return value, pass callback function in event parameter and process return value in callback function.\r\n\r\n\t\t\tvar parent = loadEvent.parent || this.app;\r\n\t\t\tvar viewId = loadEvent.viewId || \"\";\r\n\t\t\tvar parts = viewId.split(',');\r\n\t\t\tvar childId = parts.shift();\r\n\t\t\tvar subIds = parts.join(\",\");\r\n\t\t\tvar params = loadEvent.params || \"\";\r\n\r\n\t\t\tthis._handleDefault = false;\r\n\t\t\tthis._defaultHasPlus = false;\r\n\t\t\tvar def = this.loadChild(parent, childId, subIds, params, loadEvent);\r\n\t\t\t// call Load event callback\r\n\t\t\tif(loadEvent.callback){\r\n\t\t\t\twhen(def, lang.hitch(this, function(){\r\n\t\t\t\t\tif(this._handleDefault  && !loadEvent.initLoad){\r\n\t\t\t\t\t\tthis.app.log(\"logTransitions:\",\"\",\" emit app-transition this.childViews=[\"+this.childViews+\"]\");\r\n\t\t\t\t\t\tthis.app.emit(\"app-transition\", {\r\n\t\t\t\t\t\t\tviewId: this.childViews,\r\n\t\t\t\t\t\t\tdefaultView: true,\r\n\t\t\t\t\t\t\tforceTransitionNone: loadEvent.forceTransitionNone,\r\n\t\t\t\t\t\t\topts: { params: params }\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tloadEvent.callback(this._handleDefault, this._defaultHasPlus);\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\treturn def;\r\n\t\t},\r\n\r\n\t\tcreateChild: function(parent, childId, subIds, params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a view instance if not already loaded by calling createView. This is typically a\r\n\t\t\t//\t\tdojox/app/View.\r\n\t\t\t//\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tparent of the view.\r\n\t\t\t// childId: String\r\n\t\t\t//\t\tview id need to be loaded.\r\n\t\t\t// subIds: String\r\n\t\t\t//\t\tsub views' id of this view.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tIf view exist, return the view object.\r\n\t\t\t//\t\tOtherwise, create the view and return a dojo.Deferred instance.\r\n\r\n\t\t\tvar id = parent.id + '_' + childId;\r\n\r\n\t\t\t// check for possible default params if no params were provided\r\n\t\t\tif(!params && parent.views[childId] && parent.views[childId].defaultParams){\r\n\t\t\t\tparams = parent.views[childId].defaultParams;\r\n\t\t\t}\r\n\t\t\tvar view = parent.children[id];\r\n\t\t\tif(view){\r\n\t\t\t\t// set params to new value before returning\r\n\t\t\t\tif(params){\r\n\t\t\t\t\tview.params = params;\r\n\t\t\t\t}\r\n\t\t\t\tthis.app.log(\"in app/controllers/Load createChild view is already loaded so return the loaded view with the new parms \",view);\r\n\t\t\t\treturn view;\r\n\t\t\t}\r\n\t\t\tvar def = new Deferred();\r\n\t\t\t// create and start child. return Deferred\r\n\t\t\twhen(this.createView(parent, id, childId, null, params, parent.views[childId].type), function(newView){\r\n\t\t\t\tparent.children[id] = newView;\r\n\t\t\t\twhen(newView.start(), function(view){\r\n\t\t\t\t\tdef.resolve(view);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\treturn def;\r\n\t\t},\r\n\r\n\t\tcreateView: function(parent, id, name, mixin, params, type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a dojox/app/View instance. Can be overridden to create different type of views.\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tparent of this view.\r\n\t\t\t// id: String\r\n\t\t\t//\t\tview id.\r\n\t\t\t// name: String\r\n\t\t\t//\t\tview name.\r\n\t\t\t// mixin: String\r\n\t\t\t//\t\tadditional property to be mixed into the view (templateString, controller...)\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tparams of this view.\r\n\t\t\t// type: String\r\n\t\t\t//\t\tthe MID of the View. If not provided \"dojox/app/View\".\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA dojo/Deferred instance which will be resolved when the view will be instantiated.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar def = new Deferred();\r\n\t\t\tvar app = this.app;\r\n\t\t\trequire([type?type:\"../View\"], function(View){\r\n\t\t\t\tvar newView = new View(lang.mixin({\r\n\t\t\t\t\t\"app\": app,\r\n\t\t\t\t\t\"id\": id,\r\n\t\t\t\t\t\"name\": name,\r\n\t\t\t\t\t\"parent\": parent\r\n\t\t\t\t}, { \"params\": params }, mixin));\r\n\t\t\t\tdef.resolve(newView);\r\n\t\t\t});\r\n\t\t\treturn def;\r\n\t\t},\r\n\r\n\t\tloadChild: function(parent, childId, subIds, params, loadEvent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLoad child and sub children views recursively.\r\n\t\t\t//\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tparent of this view.\r\n\t\t\t// childId: String\r\n\t\t\t//\t\tview id need to be loaded.\r\n\t\t\t// subIds: String\r\n\t\t\t//\t\tsub views' id of this view.\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tparams of this view.\r\n\t\t\t// loadEvent: Object\r\n\t\t\t//\t\tthe event passed for the load of this view.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA dojo/Deferred instance which will be resolved when all views loaded.\r\n\r\n\t\t\tif(!parent){\r\n\t\t\t\tthrow Error(\"No parent for Child '\" + childId + \"'.\");\r\n\t\t\t}\r\n\r\n\t\t\tif(!childId){\r\n\t\t\t\tvar parts = parent.defaultView ? parent.defaultView.split(\",\") : \"default\";\r\n\t\t\t\tif(parent.defaultView && !loadEvent.initLoad){ // in this case we need to call transfer to handle the defaultView calls to activate\r\n\t\t\t\t\tvar childViews = this._getViewNamesFromDefaults(parent);\r\n\t\t\t\t\tthis.app.log(\"logTransitions:\",\"Load:loadChild\",\"setting _handleDefault true for parent.defaultView childViews=[\"+childViews+\"]\");\r\n\t\t\t\t\tthis._handleDefault = true;\r\n\t\t\t\t\tif(parent.defaultView.indexOf(\"+\") >= 0){\r\n\t\t\t\t\t\tthis._defaultHasPlus = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tchildId = parts.shift();\r\n\t\t\t\t\tsubIds = parts.join(',');\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar loadChildDeferred = new Deferred();\r\n\t\t\tvar createPromise;\r\n\t\t\ttry{\r\n\t\t\t\tcreatePromise = this.createChild(parent, childId, subIds, params);\r\n\t\t\t}catch(ex){\r\n\t\t\t\tconsole.warn(\"logTransitions:\",\"\",\"emit reject load exception for =[\"+childId+\"]\",ex);\r\n\t\t\t\tloadChildDeferred.reject(\"load child '\"+childId+\"' error.\");\r\n\t\t\t\treturn loadChildDeferred.promise;\r\n\t\t\t}\r\n\t\t\twhen(createPromise, lang.hitch(this, function(child){\r\n\t\t\t\t// if no subIds and current view has default view, load the default view.\r\n\t\t\t\tif(!subIds && child.defaultView){ // in this case we need to call transfer to handle the defaultView activate\r\n\t\t\t\t\tvar childViews = this._getViewNamesFromDefaults(child);\r\n\t\t\t\t\tthis.app.log(\"logTransitions:\",\"Load:loadChild\",\" setting _handleDefault = true child.defaultView childViews=[\"+childViews+\"]\");\r\n\t\t\t\t\tthis._handleDefault = true;\r\n\t\t\t\t\tif(child.defaultView.indexOf(\"+\") >= 0){\r\n\t\t\t\t\t\tthis._defaultHasPlus = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.childViews = childViews;\r\n\t\t\t\t\tloadChildDeferred.resolve();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar parts = subIds.split(',');\r\n\t\t\t\tchildId = parts.shift();\r\n\t\t\t\tsubIds = parts.join(',');\r\n\t\t\t\tif(childId){\r\n\t\t\t\t\tvar subLoadDeferred = this.loadChild(child, childId, subIds, params, loadEvent);\r\n\t\t\t\t\twhen(subLoadDeferred, function(){\r\n\t\t\t\t\t\tloadChildDeferred.resolve();\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfunction(){\r\n\t\t\t\t\t\tloadChildDeferred.reject(\"load child '\"+childId+\"' error.\");\r\n\t\t\t\t\t});\r\n\t\t\t\t}else{\r\n\t\t\t\t\tloadChildDeferred.resolve();\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tfunction(){\r\n\t\t\t\tconsole.warn(\"loadChildDeferred.REJECT() for [\"+childId+\"] subIds=[\"+subIds+\"]\");\r\n\t\t\t\tloadChildDeferred.reject(\"load child '\"+childId+\"' error.\")\r\n\t\t\t});\r\n\t\t\treturn loadChildDeferred.promise; // dojo/Deferred.promise\r\n\t\t},\r\n\r\n\t\t_getViewNamesFromDefaults: function(view){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tBuild the full nested view name from the view and its defaultView(s)\r\n\t\t\t//\r\n\t\t\t// view: Object\r\n\t\t\t//\t\tthe view with defaultViews to process\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA string with the full nested view names\r\n\t\t\tvar parent = view.parent;\r\n\t\t\tvar parentNames = view.name;\r\n\t\t\tvar viewNames = \"\";\r\n\t\t\twhile(parent !== this.app){\r\n\t\t\t\tparentNames = parent.name+\",\"+parentNames;\r\n\t\t\t\tparent = parent.parent;\r\n\t\t\t}\r\n\t\t\tvar parts = view.defaultView.split('+');\r\n\t\t\tfor(var item in parts){\r\n\t\t\t\tparts[item] = parentNames+\",\"+parts[item];\r\n\t\t\t}\r\n\t\t\tviewNames = parts.join('+');\r\n\t\t\treturn viewNames;\r\n\t\t}\r\n\t});\r\n});\r\n"]}