{"version":3,"sources":["app/controllers/Transition.js"],"names":["define","require","lang","declare","has","on","Deferred","when","domStyle","Controller","constraints","transit","MODULE","LOGKEY","proceeding","waitingQueue","constructor","app","events","this","app-transition","transition","app-domNode","onDomNodeChange","t","domNode","oldNode","newNode","event","F","log","viewId","opts","viewsId","proceedingSaved","newEvent","parts","split","removePartsTest","length","shift","clone","indexOf","removeParts","_removeView","proceedTransition","_doResize","remViewId","evt","unbind","bind","hitch","onStartTransition","preventDefault","cancelBubble","stopPropagation","target","detail","regex","test","href","match","mixin","data","_addTransitionEventToWaitingQueue","transitionEvt","defaultView","addedEvt","i","splice","push","processingQueue","params","emit","forceTransitionNone","callback","needToHandleDefaultView","defaultHasPlus","nextEvt","pop","transitionDef","_doTransition","_getTransition","nextView","parent","transitionTo","parentView","views","defaultTransition","_getParamsForView","view","viewParams","item","value","isObject","removeView","doResize","nested","toId","subIds","next","Error","name","join","children","id","nextSubViewArray","_getNextSubViewArray","current","getSelectedChild","constraint","currentSubViewArray","_getCurrentSubViewArray","currentSubNames","_getNamesFromArray","nextSubNames","nextLastSubChild","nextLastSubChildMatch","startHiding","v","_needsResize","style","display","visibility","_setViewVisible","_active","_handleBeforeDeactivateCalls","_handleBeforeActivateCalls","currentLastSubChildMatch","trans","_handleLayoutAndResizeCalls","result","_handleTransit","_handleAfterDeactivateCalls","_handleAfterActivateCalls","_handleMatchingViews","subs","beforeDeactivate","afterDeactivate","beforeActivate","remove","_showSelectedChildren","w","hash","selectedChildren","visible","set","startInt","afterActivate","p","reverse","type","__hash","selChildren","getAllSelectedChildren","concat","subViewArray","backward","subViewNames","currentLastSubChild","resizeDone","mergedOpts","transitionDir"],"mappings":"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","file":"../../../app/controllers/Transition.js","sourcesContent":["define([\"require\", \"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/has\", \"dojo/on\", \"dojo/Deferred\", \"dojo/when\",\r\n\t\"dojo/dom-style\", \"../Controller\", \"../utils/constraints\"],\r\n\tfunction(require, lang, declare, has, on, Deferred, when, domStyle, Controller, constraints){\r\n\r\n\tvar transit;\r\n\tvar MODULE = \"app/controllers/Transition\";\r\n\tvar LOGKEY = \"logTransitions:\";\r\n\r\n\t// module:\r\n\t//\t\tdojox/app/controllers/Transition\r\n\t//\t\tBind \"app-transition\" event on dojox/app application instance.\r\n\t//\t\tDo transition from one view to another view.\r\n\treturn declare(\"dojox.app.controllers.Transition\", Controller, {\r\n\r\n\t\tproceeding: false,\r\n\r\n\t\twaitingQueue:[],\r\n\r\n\t\tconstructor: function(app, events){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbind \"app-transition\" event on application instance.\r\n\t\t\t//\r\n\t\t\t// app:\r\n\t\t\t//\t\tdojox/app application instance.\r\n\t\t\t// events:\r\n\t\t\t//\t\t{event : handler}\r\n\t\t\tthis.events = {\r\n\t\t\t\t\"app-transition\": this.transition,\r\n\t\t\t\t\"app-domNode\": this.onDomNodeChange\r\n\t\t\t};\r\n\t\t\trequire([this.app.transit || \"dojox/css3/transit\"], function(t){\r\n\t\t\t\ttransit = t;\r\n\t\t\t});\r\n\t\t\tif(this.app.domNode){\r\n\t\t\t\tthis.onDomNodeChange({oldNode: null, newNode: this.app.domNode});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttransition: function(event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"app-transition\" event.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse emit to trigger \"app-transition\" event, and this function will response to the event. For example:\r\n\t\t\t//\t\t|\tthis.app.emit(\"app-transition\", {\"viewId\": viewId, \"opts\": opts});\r\n\t\t\t//\r\n\t\t\t// event: Object\r\n\t\t\t//\t\t\"app-transition\" event parameter. It should be like: {\"viewId\": viewId, \"opts\": opts}\r\n\t\t\tvar F = MODULE+\":transition\";\r\n\t\t\tthis.app.log(LOGKEY,F,\" \");\r\n\t\t\tthis.app.log(LOGKEY,F,\"New Transition event.viewId=[\"+event.viewId+\"]\");\r\n\t\t\tthis.app.log(F,\"event.viewId=[\"+event.viewId+\"]\",\"event.opts=\",event.opts);\r\n\r\n\t\t\tvar viewsId = event.viewId || \"\";\r\n\t\t\tthis.proceedingSaved = this.proceeding;\t\r\n\t\t\tvar parts = viewsId.split('+');\r\n\t\t\tvar removePartsTest = viewsId.split('-');\r\n\t\t\tvar viewId, newEvent;\r\n\t\t\tif(parts.length > 0 || removePartsTest.length > 0){\r\n\t\t\t\twhile(parts.length > 1){ \t\r\n\t\t\t\t\tviewId = parts.shift();\r\n\t\t\t\t\tnewEvent = lang.clone(event);\r\n\t\t\t\t\tif(viewId.indexOf(\"-\") >= 0){ // there is a remove\r\n\t\t\t\t\t\tvar removeParts = viewId.split('-');\r\n\t\t\t\t\t\tif(removeParts.length > 0){\r\n\t\t\t\t\t\t\tviewId = removeParts.shift();\r\n\t\t\t\t\t\t\tif(viewId){\r\n\t\t\t\t\t\t\t\tnewEvent._removeView = false;\r\n\t\t\t\t\t\t\t\tnewEvent.viewId = viewId;\r\n\t\t\t\t\t\t\t\tthis.proceeding = true;\r\n\t\t\t\t\t\t\t\tthis.proceedTransition(newEvent);\r\n\t\t\t\t\t\t\t\tnewEvent = lang.clone(event);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tviewId = removeParts.shift();\r\n\t\t\t\t\t\t\tif(viewId){\r\n\t\t\t\t\t\t\t\tnewEvent._removeView = true;\r\n\t\t\t\t\t\t\t\tnewEvent.viewId = viewId;\r\n\t\t\t\t\t\t\t\tthis.proceeding = true;\r\n\t\t\t\t\t\t\t\tthis.proceedTransition(newEvent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tnewEvent._removeView = false;\r\n\t\t\t\t\t\tnewEvent.viewId = viewId;\r\n\t\t\t\t\t\tthis.proceeding = true;\r\n\t\t\t\t\t\tthis.proceedTransition(newEvent);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tviewId = parts.shift();\r\n\t\t\t\tvar removeParts = viewId.split('-');\r\n\t\t\t\tif(removeParts.length > 0){\r\n\t\t\t\t\tviewId = removeParts.shift();\r\n\t\t\t\t}\r\n\t\t\t\tif(viewId.length > 0){ // check viewId.length > 0 to skip this section for a transition with only -viewId\r\n\t\t\t\t\tthis.proceeding = this.proceedingSaved;\r\n\t\t\t\t\tevent.viewId = viewId;\r\n\t\t\t\t\tevent._doResize = true; // at the end of the last transition call resize\r\n\t\t\t\t\tevent._removeView = false;\r\n\t\t\t\t\tthis.proceedTransition(event);\r\n\t\t\t\t}\r\n\t\t\t\tif(removeParts.length > 0){\r\n\t\t\t\t\twhile(removeParts.length > 0){\r\n\t\t\t\t\t\tvar remViewId = removeParts.shift();\r\n\t\t\t\t\t\tnewEvent = lang.clone(event);\r\n\t\t\t\t\t\tnewEvent.viewId = remViewId;\r\n\t\t\t\t\t\tnewEvent._removeView = true;\r\n\t\t\t\t\t\tnewEvent._doResize = true; // at the end of the last transition call resize\r\n\t\t\t\t\t\tthis.proceedTransition(newEvent);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tevent._doResize = true; // at the end of the last transition call resize\r\n\t\t\t\tevent._removeView = false;\r\n\t\t\t\tthis.proceedTransition(event);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonDomNodeChange: function(evt){\r\n\t\t\tif(evt.oldNode != null){\r\n\t\t\t\tthis.unbind(evt.oldNode, \"startTransition\");\r\n\t\t\t}\r\n\t\t\tthis.bind(evt.newNode, \"startTransition\", lang.hitch(this, this.onStartTransition));\r\n\t\t},\r\n\r\n\t\tonStartTransition: function(evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tResponse to dojox/app \"startTransition\" event.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUse \"dojox/mobile/TransitionEvent\" to trigger \"startTransition\" event, and this function will response the event. For example:\r\n\t\t\t//\t\t|\tvar transOpts = {\r\n\t\t\t//\t\t|\t\ttitle:\"List\",\r\n\t\t\t//\t\t|\t\ttarget:\"items,list\",\r\n\t\t\t//\t\t|\t\turl: \"#items,list\",\r\n\t\t\t//\t\t|\t\tdata: {}\r\n\t\t\t//\t\t|\t};\r\n\t\t\t//\t\t|\tnew TransitionEvent(domNode, transOpts, e).dispatch();\r\n\t\t\t//\r\n\t\t\t// evt: Object\r\n\t\t\t//\t\ttransition options parameter\r\n\r\n\t\t\t// prevent event from bubbling to window and being\r\n\t\t\t// processed by dojox/mobile/ViewController\r\n\t\t\tif(evt.preventDefault){\r\n\t\t\t\tevt.preventDefault();\r\n\t\t\t}\r\n\t\t\tevt.cancelBubble = true;\r\n\t\t\tif(evt.stopPropagation){\r\n\t\t\t\tevt.stopPropagation();\r\n\t\t\t}\r\n\r\n\t\t\tvar target = evt.detail.target;\r\n\t\t\tvar regex = /#(.+)/;\r\n\t\t\tif(!target && regex.test(evt.detail.href)){\r\n\t\t\t\ttarget = evt.detail.href.match(regex)[1];\r\n\t\t\t}\r\n\r\n\t\t\t// transition to the target view\r\n\t\t\tthis.transition({ \"viewId\":target, opts: lang.mixin({}, evt.detail), data: evt.detail.data });\r\n\t\t},\r\n\r\n\t\t_addTransitionEventToWaitingQueue: function(transitionEvt){\r\n\t\t\tif(transitionEvt.defaultView && this.waitingQueue.length > 0){ // need to test for defaultView to position this view correctly\r\n\t\t\t\tvar addedEvt = false;\r\n\t\t\t\tfor(var i = 0; i < this.waitingQueue.length; i++){\r\n\t\t\t\t\tvar evt = this.waitingQueue[i];\r\n\t\t\t\t\tif(!evt.defaultView){\r\n\t\t\t\t\t\tthis.waitingQueue.splice(i,0,transitionEvt); // insert before first non defaultView\r\n\t\t\t\t\t\taddedEvt = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!addedEvt){\r\n\t\t\t\t\tthis.waitingQueue.push(transitionEvt);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tthis.waitingQueue.push(transitionEvt);\r\n\t\t\t}\r\n\t\t},\r\n\t\tproceedTransition: function(transitionEvt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tProceed transition queue by FIFO by default.\r\n\t\t\t//\t\tIf transition is in proceeding, add the next transition to waiting queue.\r\n\t\t\t//\r\n\t\t\t// transitionEvt: Object\r\n\t\t\t//\t\t\"app-transition\" event parameter. It should be like: {\"viewId\":viewId, \"opts\":opts}\r\n\t\t\tvar F = MODULE+\":proceedTransition\";\r\n\r\n\t\t\tif(this.proceeding){\r\n\t\t\t\tthis._addTransitionEventToWaitingQueue(transitionEvt);\r\n\t\t\t\tthis.app.log(F+\" added this event to waitingQueue\", transitionEvt);\r\n\t\t\t\tthis.processingQueue = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// If there are events waiting, needed to have the last in be the last processed, so add it to waitingQueue\r\n\t\t\t// process the events in order.\r\n\t\t\tthis.app.log(F+\" this.waitingQueue.length =\"+ this.waitingQueue.length+ \" this.processingQueue=\"+this.processingQueue);\r\n\t\t\tif(this.waitingQueue.length > 0 && !this.processingQueue){\r\n\t\t\t\tthis.processingQueue = true;\r\n\t\t\t\tthis._addTransitionEventToWaitingQueue(transitionEvt);\r\n\t\t\t\tthis.app.log(F+\" added this event to waitingQueue passed proceeding\", transitionEvt);\r\n\t\t\t\ttransitionEvt = this.waitingQueue.shift();\r\n\t\t\t\tthis.app.log(F+\" shifted waitingQueue to process\", transitionEvt);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.proceeding = true;\r\n\r\n\t\t\tthis.app.log(F+\" calling trigger load\", transitionEvt);\r\n\t\t\tif(!transitionEvt.opts){\r\n\t\t\t\ttransitionEvt.opts = {};\r\n\t\t\t}\r\n\t\t\tvar params = transitionEvt.params || transitionEvt.opts.params;\r\n\t\t\tthis.app.emit(\"app-load\", {\r\n\t\t\t\t\"viewId\": transitionEvt.viewId,\r\n\t\t\t\t\"params\": params,\r\n\t\t\t\t\"forceTransitionNone\": transitionEvt.forceTransitionNone,\r\n\t\t\t\t\"callback\": lang.hitch(this, function(needToHandleDefaultView, defaultHasPlus){\r\n\t\t\t\t\tif(needToHandleDefaultView){ // do not process this view if needToHandleDefaultView true\r\n\t\t\t\t\t\tthis.proceeding = false;\r\n\t\t\t\t\t\tthis.processingQueue = true;\r\n\t\t\t\t\t\t// use pop instead of shift here to get the last event for the defaultView when the default does not have a +\r\n\t\t\t\t\t\t// use shift when it has a + or the defaults will be out of order but it can move the default to be after other views if we are processing views with a +\r\n\t\t\t\t\t\tvar nextEvt = (defaultHasPlus) ? this.waitingQueue.shift() : this.waitingQueue.pop();\r\n\t\t\t\t\t\tif(nextEvt){\r\n\t\t\t\t\t\t\tthis.proceedTransition(nextEvt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tvar transitionDef = this._doTransition(transitionEvt.viewId, transitionEvt.opts, params, transitionEvt.opts.data, this.app, transitionEvt._removeView, transitionEvt._doResize, transitionEvt.forceTransitionNone);\r\n\t\t\t\t\t\twhen(transitionDef, lang.hitch(this, function(){\r\n\t\t\t\t\t\t\tthis.proceeding = false;\r\n\t\t\t\t\t\t\tthis.processingQueue = true;\r\n\t\t\t\t\t\t\tvar nextEvt = this.waitingQueue.shift();\r\n\t\t\t\t\t\t\tif(nextEvt){\r\n\t\t\t\t\t\t\t\tthis.proceedTransition(nextEvt);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_getTransition: function(nextView, parent, transitionTo, opts, forceTransitionNone){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet view's transition type from the config for the view or from the parent view recursively.\r\n\t\t\t//\t\tIf not available use the transition option otherwise get view default transition type in the\r\n\t\t\t//\t\tconfig from parent view.\r\n\t\t\t//\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tview's parent\r\n\t\t\t// transitionTo: Object\r\n\t\t\t//\t\tview to transition to\r\n\t\t\t//\topts: Object\r\n\t\t\t//\t\ttransition options\r\n\t\t\t// forceTransitionNone: boolean\r\n\t\t\t//\t\ttrue if the transition type should be forced to none, used for the initial defaultView\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\ttransition type like \"slide\", \"fade\", \"flip\" or \"none\".\r\n\t\t\tif(forceTransitionNone){\r\n\t\t\t\treturn \"none\";\r\n\t\t\t}\r\n\t\t\tvar parentView = parent;\r\n\t\t\tvar transition = null;\r\n\t\t\tif(nextView){\r\n\t\t\t\ttransition = nextView.transition;\r\n\t\t\t}\r\n\t\t\tif(!transition && parentView.views[transitionTo]){\r\n\t\t\t\ttransition = parentView.views[transitionTo].transition;\r\n\t\t\t} \r\n\t\t\tif(!transition){\r\n\t\t\t\ttransition = parentView.transition;\r\n\t\t\t}\r\n\t\t\tvar defaultTransition = (nextView && nextView.defaultTransition) ?  nextView.defaultTransition : parentView.defaultTransition;\r\n\t\t\twhile(!transition && parentView.parent){\r\n\t\t\t\tparentView = parentView.parent;\r\n\t\t\t\ttransition = parentView.transition;\r\n\t\t\t\tif(!defaultTransition){\r\n\t\t\t\t\tdefaultTransition = parentView.defaultTransition;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn transition || opts.transition || defaultTransition || \"none\";\r\n\t\t},\r\n\r\n\r\n\t\t_getParamsForView: function(view, params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet view's params only include view specific params if they are for this view.\r\n\t\t\t//\r\n\t\t\t// view: String\r\n\t\t\t//\t\tthe view's name\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tthe params\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tparams Object for this view\r\n\t\t\tvar viewParams = {};\r\n\t\t\tfor(var item in params){\r\n\t\t\t\tvar value = params[item];\r\n\t\t\t\tif(lang.isObject(value)){\t// view specific params\r\n\t\t\t\t\tif(item == view){\t\t// it is for this view\r\n\t\t\t\t\t\t// need to add these params for the view\r\n\t\t\t\t\t\tviewParams = lang.mixin(viewParams, value);\r\n\t\t\t\t\t} \r\n\t\t\t\t}else{\t// these params are for all views, so add them\r\n\t\t\t\t\tif(item && value != null){\r\n\t\t\t\t\t\tviewParams[item] = params[item];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn viewParams;\r\n\t\t},\r\n\r\n\t\t_doTransition: function(transitionTo, opts, params, data, parent, removeView, doResize, forceTransitionNone, nested){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTransitions from the currently visible view to the defined view.\r\n\t\t\t//\t\tIt should determine what would be the best transition unless\r\n\t\t\t//\t\tan override in opts tells it to use a specific transitioning methodology\r\n\t\t\t//\t\tthe transitionTo is a string in the form of [view1,view2].\r\n\t\t\t//\r\n\t\t\t// transitionTo: Object\r\n\t\t\t//\t\ttransition to view id. It looks like #tabView,tab1\r\n\t\t\t// opts: Object\r\n\t\t\t//\t\ttransition options\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tparams\r\n\t\t\t// data: Object\r\n\t\t\t//\t\tdata object that will be passed on activate & de-activate methods of the view\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tview's parent\r\n\t\t\t// removeView: Boolean\r\n\t\t\t//\t\tremove the view instead of transition to it\r\n\t\t\t// doResize: Boolean\r\n\t\t\t//\t\temit a resize event\r\n\t\t\t// forceTransitionNone: Boolean\r\n\t\t\t//\t\tforce the transition type to be none, used for the initial default view\r\n\t\t\t// nested: Boolean\r\n\t\t\t//\t\twhether the method is called from the transitioning of a parent view\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\ttransit dojo/promise/all object.\r\n\t\t\tvar F = MODULE+\":_doTransition\";\r\n\r\n\t\t\tif(!parent){\r\n\t\t\t\tthrow Error(\"view parent not found in transition.\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.app.log(F+\" transitionTo=[\",transitionTo,\"], removeView=[\",removeView,\"] parent.name=[\",parent.name,\"], opts=\",opts);\r\n\r\n\t\t\tvar parts, toId, subIds, next;\r\n\t\t\tif(transitionTo){\r\n\t\t\t\tparts = transitionTo.split(\",\");\r\n\t\t\t}else{\r\n\t\t\t\t// If parent.defaultView is like \"main,main\", we also need to split it and set the value to toId and subIds.\r\n\t\t\t\t// Or cannot get the next view by \"parent.children[parent.id + '_' + toId]\"\r\n\t\t\t\tparts = parent.defaultView.split(\",\");\r\n\t\t\t}\r\n\t\t\ttoId = parts.shift();\r\n\t\t\tsubIds = parts.join(',');\r\n\r\n\t\t\t// next is loaded and ready for transition\r\n\t\t\tnext = parent.children[parent.id + '_' + toId];\r\n\t\t\tif(!next){\r\n\t\t\t\tif(removeView){\r\n\t\t\t\t\tthis.app.log(F+\" called with removeView true, but that view is not available to remove\");\r\n\t\t\t\t\treturn;\t// trying to remove a view which is not showing\r\n\t\t\t\t}\r\n\t\t\t\tthrow Error(\"child view must be loaded before transition.\");\r\n\t\t\t}\r\n\t\t\t// if no subIds and next has default view,\r\n\t\t\t// set the subIds to the default view and transition to default view.\r\n\t\t\tif(!subIds && next.defaultView){\r\n\t\t\t\tsubIds = next.defaultView;\r\n\t\t\t}\r\n\r\n\t\t\tvar nextSubViewArray = [next || parent];\r\n\t\t\tif(subIds){\r\n\t\t\t\tnextSubViewArray = this._getNextSubViewArray(subIds, next, parent);\r\n\t\t\t}\r\n\r\n\t\t\tvar current = constraints.getSelectedChild(parent, next.constraint);\r\n\t\t\tvar currentSubViewArray = this._getCurrentSubViewArray(parent, nextSubViewArray, removeView);\r\n\r\n\t\t\tvar currentSubNames = this._getNamesFromArray(currentSubViewArray, false);\r\n\t\t\tvar nextSubNames = this._getNamesFromArray(nextSubViewArray, true);\r\n\r\n\t\t\t// set params on next view.\r\n\t\t\tnext.params = this._getParamsForView(next.name, params);\r\n\r\n\t\t\tif(removeView){\r\n\t\t\t\tif(next !== current){ // nothing to remove\r\n\t\t\t\t\tthis.app.log(F+\" called with removeView true, but that view is not available to remove\");\r\n\t\t\t\t\treturn;\t// trying to remove a view which is not showing\r\n\t\t\t\t}\t\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"Transition Remove current From=[\"+currentSubNames+\"]\");\r\n\t\t\t\t// if next == current we will set next to null and remove the view with out a replacement\r\n\t\t\t\tnext = null;\r\n\t\t\t}\r\n\r\n\t\t\tif(nextSubNames == currentSubNames && next == current){ // new test to see if current matches next\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"Transition current and next DO MATCH From=[\"+currentSubNames+\"] TO=[\"+nextSubNames+\"]\");\r\n\t\t\t\tthis._handleMatchingViews(nextSubViewArray, next, current, parent, data, removeView, doResize, subIds, currentSubNames, toId, forceTransitionNone, opts);\r\n\r\n\t\t\t}else{\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"Transition current and next DO NOT MATCH From=[\"+currentSubNames+\"] TO=[\"+nextSubNames+\"]\");\r\n\t\t\t\t//When clicking fast, history module will cache the transition request que\r\n\t\t\t\t//and prevent the transition conflicts.\r\n\t\t\t\t//Originally when we conduct transition, selectedChild will not be the\r\n\t\t\t\t//view we want to start transition. For example, during transition 1 -> 2\r\n\t\t\t\t//if user click button to transition to 3 and then transition to 1. After\r\n\t\t\t\t//1->2 completes, it will perform transition 2 -> 3 and 2 -> 1 because\r\n\t\t\t\t//selectedChild is always point to 2 during 1 -> 2 transition and transition\r\n\t\t\t\t//will record 2->3 and 2->1 right after the button is clicked.\r\n\r\n\t\t\t\t//assume next is already loaded so that this.set(...) will not return\r\n\t\t\t\t//a promise object. this.set(...) will handles the this.selectedChild,\r\n\t\t\t\t//activate or deactivate views and refresh layout.\r\n\r\n\t\t\t\t//necessary, to avoid a flash when the layout sets display before resize\r\n\t\t\t\tif(!removeView && next){\r\n\t\t\t\t\tvar nextLastSubChild = this.nextLastSubChildMatch || next;\r\n\t\t\t\t\tvar startHiding = false; // only hide views which will transition in\r\n\t\t\t\t\tfor(var i = nextSubViewArray.length-1; i >= 0; i--){\r\n\t\t\t\t\t\tvar v = nextSubViewArray[i];\r\n\t\t\t\t\t\tif(startHiding || v.id == nextLastSubChild.id){\r\n\t\t\t\t\t\t\tstartHiding = true;\r\n\t\t\t\t\t\t\tif(!v._needsResize && v.domNode){\r\n\t\t\t\t\t\t\t\tthis.app.log(LOGKEY,F,\" setting domStyle visibility hidden for v.id=[\"+v.id+\"], display=[\"+v.domNode.style.display+\"], visibility=[\"+v.domNode.style.visibility+\"]\");\r\n\t\t\t\t\t\t\t\tthis._setViewVisible(v, false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(current && current._active){\r\n\t\t\t\t\tthis._handleBeforeDeactivateCalls(currentSubViewArray, this.nextLastSubChildMatch || next, current, data, subIds);\r\n\t\t\t\t}\r\n\t\t\t\tif(next){\r\n\t\t\t\t\tthis.app.log(F+\" calling _handleBeforeActivateCalls next name=[\",next.name,\"], parent.name=[\",next.parent.name,\"]\");\r\n\t\t\t\t\tthis._handleBeforeActivateCalls(nextSubViewArray, this.currentLastSubChildMatch || current, data, subIds);\r\n\t\t\t\t}\r\n\t\t\t\tif(!removeView){\r\n\t\t\t\t\tvar nextLastSubChild = this.nextLastSubChildMatch || next;\r\n\t\t\t\t\tvar trans = this._getTransition(nextLastSubChild, parent, toId, opts, forceTransitionNone)\r\n\t\t\t\t\tthis.app.log(F+\" calling _handleLayoutAndResizeCalls trans=\"+trans);\r\n\t\t\t\t\tthis._handleLayoutAndResizeCalls(nextSubViewArray, removeView, doResize, subIds, forceTransitionNone, trans);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// for removeView need to set visible before transition do it here\r\n\t\t\t\t\tfor(var i = 0; i < nextSubViewArray.length; i++){\r\n\t\t\t\t\t\tvar v = nextSubViewArray[i];\r\n\t\t\t\t\t\tthis.app.log(LOGKEY,F,\"setting visibility visible for v.id=[\"+v.id+\"]\");\r\n\t\t\t\t\t\tif(v.domNode){\r\n\t\t\t\t\t\t\tthis.app.log(LOGKEY,F,\"  setting domStyle for removeView visibility visible for v.id=[\"+v.id+\"], display=[\"+v.domNode.style.display+\"]\");\r\n\t\t\t\t\t\t\tthis._setViewVisible(v, true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar result = true;\r\n\r\n\t\t\t\t// this.currentLastSubChildMatch holds the view to transition from\r\n\t\t\t\tif(transit && (!nested || this.currentLastSubChildMatch != null) && this.currentLastSubChildMatch !== next){\r\n\t\t\t\t\t// css3 transit has the check for IE so it will not try to do it on ie, so we do not need to check it here.\r\n\t\t\t\t\t// We skip in we are transitioning to a nested view from a parent view and that nested view\r\n\t\t\t\t\t// did not have any current\r\n\t\t\t\t\tresult = this._handleTransit(next, parent, this.currentLastSubChildMatch, opts, toId, removeView, forceTransitionNone, doResize);\r\n\t\t\t\t}\r\n\t\t\t\twhen(result, lang.hitch(this, function(){\r\n\t\t\t\t\tif(next){\r\n\t\t\t\t\t\tthis.app.log(F+\" back from transit for next =\"+next.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(removeView){\r\n\t\t\t\t\t\tvar nextLastSubChild = this.nextLastSubChildMatch || next;\r\n\t\t\t\t\t\tvar trans = this._getTransition(nextLastSubChild, parent, toId, opts, forceTransitionNone)\r\n\t\t\t\t\t\tthis._handleLayoutAndResizeCalls(nextSubViewArray, removeView, doResize, subIds, forceTransitionNone, trans);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Add call to handleAfterDeactivate and handleAfterActivate here!\r\n\t\t\t\t\tthis._handleAfterDeactivateCalls(currentSubViewArray, this.nextLastSubChildMatch || next, current, data, subIds);\r\n\t\t\t\t\tthis._handleAfterActivateCalls(nextSubViewArray, removeView, this.currentLastSubChildMatch || current, data, subIds);\r\n\t\t\t\t}));\r\n\t\t\t\treturn result; // dojo/promise/all\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_handleMatchingViews: function(subs, next, current, parent, data, removeView, doResize, subIds, currentSubNames, toId, forceTransitionNone, opts){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the current views and the next views match\r\n\t\t\tvar F = MODULE+\":_handleMatchingViews\";\r\n\r\n\t\t\tthis._handleBeforeDeactivateCalls(subs, this.nextLastSubChildMatch || next, current, data, subIds);\r\n\t\t\t// this is the order that things were being done before on a reload of the same views, so I left it\r\n\t\t\t// calling _handleAfterDeactivateCalls here instead of after _handleLayoutAndResizeCalls\r\n\t\t\tthis._handleAfterDeactivateCalls(subs, this.nextLastSubChildMatch || next, current, data, subIds);\r\n\t\t\tthis._handleBeforeActivateCalls(subs, this.currentLastSubChildMatch || current, data, subIds);\r\n\t\t\tvar nextLastSubChild = this.nextLastSubChildMatch || next;\r\n\t\t\tvar trans = this._getTransition(nextLastSubChild, parent, toId, opts, forceTransitionNone)\r\n\t\t\tthis._handleLayoutAndResizeCalls(subs, removeView, doResize, subIds, trans);\r\n\t\t\tthis._handleAfterActivateCalls(subs, removeView, this.currentLastSubChildMatch || current, data, subIds);\r\n\t\t},\r\n\r\n\t\t_handleBeforeDeactivateCalls: function(subs, next, current, /*parent,*/ data, /*removeView, doResize,*/ subIds/*, currentSubNames*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall beforeDeactivate for each of the current views which are about to be deactivated\r\n\t\t\tvar F = MODULE+\":_handleBeforeDeactivateCalls\";\r\n\t\t\tif(current._active){\r\n\t\t\t\t//now we need to loop backwards thru subs calling beforeDeactivate\r\n\t\t\t\tfor(var i = subs.length-1; i >= 0; i--){\r\n\t\t\t\t\tvar v = subs[i];\r\n\t\t\t\t\tif(v && v.beforeDeactivate && v._active){\r\n\t\t\t\t\t\tthis.app.log(LOGKEY,F,\"beforeDeactivate for v.id=\"+v.id);\r\n\t\t\t\t\t\tv.beforeDeactivate(next, data);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_handleAfterDeactivateCalls: function(subs, next, current, data, subIds){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall afterDeactivate for each of the current views which have been deactivated\r\n\t\t\tvar F = MODULE+\":_handleAfterDeactivateCalls\";\r\n\t\t\tif(current && current._active){\r\n\t\t\t\t//now we need to loop forwards thru subs calling afterDeactivate\r\n\t\t\t\tfor(var i = 0; i < subs.length; i++){\r\n\t\t\t\t\tvar v = subs[i];\r\n\t\t\t\t\tif(v && v.beforeDeactivate && v._active){\r\n\t\t\t\t\t\tthis.app.log(LOGKEY,F,\"afterDeactivate for v.id=\"+v.id);\r\n\t\t\t\t\t\tv.afterDeactivate(next, data);\r\n\t\t\t\t\t\tv._active = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_handleBeforeActivateCalls: function(subs, current, data, subIds){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall beforeActivate for each of the next views about to be activated\r\n\t\t\tvar F = MODULE+\":_handleBeforeActivateCalls\";\r\n\t\t\t//now we need to loop backwards thru subs calling beforeActivate (ok since next matches current)\r\n\t\t\tfor(var i = subs.length-1; i >= 0; i--){\r\n\t\t\t\tvar v = subs[i];\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"beforeActivate for v.id=\"+v.id);\r\n\t\t\t\tv.beforeActivate(current, data);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_handleLayoutAndResizeCalls: function(subs, removeView, doResize, subIds, forceTransitionNone, transition){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfire app-layoutView for each of the next views about to be activated, and fire app-resize if doResize is true\r\n\t\t\tvar F = MODULE+\":_handleLayoutAndResizeCalls\";\r\n\t\t\tvar remove = removeView;\r\n\t\t\tfor(var i = 0; i < subs.length; i++){\r\n\t\t\t\tvar v = subs[i];\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"emit layoutView v.id=[\"+v.id+\"] removeView=[\"+remove+\"]\");\r\n\t\t\t\t// it seems like we should be able to minimize calls to resize by passing doResize: false and only doing resize on the app-resize emit\r\n\t\t\t\tthis.app.emit(\"app-layoutView\", {\"parent\": v.parent, \"view\": v, \"removeView\": remove, \"doResize\": false, \"transition\": transition, \"currentLastSubChildMatch\": this.currentLastSubChildMatch});\r\n\t\t\t\tremove = false;\r\n\t\t\t}\r\n\t\t\tif(doResize){\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"emit doResize called\");\r\n\t\t\t\tthis.app.emit(\"app-resize\"); // after last layoutView fire app-resize\r\n\t\t\t\tif(transition == \"none\"){\r\n\t\t\t\t\tthis._showSelectedChildren(this.app); // Need to set visible too before transition do it now.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_showSelectedChildren: function(w){\r\n\t\t\tvar F = MODULE+\":_showSelectedChildren\";\r\n\t\t\tthis.app.log(LOGKEY,F,\" setting domStyle visibility visible for w.id=[\"+w.id+\"], display=[\"+w.domNode.style.display+\"], visibility=[\"+w.domNode.style.visibility+\"]\");\r\n\t\t\tthis._setViewVisible(w, true);\r\n\t\t\tw._needsResize = false;\r\n\t\t\tfor(var hash in w.selectedChildren){\t// need this to handle all selectedChildren\r\n\t\t\t\tif(w.selectedChildren[hash] && w.selectedChildren[hash].domNode){\r\n\t\t\t\t\tthis.app.log(LOGKEY,F,\" calling _showSelectedChildren for w.selectedChildren[hash].id=\"+w.selectedChildren[hash].id);\r\n\t\t\t\t\tthis._showSelectedChildren(w.selectedChildren[hash]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setViewVisible: function(v, visible){\r\n\t\t\tif(visible){\r\n\t\t\t\tdomStyle.set(v.domNode, \"visibility\", \"visible\");\r\n\t\t\t}else{\r\n\t\t\t\tdomStyle.set(v.domNode, \"visibility\", \"hidden\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\r\n\t\t_handleAfterActivateCalls: function(subs, removeView, current, data, subIds){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall afterActivate for each of the next views which have been activated\r\n\t\t\tvar F = MODULE+\":_handleAfterActivateCalls\";\r\n\t\t\t//now we need to loop backwards thru subs calling beforeActivate (ok since next matches current)\r\n\t\t\tvar startInt = 0;\r\n\t\t\tif(removeView && subs.length > 1){\r\n\t\t\t\tstartInt = 1;\r\n\t\t\t}\r\n\t\t\tfor(var i = startInt; i < subs.length; i++){\r\n\t\t\t\tvar v = subs[i];\r\n\t\t\t\tif(v.afterActivate){\r\n\t\t\t\t\tthis.app.log(LOGKEY,F,\"afterActivate for v.id=\"+v.id);\r\n\t\t\t\t\tv.afterActivate(current, data);\r\n\t\t\t\t\tv._active = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getNextSubViewArray: function(subIds, next, parent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet next sub view array, this array will hold the views which are about to be transitioned to\r\n\t\t\t//\r\n\t\t\t// subIds: String\r\n\t\t\t//\t\tthe subids, the views are separated with a comma\r\n\t\t\t// next: Object\r\n\t\t\t//\t\tthe next view to be transitioned to.\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tthe parent view used in place of next if next is not set.\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tArray of views which will be transitioned to during this transition\r\n\t\t\tvar F = MODULE+\":_getNextSubViewArray\";\r\n\t\t\tvar parts = [];\r\n\t\t\tvar p = next || parent;\r\n\t\t\tif(subIds){\r\n\t\t\t\tparts = subIds.split(\",\");\r\n\t\t\t}\r\n\t\t\tvar nextSubViewArray = [p];\r\n\t\t\t//now we need to loop forwards thru subIds calling beforeActivate\r\n\t\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\t\ttoId = parts[i];\r\n\t\t\t\tvar v = p.children[p.id + '_' + toId];\r\n\t\t\t\tif(v){\r\n\t\t\t\t\tnextSubViewArray.push(v);\r\n\t\t\t\t\tp = v;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnextSubViewArray.reverse();\r\n\t\t\treturn nextSubViewArray;\r\n\t\t},\r\n\r\n\t\t_getCurrentSubViewArray: function(parent, nextSubViewArray, removeView){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet current sub view array which will be replaced by the views in the nextSubViewArray\r\n\t\t\t//\r\n\t\t\t// parent: String\r\n\t\t\t//\t\tthe parent view whose selected children will be replaced\r\n\t\t\t// nextSubViewArray: Array\r\n\t\t\t//\t\tthe array of views which are to be transitioned to.\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tArray of views which will be deactivated during this transition\r\n\t\t\tvar F = MODULE+\":_getCurrentSubViewArray\";\r\n\t\t\tvar currentSubViewArray = [];\r\n\t\t\tvar constraint, type, hash;\r\n\t\t\tvar p = parent;\r\n\t\t\tthis.currentLastSubChildMatch = null;\r\n\t\t\tthis.nextLastSubChildMatch = null;\r\n\r\n\t\t\tfor(var i = nextSubViewArray.length-1; i >= 0; i--){\r\n\t\t\t\tconstraint = nextSubViewArray[i].constraint;\r\n\t\t\t\ttype = typeof(constraint);\r\n\t\t\t\thash = (type == \"string\" || type == \"number\") ? constraint : constraint.__hash;\r\n\t\t\t\t// if there is a selected child for this constraint, and the child matches this view, push it.\r\n\t\t\t\tif(p && p.selectedChildren && p.selectedChildren[hash]){\r\n\t\t\t\t\tif(p.selectedChildren[hash] == nextSubViewArray[i]){\r\n\t\t\t\t\t\tthis.currentLastSubChildMatch = p.selectedChildren[hash];\r\n\t\t\t\t\t\tthis.nextLastSubChildMatch = nextSubViewArray[i];\r\n\t\t\t\t\t\tcurrentSubViewArray.push(this.currentLastSubChildMatch);\r\n\t\t\t\t\t\tp = this.currentLastSubChildMatch;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis.currentLastSubChildMatch = p.selectedChildren[hash];\r\n\t\t\t\t\t\tcurrentSubViewArray.push(this.currentLastSubChildMatch);\r\n\t\t\t\t\t\tthis.nextLastSubChildMatch = nextSubViewArray[i]; // setting this means the transition will be done to the child instead of the parent\r\n\t\t\t\t\t\t// since the constraint was set, but it did not match, need to deactivate all selected children of this.currentLastSubChildMatch\r\n\t\t\t\t\t\tif(!removeView){\r\n\t\t\t\t\t\t\tvar selChildren = constraints.getAllSelectedChildren(this.currentLastSubChildMatch);\r\n\t\t\t\t\t\t\tcurrentSubViewArray = currentSubViewArray.concat(selChildren);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{ // the else is for the constraint not matching which means no more to deactivate.\r\n\t\t\t\t\tthis.currentLastSubChildMatch = null; // there was no view selected for this constraint\r\n\t\t\t\t\tthis.nextLastSubChildMatch = nextSubViewArray[i]; // set this to the next view for transition to an empty constraint\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t// Here since they had the constraint but it was not the same I need to deactivate all children of p\r\n\t\t\tif(removeView){\r\n\t\t\t\tvar selChildren = constraints.getAllSelectedChildren(p);\r\n\t\t\t\tcurrentSubViewArray = currentSubViewArray.concat(selChildren);\r\n\t\t\t}\r\n\r\n\t\t\treturn currentSubViewArray;\r\n\t\t},\r\n\r\n\t\t_getNamesFromArray: function(subViewArray, backward){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet names from the sub view names array\r\n\t\t\t//\r\n\t\t\t// subViewArray: Array\r\n\t\t\t//\t\tthe array of views to get the names from.\r\n\t\t\t// backward: boolean\r\n\t\t\t//\t\tthe direction to loop thru the array to get the names.\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tString of view names separated by a comma\r\n\t\t\t//\r\n\t\t\tvar F = MODULE+\":_getNamesFromArray\";\r\n\t\t\tvar subViewNames = \"\";\r\n\t\t\tif(backward){\r\n\t\t\t\tfor (var i = subViewArray.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tsubViewNames = subViewNames ? subViewNames+\",\"+subViewArray[i].name : subViewArray[i].name;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tfor(var i = 0; i < subViewArray.length; i++){\r\n\t\t\t\t\tsubViewNames = subViewNames ? subViewNames+\",\"+subViewArray[i].name : subViewArray[i].name;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn subViewNames;\r\n\t\t},\r\n\r\n\t\t_handleTransit: function(next, parent, currentLastSubChild, opts, toId, removeView, forceTransitionNone, resizeDone){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetup the options and call transit to do the transition\r\n\t\t\t//\r\n\t\t\t// next: Object\r\n\t\t\t//\t\tthe next view, the view which will be transitioned to\r\n\t\t\t// parent: Object\r\n\t\t\t//\t\tthe parent view which is used to get the transition type to be used\r\n\t\t\t// currentLastSubChild: Object\r\n\t\t\t//\t\tthe current view which is being transitioned away from\r\n\t\t\t// opts: Object\r\n\t\t\t//\t\tthe options used for the transition\r\n\t\t\t// toId: String\r\n\t\t\t//\t\tthe id of the view being transitioned to\r\n\t\t\t// removeView: boolean\r\n\t\t\t//\t\ttrue if the view is being removed\r\n\t\t\t// forceTransitionNone: boolean\r\n\t\t\t//\t\ttrue if the transition type should be forced to none, used for the initial defaultView\r\n\t\t\t// resizeDone: boolean\r\n\t\t\t//\t\ttrue if resize was called before this transition\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe promise returned by the call to transit\r\n\t\t\tvar F = MODULE+\":_handleTransit\";\r\n\r\n\t\t\tvar nextLastSubChild = this.nextLastSubChildMatch || next;\r\n\r\n\t\t\tvar mergedOpts = lang.mixin({}, opts); // handle reverse from mergedOpts or transitionDir\r\n\t\t\tmergedOpts = lang.mixin({}, mergedOpts, {\r\n\t\t\t\treverse: (mergedOpts.reverse || mergedOpts.transitionDir === -1)?true:false,\r\n\t\t\t\t// if transition is set for the view (or parent) in the config use it, otherwise use it from the event or defaultTransition from the config\r\n\t\t\t\ttransition: this._getTransition(nextLastSubChild, parent, toId, mergedOpts, forceTransitionNone)\r\n\t\t\t});\r\n\r\n\t\t\tif(removeView){\r\n\t\t\t\tnextLastSubChild = null;\r\n\t\t\t}\r\n\t\t\tif(currentLastSubChild){\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"transit FROM currentLastSubChild.id=[\"+currentLastSubChild.id+\"]\");\r\n\t\t\t}\r\n\t\t\tif(nextLastSubChild){\r\n\t\t\t\tif(mergedOpts.transition !== \"none\"){\r\n\t\t\t\t\tif(!resizeDone && nextLastSubChild._needsResize){ // need to resize if not done yet or things will not be positioned correctly\r\n\t\t\t\t\t\tthis.app.log(LOGKEY,F,\"emit doResize called from _handleTransit\");\r\n\t\t\t\t\t\tthis.app.emit(\"app-resize\"); // after last layoutView fire app-resize\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.app.log(LOGKEY,F,\"  calling _showSelectedChildren for w3.id=[\"+nextLastSubChild.id+\"], display=[\"+nextLastSubChild.domNode.style.display+\"], visibility=[\"+nextLastSubChild.domNode.style.visibility+\"]\");\r\n\t\t\t\t\tthis._showSelectedChildren(this.app); // Need to set visible too before transition do it now.\r\n\t\t\t\t}\r\n\t\t\t\tthis.app.log(LOGKEY,F,\"transit TO nextLastSubChild.id=[\"+nextLastSubChild.id+\"] transition=[\"+mergedOpts.transition+\"]\");\r\n\t\t\t}else{\r\n\t\t\t\tthis._showSelectedChildren(this.app); // Need to set visible too before transition do it now.\r\n\t\t\t}\r\n\t\t\treturn transit(currentLastSubChild && currentLastSubChild.domNode, nextLastSubChild && nextLastSubChild.domNode, mergedOpts);\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}