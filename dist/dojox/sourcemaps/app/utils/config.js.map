{"version":3,"sources":["app/utils/config.js"],"names":["define","has","configProcessHas","source","name","sval","hasname","charAt","parts","split","length","haspart","shift","substring","hasval","this","configMerge","target","tval","Array","push"],"mappings":";;;;;;;AAAAA,QAAQ,cAAe,SAASC,GAKhC,OAICC,iBAAkB,SAAoBC,GAarC,IAAI,IAAIC,KAAQD,EAAO,CACtB,IAAIE,EAAOF,EAAOC,GAClB,GAAW,OAARA,EAAc,CAChB,IAAI,IAAIE,KAAWD,EAClB,IAA0B,KAArBC,EAAQC,OAAO,IAAkC,KAArBD,EAAQC,OAAO,KAAcF,GAAwB,iBAATA,EAAkB,CAE9F,IAAIG,EAAQF,EAAQG,MAAM,KAC1B,GAAGD,EAAME,OAAS,EACjB,KAAMF,EAAME,OAAS,GAAE,CACtB,IAAIC,EAAUH,EAAMI,QAEpB,GAAIX,EAAIU,IAAmC,KAArBA,EAAQJ,OAAO,KAAeN,EAAIU,EAAQE,UAAU,IAAM,CAC/E,IAAIC,EAAST,EAAKC,GAClBS,KAAKC,YAAYb,EAAQW,GACzB,eAMEX,EAAY,QAEI,KAAlBC,EAAKG,OAAO,IAA+B,KAAlBH,EAAKG,OAAO,KAAcF,GAAwB,iBAATA,GACrEU,KAAKb,iBAAiBG,GAI1B,OAAOF,GAGRa,YAAa,SAAoBC,EAAmBd,GAanD,IAAI,IAAIC,KAAQD,EAAO,CACtB,IAAIe,EAAOD,EAAOb,GACdC,EAAOF,EAAOC,GACfc,IAASb,GAA4B,KAAlBD,EAAKG,OAAO,IAA+B,KAAlBH,EAAKG,OAAO,KACvDW,GAAwB,iBAATA,GAAqBb,GAAwB,iBAATA,EACrDU,KAAKC,YAAYE,EAAMb,GAEpBY,aAAkBE,MACpBF,EAAOG,KAAKf,GAEZY,EAAOb,GAAQC,GAKnB,OAAOY","file":"../../../app/utils/config.js","sourcesContent":["define([\"dojo/sniff\"], function(has){\r\n\r\n// module:\r\n//\t\tdojox/app/utils/config\r\n\r\nreturn {\r\n\t// summary:\r\n\t//\t\tThis module contains the config\r\n\r\n\tconfigProcessHas: function(/*Object*/ source){\r\n\t\t// summary:\r\n\t\t//\t\tscan the source config for has checks and call configMerge to merge has sections, and remove the has sections from the source.\r\n\t\t// description:\r\n\t\t//\t\tconfigProcessHas will scan the source config for has checks. \r\n\t\t//\t\tFor each has section the items inside the has section will be tested with has (sniff)\r\n\t\t//\t\tIf the has test is true it will call configMerge to merge has sections back into the source config.\r\n\t\t//\t\tIt will always remove the has section from the source after processing it.\r\n\t\t//\t\tThe names in the has section can be separated by a comma, indicating that any of those being true will satisfy the test.\r\n\t\t// source:\r\n\t\t//\t\tan object representing the config to be processed.\r\n\t\t// returns:\r\n\t\t//\t\tthe updated source object.\r\n\t\tfor(var name in source){\r\n\t\t\tvar\tsval = source[name];\r\n\t\t\tif(name == \"has\"){ // found a \"has\" section in source\r\n\t\t\t\tfor(var hasname in sval){ // get the hasnames from the has section\r\n\t\t\t\t\tif(!(hasname.charAt(0) == '_' && hasname.charAt(1) == '_') && sval && typeof sval === 'object'){\r\n\t\t\t\t\t\t// need to handle multiple has checks separated by a \",\".\r\n\t\t\t\t\t\tvar parts = hasname.split(',');\r\n\t\t\t\t\t\tif(parts.length > 0){\r\n\t\t\t\t\t\t\twhile(parts.length > 0){ \t\r\n\t\t\t\t\t\t\t\tvar haspart = parts.shift();\r\n\t\t\t\t\t\t\t\t// check for has(haspart) or if haspart starts with ! check for !(has(haspart))\r\n\t\t\t\t\t\t\t\tif((has(haspart)) || (haspart.charAt(0) == '!' && !(has(haspart.substring(1))))){ // if true this one should be merged\r\n\t\t\t\t\t\t\t\t\tvar hasval = sval[hasname];\r\n\t\t\t\t\t\t\t\t\tthis.configMerge(source, hasval); // merge this has section into the source config\r\n\t\t\t\t\t\t\t\t\tbreak;\t// found a match for this multiple has test, so go to the next one\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete source[\"has\"];\t// after merge remove this has section from the config\r\n\t\t\t}else{\r\n\t\t\t\tif(!(name.charAt(0) == '_' && name.charAt(1) == '_') && sval && typeof sval === 'object'){\r\n\t\t\t\t\t\tthis.configProcessHas(sval);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn source;\r\n\t},\r\n\r\n\tconfigMerge: function(/*Object*/ target, /*Object*/ source){\r\n\t\t// summary:\r\n\t\t//\t\tdoes a deep copy of the source into the target to merge the config from the source into the target\r\n\t\t// description:\r\n\t\t//\t\tconfigMerge will merge the source config into the target config with a deep copy.\r\n\t\t//\t\tanything starting with __ will be skipped and if the target is an array the source items will be pushed into the target.\r\n\t\t// target:\r\n\t\t//\t\tan object representing the config which will be updated by merging in the source.\r\n\t\t// source:\r\n\t\t//\t\tan object representing the config to be merged into the target.\r\n\t\t// returns:\r\n\t\t//\t\tthe updated target object.\r\n\r\n\t\tfor(var name in source){\r\n\t\t\tvar tval = target[name];\r\n\t\t\tvar\tsval = source[name];\r\n\t\t\tif(tval !== sval && !(name.charAt(0) == '_' && name.charAt(1) == '_')){\r\n\t\t\t\tif(tval && typeof tval === 'object' && sval && typeof sval === 'object'){\r\n\t\t\t\t\tthis.configMerge(tval, sval);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(target instanceof Array){\r\n\t\t\t\t\t\ttarget.push(sval);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\ttarget[name] = sval;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n};\r\n\r\n});\r\n"]}