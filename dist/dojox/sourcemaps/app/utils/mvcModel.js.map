{"version":3,"sources":["app/utils/mvcModel.js"],"names":["define","lang","Deferred","when","getStateful","config","params","item","options","loadedModels","loadMvcModelDeferred","fixupQuery","query","ops","charAt","store","datastore","dataStoreCtor","require","e","Error","data","isString","getObject","console","warn","type","modelCtor","createMvcPromise","newModel","queryStore","modelProp","_refSourceModelProp","_refModelProp","set","ex","reject","promise","hitch","this","resolve"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,gBAAiB,YAAa,yBACzD,SAASC,EAAMC,EAAUC,EAAMC,GAC9B,OAAO,SAAmBC,EAAkBC,EAAkBC,GAe7D,IAaIC,EAbAC,KACAC,EAAuB,IAAIR,EAE3BS,EAAa,SAASC,GACzB,IAAIC,KACJ,IAAI,IAAIN,KAAQK,EACO,MAAnBL,EAAKO,OAAO,KACdD,EAAIN,GAAQK,EAAML,IAGpB,OAAM,GAIP,GAAGD,EAAOS,MAETP,GACCO,MAAST,EAAOS,MAAMA,MACtBH,MAASN,EAAOM,MAAQD,EAAWL,EAAOM,OAASN,EAAOS,MAAMH,MAAQD,EAAWL,EAAOS,MAAMH,gBAE5F,GAAGN,EAAOU,UAAU,CACzB,IACC,IAAIC,EAAgBC,QAAQ,wBAC5B,MAAMC,GACN,MAAM,IAAIC,MAAM,2FAEjBZ,GACCO,MAAS,IAAIE,GACZF,MAAOT,EAAOU,UAAUD,QAEzBH,MAASD,EAAWL,EAAOM,aAEpBN,EAAOe,MACZf,EAAOe,MAAQpB,EAAKqB,SAAShB,EAAOe,QAKtCf,EAAOe,KAAOpB,EAAKsB,UAAUjB,EAAOe,OAErCb,GAAWa,KAAQf,EAAOe,KAAMT,WAGhCY,QAAQC,KAAK,iCAGd,IAAIC,EAAOrB,EAAOE,GAAMmB,KAAOrB,EAAOE,GAAMmB,KAAO,uCAInD,IACC,IAAIC,EAAYT,QAAQQ,GACxB,MAAMP,GACN,MAAM,IAAIC,MAAMM,EAAK,uCAEtB,IACIE,EADAC,EAAW,IAAIF,EAAUnB,GAE7B,IACC,GAAGqB,EAASC,WACXF,EAAmBC,EAASC,WAAWtB,EAAQI,WAC3C,CACJ,IAAImB,EAAYF,EAASG,qBAAuBH,EAASI,eAAiB,QAC1EJ,EAASK,IAAIH,EAAW3B,EAAYI,EAAQa,OAC5CO,EAAmBC,GAEpB,MAAMM,GAGN,OADAzB,EAAqB0B,OAAO,yBACrB1B,EAAqB2B,QAW7B,OATAlC,EAAKyB,EAAkB3B,EAAKqC,MAAMC,KAAM,WAKvC,OAHA9B,EAAeoB,EACfnB,EAAqB8B,QAAQ/B,GAEtBA,IACJ,WACHC,EAAqB0B,OAAO,uBAEtB1B","file":"../../../app/utils/mvcModel.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/Deferred\", \"dojo/when\", \"dojox/mvc/getStateful\"],\r\nfunction(lang, Deferred, when, getStateful){\r\n\treturn function(/*Object*/config, /*Object*/params, /*String*/item){\r\n\t\t// summary:\r\n\t\t//\t\tmvcModel is called for each mvc model, to create the mvc model based upon the type and params.\r\n\t\t//\t\tIt will also load models and return the either the loadedModels or a promise.\r\n\t\t// description:\r\n\t\t//\t\tCalled for each model with a modelLoader of \"dojox/app/utils/mvcModel\", it will\r\n\t\t//\t\tcreate the model based upon the type and the params set for the model in the config.\r\n\t\t// config: Object\r\n\t\t//\t\tThe models section of the config for this view or for the app.\r\n\t\t// params: Object\r\n\t\t//\t\tThe params set into the config for this model.\r\n\t\t// item: String\r\n\t\t//\t\tThe String with the name of this model\r\n\t\t// returns: model \r\n\t\t//\t\tThe model, of the type specified in the config for this model.\r\n\t\tvar loadedModels = {};\r\n\t\tvar loadMvcModelDeferred = new Deferred();\r\n\r\n\t\tvar fixupQuery = function(query){\r\n\t\t\tvar ops = {};\r\n\t\t\tfor(var item in query){ // need this to handle query params without errors\r\n\t\t\t\tif(item.charAt(0) !== \"_\"){\r\n\t\t\t\t\tops[item] = query[item];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn(ops);\r\n\t\t};\r\n\r\n\t\tvar options;\r\n\t\tif(params.store){\r\n\t\t\t//\tif query is not set on the model params, it may be set on the store\r\n\t\t\toptions = {\r\n\t\t\t\t\"store\": params.store.store,\r\n\t\t\t\t\"query\": params.query ? fixupQuery(params.query) : params.store.query ? fixupQuery(params.store.query) : {}\r\n\t\t\t};\r\n\t\t}else if(params.datastore){\r\n\t\t\ttry{\r\n\t\t\t\tvar dataStoreCtor = require(\"dojo/store/DataStore\");\r\n\t\t\t}catch(e){\r\n\t\t\t\tthrow new Error(\"When using datastore the dojo/store/DataStore module must be listed in the dependencies\");\r\n\t\t\t}\r\n\t\t\toptions = {\r\n\t\t\t\t\"store\": new dataStoreCtor({\r\n\t\t\t\t\tstore: params.datastore.store\r\n\t\t\t\t}),\r\n\t\t\t\t\"query\": fixupQuery(params.query)\r\n\t\t\t};\r\n\t\t}else if(params.data){\r\n\t\t\tif(params.data && lang.isString(params.data)){\r\n\t\t\t\t//get the object specified by string value of data property\r\n\t\t\t\t//cannot assign object literal or reference to data property\r\n\t\t\t\t//because json.ref will generate __parent to point to its parent\r\n\t\t\t\t//and will cause infinitive loop when creating StatefulModel.\r\n\t\t\t\tparams.data = lang.getObject(params.data);\r\n\t\t\t}\r\n\t\t\toptions = {\"data\": params.data, query: {}};\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconsole.warn(\"mvcModel: Missing parameters.\");\r\n\t\t}\r\n\r\n\t\tvar type = config[item].type ? config[item].type : \"dojox/mvc/EditStoreRefListController\";\r\n\t\t// need to load the class to use for the model\r\n\t\t// modelLoader must be listed in the dependencies and has thus already been loaded so it _must_ be here\r\n\t\t// => no need for complex code here\r\n\t\ttry{\r\n\t\t\tvar modelCtor = require(type);\r\n\t\t}catch(e){\r\n\t\t\tthrow new Error(type+\" must be listed in the dependencies\");\r\n\t\t}\r\n\t\tvar newModel = new modelCtor(options);\r\n\t\tvar createMvcPromise;\r\n\t\ttry{\r\n\t\t\tif(newModel.queryStore){\r\n\t\t\t\tcreateMvcPromise = newModel.queryStore(options.query);\r\n\t\t\t}else{\r\n\t\t\t\tvar modelProp = newModel._refSourceModelProp || newModel._refModelProp || \"model\";\r\n\t\t\t\tnewModel.set(modelProp, getStateful(options.data));\r\n\t\t\t\tcreateMvcPromise = newModel;\r\n\t\t\t}\r\n\t\t}catch(ex){\r\n\t\t\t//console.warn(\"load mvc model error.\", ex);\r\n\t\t\tloadMvcModelDeferred.reject(\"load mvc model error.\");\r\n\t\t\treturn loadMvcModelDeferred.promise;\r\n\t\t}\r\n\t\twhen(createMvcPromise, lang.hitch(this, function(){\r\n\t\t\t// now the loadedModels[item].models is set.\r\n\t\t\tloadedModels = newModel;\r\n\t\t\tloadMvcModelDeferred.resolve(loadedModels);\r\n\t\t\t//this.app.log(\"in mvcModel promise path, loadedModels = \", loadedModels);\r\n\t\t\treturn loadedModels;\r\n\t\t}), function(){\r\n\t\t\tloadMvcModelDeferred.reject(\"load model error.\")\r\n\t\t});\r\n\t\treturn loadMvcModelDeferred;\r\n\t}\r\n});\r\n"]}