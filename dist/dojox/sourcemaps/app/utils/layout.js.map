{"version":3,"sources":["app/utils/layout.js"],"names":["define","array","domClass","domGeometry","domStyle","lang","layout","size","widget","dim","newSize","resize","setMarginBox","domNode","mixin","getMarginBox","marginBox2contentBox","node","mb","cs","getComputedStyle","me","getMarginExtents","pb","getPadBorderExtents","l","toPixelValue","paddingLeft","t","paddingTop","w","h","layoutChildren","container","children","changedRegionId","changedRegionSize","add","filter","item","_constraint","layoutAlign","concat","forEach","child","elm","pos","Error","id","word","elmStyle","style","left","top","position","substring","toUpperCase","sizeSetting"],"mappings":";;;;;;;AAAAA,QACC,mBACA,iBACA,oBACA,iBACA,mBACE,SAASC,EAAOC,EAAUC,EAAaC,EAAUC,GAOnD,IAAIC,KAuBJ,SAASC,EAAKC,EAAQC,GAErB,IAAIC,EAAUF,EAAOG,OAASH,EAAOG,OAAOF,GAAON,EAAYS,aAAaJ,EAAOK,QAASJ,GAGzFC,EAEFL,EAAKS,MAAMN,EAAQE,IAInBL,EAAKS,MAAMN,EAAQL,EAAYY,aAAaP,EAAOK,UACnDR,EAAKS,MAAMN,EAAQC,IAwFrB,OAxHAH,EAAOU,qBAAuB,SAAqBC,EAAiBC,GAKnE,IAAIC,EAAKf,EAASgB,iBAAiBH,GAC/BI,EAAKlB,EAAYmB,iBAAiBL,EAAME,GACxCI,EAAKpB,EAAYqB,oBAAoBP,EAAME,GAC/C,OACCM,EAAGrB,EAASsB,aAAaT,EAAME,EAAGQ,aAClCC,EAAGxB,EAASsB,aAAaT,EAAME,EAAGU,YAClCC,EAAGZ,EAAGY,GAAKT,EAAGS,EAAIP,EAAGO,GACrBC,EAAGb,EAAGa,GAAKV,EAAGU,EAAIR,EAAGQ,KAwBvBzB,EAAO0B,eAAiB,SAAqBC,EAAsBxB,EAAkByB,EACvEC,EAA6BC,GAqB1C3B,EAAMJ,EAAKS,SAAUL,GAErBP,EAASmC,IAAIJ,EAAW,wBAKxBC,EAAWjC,EAAMqC,OAAOJ,EAAU,SAASK,GAAO,MAA2B,UAApBA,EAAKC,aAA+C,UAApBD,EAAKE,cAC5FC,OAAOzC,EAAMqC,OAAOJ,EAAU,SAASK,GAAO,MAA2B,UAApBA,EAAKC,aAA+C,UAApBD,EAAKE,eAG5FxC,EAAM0C,QAAQT,EAAU,SAASU,GAChC,IAAIC,EAAMD,EAAM/B,QACfiC,EAAOF,EAAMJ,aAAeI,EAAMH,YACnC,IAAIK,EACH,MAAM,IAAIC,MAAM,6BAA+BH,EAAMI,IAItD,IA7DkBC,EA6DdC,EAAWL,EAAIM,MACnBD,EAASE,KAAO3C,EAAIgB,EAAE,KACtByB,EAASG,IAAM5C,EAAImB,EAAE,KACrBsB,EAASI,SAAW,WAEpBpD,EAASmC,IAAIQ,EAAK,eAlEAI,EAkE0BH,GAjEjCS,UAAU,EAAE,GAAGC,cAAgBP,EAAKM,UAAU,KAoEzD,IAAIE,KAIDtB,GAAmBA,GAAmBS,EAAMI,KAC9CS,EAAiC,OAArBb,EAAMJ,aAA6C,UAArBI,EAAMJ,YAA0B,IAAM,KAAOJ,GAK9E,OAAPU,GAAuB,UAAPA,GAClBW,EAAY3B,EAAIrB,EAAIqB,EACpBvB,EAAKqC,EAAOa,GACZhD,EAAIsB,GAAKa,EAAMb,EACL,OAAPe,EACFrC,EAAImB,GAAKgB,EAAMb,EAEfmB,EAASG,IAAM5C,EAAImB,EAAInB,EAAIsB,EAAI,MAEjB,QAAPe,GAAwB,SAAPA,GACzBW,EAAY1B,EAAItB,EAAIsB,EACpBxB,EAAKqC,EAAOa,GACZhD,EAAIqB,GAAKc,EAAMd,EACL,QAAPgB,EACFrC,EAAIgB,GAAKmB,EAAMd,EAEfoB,EAASE,KAAO3C,EAAIgB,EAAIhB,EAAIqB,EAAI,MAElB,UAAPgB,GAA0B,UAAPA,GAC3BvC,EAAKqC,EAAOnC,OAOdO,qBAAsBV,EAAOU,qBAC7BgB,eAAgB1B,EAAO0B","file":"../../../app/utils/layout.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.filter array.forEach\r\n\t\"dojo/dom-class\", // domClass.add domClass.remove\r\n\t\"dojo/dom-geometry\", // domGeometry.marginBox\r\n\t\"dojo/dom-style\", // domStyle.getComputedStyle\r\n\t\"dojo/_base/lang\" // lang.mixin\r\n], function(array, domClass, domGeometry, domStyle, lang){\r\n\r\n\t// module:\r\n\t//\t\tdijit/layout/utils\r\n\t// summary:\r\n\t//\t\tmarginBox2contentBox() and layoutChildren()\r\n\r\n\tvar layout = {};\r\n\t/*===== layout = dijit/layout =====*/\r\n\r\n\tlayout.marginBox2contentBox = function(/*DomNode*/ node, /*Object*/ mb){\r\n\t\t// summary:\r\n\t\t//\t\tGiven the margin-box size of a node, return its content box size.\r\n\t\t//\t\tFunctions like domGeometry.contentBox() but is more reliable since it doesn't have\r\n\t\t//\t\tto wait for the browser to compute sizes.\r\n\t\tvar cs = domStyle.getComputedStyle(node);\r\n\t\tvar me = domGeometry.getMarginExtents(node, cs);\r\n\t\tvar pb = domGeometry.getPadBorderExtents(node, cs);\r\n\t\treturn {\r\n\t\t\tl: domStyle.toPixelValue(node, cs.paddingLeft),\r\n\t\t\tt: domStyle.toPixelValue(node, cs.paddingTop),\r\n\t\t\tw: mb.w - (me.w + pb.w),\r\n\t\t\th: mb.h - (me.h + pb.h)\r\n\t\t};\r\n\t};\r\n\r\n\tfunction capitalize(word){\r\n\t\treturn word.substring(0,1).toUpperCase() + word.substring(1);\r\n\t}\r\n\r\n\tfunction size(widget, dim){\r\n\t\t// size the child\r\n\t\tvar newSize = widget.resize ? widget.resize(dim) : domGeometry.setMarginBox(widget.domNode, dim);\r\n\r\n\t\t// record child's size\r\n\t\tif(newSize){\r\n\t\t\t// if the child returned it's new size then use that\r\n\t\t\tlang.mixin(widget, newSize);\r\n\t\t}else{\r\n\t\t\t// otherwise, call getMarginBox(), but favor our own numbers when we have them.\r\n\t\t\t// the browser lies sometimes\r\n\t\t\tlang.mixin(widget, domGeometry.getMarginBox(widget.domNode));\r\n\t\t\tlang.mixin(widget, dim);\r\n\t\t}\r\n\t}\r\n\r\n\tlayout.layoutChildren = function(/*DomNode*/ container, /*Object*/ dim, /*Widget[]*/ children,\r\n\t\t\t/*String?*/ changedRegionId, /*Number?*/ changedRegionSize){\r\n\t\t// summary:\r\n\t\t//\t\tLayout a bunch of child dom nodes within a parent dom node\r\n\t\t// container:\r\n\t\t//\t\tparent node\r\n\t\t// dim:\r\n\t\t//\t\t{l, t, w, h} object specifying dimensions of container into which to place children\r\n\t\t// children:\r\n\t\t//\t\tAn array of Widgets or at least objects containing:\r\n\t\t//\r\n\t\t//\t\t- domNode: pointer to DOM node to position\r\n\t\t//\t\t- constraint or layoutAlign: position to place DOM node\r\n\t\t//\t\t- resize(): (optional) method to set size of node\r\n\t\t//\t\t- id: (optional) Id of widgets, referenced from resize object, below.\r\n\t\t// changedRegionId:\r\n\t\t//\t\tIf specified, the slider for the region with the specified id has been dragged, and thus\r\n\t\t//\t\tthe region's height or width should be adjusted according to changedRegionSize\r\n\t\t// changedRegionSize:\r\n\t\t//\t\tSee changedRegionId.\r\n\r\n\t\t// copy dim because we are going to modify it\r\n\t\tdim = lang.mixin({}, dim);\r\n\r\n\t\tdomClass.add(container, \"dijitLayoutContainer\");\r\n\r\n\t\t// Move \"client\" elements to the end of the array for layout.  a11y dictates that the author\r\n\t\t// needs to be able to put them in the document in tab-order, but this algorithm requires that\r\n\t\t// client be last.    TODO: move these lines to LayoutContainer?   Unneeded other places I think.\r\n\t\tchildren = array.filter(children, function(item){ return item._constraint != \"center\" && item.layoutAlign != \"client\"; })\r\n\t\t\t.concat(array.filter(children, function(item){ return item._constraint == \"center\" || item.layoutAlign == \"client\"; }));\r\n\r\n\t\t// set positions/sizes\r\n\t\tarray.forEach(children, function(child){\r\n\t\t\tvar elm = child.domNode,\r\n\t\t\t\tpos = (child._constraint || child.layoutAlign);\r\n\t\t\tif(!pos){\r\n\t\t\t\tthrow new Error(\"No constraint setting for \" + child.id)\r\n\t\t\t}\r\n\r\n\t\t\t// set elem to upper left corner of unused space; may move it later\r\n\t\t\tvar elmStyle = elm.style;\r\n\t\t\telmStyle.left = dim.l+\"px\";\r\n\t\t\telmStyle.top = dim.t+\"px\";\r\n\t\t\telmStyle.position = \"absolute\";\r\n\r\n\t\t\tdomClass.add(elm, \"dijitAlign\" + capitalize(pos));\r\n\r\n\t\t\t// Size adjustments to make to this child widget\r\n\t\t\tvar sizeSetting = {};\r\n\r\n\t\t\t// Check for optional size adjustment due to splitter drag (height adjustment for top/bottom align\r\n\t\t\t// panes and width adjustment for left/right align panes.\r\n\t\t\tif(changedRegionId && changedRegionId == child.id){\r\n\t\t\t\tsizeSetting[child._constraint == \"top\" || child._constraint == \"bottom\" ? \"h\" : \"w\"] = changedRegionSize;\r\n\t\t\t}\r\n\r\n\t\t\t// set size && adjust record of remaining space.\r\n\t\t\t// note that setting the width of a <div> may affect its height.\r\n\t\t\tif(pos == \"top\" || pos == \"bottom\"){\r\n\t\t\t\tsizeSetting.w = dim.w;\r\n\t\t\t\tsize(child, sizeSetting);\r\n\t\t\t\tdim.h -= child.h;\r\n\t\t\t\tif(pos == \"top\"){\r\n\t\t\t\t\tdim.t += child.h;\r\n\t\t\t\t}else{\r\n\t\t\t\t\telmStyle.top = dim.t + dim.h + \"px\";\r\n\t\t\t\t}\r\n\t\t\t}else if(pos == \"left\" || pos == \"right\"){\r\n\t\t\t\tsizeSetting.h = dim.h;\r\n\t\t\t\tsize(child, sizeSetting);\r\n\t\t\t\tdim.w -= child.w;\r\n\t\t\t\tif(pos == \"left\"){\r\n\t\t\t\t\tdim.l += child.w;\r\n\t\t\t\t}else{\r\n\t\t\t\t\telmStyle.left = dim.l + dim.w + \"px\";\r\n\t\t\t\t}\r\n\t\t\t}else if(pos == \"client\" || pos == \"center\"){\r\n\t\t\t\tsize(child, dim);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\r\n\treturn {\r\n\t\tmarginBox2contentBox: layout.marginBox2contentBox,\r\n\t\tlayoutChildren: layout.layoutChildren\r\n\t};\r\n});\r\n"]}