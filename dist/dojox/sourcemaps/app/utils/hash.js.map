{"version":3,"sources":["app/utils/hash.js"],"names":["define","lang","hashUtil","getParams","hash","params","length","indexOf","index","endindex","viewPart","substring","getParamObj","viewName","replace","parts","split","x","tp","name","value","encodeURIComponent","viewparams","buildWithParams","item","charAt","isObject","addViewParams","view","oldView","paramString","getParamString","newView","paramStr","getTarget","defaultView","substr"],"mappings":"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","file":"../../../app/utils/hash.js","sourcesContent":["define([\"dojo/_base/lang\"], function(lang){\r\n\r\n// module:\r\n//\t\tdojox/app/utils/hash\r\n\r\nvar hashUtil = {\r\n\t// summary:\r\n\t//\t\tThis module contains the hash\r\n\r\n\t\tgetParams: function(/*String*/ hash){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tget the params from the hash\r\n\t\t\t//\r\n\t\t\t// hash: String\r\n\t\t\t//\t\tthe url hash\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe params object\r\n\t\t\t//\r\n\t\t\tvar params;\r\n\t\t\tif(hash && hash.length){\r\n\t\t\t\t// fixed handle view specific params\r\n\t\t\t\t\r\n\t\t\t\twhile(hash.indexOf(\"(\") > 0){ \r\n\t\t\t\t\tvar index = hash.indexOf(\"(\");\r\n\t\t\t\t\tvar endindex = hash.indexOf(\")\");\r\n\t\t\t\t\tvar viewPart = hash.substring(index,endindex+1);\r\n\t\t\t\t\tif(!params){ params = {}; }\r\n\t\t\t\t\tparams = hashUtil.getParamObj(params, viewPart);\r\n\t\t\t\t\t// next need to remove the viewPart from the hash, and look for the next one\r\n\t\t\t\t\tvar viewName = viewPart.substring(1,viewPart.indexOf(\"&\"));\r\n\t\t\t\t\thash = hash.replace(viewPart, viewName);\r\n\t\t\t\t}\t\r\n\t\t\t\t// after all of the viewParts need to get the other params\t\r\n\r\n\t\t\t\tfor(var parts = hash.split(\"&\"), x = 0; x < parts.length; x++){\r\n\t\t\t\t\tvar tp = parts[x].split(\"=\"), name = tp[0], value = encodeURIComponent(tp[1] || \"\");\r\n\t\t\t\t\tif(name && value){\r\n\t\t\t\t\t\tif(!params){ params = {}; }\r\n\t\t\t\t\t\tparams[name] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn params; // Object\r\n\t\t},\r\n\r\n\t\tgetParamObj: function(/*Object*/ params, /*String*/ viewPart){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcalled to handle a view specific params object\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tthe view specific params object\r\n\t\t\t// viewPart: String\r\n\t\t\t//\t\tthe part of the view with the params for the view\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t \t\t//\t\tthe params object for the view\r\n\t\t\t//\r\n\t\t\tvar viewparams;\r\n\t\t\tvar viewName = viewPart.substring(1,viewPart.indexOf(\"&\"));\r\n\t\t\tvar hash = viewPart.substring(viewPart.indexOf(\"&\"), viewPart.length-1);\r\n\t\t\t\tfor(var parts = hash.split(\"&\"), x = 0; x < parts.length; x++){\r\n\t\t\t\t\tvar tp = parts[x].split(\"=\"), name = tp[0], value = encodeURIComponent(tp[1] || \"\");\r\n\t\t\t\t\tif(name && value){\r\n\t\t\t\t\t\tif(!viewparams){ viewparams = {}; }\r\n\t\t\t\t\t\tviewparams[name] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tparams[viewName] = \tviewparams;\r\n\t\t\treturn params; // Object\r\n\t\t},\r\n\r\n\t\tbuildWithParams: function(/*String*/ hash, /*Object*/ params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tbuild up the url hash adding the params\r\n\t\t\t// hash: String\r\n\t\t\t//\t\tthe url hash\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tthe params object\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t \t\t//\t\tthe params object\r\n\t\t\t//\r\n\t\t\tif(hash.charAt(0) !== \"#\"){\r\n\t\t\t\thash = \"#\"+hash;\r\n\t\t\t}\r\n\t\t\tfor(var item in params){\r\n\t\t\t\tvar value = params[item];\r\n\t\t\t\t// add a check to see if the params includes a view name if so setup the hash like (viewName&item=value);\r\n\t\t\t\tif(lang.isObject(value)){\r\n\t\t\t\t\thash = hashUtil.addViewParams(hash, item, value);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(item && value != null){\r\n\t\t\t\t\t\thash = hash+\"&\"+item+\"=\"+params[item];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn hash; // String\r\n\t\t},\r\n\r\n\t\taddViewParams: function(/*String*/ hash, /*String*/ view, /*Object*/ params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadd the view specific params to the hash for example (view1&param1=value1)\r\n\t\t\t// hash: String\r\n\t\t\t//\t\tthe url hash\r\n\t\t\t// view: String\r\n\t\t\t//\t\tthe view name\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tthe params for this view\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe hash string\r\n\t\t\t//\r\n\t\t\tif(hash.charAt(0) !== \"#\"){\r\n\t\t\t\thash = \"#\"+hash;\r\n\t\t\t}\r\n\t\t\tvar index = hash.indexOf(view);\r\n\t\t\tif(index > 0){ // found the view?\r\n\t\t\t\tif((hash.charAt(index-1) == \"#\" || hash.charAt(index-1) == \"+\") && // assume it is the view? or could check the char after for + or & or -\r\n\t\t\t\t\t(hash.charAt(index+view.length) == \"&\" || hash.charAt(index+view.length) == \"+\" || hash.charAt(index+view.length) == \"-\")){\r\n\t\t\t\t\t// found the view at this index.\r\n\t\t\t\t\tvar oldView = hash.substring(index-1,index+view.length+1);\r\n\t\t\t\t\tvar paramString = hashUtil.getParamString(params);\r\n\t\t\t\t\tvar newView = hash.charAt(index-1) + \"(\" + view + paramString + \")\" + hash.charAt(index+view.length);\r\n\t\t\t\t\thash = hash.replace(oldView, newView);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn hash; // String\r\n\t\t},\r\n\r\n\t\tgetParamString: function(/*Object*/ params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn the param string\r\n\t\t\t// params: Object\r\n\t\t\t//\t\tthe params object\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe params string\r\n\t\t\t//\r\n\t\t\tvar paramStr = \"\";\r\n\t\t\tfor(var item in params){\r\n\t\t\t\tvar value = params[item];\r\n\t\t\t\tif(item && value != null){\r\n\t\t\t\t\tparamStr = paramStr+\"&\"+item+\"=\"+params[item];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn paramStr; // String\r\n\t\t},\r\n\r\n\t\tgetTarget: function(/*String*/ hash, /*String?*/ defaultView){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn the target string\r\n\t\t\t// hash: String\r\n\t\t\t//\t\tthe hash string\r\n\t\t\t// defaultView: String\r\n\t\t\t//\t\tthe optional defaultView string\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe target string\r\n\t\t\t//\r\n\t\t\tif(!defaultView){ defaultView = \"\"}\r\n\t\t\twhile(hash.indexOf(\"(\") > 0){ \r\n\t\t\t\tvar index = hash.indexOf(\"(\");\r\n\t\t\t\tvar endindex = hash.indexOf(\")\");\r\n\t\t\t\tvar viewPart = hash.substring(index,endindex+1);\r\n\t\t\t\tvar viewName = viewPart.substring(1,viewPart.indexOf(\"&\"));\r\n\t\t\t\thash = hash.replace(viewPart, viewName);\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\treturn (((hash && hash.charAt(0) == \"#\") ? hash.substr(1) : hash) || defaultView).split('&')[0];\t// String\r\n\t\t}\r\n};\r\n\r\nreturn hashUtil;\r\n\r\n});"]}