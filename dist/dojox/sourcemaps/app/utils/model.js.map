{"version":3,"sources":["app/utils/model.js"],"names":["define","lang","Deferred","all","when","config","parent","app","loadedModels","mixin","allDeferred","item","charAt","push","setupModel","length","params","modelLoader","modelCtor","require","e","Error","createModelPromise","loadModelDeferred","message","hitch","this","newModel","log","resolve"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,gBAAiB,mBAAoB,aAAc,SAASC,EAAMC,EAAUC,EAAKC,GAC3G,OAAO,SAAoBC,EAAmBC,EAAmBC,GAchE,IAAIC,KAIJ,GAHGF,EAAOE,cACTP,EAAKQ,MAAMD,EAAcF,EAAOE,cAE9BH,EAAO,CACT,IAAIK,KACJ,IAAI,IAAIC,KAAQN,EACO,MAAnBM,EAAKC,OAAO,IACdF,EAAYG,KAAKC,EAAWT,EAAQM,EAAMJ,EAAKC,IAGjD,OAA8B,GAAtBE,EAAYK,OAAeP,EAAeL,EAAIO,GAEtD,OAAOF,GAIT,SAASM,EAAWT,EAAQM,EAAMJ,EAAKC,GAEtC,IAAIQ,EAASX,EAAOM,GAAMK,OAASX,EAAOM,GAAMK,UAE5CC,EAAcZ,EAAOM,GAAMM,YAAcZ,EAAOM,GAAMM,YAAc,8BAGxE,IACC,IAAIC,EAAYC,QAAQF,GACxB,MAAMG,GACN,MAAM,IAAIC,MAAMJ,EAAY,uCAE7B,IACIK,EADAC,EAAoB,IAAIrB,EAE5B,IACCoB,EAAqBJ,EAAUb,EAAQW,EAAQL,GAC/C,MAAMS,GACN,MAAM,IAAIC,MAAM,kBAAkBJ,EAAY,qBAAqBN,EAAK,MAAMS,EAAEI,SAUjF,OARApB,EAAKkB,EAAoBrB,EAAKwB,MAAMC,KAAM,SAASC,GAIlD,OAHAnB,EAAaG,GAAQgB,EACrBpB,EAAIqB,IAAI,2BAA2BjB,EAAK,mBAAoBH,GAC5De,EAAkBM,QAAQrB,GACnBA,IACJ,SAASY,GACZ,MAAM,IAAIC,MAAM,8BAA8BV,EAAK,MAAMS,EAAEI,WAErDD","file":"../../../app/utils/model.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/Deferred\", \"dojo/promise/all\", \"dojo/when\"], function(lang, Deferred, all, when){\r\n\treturn function(/*Object*/ config, /*Object*/ parent, /*Object*/ app){\r\n\t\t// summary:\r\n\t\t//\t\tmodel is called to create all of the models for the app, and all models for a view, it will\r\n\t\t//\t\tcreate and call the appropriate model utility based upon the modelLoader set in the model in the config\r\n\t\t// description:\r\n\t\t//\t\tCalled for each view or for the app.  For each model in the config, it will  \r\n\t\t//\t\tcreate the model utility based upon the modelLoader and call it to create and load the model. \r\n\t\t// config: Object\r\n\t\t//\t\tThe models section of the config for this view or for the app.\r\n\t\t// parent: Object\r\n\t\t//\t\tThe parent of this view or the app itself, so that models from the parent will be \r\n\t\t//\t\tavailable to the view.\r\n\t\t// returns: loadedModels \r\n\t\t//\t\t loadedModels is an object holding all of the available loaded models for this view.\r\n\t\tvar loadedModels = {};\r\n\t\tif(parent.loadedModels){\r\n\t\t\tlang.mixin(loadedModels, parent.loadedModels);\r\n\t\t}\r\n\t\tif(config){\r\n\t\t\tvar allDeferred = [];\r\n\t\t\tfor(var item in config){\r\n\t\t\t\tif(item.charAt(0) !== \"_\"){\r\n\t\t\t\t\tallDeferred.push(setupModel(config, item, app, loadedModels));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn (allDeferred.length == 0) ? loadedModels : all(allDeferred);\r\n\t\t}else{\r\n\t\t\treturn loadedModels;\r\n\t\t}\r\n\t};\r\n\r\n\tfunction setupModel(config, item, app, loadedModels){\r\n\t\t// Here we need to create the modelLoader and call it passing in the item and the config[item].params\r\n\t\tvar params = config[item].params ? config[item].params : {};\r\n\r\n\t\tvar modelLoader = config[item].modelLoader ? config[item].modelLoader : \"dojox/app/utils/simpleModel\";\r\n\t\t// modelLoader must be listed in the dependencies and has thus already been loaded so it _must_ be here\r\n\t\t// => no need for complex code here\r\n\t\ttry{\r\n\t\t\tvar modelCtor = require(modelLoader);\r\n\t\t}catch(e){\r\n\t\t\tthrow new Error(modelLoader+\" must be listed in the dependencies\");\r\n\t\t}\r\n\t\tvar loadModelDeferred = new Deferred();\r\n\t\tvar createModelPromise;\r\n\t\ttry{\r\n\t\t\tcreateModelPromise = modelCtor(config, params, item);\r\n\t\t}catch(e){\r\n\t\t\tthrow new Error(\"Error creating \"+modelLoader+\" for model named [\"+item+\"]: \"+e.message);\r\n\t\t}\r\n\t\twhen(createModelPromise, lang.hitch(this, function(newModel){\r\n\t\t\tloadedModels[item] = newModel;\r\n\t\t\tapp.log(\"in app/model, for item=[\",item,\"] loadedModels =\", loadedModels);\r\n\t\t\tloadModelDeferred.resolve(loadedModels);\r\n\t\t\treturn loadedModels;\r\n\t\t}), function(e){\r\n\t\t\tthrow new Error(\"Error loading model named [\"+item+\"]: \"+e.message);\r\n\t\t});\r\n\t\treturn loadModelDeferred;\r\n\t}\r\n});\r\n"]}