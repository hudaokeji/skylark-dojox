{"version":3,"sources":["app/utils/simpleModel.js"],"names":["define","lang","Deferred","when","config","params","item","options","dataStoreCtor","createSimplePromise","loadedModels","loadSimpleModelDeferred","fixupQuery","query","ops","charAt","store","Error","data","url","require","e","datastore","isString","getObject","console","warn","ex","reject","promise","then","hitch","this","newModel","resolve","loadModelLoaderDeferred"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,gBAAiB,aAC5C,SAASC,EAAMC,EAAUC,GACxB,OAAO,SAAmBC,EAAkBC,EAAkBC,GAgB7D,IAaIC,EAASC,EAgDTC,EA7DAC,KACAC,EAA0B,IAAIT,EAE9BU,EAAa,SAASC,GACzB,IAAIC,KACJ,IAAI,IAAIR,KAAQO,EACO,MAAnBP,EAAKS,OAAO,KACdD,EAAIR,GAAQO,EAAMP,IAGpB,OAAM,GAIP,GAAGD,EAAOW,MAAM,CACf,IAAIX,EAAOW,MAAMX,OAChB,MAAM,IAAIY,MAAM,4BAA4BX,EAAK,KAC5C,GAAID,EAAOW,MAAMX,OAAOa,MAAQb,EAAOW,MAAMX,OAAOW,MACzDT,GACCS,MAASX,EAAOW,MAAMA,MACtBH,MAASR,EAAOQ,MAAQD,EAAWP,EAAOQ,OAASR,EAAOW,MAAMH,MAAQD,EAAWP,EAAOW,MAAMH,gBAE5F,GAAGR,EAAOW,MAAMX,OAAOc,IAAI,CAChC,IACCX,EAAgBY,QAAQ,wBACxB,MAAMC,GACN,MAAM,IAAIJ,MAAM,2DAEjBV,GACCS,MAAS,IAAIR,GACZQ,MAAOX,EAAOW,MAAMA,QAErBH,MAASR,EAAOQ,MAAQD,EAAWP,EAAOQ,OAASR,EAAOW,MAAMH,MAAQD,EAAWP,EAAOW,MAAMH,gBAExFR,EAAOW,MAAMA,QAEtBT,GACCS,MAASX,EAAOW,MAAMA,MACtBH,MAASR,EAAOQ,MAAQD,EAAWP,EAAOQ,OAASR,EAAOW,MAAMH,MAAQD,EAAWP,EAAOW,MAAMH,iBAG7F,GAAGR,EAAOiB,UAAU,CACzB,IACCd,EAAgBY,QAAQ,wBACxB,MAAMC,GACN,MAAM,IAAIJ,MAAM,2FAEjBV,GACCS,MAAS,IAAIR,GACZQ,MAAOX,EAAOiB,UAAUN,QAEzBH,MAASD,EAAWP,EAAOQ,aAEpBR,EAAOa,MACZb,EAAOa,MAAQjB,EAAKsB,SAASlB,EAAOa,QACtCb,EAAOa,KAAOjB,EAAKuB,UAAUnB,EAAOa,OAErCX,GAAWW,KAAQb,EAAOa,KAAML,WAEhCY,QAAQC,KAAK,oCAGd,IAEEjB,EADEF,EAAQS,MACYT,EAAQS,MAAMH,QAEdN,EAAQW,KAE/B,MAAMS,GAEN,OADAhB,EAAwBiB,OAAO,4BACxBjB,EAAwBkB,QAEhC,OAAGpB,EAAoBqB,MACtB3B,EAAKM,EAAqBR,EAAK8B,MAAMC,KAAM,SAASC,GAKnD,OAFAvB,EAAeuB,EACftB,EAAwBuB,QAAQxB,GACzBA,IACJ,WACHyB,wBAAwBP,OAAO,uBAS1BjB,IANND,EAAeD,EAEfE,EAAwBuB,QAAQxB,GACzBA","file":"../../../app/utils/simpleModel.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/Deferred\", \"dojo/when\"],\r\nfunction(lang, Deferred, when){\r\n\treturn function(/*Object*/config, /*Object*/params, /*String*/item){\r\n\t\t// summary:\r\n\t\t//\t\tsimpleModel is called for each simple model, to create the simple model from the DataStore \r\n\t\t//\t\tbased upon the store and query params.\r\n\t\t//\t\tIt will also load models and return the either the loadedModels or a promise.\r\n\t\t// description:\r\n\t\t//\t\tCalled for each model with a modelLoader of \"dojox/app/utils/simpleModel\", it will\r\n\t\t//\t\tcreate the model based upon the store and query params set for the model in the config.\r\n\t\t// config: Object\r\n\t\t//\t\tThe models section of the config for this view or for the app.\r\n\t\t// params: Object\r\n\t\t//\t\tThe params set into the config for this model.\r\n\t\t// item: String\r\n\t\t//\t\tThe String with the name of this model\r\n\t\t// returns: model \r\n\t\t//\t\t The model, of the store and query params specified in the config for this model.\r\n\t\tvar loadedModels = {};\r\n\t\tvar loadSimpleModelDeferred = new Deferred();\r\n\r\n\t\tvar fixupQuery = function(query){\r\n\t\t\tvar ops = {};\r\n\t\t\tfor(var item in query){ // need this to handle query params without errors\r\n\t\t\t\tif(item.charAt(0) !== \"_\"){\r\n\t\t\t\t\tops[item] = query[item];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn(ops);\r\n\t\t};\r\n\r\n\t\tvar options, dataStoreCtor;\r\n\t\tif(params.store){\r\n\t\t\tif(!params.store.params){\r\n\t\t\t\tthrow new Error(\"Invalid store for model [\"+item+\"]\");\r\n\t\t\t}else if((params.store.params.data || params.store.params.store)){\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"store\": params.store.store,\r\n\t\t\t\t\t\"query\": params.query ? fixupQuery(params.query) : params.store.query ? fixupQuery(params.store.query) : {}\r\n\t\t\t\t};\r\n\t\t\t}else if(params.store.params.url){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tdataStoreCtor = require(\"dojo/store/DataStore\");\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tthrow new Error(\"dojo/store/DataStore must be listed in the dependencies\");\r\n\t\t\t\t}\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"store\": new dataStoreCtor({\r\n\t\t\t\t\t\tstore: params.store.store\r\n\t\t\t\t\t}),\r\n\t\t\t\t\t\"query\": params.query ? fixupQuery(params.query) : params.store.query ? fixupQuery(params.store.query) : {}\r\n\t\t\t\t};\r\n\t\t\t} else if(params.store.store){\r\n\t\t\t\t//\tif query is not set on the model params, it may be set on the store\r\n\t\t\t\toptions = {\r\n\t\t\t\t\t\"store\": params.store.store,\r\n\t\t\t\t\t\"query\": params.query ? fixupQuery(params.query) : params.store.query ? fixupQuery(params.store.query) : {}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}else if(params.datastore){\r\n\t\t\ttry{\r\n\t\t\t\tdataStoreCtor = require(\"dojo/store/DataStore\");\r\n\t\t\t}catch(e){\r\n\t\t\t\tthrow new Error(\"When using datastore the dojo/store/DataStore module must be listed in the dependencies\");\r\n\t\t\t}\r\n\t\t\toptions = {\r\n\t\t\t\t\"store\": new dataStoreCtor({\r\n\t\t\t\t\tstore: params.datastore.store\r\n\t\t\t\t}),\r\n\t\t\t\t\"query\": fixupQuery(params.query)\r\n\t\t\t};\r\n\t\t}else if(params.data){\r\n\t\t\tif(params.data && lang.isString(params.data)){\r\n\t\t\t\tparams.data = lang.getObject(params.data);\r\n\t\t\t}\r\n\t\t\toptions = {\"data\": params.data, query: {}};\r\n\t\t} else{\r\n\t\t\tconsole.warn(\"simpleModel: Missing parameters.\");\r\n\t\t}\r\n\t\tvar createSimplePromise;\r\n\t\ttry{\r\n\t\t\tif(options.store){\r\n\t\t\t\tcreateSimplePromise = options.store.query();\r\n\t\t\t}else{\r\n\t\t\t\tcreateSimplePromise = options.data;\r\n\t\t\t}\r\n\t\t}catch(ex){\r\n\t\t\tloadSimpleModelDeferred.reject(\"load simple model error.\");\r\n\t\t\treturn loadSimpleModelDeferred.promise;\r\n\t\t}\r\n\t\tif(createSimplePromise.then){\r\n\t\t\twhen(createSimplePromise, lang.hitch(this, function(newModel){\r\n\t\t\t\t// now the loadedModels[item].models is set.\r\n\t\t\t\t//console.log(\"in simpleModel promise path, loadedModels = \", loadedModels);\r\n\t\t\t\tloadedModels = newModel;\r\n\t\t\t\tloadSimpleModelDeferred.resolve(loadedModels);\r\n\t\t\t\treturn loadedModels;\r\n\t\t\t}), function(){\r\n\t\t\t\tloadModelLoaderDeferred.reject(\"load model error.\")\r\n\t\t\t});\r\n\t\t}else{ // query did not return a promise, so use newModel\r\n\t\t\tloadedModels = createSimplePromise;\r\n\t\t\t//console.log(\"in simpleModel else path, loadedModels = \",loadedModels);\r\n\t\t\tloadSimpleModelDeferred.resolve(loadedModels);\r\n\t\t\treturn loadedModels;\r\n\t\t}\r\n\t\t\t\r\n\t\treturn loadSimpleModelDeferred;\r\n\t}\r\n});\r\n"]}