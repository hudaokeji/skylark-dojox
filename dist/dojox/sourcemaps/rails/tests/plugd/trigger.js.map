{"version":3,"sources":["rails/tests/plugd/trigger.js"],"names":["dojo","provide","d","isfn","isFunction","leaveRe","_fix","_","p","mix","_mixin","realTrigger","doc","createEvent","n","e","a","ev","replace","initEvent","dispatchEvent","stop","toLowerCase","fireEvent","er","console","warn","evdata","type","target","faux","_stopper","this","cancelBubble","parentNode","_trigger","node","event","extraArgs","byId","slice","trigger","obj","hitch","apply","arguments","NodeList","prototype","_adaptAsForEach","_Node","extend","data"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,mCACb,SAAUC,GAET,IAAIC,EAAOD,EAAEE,WACZC,EAAU,qBACVC,EAAO,SAASC,EAAGC,GAClB,MAAO,SAAgB,SAALA,EAAe,OAAS,QAE3CC,EAAMP,EAAEQ,OAKRC,EAAcT,EAAEU,IAAIC,YACnB,SAASC,EAAGC,EAAGC,GAEd,IAAIC,EAAKf,EAAEU,IAAIC,YAAY,cAC3BE,EAAIA,EAAEG,QAAQb,EAASC,GACvBW,EAAGE,UAAUJ,GAAG,GAAM,GACtBC,GAAKP,EAAIQ,EAAID,GACbF,EAAEM,cAAcH,IAEjB,SAASH,EAAGC,EAAGC,GAEd,IAAIC,EAAK,KAAOF,EAAGM,GAAO,EAAYN,EAAEO,cACxC,IASCR,EAAES,UAAUN,GACZ,MAAMO,GACSC,QAAQC,KAAK,WAAYF,GAExC,IAAIG,EAASlB,GACZmB,KAAMb,EAAGc,OAAQf,EAAGgB,MAAM,EAG1BC,SAAU,WAAYV,EAAOW,KAAKC,eAChCjB,GAKH,IAHAb,EAAKW,EAAEG,KAAQH,EAAEG,GAAIU,IAGdN,GAAQP,IAAMZ,EAAEU,KAAOE,EAAEoB,YAC/BpB,EAAIA,EAAEoB,WACN/B,EAAKW,EAAEG,KAAQH,EAAEG,GAAIU,KAM1BzB,EAAEiC,SAAW,SAA6BC,EAAkBC,EAAOC,GAIlE,IAAIxB,EAAIZ,EAAEqC,KAAKH,GAAOnB,EAAKoB,GAA8B,MAArBA,EAAMG,MAAM,EAAG,GAAaH,EAAMG,MAAM,GAAKH,EACjF1B,EAAYG,EAAGG,EAAIqB,IAIpBpC,EAAEuC,QAAU,SAASC,EAAKL,EAAOC,GAmEhC,OAAQnC,EAAKuC,IAAQvC,EAAKkC,IAAUlC,EAAKuC,EAAIL,IAC5CnC,EAAEyC,MAAMC,MAAM1C,EAAG2C,UAAjB3C,GAAgCA,EAAEiC,SAASS,MAAM1C,EAAG2C,YAyBtD3C,EAAE4C,SAASC,UAAUN,QAAUvC,EAAE4C,SAASE,gBAAgB9C,EAAEiC,UAGzDjC,EAAE+C,QAAU/C,EAAE+C,MAAMF,UAAUN,SAChCvC,EAAEgD,OAAOhD,EAAE+C,OACVR,QAAS,SAASxB,EAAIkC,GAkBrB,OADAjD,EAAEiC,SAASH,KAAMf,EAAIkC,GACdnB,QApLX,CAyLGhC","file":"../../../../rails/tests/plugd/trigger.js","sourcesContent":["dojo.provide(\"dojox.rails.tests.plugd.trigger\");\r\n(function(d){\r\n\t\r\n\tvar isfn = d.isFunction,\r\n\t\tleaveRe = /mouse(enter|leave)/,\r\n\t\t_fix = function(_, p){\r\n\t\t\treturn \"mouse\" + (p == \"enter\" ? \"over\" : \"out\");\r\n\t\t},\r\n\t\tmix = d._mixin,\r\n\t\t\r\n\t\t// the guts of the node triggering logic:\r\n\t\t// the function accepts node (not string|node), \"on\"-less event name,\r\n\t\t// and an object of args to mix into the event.\r\n\t\trealTrigger = d.doc.createEvent ?\r\n\t\t\tfunction(n, e, a){\r\n\t\t\t\t// the sane branch\r\n\t\t\t\tvar ev = d.doc.createEvent(\"HTMLEvents\");\r\n\t\t\t\te = e.replace(leaveRe, _fix);\r\n\t\t\t\tev.initEvent(e, true, true);\r\n\t\t\t\ta && mix(ev, a);\r\n\t\t\t\tn.dispatchEvent(ev);\r\n\t\t\t} :\r\n\t\t\tfunction(n, e, a){\r\n\t\t\t\t// the janktastic branch\r\n\t\t\t\tvar ev = \"on\" + e, stop = false, lc = e.toLowerCase(), node = n;\r\n\t\t\t\ttry{\r\n// FIXME: is this worth it? for mixed-case native event support:? Opera ends up in the\r\n//\tcreateEvent path above, and also fails on _some_ native-named events.\r\n//\t\t\t\t\tif(lc !== e && d.indexOf(d.NodeList.events, lc) >= 0){\r\n//\t\t\t\t\t\t// if the event is one of those listed in our NodeList list\r\n//\t\t\t\t\t\t// in lowercase form but is mixed case, throw to avoid\r\n//\t\t\t\t\t\t// fireEvent. /me sighs. http://gist.github.com/315318\r\n//\t\t\t\t\t\tthrow(\"janktastic\");\r\n//\t\t\t\t\t}\r\n\t\t\t\t\tn.fireEvent(ev);\r\n\t\t\t\t}catch(er){\r\n                    console.warn(\"in catch\", er);\r\n\t\t\t\t\t// a lame duck to work with. we're probably a 'custom event'\r\n\t\t\t\t\tvar evdata = mix({\r\n\t\t\t\t\t\ttype: e, target: n, faux: true,\r\n\t\t\t\t\t\t// HACK: [needs] added support for customStopper to _base/event.js\r\n\t\t\t\t\t\t// some tests will fail until del._stopPropagation has support.\r\n\t\t\t\t\t\t_stopper: function(){ stop = this.cancelBubble; }\r\n\t\t\t\t\t}, a);\r\n\t\t\t\t\r\n\t\t\t\t\tisfn(n[ev]) && n[ev](evdata);\r\n\t\t\t\t\r\n\t\t\t\t\t// handle bubbling of custom events, unless the event was stopped.\r\n\t\t\t\t\twhile(!stop && n !== d.doc && n.parentNode){\r\n\t\t\t\t\t\tn = n.parentNode;\r\n\t\t\t\t\t\tisfn(n[ev]) && n[ev](evdata);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t;\r\n\t\r\n\td._trigger = function(/* DomNode|String */node, /* String */event, extraArgs){\r\n\t\t// summary:\r\n\t\t//\t\tHelper for `dojo.trigger`, which handles the DOM cases. We should never\r\n\t\t//\t\tbe here without a domNode reference and a string eventname.\r\n\t\tvar n = d.byId(node), ev = event && event.slice(0, 2) == \"on\" ? event.slice(2) : event;\r\n\t\trealTrigger(n, ev, extraArgs);\r\n\r\n\t};\r\n\t\t\r\n\td.trigger = function(obj, event, extraArgs){\r\n\t\t// summary:\r\n\t\t//\t\tTrigger some event. It can be either a Dom Event, Custom Event,\r\n\t\t//\t\tor direct function call.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tTrigger some event. It can be either a Dom Event, Custom Event,\r\n\t\t//\t\tor direct function call. NOTE: This function does not trigger\r\n\t\t//\t\tdefault behavior, only triggers bound event listeneres. eg:\r\n\t\t//\t\tone cannot trigger(\"anchorNode\", \"onclick\") and expect the browser\r\n\t\t//\t\tto follow the href=\"\" attribute naturally.\r\n\t\t//\r\n\t\t// obj: String|DomNode|Object|Function\r\n\t\t//\t\tAn ID, or DomNode reference, from which to trigger the event.\r\n\t\t//\t\tIf an Object, fire the `event` in the scope of this object,\r\n\t\t//\t\tsimilar to calling dojo.hitch(obj, event)(). The return value\r\n\t\t//\t\tin this case is returned from `dojo.trigger`\r\n\t\t//\r\n\t\t// event: String|Function\r\n\t\t//\t\tThe name of the event to trigger. Can be any DOM level 2 event\r\n\t\t//\t\tand can be in either form: \"onclick\" or \"click\" for instance.\r\n\t\t//\t\tIn the object-firing case, this method can be a function or\r\n\t\t//\t\ta string version of a member function, just like `dojo.hitch`.\r\n\t\t//\r\n\t\t// extraArgs: Object?\r\n\t\t//\t\tAn object to mix into the `event` object passed to any bound\r\n\t\t//\t\tlisteners. Be careful not to override important members, like\r\n\t\t//\t\t`type`, or `preventDefault`. It will likely error.\r\n\t\t//\r\n\t\t//\t\tAdditionally, extraArgs is moot in the object-triggering case,\r\n\t\t//\t\tas all arguments beyond the `event` are curried onto the triggered\r\n\t\t//\t\tfunction.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\tdojo.connect(node, \"onclick\", function(e){ /* stuff */ });\r\n\t\t//\t|\t// later:\r\n\t\t//\t|\tdojo.trigger(node, \"onclick\");\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// or from within dojo.query: (requires dojo.NodeList)\r\n\t\t//\t|\tdojo.query(\"a\").onclick(function(){}).trigger(\"onclick\");\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// fire obj.method() in scope of obj\r\n\t\t//\t|\tdojo.trigger(obj, \"method\");\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// fire an anonymous function:\r\n\t\t//\t|\tdojo.trigger(d.global, function(){ /* stuff */ });\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// fire and anonymous function in the scope of obj\r\n\t\t//\t|\tdojo.trigger(obj, function(){ this == obj; });\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// with a connected function like:\r\n\t\t//\t|\tdojo.connect(dojo.doc, \"onclick\", function(e){\r\n\t\t//\t|\t\tif(e && e.manuallydone){\r\n\t\t//\t|\t\t\tconsole.log(\"this was a triggered onclick, not natural\");\r\n\t\t//\t|\t\t}\r\n\t\t//\t|\t});\r\n\t\t//\t|\t// fire onclick, passing in a custom bit of info\r\n\t\t//\t|\tdojo.trigger(\"someId\", \"onclick\", { manuallydone:true });\r\n\t\t//\r\n\t\t// returns: Anything\r\n\t\t//\t\tWill not return anything in the Dom event case, but will return whatever\r\n\t\t//\t\treturn value is received from the triggered event.\r\n\t\treturn (isfn(obj) || isfn(event) || isfn(obj[event])) ?\r\n\t\t\td.hitch.apply(d, arguments)() : d._trigger.apply(d, arguments);\r\n\t};\r\n\t\r\n\t// adapt for dojo.query:\r\n\t/*=====\r\n\tdojo.extend(dojo.NodeList, {\r\n\t\ttrigger: function(event, data){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTrigger some Event originating from each of the nodes in this\r\n\t\t\t//\t\t`dojo.NodeList`.\r\n\t\t\t//\r\n\t\t\t// event: String\r\n\t\t\t//\t\tAny strig identifier for the event.type to be triggered.\r\n\t\t\t//\r\n\t\t\t// data: Object\r\n\t\t\t//\t\tJust like `extraArgs` for `dojo.trigger`, additional data\r\n\t\t\t//\t\tto mix into the event object.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t|\tdojo.query(\"a\").trigger(\"onclick\");\r\n\t\t\t\r\n\t\t\treturn this; // dojo.NodeList\r\n\t\t}\r\n\t});\r\n\t=====*/\r\n\td.NodeList.prototype.trigger = d.NodeList._adaptAsForEach(d._trigger);\r\n\r\n\t// if the node.js module is available, extend trigger into that.\r\n\tif(d._Node && !d._Node.prototype.trigger){\r\n\t\td.extend(d._Node, {\r\n\t\t\ttrigger: function(ev, data){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tFire some some event originating from this node.\r\n\t\t\t\t//\t\tOnly available if both the `dojo.trigger` and `dojo.node` plugin\r\n\t\t\t\t//\t\tare enabled. Allows chaining as all `dojo._Node` methods do.\r\n\t\t\t\t//\r\n\t\t\t\t// ev: String\r\n\t\t\t\t//\t\tSome string event name to fire. eg: \"onclick\", \"submit\"\r\n\t\t\t\t//\r\n\t\t\t\t// data: Object\r\n\t\t\t\t//\t\tJust like `extraArgs` for `dojo.trigger`, additional data\r\n\t\t\t\t//\t\tto mix into the event object.\r\n\t\t\t\t//\r\n\t\t\t\t// example:\r\n\t\t\t\t//\t|\t// fire onlick orginiating from a node with id=\"someAnchorId\"\r\n\t\t\t\t//\t|\tdojo.node(\"someAnchorId\").trigger(\"click\");\r\n\r\n\t\t\t\td._trigger(this, ev, data);\r\n\t\t\t\treturn this; // dojo._Node\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n})(dojo);\r\n"]}