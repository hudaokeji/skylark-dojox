{"version":3,"sources":["store/tests/LocalStorage.js"],"names":["define","registerSuite","assert","IndexedDB","SQL","all","has","data","id","name","prime","mappedTo","words","even","dbConfig","version","stores","test","autoIncrement","preference","multiEntry","indexed","testsForDB","DB","available","db","storeName","testQuery","query","options","results","undefined","multi","i","queryResults","total","forEach","object","strictEqual","then","length","setup","push","remove","put","{id: 2}","{name: 'four'}","{name: 'two'}","{even: true}","{even: true, name: 'two'}","{mappedTo: 'C'}","[{name: 'two'}, {mappedTo: 'C'}, {mappedTo: 'D'}]","{id: {from: 1, to: 3}}","from","to","{name: {from: 'm', to: 'three'}}","{name: {from: 'one', to: 'three'}}","{name: {from: 'one', excludeFrom: true, to: 'three'}}","excludeFrom","{name: {from: 'one', to: 'three', excludeTo: true}}","excludeTo","{name: {from: 'one', excludeFrom: true, to: 'three', excludeTo: true}}","{name: 't*'}","sort","attribute","{name: 'not a number'}","{words: {contains: ['orange']}}","contains","{words: {contains: ['or*']}}","{words: {contains: ['apple', 'banana']}}","{words: {contains: ['orange', 'banana']}}","{id: {from: 0, to: 4}, words: {contains: ['orange', 'banana']}}","{id: {from: 1, to: 3}}, sort by name +","{id: {from: 1, to: 3}}, sort by name -","descending","{id: {from: 0, to: 4}}, paged","start","count","db interaction","t","get","one","add","window","openDatabase"],"mappings":"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","file":"../../../store/tests/LocalStorage.js","sourcesContent":["define([\r\n\t'intern!object',\r\n\t'intern/chai!assert',\r\n\t'../db/has!indexeddb?../db/IndexedDB',\r\n\t'../db/SQL',\r\n\t'dojo/promise/all',\r\n\t'dojo/sniff'\r\n], function (registerSuite, assert, IndexedDB, SQL, all, has) {\r\n\tvar data = [\r\n\t\t{id: 1, name: 'one', prime: false, mappedTo: 'E', words: ['banana']},\r\n\t\t{id: 2, name: 'two', even: true, prime: true, mappedTo: 'D', words: ['banana', 'orange']},\r\n\t\t{id: 3, name: 'three', prime: true, mappedTo: 'C', words: ['apple', 'orange']},\r\n\t\t{id: 4, name: 'four', even: true, prime: false, mappedTo: null},\r\n\t\t{id: 5, name: 'five', prime: true, mappedTo: 'A'}\r\n\t];\r\n\tvar dbConfig = {\r\n\t\tversion: 5,\r\n\t\tstores: {\r\n\t\t\ttest: {\r\n\t\t\t\tname: 10,\r\n\t\t\t\teven: {},\r\n\t\t\t\tid: {\r\n\t\t\t\t\tautoIncrement: true,\r\n\t\t\t\t\tpreference: 20\r\n\t\t\t\t},\r\n\t\t\t\twords: {\r\n\t\t\t\t\tmultiEntry: true,\r\n\t\t\t\t\tpreference: 5\r\n\t\t\t\t},\r\n\t\t\t\tmappedTo: {\r\n\t\t\t\t\tindexed: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif (IndexedDB) {\r\n\t\tregisterSuite(testsForDB('dojox/store/db/IndexedDB', IndexedDB));\r\n\t}\r\n\tif (window.openDatabase) {\r\n\t\tregisterSuite(testsForDB('dojox/store/db/SQL', SQL));\r\n\t}\r\n\tfunction testsForDB(name, DB){\r\n\t\t// need to reset availability\r\n\t\tdbConfig.available = null;\r\n\t\tvar db = new DB({dbConfig: dbConfig, storeName: 'test'});\r\n\t\tfunction testQuery(query, options, results){\r\n\t\t\tif(!results){\r\n\t\t\t\tresults = options;\r\n\t\t\t\toptions = undefined;\r\n\t\t\t}\r\n\t\t\treturn function(){\r\n\t\t\t\tif(options && options.multi && has('trident')){\r\n\t\t\t\t\t// sadly, IE doesn't support multiEntry yet\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\tvar queryResults = db.query(query, options);\r\n\t\t\t\tvar total = queryResults.total;\r\n\t\t\t\treturn queryResults.forEach(function(object){\r\n\t\t\t\t\tassert.strictEqual(results[i++], object.id);\r\n\t\t\t\t}).then(function(){\r\n\t\t\t\t\tassert.strictEqual(results.length, i);\r\n\t\t\t\t\tif(!options){\r\n\t\t\t\t\t\treturn queryResults.total.then(function(total){\r\n\t\t\t\t\t\t\tassert.strictEqual(results.length, total);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tname: name,\r\n\t\t\tsetup: function(){\r\n\t\t\t\tvar results = [];\r\n\t\t\t\treturn db.query({}).forEach(function(object){\r\n\t\t\t\t\t// clear the data\r\n\t\t\t\t\tresults.push(db.remove(object.id));\r\n\t\t\t\t}).then(function(){\r\n\t\t\t\t\treturn all(results);\r\n\t\t\t\t}).then(function(){\r\n\t\t\t\t\tresults = [];\r\n\t\t\t\t\t// load new data\r\n\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\t\t\t\tresults.push(db.put(data[i]));\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn all(results);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t\"{id: 2}\": testQuery({id: 2}, [2]),\r\n\t\t\t\"{name: 'four'}\": testQuery({name: 'four'}, [4]),\r\n\t\t\t\"{name: 'two'}\": testQuery({name: 'two'}, [2]),\r\n\t\t\t\"{even: true}\": testQuery({even: true}, [2, 4]),\r\n\t\t\t\"{even: true, name: 'two'}\": testQuery({even: true, name: 'two'}, [2]),\r\n\t\t\t// test non-indexed values\r\n\t\t\t\"{mappedTo: 'C'}\": testQuery({mappedTo: 'C'}, [3]),\r\n\t\t\t// union\r\n\t\t\t\"[{name: 'two'}, {mappedTo: 'C'}, {mappedTo: 'D'}]\": testQuery([{name: 'two'}, {mappedTo: 'C'}, {mappedTo: 'D'}], [2, 3]),\r\n\t\t\t\"{id: {from: 1, to: 3}}\": testQuery({id: {from: 1, to: 3}}, [1, 2, 3]),\r\n\t\t\t\"{name: {from: 'm', to: 'three'}}\": testQuery({name: {from: 'm', to: 'three'}}, [1, 3]),\r\n\t\t\t\"{name: {from: 'one', to: 'three'}}\": testQuery({name: {from: 'm', to: 'three'}}, [1, 3]),\r\n\t\t\t\"{name: {from: 'one', excludeFrom: true, to: 'three'}}\": testQuery({name: {from: 'one', excludeFrom: true, to: 'three'}}, [3]),\r\n\t\t\t\"{name: {from: 'one', to: 'three', excludeTo: true}}\": testQuery({name: {from: 'one', to: 'three', excludeTo: true}}, [1]),\r\n\t\t\t\"{name: {from: 'one', excludeFrom: true, to: 'three', excludeTo: true}}\": testQuery({name: {from: 'one', excludeFrom: true, to: 'three', excludeTo: true}}, []),\r\n\t\t\t\"{name: 't*'}\": testQuery({name: 't*'}, {sort:[{attribute: \"name\"}]}, [3, 2]),\r\n\t\t\t\"{name: 'not a number'}\": testQuery({name: 'not a number'}, []),\r\n\t\t\t\"{words: {contains: ['orange']}}\": testQuery({words: {contains: ['orange']}}, {multi: true}, [2, 3]),\r\n\t\t\t\"{words: {contains: ['or*']}}\": testQuery({words: {contains: ['or*']}}, {multi: true}, [2, 3]),\r\n\t\t\t\"{words: {contains: ['apple', 'banana']}}\": testQuery({words: {contains: ['apple', 'banana']}}, {multi: true}, []),\r\n\t\t\t\"{words: {contains: ['orange', 'banana']}}\": testQuery({words: {contains: ['orange', 'banana']}}, {multi: true}, [2]),\r\n\t\t\t\"{id: {from: 0, to: 4}, words: {contains: ['orange', 'banana']}}\": testQuery({id: {from: 0, to: 4}, words: {contains: ['orange', 'banana']}}, {multi: true}, [2]),\r\n\t\t\t// \"{name: '*e'}\": testQuery({name: '*e'}, [5, 1, 3]), don't know if we even support this yet\r\n\t\t\t\"{id: {from: 1, to: 3}}, sort by name +\": testQuery({id: {from: 1, to: 3}}, {sort:[{attribute: \"name\"}]}, [1, 3, 2]),\r\n\t\t\t\"{id: {from: 1, to: 3}}, sort by name -\": testQuery({id: {from: 1, to: 3}}, {sort:[{attribute: \"name\", descending: true}]}, [2, 3, 1]),\r\n\t\t\t\"{id: {from: 0, to: 4}}, paged\": testQuery({id: {from: 0, to: 4}}, {start: 1, count: 2}, [2, 3]),\r\n\t\t\t'db interaction': function(t){\r\n\t\t\t\treturn db.get(1).then(function(one){\r\n\t\t\t\t\tassert.strictEqual(one.id, 1);\r\n\t\t\t\t\tassert.strictEqual(one.name, 'one');\r\n\t\t\t\t\tassert.strictEqual(one.prime, false);\r\n\t\t\t\t\tassert.strictEqual(one.mappedTo, 'E');\r\n\t\t\t\t\treturn all([db.remove(2), db.remove(4), db.add({id: 6, name: 'six', prime: false, words: ['pineapple', 'orange juice']})]).then(function(){\r\n\t\t\t\t\t\treturn all([\r\n\t\t\t\t\t\t\ttestQuery({name: {from: 's', to: 'u'}}, [6, 3])(),\r\n\t\t\t\t\t\t\ttestQuery({words: {contains: ['orange*']}}, {multi: true}, [3, 6])()\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t};\r\n\t}\r\n});\r\n"]}