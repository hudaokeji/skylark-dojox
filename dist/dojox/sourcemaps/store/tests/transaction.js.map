{"version":3,"sources":["store/tests/transaction.js"],"names":["define","registerSuite","assert","transaction","Deferred","all","declare","Memory","QueryResults","anAsyncMethod","query","started","results","this","inherited","arguments","then","deferred","setTimeout","resolve","AsyncMemory","get","put","add","masterStore","data","id","name","prime","mappedTo","words","even","cachingStore","masterStore2","cachingStore2","logStore","transactionStore","transactionLogStore","transactionStore2","auto-commit","operations","push","strictEqual","length","remove","commit transaction","perfect","six","deepEqual","commit","seven","gone","undefined","multi-store transaction"],"mappings":"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","file":"../../../store/tests/transaction.js","sourcesContent":["define([\r\n\t'intern!object',\r\n\t'intern/chai!assert',\r\n\t'../transaction',\r\n\t'dojo/Deferred',\r\n\t'dojo/promise/all',\r\n\t'dojo/_base/declare',\r\n\t'dojo/store/Memory',\r\n\t'dojo/store/util/QueryResults'\r\n], function (registerSuite, assert, transaction, Deferred, all, declare, Memory, QueryResults) {\r\n\r\n\tvar started = 0;\r\n\tfunction anAsyncMethod(query){\r\n\t\treturn function(){\r\n\t\t\tstarted++;\r\n\t\t\tvar results = this.inherited(arguments);\r\n\t\t\tif(results && results.then){\r\n\t\t\t\treturn results;\r\n\t\t\t}\r\n\t\t\tvar deferred = new Deferred();\r\n\t\t\tsetTimeout(function(){\r\n\t\t\t\tdeferred.resolve(results);\r\n\t\t\t}, 10);\r\n\t\t\treturn query ? new QueryResults(deferred) : deferred;\r\n\t\t}\r\n\t}\r\n\tvar AsyncMemory = declare(Memory, {\r\n\t\tget: anAsyncMethod(),\r\n\t\tput: anAsyncMethod(),\r\n\t\tadd: anAsyncMethod(),\r\n\t\tquery: anAsyncMethod(true)\r\n\t});\r\n\tvar data = [\r\n\t\t{id: 1, name: 'one', prime: false, mappedTo: 'E', words: ['banana']},\r\n\t\t{id: 2, name: 'two', even: true, prime: true, mappedTo: 'D', words: ['banana', 'orange']},\r\n\t\t{id: 3, name: 'three', prime: true, mappedTo: 'C', words: ['apple', 'orange']},\r\n\t\t{id: 4, name: 'four', even: true, prime: false, mappedTo: null},\r\n\t\t{id: 5, name: 'five', prime: true, mappedTo: 'A'}\r\n\t];\r\n\tvar masterStore = new AsyncMemory({\r\n\t\tdata: data\r\n\t});\r\n\tvar cachingStore = new AsyncMemory();\r\n\tvar masterStore2 = new AsyncMemory({\r\n\t\tdata: []\r\n\t});\r\n\tvar cachingStore2 = new AsyncMemory();\r\n\tvar logStore = new AsyncMemory();\r\n\r\n\tvar transactionStore = transaction({\r\n\t\tmasterStore: masterStore,\r\n\t\tcachingStore: cachingStore,\r\n\t\ttransactionLogStore: logStore\r\n\t});\r\n\tvar transactionStore2 = transaction({\r\n\t\tmasterStore: masterStore2,\r\n\t\tcachingStore: cachingStore2,\r\n\t\ttransactionLogStore: logStore\r\n\t});\r\n\tregisterSuite({\r\n\t\tname: \"transaction\",\r\n\t\t'auto-commit': function(){\r\n\t\t\t// initially in auto-commit mode\r\n\t\t\tvar operations = [];\r\n\t\t\toperations.push(transactionStore.add(\r\n\t\t\t\t{id: 6, name: 'six'}\r\n\t\t\t));\r\n\t\t\tassert.strictEqual(masterStore.data.length, 6);\r\n\t\t\toperations.push(transactionStore.remove(6));\r\n\t\t\tassert.strictEqual(masterStore.data.length, 5);\r\n\t\t\treturn all(operations);\r\n\t\t},\r\n\t\t'commit transaction': function(){\r\n\t\t\tvar operations = [];\r\n\t\t\tvar transaction = transactionStore.transaction();\r\n\t\t\toperations.push(transactionStore.put(\r\n\t\t\t\t{id: 6, name: 'six', perfect: true}\r\n\t\t\t));\r\n\t\t\toperations.push(transactionStore.add(\r\n\t\t\t\t{id: 7, name: 'seven'}\r\n\t\t\t));\r\n\t\t\toperations.push(transactionStore.remove(3));\r\n\t\t\t// make sure the master store hasn't been updated yet\r\n\t\t\tassert.strictEqual(masterStore.data.length, 5);\r\n\t\t\treturn all(operations).then(function(){\r\n\t\t\t\t// make sure it is in the caching store\r\n\t\t\t\toperations.push(transactionStore.get(6).then(function(six){\r\n\t\t\t\t\tassert.deepEqual(six, {id: 6, name: 'six', perfect: true});\r\n\t\t\t\t}));\r\n\t\t\t\tassert.strictEqual(cachingStore.data.length, 2);\r\n\t\t\t\tassert.strictEqual(logStore.data.length, 3);\r\n\t\t\t\treturn transaction.commit().then(function(){\r\n\t\t\t\t\toperations = [];\r\n\t\t\t\t\toperations.push(transactionStore.get(6).then(function(six){\r\n\t\t\t\t\t\tassert.deepEqual(six, {id: 6, name: 'six', perfect: true});\r\n\t\t\t\t\t}));\r\n\t\t\t\t\toperations.push(transactionStore.get(7).then(function(seven){\r\n\t\t\t\t\t\tassert.deepEqual(seven, {id: 7, name: 'seven'});\r\n\t\t\t\t\t}));\r\n\t\t\t\t\toperations.push(transactionStore.get(3).then(function(gone){\r\n\t\t\t\t\t\tassert.strictEqual(gone, undefined);\r\n\t\t\t\t\t}));\r\n\t\t\t\t\treturn all(operations);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\t'multi-store transaction': function(){\r\n\t\t\tvar operations = [];\r\n\t\t\tvar transaction = transactionStore.transaction();\r\n\t\t\ttransactionStore2.transaction();\r\n\t\t\tassert.strictEqual(logStore.data.length, 0);\r\n\t\t\toperations.push(transactionStore.add(\r\n\t\t\t\t{id: 8, name: 'eight'}\r\n\t\t\t));\r\n\t\t\toperations.push(transactionStore2.put(\r\n\t\t\t\t{id: 'a', name: 'A'}\r\n\t\t\t));\r\n\t\t\t// make sure the master stores haven't been updated yet\r\n\t\t\tassert.strictEqual(masterStore.data.length, 6);\r\n\t\t\tassert.strictEqual(masterStore2.data.length, 0);\r\n\r\n\t\t\treturn all(operations).then(function(){\r\n\t\t\t\t// but the cache should be updated\r\n\t\t\t\tassert.strictEqual(cachingStore2.data.length, 1);\r\n\t\t\t\tassert.strictEqual(logStore.data.length, 2);\r\n\t\t\t\treturn transaction.commit().then(function(){\r\n\t\t\t\t\toperations = [];\r\n\t\t\t\t\toperations.push(transactionStore.get(8).then(function(six){\r\n\t\t\t\t\t\tassert.deepEqual(six, {id: 8, name: 'eight'});\r\n\t\t\t\t\t}));\r\n\t\t\t\t\toperations.push(transactionStore2.get('a').then(function(seven){\r\n\t\t\t\t\t\tassert.deepEqual(seven, {id: 'a', name: 'A'});\r\n\t\t\t\t\t}));\r\n\t\t\t\t\treturn all(operations);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}