{"version":3,"sources":["store/db/SQL.js"],"names":["define","declare","Deferred","when","QueryResults","lang","all","wildcardRe","convertExtra","object","mixin","JSON","parse","__extra","constructor","config","dbConfig","this","database","openDatabase","dbName","indexPrefix","storeName","table","replace","promises","index","indices","stores","repeatingIndices","multiEntry","available","storeConfig","idConfig","idProperty","autoIncrement","push","executeSql","join","repeatingTable","then","indexed","selectColumns","get","id","result","rows","length","item","undefined","getIdentity","remove","identifyGeneratedKey","add","directives","params","vals","cols","extra","actionsWithId","store","i","hasOwnProperty","array","map","value","stringify","idColumn","sql","results","insertId","func","put","overwrite","previous","j","query","options","condition","from","processObjectQuery","conditions","filterValue","convertWildcard","wildcard","match","contains","fromComparator","excludeFrom","toComparator","excludeTo","to","forEach","sort","attribute","descending","limitedCondition","count","start","delegate","sqlResults","total","callback","errback","parameters","error","deferred","transaction","resolve","e","reject","promise"],"mappings":"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","file":"../../../store/db/SQL.js","sourcesContent":["define(['dojo/_base/declare', 'dojo/Deferred', 'dojo/when', 'dojo/store/util/QueryResults', 'dojo/_base/lang', 'dojo/promise/all'], function(declare, Deferred, when, QueryResults, lang, all) {\r\n\t//\tmodule:\r\n\t//\t\t./store/db/SQL\r\n\t//  summary:\r\n\t//\t\tThis module implements the Dojo object store API using the WebSQL database\r\n\tvar wildcardRe = /(.*)\\*$/;\r\n\tfunction convertExtra(object){\r\n\t\t// converts the 'extra' data on sql rows that can contain expando properties outside of the defined column\r\n\t\treturn object && lang.mixin(object, JSON.parse(object.__extra));\r\n\t}\r\n\treturn declare([], {\r\n\t\tconstructor: function(config){\r\n\t\t\tvar dbConfig = config.dbConfig;\r\n\t\t\t// open the database and get it configured\r\n\t\t\t// args are short_name, version, display_name, and size\r\n\t\t\tthis.database = openDatabase(config.dbName || \"dojo-db\", '1.0', 'dojo-db', 4*1024*1024);\r\n\t\t\tvar indexPrefix = this.indexPrefix = config.indexPrefix || \"idx_\";\r\n\t\t\tvar storeName = config.table || config.storeName;\r\n\t\t\tthis.table = (config.table || config.storeName).replace(/[^\\w]/g, '_');\r\n\t\t\tvar promises = []; // for all the structural queries\r\n\t\t\t// the indices for this table\r\n\t\t\tthis.indices = dbConfig.stores[storeName];\r\n\t\t\tthis.repeatingIndices = {};\r\n\t\t\tfor(var index in this.indices){\r\n\t\t\t\t// we support multiEntry property to simulate the similar behavior in IndexedDB, we track these because we use the\r\n\t\t\t\tif(this.indices[index].multiEntry){\r\n\t\t\t\t\tthis.repeatingIndices[index] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!dbConfig.available){\r\n\t\t\t\t// the configuration where we create any necessary tables and indices\r\n\t\t\t\tfor(var storeName in dbConfig.stores){\r\n\t\t\t\t\tvar storeConfig = dbConfig.stores[storeName];\r\n\t\t\t\t\tvar table = storeName.replace(/[^\\w]/g, '_');\r\n\t\t\t\t\t// the __extra property contains any expando properties in JSON form\r\n\t\t\t\t\tvar idConfig = storeConfig[this.idProperty];\r\n\t\t\t\t\tvar indices = ['__extra', this.idProperty + ' ' + ((idConfig && idConfig.autoIncrement) ? 'INTEGER PRIMARY KEY AUTOINCREMENT' : 'PRIMARY KEY')];\r\n\t\t\t\t\tvar repeatingIndices = [this.idProperty];\r\n\t\t\t\t\tfor(var index in storeConfig){\r\n\t\t\t\t\t\tif(index != this.idProperty){\r\n\t\t\t\t\t\t\tindices.push(index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpromises.push(this.executeSql(\"CREATE TABLE IF NOT EXISTS \" + table+ ' ('\r\n\t\t\t\t\t\t+ indices.join(',') +\r\n\t\t\t\t\t')'));\r\n\t\t\t\t\tfor(var index in storeConfig){\r\n\t\t\t\t\t\tif(index != this.idProperty){\r\n\t\t\t\t\t\t\tif(storeConfig[index].multiEntry){\r\n\t\t\t\t\t\t\t\t// it is \"repeating\" property, meaning that we expect it to have an array, and we want to index each item in the array\r\n\t\t\t\t\t\t\t\t// we will search on it using a nested select\r\n\t\t\t\t\t\t\t\trepeatingIndices.push(index);\r\n\t\t\t\t\t\t\t\tvar repeatingTable = table+ '_repeating_' + index;\r\n\t\t\t\t\t\t\t\tpromises.push(this.executeSql(\"CREATE TABLE IF NOT EXISTS \" + repeatingTable + ' (id,value)'));\r\n\t\t\t\t\t\t\t\tpromises.push(this.executeSql(\"CREATE INDEX IF NOT EXISTS idx_\" + repeatingTable + '_id ON ' + repeatingTable + '(id)'));\r\n\t\t\t\t\t\t\t\tpromises.push(this.executeSql(\"CREATE INDEX IF NOT EXISTS idx_\" + repeatingTable + '_value ON ' + repeatingTable + '(value)'));\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tpromises.push(this.executeSql(\"ALTER TABLE \" + table + ' ADD ' + index).then(null, function(){\r\n\t\t\t\t\t\t\t\t\t/* suppress failed alter table statements*/\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t\t// otherwise, a basic index will do\r\n\t\t\t\t\t\t\t\tif(storeConfig[index].indexed !== false){\r\n\t\t\t\t\t\t\t\t\tpromises.push(this.executeSql(\"CREATE INDEX IF NOT EXISTS \" + indexPrefix +\r\n\t\t\t\t\t\t\t\t\t\ttable + '_' + index + ' ON ' + table + '(' + index + ')'));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdbConfig.available = all(promises);\r\n\t\t\t}\r\n\t\t\tthis.available = dbConfig.available;\r\n\t\t},\r\n\t\tidProperty: \"id\",\r\n\t\tselectColumns: [\"*\"],\r\n\t\tget: function(id){\r\n\t\t\t// basic get() operation, query by id property\r\n\t\t\treturn when(this.executeSql(\"SELECT \" + this.selectColumns.join(\",\") + \" FROM \" + this.table + \" WHERE \" + this.idProperty + \"=?\", [id]), function(result){\r\n\t\t\t\treturn result.rows.length > 0 ? convertExtra(result.rows.item(0)) : undefined;\r\n\t\t\t});\r\n\t\t},\r\n\t\tgetIdentity: function(object){\r\n\t\t\treturn object[this.idProperty];\r\n\t\t},\r\n\t\tremove: function(id){\r\n\t\t\treturn this.executeSql(\"DELETE FROM \" + this.table + \" WHERE \" + this.idProperty + \"=?\", [id]); // Promise\r\n\t\t\t// TODO: remove from repeating rows too\r\n\t\t},\r\n\t\tidentifyGeneratedKey: true,\r\n\t\tadd: function(object, directives){\r\n\t\t\t// An add() wiill translate to an INSERT INTO in SQL\r\n\t\t\tvar params = [], vals = [], cols = [];\r\n\t\t\tvar extra = {};\r\n\t\t\tvar actionsWithId = [];\r\n\t\t\tvar store = this;\r\n\t\t\tfor(var i in object){\r\n\t\t\t\tif(object.hasOwnProperty(i)){\r\n\t\t\t\t\tif(i in this.indices || i == this.idProperty){\r\n\t\t\t\t\t\tif(this.repeatingIndices[i]){\r\n\t\t\t\t\t\t\t// we will need to add to the repeating table for the given field/column,\r\n\t\t\t\t\t\t\t// but it must take place after the insert, so we know the id\r\n\t\t\t\t\t\t\tactionsWithId.push(function(id){\r\n\t\t\t\t\t\t\t\tvar array = object[i];\r\n\t\t\t\t\t\t\t\treturn all(array.map(function(value){\r\n\t\t\t\t\t\t\t\t\treturn store.executeSql('INSERT INTO ' + store.table + '_repeating_' + i + ' (value, id) VALUES (?, ?)', [value, id]);\r\n\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// add to the columns and values for SQL statement\r\n\t\t\t\t\t\t\tcols.push(i);\r\n\t\t\t\t\t\t\tvals.push('?');\r\n\t\t\t\t\t\t\tparams.push(object[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\textra[i] = object[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// add the \"extra\" expando data as well\r\n\t\t\tcols.push('__extra');\r\n\t\t\tvals.push('?');\r\n\t\t\tparams.push(JSON.stringify(extra));\r\n\t\t\t\r\n\t\t\tvar idColumn = this.idProperty;\r\n\t\t\tif(this.identifyGeneratedKey){\r\n\t\t\t\tparams.idColumn = idColumn;\r\n\t\t\t}\r\n\t\t\tvar sql = \"INSERT INTO \" + this.table + \" (\" + cols.join(',') + \") VALUES (\" + vals.join(',') + \")\";\r\n\t\t\treturn when(this.executeSql(sql, params), function(results) {\r\n\t\t\t\tvar id = results.insertId;\r\n\t\t\t\tobject[idColumn] = id;\r\n\t\t\t\t// got the id now, perform the insertions for the repeating data\r\n\t\t\t\treturn all(actionsWithId.map(function(func){\r\n\t\t\t\t\treturn func(id);\r\n\t\t\t\t})).then(function(){\r\n\t\t\t\t\treturn id;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\tput: function(object, directives){\r\n\t\t\t// put, if overwrite is not specified, we have to do a get() to determine if we need to do an INSERT INTO (via add), or an UPDATE\r\n\t\t\tdirectives = directives || {};\r\n\t\t\tvar id = directives.id || object[this.idProperty];\r\n\t\t\tvar overwrite = directives.overwrite;\r\n\t\t\tif(overwrite === undefined){\r\n\t\t\t\t// can't tell if we need to do an INSERT or UPDATE, do a get() to find out\r\n\t\t\t\tvar store = this;\r\n\t\t\t\treturn this.get(id).then(function(previous){\r\n\t\t\t\t\tif((directives.overwrite = !!previous)){\r\n\t\t\t\t\t\tdirectives.overwrite = true;\r\n\t\t\t\t\t\treturn store.put(object, directives);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\treturn store.add(object, directives);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif(!overwrite){\r\n\t\t\t\treturn store.add(object, directives);\r\n\t\t\t}\r\n\t\t\tvar sql = \"UPDATE \" + this.table + \" SET \";\r\n\t\t\tvar params = [];\r\n\t\t\tvar cols = [];\r\n\t\t\tvar extra = {};\r\n\t\t\tvar promises = [];\r\n\t\t\tfor(var i in object){\r\n\t\t\t\tif(object.hasOwnProperty(i)){\r\n\t\t\t\t\tif(i in this.indices || i == this.idProperty){\r\n\t\t\t\t\t\tif(this.repeatingIndices[i]){\r\n\t\t\t\t\t\t\t// update the repeating value tables\r\n\t\t\t\t\t\t\tthis.executeSql('DELETE FROM ' + this.table + '_repeating_' + i + ' WHERE id=?', [id]);\r\n\t\t\t\t\t\t\tvar array = object[i];\r\n\t\t\t\t\t\t\tfor(var j = 0; j < array.length; j++){\r\n\t\t\t\t\t\t\t\tthis.executeSql('INSERT INTO ' + this.table + '_repeating_' + i + ' (value, id) VALUES (?, ?)', [array[j], id]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tcols.push(i + \"=?\");\r\n\t\t\t\t\t\t\tparams.push(object[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\textra[i] = object[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcols.push(\"__extra=?\");\r\n\t\t\tparams.push(JSON.stringify(extra));\r\n\t\t\t// create the SETs for the SQL\r\n\t\t\tsql += cols.join(',') + \" WHERE \" + this.idProperty + \"=?\";\r\n\t\t\tparams.push(object[this.idProperty]);\r\n\r\n\t\t\treturn when(this.executeSql(sql, params), function(result){\r\n\t\t\t\treturn id;\r\n\t\t\t});\r\n\t\t},\r\n\t\tquery: function(query, options){\r\n\t\t\toptions = options || {};\r\n\t\t\tvar from = 'FROM ' + this.table;\r\n\t\t\tvar condition;\r\n\t\t\tvar addedWhere;\r\n\t\t\tvar store = this;\r\n\t\t\tvar table = this.table;\r\n\t\t\tvar params = [];\r\n\t\t\tif(query.forEach){\r\n\t\t\t\t// a set of OR'ed conditions\r\n\t\t\t\tcondition = query.map(processObjectQuery).join(') OR (');\r\n\t\t\t\tif(condition){\r\n\t\t\t\t\tcondition = '(' + condition + ')';\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t// regular query\r\n\t\t\t\tcondition = processObjectQuery(query);\r\n\t\t\t}\r\n\t\t\tif(condition){\r\n\t\t\t\tcondition = ' WHERE ' + condition;\r\n\t\t\t}\r\n\t\t\tfunction processObjectQuery(query){\r\n\t\t\t\t// we are processing an object query, that needs to be translated to WHERE conditions, AND'ed\r\n\t\t\t\tvar conditions = [];\r\n\t\t\t\tfor(var i in query){\r\n\t\t\t\t\tvar filterValue = query[i];\r\n\t\t\t\t\tfunction convertWildcard(value){\r\n\t\t\t\t\t\t// convert to LIKE if it ends with a *\r\n\t\t\t\t\t\tvar wildcard = value && value.match && value.match(wildcardRe);\r\n\t\t\t\t\t\tif(wildcard){\r\n\t\t\t\t\t\t\tparams.push(wildcard[1] + '%');\r\n\t\t\t\t\t\t\treturn ' LIKE ?';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tparams.push(value);\r\n\t\t\t\t\t\treturn '=?';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(filterValue){\r\n\t\t\t\t\t\tif(filterValue.contains){\r\n\t\t\t\t\t\t\t// search within the repeating table\r\n\t\t\t\t\t\t\tvar repeatingTable = store.table + '_repeating_' + i;\r\n\t\t\t\t\t\t\tconditions.push(filterValue.contains.map(function(value){\r\n\t\t\t\t\t\t\t\treturn store.idProperty + ' IN (SELECT id FROM ' + repeatingTable + ' WHERE ' + \r\n\t\t\t\t\t\t\t\t\t'value' + convertWildcard(value) + ')';\r\n\t\t\t\t\t\t\t}).join(' AND '));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else if(typeof filterValue == 'object' && (\"from\" in filterValue || \"to\" in filterValue)){\r\n\t\t\t\t\t\t\t// a range object, convert to appropriate SQL operators\r\n\t\t\t\t\t\t\tvar fromComparator = filterValue.excludeFrom ? '>' : '>=';\r\n\t\t\t\t\t\t\tvar toComparator = filterValue.excludeTo ? '<' : '<=';\r\n\t\t\t\t\t\t\tif('from' in filterValue){\r\n\t\t\t\t\t\t\t\tparams.push(filterValue.from);\r\n\t\t\t\t\t\t\t\tif('to' in filterValue){\r\n\t\t\t\t\t\t\t\t\tparams.push(filterValue.to);\r\n\t\t\t\t\t\t\t\t\tconditions.push('(' + table + '.' + i + fromComparator + '? AND ' +\r\n\t\t\t\t\t\t\t\t\t\ttable + '.' + i + toComparator + '?)');\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tconditions.push(table + '.' + i + fromComparator + '?');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tparams.push(filterValue.to);\r\n\t\t\t\t\t\t\t\tconditions.push(table + '.' + i + toComparator + '?');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// regular value equivalence\r\n\t\t\t\t\tconditions.push(table + '.' + i + convertWildcard(filterValue));\r\n\t\t\t\t}\r\n\t\t\t\treturn conditions.join(' AND ');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(options.sort){\r\n\t\t\t\tcondition += ' ORDER BY ' +\r\n\t\t\t\toptions.sort.map(function(sort){\r\n\t\t\t\t\treturn table + '.' + sort.attribute + ' ' + (sort.descending ? 'desc' : 'asc');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tvar limitedCondition = condition;\r\n\t\t\tif(options.count){\r\n\t\t\t\tlimitedCondition += \" LIMIT \" + options.count;\r\n\t\t\t}\r\n\t\t\tif(options.start){\r\n\t\t\t\tlimitedCondition += \" OFFSET \" + options.start;\r\n\t\t\t}\r\n\t\t\tvar results = lang.delegate(this.executeSql('SELECT * ' + from + limitedCondition, params).then(function(sqlResults){\r\n\t\t\t\t// get the results back and do any conversions on it\r\n\t\t\t\tvar results = [];\r\n\t\t\t\tfor(var i = 0; i < sqlResults.rows.length; i++){\r\n\t\t\t\t\tresults.push(convertExtra(sqlResults.rows.item(i)));\r\n\t\t\t\t}\r\n\t\t\t\treturn results;\r\n\t\t\t}));\r\n\t\t\tvar store = this;\r\n\t\t\tresults.total = {\r\n\t\t\t\t\tthen: function(callback,errback){\r\n\t\t\t\t\t\t// lazily do a total, using the same query except with a COUNT(*) and without the limits\r\n\t\t\t\t\t\treturn store.executeSql('SELECT COUNT(*) ' + from + condition, params).then(function(sqlResults){\r\n\t\t\t\t\t\t\treturn sqlResults.rows.item(0)['COUNT(*)'];\r\n\t\t\t\t\t\t}).then(callback,errback);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\treturn new QueryResults(results);\r\n\t\t},\r\n\r\n\t\texecuteSql: function(sql, parameters){\r\n\t\t\t// send it off to the DB\r\n\t\t\tvar deferred = new Deferred();\r\n\t\t\tvar result, error;\r\n\t\t\tthis.database.transaction(function(transaction){\r\n\t\t\t\ttransaction.executeSql(sql, parameters, function(transaction, value){\r\n\t\t\t\t\tdeferred.resolve(result = value);\r\n\t\t\t\t}, function(transaction, e){\r\n\t\t\t\t\tdeferred.reject(error = e);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t// return synchronously if the data is already available.\r\n\t\t\tif(result){\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\tif(error){\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t\treturn deferred.promise;\r\n\t\t}\r\n\t\t\r\n\t});\r\n});\r\n"]}