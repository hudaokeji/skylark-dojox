{"version":3,"sources":["io/scriptFrame.js"],"names":["define","dojo","ioScript","iframe","deprecated","getObject","dojox","io","scriptFrame","_waiters","_loadedIds","_getWaiters","frameId","this","_fixAttachUrl","url","_loaded","waiters","i","length","ioArgs","frameDoc","doc","byId","attach","id","oldCanAttach","_canAttach","fId","args","isString","frame","push","create","_scopeName","apply","arguments"],"mappings":";;;;;;;AAAAA,QAAQ,YAAa,iBAAkB,kBAAmB,SAASC,EAAMC,EAAUC,GAClFF,EAAKG,WAAW,uBAAwB,6EAA8E,OACtHH,EAAKI,UAAU,kBAAkB,EAAMC,OAevCA,MAAMC,GAAGC,aACRC,YACAC,cAEAC,YAAa,SAAmBC,GAC/B,OAAOC,KAAKJ,SAASG,KAAaC,KAAKJ,SAASG,QAGjDE,cAAe,SAAmBC,KAKlCC,QAAS,SAAmBJ,GAI3B,IAAIK,EAAUJ,KAAKF,YAAYC,GAC/BC,KAAKH,WAAWE,IAAW,EAC3BC,KAAKJ,SAASG,GAAW,KAEzB,IAAI,IAAIM,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAAI,CACtC,IAAIE,EAASH,EAAQC,GACrBE,EAAOC,SAAWlB,EAAOmB,IAAIrB,EAAKsB,KAAKX,IACvCV,EAASsB,OAAOJ,EAAOK,GAAIL,EAAOL,IAAKK,EAAOC,aAMjD,IAAIK,EAAexB,EAASyB,WACxBnB,EAAcF,MAAMC,GAAGC,YAoC3B,OAjCAN,EAASyB,WAAa,SAAmBP,GAMxC,IAAIQ,EAAMR,EAAOS,KAAKR,SAEtB,GAAGO,GAAO3B,EAAK6B,SAASF,GAAK,CAC5B,IAAIG,EAAQ9B,EAAKsB,KAAKK,GAClBX,EAAUT,EAAYG,YAAYiB,GAiBtC,OAhBIG,EASAvB,EAAYE,WAAWkB,IACzBR,EAAOC,SAAWlB,EAAOmB,IAAIS,GAC7BlB,KAAKW,OAAOJ,EAAOK,GAAIL,EAAOL,IAAKK,EAAOC,WAE1CJ,EAAQe,KAAKZ,IARdH,EAAQe,KAAKZ,GACbjB,EAAO8B,OAAOL,EAAKtB,MAAM4B,WAAa,4BAA8BN,EAAM,SAUpE,EAEP,OAAOF,EAAaS,MAAMtB,KAAMuB,YAI3B9B,MAAMC,GAAGC","file":"../../io/scriptFrame.js","sourcesContent":["define([\"dojo/main\", \"dojo/io/script\", \"dojo/io/iframe\"], function(dojo, ioScript, iframe){\r\n\tdojo.deprecated(\"dojox.io.scriptFrame\", \"dojo.io.script now supports parallel requests without dojox.io.scriptFrame\", \"2.0\");\r\n\tdojo.getObject(\"io.scriptFrame\", true, dojox);\r\n\r\n//This module extends dojo.io.script to use an iframe for the dojo.io.script.attach calls\r\n//if the frameDoc argument is passed to dojo.io.script.get(), and if frameDoc is a string (representing\r\n//the DOM ID of an iframe that should be used for the connection. If frameDoc is not a string, then\r\n//it is probably a document object, and dojox.io.scriptFrame should not get involved with the request.\r\n//This is useful in some long-polling comet situations in Firefox and Opera. Those browsers execute scripts\r\n//in DOM order, not network-receive order, so a long-polling script will block other\r\n//dynamically appended scripts from running until it completes. By using an iframe\r\n//for the dojo.io.script requests, this issue can be avoided.\r\n\r\n//WARNING: the url argument to dojo.io.script MUST BE relative to the iframe document's location,\r\n//NOT the parent page location. This iframe document's URL will be (dojo.moduleUrl(\"dojo\", \"resources/blank.html\")\r\n//or djConfig.dojoBlankHtmlUrl (for xdomain loading).\r\n\r\n\tdojox.io.scriptFrame = {\r\n\t\t_waiters: {},\r\n\t\t_loadedIds: {},\r\n\r\n\t\t_getWaiters: function(/*String*/frameId){\r\n\t\t\treturn this._waiters[frameId] || (this._waiters[frameId] = []);\r\n\t\t},\r\n\r\n\t\t_fixAttachUrl: function(/*String*/url){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfixes the URL so that\r\n\t\t},\r\n\r\n\t\t_loaded: function(/*String*/frameId){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcallback used when waiting for a frame to load (related to the usage of\r\n\t\t\t//\t\tthe frameId argument to dojo.io.script.get().\r\n\t\t\tvar waiters = this._getWaiters(frameId);\r\n\t\t\tthis._loadedIds[frameId] = true;\r\n\t\t\tthis._waiters[frameId] = null;\r\n\r\n\t\t\tfor(var i = 0; i < waiters.length; i++){\r\n\t\t\t\tvar ioArgs = waiters[i];\r\n\t\t\t\tioArgs.frameDoc = iframe.doc(dojo.byId(frameId));\r\n\t\t\t\tioScript.attach(ioArgs.id, ioArgs.url, ioArgs.frameDoc);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t//Hold on to the old _canAttach function.\r\n\tvar oldCanAttach = ioScript._canAttach;\r\n\tvar scriptFrame = dojox.io.scriptFrame;\r\n\r\n\t//Define frame-aware _canAttach method on dojo.io.script\r\n\tioScript._canAttach = function(/*Object*/ioArgs){\r\n\t\t// summary:\r\n\t\t//\t\tprovides an override of dojo.io.script._canAttach to check for\r\n\t\t//\t\tthe existence of a the args.frameDoc property. If it is there, and it is a string,\r\n\t\t//\t\tnot a document, then create the iframe with an ID of frameDoc, and use that for the calls.\r\n\t\t//\t\tIf frameDoc is a document, then dojox.io.scriptFrame should not get involved.\r\n\t\tvar fId = ioArgs.args.frameDoc;\r\n\r\n\t\tif(fId && dojo.isString(fId)){\r\n\t\t\tvar frame = dojo.byId(fId);\r\n\t\t\tvar waiters = scriptFrame._getWaiters(fId);\r\n\t\t\tif(!frame){\r\n\t\t\t\t//Need to create frame, but the frame document, which *must* be\r\n\t\t\t\t//on the same domain as the page (set djConfig.dojoBlankHtmlUrl\r\n\t\t\t\t//if using xdomain loading). Loading of the frame document is asynchronous,\r\n\t\t\t\t//so we need to do callback stuff.\r\n\t\t\t\twaiters.push(ioArgs);\r\n\t\t\t\tiframe.create(fId, dojox._scopeName + \".io.scriptFrame._loaded('\" + fId + \"');\");\r\n\t\t\t}else{\r\n\t\t\t\t//Frame loading could still be happening. Only call attach if the frame has loaded.\r\n\t\t\t\tif(scriptFrame._loadedIds[fId]){\r\n\t\t\t\t\tioArgs.frameDoc = iframe.doc(frame);\r\n\t\t\t\t\tthis.attach(ioArgs.id, ioArgs.url, ioArgs.frameDoc);\r\n\t\t\t\t}else{\r\n\t\t\t\t\twaiters.push(ioArgs);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}else{\r\n\t\t\treturn oldCanAttach.apply(this, arguments);\r\n\t\t}\r\n\t};\r\n\r\n\treturn dojox.io.scriptFrame;\r\n});\r\n\r\n"]}