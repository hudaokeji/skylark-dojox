{"version":3,"sources":["io/proxy/xip.js"],"names":["define","dojo","iframe","dom","getObject","dojox","io","proxy","xip","xipClientUrl","config","djConfig","moduleUrl","toString","urlLimit","_callbackName","_scopeName","_state","_stateIdCounter","_isWebKit","navigator","userAgent","indexOf","send","facade","url","this","split","match","_ifpServerUrl","colonIndex","slashIndex","loc","window","location","href","substring","lastIndexOf","fullXipClientUrl","document","postMessage","addEventListener","hitch","fragmentReceivedEvent","_realSend","stateId","_stateId","frameUrl","encodeURIComponent","clientFrame","create","isSending","serverUrl","requestData","responseMessage","requestParts","idCounter","partIndex","serverWindow","receive","urlEncodedData","response","nvPairs","i","length","nameValue","decodeURIComponent","_setResponseHeaders","responseHeaders","status","parseInt","statusText","responseText","contentType","getResponseHeader","mimeType","responseXML","createDocument","readyState","destroyState","frameLoaded","reqHeaders","param","_requestHeaders","push","uri","_uri","requestHeaders","join","_method","method","_bodyData","data","sendRequest","objectToQuery","state","parentNode","removeChild","createFacade","arguments","iframeProxyUrl","XhrIframeFacade","_xhrObjOld","apply","encodedData","frames","getElementById","contentWindow","sendRequestStart","reqData","urlLength","partLength","reqIndex","part","percentIndex","sendRequestPart","partData","cmd","setServerUrl","message","makeServerUrl","replace","evt","fragmentReceived","frag","index","msg","unpackMessage","command","encodedMessage","parts","configParts","_xhrObj","ifpServerUrl","_allResponseHeaders","_responseHeaders","extend","open","setRequestHeader","header","value","stringData","abort","getAllResponseHeaders","allHeaders"],"mappings":"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","file":"../../../io/proxy/xip.js","sourcesContent":["define(['dojo/main', 'dojo/io/iframe', 'dojox/data/dom', 'dojo/_base/xhr', 'dojo/_base/url'], function(dojo, iframe, dom){\r\n\tdojo.getObject(\"io.proxy.xip\", true, dojox);\r\n\r\ndojox.io.proxy.xip = {\r\n\t// summary:\r\n\t//\t\tObject that implements the iframe handling for XMLHttpRequest\r\n\t//\t\tIFrame Proxying.\r\n\t//\r\n\t//\t\tDo not use this object directly. See the Dojo Book page\r\n\t//\t\ton XMLHttpRequest IFrame Proxying:\r\n\t//\t\thttp://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy\r\n\t//\t\tUsage of XHR IFrame Proxying does not work from local disk in Safari.\r\n\r\n\t/*\r\n\tThis code is really focused on just sending one complete request to the server, and\r\n\treceiving one complete response per iframe. The code does not expect to reuse iframes for multiple XHR request/response\r\n\tsequences. This might be reworked later if performance indicates a need for it.\r\n\t\r\n\txip fragment identifier/hash values have the form:\r\n\t#id:cmd:realEncodedMessage\r\n\r\n\tid: some ID that should be unique among message fragments. No inherent meaning,\r\n\t        just something to make sure the hash value is unique so the message\r\n\t        receiver knows a new message is available.\r\n\t        \r\n\tcmd: command to the receiver. Valid values are:\r\n\t         - init: message used to init the frame. Sent as the first URL when loading\r\n\t                 the page. Contains some config parameters.\r\n\t         - loaded: the remote frame is loaded. Only sent from xip_client.html to this module.\r\n\t         - ok: the message that this page sent was received OK. The next message may\r\n\t               now be sent.\r\n\t         - start: the start message of a block of messages (a complete message may\r\n\t                  need to be segmented into many messages to get around the limitiations\r\n\t                  of the size of an URL that a browser accepts.\r\n\t         - part: indicates this is a part of a message.\r\n\t         - end: the end message of a block of messages. The message can now be acted upon.\r\n\t                If the message is small enough that it doesn't need to be segmented, then\r\n\t                just one hash value message can be sent with \"end\" as the command.\r\n\t\r\n\tTo reassemble a segmented message, the realEncodedMessage parts just have to be concatenated\r\n\ttogether.\r\n\t*/\r\n\r\n\txipClientUrl: ((dojo.config || djConfig)[\"xipClientUrl\"]) || dojo.moduleUrl(\"dojox.io.proxy\", \"xip_client.html\").toString(),\r\n\r\n\r\n\t//MSIE has the lowest limit for URLs with fragment identifiers,\r\n\t//at around 4K. Choosing a slightly smaller number for good measure.\r\n\turlLimit: 4000,\r\n\r\n\t_callbackName: (dojox._scopeName || \"dojox\") + \".io.proxy.xip.fragmentReceived\",\r\n\t_state: {},\r\n\t_stateIdCounter: 0,\r\n\t_isWebKit: navigator.userAgent.indexOf(\"WebKit\") != -1,\r\n\r\n\r\n\tsend: function(/*Object*/facade){\r\n\t\t// summary:\r\n\t\t//\t\tstarts the xdomain request using the provided facade.\r\n\t\t//\t\tThis method first does some init work, then delegates to _realSend.\r\n\r\n\t\tvar url = this.xipClientUrl;\r\n\t\t//Make sure we are not dealing with javascript urls, just to be safe.\r\n\t\tif(url.split(\":\")[0].match(/javascript/i) || facade._ifpServerUrl.split(\":\")[0].match(/javascript/i)){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\t//Make xip_client a full URL.\r\n\t\tvar colonIndex = url.indexOf(\":\");\r\n\t\tvar slashIndex = url.indexOf(\"/\");\r\n\t\tif(colonIndex == -1 || slashIndex < colonIndex){\r\n\t\t\t//No colon or we are starting with a / before a colon, so we need to make a full URL.\r\n\t\t\tvar loc = window.location.href;\r\n\t\t\tif(slashIndex == 0){\r\n\t\t\t\t//Have a full path, just need the domain.\r\n\t\t\t\turl = loc.substring(0, loc.indexOf(\"/\", 9)) + url; //Using 9 to get past http(s)://\r\n\t\t\t}else{\r\n\t\t\t\turl = loc.substring(0, (loc.lastIndexOf(\"/\") + 1)) + url;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.fullXipClientUrl = url;\r\n\r\n\t\t//Set up an HTML5 messaging listener if postMessage exists.\r\n\t\t//As of this writing, this is only useful to get Opera 9.25+ to work.\r\n\t\tif(typeof document.postMessage != \"undefined\"){\r\n\t\t\tdocument.addEventListener(\"message\", dojo.hitch(this, this.fragmentReceivedEvent), false);\r\n\t\t}\r\n\r\n\t\t//Now that we did first time init, always use the realSend method.\r\n\t\tthis.send = this._realSend;\r\n\t\treturn this._realSend(facade); //Object\r\n\t},\r\n\r\n\t_realSend: function(facade){\r\n\t\t// summary:\r\n\t\t//\t\tstarts the actual xdomain request using the provided facade.\r\n\t\tvar stateId = \"XhrIframeProxy\" + (this._stateIdCounter++);\r\n\t\tfacade._stateId = stateId;\r\n\r\n\t\tvar frameUrl = facade._ifpServerUrl + \"#0:init:id=\" + stateId + \"&client=\"\r\n\t\t\t+ encodeURIComponent(this.fullXipClientUrl) + \"&callback=\" + encodeURIComponent(this._callbackName);\r\n\r\n\t\tthis._state[stateId] = {\r\n\t\t\tfacade: facade,\r\n\t\t\tstateId: stateId,\r\n\t\t\tclientFrame: iframe.create(stateId, \"\", frameUrl),\r\n\t\t\tisSending: false,\r\n\t\t\tserverUrl: facade._ifpServerUrl,\r\n\t\t\trequestData: null,\r\n\t\t\tresponseMessage: \"\",\r\n\t\t\trequestParts: [],\r\n\t\t\tidCounter: 1,\r\n\t\t\tpartIndex: 0,\r\n\t\t\tserverWindow: null\r\n\t\t};\r\n\r\n\t\treturn stateId; //Object\r\n\t},\r\n\r\n\treceive: function(/*String*/stateId, /*String*/urlEncodedData){\r\n\t\t/* urlEncodedData should have the following params:\r\n\t\t\t\t- responseHeaders\r\n\t\t\t\t- status\r\n\t\t\t\t- statusText\r\n\t\t\t\t- responseText\r\n\t\t*/\r\n\t\t//Decode response data.\r\n\t\tvar response = {};\r\n\t\tvar nvPairs = urlEncodedData.split(\"&\");\r\n\t\tfor(var i = 0; i < nvPairs.length; i++){\r\n\t\t\tif(nvPairs[i]){\r\n\t\t\t\tvar nameValue = nvPairs[i].split(\"=\");\r\n\t\t\t\tresponse[decodeURIComponent(nameValue[0])] = decodeURIComponent(nameValue[1]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Set data on facade object.\r\n\t\tvar state = this._state[stateId];\r\n\t\tvar facade = state.facade;\r\n\r\n\t\tfacade._setResponseHeaders(response.responseHeaders);\r\n\t\tif(response.status == 0 || response.status){\r\n\t\t\tfacade.status = parseInt(response.status, 10);\r\n\t\t}\r\n\t\tif(response.statusText){\r\n\t\t\tfacade.statusText = response.statusText;\r\n\t\t}\r\n\t\tif(response.responseText){\r\n\t\t\tfacade.responseText = response.responseText;\r\n\t\t\t\r\n\t\t\t//Fix responseXML.\r\n\t\t\tvar contentType = facade.getResponseHeader(\"Content-Type\");\r\n\t\t\tif(contentType){\r\n\t\t\t\tvar mimeType = contentType.split(\";\")[0];\r\n\t\t\t\tif(mimeType.indexOf(\"application/xml\") == 0 || mimeType.indexOf(\"text/xml\") == 0){\r\n\t\t\t\t\tfacade.responseXML = dom.createDocument(response.responseText, contentType);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfacade.readyState = 4;\r\n\t\t\r\n\t\tthis.destroyState(stateId);\r\n\t},\r\n\r\n\tframeLoaded: function(/*String*/stateId){\r\n\t\tvar state = this._state[stateId];\r\n\t\tvar facade = state.facade;\r\n\r\n\t\tvar reqHeaders = [];\r\n\t\tfor(var param in facade._requestHeaders){\r\n\t\t\treqHeaders.push(param + \": \" + facade._requestHeaders[param]);\r\n\t\t}\r\n\r\n\t\tvar requestData = {\r\n\t\t\turi: facade._uri\r\n\t\t};\r\n\t\tif(reqHeaders.length > 0){\r\n\t\t\trequestData.requestHeaders = reqHeaders.join(\"\\r\\n\");\r\n\t\t}\r\n\t\tif(facade._method){\r\n\t\t\trequestData.method = facade._method;\r\n\t\t}\r\n\t\tif(facade._bodyData){\r\n\t\t\trequestData.data = facade._bodyData;\r\n\t\t}\r\n\r\n\t\tthis.sendRequest(stateId, dojo.objectToQuery(requestData));\r\n\t},\r\n\t\r\n\tdestroyState: function(/*String*/stateId){\r\n\t\tvar state = this._state[stateId];\r\n\t\tif(state){\r\n\t\t\tdelete this._state[stateId];\r\n\t\t\tvar parentNode = state.clientFrame.parentNode;\r\n\t\t\tparentNode.removeChild(state.clientFrame);\r\n\t\t\tstate.clientFrame = null;\r\n\t\t\tstate = null;\r\n\t\t}\r\n\t},\r\n\r\n\tcreateFacade: function(){\r\n\t\tif(arguments && arguments[0] && arguments[0].iframeProxyUrl){\r\n\t\t\treturn new dojox.io.proxy.xip.XhrIframeFacade(arguments[0].iframeProxyUrl);\r\n\t\t}else{\r\n\t\t\treturn dojox.io.proxy.xip._xhrObjOld.apply(dojo, arguments);\r\n\t\t}\r\n\t},\r\n\t\r\n\t//**** State-bound methods ****\r\n\tsendRequest: function(stateId, encodedData){\r\n\t\tvar state = this._state[stateId];\r\n\t\tif(!state.isSending){\r\n\t\t\tstate.isSending = true;\r\n\r\n\t\t\tstate.requestData = encodedData || \"\";\r\n\r\n\t\t\t//Get a handle to the server iframe.\r\n\t\t\tstate.serverWindow = frames[state.stateId];\r\n\t\t\tif (!state.serverWindow){\r\n\t\t\t\tstate.serverWindow = document.getElementById(state.stateId).contentWindow;\r\n\t\t\t}\r\n\r\n\t\t\t//Make sure we have contentWindow, but only do this for non-postMessage\r\n\t\t\t//browsers (right now just opera is postMessage).\r\n\t\t\tif(typeof document.postMessage == \"undefined\"){\r\n\t\t\t\tif(state.serverWindow.contentWindow){\r\n\t\t\t\t\tstate.serverWindow = state.serverWindow.contentWindow;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.sendRequestStart(stateId);\r\n\t\t}\r\n\t},\r\n\r\n\tsendRequestStart: function(stateId){\r\n\t\t//Break the message into parts, if necessary.\r\n\t\tvar state = this._state[stateId];\r\n\t\tstate.requestParts = [];\r\n\t\tvar reqData = state.requestData;\r\n\t\tvar urlLength = state.serverUrl.length;\r\n\t\tvar partLength = this.urlLimit - urlLength;\r\n\t\tvar reqIndex = 0;\r\n\r\n\t\twhile((reqData.length - reqIndex) + urlLength > this.urlLimit){\r\n\t\t\tvar part = reqData.substring(reqIndex, reqIndex + partLength);\r\n\t\t\t//Safari will do some extra hex escaping unless we keep the original hex\r\n\t\t\t//escaping complete.\r\n\t\t\tvar percentIndex = part.lastIndexOf(\"%\");\r\n\t\t\tif(percentIndex == part.length - 1 || percentIndex == part.length - 2){\r\n\t\t\t\tpart = part.substring(0, percentIndex);\r\n\t\t\t}\r\n\t\t\tstate.requestParts.push(part);\r\n\t\t\treqIndex += part.length;\r\n\t\t}\r\n\t\tstate.requestParts.push(reqData.substring(reqIndex, reqData.length));\r\n\t\t\r\n\t\tstate.partIndex = 0;\r\n\t\tthis.sendRequestPart(stateId);\r\n\r\n\t},\r\n\t\r\n\tsendRequestPart: function(stateId){\r\n\t\tvar state = this._state[stateId];\r\n\r\n\t\tif(state.partIndex < state.requestParts.length){\r\n\t\t\t//Get the message part.\r\n\t\t\tvar partData = state.requestParts[state.partIndex];\r\n\r\n\t\t\t//Get the command.\r\n\t\t\tvar cmd = \"part\";\r\n\t\t\tif(state.partIndex + 1 == state.requestParts.length){\r\n\t\t\t\tcmd = \"end\";\r\n\t\t\t}else if (state.partIndex == 0){\r\n\t\t\t\tcmd = \"start\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.setServerUrl(stateId, cmd, partData);\r\n\t\t\tstate.partIndex++;\r\n\t\t}\r\n\t},\r\n\r\n\tsetServerUrl: function(stateId, cmd, message){\r\n\t\tvar serverUrl = this.makeServerUrl(stateId, cmd, message);\r\n\t\tvar state = this._state[stateId];\r\n\r\n\t\t//Safari won't let us replace across domains.\r\n\t\tif(this._isWebKit){\r\n\t\t\tstate.serverWindow.location = serverUrl;\r\n\t\t}else{\r\n\t\t\tstate.serverWindow.location.replace(serverUrl);\r\n\t\t}\r\n\t},\r\n\r\n\tmakeServerUrl: function(stateId, cmd, message){\r\n\t\tvar state = this._state[stateId];\r\n\t\tvar serverUrl = state.serverUrl + \"#\" + (state.idCounter++) + \":\" + cmd;\r\n\t\tif(message){\r\n\t\t\tserverUrl += \":\" + message;\r\n\t\t}\r\n\t\treturn serverUrl;\r\n\t},\r\n\r\n\tfragmentReceivedEvent: function(evt){\r\n\t\t// summary:\r\n\t\t//\t\tHTML5 document messaging endpoint. Unpack the event to see if we want to use it.\r\n\t\tif(evt.uri.split(\"#\")[0] == this.fullXipClientUrl){\r\n\t\t\tthis.fragmentReceived(evt.data);\r\n\t\t}\r\n\t},\r\n\r\n\tfragmentReceived: function(frag){\r\n\t\tvar index = frag.indexOf(\"#\");\r\n\t\tvar stateId = frag.substring(0, index);\r\n\t\tvar encodedData = frag.substring(index + 1, frag.length);\r\n\r\n\t\tvar msg = this.unpackMessage(encodedData);\r\n\t\tvar state = this._state[stateId];\r\n\r\n\t\tswitch(msg.command){\r\n\t\t\tcase \"loaded\":\r\n\t\t\t\tthis.frameLoaded(stateId);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ok\":\r\n\t\t\t\tthis.sendRequestPart(stateId);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"start\":\r\n\t\t\t\tstate.responseMessage = \"\" + msg.message;\r\n\t\t\t\tthis.setServerUrl(stateId, \"ok\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"part\":\r\n\t\t\t\tstate.responseMessage += msg.message;\r\n\t\t\t\tthis.setServerUrl(stateId, \"ok\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"end\":\r\n\t\t\t\tthis.setServerUrl(stateId, \"ok\");\r\n\t\t\t\tstate.responseMessage += msg.message;\r\n\t\t\t\tthis.receive(stateId, state.responseMessage);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\t\r\n\tunpackMessage: function(encodedMessage){\r\n\t\tvar parts = encodedMessage.split(\":\");\r\n\t\tvar command = parts[1];\r\n\t\tencodedMessage = parts[2] || \"\";\r\n\r\n\t\tvar config = null;\r\n\t\tif(command == \"init\"){\r\n\t\t\tvar configParts = encodedMessage.split(\"&\");\r\n\t\t\tconfig = {};\r\n\t\t\tfor(var i = 0; i < configParts.length; i++){\r\n\t\t\t\tvar nameValue = configParts[i].split(\"=\");\r\n\t\t\t\tconfig[decodeURIComponent(nameValue[0])] = decodeURIComponent(nameValue[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {command: command, message: encodedMessage, config: config};\r\n\t}\r\n}\r\n\r\n//Replace the normal XHR factory with the proxy one.\r\ndojox.io.proxy.xip._xhrObjOld = dojo._xhrObj;\r\ndojo._xhrObj = dojox.io.proxy.xip.createFacade;\r\n\r\n/**\r\n\tUsing this a reference: http://www.w3.org/TR/XMLHttpRequest/\r\n\r\n\tDoes not implement the onreadystate callback since dojo.xhr* does\r\n\tnot use it.\r\n*/\r\ndojox.io.proxy.xip.XhrIframeFacade = function(ifpServerUrl){\r\n\t// summary:\r\n\t//\t\tXMLHttpRequest facade object used by dojox.io.proxy.xip.\r\n\t//\r\n\t//\t\tDo not use this object directly. See the Dojo Book page\r\n\t//\t\ton XMLHttpRequest IFrame Proxying:\r\n\t//\t\thttp://dojotoolkit.org/book/dojo-book-0-4/part-5-connecting-pieces/i-o/cross-domain-xmlhttprequest-using-iframe-proxy\r\n\tthis._requestHeaders = {};\r\n\tthis._allResponseHeaders = null;\r\n\tthis._responseHeaders = {};\r\n\tthis._method = null;\r\n\tthis._uri = null;\r\n\tthis._bodyData = null;\r\n\tthis.responseText = null;\r\n\tthis.responseXML = null;\r\n\tthis.status = null;\r\n\tthis.statusText = null;\r\n\tthis.readyState = 0;\r\n\t\r\n\tthis._ifpServerUrl = ifpServerUrl;\r\n\tthis._stateId = null;\r\n}\r\n\r\ndojo.extend(dojox.io.proxy.xip.XhrIframeFacade, {\r\n\t//The open method does not properly reset since Dojo does not reuse XHR objects.\r\n\topen: function(/*String*/method, /*String*/uri){\r\n\t\tthis._method = method;\r\n\t\tthis._uri = uri;\r\n\r\n\t\tthis.readyState = 1;\r\n\t},\r\n\t\r\n\tsetRequestHeader: function(/*String*/header, /*String*/value){\r\n\t\tthis._requestHeaders[header] = value;\r\n\t},\r\n\t\r\n\tsend: function(/*String*/stringData){\r\n\t\tthis._bodyData = stringData;\r\n\t\t\r\n\t\tthis._stateId = dojox.io.proxy.xip.send(this);\r\n\t\t\r\n\t\tthis.readyState = 2;\r\n\t},\r\n\tabort: function(){\r\n\t\tdojox.io.proxy.xip.destroyState(this._stateId);\r\n\t},\r\n\t\r\n\tgetAllResponseHeaders: function(){\r\n\t\treturn this._allResponseHeaders; //String\r\n\t},\r\n\t\r\n\tgetResponseHeader: function(/*String*/header){\r\n\t\treturn this._responseHeaders[header]; //String\r\n\t},\r\n\t\r\n\t_setResponseHeaders: function(/*String*/allHeaders){\r\n\t\tif(allHeaders){\r\n\t\t\tthis._allResponseHeaders = allHeaders;\r\n\t\t\t\r\n\t\t\t//Make sure ther are now CR characters in the headers.\r\n\t\t\tallHeaders = allHeaders.replace(/\\r/g, \"\");\r\n\t\t\tvar nvPairs = allHeaders.split(\"\\n\");\r\n\t\t\tfor(var i = 0; i < nvPairs.length; i++){\r\n\t\t\t\tif(nvPairs[i]){\r\n\t\t\t\t\tvar nameValue = nvPairs[i].split(\": \");\r\n\t\t\t\t\tthis._responseHeaders[nameValue[0]] = nameValue[1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n\r\nreturn dojox.io.proxy.xip;\r\n\r\n});\r\n"]}