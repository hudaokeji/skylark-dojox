{"version":3,"sources":["io/xhrMultiPart.js"],"names":["define","dojo","array","xhr","query","generateRandomUuid","_createPart","args","boundary","Error","tmp","push","name","filename","ct","contentType","charset","contentTransferEncoding","content","getObject","dojox","io","xhrMultiPart","out","v","forEach","isArray","item","concat","length","node","o","formToObject","parts","p","_partsFromNode","join","console","log","rawXhrPost","mixin","postData"],"mappings":";;;;;;;AAAAA,QACC,oBACA,mBACA,iBACC,aACD,iCACE,SAASC,EAAMC,EAAOC,EAAKC,EAAOC,GAoBpC,SAASC,EAAiCC,EAAkBC,GAG3D,IAAID,EAAW,OAAMA,EAAc,QAClC,MAAM,IAAIE,MAAM,oEAGjB,IAAIC,KAMJ,GALAA,EAAIC,KACH,KAAOH,EACN,yCAA4CD,EAAKK,KAAO,KAAQL,EAAe,SAAI,eAAkBA,EAAKM,SAAW,IAAO,KAG3HN,EAAkB,YAAE,CACtB,IAAIO,EAAK,iBAAmBP,EAAKQ,YAC9BR,EAAc,UAChBO,GAAM,aAAeP,EAAKS,SAE3BN,EAAIC,KAAKG,GAOV,OAJGP,EAA8B,yBAChCG,EAAIC,KAAK,8BAAgCJ,EAAKU,yBAE/CP,EAAIC,KAAK,GAAIJ,EAAKW,SACXR,EA2FR,OAvIAT,EAAKkB,UAAU,mBAAmB,EAAMC,OAsGxCA,MAAMC,GAAGC,aAAe,SAA6Bf,GACpD,IAAIA,EAAW,OAAMA,EAAc,UAAMA,EAAW,KACnD,MAAM,IAAIE,MAAM,+EAIjB,IAAID,EAASH,IAAsBK,KAAQa,EAAI,GAC/C,GAAGhB,EAAW,MAAKA,EAAc,QAAE,CAClC,IAAIiB,EAAIjB,EAAW,MAAKA,EAAc,QACtCN,EAAKwB,QAASxB,EAAKyB,QAAQF,GAAKA,GAAKA,GAAK,SAASG,GAClDjB,EAAMA,EAAIkB,OAAOtB,EAAYqB,EAAMnB,WAGhC,GAAGD,EAAW,KAAE,CACpB,GAAGH,EAAM,mBAAoBG,EAAW,MAAGsB,OAC1C,MAAM,IAAIpB,MAAM,sHAEjBC,EAxEF,SAAqCoB,EAAkBtB,GAGtD,IAAIuB,EAAE9B,EAAK+B,aAAaF,GAAOG,KAC/B,IAAI,IAAIC,KAAKH,EACT9B,EAAKyB,QAAQK,EAAEG,IACjBjC,EAAKwB,QAAQM,EAAEG,GAAI,SAASP,GAC3BM,EAAQA,EAAML,OAAOtB,GAAcM,KAAMsB,EAAGhB,QAASS,GAAQnB,MAG9DyB,EAAQA,EAAML,OAAOtB,GAAcM,KAAMsB,EAAGhB,QAASa,EAAEG,IAAM1B,IAG/D,OAAOyB,EA2DAE,CAAe5B,EAAW,KAAGC,GAUpC,OAPGE,EAAImB,SACNnB,EAAIC,KAAK,KAAKH,EAAS,KAAM,IAC7Be,EAAMb,EAAI0B,KAAK,SAGhBC,QAAQC,IAAIf,GAELtB,EAAKsC,WAAWtC,EAAKuC,MAAMjC,GACjCQ,YAAa,iCAAmCP,EAChDiC,SAAUlB,MAILH,MAAMC,GAAGC","file":"../../io/xhrMultiPart.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/xhr\",\r\n\t \"dojo/query\",\r\n\t\"dojox/uuid/generateRandomUuid\"\r\n], function(dojo, array, xhr, query, generateRandomUuid){\r\n\tdojo.getObject(\"io.xhrMultiPart\", true, dojox);\r\n\r\n\t/*=====\r\n\tvar __xhrContentArgs = {\r\n\t\t// name: String\r\n\t\t//\t\tName of the form value.\r\n\t\t// content: String\r\n\t\t//\t\tThe contents of the value.\r\n\t\t// filename: String?\r\n\t\t//\t\tAn optional filename to pass to the server, as defined by the boundary.\r\n\t\t// contentType: String?\r\n\t\t//\t\tAn optional content-type (MIME) to pass to the server, if value is being\r\n\t\t//\t\ttreated as a file.\r\n\t\t// charset: String?\r\n\t\t//\t\tOptional charset to pass, for the server to interpret the file correctly.\r\n\t\t// contentTransferEncoding: String?\r\n\t\t//\t\tOptional transfer encoding header value.\r\n\t};\r\n\t=====*/\r\n\tfunction _createPart(/*__xhrContentArgs */args, /* String */boundary){\r\n\t\t// summary:\r\n\t\t//\t\tAssemble an array of boundary parts based on the passed values in args.\r\n\t\tif(!args[\"name\"] && !args[\"content\"]){\r\n\t\t\tthrow new Error(\"Each part of a multi-part request requires 'name' and 'content'.\");\r\n\t\t}\r\n\r\n\t\tvar tmp = [];\r\n\t\ttmp.push(\r\n\t\t\t\"--\" + boundary,\r\n\t\t\t \"Content-Disposition: form-data; name=\\\"\" + args.name + \"\\\"\" + (args[\"filename\"] ? \"; filename=\\\"\" + args.filename + \"\\\"\" : \"\")\r\n\t\t);\r\n\r\n\t\tif(args[\"contentType\"]){\r\n\t\t\tvar ct = \"Content-Type: \" + args.contentType;\r\n\t\t\tif(args[\"charset\"]){\r\n\t\t\t\tct += \"; Charset=\" + args.charset;\r\n\t\t\t}\r\n\t\t\ttmp.push(ct);\r\n\t\t}\r\n\r\n\t\tif(args[\"contentTransferEncoding\"]){\r\n\t\t\ttmp.push(\"Content-Transfer-Encoding: \" + args.contentTransferEncoding);\r\n\t\t}\r\n\t\ttmp.push(\"\", args.content);\r\n\t\treturn tmp;\t\t//\tArray\r\n\t}\r\n\r\n\tfunction _partsFromNode(/* DOMNode */node, /* String */boundary){\r\n\t\t// summary:\r\n\t\t//\t\tAssemble an array of boundary parts based on the passed FORM node.\r\n\t\tvar o=dojo.formToObject(node), parts=[];\r\n\t\tfor(var p in o){\r\n\t\t\tif(dojo.isArray(o[p])){\r\n\t\t\t\tdojo.forEach(o[p], function(item){\r\n\t\t\t\t\tparts = parts.concat(_createPart({ name: p, content: item }, boundary));\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tparts = parts.concat(_createPart({ name: p, content: o[p] }, boundary));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn parts;\t//\tArray\r\n\t}\r\n\r\n\t/*=====\r\n\tvar __xhrMultiArgs = {\r\n\t\t// url: String\r\n\t\t//\t\tURL to server endpoint.\r\n\t\t// content: Object?\r\n\t\t//\t\tContains properties with string values. These\r\n\t\t//\t\tproperties will be serialized using multi-part\r\n\t\t//\t\tboundaries.\r\n\t\t// file: Object?\r\n\t\t//\t\tAlias for \"content\".  Provided for backwards compatibility.\r\n\t\t// timeout: Integer?\r\n\t\t//\t\tMilliseconds to wait for the response. If this time\r\n\t\t//\t\tpasses, the then error callbacks are called.\r\n\t\t// form: DOMNode?\r\n\t\t//\t\tDOM node for a form. Used to extract the form values\r\n\t\t//\t\tand send to the server; each form value will be serialized\r\n\t\t//\t\tusing multi-part boundaries.\r\n\t\t// preventCache: Boolean?\r\n\t\t//\t\tDefault is false. If true, then a\r\n\t\t//\t\t\"dojo.preventCache\" parameter is sent in the request\r\n\t\t//\t\twith a value that changes with each request\r\n\t\t//\t\t(timestamp). Useful only with GET-type requests.\r\n\t\t// handleAs: String?\r\n\t\t//\t\tAcceptable values depend on the type of IO\r\n\t\t//\t\ttransport (see specific IO calls for more information).\r\n\t\t// load: Function?\r\n\t\t//\t\tfunction(response, ioArgs){}. response is an Object, ioArgs\r\n\t\t//\t\tis of type dojo.__IoCallbackArgs. The load function will be\r\n\t\t//\t\tcalled on a successful response.\r\n\t\t// error: Function?\r\n\t\t//\t\tfunction(response, ioArgs){}. response is an Object, ioArgs\r\n\t\t//\t\tis of type dojo.__IoCallbackArgs. The error function will\r\n\t\t//\t\tbe called in an error case.\r\n\t\t// handle: Function?\r\n\t\t//\t\tfunction(response, ioArgs){}. response is an Object, ioArgs\r\n\t\t//\t\tis of type dojo.__IoCallbackArgs. The handle function will\r\n\t\t//\t\tbe called in either the successful or error case.\r\n\t};\r\n\t=====*/\r\n\tdojox.io.xhrMultiPart = function(/* __xhrMultiArgs */args){\r\n\t\tif(!args[\"file\"] && !args[\"content\"] && !args[\"form\"]){\r\n\t\t\tthrow new Error(\"content, file or form must be provided to dojox.io.xhrMultiPart's arguments\");\r\n\t\t}\r\n\r\n\t\t// unique guid as a boundary value for multipart posts\r\n\t\tvar boundary=generateRandomUuid(), tmp=[], out=\"\";\r\n\t\tif(args[\"file\"] || args[\"content\"]){\r\n\t\t\tvar v = args[\"file\"] || args[\"content\"];\r\n\t\t\tdojo.forEach((dojo.isArray(v) ? v : [v]), function(item){\r\n\t\t\t\ttmp = tmp.concat(_createPart(item, boundary));\r\n\t\t\t});\r\n\t\t}\r\n\t\telse if(args[\"form\"]){\r\n\t\t\tif(query(\"input[type=file]\", args[\"form\"]).length){\r\n\t\t\t\tthrow new Error(\"dojox.io.xhrMultiPart cannot post files that are values of an INPUT TYPE=FILE.  Use dojo.io.iframe.send() instead.\");\r\n\t\t\t}\r\n\t\t\ttmp = _partsFromNode(args[\"form\"], boundary);\r\n\t\t}\r\n\r\n\t\tif(tmp.length){\r\n\t\t\ttmp.push(\"--\"+boundary+\"--\", \"\");\r\n\t\t\tout = tmp.join(\"\\r\\n\");\r\n\t\t}\r\n\r\n\t\tconsole.log(out);\r\n\r\n\t\treturn dojo.rawXhrPost(dojo.mixin(args, {\r\n\t\t\tcontentType: \"multipart/form-data; boundary=\" + boundary,\r\n\t\t\tpostData: out\r\n\t\t}));\t//\tdojo.Deferred\r\n\t};\r\n\r\n\treturn dojox.io.xhrMultiPart;\r\n});\r\n"]}