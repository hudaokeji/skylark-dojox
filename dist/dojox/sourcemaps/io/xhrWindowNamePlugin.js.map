{"version":3,"sources":["io/xhrWindowNamePlugin.js"],"names":["define","dojo","json","xhr","xhrPlugins","windowName","httpParse","capability","getObject","dojox","io","xhrWindowNamePlugin","url","httpAdapter","trusted","register","method","args","sync","substring","length","hasBody","send","load","undefined","dfd","addCallback","result","ioArgs","getResponseHeader","name","queryToObject","hash","match","handleAs","validate","fromJson","_contentHandlers","responseText"],"mappings":";;;;;;;AAAAA,QACC,oBACA,kBACA,iBACA,sBACA,sBACA,qBACA,2BACE,SAASC,EAAMC,EAAMC,EAAKC,EAAYC,EAAYC,EAAWC,GAmDhE,OAlDAN,EAAKO,UAAU,0BAA0B,EAAMC,OAE/CA,MAAMC,GAAGC,oBAAsB,SAAmBC,EAAkBC,EAAyBC,GAS5FV,EAAWW,SACV,aACA,SAASC,EAAOC,GACd,OAAqB,IAAdA,EAAKC,OACD,OAAVF,GAA6B,QAAVA,GAAoBH,IACvCI,EAAKL,IAAIO,UAAU,EAAEP,EAAIQ,SAAWR,GAEvC,SAASI,EAAOC,EAAKI,GACpB,IAAIC,EAAOjB,EAAWiB,KAClBC,EAAON,EAAKM,KAChBN,EAAKM,UAAOC,EACZ,IAAIC,GAAOZ,EAAcA,EAAYS,GAAM,GAAQA,GAAMN,EAAQC,EAAMI,GAuBvE,OAtBAI,EAAIC,YAAY,SAASC,GACxB,IAAIC,EAASH,EAAIG,OAQjB,OAPAA,EAAOzB,KACN0B,kBAAmB,SAASC,GAE3B,OAAO7B,EAAK8B,cAAcH,EAAOI,KAAKC,MAAM,UAAU,IAAIH,KAItC,QAAnBF,EAAOM,UAELpB,GACHP,EAAW4B,SAASR,GAAQ,YAEtB1B,EAAKmC,SAAST,IAEf1B,EAAKoC,iBAAiBT,EAAOM,UAAY,SAASI,aAAaX,MAEvEV,EAAKM,KAAOA,EACTA,GACDE,EAAIC,YAAYH,GAEXE,KAKHhB,MAAMC,GAAGC","file":"../../io/xhrWindowNamePlugin.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/json\",\r\n\t\"dojo/_base/xhr\",\r\n\t\"dojox/io/xhrPlugins\",\r\n\t\"dojox/io/windowName\",\r\n\t\"dojox/io/httpParse\",\r\n\t\"dojox/secure/capability\"\r\n], function(dojo, json, xhr, xhrPlugins, windowName, httpParse, capability){\r\ndojo.getObject(\"io.xhrWindowNamePlugin\", true, dojox);\r\n\r\ndojox.io.xhrWindowNamePlugin = function(/*String*/url, /*Function?*/httpAdapter, /*Boolean?*/trusted){\r\n\t// summary:\r\n\t//\t\tAdds the windowName transport as an XHR plugin for the given site. See\r\n\t//\t\tdojox.io.windowName for more information on the transport.\r\n\t// url:\r\n\t//\t\tUrl prefix of the site which can handle windowName requests.\r\n\t// httpAdapter:\r\n\t//\t\tThis allows for adapting HTTP requests that could not otherwise be\r\n\t//\t\tsent with window.name, so you can use a convention for headers and PUT/DELETE methods.\r\n\txhrPlugins.register(\r\n\t\t\"windowName\",\r\n\t\tfunction(method,args){\r\n\t\t\t return args.sync !== true &&\r\n\t\t\t\t(method == \"GET\" || method == \"POST\" || httpAdapter) &&\r\n\t\t\t\t(args.url.substring(0,url.length) == url);\r\n\t\t},\r\n\t\tfunction(method,args,hasBody){\r\n\t\t\tvar send = windowName.send;\r\n\t\t\tvar load = args.load;\r\n\t\t\targs.load = undefined; //we don't want send to set this callback\r\n\t\t\tvar dfd = (httpAdapter ? httpAdapter(send, true) : send)(method, args, hasBody); // use the windowName transport\r\n\t\t\tdfd.addCallback(function(result){\r\n\t\t\t\tvar ioArgs = dfd.ioArgs;\r\n\t\t\t\tioArgs.xhr = {\r\n\t\t\t\t\tgetResponseHeader: function(name){\r\n\t\t\t\t\t\t// convert the hash to an object to act like response headers\r\n\t\t\t\t\t\treturn dojo.queryToObject(ioArgs.hash.match(/[^#]*$/)[0])[name];\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t// use the XHR content handlers for handling\r\n\t\t\t\tif(ioArgs.handleAs == 'json'){\r\n\t\t\t\t\t// use a secure json verifier, using object capability validator for now\r\n\t\t\t\t\tif(!trusted){\r\n\t\t\t\t\t\tcapability.validate(result,[\"Date\"],{});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn dojo.fromJson(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn dojo._contentHandlers[ioArgs.handleAs || \"text\"]({responseText:result});\r\n\t\t\t});\r\n\t\t\targs.load = load;\r\n\t\t\tif(load){\r\n \t\t\t\tdfd.addCallback(load);\r\n \t\t\t}\r\n\t\t\treturn dfd;\r\n\t\t}\r\n\t);\r\n};\r\n\r\nreturn dojox.io.xhrWindowNamePlugin;\r\n});\r\n"]}