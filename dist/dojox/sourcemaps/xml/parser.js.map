{"version":3,"sources":["xml/parser.js"],"names":["define","dojo","getObject","dojox","xml","parser","parse","str","mimetype","doc","_document","trim","global","DOMParser","de","parseFromString","documentElement","errorNS","nodeName","namespaceURI","sourceText","getElementsByTagNameNS","firstChild","data","Error","ms","n","dp","some","p","ActiveXObject","e","async","loadXML","pe","parseError","errorCode","line","linepos","reason","srcText","implementation","createDocument","createElement","tmp","innerHTML","xmlDoc","forEach","childNodes","child","importNode","textContent","node","text","arguments","length","ownerDocument","replaceChildren","createTextNode","undefined","_result","nodeType","nodeValue","newChildren","nodes","isIE","push","removeChildren","destroy","isArray","appendChild","count","hasChildNodes","removeChild","innerXML","XMLSerializer","serializeToString"],"mappings":"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","file":"../../xml/parser.js","sourcesContent":["define(['dojo/_base/kernel', 'dojo/_base/lang', 'dojo/_base/array', 'dojo/_base/window', 'dojo/_base/sniff'], function(dojo){\r\n\r\ndojo.getObject(\"xml.parser\", true, dojox);\r\n\r\n//DOM type to int value for reference.\r\n//Ints make for more compact code than full constant names.\r\n//ELEMENT_NODE                  = 1;\r\n//ATTRIBUTE_NODE                = 2;\r\n//TEXT_NODE                     = 3;\r\n//CDATA_SECTION_NODE            = 4;\r\n//ENTITY_REFERENCE_NODE         = 5;\r\n//ENTITY_NODE                   = 6;\r\n//PROCESSING_INSTRUCTION_NODE   = 7;\r\n//COMMENT_NODE                  = 8;\r\n//DOCUMENT_NODE                 = 9;\r\n//DOCUMENT_TYPE_NODE            = 10;\r\n//DOCUMENT_FRAGMENT_NODE        = 11;\r\n//NOTATION_NODE                 = 12;\r\n\r\ndojox.xml.parser.parse = function(/*String?*/ str, /*String?*/ mimetype){\r\n\t// summary:\r\n\t//\t\tcross-browser implementation of creating an XML document object from null, empty string, and XML text..\r\n\t//\r\n\t// str:\r\n\t//\t\tOptional text to create the document from.  If not provided, an empty XML document will be created.\r\n\t//\t\tIf str is empty string \"\", then a new empty document will be created.\r\n\t// mimetype:\r\n\t//\t\tOptional mimetype of the text.  Typically, this is text/xml.  Will be defaulted to text/xml if not provided.\r\n\tvar _document = dojo.doc;\r\n\tvar doc;\r\n\r\n\tmimetype = mimetype || \"text/xml\";\r\n\tif(str && dojo.trim(str) && \"DOMParser\" in dojo.global){\r\n\t\t//Handle parsing the text on Mozilla based browsers etc..\r\n\t\tvar parser = new DOMParser();\r\n\t\tdoc = parser.parseFromString(str, mimetype);\r\n\t\tvar de = doc.documentElement;\r\n\t\tvar errorNS = \"http://www.mozilla.org/newlayout/xml/parsererror.xml\";\r\n\t\tif(de.nodeName == \"parsererror\" && de.namespaceURI == errorNS){\r\n\t\t\tvar sourceText = de.getElementsByTagNameNS(errorNS, 'sourcetext')[0];\r\n\t\t\tif(sourceText){\r\n\t\t\t\tsourceText = sourceText.firstChild.data;\r\n\t\t\t}\r\n        \tthrow new Error(\"Error parsing text \" + de.firstChild.data + \" \\n\" + sourceText);\r\n\t\t}\r\n\t\treturn doc;\r\n\r\n\t}else if(\"ActiveXObject\" in dojo.global){\r\n\t\t//Handle IE.\r\n\t\tvar ms = function(n){ return \"MSXML\" + n + \".DOMDocument\"; };\r\n\t\tvar dp = [\"Microsoft.XMLDOM\", ms(6), ms(4), ms(3), ms(2)];\r\n\t\tdojo.some(dp, function(p){\r\n\t\t\ttry{\r\n\t\t\t\tdoc = new ActiveXObject(p);\r\n\t\t\t}catch(e){ return false; }\r\n\t\t\treturn true;\r\n\t\t});\r\n\t\tif(str && doc){\r\n\t\t\tdoc.async = false;\r\n\t\t\tdoc.loadXML(str);\r\n\t\t\tvar pe = doc.parseError;\r\n\t\t\tif(pe.errorCode !== 0){\r\n\t\t\t\tthrow new Error(\"Line: \" + pe.line + \"\\n\" +\r\n\t\t\t\t\t\"Col: \" + pe.linepos + \"\\n\" +\r\n\t\t\t\t\t\"Reason: \" + pe.reason + \"\\n\" +\r\n\t\t\t\t\t\"Error Code: \" + pe.errorCode + \"\\n\" +\r\n\t\t\t\t\t\"Source: \" + pe.srcText);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(doc){\r\n\t\t\treturn doc; //DOMDocument\r\n\t\t}\r\n\t}else if(_document.implementation && _document.implementation.createDocument){\r\n\t\tif(str && dojo.trim(str) && _document.createElement){\r\n\t\t\t//Everyone else that we couldn't get to work.  Fallback case.\r\n\t\t\t// FIXME: this may change all tags to uppercase!\r\n\t\t\tvar tmp = _document.createElement(\"xml\");\r\n\t\t\ttmp.innerHTML = str;\r\n\t\t\tvar xmlDoc = _document.implementation.createDocument(\"foo\", \"\", null);\r\n\t\t\tdojo.forEach(tmp.childNodes, function(child){\r\n\t\t\t\txmlDoc.importNode(child, true);\r\n\t\t\t});\r\n\t\t\treturn xmlDoc;\t//\tDOMDocument\r\n\t\t}else{\r\n\t\t\treturn _document.implementation.createDocument(\"\", \"\", null); // DOMDocument\r\n\t\t}\r\n\t}\r\n\treturn null;\t//\tnull\r\n};\r\n\r\ndojox.xml.parser.textContent = function(/*Node*/node, /*String?*/text){\r\n\t// summary:\r\n\t//\t\tImplementation of the DOM Level 3 attribute; scan node for text\r\n\t// description:\r\n\t//\t\tImplementation of the DOM Level 3 attribute; scan node for text\r\n\t//\t\tThis function can also update the text of a node by replacing all child\r\n\t//\t\tcontent of the node.\r\n\t// node:\r\n\t//\t\tThe node to get the text off of or set the text on.\r\n\t// text:\r\n\t//\t\tOptional argument of the text to apply to the node.\r\n\tif(arguments.length>1){\r\n\t\tvar _document = node.ownerDocument || dojo.doc;  //Preference is to get the node owning doc first or it may fail\r\n\t\tdojox.xml.parser.replaceChildren(node, _document.createTextNode(text));\r\n\t\treturn text;\t//\tString\r\n\t}else{\r\n\t\tif(node.textContent !== undefined){ //FF 1.5 -- remove?\r\n\t\t\treturn node.textContent;\t//\tString\r\n\t\t}\r\n\t\tvar _result = \"\";\r\n\t\tif(node){\r\n\t\t\tdojo.forEach(node.childNodes, function(child){\r\n\t\t\t\tswitch(child.nodeType){\r\n\t\t\t\t\tcase 1: // ELEMENT_NODE\r\n\t\t\t\t\tcase 5: // ENTITY_REFERENCE_NODE\r\n\t\t\t\t\t\t_result += dojox.xml.parser.textContent(child);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 3: // TEXT_NODE\r\n\t\t\t\t\tcase 2: // ATTRIBUTE_NODE\r\n\t\t\t\t\tcase 4: // CDATA_SECTION_NODE\r\n\t\t\t\t\t\t_result += child.nodeValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _result;\t//\tString\r\n\t}\r\n};\r\n\r\ndojox.xml.parser.replaceChildren = function(/*Element*/node, /*Node|Array*/ newChildren){\r\n\t// summary:\r\n\t//\t\tRemoves all children of node and appends newChild. All the existing\r\n\t//\t\tchildren will be destroyed.\r\n\t// description:\r\n\t//\t\tRemoves all children of node and appends newChild. All the existing\r\n\t//\t\tchildren will be destroyed.\r\n\t// node:\r\n\t//\t\tThe node to modify the children on\r\n\t// newChildren:\r\n\t//\t\tThe children to add to the node.  It can either be a single Node or an\r\n\t//\t\tarray of Nodes.\r\n\tvar nodes = [];\r\n\r\n\tif(dojo.isIE){\r\n\t\tdojo.forEach(node.childNodes, function(child){\r\n\t\t\tnodes.push(child);\r\n\t\t});\r\n\t}\r\n\r\n\tdojox.xml.parser.removeChildren(node);\r\n\tdojo.forEach(nodes, dojo.destroy);\r\n\r\n\tif(!dojo.isArray(newChildren)){\r\n\t\tnode.appendChild(newChildren);\r\n\t}else{\r\n\t\tdojo.forEach(newChildren, function(child){\r\n\t\t\tnode.appendChild(child);\r\n\t\t});\r\n\t}\r\n};\r\n\r\ndojox.xml.parser.removeChildren = function(/*Element*/node){\r\n\t// summary:\r\n\t//\t\tremoves all children from node and returns the count of children removed.\r\n\t//\t\tThe children nodes are not destroyed. Be sure to call dojo.destroy on them\r\n\t//\t\tafter they are not used anymore.\r\n\t// node:\r\n\t//\t\tThe node to remove all the children from.\r\n\tvar count = node.childNodes.length;\r\n\twhile(node.hasChildNodes()){\r\n\t\tnode.removeChild(node.firstChild);\r\n\t}\r\n\treturn count; // int\r\n};\r\n\r\n\r\ndojox.xml.parser.innerXML = function(/*Node*/node){\r\n\t// summary:\r\n\t//\t\tImplementation of MS's innerXML function.\r\n\t// node:\r\n\t//\t\tThe node from which to generate the XML text representation.\r\n\tif(node.innerXML){\r\n\t\treturn node.innerXML;\t//\tString\r\n\t}else if(node.xml){\r\n\t\treturn node.xml;\t\t//\tString\r\n\t}else if(typeof XMLSerializer != \"undefined\"){\r\n\t\treturn (new XMLSerializer()).serializeToString(node);\t//\tString\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nreturn dojox.xml.parser;\r\n\r\n});\r\n"]}