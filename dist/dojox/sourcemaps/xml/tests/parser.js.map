{"version":3,"sources":["xml/tests/parser.js"],"names":["define","doh","html","dxparser","register","t","document","parse","assertTrue","parent","firstChild","tagName","childNodes","length","secondChild","nextSibling","grandChild","text","topNode","textContent","destroy","text2","doc1","doc2","topNode1","topNode2","removeChildren","newChildren","i","push","replaceChildren","assertEqual","lastChild","simpleXml1","innerXml","innerXML"],"mappings":"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","file":"../../../xml/tests/parser.js","sourcesContent":["define(['doh', 'dojo/_base/html', '../parser'], function(doh, html, dxparser){\r\n\r\ndoh.register(\"dojox.xml.tests.parser\",\r\n\t[\r\n\t\tfunction testParse(t){\r\n\t\t\tvar document = dxparser.parse();\r\n\t\t\tt.assertTrue(document !== null);\r\n\t\t},\r\n\t\tfunction testParseFromText(t){\r\n\t\t\tvar simpleXml = \"<parentNode><childNode><grandchildNode/></childNode><childNode/></parentNode>\";\r\n\t\t\tvar document = dxparser.parse(simpleXml, \"text/xml\");\r\n\t\t\t\r\n\t\t\tvar parent = document.firstChild;\r\n\t\t\tt.assertTrue(parent !== null);\r\n\t\t\tt.assertTrue(parent.tagName === \"parentNode\");\r\n\t\t\tt.assertTrue(parent.childNodes.length == 2);\r\n\t\t\t\r\n\t\t\tvar firstChild = parent.firstChild;\r\n\t\t\tt.assertTrue(firstChild !== null);\r\n\t\t\tt.assertTrue(firstChild.tagName === \"childNode\");\r\n\t\t\tt.assertTrue(firstChild.childNodes.length == 1);\r\n\t\t\t\r\n\t\t\tvar secondChild = firstChild.nextSibling;\r\n\t\t\tt.assertTrue(secondChild !== null);\r\n\t\t\tt.assertTrue(secondChild.tagName === \"childNode\");\r\n\r\n\t\t\tvar grandChild = firstChild.firstChild;\r\n\t\t\tt.assertTrue(grandChild !== null);\r\n\t\t\tt.assertTrue(grandChild.tagName === \"grandchildNode\");\r\n\r\n\t\t},\r\n\t\tfunction testParseEmptyString(t){\r\n\t\t\tvar simpleXml = \"\";\r\n\t\t\tvar document = dxparser.parse(simpleXml, \"text/xml\");\r\n\t\t\t\r\n\t\t\tt.assertTrue(typeof document != \"undefined\");\r\n\r\n\t\t\tvar parent = document.firstChild;\r\n\t\t\tt.assertTrue(parent === null);\r\n\t\t},\r\n\t\tfunction testParseEmpty(t){\r\n\t\t\tvar simpleXml;\r\n\t\t\tvar document = dxparser.parse();\r\n\t\t\t\r\n\t\t\tt.assertTrue(typeof document != \"undefined\");\r\n\r\n\t\t\tvar parent = document.firstChild;\r\n\t\t\tt.assertTrue(parent === null);\r\n\t\t},\r\n\t\tfunction testReadTextContent(t){\r\n\t\t\tvar text = \"This is a bunch of child text on the node\";\r\n\t\t\tvar simpleXml = \"<parentNode>\" + text + \"</parentNode>\";\r\n\t\t\tvar document = dxparser.parse(simpleXml, \"text/xml\");\r\n            \r\n\t\t\tvar topNode = document.firstChild;\r\n\t\t\tt.assertTrue(topNode !== null);\r\n\t\t\tt.assertTrue(topNode.tagName === \"parentNode\");\r\n\t\t\tt.assertTrue(text === dxparser.textContent(topNode));\r\n\t\t\thtml.destroy(topNode);\r\n\t\t\tt.assertTrue(document.firstChild === null);\r\n\t\t},\r\n\t\tfunction testSetTextContent(t){\r\n\t\t\tvar text = \"This is a bunch of child text on the node\";\r\n\t\t\tvar text2 = \"This is the new text\";\r\n\t\t\tvar simpleXml = \"<parentNode>\" + text + \"</parentNode>\";\r\n\t\t\tvar document = dxparser.parse(simpleXml, \"text/xml\");\r\n            \r\n\t\t\tvar topNode = document.firstChild;\r\n\t\t\tt.assertTrue(topNode !== null);\r\n\t\t\tt.assertTrue(topNode.tagName === \"parentNode\");\r\n\t\t\tt.assertTrue(text === dxparser.textContent(topNode));\r\n\t\t\tdxparser.textContent(topNode, text2);\r\n\t\t\tt.assertTrue(text2 === dxparser.textContent(topNode));\r\n\t\t\thtml.destroy(topNode);\r\n\t\t\tt.assertTrue(document.firstChild === null);\r\n\r\n\t\t},\r\n\t\tfunction testReplaceChildrenArray(t){\r\n\t\t\tvar simpleXml1 = \"<parentNode><child1/><child2/><child3/></parentNode>\";\r\n\t\t\tvar simpleXml2 = \"<parentNode><child4/><child5/><child6/><child7/></parentNode>\";\r\n\t\t\tvar doc1 = dxparser.parse(simpleXml1, \"text/xml\");\r\n\t\t\tvar doc2 = dxparser.parse(simpleXml2, \"text/xml\");\r\n            \r\n\t\t\tvar topNode1 = doc1.firstChild;\r\n\t\t\tvar topNode2 = doc2.firstChild;\r\n\t\t\tt.assertTrue(topNode1 !== null);\r\n\t\t\tt.assertTrue(topNode1.tagName === \"parentNode\");\r\n\t\t\tt.assertTrue(topNode2 !== null);\r\n\t\t\tt.assertTrue(topNode2.tagName === \"parentNode\");\r\n\t\t\tdxparser.removeChildren(topNode1);\r\n\t\t\tvar newChildren=[];\r\n\t\t\tfor(var i=0;i<topNode2.childNodes.length;i++){\r\n\t\t\t\tnewChildren.push(topNode2.childNodes[i]);\r\n\t\t\t}\r\n\t\t\tdxparser.removeChildren(topNode2);\r\n\t\t\tdxparser.replaceChildren(topNode1,newChildren);\r\n\t\t\tt.assertEqual(4, topNode1.childNodes.length);\r\n\t\t\tt.assertEqual(\"child4\", topNode1.firstChild.tagName);\r\n\t\t\tt.assertEqual(\"child7\", topNode1.lastChild.tagName);\r\n\r\n\t\t},\r\n\t\tfunction testReplaceChildrenSingle(t){\r\n\t\t\tvar simpleXml1 = \"<parentNode><child1/><child2/><child3/></parentNode>\";\r\n\t\t\tvar simpleXml2 = \"<parentNode><child4/></parentNode>\";\r\n\t\t\tvar doc1 = dxparser.parse(simpleXml1, \"text/xml\");\r\n\t\t\tvar doc2 = dxparser.parse(simpleXml2, \"text/xml\");\r\n            \r\n\t\t\tvar topNode1 = doc1.firstChild;\r\n\t\t\tvar topNode2 = doc2.firstChild;\r\n\t\t\tt.assertTrue(topNode1 !== null);\r\n\t\t\tt.assertTrue(topNode1.tagName === \"parentNode\");\r\n\t\t\tt.assertTrue(topNode2 !== null);\r\n\t\t\tt.assertTrue(topNode2.tagName === \"parentNode\");\r\n\t\t\tdxparser.removeChildren(topNode1);\r\n\t\t\t\r\n\t\t\tvar newChildren = topNode2.firstChild;\r\n\t\t\tdxparser.removeChildren(topNode2);\r\n\t\t\tdxparser.replaceChildren(topNode1,newChildren);\r\n\t\t\tt.assertTrue(topNode1.childNodes.length === 1);\r\n\t\t\tt.assertTrue(topNode1.firstChild.tagName === \"child4\");\r\n\t\t\tt.assertTrue(topNode1.lastChild.tagName === \"child4\");\r\n\t\t},\r\n\t\tfunction testRemoveChildren(t){\r\n\t\t\tvar simpleXml1 = \"<parentNode><child1/><child2/><child3/></parentNode>\";\r\n\t\t\tvar doc1 = dxparser.parse(simpleXml1, \"text/xml\");\r\n            \r\n\t\t\tvar topNode1 = doc1.firstChild;\r\n\t\t\tt.assertTrue(topNode1 !== null);\r\n\t\t\tt.assertTrue(topNode1.tagName === \"parentNode\");\r\n\t\t\tdxparser.removeChildren(topNode1);\r\n\t\t\tt.assertTrue(topNode1.childNodes.length === 0);\r\n\t\t\tt.assertTrue(topNode1.firstChild === null);\r\n\t\t},\r\n\t\tfunction testInnerXML(t){\r\n\t\t\tvar simpleXml1 = \"<parentNode><child1/><child2/><child3/></parentNode>\";\r\n\t\t\tvar doc1 = dxparser.parse(simpleXml1, \"text/xml\");\r\n            \r\n\t\t\tvar topNode1 = doc1.firstChild;\r\n\t\t\tt.assertTrue(topNode1 !== null);\r\n\t\t\tt.assertTrue(topNode1.tagName === \"parentNode\");\r\n\r\n\t\t\tvar innerXml = dxparser.innerXML(topNode1);\r\n\t\t\tt.assertTrue(simpleXml1 === innerXml);\r\n\t\t}\r\n\t]\r\n);\r\n\r\n});\r\n"]}