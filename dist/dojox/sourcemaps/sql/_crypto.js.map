{"version":3,"sources":["sql/_crypto.js"],"names":["dojo","provide","mixin","dojox","sql","_crypto","_POOL_SIZE","encrypt","plaintext","password","callback","this","_initWorkerPool","msg","toJson","String","_assignWork","decrypt","ciphertext","_manager","google","gears","factory","create","_unemployed","_employed","_handleMessage","self","onmessage","sender","undefined","push","length","handleMe","shift","code","_workerHandler","i","createWorker","exp","message","workerID","substring","sendMessage","parseInt","Sbox","Rcon","Cipher","input","w","Nr","state","Math","floor","AddRoundKey","round","MixColumns","ShiftRows","SubBytes","output","Array","s","Nb","r","c","t","a","b","rnd","KeyExpansion","key","Nk","temp","SubWord","RotWord","AESEncryptCtr","nBits","nBytes","pwBytes","charCodeAt","concat","slice","counterBlock","nonce","Date","getTime","keySchedule","blockCount","ceil","cipherCntr","blockLength","ct","cipherByte","fromCharCode","escCtrlChars","ctrTxt","join","AESDecryptCtr","split","unescCtrlChars","pt","plaintextByte","str","replace","cmd","substr","arg","eval","results","gearsWorkerPool"],"mappings":"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","file":"../../sql/_crypto.js","sourcesContent":["dojo.provide(\"dojox.sql._crypto\");\r\ndojo.mixin(dojox.sql._crypto, {\r\n\t// summary:\r\n\t//\t\tdojox.sql cryptography code\r\n\t// description:\r\n\t//\t\tTaken from http://www.movable-type.co.uk/scripts/aes.html by\r\n\t//\t\tChris Veness (CLA signed); adapted for Dojo and Google Gears Worker Pool\r\n\t//\t\tby Brad Neuberg, bkn3@columbia.edu\r\n\r\n\t// _POOL_SIZE:\r\n\t//\t\tSize of worker pool to create to help with crypto\r\n\t_POOL_SIZE: 100,\r\n\r\n\tencrypt: function(plaintext, password, callback){\r\n\t\t// summary:\r\n\t\t//\t\tUse Corrected Block TEA to encrypt plaintext using password\r\n\t\t//\t\t(note plaintext & password must be strings not string objects).\r\n\t\t//\t\tResults will be returned to the 'callback' asychronously.\r\n\t\tthis._initWorkerPool();\r\n\r\n\t\tvar msg ={plaintext: plaintext, password: password};\r\n\t\tmsg = dojo.toJson(msg);\r\n\t\tmsg = \"encr:\" + String(msg);\r\n\r\n\t\tthis._assignWork(msg, callback);\r\n\t},\r\n\r\n\tdecrypt: function(ciphertext, password, callback){\r\n\t\t// summary:\r\n\t\t//\t\tUse Corrected Block TEA to decrypt ciphertext using password\r\n\t\t//\t\t(note ciphertext & password must be strings not string objects).\r\n\t\t//\t\tResults will be returned to the 'callback' asychronously.\r\n\t\tthis._initWorkerPool();\r\n\r\n\t\tvar msg = {ciphertext: ciphertext, password: password};\r\n\t\tmsg = dojo.toJson(msg);\r\n\t\tmsg = \"decr:\" + String(msg);\r\n\r\n\t\tthis._assignWork(msg, callback);\r\n\t},\r\n\r\n\t_initWorkerPool: function(){\r\n\t\t// bugs in Google Gears prevents us from dynamically creating\r\n\t\t// and destroying workers as we need them -- the worker\r\n\t\t// pool functionality stops working after a number of crypto\r\n\t\t// cycles (probably related to a memory leak in Google Gears).\r\n\t\t// this is too bad, since it results in much simpler code.\r\n\r\n\t\t// instead, we have to create a pool of workers and reuse them. we\r\n\t\t// keep a stack of 'unemployed' Worker IDs that are currently not working.\r\n\t\t// if a work request comes in, we pop off the 'unemployed' stack\r\n\t\t// and put them to work, storing them in an 'employed' hashtable,\r\n\t\t// keyed by their Worker ID with the value being the callback function\r\n\t\t// that wants the result. when an employed worker is done, we get\r\n\t\t// a message in our 'manager' which adds this worker back to the\r\n\t\t// unemployed stack and routes the result to the callback that\r\n\t\t// wanted it. if all the workers were employed in the past but\r\n\t\t// more work needed to be done (i.e. it's a tight labor pool ;)\r\n\t\t// then the work messages are pushed onto\r\n\t\t// a 'handleMessage' queue as an object tuple{msg: msg, callback: callback}\r\n\r\n\t\tif(!this._manager){\r\n\t\t\ttry{\r\n\t\t\t\tthis._manager = google.gears.factory.create(\"beta.workerpool\", \"1.0\");\r\n\t\t\t\tthis._unemployed = [];\r\n\t\t\t\tthis._employed ={};\r\n\t\t\t\tthis._handleMessage = [];\r\n\t\t\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tthis._manager.onmessage = function(msg, sender){\r\n\t\t\t\t\t// get the callback necessary to serve this result\r\n\t\t\t\t\tvar callback = self._employed[\"_\" + sender];\r\n\t\t\t\r\n\t\t\t\t\t// make this worker unemployed\r\n\t\t\t\t\tself._employed[\"_\" + sender] = undefined;\r\n\t\t\t\t\tself._unemployed.push(\"_\" + sender);\r\n\t\t\t\r\n\t\t\t\t\t// see if we need to assign new work\r\n\t\t\t\t\t// that was queued up needing to be done\r\n\t\t\t\t\tif(self._handleMessage.length){\r\n\t\t\t\t\t\tvar handleMe = self._handleMessage.shift();\r\n\t\t\t\t\t\tself._assignWork(handleMe.msg, handleMe.callback);\r\n\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t\t// return results\r\n\t\t\t\t\tcallback(msg);\r\n\t\t\t\t};\r\n\t\t\t\r\n\t\t\t\tvar workerInit = \"function _workerInit(){\"\r\n\t\t\t\t\t\t\t\t\t+ \"gearsWorkerPool.onmessage = \"\r\n\t\t\t\t\t\t\t\t\t\t+ String(this._workerHandler)\r\n\t\t\t\t\t\t\t\t\t+ \";\"\r\n\t\t\t\t\t\t\t\t+ \"}\";\r\n\t\t\r\n\t\t\t\tvar code = workerInit + \" _workerInit();\";\r\n\r\n\t\t\t\t// create our worker pool\r\n\t\t\t\tfor(var i = 0; i < this._POOL_SIZE; i++){\r\n\t\t\t\t\tthis._unemployed.push(\"_\" + this._manager.createWorker(code));\r\n\t\t\t\t}\r\n\t\t\t}catch(exp){\r\n\t\t\t\tthrow exp.message||exp;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_assignWork: function(msg, callback){\r\n\t\t// can we immediately assign this work?\r\n\t\tif(!this._handleMessage.length && this._unemployed.length){\r\n\t\t\t// get an unemployed worker\r\n\t\t\tvar workerID = this._unemployed.shift().substring(1); // remove _\r\n\t\r\n\t\t\t// list this worker as employed\r\n\t\t\tthis._employed[\"_\" + workerID] = callback;\r\n\t\r\n\t\t\t// do the worke\r\n\t\t\tthis._manager.sendMessage(msg, parseInt(workerID,10));\r\n\t\t}else{\r\n\t\t\t// we have to queue it up\r\n\t\t\tthis._handleMessage ={msg: msg, callback: callback};\r\n\t\t}\r\n\t},\r\n\r\n\t_workerHandler: function(msg, sender){\r\n\t\r\n\t\t/* Begin AES Implementation */\r\n\t\r\n\t\t/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\t\r\n\t\t// Sbox is pre-computed multiplicative inverse in GF(2^8) used in SubBytes and KeyExpansion [§5.1.1]\r\n\t\tvar Sbox =\t[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,\r\n\t\t\t\t\t 0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,\r\n\t\t\t\t\t 0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,\r\n\t\t\t\t\t 0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,\r\n\t\t\t\t\t 0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,\r\n\t\t\t\t\t 0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,\r\n\t\t\t\t\t 0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,\r\n\t\t\t\t\t 0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,\r\n\t\t\t\t\t 0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,\r\n\t\t\t\t\t 0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,\r\n\t\t\t\t\t 0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,\r\n\t\t\t\t\t 0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,\r\n\t\t\t\t\t 0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,\r\n\t\t\t\t\t 0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,\r\n\t\t\t\t\t 0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,\r\n\t\t\t\t\t 0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16];\r\n\r\n\t\t// Rcon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [§5.2]\r\n\t\tvar Rcon = [ [0x00, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x01, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x02, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x04, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x08, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x10, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x20, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x40, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x80, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x1b, 0x00, 0x00, 0x00],\r\n\t\t\t\t\t [0x36, 0x00, 0x00, 0x00] ];\r\n\r\n\t\t/*\r\n\t\t * AES Cipher function: encrypt 'input' with Rijndael algorithm\r\n\t\t *\r\n\t\t *\t takes\t byte-array 'input' (16 bytes)\r\n\t\t *\t\t\t 2D byte-array key schedule 'w' (Nr+1 x Nb bytes)\r\n\t\t *\r\n\t\t *\t applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage\r\n\t\t *\r\n\t\t *\t returns byte-array encrypted value (16 bytes)\r\n\t\t */\r\n\t\tfunction Cipher(input, w) {\t   // main Cipher function [§5.1]\r\n\t\t  var Nb = 4;\t\t\t\t// block size (in words): no of columns in state (fixed at 4 for AES)\r\n\t\t  var Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n\t\t  var state = [[],[],[],[]];  // initialise 4xNb byte-array 'state' with input [§3.4]\r\n\t\t  for (var i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i];\r\n\r\n\t\t  state = AddRoundKey(state, w, 0, Nb);\r\n\r\n\t\t  for (var round=1; round<Nr; round++) {\r\n\t\t\tstate = SubBytes(state, Nb);\r\n\t\t\tstate = ShiftRows(state, Nb);\r\n\t\t\tstate = MixColumns(state, Nb);\r\n\t\t\tstate = AddRoundKey(state, w, round, Nb);\r\n\t\t  }\r\n\r\n\t\t  state = SubBytes(state, Nb);\r\n\t\t  state = ShiftRows(state, Nb);\r\n\t\t  state = AddRoundKey(state, w, Nr, Nb);\r\n\r\n\t\t  var output = new Array(4*Nb);\t // convert state to 1-d array before returning [§3.4]\r\n\t\t  for (var i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)];\r\n\t\t  return output;\r\n\t\t}\r\n\r\n\r\n\t\tfunction SubBytes(s, Nb) {\t  // apply SBox to state S [§5.1.1]\r\n\t\t  for (var r=0; r<4; r++) {\r\n\t\t\tfor (var c=0; c<Nb; c++) s[r][c] = Sbox[s[r][c]];\r\n\t\t  }\r\n\t\t  return s;\r\n\t\t}\r\n\r\n\r\n\t\tfunction ShiftRows(s, Nb) {\t   // shift row r of state S left by r bytes [§5.1.2]\r\n\t\t  var t = new Array(4);\r\n\t\t  for (var r=1; r<4; r++) {\r\n\t\t\tfor (var c=0; c<4; c++) t[c] = s[r][(c+r)%Nb];\t// shift into temp copy\r\n\t\t\tfor (var c=0; c<4; c++) s[r][c] = t[c];\t\t\t// and copy back\r\n\t\t  }\t\t\t // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):\r\n\t\t  return s;\t // see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf\r\n\t\t}\r\n\r\n\r\n\t\tfunction MixColumns(s, Nb) {   // combine bytes of each col of state S [§5.1.3]\r\n\t\t  for (var c=0; c<4; c++) {\r\n\t\t\tvar a = new Array(4);  // 'a' is a copy of the current column from 's'\r\n\t\t\tvar b = new Array(4);  // 'b' is a•{02} in GF(2^8)\r\n\t\t\tfor (var i=0; i<4; i++) {\r\n\t\t\t  a[i] = s[i][c];\r\n\t\t\t  b[i] = s[i][c]&0x80 ? s[i][c]<<1 ^ 0x011b : s[i][c]<<1;\r\n\t\t\t}\r\n\t\t\t// a[n] ^ b[n] is a•{03} in GF(2^8)\r\n\t\t\ts[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // 2*a0 + 3*a1 + a2 + a3\r\n\t\t\ts[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 * 2*a1 + 3*a2 + a3\r\n\t\t\ts[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + 2*a2 + 3*a3\r\n\t\t\ts[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // 3*a0 + a1 + a2 + 2*a3\r\n\t\t  }\r\n\t\t  return s;\r\n\t\t}\r\n\r\n\r\n\t\tfunction AddRoundKey(state, w, rnd, Nb) {  // xor Round Key into state S [§5.1.4]\r\n\t\t  for (var r=0; r<4; r++) {\r\n\t\t\tfor (var c=0; c<Nb; c++) state[r][c] ^= w[rnd*4+c][r];\r\n\t\t  }\r\n\t\t  return state;\r\n\t\t}\r\n\r\n\r\n\t\tfunction KeyExpansion(key) {  // generate Key Schedule (byte-array Nr+1 x Nb) from Key [§5.2]\r\n\t\t  var Nb = 4;\t\t\t // block size (in words): no of columns in state (fixed at 4 for AES)\r\n\t\t  var Nk = key.length/4\t // key length (in words): 4/6/8 for 128/192/256-bit keys\r\n\t\t  var Nr = Nk + 6;\t\t // no of rounds: 10/12/14 for 128/192/256-bit keys\r\n\r\n\t\t  var w = new Array(Nb*(Nr+1));\r\n\t\t  var temp = new Array(4);\r\n\r\n\t\t  for (var i=0; i<Nk; i++) {\r\n\t\t\tvar r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]];\r\n\t\t\tw[i] = r;\r\n\t\t  }\r\n\r\n\t\t  for (var i=Nk; i<(Nb*(Nr+1)); i++) {\r\n\t\t\tw[i] = new Array(4);\r\n\t\t\tfor (var t=0; t<4; t++) temp[t] = w[i-1][t];\r\n\t\t\tif (i % Nk == 0) {\r\n\t\t\t  temp = SubWord(RotWord(temp));\r\n\t\t\t  for (var t=0; t<4; t++) temp[t] ^= Rcon[i/Nk][t];\r\n\t\t\t} else if (Nk > 6 && i%Nk == 4) {\r\n\t\t\t  temp = SubWord(temp);\r\n\t\t\t}\r\n\t\t\tfor (var t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t];\r\n\t\t  }\r\n\r\n\t\t  return w;\r\n\t\t}\r\n\r\n\t\tfunction SubWord(w) {\t // apply SBox to 4-byte word w\r\n\t\t  for (var i=0; i<4; i++) w[i] = Sbox[w[i]];\r\n\t\t  return w;\r\n\t\t}\r\n\r\n\t\tfunction RotWord(w) {\t // rotate 4-byte word w left by one byte\r\n\t\t  w[4] = w[0];\r\n\t\t  for (var i=0; i<4; i++) w[i] = w[i+1];\r\n\t\t  return w;\r\n\t\t}\r\n\r\n\t\t/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\r\n\t\t/*\r\n\t\t * Use AES to encrypt 'plaintext' with 'password' using 'nBits' key, in 'Counter' mode of operation\r\n\t\t *\t\t\t\t\t\t\t - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\r\n\t\t *\t for each block\r\n\t\t *\t - outputblock = cipher(counter, key)\r\n\t\t *\t - cipherblock = plaintext xor outputblock\r\n\t\t */\r\n\t\tfunction AESEncryptCtr(plaintext, password, nBits) {\r\n\t\t  if (!(nBits==128 || nBits==192 || nBits==256)) return '';\t // standard allows 128/192/256 bit keys\r\n\r\n\t\t  // for this example script, generate the key by applying Cipher to 1st 16/24/32 chars of password;\r\n\t\t  // for real-world applications, a more secure approach would be to hash the password e.g. with SHA-1\r\n\t\t  var nBytes = nBits/8;\t // no bytes in key\r\n\t\t  var pwBytes = new Array(nBytes);\r\n\t\t  for (var i=0; i<nBytes; i++) pwBytes[i] = password.charCodeAt(i) & 0xff;\r\n\r\n\t\t  var key = Cipher(pwBytes, KeyExpansion(pwBytes));\r\n\r\n\t\t  key = key.concat(key.slice(0, nBytes-16));  // key is now 16/24/32 bytes long\r\n\r\n\t\t  // initialise counter block (NIST SP800-38A §B.2): millisecond time-stamp for nonce in 1st 8 bytes,\r\n\t\t  // block counter in 2nd 8 bytes\r\n\t\t  var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n\t\t  var counterBlock = new Array(blockSize);\t// block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n\t\t  var nonce = (new Date()).getTime();  // milliseconds since 1-Jan-1970\r\n\r\n\t\t  // encode nonce in two stages to cater for JavaScript 32-bit limit on bitwise ops\r\n\t\t  for (var i=0; i<4; i++) counterBlock[i] = (nonce >>> i*8) & 0xff;\r\n\t\t  for (var i=0; i<4; i++) counterBlock[i+4] = (nonce/0x100000000 >>> i*8) & 0xff;\r\n\r\n\t\t  // generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n\t\t  var keySchedule = KeyExpansion(key);\r\n\r\n\t\t  var blockCount = Math.ceil(plaintext.length/blockSize);\r\n\t\t  var ciphertext = new Array(blockCount);  // ciphertext as array of strings\r\n \r\n\t\t  for (var b=0; b<blockCount; b++) {\r\n\t\t\t// set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n\t\t\t// again done in two stages for 32-bit ops\r\n\t\t\tfor (var c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;\r\n\t\t\tfor (var c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8)\r\n\r\n\t\t\tvar cipherCntr = Cipher(counterBlock, keySchedule);\t // -- encrypt counter block --\r\n\r\n\t\t\t// calculate length of final block:\r\n\t\t\tvar blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\r\n\r\n\t\t\tvar ct = '';\r\n\t\t\tfor (var i=0; i<blockLength; i++) {\t // -- xor plaintext with ciphered counter byte-by-byte --\r\n\t\t\t  var plaintextByte = plaintext.charCodeAt(b*blockSize+i);\r\n\t\t\t  var cipherByte = plaintextByte ^ cipherCntr[i];\r\n\t\t\t  ct += String.fromCharCode(cipherByte);\r\n\t\t\t}\r\n\t\t\t// ct is now ciphertext for this block\r\n\r\n\t\t\tciphertext[b] = escCtrlChars(ct);  // escape troublesome characters in ciphertext\r\n\t\t  }\r\n\r\n\t\t  // convert the nonce to a string to go on the front of the ciphertext\r\n\t\t  var ctrTxt = '';\r\n\t\t  for (var i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\r\n\t\t  ctrTxt = escCtrlChars(ctrTxt);\r\n\r\n\t\t  // use '-' to separate blocks, use Array.join to concatenate arrays of strings for efficiency\r\n\t\t  return ctrTxt + '-' + ciphertext.join('-');\r\n\t\t}\r\n\r\n\r\n\t\t/*\r\n\t\t * Use AES to decrypt 'ciphertext' with 'password' using 'nBits' key, in Counter mode of operation\r\n\t\t *\r\n\t\t *\t for each block\r\n\t\t *\t - outputblock = cipher(counter, key)\r\n\t\t *\t - cipherblock = plaintext xor outputblock\r\n\t\t */\r\n\t\tfunction AESDecryptCtr(ciphertext, password, nBits) {\r\n\t\t  if (!(nBits==128 || nBits==192 || nBits==256)) return '';\t // standard allows 128/192/256 bit keys\r\n\r\n\t\t  var nBytes = nBits/8;\t // no bytes in key\r\n\t\t  var pwBytes = new Array(nBytes);\r\n\t\t  for (var i=0; i<nBytes; i++) pwBytes[i] = password.charCodeAt(i) & 0xff;\r\n\t\t  var pwKeySchedule = KeyExpansion(pwBytes);\r\n\t\t  var key = Cipher(pwBytes, pwKeySchedule);\r\n\t\t  key = key.concat(key.slice(0, nBytes-16));  // key is now 16/24/32 bytes long\r\n\r\n\t\t  var keySchedule = KeyExpansion(key);\r\n\r\n\t\t  ciphertext = ciphertext.split('-');  // split ciphertext into array of block-length strings\r\n\r\n\t\t  // recover nonce from 1st element of ciphertext\r\n\t\t  var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n\t\t  var counterBlock = new Array(blockSize);\r\n\t\t  var ctrTxt = unescCtrlChars(ciphertext[0]);\r\n\t\t  for (var i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\r\n\r\n\t\t  var plaintext = new Array(ciphertext.length-1);\r\n\r\n\t\t  for (var b=1; b<ciphertext.length; b++) {\r\n\t\t\t// set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n\t\t\tfor (var c=0; c<4; c++) counterBlock[15-c] = ((b-1) >>> c*8) & 0xff;\r\n\t\t\tfor (var c=0; c<4; c++) counterBlock[15-c-4] = ((b/0x100000000-1) >>> c*8) & 0xff;\r\n\r\n\t\t\tvar cipherCntr = Cipher(counterBlock, keySchedule);\t // encrypt counter block\r\n\r\n\t\t\tciphertext[b] = unescCtrlChars(ciphertext[b]);\r\n\r\n\t\t\tvar pt = '';\r\n\t\t\tfor (var i=0; i<ciphertext[b].length; i++) {\r\n\t\t\t  // -- xor plaintext with ciphered counter byte-by-byte --\r\n\t\t\t  var ciphertextByte = ciphertext[b].charCodeAt(i);\r\n\t\t\t  var plaintextByte = ciphertextByte ^ cipherCntr[i];\r\n\t\t\t  pt += String.fromCharCode(plaintextByte);\r\n\t\t\t}\r\n\t\t\t// pt is now plaintext for this block\r\n\r\n\t\t\tplaintext[b-1] = pt;  // b-1 'cos no initial nonce block in plaintext\r\n\t\t  }\r\n\r\n\t\t  return plaintext.join('');\r\n\t\t}\r\n\r\n\t\t/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\r\n\t\tfunction escCtrlChars(str) {  // escape control chars which might cause problems handling ciphertext\r\n\t\t  return str.replace(/[\\0\\t\\n\\v\\f\\r\\xa0!-]/g, function(c) { return '!' + c.charCodeAt(0) + '!'; });\r\n\t\t}  // \\xa0 to cater for bug in Firefox; include '-' to leave it free for use as a block marker\r\n\r\n\t\tfunction unescCtrlChars(str) {\t// unescape potentially problematic control characters\r\n\t\t  return str.replace(/!\\d\\d?\\d?!/g, function(c) { return String.fromCharCode(c.slice(1,-1)); });\r\n\t\t}\r\n\r\n\t\t/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\r\n\t\r\n\t\tfunction encrypt(plaintext, password){\r\n\t\t\treturn AESEncryptCtr(plaintext, password, 256);\r\n\t\t}\r\n\r\n\t\tfunction decrypt(ciphertext, password){\r\n\t\t\treturn AESDecryptCtr(ciphertext, password, 256);\r\n\t\t}\r\n\t\r\n\t\t/* End AES Implementation */\r\n\t\r\n\t\tvar cmd = msg.substr(0,4);\r\n\t\tvar arg = msg.substr(5);\r\n\t\tif(cmd == \"encr\"){\r\n\t\t\targ = eval(\"(\" + arg + \")\");\r\n\t\t\tvar plaintext = arg.plaintext;\r\n\t\t\tvar password = arg.password;\r\n\t\t\tvar results = encrypt(plaintext, password);\r\n\t\t\tgearsWorkerPool.sendMessage(String(results), sender);\r\n\t\t}else if(cmd == \"decr\"){\r\n\t\t\targ = eval(\"(\" + arg + \")\");\r\n\t\t\tvar ciphertext = arg.ciphertext;\r\n\t\t\tvar password = arg.password;\r\n\t\t\tvar results = decrypt(ciphertext, password);\r\n\t\t\tgearsWorkerPool.sendMessage(String(results), sender);\r\n\t\t}\r\n\t}\r\n});\r\n"]}