{"version":3,"sources":["gauges/BarGauge.js"],"names":["define","declare","lang","arr","html","event","gfx","Gauge","BarLineIndicator","domGeometry","dataX","dataY","dataWidth","dataHeight","_defaultIndicator","startup","this","getChildren","forEach","child","gaugeWidth","gaugeHeight","inherited","arguments","_getPosition","value","Math","floor","min","max","_getValueForPosition","pos","drawRange","group","range","shape","parent","remove","x1","low","x2","high","path","createRect","x","y","width","height","isArray","color","isString","setStroke","setFill","type","y1","y2","colors","svg","getEventSource","setAttribute","style","connect","hitch","_handleMouseOverRange","_handleMouseOutRange","getRangeUnderMouse","e","getContentBox","gaugeContent","clientX","_rangeData","i","length","Number","_dragIndicator","widget","_dragIndicatorAt","pageX","pageY","stop","xl","position","_drag","onDragMove","draw","_indicatorsGroup","valueChanged"],"mappings":"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","file":"../../gauges/BarGauge.js","sourcesContent":["define([\"dojo/_base/declare\",\"dojo/_base/lang\",\"dojo/_base/array\",\"dojo/_base/html\",\"dojo/_base/event\",\"dojox/gfx\",\r\n\t\t\"./_Gauge\",\"./BarLineIndicator\", \"dojo/dom-geometry\"],\r\n function(declare, lang, arr, html, event, gfx, Gauge, BarLineIndicator, domGeometry) {\r\n\r\nreturn declare(\"dojox.gauges.BarGauge\", Gauge, {\r\n\t// summary:\r\n\t//\t\ta bar graph built using the dojox.gfx package.\r\n\t//\r\n\t// description:\r\n\t//\t\tusing dojo.gfx (and thus either SVG or VML based on what is supported), this widget\r\n\t//\t\tbuilds a bar graph component, used to display numerical data in a familiar format.\r\n\t//\r\n\t// example:\r\n\t// |\t<script type=\"text/javascript\">\r\n\t// |\t\trequire([\"dojox/gauges/BarGauge\"]);\r\n\t// |\t</script>\r\n\t// |\t...\r\n\t// |\t<div \tdojoType=\"dojox.gauges.BarGauge\"\r\n\t// |\t\tid=\"testBarGauge\"\r\n\t// |\t\tbarGaugeHeight=\"55\"\r\n\t// |\t\tdataY=\"25\"\r\n\t// |\t\tdataHeight=\"25\"\r\n\t// |\t\tdataWidth=\"225\">\r\n\t// |\t</div>\r\n\r\n\t// dataX: Number\r\n\t//\t\tx position of data area (default 5)\r\n\tdataX: 5,\r\n\r\n\t// dataY: Number\r\n\t//\t\ty position of data area (default 5)\r\n\tdataY: 5,\r\n\r\n\t// dataWidth: Number\r\n\t//\t\twidth of data area (default is bar graph width - 10)\r\n\tdataWidth: 0,\r\n\r\n\t// dataHeight: Number\r\n\t//\t\theight of data area (default is bar graph width - 10)\r\n\tdataHeight: 0,\r\n\r\n\t// _defaultIndicator: Object\r\n\t//\t\toverride of dojox.gauges._Gauge._defaultIndicator\r\n\t_defaultIndicator: BarLineIndicator,\r\n\r\n\tstartup: function(){\r\n\t\t// handle settings from HTML by making sure all the options are\r\n\t\t// converted correctly to numbers \r\n\t\t//\r\n\t\t// also connects mouse handling events\r\n\r\n\t\tif(this.getChildren){\r\n\t\t\tarr.forEach(this.getChildren(), function(child){ child.startup(); });\r\n\t\t}\r\n\r\n\t\tif(!this.dataWidth){this.dataWidth = this.gaugeWidth - 10;}\r\n\t\tif(!this.dataHeight){this.dataHeight = this.gaugeHeight - 10;}\r\n\r\n\t\tthis.inherited(arguments);\r\n\t},\r\n\r\n\t_getPosition: function(/*Number*/value){\r\n\t\t// summary:\r\n\t\t//\t\tThis is a helper function used to determine the position that represents\r\n\t\t//\t\ta given value on the bar graph\r\n\t\t// value: Number\r\n\t\t//\t\tA value to be converted to a position for this bar graph.\r\n\r\n\t\treturn this.dataX + Math.floor((value - this.min)/(this.max - this.min)*this.dataWidth);\r\n\t},\r\n\r\n\t_getValueForPosition: function(/*Number*/pos){\r\n\t\t// summary:\r\n\t\t//\t\tThis is a helper function used to determine the value represented by\r\n\t\t//\t\ta position on the bar graph\r\n\t\t// pos:\tNumber\r\n\t\t//\t\tA position to be converted to a value.\r\n\t\treturn (pos - this.dataX)*(this.max - this.min)/this.dataWidth + this.min;\r\n\t},\r\n\r\n\tdrawRange: function(/*dojox.gfx.Group*/ group, /*Object*/range){\r\n\t\t// summary:\r\n\t\t//\t\tThis function is used to draw (or redraw) a range\r\n\t\t// description:\r\n\t\t//\t\tDraws a range (colored area on the background of the gauge) \r\n\t\t//\t\tbased on the given arguments.\r\n\t\t// group:\r\n\t\t//\t\tThe GFX group where the range must be drawn.\r\n\t\t// range:\r\n\t\t//\t\tA range is either a dojox.gauges.Range or an object\r\n\t\t//\t\twith similar parameters (low, high, hover, etc.).\r\n\t\tif(range.shape){\r\n\t\t\trange.shape.parent.remove(range.shape);\r\n\t\t\trange.shape = null;\r\n\t\t}\r\n\r\n\t\tvar x1 = this._getPosition(range.low);\r\n\t\tvar x2 = this._getPosition(range.high);\r\n\t\tvar path = group.createRect({\r\n\t\t\tx: x1,\r\n\t\t\ty: this.dataY,\r\n\t\t\twidth: x2 - x1,\r\n\t\t\theight: this.dataHeight\r\n\t\t});\t\r\n\t\tif(lang.isArray(range.color) || lang.isString(range.color)){\r\n\t\t\tpath.setStroke({color: range.color});\r\n\t\t\tpath.setFill(range.color);\r\n\t\t}else if(range.color.type){\r\n\t\t\t// Color is a gradient\r\n\t\t\tvar y = this.dataY + this.dataHeight/2;\r\n\t\t\trange.color.x1 = x1;\r\n\t\t\trange.color.x2 = x2;\r\n\t\t\trange.color.y1 = y;\r\n\t\t\trange.color.y2 = y;\r\n\t\t\tpath.setFill(range.color);\r\n\t\t\tpath.setStroke({color: range.color.colors[0].color});\r\n\t\t}else if (gfx.svg){\r\n\t\t\t// We've defined a style rather than an explicit color\r\n\t\t\tpath.setStroke({color: \"green\"});\t// Arbitrary color, just have to indicate\r\n\t\t\tpath.setFill(\"green\");\t\t\t\t// that we want it filled\r\n\t\t\tpath.getEventSource().setAttribute(\"class\", range.color.style);\r\n\t\t}\r\n\t\r\n\t\tpath.connect(\"onmouseover\", lang.hitch(this, this._handleMouseOverRange, range));\r\n\t\tpath.connect(\"onmouseout\", lang.hitch(this, this._handleMouseOutRange, range));\r\n\t\r\n\t\trange.shape = path;\r\n\t},\r\n\r\n\tgetRangeUnderMouse: function(/*Object*/e){\r\n\t\t// summary:\r\n\t\t//\t\tDetermines which range the mouse is currently over\r\n\t\t// e: Object\r\n\t\t//\t\tThe event object as received by the mouse handling functions below.\r\n\t\tvar range = null;\r\n\t\tvar pos = domGeometry.getContentBox(this.gaugeContent);\r\n\t\tvar x = e.clientX - pos.x;\r\n\t\tvar value = this._getValueForPosition(x);\r\n\t\tif(this._rangeData){\r\n\t\t\tfor(var i=0; (i<this._rangeData.length) && !range; i++){\r\n\t\t\t\tif((Number(this._rangeData[i].low) <= value) && (Number(this._rangeData[i].high) >= value)){\r\n\t\t\t\t\trange = this._rangeData[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn range;\r\n\t},\r\n\r\n\t_dragIndicator: function(/*Object*/widget, /*Object*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tHandles the dragging of an indicator to the event position, including moving/re-drawing\r\n\t\t//\t\tget angle for mouse position\r\n\t\tthis._dragIndicatorAt(widget, e.pageX, e.pageY);\r\n\t\tevent.stop(e);\r\n\t},\r\n\t\r\n\t_dragIndicatorAt: function(/*Object*/ widget, x, y){\r\n\t\t\r\n\t\t// summary:\r\n\t\t//\t\tHandles the dragging of an indicator, including moving/re-drawing\r\n\t\t//\t\tget new value based on mouse position\r\n\t\tvar pos = domGeometry.position(widget.gaugeContent, true);\r\n\t\tvar xl = x - pos.x;\r\n\t\tvar value = widget._getValueForPosition(xl);\r\n\t\tif(value < widget.min){value = widget.min;}\r\n\t\tif(value > widget.max){value = widget.max;}\r\n\t\t// update the indicator\r\n\t\twidget._drag.value = value;\r\n\t\t// callback\r\n\t\twidget._drag.onDragMove(widget._drag);\r\n\t\t// redraw/move indicator(s)\r\n\t\twidget._drag.draw(this._indicatorsGroup, true);\r\n\t\twidget._drag.valueChanged();\r\n\t}\r\n});\r\n});\r\n"]}