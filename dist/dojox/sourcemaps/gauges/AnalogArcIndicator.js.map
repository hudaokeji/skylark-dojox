{"version":3,"sources":["gauges/AnalogArcIndicator.js"],"names":["define","declare","lang","connect","fx","AnalogIndicatorBase","_createArc","val","this","shape","startAngle","_gauge","_mod360","a","_getRadians","_getAngle","sa","orientation","tmp","big","Math","PI","cosa","cos","sina","sin","cossa","sinsa","off","offset","width","p","push","cx","cy","setShape","join","currentValue","draw","group","dontAnimate","v","value","min","max","anim","Animation","curve","duration","easing","hitch","play","color","stroke","strokeColor","type","colors","createPath","setStroke","setFill","handleMouseOver","handleMouseOut","handleMouseDown","handleTouchStart"],"mappings":"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","file":"../../gauges/AnalogArcIndicator.js","sourcesContent":["define([\"dojo/_base/declare\",\"dojo/_base/lang\",\"dojo/_base/connect\",\"dojo/_base/fx\",\"./AnalogIndicatorBase\"],\r\nfunction(declare, lang, connect, fx, AnalogIndicatorBase) {\r\n\r\nreturn declare(\"dojox.gauges.AnalogArcIndicator\",[AnalogIndicatorBase],{\r\n\t\r\n\t// summary:\r\n\t//\t\tAn indicator for the AnalogGauge that draws a segment of arc.\r\n\t//\t\tThe segment of arc starts at the start angle of the gauge and ends at the\r\n\t//\t\tangle that corresponds to the value of the indicator.\r\n\t\r\n\t_createArc: function(val){\r\n\t\t\r\n\t\t// Creating the Arc Path string manually.  This is instead of creating new dojox.gfx.Path object\r\n\t\t// each time since we really just need the Path string (to use with setShape) and we don't want to\r\n\t\t// have to redo the connects, etc.\r\n\t\tif(this.shape){\r\n\t\t\tvar startAngle = this._gauge._mod360(this._gauge.startAngle);\r\n\t\t\tvar a = this._gauge._getRadians(this._gauge._getAngle(val));\r\n\t\t\tvar sa = this._gauge._getRadians(startAngle);\r\n\r\n\t\t\tif (this._gauge.orientation == 'cclockwise'){\r\n\t\t\t\tvar tmp = a;\r\n\t\t\t\ta = sa;\r\n\t\t\t\tsa = tmp;\r\n\t\t\t}\r\n\r\n\t\t\tvar arange;\r\n\t\t\tvar big = 0;\r\n\t\t\tif (sa<=a)\r\n\t\t\t\tarange = a-sa;\r\n\t\t\telse\r\n\t\t\t\tarange = 2*Math.PI+a-sa;\r\n\t\t\tif(arange>Math.PI){big=1;}\r\n\t\t\t\r\n\t\t\tvar cosa = Math.cos(a);\r\n\t\t\tvar sina = Math.sin(a);\r\n\t\t\tvar cossa = Math.cos(sa);\r\n\t\t\tvar sinsa = Math.sin(sa);\r\n\t\t\tvar off = this.offset + this.width;\r\n\t\t\tvar p = ['M'];\r\n\t\t\tp.push(this._gauge.cx+this.offset*sinsa);\r\n\t\t\tp.push(this._gauge.cy-this.offset*cossa);\r\n\t\t\tp.push('A', this.offset, this.offset, 0, big, 1);\r\n\t\t\tp.push(this._gauge.cx+this.offset*sina);\r\n\t\t\tp.push(this._gauge.cy-this.offset*cosa);\r\n\t\t\tp.push('L');\r\n\t\t\tp.push(this._gauge.cx+off*sina);\r\n\t\t\tp.push(this._gauge.cy-off*cosa);\r\n\t\t\tp.push('A', off, off, 0, big, 0);\r\n\t\t\tp.push(this._gauge.cx+off*sinsa);\r\n\t\t\tp.push(this._gauge.cy-off*cossa);\r\n\t\t\tp.push('z');\r\n\t\t\tthis.shape.setShape(p.join(' '));\r\n\t\t\tthis.currentValue = val;\r\n\t\t}\r\n\t},\r\n\tdraw: function(group, /*Boolean?*/ dontAnimate){\r\n\t\t// summary:\r\n\t\t//\t\tOverride of dojox.gauges._Indicator.draw\r\n\t\tvar v = this.value;\r\n\t\tif(v < this._gauge.min){v = this._gauge.min;}\r\n\t\tif(v > this._gauge.max){v = this._gauge.max;}\r\n\t\tif(this.shape){\r\n\t\t\tif(dontAnimate){\r\n\t\t\t\tthis._createArc(v);\r\n\t\t\t}else{\r\n\t\t\t\tvar anim = new fx.Animation({curve: [this.currentValue, v], duration: this.duration, easing: this.easing});\r\n\t\t\t\tconnect.connect(anim, \"onAnimate\", lang.hitch(this, this._createArc));\r\n\t\t\t\tanim.play();\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tvar color = this.color ? this.color : 'black';\r\n\t\t\tvar strokeColor = this.strokeColor ? this.strokeColor : color;\r\n\t\t\tvar stroke = {color: strokeColor, width: 1};\r\n\t\t\tif(this.color.type && !this.strokeColor){\r\n\t\t\t\tstroke.color = this.color.colors[0].color;\r\n\t\t\t}\r\n\t\t\tthis.shape = group.createPath().setStroke(stroke).setFill(color);\r\n\t\t\tthis._createArc(v);\r\n\t\t\tthis.shape.connect(\"onmouseover\", this, this.handleMouseOver);\r\n\t\t\tthis.shape.connect(\"onmouseout\", this,  this.handleMouseOut);\r\n\t\t\tthis.shape.connect(\"onmousedown\", this, this.handleMouseDown);\r\n\t\t\tthis.shape.connect(\"touchstart\", this, this.handleTouchStart);\r\n\t\t}\r\n\t}\r\n});\r\n\r\n});\r\n"]}