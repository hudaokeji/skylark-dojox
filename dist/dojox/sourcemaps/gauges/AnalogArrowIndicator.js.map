{"version":3,"sources":["gauges/AnalogArrowIndicator.js"],"names":["define","declare","AnalogIndicatorBase","_getShapes","group","this","_gauge","color","stroke","strokeColor","width","type","colors","x","Math","floor","head","odd","shapes","points","y","length","createPolyline","setStroke","setFill","createLine","x1","y1","x2","y2","highlight","createCircle","cx","cy","r"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAqB,yBAC7B,SAASC,EAASC,GAElB,OAAOD,EAAQ,qCAAsCC,IAMpDC,WAAY,SAASC,GAGpB,IAAIC,KAAKC,OACR,OAAO,KAER,IAAIC,EAAQF,KAAKE,MAAQF,KAAKE,MAAQ,QAElCC,GAAWD,MADGF,KAAKI,YAAcJ,KAAKI,YAAcF,EACrBG,MAAO,GACtCL,KAAKE,MAAMI,OAASN,KAAKI,cAC5BD,EAAOD,MAAQF,KAAKE,MAAMK,OAAO,GAAGL,OAGrC,IAAIM,EAAIC,KAAKC,MAAMV,KAAKK,MAAM,GAC1BM,EAAoB,EAAbX,KAAKK,MACZO,EAAoB,EAAbZ,KAAKK,MACZQ,KACAC,IAAWN,GAAGA,EAAIO,EAAE,IAClBP,GAAGA,EAAIO,GAAGf,KAAKgB,OAAOL,IACtBH,GAAG,EAAEA,EAAIO,GAAGf,KAAKgB,OAAOL,IACxBH,EAAE,EAAKO,GAAGf,KAAKgB,SACfR,EAAE,EAAEA,EAAEI,EAAIG,GAAGf,KAAKgB,OAAOL,IACzBH,EAAEA,EAAEI,EAAMG,GAAGf,KAAKgB,OAAOL,IACzBH,EAAEA,EAAEI,EAAMG,EAAE,IACZP,GAAGA,EAAIO,EAAE,IAWf,OAVAF,EAAO,GAAKd,EAAMkB,eAAeH,GAC7BI,UAAUf,GACVgB,QAAQjB,GACZW,EAAO,GAAKd,EAAMqB,YAAaC,IAAIb,EAAGc,GAAI,EAAGC,IAAKf,EAAGgB,IAAIxB,KAAKgB,OAAOL,IACjEO,WAAWhB,MAAOF,KAAKyB,YAC3BZ,EAAO,GAAKd,EAAMqB,YAAaC,IAAIb,EAAE,EAAGc,IAAKtB,KAAKgB,OAAOL,EAAMY,GAAI,EAAGC,IAAIxB,KAAKgB,SAC3EE,WAAWhB,MAAOF,KAAKyB,YAC3BZ,EAAO,GAAKd,EAAM2B,cAAcC,GAAI,EAAGC,GAAI,EAAGC,EAAG7B,KAAKK,QAClDa,UAAUf,GACVgB,QAAQjB,GACLW","file":"../../gauges/AnalogArrowIndicator.js","sourcesContent":["define([\"dojo/_base/declare\",\"./AnalogIndicatorBase\"],\r\nfunction(declare, AnalogIndicatorBase) {\r\n\r\nreturn declare(\"dojox.gauges.AnalogArrowIndicator\", [AnalogIndicatorBase],{\r\n\r\n\t// summary:\r\n\t//\t\tAn indicator for the AnalogGauge that draws an arrow. The arrow is drawn on the angle that corresponds\r\n\t//\t\tto the value of the indicator.\r\n\t\r\n\t_getShapes: function(group){\r\n\t\t// summary:\r\n\t\t//\t\tOverride of dojox.gauges.AnalogLineIndicator._getShapes\r\n\t\tif(!this._gauge){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar color = this.color ? this.color : 'black';\r\n\t\tvar strokeColor = this.strokeColor ? this.strokeColor : color;\r\n\t\tvar stroke = { color: strokeColor, width: 1};\r\n\t\tif (this.color.type && !this.strokeColor){\r\n\t\t\tstroke.color = this.color.colors[0].color;\r\n\t\t}\r\n\t\t\t\r\n\t\tvar x = Math.floor(this.width/2);\r\n\t\tvar head = this.width * 5;\r\n\t\tvar odd = (this.width & 1);\r\n\t\tvar shapes = [];\r\n\t\tvar points = [{x:-x,\t y:0},\r\n\t\t\t\t\t  {x:-x,\t y:-this.length+head},\r\n\t\t\t\t\t  {x:-2*x,\t y:-this.length+head},\r\n\t\t\t\t\t  {x:0,\t\t y:-this.length},\r\n\t\t\t\t\t  {x:2*x+odd,y:-this.length+head},\r\n\t\t\t\t\t  {x:x+odd,\t y:-this.length+head},\r\n\t\t\t\t\t  {x:x+odd,\t y:0},\r\n\t\t\t\t\t  {x:-x,\t y:0}];\r\n\t\tshapes[0] = group.createPolyline(points)\r\n\t\t\t\t\t.setStroke(stroke)\r\n\t\t\t\t\t.setFill(color);\r\n\t\tshapes[1] = group.createLine({ x1:-x, y1: 0, x2: -x, y2:-this.length+head })\r\n\t\t\t\t\t.setStroke({color: this.highlight});\r\n\t\tshapes[2] = group.createLine({ x1:-x-3, y1: -this.length+head, x2: 0, y2:-this.length })\r\n\t\t\t\t\t.setStroke({color: this.highlight});\r\n\t\tshapes[3] = group.createCircle({cx: 0, cy: 0, r: this.width})\r\n\t\t\t\t\t.setStroke(stroke)\r\n\t\t\t\t\t.setFill(color);\r\n\t\treturn shapes;\r\n\t}\r\n});\r\n});"]}