{"version":3,"sources":["gauges/_Indicator.js"],"names":["define","lang","declare","fx","html","connect","Widget","dom","domClass","value","type","color","strokeColor","label","font","family","size","length","width","offset","hover","front","easing","_defaultEasing","duration","hideValue","noChange","interactionMode","_gauge","title","startup","this","onDragMove","hitch","undefined","postCreate","style","domNode","isString","getObject","buildRendering","n","srcNodeRef","create","add","innerHTML","place","valueNode","className","_update","_updateValue","animate","Number","draw","_indicatorsGroup","moveIndicator","moveIndicatorToFront","valueChanged","update","handleMouseOver","e","_handleMouseOverIndicator","handleMouseOut","_handleMouseOutIndicator","gaugeContent","cursor","handleMouseDown","_handleMouseDownIndicator","handleTouchStart","handleTouchStartIndicator","Math","floor","dontAnimate","remove","shape","parent","text"],"mappings":"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","file":"../../gauges/_Indicator.js","sourcesContent":["define([\"dojo/_base/lang\",\"dojo/_base/declare\",\"dojo/_base/fx\",\"dojo/_base/html\",\"dojo/_base/connect\",\"dijit/_Widget\",\"dojo/dom-construct\", \"dojo/dom-class\"], \r\nfunction(lang,declare,fx,html,connect,Widget,dom,domClass) {\r\n\r\nreturn declare(\"dojox.gauges._Indicator\",[Widget],{\r\n\t// summary:\r\n\t//\t\tAn indicator to be used in a gauge\r\n\t//\r\n\t// description:\r\n\t//\t\tAn indicator widget, which has given properties.  drawn by a gauge.\r\n\t//\r\n\t// example:\r\n\t//\t|\t<script type=\"text/javascript\">\r\n\t//\t|\t\trequire([\"dojox/gauges/AnalogGauge\",\"dojox/gauges/Indicator\"]);\r\n\t//\t|\t</script>\r\n\t//\t|\t...\r\n\t//\t|\t<div\tdojoType=\"dojox.gauges.AnalogGauge\"\r\n\t//\t|\t\t\tid=\"testGauge\"\r\n\t//\t|\t\t\twidth=\"300\"\r\n\t//\t|\t\t\theight=\"200\"\r\n\t//\t|\t\t\tcx=150\r\n\t//\t|\t\t\tcy=175\r\n\t//\t|\t\t\tradius=125\r\n\t//\t|\t\t\timage=\"gaugeOverlay.png\"\r\n\t//\t|\t\t\timageOverlay=\"false\"\r\n\t//\t|\t\t\timageWidth=\"280\"\r\n\t//\t|\t\t\timageHeight=\"155\"\r\n\t//\t|\t\t\timageX=\"12\"\r\n\t//\t|\t\t\timageY=\"38\">\r\n\t//\t|\t\t<div \tdojoType=\"dojox.gauges.Indicator\"\r\n\t//\t|\t\t\t\tvalue=17\r\n\t//\t|\t\t\t\ttype=\"arrow\"\r\n\t//\t|\t\t\t\tlength=135\r\n\t//\t|\t\t\t\twidth=3\r\n\t//\t|\t\t\t\thover=\"Value: 17\"\r\n\t//\t|\t\t\t\tonDragMove=\"handleDragMove\">\r\n\t//\t|\t\t</div>\r\n\t//\t|\t</div>\r\n\r\n\t// value: Number\r\n\t//\t\tThe value (on the gauge) that this indicator should be placed at\r\n\tvalue: 0,\r\n\r\n\t// type: String\r\n\t//\t\tThe type of indicator to draw.  Varies by gauge type.  Some examples include\r\n\t//\t\t\"line\", \"arrow\", and \"bar\"\r\n\ttype: '',\r\n\r\n\t// color: String\r\n\t//\t\tThe color of the indicator.\r\n\tcolor: 'black',\r\n\t\r\n\t// strokeColor: String\r\n\t//\t\tThe color to stroke the outline of the indicator.\r\n\tstrokeColor: '',\r\n\r\n\t// label: String\r\n\t//\t\tThe text label for the indicator.\r\n\tlabel: '',\r\n\r\n\t// font: Object\r\n\t//\t\tThe font for the indicator. The font is enerally in a format similar to:\r\n\t//\t\t{family: \"Helvetica\", weight: \"bold\", style: \"italic\", size: \"18pt\", rotated: true}\r\n\tfont: {family: \"sans-serif\", size: \"12px\"},\r\n\r\n\t// length: Number\r\n\t//\t\tThe length of the indicator.  In the above example, the radius of the AnalogGauge\r\n\t//\t\tis 125, but the length of the indicator is 135, meaning it would project beyond\r\n\t//\t\tthe edge of the AnalogGauge\r\n\tlength: 0,\r\n\r\n\t// width: Number\r\n\t//\t\tThe width of the indicator.\r\n\twidth: 0,\r\n\r\n\t// offset: Number\r\n\t//\t\tThe offset of the indicator\r\n\toffset: 0,\r\n\r\n\t// hover: String\r\n\t//\t\tThe string to put in the tooltip when this indicator is hovered over.\r\n\thover: '',\r\n\r\n\t// front: boolean\r\n\t//\t\tKeep this indicator at the front\r\n\tfront: false,\r\n\r\n\t// onDragMove: String\r\n\t//\t\tThe function to call when this indicator is moved by dragging.\r\n\t//\t\tonDragMove: '',\r\n\r\n\t// easing: String|Object\r\n\t//\t\tindicates the easing function to be used when animating the of an indicator.\r\n\teasing: fx._defaultEasing,\r\n\r\n\t// duration: Number\r\n\t//\t\tindicates how long an animation of the indicator should take\r\n\tduration: 1000,\r\n\r\n\t// hideValues: Boolean\r\n\t//\t\tIndicates whether the text boxes showing the value of the indicator (as text\r\n\t//\t\tcontent) should be hidden or shown.  Default is not hidden, aka shown.\r\n\thideValue: false,\r\n\r\n\t// noChange: Boolean\r\n\t//\t\tIndicates whether the indicator's value can be changed.  Useful for\r\n\t//\t\ta static target indicator.  Default is false (that the value can be changed).\r\n\tnoChange: false,\r\n\r\n\t// interactionMode: String\r\n\t//\t\tThe interactionMode can have two values: \"indicator\" (the default) or \"gauge\".\r\n\t//\t\tWhen the value is \"indicator\", the user must click on the indicator to change the value.\r\n\t//\t\tWhen the value is \"gauge\", the user can click on the gauge to change the indicator value.\r\n\t//\t\tIf a gauge contains several indicators with the indicatorMode property set to \"gauge\", then\r\n\t//\t\tonly the first indicator will be moved when clicking the gauge.\r\n\tinteractionMode: \"indicator\",\r\n\t\r\n\t_gauge: null,\r\n\t\r\n\t// title: String\r\n\t//\t\t The title of the indicator, to be displayed next to it's input box for the text-representation.\r\n\ttitle: \"\",\r\n\r\n\tstartup: function(){\r\n\t\tif(this.onDragMove){\r\n\t\t\tthis.onDragMove = lang.hitch(this.onDragMove);\r\n\t\t}\r\n\t\tif (this.strokeColor === \"\"){\r\n\t\t\tthis.strokeColor = undefined;\r\n\t\t}\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tif(this.title === \"\"){\r\n\t\t\thtml.style(this.domNode, \"display\", \"none\");\r\n\t\t}\r\n\t\tif(lang.isString(this.easing)){\r\n\t\t\tthis.easing = lang.getObject(this.easing);\r\n\t\t}\r\n\t},\r\n\t\t\r\n\tbuildRendering: function(){\r\n\t\t// summary:\r\n\t\t//\t\tOverrides _Widget.buildRendering\r\n\t\t\r\n\t\tvar n = this.domNode = this.srcNodeRef ? this.srcNodeRef: dom.create(\"div\");\r\n\t\tdomClass.add(n, \"dojoxGaugeIndicatorDiv\");\r\n\t\tvar title = dom.create(\"label\");\r\n\t\tif (this.title) title.innerHTML = this.title + \":\";\r\n\t\tdom.place(title, n);\r\n\t\tthis.valueNode = dom.create(\"input\", {\r\n\t\t\tclassName: \"dojoxGaugeIndicatorInput\",\r\n\t\t\tsize: 5,\r\n\t\t\tvalue: this.value\r\n\t\t});\r\n\t\t\r\n\t\tdom.place(this.valueNode, n);\r\n\t\tconnect.connect(this.valueNode, \"onchange\", this, this._update);\r\n\t},\r\n\t\r\n\t_update: function(){\r\n\t\t// summary:\r\n\t\t//\t\tA private function, handling the updating of the gauge\r\n\r\n\t\tthis._updateValue(true);\r\n\t},\r\n\t\r\n\t_updateValue: function(animate){\r\n\t\t// summary:\r\n\t\t//\t\tA private function, handling the updating of the gauge\r\n\t\tvar value = this.valueNode.value;\r\n\t\tif(value === ''){\r\n\t\t\tthis.value = null;\r\n\t\t}else{\r\n\t\t\tthis.value = Number(value);\r\n\t\t\tthis.hover = this.title+': '+value;\r\n\t\t}\r\n\t\tif(this._gauge){\r\n\t\t\tthis.draw(this._gauge._indicatorsGroup, animate || animate==undefined ? false: true);\r\n\t\t\tthis.valueNode.value = this.value;\r\n\t\t\tif((this.title == 'Target' || this.front) && this._gauge.moveIndicator){\r\n\t\t\t\t// if re-drawing value, make sure target is still on top\r\n\t\t\t\tthis._gauge.moveIndicatorToFront(this);\r\n\t\t\t}\r\n\t\t\tthis.valueChanged();\r\n\t\t}\r\n\t},\r\n\t\r\n\tvalueChanged: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInvoked every time the value of the indicator changes.\r\n\t\r\n\t},\r\n\t \r\n\tupdate: function(value, animate){\r\n\t\t// summary:\r\n\t\t//\t\tUpdates the value of the indicator, including moving/re-drawing at it's new location and\r\n\t\t//\t\tupdating the text box\r\n\t\tif(!this.noChange){\r\n\t\t\tthis.valueNode.value = value;\r\n\t\t\tthis._updateValue(animate);\r\n\t\t}\r\n\t},\r\n\r\n\thandleMouseOver: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tHandles mouse-over events in the indicator.\r\n\t\tthis._gauge._handleMouseOverIndicator(this, e);\r\n\t},\r\n\t\r\n\thandleMouseOut: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tHandles mouse-out events in the indicator.\r\n\t\tthis._gauge._handleMouseOutIndicator(this,e);\r\n\t\tthis._gauge.gaugeContent.style.cursor = '';\r\n\t},\r\n\t\r\n\thandleMouseDown: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tHandles mouse-down events in the indicator.\r\n\t\tthis._gauge._handleMouseDownIndicator(this,e);\r\n\t},\r\n\t\r\n\thandleTouchStart: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tHandles touch start events in the indicator.\r\n\t\tthis._gauge.handleTouchStartIndicator(this, e);\r\n\t},\t\r\n\t\r\n\tonDragMove: function(){\r\n\t\t// summary:\r\n\t\t//\t\tHandles updating the text box and the hover text while dragging an indicator\r\n\t\tthis.value = Math.floor(this.value);\r\n\t\tthis.valueNode.value = this.value;\r\n\t\tthis.hover = this.title+': '+this.value;\r\n\t},\r\n\r\n\tdraw: function(/* Boolean? */ dontAnimate){\r\n\t\t// summary:\r\n\t\t//\t\tPerforms the initial drawing of the indicator.\r\n\t\t// dontAnimate: Boolean\r\n\t\t//\t\tIndicates if the drawing should not be animated (rather than teh default, to animate)\r\n\t},\r\n\r\n\tremove: function(){\r\n\t\t// summary:\r\n\t\t//\t\tRemoves the indicator's shape from the gauge surface.\r\n\t\tif (this.shape)\r\n\t\t\tthis.shape.parent.remove(this.shape);\r\n\t\tthis.shape = null;\r\n\t\tif(this.text){\r\n\t\t\tthis.text.parent.remove(this.text);\r\n\t\t}\r\n\t\tthis.text = null;\r\n\t}\r\n});\r\n});\r\n"]}