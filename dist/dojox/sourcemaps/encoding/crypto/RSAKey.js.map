{"version":3,"sources":["encoding/crypto/RSAKey.js"],"names":["define","kernel","declare","BigInteger","Simple","experimental","defaultRngf","constructor","rngf","this","e","n","d","p","q","dmp1","dmq1","coeff","setPublic","N","E","length","Error","parseInt","encrypt","text","m","s","ba","Array","i","charCodeAt","rng","x","nextBytes","destroy","pkcs1pad2","bitLength","c","modPowInt","h","toString"],"mappings":";;;;;;;AAAAA,QACC,oBACA,qBACA,wBACA,4BACE,SAASC,EAAQC,EAASC,EAAYC,GAExCH,EAAOI,aAAa,gCAMpB,IAAIC,EAAc,WAAY,OAAO,IAAIF,GAwBzC,OAAOF,EAAQ,+BAAgC,MAC9CK,YAAa,SAASC,GAMrBC,KAAKD,KAAOA,GAAQF,EACpBG,KAAKC,EAAI,EACTD,KAAKE,EAAIF,KAAKG,EAAIH,KAAKI,EAAIJ,KAAKK,EAAIL,KAAKM,KAAON,KAAKO,KAAOP,KAAKQ,MAAQ,MAG1EC,UAAW,SAASC,EAAGC,GAGtB,KAAGD,GAAKC,GAAKD,EAAEE,QAAUD,EAAEC,QAI1B,MAAM,IAAIC,MAAM,0BAHhBb,KAAKE,EAAI,IAAIR,EAAWgB,EAAG,IAC3BV,KAAKC,EAAIa,SAASH,EAAG,KAMvBI,QAAS,SAASC,GACjB,IAAIC,EA7CN,SAAmBC,EAAGhB,EAAGH,GACxB,GAAGG,EAAIgB,EAAEN,OAAS,GACjB,MAAM,IAAIC,MAAM,4BAIjB,IAFA,IAAIM,EAAK,IAAIC,MAAMlB,GACfmB,EAAIH,EAAEN,OACJS,GAAKnB,GAAGiB,IAAKjB,GAAKgB,EAAEI,aAAaD,GACvCF,IAAKjB,GAAK,EAGV,IAFA,IAAIqB,EAAMxB,IACNyB,GAAK,GACHtB,EAAI,GAAG,CAEZ,IADAsB,EAAE,GAAK,EACO,GAARA,EAAE,IAASD,EAAIE,UAAUD,GAC/BL,IAAKjB,GAAKsB,EAAE,GAKb,OAHAL,IAAKjB,GAAK,EACViB,IAAKjB,GAAK,EACVqB,EAAIG,UACG,IAAIhC,EAAWyB,GA2BbQ,CAAUX,EAAOhB,KAAKE,EAAE0B,YAAc,GAAM,EAAG5B,KAAKD,MAC5D,IAAIkB,EACH,OAAO,KAER,IAAIY,EAAIZ,EAAEa,UAAU9B,KAAKC,EAAGD,KAAKE,GACjC,IAAI2B,EACH,OAAO,KAER,IAAIE,EAAIF,EAAEG,SAAS,IACnB,OAAOD,EAAEnB,OAAS,EAAI,IAAMmB,EAAIA","file":"../../../encoding/crypto/RSAKey.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"../../math/BigInteger\",\r\n\t\"../../math/random/Simple\"\r\n], function(kernel, declare, BigInteger, Simple) {\r\n\r\n\tkernel.experimental(\"dojox.encoding.crypto.RSAKey\");\r\n\r\n// Copyright (c) 2005  Tom Wu\r\n// All Rights Reserved.\r\n// See \"LICENSE-BigInteger\" in dojox.math for details.\r\n\r\n\tvar defaultRngf = function(){ return new Simple(); };\r\n\r\n\t// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\r\n\tfunction pkcs1pad2(s, n, rngf) {\r\n\t\tif(n < s.length + 11) {\r\n\t\t\tthrow new Error(\"Message too long for RSA\");\r\n\t\t}\r\n\t\tvar ba = new Array(n);\r\n\t\tvar i = s.length;\r\n\t\twhile(i && n) ba[--n] = s.charCodeAt(--i);\r\n\t\tba[--n] = 0;\r\n\t\tvar rng = rngf();\r\n\t\tvar x = [0];\r\n\t\twhile(n > 2) { // random non-zero pad\r\n\t\t\tx[0] = 0;\r\n\t\t\twhile(x[0] == 0) rng.nextBytes(x);\r\n\t\t\tba[--n] = x[0];\r\n\t\t}\r\n\t\tba[--n] = 2;\r\n\t\tba[--n] = 0;\r\n\t\trng.destroy();\r\n\t\treturn new BigInteger(ba);\r\n\t}\r\n\r\n\treturn declare(\"dojox.encoding.crypto.RSAKey\", null, {\r\n\t\tconstructor: function(rngf){\r\n\t\t\t// summary:\r\n\t\t\t//\t\t\"empty\" RSA key constructor\r\n\t\t\t// rndf: Function?\r\n\t\t\t//\t\tfunction that returns an instance of a random number generator\r\n\t\t\t//\t\t(see dojox.math.random for details)\r\n\t\t\tthis.rngf = rngf || defaultRngf;\r\n\t\t\tthis.e = 0;\r\n\t\t\tthis.n = this.d = this.p = this.q = this.dmp1 = this.dmq1 = this.coeff = null;\r\n\t\t},\r\n\r\n\t\tsetPublic: function(N, E){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the public key fields N and e from hex strings\r\n\t\t\tif(N && E && N.length && E.length) {\r\n\t\t\t\tthis.n = new BigInteger(N, 16);\r\n\t\t\t\tthis.e = parseInt(E, 16);\r\n\t\t\t}else{\r\n\t\t\t\tthrow new Error(\"Invalid RSA public key\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tencrypt: function(text){\r\n\t\t\tvar m = pkcs1pad2(text, (this.n.bitLength() + 7) >> 3, this.rngf);\r\n\t\t\tif(!m){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar c = m.modPowInt(this.e, this.n);\r\n\t\t\tif(!c){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar h = c.toString(16);\r\n\t\t\treturn h.length % 2 ? \"0\" + h : h;\r\n\t\t}\r\n\t});\r\n});\r\n"]}