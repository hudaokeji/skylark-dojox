{"version":3,"sources":["encoding/tests/digests/SHA384.js"],"names":["define","doh","ded","SHA384","sha64","vector","console","log","map","item","toString","toHex","toBase64","toWord","test","outputTypes","Raw","register","t","assertEqual","Hex","hmac"],"mappings":";;;;;;;AAAAA,QAAQ,MAAO,sBAAuB,uBAAwB,yBAC5D,SAASC,EAAKC,EAAKC,EAAQC,GAC5B,IAEIC,GACH,WAAY,WAAY,WAAY,WACpC,UAAY,UAAY,UAAY,WACpC,WAAY,WAAY,WAAY,WASrCC,QAAQC,IAAI,UAAWF,EAAOG,IAAI,SAASC,GAC1C,OAASA,GAAQ,GAAM,OAAQC,SAAS,KAAc,MAAPD,GAAeC,SAAS,OAExEJ,QAAQC,IAAIH,EAAMO,MAAMN,IACxBC,QAAQC,IAAIH,EAAMQ,SAASP,IAC3BC,QAAQC,IAAIH,EAAMS,OAnBN,QAqBZ,IAAIC,EAAOX,EArBC,MAqBeD,EAAIa,YAAYC,KAC3CV,QAAQC,IAAI,YAAaO,EAAKN,IAAI,SAASC,GAC1C,OAASA,GAAQ,GAAM,OAAQC,SAAS,KAAc,MAAPD,GAAeC,SAAS,OAExEJ,QAAQC,IAAIH,EAAMO,MAAMG,IACxBR,QAAQC,IAAIH,EAAMQ,SAASE,IAE3Bb,EAAIgB,SAAS,uCACZ,SAA2BC,GAC1BA,EAAEC,YAtBO,mEAsBahB,EA9BZ,SAgCX,SAAwBe,GACvBA,EAAEC,YAxBI,mGAwBahB,EAjCT,MAiCyBD,EAAIa,YAAYK,OAEpD,SAAyBF,GACxBA,EAAEC,YAxBQ,mGAwBahB,EAAOkB,KAzBnB,+BADD,OA0B4CnB,EAAIa,YAAYK","file":"../../../../encoding/tests/digests/SHA384.js","sourcesContent":["define(['doh', '../../digests/_base', '../../digests/SHA384', \"../../digests/_sha-64\"], \r\n\t\tfunction(doh, ded, SHA384, sha64){\r\n\tvar message=\"abc\";\r\n\r\n\tvar vector = [\r\n\t\t0xcb00753f, 0x45a35e8b, 0xb5a03d69, 0x9ac65007, \r\n\t\t0x272c32ab, 0x0eded163, 0x1a8b605a, 0x43ff5bed, \r\n\t\t0x8086072b, 0xa1e7cc23, 0x58baeca1, 0x34c825a7\r\n\t];\r\n\r\n\tvar base64=\"ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP/W+2AhgcroefMI1i67KE0yCWn\";\r\n\tvar hex=\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7\";\r\n\tvar hmacKey=\"Jefe\";\r\n\tvar hmacData=\"what do ya want for nothing?\";\r\n\tvar hmacHex=\"af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649\";\r\n\r\n\tconsole.log(\"Vector:\", vector.map(function(item){\r\n\t\treturn ((item >> 16) & 0xffff).toString(16) + (item & 0xffff).toString(16);\r\n\t}));\r\n\tconsole.log(sha64.toHex(vector));\r\n\tconsole.log(sha64.toBase64(vector));\r\n\tconsole.log(sha64.toWord(message));\r\n\r\n\tvar test = SHA384(message, ded.outputTypes.Raw);\r\n\tconsole.log(\"Message: \", test.map(function(item){\r\n\t\treturn ((item >> 16) & 0xffff).toString(16) + (item & 0xffff).toString(16);\r\n\t}));\r\n\tconsole.log(sha64.toHex(test));\r\n\tconsole.log(sha64.toBase64(test));\r\n\r\n\tdoh.register(\"dojox.encoding.tests.digests.SHA384\", [\r\n\t\tfunction testBase64Compute(t){\r\n\t\t\tt.assertEqual(base64, SHA384(message));\r\n\t\t},\r\n\t\tfunction testHexCompute(t){\r\n\t\t\tt.assertEqual(hex, SHA384(message, ded.outputTypes.Hex));\r\n\t\t},\r\n\t\tfunction testHmacCompute(t){\r\n\t\t\tt.assertEqual(hmacHex, SHA384.hmac(hmacData, hmacKey, ded.outputTypes.Hex));\r\n\t\t}\r\n\t]);\r\n});\r\n"]}