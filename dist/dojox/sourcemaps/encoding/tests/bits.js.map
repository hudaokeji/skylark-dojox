{"version":3,"sources":["encoding/tests/bits.js"],"names":["define","doh","dcb","msg1","msg2","msg3","msg4","s2b","s","b","i","length","push","charCodeAt","b2s","dojo","forEach","c","String","fromCharCode","join","testOut","msg","a","OutputStream","v","j","Math","floor","random","putBits","getBuffer","testIn","InputStream","r","getBits","test","o","getWidth","w","min","register","t","assertEqual"],"mappings":";;;;;;;AAAAA,QAAQ,MAAO,WAAY,SAASC,EAAKC,GACxC,IAAIC,EAAO,+CACPC,EAAO,gDACPC,EAAO,iDACPC,EAAO,kDAEPC,EAAM,SAASC,GAElB,IADA,IAAIC,KACIC,EAAI,EAAGA,EAAIF,EAAEG,SAAUD,EAC9BD,EAAEG,KAAKJ,EAAEK,WAAWH,IAErB,OAAOD,GAGJK,EAAM,SAASL,GAClB,IAAID,KAEJ,OADAO,KAAKC,QAAQP,EAAG,SAASQ,GAAIT,EAAEI,KAAKM,OAAOC,aAAaF,MACjDT,EAAEY,KAAK,KAGXC,EAAU,SAASC,GAEtB,IADA,IAAIC,EAAI,IAAIrB,EAAIsB,aACRd,EAAI,EAAGA,EAAIY,EAAIX,SAAUD,EAAE,CAClC,IAAIe,EAAIH,EAAIT,WAAWH,GACnBgB,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACxCN,EAAEO,QAAQL,IAAO,EAAIC,EAAIA,GACzBH,EAAEO,QAAQL,EAAG,EAAIC,GAElB,OAAOZ,EAAIS,EAAEQ,cAGVC,EAAS,SAASV,GAGrB,IAFA,IAAIC,EAAI,IAAIrB,EAAI+B,YAAY1B,EAAIe,GAAmB,EAAbA,EAAIX,QACtCuB,KACIxB,EAAI,EAAGA,EAAIY,EAAIX,SAAUD,EAAE,CAClC,IAAIgB,EAAIC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EACxCK,EAAEtB,KAAMW,EAAEY,QAAQT,IAAO,EAAIA,EAAMH,EAAEY,QAAQ,EAAIT,IAElD,OAAOZ,EAAIoB,IAGRE,EAAO,SAASd,GAGnB,IAFA,IAAIC,EAAI,IAAIrB,EAAI+B,YAAY1B,EAAIe,GAAmB,EAAbA,EAAIX,QACtC0B,EAAI,IAAInC,EAAIsB,aACVD,EAAEe,WAAa,GAAE,CACtB,IAAIC,EAAIZ,KAAKa,IAAIjB,EAAEe,WAAY,GAC/BD,EAAEP,QAAQP,EAAEY,QAAQI,GAAIA,GAEzB,OAAOzB,EAAIuB,EAAEN,cAGd9B,EAAIwC,SAAS,6BACZ,SAAsBC,GAAIA,EAAEC,YAAYxC,EAAMkB,EAAQlB,KACtD,SAAsBuC,GAAIA,EAAEC,YAAYvC,EAAMiB,EAAQjB,KACtD,SAAsBsC,GAAIA,EAAEC,YAAYtC,EAAMgB,EAAQhB,KACtD,SAAsBqC,GAAIA,EAAEC,YAAYrC,EAAMe,EAAQf,KACtD,SAAqBoC,GAAIA,EAAEC,YAAYxC,EAAM6B,EAAO7B,KACpD,SAAqBuC,GAAIA,EAAEC,YAAYvC,EAAM4B,EAAO5B,KACpD,SAAqBsC,GAAIA,EAAEC,YAAYtC,EAAM2B,EAAO3B,KACpD,SAAqBqC,GAAIA,EAAEC,YAAYrC,EAAM0B,EAAO1B,KACpD,SAAmBoC,GAAIA,EAAEC,YAAYxC,EAAMiC,EAAKjC,KAChD,SAAmBuC,GAAIA,EAAEC,YAAYvC,EAAMgC,EAAKhC,KAChD,SAAmBsC,GAAIA,EAAEC,YAAYtC,EAAM+B,EAAK/B,KAChD,SAAmBqC,GAAIA,EAAEC,YAAYrC,EAAM8B,EAAK9B","file":"../../../encoding/tests/bits.js","sourcesContent":["define(['doh', '../bits'], function(doh, dcb){\r\n\tvar msg1 = \"The rain in Spain falls mainly on the plain.\";\r\n\tvar msg2 = \"The rain in Spain falls mainly on the plain.1\";\r\n\tvar msg3 = \"The rain in Spain falls mainly on the plain.ab\";\r\n\tvar msg4 = \"The rain in Spain falls mainly on the plain.!@#\";\r\n\t\r\n\tvar s2b = function(s){\r\n\t\tvar b = [];\r\n\t\tfor(var i = 0; i < s.length; ++i){\r\n\t\t\tb.push(s.charCodeAt(i));\r\n\t\t}\r\n\t\treturn b;\r\n\t};\r\n\r\n\tvar b2s = function(b){\r\n\t\tvar s = [];\r\n\t\tdojo.forEach(b, function(c){ s.push(String.fromCharCode(c)); });\r\n\t\treturn s.join(\"\");\r\n\t};\r\n\t\r\n\tvar testOut = function(msg){\r\n\t\tvar a = new dcb.OutputStream();\r\n\t\tfor(var i = 0; i < msg.length; ++i){\r\n\t\t\tvar v = msg.charCodeAt(i);\r\n\t\t\tvar j = Math.floor(Math.random() * 7) + 1;\r\n\t\t\ta.putBits(v >>> (8 - j), j);\r\n\t\t\ta.putBits(v, 8 - j);\r\n\t\t}\r\n\t\treturn b2s(a.getBuffer());\r\n\t};\r\n\r\n\tvar testIn = function(msg){\r\n\t\tvar a = new dcb.InputStream(s2b(msg), msg.length * 8);\r\n\t\tvar r = [];\r\n\t\tfor(var i = 0; i < msg.length; ++i){\r\n\t\t\tvar j = Math.floor(Math.random() * 7) + 1;\r\n\t\t\tr.push((a.getBits(j) << (8 - j)) | a.getBits(8 - j));\r\n\t\t}\r\n\t\treturn b2s(r);\r\n\t};\r\n\t\r\n\tvar test = function(msg){\r\n\t\tvar a = new dcb.InputStream(s2b(msg), msg.length * 8);\r\n\t\tvar o = new dcb.OutputStream();\r\n\t\twhile(a.getWidth() > 0){\r\n\t\t\tvar w = Math.min(a.getWidth(), 3);\r\n\t\t\to.putBits(a.getBits(w), w);\r\n\t\t}\r\n\t\treturn b2s(o.getBuffer());\r\n\t};\r\n\r\n\tdoh.register(\"dojox.encoding.tests.bits\", [\r\n\t\tfunction testBitsOut1(t){ t.assertEqual(msg1, testOut(msg1)); },\r\n\t\tfunction testBitsOut2(t){ t.assertEqual(msg2, testOut(msg2)); },\r\n\t\tfunction testBitsOut3(t){ t.assertEqual(msg3, testOut(msg3)); },\r\n\t\tfunction testBitsOut4(t){ t.assertEqual(msg4, testOut(msg4)); },\r\n\t\tfunction testBitsIn1(t){ t.assertEqual(msg1, testIn(msg1)); },\r\n\t\tfunction testBitsIn2(t){ t.assertEqual(msg2, testIn(msg2)); },\r\n\t\tfunction testBitsIn3(t){ t.assertEqual(msg3, testIn(msg3)); },\r\n\t\tfunction testBitsIn4(t){ t.assertEqual(msg4, testIn(msg4)); },\r\n\t\tfunction testBits1(t){ t.assertEqual(msg1, test(msg1)); },\r\n\t\tfunction testBits2(t){ t.assertEqual(msg2, test(msg2)); },\r\n\t\tfunction testBits3(t){ t.assertEqual(msg3, test(msg3)); },\r\n\t\tfunction testBits4(t){ t.assertEqual(msg4, test(msg4)); }\r\n\t]);\r\n});\r\n"]}