{"version":3,"sources":["encoding/digests/_base.js"],"names":["define","lang","base","getObject","outputTypes","Base64","Hex","String","Raw","addWords","a","b","l","stringToWord","s","wa","i","length","charCodeAt","wordToString","push","fromCharCode","join","wordToHex","h","charAt","wordToBase64","t","j","stringToUtf8","input","x","y","output"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,SAASC,GAEpC,IAAIC,EAAOD,EAAKE,UAAU,0BAA0B,GAEpDD,EAAKE,aAGJC,OAAO,EAAGC,IAAI,EAAGC,OAAO,EAAGC,IAAI,GAIhCN,EAAKO,SAAS,SAAmBC,EAAaC,GAG7C,IAAIC,GAAK,MAAFF,IAAa,MAAFC,GAElB,OADOD,GAAG,KAAKC,GAAG,KAAKC,GAAG,KACf,GAAO,MAAFA,GAmFjB,OA1EAV,EAAKW,aAAa,SAAqBC,GAItC,IADA,IAAIC,KACIC,EAAE,EAAGJ,EAPJ,EAOME,EAAEG,OAAcD,EAAEJ,EAAGI,GAP3B,EAQRD,EAAGC,GAAG,KAPC,IAOIF,EAAEI,WAAWF,EARhB,KAQiCA,EAAE,GAE5C,OAAOD,GAGRb,EAAKiB,aAAa,SAAqBJ,GAItC,IADA,IAAID,KACIE,EAAE,EAAGJ,EAAY,GAAVG,EAAGE,OAAWD,EAAEJ,EAAGI,GAjBzB,EAkBRF,EAAEM,KAAKb,OAAOc,aAAcN,EAAGC,GAAG,KAAMA,EAAE,GAjBnC,MAmBR,OAAOF,EAAEQ,KAAK,KAGfpB,EAAKqB,UAAU,SAAqBR,GAInC,IADA,IAAIS,EAAE,mBAAoBV,KAClBE,EAAE,EAAGJ,EAAY,EAAVG,EAAGE,OAAUD,EAAEJ,EAAGI,IAChCF,EAAEM,KAAKI,EAAEC,OAAQV,EAAGC,GAAG,IAAMA,EAAE,EAAG,EAAE,EAAI,IAAKQ,EAAEC,OAAQV,EAAGC,GAAG,IAAMA,EAAE,EAAG,EAAI,KAE7E,OAAOF,EAAEQ,KAAK,KAGfpB,EAAKwB,aAAa,SAAqBX,GAKtC,IADA,IAAmFD,KAC3EE,EAAE,EAAGJ,EAAY,EAAVG,EAAGE,OAAUD,EAAEJ,EAAGI,GAAG,EAEnC,IADA,IAAIW,GAAKZ,EAAGC,GAAG,IAAOA,EAAE,EAAL,EAAS,MAAO,IAAOD,EAAGC,EAAE,GAAG,KAAQA,EAAE,GAAG,EAAT,EAAa,MAAO,EAAKD,EAAGC,EAAE,GAAG,KAAQA,EAAE,GAAG,EAAT,EAAa,IAChGY,EAAE,EAAGA,EAAE,EAAGA,IACZ,EAAFZ,EAAM,EAAFY,EAAc,GAAVb,EAAGE,OACbH,EAAEM,KALC,KAOHN,EAAEM,KAPU,mEAODK,OAAQE,GAAG,GAAG,EAAEC,GAAI,KAIlC,OAAOd,EAAEQ,KAAK,KAIfpB,EAAK2B,aAAe,SAASC,GAK5B,IAJA,IAEIC,EAAGC,EAFHC,EAAS,GACTjB,GAAK,IAGDA,EAAIc,EAAMb,QACjBc,EAAID,EAAMZ,WAAWF,GACrBgB,EAAIhB,EAAI,EAAIc,EAAMb,OAASa,EAAMZ,WAAWF,EAAI,GAAK,EAClD,OAAUe,GAAKA,GAAK,OAAU,OAAUC,GAAKA,GAAK,QACpDD,EAAI,QAAgB,KAAJA,IAAe,KAAW,KAAJC,GACtChB,KAGEe,GAAK,IACPE,GAAU1B,OAAOc,aAAaU,GACvBA,GAAK,KACZE,GAAU1B,OAAOc,aAAa,IAASU,IAAM,EAAK,GAAO,IAAY,GAAJA,GAC1DA,GAAK,MACZE,GAAU1B,OAAOc,aAAa,IAASU,IAAM,GAAM,GAAO,IAASA,IAAM,EAAK,GAAO,IAAY,GAAJA,GACtFA,GAAK,UACZE,GAAU1B,OAAOc,aAAa,IAASU,IAAM,GAAM,EAAO,IAASA,IAAM,GAAM,GAAO,IAASA,IAAM,EAAK,GAAO,IAAY,GAAJA,IAE3H,OAAOE,GAGD/B","file":"../../../encoding/digests/_base.js","sourcesContent":["define([\"dojo/_base/lang\"], function(lang){\r\n\t//\tThese functions are 32-bit word-based.  See _sha-64 for 64-bit word ops.\r\n\tvar base = lang.getObject(\"dojox.encoding.digests\", true);\r\n\r\n\tbase.outputTypes={\r\n\t\t// summary:\r\n\t\t//\t\tEnumeration for input and output encodings.\r\n\t\tBase64:0, Hex:1, String:2, Raw:3\r\n\t};\r\n\r\n\t//\tword-based addition\r\n\tbase.addWords=function(/* word */a, /* word */b){\r\n\t\t// summary:\r\n\t\t//\t\tadd a pair of words together with rollover\r\n\t\tvar l=(a&0xFFFF)+(b&0xFFFF);\r\n\t\tvar m=(a>>16)+(b>>16)+(l>>16);\r\n\t\treturn (m<<16)|(l&0xFFFF);\t//\tword\r\n\t};\r\n\r\n\t//\tword-based conversion method, for efficiency sake;\r\n\t//\tmost digests operate on words, and this should be faster\r\n\t//\tthan the encoding version (which works on bytes).\r\n\tvar chrsz=8;\t//\t16 for Unicode\r\n\tvar mask=(1<<chrsz)-1;\r\n\r\n\tbase.stringToWord=function(/* string */s){\r\n\t\t// summary:\r\n\t\t//\t\tconvert a string to a word array\r\n\t\tvar wa=[];\r\n\t\tfor(var i=0, l=s.length*chrsz; i<l; i+=chrsz){\r\n\t\t\twa[i>>5]|=(s.charCodeAt(i/chrsz)&mask)<<(i%32);\r\n\t\t}\r\n\t\treturn wa;\t//\tword[]\r\n\t};\r\n\r\n\tbase.wordToString=function(/* word[] */wa){\r\n\t\t// summary:\r\n\t\t//\t\tconvert an array of words to a string\r\n\t\tvar s=[];\r\n\t\tfor(var i=0, l=wa.length*32; i<l; i+=chrsz){\r\n\t\t\ts.push(String.fromCharCode((wa[i>>5]>>>(i%32))&mask));\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\tbase.wordToHex=function(/* word[] */wa){\r\n\t\t// summary:\r\n\t\t//\t\tconvert an array of words to a hex tab\r\n\t\tvar h=\"0123456789abcdef\", s=[];\r\n\t\tfor(var i=0, l=wa.length*4; i<l; i++){\r\n\t\t\ts.push(h.charAt((wa[i>>2]>>((i%4)*8+4))&0xF)+h.charAt((wa[i>>2]>>((i%4)*8))&0xF));\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\tbase.wordToBase64=function(/* word[] */wa){\r\n\t\t// summary:\r\n\t\t//\t\tconvert an array of words to base64 encoding, should be more efficient\r\n\t\t//\t\tthan using dojox.encoding.base64\r\n\t\tvar p=\"=\", tab=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", s=[];\r\n\t\tfor(var i=0, l=wa.length*4; i<l; i+=3){\r\n\t\t\tvar t=(((wa[i>>2]>>8*(i%4))&0xFF)<<16)|(((wa[i+1>>2]>>8*((i+1)%4))&0xFF)<<8)|((wa[i+2>>2]>>8*((i+2)%4))&0xFF);\r\n\t\t\tfor(var j=0; j<4; j++){\r\n\t\t\t\tif(i*8+j*6>wa.length*32){\r\n\t\t\t\t\ts.push(p);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts.push(tab.charAt((t>>6*(3-j))&0x3F));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn s.join(\"\");\t//\tstring\r\n\t};\r\n\r\n\t//\tconvert to UTF-8\r\n\tbase.stringToUtf8 = function(input){\r\n\t\tvar output = \"\";\r\n\t\tvar i = -1;\r\n\t\tvar x, y;\r\n\r\n\t\twhile(++i < input.length){\r\n\t\t\tx = input.charCodeAt(i);\r\n\t\t\ty = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n\t\t\tif(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF){\r\n\t\t\t\tx = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\r\n\t\t\tif(x <= 0x7F)\r\n\t\t\t\toutput += String.fromCharCode(x);\r\n\t\t\telse if(x <= 0x7FF)\r\n\t\t\t\toutput += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F), 0x80 | (x & 0x3F));\r\n\t\t\telse if(x <= 0xFFFF)\r\n\t\t\t\toutput += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));\r\n\t\t\telse if(x <= 0x1FFFFF)\r\n\t\t\t\toutput += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07), 0x80 | ((x >>> 12) & 0x3F), 0x80 | ((x >>> 6) & 0x3F), 0x80 | (x & 0x3F));\r\n\t\t}\r\n\t\treturn output;\r\n\t};\r\n\r\n\treturn base;\r\n});\r\n"]}