{"version":3,"sources":["json/tests/ref.js"],"names":["dojo","provide","require","doh","register","t","mirrorObj","dojox","json","ref","fromJson","assertEqual","a","c","f","b","testObj","has space","d","arrayItem","array","g","h","toJson","__id","x","obj","b1","b2","hasOwnProperty","is","schemas","/dog/","prototype","barks","properties","aTime","format","/cat/","meows","Date","eats","foo","me","first"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,wBACbD,KAAKE,QAAQ,kBAEbC,IAAIC,SAAS,wBACZ,SAAqBC,GACpB,IAEIC,EAAYC,MAAMC,KAAKC,IAAIC,SAFjB,+HAGdL,EAAEM,YAAYL,EAAWA,EAAUM,GACnCP,EAAEM,YAAYL,EAAUO,EAAGP,EAAUO,EAAEC,GACvCT,EAAEM,YAAYL,EAAUO,EAAGP,EAAUS,GACrCV,EAAEM,YAAYL,EAAU,YAAa,aAEtC,SAA0BD,GACzB,IAAIW,GAAWJ,KAAKG,GAAGE,iBACvBD,EAAQJ,EAAEM,EAAGF,EACb,IAAIG,EAAYH,EAAQI,WACxBD,EAAU,GAAKA,EAAU,GACzBH,EAAQD,EAAEM,EAAEL,EAAQJ,EACpBI,EAAQD,EAAE,aAAaD,EAAIE,EAAQD,EACnCC,EAAQD,EAAEO,EAAEN,EAAQJ,EACpB,IAAIN,EAAYC,MAAMC,KAAKC,IAAIC,SAASH,MAAMC,KAAKC,IAAIc,OAAOP,IAC9DX,EAAEM,YAAYL,EAAUM,EAAEM,EAAGZ,GAC7BD,EAAEM,YAAYL,EAAUS,EAAEM,EAAGf,EAAUM,GACvCP,EAAEM,YAAYL,EAAUS,EAAE,aAAaD,EAAGR,EAAUS,GACpDV,EAAEM,YAAYL,EAAUS,EAAEO,EAAGhB,EAAUM,GACvCP,EAAEM,YAAYL,EAAUc,MAAM,GAAId,EAAUc,MAAM,KAEnD,SAA4Bf,GAG1B,IAAIU,GAAKS,KAAM,MAAOC,EAAG,GACzBC,GAAOd,EAAG,EAAGe,GAAIZ,EAAGa,GAAIb,GACxBR,MAAMC,KAAKC,IAAIc,OAAOG,GACtBrB,EAAES,EAAEY,EAAIG,eAAe,QAAS,0BAChCxB,EAAEA,EAAEqB,EAAIC,KAAOZ,EAAG,gBAClBV,EAAEA,EAAEqB,EAAIE,KAAOb,EAAG,gBAClBV,EAAEyB,GAAG,MAAOf,EAAES,KAAM,WAEtB,SAAsBnB,GACrB,IAKIW,EAAUT,MAAMC,KAAKC,IAAIC,SALf,wEAMbqB,SAJAC,SAASC,WAAWC,OAAM,GAAMC,YAAYC,OAAOC,OAAO,eAC1DC,SAASL,WAAWM,OAAM,OAK3BlC,EAAEA,EAAEW,EAAQkB,OACZ7B,EAAEA,EAAEW,EAAQoB,iBAAiBI,MAC7BnC,EAAEA,EAAEW,EAAQyB,KAAKF,QAElB,SAAyBlC,GACxB,IACIC,EAAYC,MAAMC,KAAKC,IAAIC,SADjB,6DAEdL,EAAEyB,GAAGxB,EAAU,GAAGoC,IAAI,OACtBrC,EAAEyB,GAAGxB,EAAU,GAAGA,EAAU,GAAGqC,IAC/BtC,EAAEyB,GAAGxB,EAAU,GAAGA,EAAU,GAAGsC","file":"../../../json/tests/ref.js","sourcesContent":["dojo.provide(\"dojox.json.tests.ref\");\r\ndojo.require(\"dojox.json.ref\");\r\n\r\ndoh.register(\"dojox.json.tests.ref\", [\r\n\tfunction fromRefJson(t) {\r\n\t\tvar testStr = '{a:{$ref:\"#\"},id:\"root\",c:{d:\"e\",f:{$ref:\"root.c\"}},b:{$ref:\"#.c\"},\"an array\":[\"a string\"],\"a string\":{$ref:\"#an array.0\"}}';\r\n\r\n\t\tvar mirrorObj = dojox.json.ref.fromJson(testStr);\r\n\t\tt.assertEqual(mirrorObj, mirrorObj.a);\r\n\t\tt.assertEqual(mirrorObj.c, mirrorObj.c.f);\r\n\t\tt.assertEqual(mirrorObj.c, mirrorObj.b);\r\n\t\tt.assertEqual(mirrorObj[\"a string\"], \"a string\");\r\n\t},\r\n\tfunction toAndFromRefJson(t) {\r\n\t\tvar testObj = {a:{},b:{\"has space\":{}}};\r\n\t\ttestObj.a.d= testObj;\r\n\t\tvar arrayItem = testObj.array = [{}];\r\n\t\tarrayItem[1] = arrayItem[0];\r\n\t\ttestObj.b.g=testObj.a;\r\n\t\ttestObj.b[\"has space\"].f = testObj.b;\r\n\t\ttestObj.b.h=testObj.a;\r\n\t\tvar mirrorObj = dojox.json.ref.fromJson(dojox.json.ref.toJson(testObj));\r\n\t\tt.assertEqual(mirrorObj.a.d, mirrorObj);\r\n\t\tt.assertEqual(mirrorObj.b.g, mirrorObj.a);\r\n\t\tt.assertEqual(mirrorObj.b[\"has space\"].f, mirrorObj.b);\r\n\t\tt.assertEqual(mirrorObj.b.h, mirrorObj.a);\r\n\t\tt.assertEqual(mirrorObj.array[0], mirrorObj.array[1]);\r\n\t},\r\n\tfunction toJsonGeneratedIds(t){ \r\n\t\t// Make obj reference b twice to ensure that there is at least one $ref \r\n\t\t// from obj to b. \r\n\t \tvar b = {__id: 'bId', x: 2}, \r\n\t \tobj = {a: 1, b1: b, b2: b}; \r\n\t \tdojox.json.ref.toJson(obj); \r\n\t \tt.f(obj.hasOwnProperty('__id'), 'obj has __id property.'); \r\n\t \tt.t(obj.b1 === b, 'obj.b1 !== b'); \r\n\t \tt.t(obj.b2 === b, 'obj.b2 !== b'); \r\n\t \tt.is('bId', b.__id, 'b.__id'); \r\n\t}, \r\n\tfunction usingSchemas(t) {\r\n\t\tvar testStr = '{id:\"/dog/1\",eats:{$ref:\"/cat/2\"},aTime:\"2008-11-07T20:26:17-07:00\"}';\r\n\t\tvar schemas = {\r\n\t\t\t\"/dog/\":{prototype:{barks:true},properties:{aTime:{format:'date-time'}}},\r\n\t\t\t\"/cat/\":{prototype:{meows:true}}\r\n\t\t}\r\n\t\tvar testObj = dojox.json.ref.fromJson(testStr,{\r\n\t\t\tschemas:schemas\r\n\t\t});\r\n\t\tt.t(testObj.barks);\r\n\t\tt.t(testObj.aTime instanceof Date);\r\n\t\tt.t(testObj.eats.meows);\r\n\t},\r\n\tfunction secondLevelLazy(t) {\r\n\t\tvar testStr = '[{$ref:1,foo:\"bar\"},{$ref:2, me:{$ref:2},first:{$ref:1}}]';\r\n\t\tvar mirrorObj = dojox.json.ref.fromJson(testStr);\r\n\t\tt.is(mirrorObj[0].foo,\"bar\");\r\n\t\tt.is(mirrorObj[1],mirrorObj[1].me);\r\n\t\tt.is(mirrorObj[0],mirrorObj[1].first);\r\n\t}\r\n\t\r\n\t/*,\r\n\tfunction performanceTest(t) {\r\n\t\tvar normalishJson= '[{\"id\":\"1\",\t\"created\":\"2007-10-23T14:40:18Z\",\"address\":\"somewhere\",\"phoneNumber\":\"555-5555\",\"comment\":\"this is great\",\t\"firstName\":\"Jim\",\t\"lastName\":\"Jones\"},{\"id\":\"20\",\"created\":\"2008-06-03T19:45:12Z\",\t\"firstName\":\"Kristopher\",\t\"lastName\":\"dddddd\"\t},{\"id\":\"23\",\t\"foo\":\"ba=sr\",\t\"firstName\":\"Jennika\",\t\"lastName\":\"Zyp\"\t}]';\r\n\t\tvar now = new Date().getTime();\r\n\t\tfor(var i=0;i<1000;i++){\r\n\t\t}\r\n\t\tconsole.log(\"Just Loop\",new Date().getTime()-now);\r\n\t\tnow = new Date().getTime();\r\n\t\tvar result;\r\n\t\tfor(i=0;i<1000;i++){\r\n\t\t\tresult = dojo.fromJson(normalishJson);\r\n\t\t}\r\n\t\tconsole.log(\"Normal fromJson\",new Date().getTime()-now, result, normalishJson.length);\r\n\t\tnow = new Date().getTime();\r\n\t\tfor(i=0;i<1000;i++){\r\n\t\t\tresult = dojox.json.ref.fromJson(normalishJson);\r\n\t\t}\r\n\t\tconsole.log(\"JSON Referencing toJson\",new Date().getTime()-now, result);\r\n\t}*/\r\n]);\r\n"]}