{"version":3,"sources":["calendar/StoreMixin.js"],"names":["define","declare","arr","html","lang","domClass","Stateful","when","store","query","queryOptions","startTimeAttr","endTimeAttr","summaryAttr","allDayAttr","subColumnAttr","cssClassFunc","decodeDate","encodeDate","displayedItemsInvalidated","itemToRenderItem","item","this","owner","id","getIdentity","summary","startTime","newDate","dateClassObj","endTime","allDay","subColumn","cssClass","renderItemToItem","renderItem","idProperty","getItemStoreState","mixin","_item","_computeVisibleItems","renderData","items","storeManager","_initItems","set","_refreshItemsRendering","_setStoreAttr","value","_getItemStoreStateObj","_cleanItemStoreState","_setItemStoreState","state"],"mappings":";;;;;;;AAAAA,QAAQ,qBAAsB,mBAAoB,kBAAmB,kBAAmB,iBACvF,gBAAiB,aACjB,SAASC,EAASC,EAAKC,EAAMC,EAAMC,EAAUC,EAAUC,GAEvD,OAAON,EAAQ,4BAA6BK,GAO3CE,MAAO,KAIPC,SAIAC,aAAc,KAKdC,cAAe,YAKfC,YAAa,UAKbC,YAAa,UAKbC,WAAY,SAKZC,cAAe,WAIfC,aAAc,KAIdC,WAAY,KAIZC,WAAY,KAOZC,2BAA2B,EAE3BC,iBAAkB,SAASC,EAAMb,GAiBhC,OAAGc,KAAKC,MACAD,KAAKC,MAAMH,iBAAiBC,EAAMb,IAGzCgB,GAAIhB,EAAMiB,YAAYJ,GACtBK,QAASL,EAAKC,KAAKT,aACnBc,UAAYL,KAAKL,YAAcK,KAAKL,WAAWI,EAAKC,KAAKX,iBAAoBW,KAAKM,QAAQP,EAAKC,KAAKX,eAAgBW,KAAKO,cACzHC,QAAUR,KAAKL,YAAcK,KAAKL,WAAWI,EAAKC,KAAKV,eAAkBU,KAAKM,QAAQP,EAAKC,KAAKV,aAAcU,KAAKO,cACnHE,OAAiC,MAAzBV,EAAKC,KAAKR,aAAsBO,EAAKC,KAAKR,YAClDkB,UAAWX,EAAKC,KAAKP,eACrBkB,SAAUX,KAAKN,aAAeM,KAAKN,aAAaK,GAAQ,OAI1Da,iBAAkB,SAAoBC,EAAqC3B,GAkB1E,GAAGc,KAAKC,MACP,OAAOD,KAAKC,MAAMW,iBAAiBC,EAAY3B,GAEhD,IAAIa,KAQJ,OAPAA,EAAKb,EAAM4B,YAAcD,EAAWX,GACpCH,EAAKC,KAAKT,aAAesB,EAAWT,QACpCL,EAAKC,KAAKX,eAAkBW,KAAKJ,YAAcI,KAAKJ,WAAWiB,EAAWR,YAAeQ,EAAWR,UACpGN,EAAKC,KAAKV,aAAgBU,KAAKJ,YAAcI,KAAKJ,WAAWiB,EAAWL,UAAaK,EAAWL,QAC7FK,EAAWH,YACbX,EAAKC,KAAKP,eAAiBoB,EAAWH,WAEO,aAAvCV,KAAKe,kBAAkBF,GAA6Bd,EAAOjB,EAAKkC,MAAMH,EAAWI,MAAOlB,IAGhGmB,qBAAsB,SAASC,GAQ9B,GAAGnB,KAAKC,MACP,OAAOD,KAAKC,MAAMiB,qBAAqBC,GAExCA,EAAWC,MAAQpB,KAAKqB,aAAaH,qBAAqBC,IAG3DG,WAAY,SAASF,GAIpB,OADApB,KAAKuB,IAAI,QAASH,GACXA,GAGRI,uBAAwB,SAASL,KAGjCM,cAAe,SAASC,GAEvB,OADA1B,KAAKd,MAAQwC,EACN1B,KAAKqB,aAAaE,IAAI,QAASG,IAGvCC,sBAAuB,SAAmB5B,GAGzC,OAAOC,KAAKqB,aAAaM,sBAAsB5B,IAGhDgB,kBAAmB,SAAShB,GAa3B,OAAOC,KAAKqB,aAAaN,kBAAkBhB,IAG5C6B,qBAAsB,SAAS1B,GAC9BF,KAAKqB,aAAaO,qBAAqB1B,IAGxC2B,mBAAoB,SAAmB9B,EAAgB+B,GAGtD9B,KAAKqB,aAAaQ,mBAAmB9B,EAAM+B","file":"../../calendar/StoreMixin.js","sourcesContent":["define([\"dojo/_base/declare\", \"dojo/_base/array\", \"dojo/_base/html\", \"dojo/_base/lang\", \"dojo/dom-class\",\r\n\t\"dojo/Stateful\", \"dojo/when\"],\r\n\tfunction(declare, arr, html, lang, domClass, Stateful, when){\r\n\r\n\treturn declare(\"dojox.calendar.StoreMixin\", Stateful, {\r\n\t\t\r\n\t\t// summary:\r\n\t\t//\t\tThis mixin contains the store management.\r\n\t\t\r\n\t\t// store: dojo.store.Store\r\n\t\t//\t\tThe store that contains the events to display.\r\n\t\tstore: null,\r\n\t\t\r\n\t\t// query: Object\r\n\t\t//\t\tA query that can be passed to when querying the store.\r\n\t\tquery: {},\r\n\r\n\t\t// queryOptions: dojo/store/api/Store.QueryOptions?\r\n\t\t//\t\tOptions to be applied when querying the store.\r\n\t\tqueryOptions: null,\r\n\r\n\t\t// startTimeAttr: String\r\n\t\t//\t\tThe attribute of the store item that contains the start time of \r\n\t\t//\t\tthe events represented by this item.\tDefault is \"startTime\". \r\n\t\tstartTimeAttr: \"startTime\",\r\n\t\t\r\n\t\t// endTimeAttr: String\r\n\t\t//\t\tThe attribute of the store item that contains the end time of \r\n\t\t//\t\tthe events represented by this item.\tDefault is \"endTime\".\r\n\t\tendTimeAttr: \"endTime\",\r\n\t\t\r\n\t\t// summaryAttr: String\r\n\t\t//\t\tThe attribute of the store item that contains the summary of \r\n\t\t//\t\tthe events represented by this item.\tDefault is \"summary\".\r\n\t\tsummaryAttr: \"summary\",\r\n\t\t\r\n\t\t// allDayAttr: String\r\n\t\t//\t\tThe attribute of the store item that contains the all day state of \r\n\t\t//\t\tthe events represented by this item.\tDefault is \"allDay\".\r\n\t\tallDayAttr: \"allDay\",\r\n\t\t\r\n\t\t// subColumnAttr: String\r\n\t\t//\t\tThe attribute of the store item that contains the sub column name of \r\n\t\t//\t\tthe events represented by this item.\tDefault is \"calendar\".\r\n\t\tsubColumnAttr: \"calendar\",\r\n\t\r\n\t\t// cssClassFunc: Function\r\n\t\t//\t\tOptional function that returns a css class name to apply to item renderers that are displaying the specified item in parameter. \r\n\t\tcssClassFunc: null,\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t// decodeDate: Function?\r\n\t\t//\t\tAn optional function to transform store date into Date objects.\tDefault is null. \r\n\t\tdecodeDate: null,\r\n\t\t\r\n\t\t// encodeDate: Function?\r\n\t\t//\t\tAn optional function to transform Date objects into store date.\tDefault is null. \r\n\t\tencodeDate: null,\r\n\t\t\r\n\t\t// displayedItemsInvalidated: Boolean\r\n\t\t//\t\tWhether the data items displayed must be recomputed, usually after the displayed \r\n\t\t//\t\ttime range has changed. \r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\t\tdisplayedItemsInvalidated: false,\r\n\t\t\t\t\t\t\t\t\t\r\n\t\titemToRenderItem: function(item, store){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates the render item based on the dojo.store item. It must be of the form:\r\n\t\t\t//\t|\t{\r\n\t\t\t//  |\t\tid: Object,\r\n\t\t\t//\t|\t\tstartTime: Date,\r\n\t\t\t//\t|\t\tendTime: Date,\r\n\t\t\t//\t|\t\tsummary: String\r\n\t\t\t//\t|\t}\r\n\t\t\t//\t\tBy default it is building an object using the store id, the summaryAttr, \r\n\t\t\t//\t\tstartTimeAttr and endTimeAttr properties as well as decodeDate property if not null. \r\n\t\t\t//\t\tOther fields or way to query fields can be used if needed.\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe store item. \r\n\t\t\t// store: dojo.store.api.Store\r\n\t\t\t//\t\tThe store.\r\n\t\t\t// returns: Object\r\n\t\t\tif(this.owner){\r\n\t\t\t\treturn this.owner.itemToRenderItem(item, store);\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tid: store.getIdentity(item),\r\n\t\t\t\tsummary: item[this.summaryAttr],\r\n\t\t\t\tstartTime: (this.decodeDate && this.decodeDate(item[this.startTimeAttr])) || this.newDate(item[this.startTimeAttr], this.dateClassObj),\r\n\t\t\t\tendTime: (this.decodeDate && this.decodeDate(item[this.endTimeAttr])) || this.newDate(item[this.endTimeAttr], this.dateClassObj),\r\n\t\t\t\tallDay: item[this.allDayAttr] != null ? item[this.allDayAttr] : false,\r\n\t\t\t\tsubColumn: item[this.subColumnAttr],   \r\n\t\t\t\tcssClass: this.cssClassFunc ? this.cssClassFunc(item) : null \r\n\t\t\t};\r\n\t\t},\r\n\t\t\r\n\t\trenderItemToItem: function(/*Object*/ renderItem, /*dojo.store.api.Store*/ store){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a store item based on the render item. It must be of the form:\r\n\t\t\t//\t|\t{\r\n\t\t\t//\t|\t\tid: Object\r\n\t\t\t//\t|\t\tstartTime: Date,\r\n\t\t\t//\t|\t\tendTime: Date,\r\n\t\t\t//\t|\t\tsummary: String\r\n\t\t\t//\t|\t}\r\n\t\t\t//\t\tBy default it is building an object using the summaryAttr, startTimeAttr and endTimeAttr properties\r\n\t\t\t//\t\tand encodeDate property if not null. If the encodeDate property is null a Date object will be set in the start and end time.\r\n\t\t\t//\t\tWhen using a JsonRest store, for example, it is recommended to transfer dates using the ISO format (see dojo.date.stamp).\r\n\t\t\t//\t\tIn that case, provide a custom function to the encodeDate property that is using the date ISO encoding provided by Dojo. \r\n\t\t\t// renderItem: Object\r\n\t\t\t//\t\tThe render item. \r\n\t\t\t// store: dojo.store.api.Store\r\n\t\t\t//\t\tThe store.\r\n\t\t\t// returns:Object\r\n\t\t\tif(this.owner){\r\n\t\t\t\treturn this.owner.renderItemToItem(renderItem, store);\r\n\t\t\t}\r\n\t\t\tvar item = {};\r\n\t\t\titem[store.idProperty] = renderItem.id;\r\n\t\t\titem[this.summaryAttr] = renderItem.summary;\r\n\t\t\titem[this.startTimeAttr] = (this.encodeDate && this.encodeDate(renderItem.startTime)) || renderItem.startTime;\r\n\t\t\titem[this.endTimeAttr] = (this.encodeDate && this.encodeDate(renderItem.endTime)) || renderItem.endTime;\r\n\t\t\tif(renderItem.subColumn){\r\n\t\t\t\titem[this.subColumnAttr] = renderItem.subColumn;\r\n\t\t\t}\r\n\t\t\treturn this.getItemStoreState(renderItem) === \"unstored\" ? item : lang.mixin(renderItem._item, item);\r\n\t\t},\t\t\t\r\n\t\t\r\n\t\t_computeVisibleItems: function(renderData){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tComputes the data items that are in the displayed interval.\r\n\t\t\t// renderData: Object\r\n\t\t\t//\t\tThe renderData that contains the start and end time of the displayed interval.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tif(this.owner){\r\n\t\t\t\treturn this.owner._computeVisibleItems(renderData);\r\n\t\t\t}\r\n\t\t\trenderData.items = this.storeManager._computeVisibleItems(renderData);\r\n\t\t},\r\n\t\t\r\n\t\t_initItems: function(items){\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.set(\"items\", items);\r\n\t\t\treturn items;\r\n\t\t},\r\n\t\t\r\n\t\t_refreshItemsRendering: function(renderData){\r\n\t\t},\r\n\t\t\r\n\t\t_setStoreAttr: function(value){\r\n\t\t\tthis.store = value;\r\n\t\t\treturn this.storeManager.set(\"store\", value);\t\t\r\n\t\t},\r\n\t\t\r\n\t\t_getItemStoreStateObj: function(/*Object*/item){\r\n\t\t\t// tags\r\n\t\t\t//\t\tprivate\r\n\t\t\treturn this.storeManager._getItemStoreStateObj(item);\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\tgetItemStoreState: function(item){\r\n\t\t\t//\tsummary:\r\n\t\t\t//\t\tReturns the creation state of an item. \r\n\t\t\t//\t\tThis state is changing during the interactive creation of an item.\r\n\t\t\t//\t\tValid values are:\r\n\t\t\t//\t\t- \"unstored\": The event is being interactively created. It is not in the store yet.\r\n\t\t\t//\t\t- \"storing\": The creation gesture has ended, the event is being added to the store.\r\n\t\t\t//\t\t- \"stored\": The event is not in the two previous states, and is assumed to be in the store \r\n\t\t\t//\t\t(not checking because of performance reasons, use store API for testing existence in store).\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item.\r\n\t\t\t// returns: String\r\n\t\t\t\r\n\t\t\treturn this.storeManager.getItemStoreState(item);\r\n\t\t},\r\n\t\t\r\n\t\t_cleanItemStoreState: function(id){\t\t\t\r\n\t\t\tthis.storeManager._cleanItemStoreState(id);\t\t\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\t_setItemStoreState: function(/*Object*/item, /*String*/state){\r\n\t\t\t// tags\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.storeManager._setItemStoreState(item, state);\t\t\t\r\n\t\t}\r\n\t\t\t\t\r\n\t});\r\n\r\n});\r\n"]}