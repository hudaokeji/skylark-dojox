{"version":3,"sources":["calendar/time.js"],"names":["define","lang","date","cldr","stamp","time","newDate","obj","dateClassObj","d","Date","getTime","toGregorian","fromISOString","Error","floorToDay","reuse","setHours","floorToMonth","setDate","floorToWeek","dateModule","firstDayOfWeek","locale","fd","undefined","getFirstDayOfWeek","day","getDay","add","floor","unit","steps","getHours","setMinutes","Math","getMinutes","isStartOfDay","compare","this","isToday","today","getFullYear","getMonth","getDate","isOverlapping","renderData","start1","end1","start2","end2","includeLimits","cal"],"mappings":";;;;;;;AAAAA,QAAQ,kBAAmB,YAAa,yBAAyB,mBAAoB,SAASC,EAAMC,EAAMC,EAAMC,GAIhH,IAAIC,GAGJC,QAAe,SAASC,EAAKC,GAa5B,IAAIC,EAEJ,GAHAD,EAAeA,GAAgBE,KAGb,iBAAT,EACR,OAAO,IAAIF,EAAaD,GACnB,GAAGA,EAAII,QACZ,OAAO,IAAIH,EAAaD,EAAII,WACvB,GAAGJ,EAAIK,YAKZ,OAJAH,EAAIF,EAAIK,cACLJ,IAAiBE,OACnBD,EAAI,IAAID,EAAaC,EAAEE,YAEjBF,EACF,GAAiB,iBAAPF,EAAgB,CAE/B,GAAS,QADTE,EAAIL,EAAMS,cAAcN,IAEvB,MAAM,IAAIO,MAAM,6BAA6BP,EAAI,qFAIlD,OAHSC,IAAiBE,OACzBD,EAAI,IAAID,EAAaC,EAAEE,YAEjBF,IAKTM,WAAkB,SAASN,EAAGO,EAAOR,GAkBpC,OARAA,EAAeA,GAAgBE,KAE3BM,IACHP,EAAIJ,EAAKC,QAAQG,EAAGD,IAGrBC,EAAEQ,SAAS,EAAG,EAAG,EAAG,GAEbR,GAGRS,aAAoB,SAAST,EAAGO,EAAOR,GAmBtC,OATAA,EAAeA,GAAgBE,KAE3BM,IACHP,EAAIJ,EAAKC,QAAQG,EAAGD,IAGrBC,EAAEU,QAAQ,GACVV,EAAEQ,SAAS,EAAG,EAAG,EAAG,GAEbR,GAIRW,YAAmB,SAASX,EAAGD,EAAca,EAAYC,EAAgBC,GAaxEf,EAAeA,GAAgBE,KAC/BW,EAAaA,GAAcnB,EAE3B,IAAIsB,OAAuBC,GAAlBH,GAA+BA,EAAiB,EAAInB,EAAKuB,kBAAkBH,GAAUD,EAC1FK,EAAMlB,EAAEmB,SACZ,OAAGD,GAAOH,EACFf,EAEDJ,EAAKU,WACXM,EAAWQ,IAAIpB,EAAG,MAAOkB,EAAMH,GAAMG,EAAIH,GAAMG,EAAIH,EAAG,IACtD,EAAMhB,IAGRsB,MAAa,SAAS5B,EAAM6B,EAAMC,EAAOhB,EAAOR,GAe/C,IAAIC,EAAIJ,EAAKU,WAAWb,EAAMc,EAAOR,GAErC,OAAOuB,GACN,IAAK,OACJ,OAAO1B,EAAKe,YAAYX,EAAGa,eAAgBD,WAAYE,QACxD,IAAK,SACJd,EAAEQ,SAASf,EAAK+B,YAChBxB,EAAEyB,WAAWC,KAAKL,MAAM5B,EAAKkC,aAAcJ,GAASA,GACpD,MACD,IAAK,OACJvB,EAAEQ,SAASkB,KAAKL,MAAM5B,EAAK+B,WAAYD,GAASA,GAGlD,OAAOvB,GAGR4B,aAAoB,SAAS5B,EAAGD,EAAca,GAW7C,OAAyE,IADzEA,EAAaA,GAAcnB,GACToC,QAAQC,KAAKxB,WAAWN,GAAG,EAAOD,GAAeC,IAGpE+B,QAAe,SAAS/B,EAAGD,GAS1B,IAAIiC,EAAQ,IADZjC,EAAeA,GAAgBE,MAE/B,OAAOD,EAAEiC,eAAiBD,EAAMC,eAC5BjC,EAAEkC,YAAcF,EAAME,YACtBlC,EAAEmC,WAAaH,EAAMG,WAG1BC,cAAqB,SAASC,EAAYC,EAAQC,EAAMC,EAAQC,EAAMC,GAiBrE,GAAa,MAAVJ,GAA4B,MAAVE,GAA0B,MAARD,GAAwB,MAARE,EACtD,OAAO,EAGR,IAAIE,EAAMN,EAAWzB,WAErB,GAAG8B,GACF,GAAgC,GAA7BC,EAAId,QAAQS,EAAQG,IAA2C,GAA7BE,EAAId,QAAQW,EAAQD,GACxD,OAAO,OAEH,IAAiC,GAA9BI,EAAId,QAAQS,EAAQG,KAA6C,GAA9BE,EAAId,QAAQW,EAAQD,GAC/D,OAAO,EAER,OAAO,IAGR,OAAO3C","file":"../../calendar/time.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/date\", \"dojo/cldr/supplemental\",\"dojo/date/stamp\"], function(lang, date, cldr, stamp) {\r\n\r\n// summary: Advanced date manipulation utilities.\r\n\r\nvar time = {};\r\n\r\n\r\ntime.newDate = function(obj, dateClassObj){\r\n\t// summary:\r\n\t//\t\tCreates a new Date object.\r\n\t// obj: Object\r\n\t//\t\tThis object can have several values:\r\n\t//\t\t- the time in milliseconds since gregorian epoch.\r\n\t//\t\t- a Date instance\r\n\t//\t\t- a String instance that can be decoded by the dojo/date/stamp class.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\r\n\r\n\t// returns: Date\r\n\tdateClassObj = dateClassObj || Date;  \r\n\tvar d;\r\n\t\r\n\tif(typeof(obj) == \"number\"){\r\n\t\treturn new dateClassObj(obj);\r\n\t}else if(obj.getTime){\r\n\t\treturn new dateClassObj(obj.getTime());\r\n\t}else if(obj.toGregorian){\r\n\t\td = obj.toGregorian();\r\n\t\tif(dateClassObj !== Date){\r\n\t\t\td = new dateClassObj(d.getTime());\r\n\t\t}\r\n\t\treturn d;\r\n\t}else if(typeof obj == \"string\"){\r\n\t\td = stamp.fromISOString(obj);\r\n\t\tif(d === null){\r\n\t\t\tthrow new Error(\"Cannot parse date string (\"+obj+\"), specify a \\\"decodeDate\\\" function that translates this string into a Date object\"); // cannot build date\r\n\t\t}else if(dateClassObj !== Date){ // from Date to dateClassObj\r\n\t\t\td = new dateClassObj(d.getTime());\r\n\t\t}\r\n\t\treturn d;\r\n\t}\r\n\r\n};\r\n\r\ntime.floorToDay = function(d, reuse, dateClassObj){\r\n\t// summary:\r\n\t//\t\tFloors the specified date to the start of day.\r\n\t// date: Date\r\n\t//\t\tThe date to floor.\r\n\t// reuse: Boolean\r\n\t//\t\tWhether use the specified instance or create a new one. Default is false.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\t\r\n\t// returns: Date\r\n\tdateClassObj = dateClassObj || Date;  \r\n\t\r\n\tif(!reuse){\r\n\t\td = time.newDate(d, dateClassObj);\r\n\t}\r\n\t\r\n\td.setHours(0, 0, 0, 0);\r\n\t\t\r\n\treturn d;\r\n};\r\n\r\ntime.floorToMonth = function(d, reuse, dateClassObj){\r\n\t// summary:\r\n\t//\t\tFloors the specified date to the start of the date's month.\r\n\t// date: Date\r\n\t//\t\tThe date to floor.\r\n\t// reuse: Boolean\r\n\t//\t\tWhether use the specified instance or create a new one. Default is false.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\t\r\n\t// returns: Date\r\n\tdateClassObj = dateClassObj || Date;  \r\n\t\r\n\tif(!reuse){\r\n\t\td = time.newDate(d, dateClassObj);\r\n\t}\r\n\t\r\n\td.setDate(1);\r\n\td.setHours(0, 0, 0, 0);\r\n\t\r\n\treturn d;\r\n};\r\n\r\n\r\ntime.floorToWeek = function(d, dateClassObj, dateModule, firstDayOfWeek, locale){\r\n\t// summary:\r\n\t//\t\tFloors the specified date to the beginning of week.\r\n\t// d: Date\r\n\t//\t\tDate to floor.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\t\r\n\t// dateModule: Object?\r\n\t//\t\tObject that contains the \"add\" method. By default dojo.date is used.\r\n\t// firstDayOfWeek: Integer?\r\n\t//\t\tOptional day of week that overrides the one provided by the CLDR.\t\r\n\t// locale: String?\r\n\t//\t\tOptional locale used to determine first day of week.\r\n\tdateClassObj = dateClassObj || Date; \r\n\tdateModule = dateModule || date;  \t\r\n\t\r\n\tvar fd = firstDayOfWeek == undefined || firstDayOfWeek < 0 ? cldr.getFirstDayOfWeek(locale) : firstDayOfWeek;\r\n\tvar day = d.getDay();\r\n\tif(day == fd){\r\n\t\treturn d;\r\n\t}\r\n\treturn time.floorToDay(\r\n\t\tdateModule.add(d, \"day\", day > fd ? -day+fd : -day+fd-7),\r\n\t\ttrue, dateClassObj);\r\n};\r\n\r\ntime.floor = function(date, unit, steps, reuse, dateClassObj){\r\n\t// summary:\r\n\t//\t\tfloors the date to the unit.\r\n\t// date: Date\r\n\t//\t\tThe date/time to floor.\r\n\t// unit: String\r\n\t//\t\tThe unit. Valid values are \"minute\", \"hour\", \"day\".\r\n\t// steps: Integer\r\n\t//\t\tValid for \"minute\" or \"hour\" units.\r\n\t// reuse: Boolean\r\n\t//\t\tWhether use the specified instance or create a new one. Default is false.\t\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\r\n\t// returns: Date\r\n\r\n\tvar d = time.floorToDay(date, reuse, dateClassObj);\r\n\t\r\n\tswitch(unit){\r\n\t\tcase \"week\":\r\n\t\t\treturn time.floorToWeek(d, firstDayOfWeek, dateModule, locale);\r\n\t\tcase \"minute\":\r\n\t\t\td.setHours(date.getHours());\r\n\t\t\td.setMinutes(Math.floor(date.getMinutes() /steps) * steps);\r\n\t\t\tbreak;\r\n\t\tcase \"hour\":\r\n\t\t\td.setHours(Math.floor(date.getHours() /steps) * steps);\r\n\t\t\tbreak;\r\n\t}\r\n\treturn d;\r\n};\r\n\r\ntime.isStartOfDay = function(d, dateClassObj, dateModule){\r\n\t// summary:\r\n\t//\t\tTests if the specified date represents the starts of day. \r\n\t// d: Date\r\n\t//\t\tThe date to test.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\t\r\n\t// dateModule: Object?\r\n\t//\t\tObject that contains the \"add\" method. By default dojo.date is used.\r\n\t// returns: Boolean\r\n\tdateModule = dateModule || date;\r\n\treturn dateModule.compare(this.floorToDay(d, false, dateClassObj), d) == 0;\r\n};\r\n\r\ntime.isToday = function(d, dateClassObj){\r\n\t// summary:\r\n\t//\t\tReturns whether the specified date is in the current day.\r\n\t// d: Date\r\n\t//\t\tThe date to test.\r\n\t// dateClassObj: Object?\r\n\t//\t\tThe Date class used, by default the native Date.\r\n\t// returns: Boolean\r\n\tdateClassObj = dateClassObj || Date;\r\n\tvar today = new dateClassObj();\r\n\treturn d.getFullYear() == today.getFullYear() &&\r\n\t\t\t\t d.getMonth() == today.getMonth() && \r\n\t\t\t\t d.getDate() == today.getDate();\r\n};\r\n\r\ntime.isOverlapping = function(renderData, start1, end1, start2, end2, includeLimits){\r\n\t// summary:\r\n\t//\t\tComputes if the first time range defined by the start1 and end1 parameters \r\n\t//\t\tis overlapping the second time range defined by the start2 and end2 parameters.\r\n\t// renderData: Object\r\n\t//\t\tThe render data.\r\n\t// start1: Date\r\n\t//\t\tThe start time of the first time range.\r\n\t// end1: Date\r\n\t//\t\tThe end time of the first time range.\r\n\t// start2: Date\r\n\t//\t\tThe start time of the second time range.\r\n\t// end2: Date\r\n\t//\t\tThe end time of the second time range.\r\n\t// includeLimits: Boolean\r\n\t//\t\tWhether include the end time or not.\r\n\t// returns: Boolean\r\n\tif(start1 == null || start2 == null || end1 == null || end2 == null){\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tvar cal = renderData.dateModule;\r\n\t\r\n\tif(includeLimits){\r\n\t\tif(cal.compare(start1, end2) == 1 || cal.compare(start2, end1) == 1){\r\n\t\t\treturn false;\r\n\t\t}\t\t\t\t\t\r\n\t}else if(cal.compare(start1, end2) != -1 || cal.compare(start2, end1) != -1){\r\n\t\treturn false;\r\n\t}\r\n\treturn true; \r\n};\r\n\r\nreturn time;\r\n});"]}