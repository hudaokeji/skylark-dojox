{"version":3,"sources":["color/SimpleColorModel.js"],"names":["define","arr","declare","color","_startColor","_endColor","constructor","startColor","endColor","undefined","this","hsl","toHsl","s","l","fromHsl","h","a","_getInterpoledValue","from","to","value","getNormalizedValue","getColor","completion","hslFrom","hslTo","c"],"mappings":";;;;;;;AAAAA,QAAQ,mBAAoB,qBAAsB,eACjD,SAASC,EAAKC,EAASC,GAEvB,OAAOD,EAAQ,+BAAgC,MAK9CE,YAAa,KACbC,UAAW,KAEXC,YAAa,SAASC,EAAYC,GASjC,QAAeC,GAAZD,EACFE,KAAKN,YAAcG,EACnBG,KAAKL,UAAYG,MACb,CAKJ,IAAIG,EAAMJ,EAAWK,QACrBD,EAAIE,EAAI,IACRF,EAAIG,EAAI,GACRJ,KAAKN,YAAcD,EAAMY,QAAQJ,EAAIK,EAAGL,EAAIE,EAAGF,EAAIG,GACnDJ,KAAKN,YAAYa,EAAIV,EAAWU,EAChCN,EAAIG,EAAI,GACRJ,KAAKL,UAAYF,EAAMY,QAAQJ,EAAIK,EAAGL,EAAIE,EAAGF,EAAIG,GACjDJ,KAAKL,UAAUY,EAAIV,EAAWU,IAIhCC,oBAAqB,SAASC,EAAMC,EAAIC,GACvC,OAAOF,GAAQC,EAAKD,GAAQE,GAG7BC,mBAAoB,SAASD,KAQ7BE,SAAU,SAASF,GAKlB,IAAIG,EAAad,KAAKY,mBAAmBD,GACrCI,EAAUf,KAAKN,YAAYQ,QAC3Bc,EAAQhB,KAAKL,UAAUO,QACvBI,EAAIN,KAAKQ,oBAAoBO,EAAQT,EAAGU,EAAMV,EAAGQ,GACjDX,EAAIH,KAAKQ,oBAAoBO,EAAQZ,EAAGa,EAAMb,EAAGW,GACjDV,EAAIJ,KAAKQ,oBAAoBO,EAAQX,EAAGY,EAAMZ,EAAGU,GACjDP,EAAIP,KAAKQ,oBAAoBR,KAAKN,YAAYa,EAAGP,KAAKL,UAAUY,EAAGO,GACnEG,EAAIxB,EAAMY,QAAQC,EAAGH,EAAGC,GAE5B,OADAa,EAAEV,EAAIA,EACCU","file":"../../color/SimpleColorModel.js","sourcesContent":["define([\"dojo/_base/array\", \"dojo/_base/declare\", \"dojox/color\"], \r\n\tfunction(arr, declare, color){\r\n\t\r\n\treturn declare(\"dojox.color.SimpleColorModel\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for color models that return a color from a data value\r\n\t\t//\t\tusing an interpolation between two extremum colors.\r\n\t\t\r\n\t\t_startColor: null, \r\n\t\t_endColor: null, \r\n\t\r\n\t\tconstructor: function(startColor, endColor){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstruct a color model interpolating between start and end color.\r\n\t\t\t//\t\tIf only start color is provided use it to compute reasonable start and end\r\n\t\t\t//\t\tcolors from it.\r\n\t\t\t// startColor: dojo/_base/Color\r\n\t\t\t//\t\tThe start color. \r\n\t\t\t// endColor: dojo/_base/Color?\r\n\t\t\t//\t\tThe end color.\r\n\t\t\tif(endColor != undefined){\r\n\t\t\t\tthis._startColor = startColor;\r\n\t\t\t\tthis._endColor = endColor;\r\n\t\t\t}else{\r\n\t\t\t\t// When only one color is provided\r\n\t\t\t\t// use only the hue, and compute\r\n\t\t\t\t// the start/end colors by playing\r\n\t\t\t\t// with the luminance...    \t\t\t\r\n\t\t\t\tvar hsl = startColor.toHsl();\r\n\t\t\t\thsl.s = 100; \r\n\t\t\t\thsl.l = 85; \r\n\t\t\t\tthis._startColor = color.fromHsl(hsl.h, hsl.s, hsl.l);\r\n\t\t\t\tthis._startColor.a = startColor.a;\r\n\t\t\t\thsl.l = 15;\r\n\t\t\t\tthis._endColor = color.fromHsl(hsl.h, hsl.s, hsl.l);\r\n\t\t\t\tthis._endColor.a = startColor.a;\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_getInterpoledValue: function(from, to, value){\r\n\t\t\treturn(from + (to - from) * value);\r\n\t\t},\r\n\t\r\n\t\tgetNormalizedValue: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the normalized (between 0 and 1) value for a given data value.\r\n\t\t\t//\t\tThis function must be implemented by implementations.\r\n\t\t\t// value: Number\r\n\t\t\t//\t\tThe data value. \t\t\t\r\n\t\t},\r\n\t\r\n\t\tgetColor: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn the color for a given data value.\r\n\t\t\t// value: Number\r\n\t\t\t//\t\tThe data value. \t\t\t\r\n\t\t\tvar completion = this.getNormalizedValue(value);\r\n\t\t\tvar hslFrom = this._startColor.toHsl();\r\n\t\t\tvar hslTo = this._endColor.toHsl();\r\n\t\t\tvar h = this._getInterpoledValue(hslFrom.h, hslTo.h, completion);\r\n\t\t\tvar s = this._getInterpoledValue(hslFrom.s, hslTo.s, completion);\r\n\t\t\tvar l = this._getInterpoledValue(hslFrom.l, hslTo.l, completion);\r\n\t\t\tvar a = this._getInterpoledValue(this._startColor.a, this._endColor.a, completion);\r\n\t\t\tvar c = color.fromHsl(h, s, l);\r\n\t\t\tc.a = a;\r\n\t\t\treturn c;\r\n\t\t}\r\n\t});\r\n});\r\n"]}