{"version":3,"sources":["string/BidiEngine.js"],"names":["define","lang","declare","getObject","dojox","BidiEngine","bidiTransform","text","formatIn","formatOut","validFormat","test","Error","orientIn","getOrientation","charAt","orientOut","os_in","os_out","inFormat","outFormat","swap","bdx","defInFormat","defOutFormat","defSwap","stage1_text","doBidiReorder","undefined","dir","inOrdering","substring","inOrientation","outOrdering","outOrientation","firstStrongDir","toUpperCase","type","i","length","getCharacterType","UBAT_R","UBAT_AL","UBAT_L","UBAT_B","lastStrongDir","LTR","doReorder","RTL","invertStr","saveSwap","substr","isRtl","this","checkContextual","rtl","compress","str06","String","split","Ix","step","nIEnd","previousCursive","compressArray","compressArrayIndx","index","isArabicAlefbet","isArabicDiacritics","isNextAlef","getLamAlefFE","LamAlefInialTableFE","LamAlefMedialTableFE","setAlefToSpace","currentChr","isNextArabic","getMedialFormCharacterFE","getFormCharacterFE","FinalForm","InitialForm","IsolatedForm","isStandAlonCharacter","outBuf","idx","indexOf","shape","consume_next_space","strFE","textBuff","j","chNum","charCodeAt","AlefTable","parseInt","FETo06Table","deshape","document","toLowerCase","hasBidiChar","uc","hi","MasterTable","TBBASE","UnicodeTable","str","chars","levels","len","impTab","impTab_RTL","impTab_LTR","prevState","newClass","newLevel","newState","action","condPos","ix","types","classes","hiLevel","lastArabic","hasUBAT_AL","hasUBAT_B","hasUBAT_S","getCharClass","ITIL","ITCOND","UBAT_S","UBAT_WS","computeLevels","getMirror","swapChars","invertLevel","join","ch","reverse","cArray","cLength","c","ArabicAlefBetIntervalsBegine","ArabicAlefBetIntervalsEnd","lev","end","lo","tmp","start","wType","nType","cType","UBAT_ON","UBAT_AN","UBAT_EN","UBAT_CS","UBAT_ES","UBAT_ET","UBAT_NSM","rtlCandidate","UBAT_LRE","UBAT_RLE","UBAT_LRO","UBAT_RLO","UBAT_PDF","UBAT_BN","mid","low","high","SwapTable","Math","floor","StandAlonForm","BaseForm","MedialForm","formArr","oc","alef06","LamAlefForm","defoutFormat","hasBlockSep","hasSegSep","TB00","TB05","TB06","TB07","TB20","TBFB","TBFE","TBFF"],"mappings":"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A,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAJD3G,EAIC2G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAQCM,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAXFnH,EAWEmH,EAXFnH,EAWEmH,EAAAA,EAXFnH,EAWEmH,EAAAA,EAXFnH,EAWEmH,EARDN,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAHD7G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAA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,EAAAA,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAJD3G,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIC2G,EAAAA,EAJD3G,EAAAA,EAAAA,EAIC2G,EAAAA,EAAAA,EAOAK,EAAAA,EAPAL,EAAAA,EAAAA,EAOAK,EAAAA,EAPAL,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IA8OT,OApBA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEOjJ","file":"../../string/BidiEngine.js","sourcesContent":["define([\"dojo/_base/lang\", \"dojo/_base/declare\"], \r\n  function(lang,declare){\r\nlang.getObject(\"string\", true, dojox);\r\n\r\nvar BidiEngine = declare(\"dojox.string.BidiEngine\", null, {\r\n\t// summary:\r\n\t//\t\tThis class provides a bidi transformation engine, i.e.\r\n\t//\t\tfunctions for reordering and shaping bidi text.\r\n\t// description:\r\n\t//\t\tBidi stands for support for languages with a bidirectional script. \r\n\t//\r\n\t//\t\tUsually Unicode Bidi Algorithm used by OS platform (and web browsers) is capable of properly transforming\r\n\t//\t\tBidi text and as a result it is adequately displayed on the screen. However, in some situations, \r\n\t//\t\tUnicode Bidi Algorithm is not invoked or is not properly applied. This may occur in situation in which software\r\n\t//\t\tresponsible for rendering the text is not leveraging Unicode Bidi Algorithm implemented by OS (e.g. dojox.GFX renderers).\r\n\t//\r\n\t//\t\tBidi engine provided in this class implements Unicode Bidi Algorithm as specified at\r\n\t//\t\thttp://www.unicode.org/reports/tr9/.\r\n\t//\r\n\t//\t\tFor more information on basic Bidi concepts please read\r\n\t//\t\t\"Bidirectional script support - A primer\" available from\r\n\t//\t\thttp://www.ibm.com/developerworks/websphere/library/techarticles/bidi/bidigen.html.\r\n\t//\r\n\t//\t\tAs of February 2011, Bidi engine has following limitations:\r\n\t//\r\n\t//\t\t1. No support for following numeric shaping options:\r\n\t//\t\t    - H - Hindi,\r\n\t//\t\t    - C - Contextual,\r\n\t//\t\t    - N - Nominal.\r\n\t//\t\t2. No support for following shaping options:\r\n\t//\t\t    - I - Initial shaping,\r\n\t//\t\t    - M - Middle shaping,\r\n\t//\t\t    - F - Final shaping,\r\n\t//\t\t    - B - Isolated shaping.\r\n\t//\t\t3. No support for source-to-target or/and target-to-source maps.\r\n\t//\t\t4. No support for LRE/RLE/LRO/RLO/PDF (they are handled like neutrals).\r\n\t//\t\t5. No support for Windows compatibility.\r\n\t//\t\t6. No support for  insert/remove marks.\r\n\t//\t\t7. No support for code pages (currently only UTF-8 is supported. Ideally we should convert from any code page to UTF-8).\r\n\t\r\n\tbidiTransform: function (/*String*/text, /*String*/formatIn, /*String*/formatOut){\r\n\t\t// summary:\r\n\t\t//\t\tCentral public API for Bidi engine. Transforms the text according to formatIn, formatOut parameters.\r\n\t\t//\t\tIf formatIn or formatOut parametrs are not valid throws an exception.\r\n\t\t// inputText:\r\n\t\t//\t\tInput text subject to application of Bidi transformation.\r\n\t\t// formatIn:\r\n\t\t//\t\tInput Bidi layout in which inputText is passed to the function.\r\n\t\t// formatOut:\r\n\t\t//\t\tOutput Bidi layout to which inputText should be transformed.\r\n\t\t// description:\r\n\t\t//\t\tBoth formatIn and formatOut parameters are 5 letters long strings. \r\n\t\t//\t\tFor example - \"ILYNN\". Each letter is associated with specific attribute of Bidi layout. \r\n\t\t//\t\tPossible and default values for each one of the letters are provided below:\r\n\t\t//\r\n\t\t//\t\tFirst letter:\r\n\t\t//\r\n\t\t//\t\t- Letter position/index:\r\n\t\t//\t\t\t1\r\n\t\t//\t\t- Letter meaning:\r\n\t\t//\t\t\tOrdering Schema.\r\n\t\t//\t\t- Possible values:\r\n\t\t//\t\t\t- I - Implicit (Logical).\r\n\t\t//\t\t\t- V - Visual.\r\n\t\t//\t\t- Default value:\r\n\t\t//\t\t\tI\r\n\t\t//\r\n\t\t//\t\tSecond letter:\r\n\t\t//\r\n\t\t//\t\t- Letter position/index:\r\n\t\t//\t\t\t2\r\n\t\t//\t\t- Letter meaning:\r\n\t\t//\t\t\tOrientation.\r\n\t\t//\t\t- Possible values:\r\n\t\t//\t\t\t- L - Left To Right.\r\n\t\t//\t\t\t- R - Right To Left.\r\n\t\t//\t\t\t- C - Contextual Left to Right.\r\n\t\t//\t\t\t- D - Contextual Right to Left.\r\n\t\t//\t\t- Default value:\r\n\t\t//\t\t\tL\t\t\r\n\t\t//\r\n\t\t//\t\tThird letter:\r\n\t\t//\r\n\t\t//\t\t- Letter position/index:\r\n\t\t//\t\t\t3\r\n\t\t//\t\t- Letter meaning:\r\n\t\t//\t\t\tSymmetric Swapping.\r\n\t\t//\t\t- Possible values:\r\n\t\t//\t\t\t- Y - Symmetric swapping is on.\r\n\t\t//\t\t\t- N - Symmetric swapping is off.\r\n\t\t//\t\t- Default value:\r\n\t\t//\t\t\tY\t\t\r\n\t\t//\r\n\t\t//\t\tFourth letter:\r\n\t\t//\r\n\t\t//\t\t- Letter position/index:\r\n\t\t//\t\t\t4\r\n\t\t//\t\t- Letter meaning:\r\n\t\t//\t\t\tShaping.\r\n\t\t//\t\t- Possible values:\r\n\t\t//\t\t\t- S - Text is shaped.\r\n\t\t//\t\t\t- N - Text is not shaped.\r\n\t\t//\t\t- Default value:\r\n\t\t//\t\t\tN\t\t\t\t\r\n\t\t//\r\n\t\t//\t\tFifth letter:\r\n\t\t//\r\n\t\t//\t\t- Letter position/index:\r\n\t\t//\t\t\t5\r\n\t\t//\t\t- Letter meaning:\r\n\t\t//\t\t\tNumeric Shaping.\r\n\t\t//\t\t- Possible values:\r\n\t\t//\t\t\t- N - Nominal.\r\n\t\t//\t\t- Default value:\r\n\t\t//\t\t\tN\t\t\t\t\r\n\t\t//\r\n\t\t//\t\tThe output of this function is original text (passed via first argument) transformed from input Bidi layout (second argument)\r\n\t\t//\t\tto output Bidi layout (last argument). \r\n\t\t//\r\n\t\t//\t\tSample call:\r\n\t\t//\t|\tmytext = bidiTransform(\"HELLO WORLD\", \"ILYNN\", \"VLYNN\");\r\n\t\t//\t\tIn this case, \"HELLO WORLD\" text is transformed from Logical - LTR to Visual - LTR Bidi layout with \r\n\t\t//\t\tdefault values for symmetric swapping (Yes), shaping (Not shaped) and numeric shaping (Nominal).\r\n\t\t// returns: String\r\n\t\t//\t\tOriginal text transformed from input Bidi layout (second argument)\r\n\t\t//\t\tto output Bidi layout (last argument).\r\n\t\t//\t\tThrows an exception if the bidi layout strings are not valid.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\t\t\r\n\t\tif(!text){\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tif(!formatIn && !formatOut){\r\n\t\t\treturn text;\r\n\t\t}\r\n\r\n\t\t// regex for format validation\r\n\t\t// Allowed values for format string are:\r\n\t\t// 1st letter- I, V\r\n\t\t// 2nd letter- L, R, C, D\r\n\t\t// 3rd letter- Y, N\r\n\t\t// 4th letter- S, N\r\n\t\t// 5th letter- N\r\n\t\tvar validFormat = /^[(I|V)][(L|R|C|D)][(Y|N)][(S|N)][N]$/;\r\n\t\tif(!validFormat.test(formatIn) || !validFormat.test(formatOut)){\r\n\t\t\tthrow new Error(\"dojox.string.BidiEngine: the bidi layout string is wrong!\");\r\n\t\t}\r\n\r\n\t\tif(formatIn == formatOut){\r\n\t\t\treturn text;\r\n\t\t}\r\n\r\n\t\tvar orientIn = getOrientation(formatIn.charAt(1))\r\n\t\t\t, orientOut = getOrientation(formatOut.charAt(1))\r\n\t\t\t, os_in = (formatIn.charAt(0) == 'I') ? 'L' : formatIn.charAt(0)\r\n\t\t\t, os_out = (formatOut.charAt(0) == 'I') ? 'L' : formatOut.charAt(0)\r\n\t\t\t, inFormat = os_in + orientIn\r\n\t\t\t, outFormat = os_out + orientOut\r\n\t\t\t, swap = formatIn.charAt(2) + formatOut.charAt(2)\r\n\t\t\t;\r\n\r\n\t\tif(inFormat){\r\n\t\t\tbdx.defInFormat = inFormat;\r\n\t\t}\r\n\t\tif(outFormat){\r\n\t\t\tbdx.defOutFormat = outFormat;\r\n\t\t}\r\n\t\tif(swap){\r\n\t\t\tbdx.defSwap = swap;\r\n\t\t}\r\n\t\t\r\n\t\tvar stage1_text = doBidiReorder(text, os_in + orientIn, os_out + orientOut, formatIn.charAt(2) + formatOut.charAt(2))\r\n\t\t\t, isRtl = false;\r\n\r\n\t\tif(formatOut.charAt(1) == 'R'){\r\n\t\t\tisRtl = true;\r\n\t\t}else if(formatOut.charAt(1) == 'C' || formatOut.charAt(1) == 'D'){\r\n\t\t\tisRtl = this.checkContextual(stage1_text);\r\n\t\t}\r\n\t\tif(formatIn.charAt(3) == formatOut.charAt(3)){\r\n\t\t\treturn stage1_text;\r\n\t\t}else if(formatOut.charAt(3) == 'S'){\r\n\t\t\treturn shape(isRtl, stage1_text, true);\r\n\t\t}\r\n\t\tif(formatOut.charAt(3) == 'N'){\r\n\t\t\treturn deshape(stage1_text, isRtl, true);\r\n\t\t}\r\n\t},\r\n\tcheckContextual: function(/*String*/text){\r\n\t\t// summary:\r\n\t\t//\t\tDetermine the base direction of a bidi text according\r\n\t\t//\t\tto its first strong directional character.\r\n\t\t// text: \r\n\t\t//\t\tThe text to check.\r\n\t\t// returns: /*String*/\r\n\t\t//\t\t\"ltr\" or \"rtl\" according to the first strong character.\r\n\t\t//\t\tIf there is no strong character, returns the value of the\r\n\t\t//\t\tdocument dir property.\r\n\t\t// tags:\r\n\t\t//\t\tpublic\t\t\r\n\t\tvar dir = firstStrongDir(text);\r\n\t\tif(dir != \"ltr\" && dir != \"rtl\"){\r\n\t\t\tdir = document.dir.toLowerCase();\r\n\t\t\tif(dir != \"ltr\" && dir != \"rtl\"){dir = \"ltr\";}\r\n\t\t}\r\n\t\treturn dir;\r\n\t},\r\n\thasBidiChar: function(/*String*/text){\r\n\t\t// summary:\r\n\t\t//\t\tReturn true if text contains RTL directed character.\r\n\t\t// text:\r\n\t\t//\t\tThe source string.\r\n\t\t// description:\r\n\t\t//\t\tIterates over the text string, letter by letter starting from its beginning,\r\n\t\t//\t\tsearching for RTL directed character. \r\n\t\t//\t\tReturn true if found else false. Needed for vml transformation.\r\n\t\t// returns: /*Boolean*/\r\n\t\t//\t\ttrue - if text has a RTL directed character.\r\n\t\t//\t\tfalse - otherwise. \r\n\t\t// tags:\r\n\t\t//\t\tpublic\r\n\r\n\t\tvar type = null, uc = null,\thi = null;\r\n\t\tfor(var i = 0; i < text.length; i++){\r\n\t\t\tuc = text.charAt(i).charCodeAt(0);\r\n\t\t\thi = MasterTable[uc >> 8];\r\n\t\t\ttype = hi < TBBASE ? hi : UnicodeTable[hi - TBBASE][uc & 0xFF];\r\n\t\t\tif(type == UBAT_R || type == UBAT_AL){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(type == UBAT_B){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\t\r\n\r\n});\r\n\r\n\r\nfunction doBidiReorder(/*String*/text, /*String*/inFormat,\r\n\t\t\t\t\t\t/*String*/outFormat, /*String*/swap){\r\n\t// summary:\r\n\t//\t\tReorder the source text according to the bidi attributes\r\n\t//\t\tof source and result.\r\n\t// text:\r\n\t//\t\tThe text to reorder.\r\n\t// inFormat:\r\n\t//\t\tOrdering scheme and base direction of the source text.\r\n\t//\t\tCan be \"LLTR\", \"LRTL\", \"LCLR\", \"LCRL\", \"VLTR\", \"VRTL\",\r\n\t//\t\t\"VCLR\", \"VCRL\".\r\n\t//\t\tThe first letter is \"L\" for logical ordering scheme,\r\n\t//\t\t\"V\" for visual ordering scheme.\r\n\t//\t\tThe other letters specify the base direction.\r\n\t//\t\t\"CLR\" means contextual direction defaulting to LTR if\r\n\t//\t\tthere is no strong letter.\r\n\t//\t\t\"CRL\" means contextual direction defaulting to RTL if\r\n\t//\t\tthere is no strong letter.\r\n\t//\t\tThe initial value is \"LLTR\", if none, the initial value is used.\r\n\t// outFormat:\r\n\t//\t\tRequired ordering scheme and base direction of the\r\n\t//\t\tresult. Has the same format as inFormat.\r\n\t//\t\tIf none, the initial value \"VLTR\" is used.\r\n\t// swap:\r\n\t//\t\tSymmetric swapping attributes of source and result.\r\n\t//\t\tThe allowed values can be \"YN\", \"NY\", \"YY\" and \"NN\".\r\n\t//\t\tThe first letter reflects the symmetric swapping attribute\r\n\t//\t\tof the source, the second letter that of the result.\t\r\n\t// returns:\r\n\t//\t\tText reordered according to source and result attributes.\r\n\r\n\tif(inFormat == undefined){\r\n\t\tinFormat = bdx.defInFormat;\r\n\t}\r\n\tif(outFormat == undefined){\r\n\t\toutFormat = bdx.defOutFormat;\r\n\t}\r\n\tif(swap == undefined){\r\n\t\tswap = bdx.defSwap;\r\n\t}\r\n\tif(inFormat == outFormat){\r\n\t\treturn text;\r\n\t}\r\n\tvar dir, inOrdering = inFormat.substring(0,1)\r\n\t\t, inOrientation = inFormat.substring(1,4)\r\n\t\t, outOrdering = outFormat.substring(0,1)\r\n\t\t, outOrientation = outFormat.substring(1,4)\r\n\t\t;\r\n\tif(inOrientation.charAt(0) == \"C\"){\r\n\t\tdir = firstStrongDir(text);\r\n\t\tif(dir == \"ltr\" || dir == \"rtl\"){\r\n\t\t\tinOrientation = dir.toUpperCase();\r\n\t\t}else{\r\n\t\t\tinOrientation = inFormat.charAt(2) == \"L\" ? \"LTR\" : \"RTL\";\r\n\t\t}\r\n\t\tinFormat = inOrdering + inOrientation;\r\n\t}\r\n\tif(outOrientation.charAt(0) == \"C\"){\r\n\t\tdir = firstStrongDir(text);\r\n\t\tif(dir == \"rtl\"){\r\n\t\t\toutOrientation = \"RTL\";\r\n\t\t}else if(dir == \"ltr\"){\r\n\t\t\tdir = lastStrongDir(text);\r\n\t\t\toutOrientation = dir.toUpperCase();\r\n\t\t}else{\r\n\t\t\toutOrientation = outFormat.charAt(2) == \"L\" ? \"LTR\" : \"RTL\";\r\n\t\t}\r\n\t\toutFormat = outOrdering + outOrientation;\r\n\t}\r\n\tif(inFormat == outFormat){\r\n\t\treturn text;\r\n\t}\r\n\tbdx.inFormat = inFormat;\r\n\tbdx.outFormat = outFormat;\r\n\tbdx.swap = swap;\r\n\tif((inOrdering == \"L\") && (outFormat == \"VLTR\")){ //core cases\r\n\t\t//cases: LLTR->VLTR, LRTL->VLTR\r\n\t\tif(inOrientation == \"LTR\"){\r\n\t\t\tbdx.dir = LTR;\r\n\t\t\treturn doReorder(text);\r\n\t\t}\r\n\t\tif(inOrientation == \"RTL\"){\r\n\t\t\tbdx.dir = RTL;\r\n\t\t\treturn doReorder(text);\r\n\t\t}\r\n\t}\r\n\tif((inOrdering == \"V\") && (outOrdering == \"V\")){\r\n\t\t//inOrientation != outOrientation\r\n\t\t//cases: VRTL->VLTR, VLTR->VRTL\r\n\t\treturn invertStr(text);\r\n\t}\r\n\tif((inOrdering == \"L\") && (outFormat == \"VRTL\")){\r\n\t\t//cases: LLTR->VRTL, LRTL->VRTL\r\n\t\tif(inOrientation == \"LTR\"){\r\n\t\t\tbdx.dir = LTR;\r\n\t\t\ttext = doReorder(text);\r\n\t\t}else{\r\n\t\t\t//inOrientation == RTL\r\n\t\t\tbdx.dir = RTL;\r\n\t\t\ttext = doReorder(text);\r\n\t\t}\r\n\t\treturn invertStr(text);\r\n\t}\r\n\tif((inFormat == \"VLTR\") && (outFormat == \"LLTR\")){\r\n\t\t//case: VLTR->LLTR\r\n\t\tbdx.dir = LTR;\r\n\t\treturn doReorder(text);\r\n\t}\r\n\tif((inOrdering == \"V\") && (outOrdering == \"L\") && (inOrientation != outOrientation)){\r\n\t\t//cases: VLTR->LRTL, VRTL->LLTR\r\n\t\ttext = invertStr(text);\r\n\r\n\t\treturn (inOrientation == \"RTL\") ? doBidiReorder(text, \"LLTR\",\"VLTR\", swap) : doBidiReorder(text, \"LRTL\",\"VRTL\", swap);\r\n\t}\r\n\tif((inFormat == \"VRTL\") && (outFormat == \"LRTL\")){\r\n\t\t//case VRTL->LRTL\r\n\t\treturn doBidiReorder(text, \"LRTL\",\"VRTL\", swap);\r\n\t}\r\n\tif((inOrdering == \"L\") && (outOrdering == \"L\")){\r\n\t\t//inOrientation != outOrientation\r\n\t\t//cases: LRTL->LLTR, LLTR->LRTL\r\n\t\tvar saveSwap = bdx.swap;\r\n\t\tbdx.swap = saveSwap.substr(0, 1) + \"N\";\r\n\t\tif(inOrientation == \"RTL\"){\r\n\t\t\t//LRTL->LLTR\r\n\t\t\tbdx.dir = RTL;\r\n\t\t\ttext = doReorder(text);\r\n\t\t\tbdx.swap = \"N\" + saveSwap.substr(1, 2);\r\n\t\t\tbdx.dir = LTR;\r\n\t\t\ttext = doReorder(text);\r\n\t\t}else{ //LLTR->LRTL\r\n\t\t\tbdx.dir = LTR;\r\n\t\t\ttext = doReorder(text);\r\n\t\t\tbdx.swap = \"N\" + saveSwap.substr(1, 2);\r\n\t\t\ttext = doBidiReorder(text, \"VLTR\",\"LRTL\", bdx.swap);\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n\r\n}\r\n\r\nfunction shape(/*boolean*/rtl, /*String*/text, /*boolean*/compress){\r\n\t// summary:\r\n\t//\t\tShape the source text.\r\n\t// rtl:\r\n\t//\t\tFlag indicating if the text is in RTL direction (logical\r\n\t//\t\tdirection for Arabic words).\r\n\t// text:\r\n\t//\t\tThe text to shape.\r\n\t// compress:\r\n\t//\t\tA flag indicates to insert extra space after the lam alef compression\r\n\t//\t\tto preserve the buffer size or not insert an extra space which will lead\r\n\t//\t\tto decrease the buffer size. This option can be:\r\n\t//\r\n\t//\t\t- true (default) to not insert extra space after compressing Lam+Alef into one character Lamalef\r\n\t//\t\t- false to insert an extra space after compressed Lamalef to preserve the buffer size\r\n\t// returns:\r\n\t//\t\ttext shaped.\r\n\t// tags:\r\n\t//\t\tprivate.\r\n\t\r\n\tif(text.length == 0){\r\n\t\treturn;\r\n\t}\r\n\tif(rtl == undefined){\r\n\t\trtl = true;\r\n\t}\r\n\tif(compress == undefined){\r\n\t\tcompress = true;\r\n\t}\r\n\ttext = new String(text);\r\n\t\r\n\tvar str06 = text.split(\"\")\r\n\t\t, Ix = 0\r\n\t\t, step = +1\r\n\t\t, nIEnd = str06.length\r\n\t\t;\r\n\tif(!rtl){\r\n\t\tIx = str06.length - 1;\r\n\t\tstep = -1;\r\n\t\tnIEnd = 1;\r\n\t}\r\n\tvar previousCursive = 0, compressArray = [], compressArrayIndx = 0;\r\n\tfor(var index = Ix; index * step < nIEnd; index = index + step){\r\n\t\tif(isArabicAlefbet(str06[index]) || isArabicDiacritics(str06[index])){\r\n\t\t\t// Arabic letter Lam\r\n\t\t\tif(str06[index] == '\\u0644'){\r\n\t\t\t\tif(isNextAlef(str06, (index + step), step, nIEnd)){\r\n\t\t\t\t\tstr06[index] = (previousCursive == 0) ? getLamAlefFE(str06[index + step], LamAlefInialTableFE) : getLamAlefFE(str06[index + step], LamAlefMedialTableFE);\r\n\t\t\t\t\tindex += step;\r\n\t\t\t\t\tsetAlefToSpace(str06, index, step, nIEnd);\r\n\t\t\t\t\tif(compress){\r\n\t\t\t\t\t\tcompressArray[compressArrayIndx] = index;\r\n\t\t\t\t\t\tcompressArrayIndx++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpreviousCursive = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar currentChr = str06[index];\r\n\t\t\tif(previousCursive == 1){\r\n\t\t\t\t// if next is Arabic\r\n\t\t\t\t//Character is in medial form\r\n\t\t\t\t// else character is in final form\r\n\t\t\t\tstr06[index] = (isNextArabic(str06, (index + step), step, nIEnd)) ? \r\n\t\t\t\t\tgetMedialFormCharacterFE(str06[index]) : getFormCharacterFE(str06[index], FinalForm);\r\n\t\t\t}else{\r\n\t\t\t\tif(isNextArabic(str06, (index + step), step, nIEnd) == true){\r\n\t\t\t\t\t//character is in Initial form\r\n\t\t\t\t\tstr06[index] = getFormCharacterFE(str06[index],InitialForm);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tstr06[index] = getFormCharacterFE(str06[index], IsolatedForm);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//exam if the current character is cursive\r\n\t\t\tif(!isArabicDiacritics(currentChr)){\r\n\t\t\t\tpreviousCursive = 1;\r\n\t\t\t}\r\n\t\t\tif(isStandAlonCharacter(currentChr) == true){\r\n\t\t\t\tpreviousCursive = 0;\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tpreviousCursive = 0;\r\n\t\t}\r\n\t}\r\n\tvar outBuf = \"\";\r\n\tfor(idx = 0; idx < str06.length; idx++){\r\n\t\tif(!(compress && indexOf(compressArray, compressArray.length, idx) > -1)){\r\n\t\t\toutBuf += str06[idx];\r\n\t\t}\r\n\t}\r\n\treturn outBuf;\r\n}\r\n\r\nfunction firstStrongDir(/*String*/text){\r\n\t// summary:\r\n\t//\t\tReturn the first strong character direction\r\n\t// text:\r\n\t//\t\tThe source string.\r\n\t// description:\r\n\t//\t\tIterates over the text string, letter by letter starting from its beginning,\r\n\t//\t\tsearching for first \"strong\" character. \r\n\t//\t\tReturns if strong character was found with the direction defined by this \r\n\t//\t\tcharacter, if no strong character was found returns an empty string.\r\n\t// returns: String\r\n\t//\t\t\"ltr\" - if the first strong character is Latin.\r\n\t//\t\t\"rtl\" - if the first strong character is RTL directed character.\r\n\t//\t\t\"\" - if the strong character wasn't found.\r\n\t// tags:\r\n\t//\t\tprivate\r\n\r\n\tvar type = null, uc = null, hi = null;\r\n\tfor(var i = 0; i < text.length; i++){\r\n\t\tuc = text.charAt(i).charCodeAt(0);\r\n\t\thi = MasterTable[uc >> 8];\r\n\t\ttype = hi < TBBASE ? hi : UnicodeTable[hi - TBBASE][uc & 0xFF];\r\n\t\tif(type == UBAT_R || type == UBAT_AL){\r\n\t\t\treturn \"rtl\";\r\n\t\t}\r\n\t\tif(type == UBAT_L){\r\n\t\t\treturn\t\"ltr\";\r\n\t\t}\r\n\t\tif(type == UBAT_B){\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\nfunction lastStrongDir(text){\r\n\t// summary:\r\n\t//\t\tReturn the last strong character direction\r\n\t// text:\r\n\t//\t\tThe source string.\r\n\t// description:\r\n\t//\t\tIterates over the text string, letter by letter starting from its end,\r\n\t//\t\tsearching for first (from the end) \"strong\" character. \r\n\t//\t\tReturns if strong character was found with the direction defined by this \r\n\t//\t\tcharacter, if no strong character was found returns an empty string.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\r\n\tvar type = null;\r\n\tfor(var i = text.length - 1; i >= 0; i--){\r\n\t\ttype = getCharacterType(text.charAt(i));\r\n\t\tif(type == UBAT_R || type == UBAT_AL){\r\n\t\t\treturn \"rtl\";\r\n\t\t}\r\n\t\tif(type == UBAT_L){\r\n\t\t\treturn\t\"ltr\";\r\n\t\t}\r\n\t\tif(type == UBAT_B){\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn \"\";\r\n}\r\n\r\nfunction deshape(/*String*/text, /*boolean*/rtl, /*boolean*/consume_next_space){\r\n\t// summary:\r\n\t//\t\tdeshape the source text.\r\n\t// text:\r\n\t//\t\tthe text to be deshape.\r\n\t// rtl:\r\n\t//\t\tflag indicating if the text is in RTL direction (logical\r\n\t//\t\tdirection for Arabic words).\r\n\t// consume_next_space:\r\n\t//\t\tflag indicating whether to consume the space next to the \r\n\t//\t\tthe lam alef if there is a space followed the Lamalef character to preserve the buffer size. \r\n\t//\t\tIn case there is no space next to the lam alef the buffer size will be increased due to the\r\n\t//\t\texpansion of the lam alef one character into lam+alef two characters\r\n\t// returns:\r\n\t//\t\ttext deshaped.\r\n\tif(text.length == 0){\r\n\t\treturn;\r\n\t}\r\n\tif(consume_next_space == undefined){\r\n\t\tconsume_next_space = true;\r\n\t}\r\n\tif(rtl == undefined){\r\n\t\trtl = true;\r\n\t}\r\n\ttext = new String(text);\r\n\r\n\tvar outBuf = \"\", strFE = [], textBuff = \"\";\r\n\tif(consume_next_space){\r\n\t\tfor(var j = 0; j < text.length; j++){\r\n\t\t\tif(text.charAt(j) == ' '){\r\n\t\t\t\tif(rtl){\r\n\t\t\t\t\tif(j > 0){\r\n\t\t\t\t\t\tif(text.charAt(j - 1) >= '\\uFEF5' && text.charAt(j - 1) <= '\\uFEFC'){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(j+1 < text.length){\r\n\t\t\t\t\t\tif(text.charAt(j + 1) >= '\\uFEF5' && text.charAt(j + 1) <= '\\uFEFC'){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttextBuff += text.charAt(j);\r\n\t\t}\r\n\t}else{\r\n\t\ttextBuff = new String(text);\r\n\t}\r\n\tstrFE = textBuff.split(\"\");\r\n\tfor(var i = 0; i < textBuff.length; i++){\r\n\t\tif(strFE[i] >= '\\uFE70' && strFE[i] < '\\uFEFF'){\r\n\t\t\tvar chNum = textBuff.charCodeAt(i);\r\n\t\t\tif(strFE[i] >= '\\uFEF5' && strFE[i] <= '\\uFEFC'){\r\n\t\t\t\t//expand the LamAlef\r\n\t\t\t\tif(rtl){\r\n\t\t\t\t\t//Lam + Alef\r\n\t\t\t\t\toutBuf += '\\u0644';\r\n\t\t\t\t\toutBuf += AlefTable[parseInt((chNum - 65269) / 2)];\r\n\t\t\t\t}else{\r\n\t\t\t\t\toutBuf += AlefTable[parseInt((chNum - 65269) / 2)];\r\n\t\t\t\t\toutBuf += '\\u0644';\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\toutBuf += FETo06Table[chNum - 65136];\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\toutBuf += strFE[i];\r\n\t\t}\r\n\t}\r\n\treturn outBuf;\r\n}\r\n\r\nfunction doReorder(str){\r\n\t// summary:\r\n\t//\t\tHelper to the doBidiReorder. Manages the UBA.\r\n\t// str:\r\n\t//\t\tthe string to reorder.\r\n\t// returns:\r\n\t//\t\ttext reordered according to source and result attributes.\r\n\t// tags: \r\n\t//\t\tprivate\t\r\n\tvar chars = str.split(\"\"), levels = [];\r\n\r\n\tcomputeLevels(chars, levels);\r\n\tswapChars(chars, levels);\r\n\tinvertLevel(2, chars, levels);\r\n\tinvertLevel(1, chars, levels);\r\n\treturn chars.join(\"\");\r\n}\r\n\r\nfunction computeLevels(chars, levels){\r\n\tvar len = chars.length\r\n\t\t, impTab = bdx.dir ? impTab_RTL : impTab_LTR\r\n\t\t, prevState = null, newClass = null, newLevel = null, newState = 0\r\n\t\t, action = null, cond = null, condPos = -1, i = null, ix = null\r\n\t\t, types = []\r\n\t\t, classes = []\r\n\t\t;\r\n\tbdx.hiLevel = bdx.dir;\r\n\tbdx.lastArabic = false;\r\n\tbdx.hasUBAT_AL = false,\r\n\tbdx.hasUBAT_B = false;\r\n\tbdx.hasUBAT_S = false;\r\n\tfor(i = 0; i < len; i++){\r\n\t\ttypes[i] = getCharacterType(chars[i]);\r\n\t}\r\n\tfor(ix = 0; ix < len; ix++){\r\n\t\tprevState = newState;\r\n\t\tclasses[ix] = newClass = getCharClass(chars, types, classes, ix);\r\n\t\tnewState = impTab[prevState][newClass];\r\n\t\taction = newState & 0xF0;\r\n\t\tnewState &= 0x0F;\r\n\t\tlevels[ix] = newLevel = impTab[newState][ITIL];\r\n\t\tif(action > 0){\r\n\t\t\tif(action == 0x10){\t// set conditional run to level 1\r\n\t\t\t\tfor(i = condPos; i < ix; i++){\r\n\t\t\t\t\tlevels[i] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tcondPos = -1;\r\n\t\t\t}else{\t// 0x20 confirm the conditional run\r\n\t\t\t\tcondPos = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcond = impTab[newState][ITCOND];\r\n\t\tif(cond){\r\n\t\t\tif(condPos == -1){\r\n\t\t\t\tcondPos = ix;\r\n\t\t\t}\r\n\t\t}else{\t// unconditional level\r\n\t\t\tif(condPos > -1){\r\n\t\t\t\tfor(i = condPos; i < ix; i++){\r\n\t\t\t\t\tlevels[i] = newLevel;\r\n\t\t\t\t}\r\n\t\t\t\tcondPos = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(types[ix] == UBAT_B){\r\n\t\t\tlevels[ix] = 0;\r\n\t\t}\r\n\t\tbdx.hiLevel |= newLevel;\r\n\t}\r\n\tif(bdx.hasUBAT_S){\r\n\t\tfor(i = 0; i < len; i++){\r\n\t\t\tif(types[i] == UBAT_S){\r\n\t\t\t\tlevels[i] = bdx.dir;\r\n\t\t\t\tfor(var j = i - 1; j >= 0; j--){\r\n\t\t\t\t\tif(types[j] == UBAT_WS){\r\n\t\t\t\t\t\tlevels[j] = bdx.dir;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction swapChars(chars, levels){\r\n\t// summary:\r\n\t//\t\tSwap characters with symmetrical mirroring as all kinds of parenthesis.\r\n\t//\t\t(When needed).\r\n\t// chars:\r\n\t//\t\tThe source string as Array of characters.\r\n\t// levels:\r\n\t//\t\tAn array (like hash) of flags for each character in the source string,\r\n\t//\t\tthat defines if swapping should be applied on the following character.\r\n\t// description:\r\n\t//\t\tFirst checks if the swapping should be applied, if not returns, else \r\n\t//\t\tuses the levels \"hash\" to find what characters should be swapped.\r\n\t// tags:\r\n\t//\t\tprivate\t\r\n\r\n\tif(bdx.hiLevel == 0 || bdx.swap.substr(0, 1) == bdx.swap.substr(1, 2)){\r\n\t\treturn;\r\n\t}\r\n\r\n\t//console.log(\"bdx.hiLevel == 0: \" + bdx.hiLevel + \"bdx.swap[0]: \"+ bdx.swap[0] +\" bdx.swap[1]: \" +bdx.swap[1]);\r\n\tfor(var i = 0; i < chars.length; i++){\r\n\t\tif(levels[i] == 1){chars[i] = getMirror(chars[i]);}\r\n\t}\r\n}\r\n\r\nfunction getCharacterType(ch){\r\n\t// summary:\r\n\t//\t\tReturn the type of the character.\r\n\t// ch:\r\n\t//\t\tThe character to be checked.\r\n\r\n\t// description:\r\n\t//\t\tCheck the type of the character according to MasterTable,\r\n\t//\t\ttype = LTR, RTL, neutral,Arabic-Indic digit etc.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\t\r\n\tvar uc = ch.charCodeAt(0)\r\n\t\t, hi = MasterTable[uc >> 8];\r\n\treturn (hi < TBBASE) ? hi : UnicodeTable[hi - TBBASE][uc & 0xFF];\r\n}\r\n\r\nfunction invertStr(str){\r\n\t// summary:\r\n\t//\t\tReturn the reversed string.\r\n\t// str:\r\n\t//\t\tThe string to be reversed.\r\n\t// description:\r\n\t//\t\tReverse the string str.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\t\t\t\r\n\tvar chars = str.split(\"\");\r\n\tchars.reverse();\r\n\treturn chars.join(\"\");\r\n}\r\n\r\nfunction indexOf(cArray, cLength, idx){\r\n\tvar counter = -1;\r\n\tfor(var i = 0; i < cLength; i++){\r\n\t\tif(cArray[i] == idx){\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nfunction isArabicAlefbet(c){\r\n\tfor(var i = 0; i < ArabicAlefBetIntervalsBegine.length; i++){\r\n\t\tif(c >= ArabicAlefBetIntervalsBegine[i] && c <= ArabicAlefBetIntervalsEnd[i]){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction isNextArabic(str06, index, step, nIEnd){\r\n\twhile(((index) * step) < nIEnd && isArabicDiacritics(str06[index])){\r\n\t\tindex += step;\r\n\t}\r\n\tif(((index) * step) < nIEnd && isArabicAlefbet(str06[index])){\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction isNextAlef(str06, index, step, nIEnd){\r\n\twhile(((index) * step) < nIEnd && isArabicDiacritics(str06[index])){\r\n\t\tindex += step;\r\n\t}\r\n\tvar c = ' ';\r\n\tif(((index) * step) < nIEnd){\r\n\t\tc = str06[index];\r\n\t}else{\r\n\t\treturn false;\r\n\t}\r\n\tfor(var i = 0; i < AlefTable.length; i++){\r\n\t\tif(AlefTable[i] == c){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction invertLevel(lev, chars, levels){\r\n\tif(bdx.hiLevel < lev){\r\n\t\treturn;\r\n\t}\r\n\tif(lev == 1 && bdx.dir == RTL && !bdx.hasUBAT_B){\r\n\t\tchars.reverse();\r\n\t\treturn;\r\n\t}\r\n\tvar len = chars.length, start = 0, end, lo, hi, tmp;\r\n\twhile(start < len){\r\n\t\tif(levels[start] >= lev){\r\n\t\t\tend = start + 1;\r\n\t\t\twhile(end < len && levels[end] >= lev){\r\n\t\t\t\tend++;\r\n\t\t\t}\r\n\t\t\tfor(lo = start, hi = end - 1 ; lo < hi; lo++, hi--){\r\n\t\t\t\ttmp = chars[lo];\r\n\t\t\t\tchars[lo] = chars[hi];\r\n\t\t\t\tchars[hi] = tmp;\r\n\t\t\t}\r\n\t\t\tstart = end;\r\n\t\t}\r\n\t\tstart++;\r\n\t}\r\n}\r\n\r\nfunction getCharClass(chars, types, classes, ix){\r\n\t// summary:\r\n\t//\t\tReturn the class if ix character in chars.\r\n\t// chars:\r\n\t//\t\tThe source string as Array of characters.\r\n\t// types:\r\n\t//\t\tArray of types, for each character in chars.\r\n\t// classes:\r\n\t//\t\tArray of classes that already been solved. \r\n\t// ix:\r\n\t//\t\tthe index of checked character.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\t\t\r\n\tvar cType = types[ix], wType, nType, len, i;\r\n\tswitch(cType){\r\n\t\tcase UBAT_L:\r\n\t\tcase UBAT_R:\r\n\t\t\tbdx.lastArabic = false;\r\n\t\tcase UBAT_ON:\r\n\t\tcase UBAT_AN:\r\n\t\t\treturn cType;\r\n\t\tcase UBAT_EN:\r\n\t\t\treturn bdx.lastArabic ? UBAT_AN : UBAT_EN;\r\n\t\tcase UBAT_AL:\r\n\t\t\tbdx.lastArabic = true;\r\n\t\t\tbdx.hasUBAT_AL = true;\r\n\t\t\treturn UBAT_R;\r\n\t\tcase UBAT_WS:\r\n\t\t\treturn UBAT_ON;\r\n\t\tcase UBAT_CS:\r\n\t\t\tif(ix < 1 || (ix + 1) >= types.length ||\r\n\t\t\t\t((wType = classes[ix - 1]) != UBAT_EN && wType != UBAT_AN) ||\r\n\t\t\t\t((nType = types[ix + 1]) != UBAT_EN && nType != UBAT_AN)){\r\n\t\t\t\treturn UBAT_ON;\r\n\t\t\t}\r\n\t\t\tif(bdx.lastArabic){nType = UBAT_AN;}\r\n\t\t\treturn nType == wType ? nType : UBAT_ON;\r\n\t\tcase UBAT_ES:\r\n\t\t\twType = ix > 0 ? classes[ix - 1] : UBAT_B;\r\n\t\t\tif(wType == UBAT_EN && (ix + 1) < types.length && types[ix + 1] == UBAT_EN){\r\n\t\t\t\treturn UBAT_EN;\r\n\t\t\t}\r\n\t\t\treturn UBAT_ON;\r\n\t\tcase UBAT_ET:\r\n\t\t\tif(ix > 0 && classes[ix - 1] == UBAT_EN){\r\n\t\t\t\treturn UBAT_EN;\r\n\t\t\t}\r\n\t\t\tif(bdx.lastArabic){\r\n\t\t\t\treturn UBAT_ON;\r\n\t\t\t}\r\n\t\t\ti = ix + 1;\r\n\t\t\tlen = types.length;\r\n\t\t\twhile(i < len && types[i] == UBAT_ET){\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tif(i < len && types[i] == UBAT_EN){\r\n\t\t\t\treturn UBAT_EN;\r\n\t\t\t}\r\n\t\t\treturn UBAT_ON;\r\n\t\tcase UBAT_NSM:\r\n\t\t\tif(bdx.inFormat == \"VLTR\"){\t// visual to implicit transformation\r\n\t\t\t\tlen = types.length;\r\n\t\t\t\ti = ix + 1;\r\n\t\t\t\twhile(i < len && types[i] == UBAT_NSM){\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < len){\r\n\t\t\t\t\tvar c = chars[ix]\r\n\t\t\t\t\t\t, rtlCandidate = (c >= 0x0591 && c <= 0x08FF) || c == 0xFB1E\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\twType = types[i];\r\n\t\t\t\t\tif(rtlCandidate && (wType == UBAT_R || wType == UBAT_AL)){\r\n\t\t\t\t\t\treturn UBAT_R;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ix < 1 || (wType = types[ix - 1]) == UBAT_B){\r\n\t\t\t\treturn UBAT_ON;\r\n\t\t\t}\r\n\t\t\treturn classes[ix - 1];\r\n\t\tcase UBAT_B:\r\n\t\t\tlastArabic = false;\r\n\t\t\tbdx.hasUBAT_B = true;\r\n\t\t\treturn bdx.dir;\r\n\t\tcase UBAT_S:\r\n\t\t\tbdx.hasUBAT_S = true;\r\n\t\t\treturn UBAT_ON;\r\n\t\tcase UBAT_LRE:\r\n\t\tcase UBAT_RLE:\r\n\t\tcase UBAT_LRO:\r\n\t\tcase UBAT_RLO:\r\n\t\tcase UBAT_PDF:\r\n\t\t\tlastArabic = false;\r\n\t\tcase UBAT_BN:\r\n\t\t\treturn UBAT_ON;\r\n\t}\r\n}\r\n\r\nfunction getMirror(c){\r\n\t// summary:\r\n\t//\t\tCalculates the mirrored character of c\r\n\t// c:\r\n\t//\t\tThe character to be mirrored.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\t\t\t\r\n\tvar mid, low = 0, high = SwapTable.length - 1;\r\n\r\n\twhile(low <= high){\r\n\t\tmid = Math.floor((low + high) / 2);\r\n\t\tif(c < SwapTable[mid][0]){\r\n\t\t\thigh = mid - 1;\r\n\t\t}else if(c > SwapTable[mid][0]){\r\n\t\t\tlow = mid + 1;\r\n\t\t}else{\r\n\t\t\treturn SwapTable[mid][1];\r\n\t\t}\r\n\t}\r\n\treturn c;\r\n}\r\n\r\nfunction isStandAlonCharacter(c){\r\n\tfor(var i = 0; i < StandAlonForm.length; i++){\r\n\t\tif(StandAlonForm[i] == c){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction getMedialFormCharacterFE(c){\r\n\tfor(var i = 0; i < BaseForm.length; i++){\r\n\t\tif(c == BaseForm[i]){\r\n\t\t\treturn MedialForm[i];\r\n\t\t}\r\n\t}\r\n\treturn c;\r\n}\r\n\r\nfunction getFormCharacterFE(/*char*/ c, /*char[]*/formArr){\r\n\tfor(var i = 0; i < BaseForm.length; i++){\r\n\t\tif(c == BaseForm[i]){\r\n\t\t\treturn formArr[i];\r\n\t\t}\r\n\t}\r\n\treturn c;\r\n}\r\n\r\nfunction isArabicDiacritics(c){\r\n\treturn\t(c >= '\\u064b' && c <= '\\u0655') ? true : false;\r\n}\r\n\r\nfunction getOrientation(/*Char*/ oc){\r\n\tif(oc == 'L'){\r\n\t\treturn \"LTR\";\r\n\t}\r\n\tif(oc == 'R'){\r\n\t\treturn \"RTL\";\r\n\t}\r\n\tif(oc == 'C'){\r\n\t\treturn \"CLR\";\r\n\t}\r\n\tif(oc == 'D'){\r\n\t\treturn \"CRL\";\r\n\t}\r\n}\r\n\r\nfunction setAlefToSpace(str06, index, step, nIEnd){\r\n\twhile(((index) * step) < nIEnd && isArabicDiacritics(str06[index])){\r\n\t\tindex += step;\r\n\t}\r\n\tif(((index) * step) < nIEnd){\r\n\t\tstr06[index] = ' ';\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction getLamAlefFE(alef06, LamAlefForm){\r\n\tfor(var i = 0; i < AlefTable.length; i++){\r\n\t\tif(alef06 == AlefTable[i]){\r\n\t\t\treturn LamAlefForm[i];\r\n\t\t}\r\n\t}\r\n\treturn alef06;\r\n}\r\n\r\nfunction LamAlef(alef){\r\n\t// summary:\r\n\t//\t\tIf the alef variable is an ARABIC ALEF letter,\r\n\t//\t\treturn the LamAlef code associated with the specific \r\n\t//\t\talef character.\r\n\t// alef:\r\n\t//\t\tThe alef code type.\r\n\t// description:\r\n\t//\t\tIf \"alef\" is an ARABIC ALEF letter, identify which alef is it,\r\n\t//\t\tusing AlefTable, then return the LamAlef associated with it.\r\n\t// tags:\r\n\t//\t\tprivate\t\t\t\r\n\tfor(var i = 0; i < AlefTable.length; i++){\r\n\t\tif(AlefTable[i] == alef){\r\n\t\t\treturn AlefTable[i];\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nvar\tbdx = {\r\n\t\tdir: 0,\r\n\t\tdefInFormat: \"LLTR\",\r\n\t\tdefoutFormat: \"VLTR\",\r\n\t\tdefSwap: \"YN\",\r\n\t\tinFormat: \"LLTR\",\r\n\t\toutFormat: \"VLTR\",\r\n\t\tswap: \"YN\",\r\n\t\thiLevel: 0,\r\n\t\tlastArabic: false,\r\n\t\thasUBAT_AL: false,\r\n\t\thasBlockSep: false,\r\n\t\thasSegSep: false\r\n};\r\n\r\nvar ITIL = 5;\r\n\r\nvar ITCOND = 6;\r\n\r\nvar LTR = 0;\r\n\r\nvar RTL = 1;\r\n\r\n/****************************************************************************/\r\n/* Array in which directional characters are replaced by their symmetric.\t*/\r\n/****************************************************************************/\r\nvar SwapTable = [\r\n\t[ \"\\u0028\", \"\\u0029\" ],\t/* Round brackets\t\t\t\t\t*/\r\n\t[ \"\\u0029\", \"\\u0028\" ],\r\n\t[ \"\\u003C\", \"\\u003E\" ],\t/* Less than/greater than\t\t\t*/\r\n\t[ \"\\u003E\", \"\\u003C\" ],\r\n\t[ \"\\u005B\", \"\\u005D\" ],\t/* Square brackets\t\t\t\t\t*/\r\n\t[ \"\\u005D\", \"\\u005B\" ],\r\n\t[ \"\\u007B\", \"\\u007D\" ],\t/* Curly brackets\t\t\t\t\t*/\r\n\t[ \"\\u007D\", \"\\u007B\" ],\r\n\t[ \"\\u00AB\", \"\\u00BB\" ],\t/* Double angle quotation marks\t*/\r\n\t[ \"\\u00BB\", \"\\u00AB\" ],\r\n\t[ \"\\u2039\", \"\\u203A\" ],\t/* single angle quotation mark\t\t*/\r\n\t[ \"\\u203A\", \"\\u2039\" ],\r\n\t[ \"\\u207D\", \"\\u207E\" ],\t/* Superscript parentheses\t\t\t*/\r\n\t[ \"\\u207E\", \"\\u207D\" ],\r\n\t[ \"\\u208D\", \"\\u208E\" ],\t/* Subscript parentheses\t\t\t*/\r\n\t[ \"\\u208E\", \"\\u208D\" ],\r\n\t[ \"\\u2264\", \"\\u2265\" ],\t/* Less/greater than or equal\t\t*/\r\n\t[ \"\\u2265\", \"\\u2264\" ],\r\n\t[ \"\\u2329\", \"\\u232A\" ],\t/* Angle brackets\t\t\t\t\t*/\r\n\t[ \"\\u232A\", \"\\u2329\" ],\r\n\t[ \"\\uFE59\", \"\\uFE5A\" ],\t/* Small round brackets\t\t\t*/\r\n\t[ \"\\uFE5A\", \"\\uFE59\" ],\r\n\t[ \"\\uFE5B\", \"\\uFE5C\" ],\t/* Small curly brackets\t\t\t*/\r\n\t[ \"\\uFE5C\", \"\\uFE5B\" ],\r\n\t[ \"\\uFE5D\", \"\\uFE5E\" ],\t/* Small tortoise shell brackets\t*/\r\n\t[ \"\\uFE5E\", \"\\uFE5D\" ],\r\n\t[ \"\\uFE64\", \"\\uFE65\" ],\t/* Small less than/greater than\t*/\r\n\t[ \"\\uFE65\", \"\\uFE64\" ]\r\n];\r\nvar AlefTable = ['\\u0622', '\\u0623', '\\u0625', '\\u0627'];\r\n\r\nvar AlefTableFE = [0xFE81, 0xFE82, 0xFE83, 0xFE84, 0xFE87, 0xFE88, 0xFE8D, 0xFE8E];\r\n\r\nvar LamTableFE = [0xFEDD, 0xFEDE, 0xFEDF, 0xFEE0];\r\n\r\nvar LamAlefInialTableFE = ['\\ufef5', '\\ufef7', '\\ufef9', '\\ufefb'];\r\n\r\nvar LamAlefMedialTableFE = ['\\ufef6', '\\ufef8', '\\ufefa', '\\ufefc'];\r\n/**\r\n * Arabic Characters in the base form\r\n */\r\nvar BaseForm = ['\\u0627', '\\u0628', '\\u062A', '\\u062B', '\\u062C', '\\u062D', '\\u062E', '\\u062F', '\\u0630', '\\u0631', '\\u0632', '\\u0633', '\\u0634', '\\u0635', '\\u0636', '\\u0637', '\\u0638', '\\u0639', '\\u063A', '\\u0641', '\\u0642', '\\u0643', '\\u0644', '\\u0645', '\\u0646', '\\u0647', '\\u0648', '\\u064A', '\\u0625', '\\u0623', '\\u0622', '\\u0629', '\\u0649', '\\u06CC', '\\u0626', '\\u0624', '\\u064B', '\\u064C', '\\u064D', '\\u064E', '\\u064F', '\\u0650', '\\u0651', '\\u0652', '\\u0621'];\r\n\r\n/**\r\n * Arabic shaped characters in Isolated form\r\n */\r\nvar IsolatedForm = ['\\uFE8D', '\\uFE8F', '\\uFE95', '\\uFE99', '\\uFE9D', '\\uFEA1', '\\uFEA5', '\\uFEA9', '\\uFEAB', '\\uFEAD', '\\uFEAF', '\\uFEB1', '\\uFEB5', '\\uFEB9', '\\uFEBD', '\\uFEC1', '\\uFEC5', '\\uFEC9', '\\uFECD', '\\uFED1', '\\uFED5', '\\uFED9', '\\uFEDD', '\\uFEE1', '\\uFEE5', '\\uFEE9', '\\uFEED', '\\uFEF1', '\\uFE87', '\\uFE83', '\\uFE81', '\\uFE93', '\\uFEEF', '\\uFBFC', '\\uFE89', '\\uFE85', '\\uFE70', '\\uFE72', '\\uFE74', '\\uFE76', '\\uFE78', '\\uFE7A', '\\uFE7C', '\\uFE7E', '\\uFE80'];\r\n\r\n/**\r\n * Arabic shaped characters in Final form\r\n */\r\nvar FinalForm = ['\\uFE8E', '\\uFE90', '\\uFE96', '\\uFE9A', '\\uFE9E', '\\uFEA2', '\\uFEA6', '\\uFEAA', '\\uFEAC', '\\uFEAE', '\\uFEB0', '\\uFEB2', '\\uFEB6', '\\uFEBA', '\\uFEBE', '\\uFEC2', '\\uFEC6', '\\uFECA', '\\uFECE', '\\uFED2', '\\uFED6', '\\uFEDA', '\\uFEDE', '\\uFEE2', '\\uFEE6', '\\uFEEA', '\\uFEEE', '\\uFEF2', '\\uFE88', '\\uFE84', '\\uFE82', '\\uFE94', '\\uFEF0', '\\uFBFD', '\\uFE8A', '\\uFE86', '\\uFE70', '\\uFE72', '\\uFE74', '\\uFE76', '\\uFE78', '\\uFE7A', '\\uFE7C', '\\uFE7E', '\\uFE80'];\r\n\r\n/**\r\n * Arabic shaped characters in Media form\r\n */\r\nvar MedialForm = ['\\uFE8E', '\\uFE92', '\\uFE98', '\\uFE9C', '\\uFEA0', '\\uFEA4', '\\uFEA8', '\\uFEAA', '\\uFEAC', '\\uFEAE', '\\uFEB0', '\\uFEB4', '\\uFEB8', '\\uFEBC', '\\uFEC0', '\\uFEC4', '\\uFEC8', '\\uFECC', '\\uFED0', '\\uFED4', '\\uFED8', '\\uFEDC', '\\uFEE0', '\\uFEE4', '\\uFEE8', '\\uFEEC', '\\uFEEE', '\\uFEF4', '\\uFE88', '\\uFE84', '\\uFE82', '\\uFE94', '\\uFEF0', '\\uFBFF', '\\uFE8C', '\\uFE86', '\\uFE71', '\\uFE72', '\\uFE74', '\\uFE77', '\\uFE79', '\\uFE7B', '\\uFE7D', '\\uFE7F', '\\uFE80'];\r\n\r\n/**\r\n * Arabic shaped characters in Initial form\r\n */\r\nvar InitialForm = ['\\uFE8D', '\\uFE91', '\\uFE97', '\\uFE9B', '\\uFE9F', '\\uFEA3', '\\uFEA7', '\\uFEA9', '\\uFEAB', '\\uFEAD', '\\uFEAF', '\\uFEB3', '\\uFEB7', '\\uFEBB', '\\uFEBF', '\\uFEC3', '\\uFEC7', '\\uFECB', '\\uFECF', '\\uFED3', '\\uFED7', '\\uFEDB', '\\uFEDF', '\\uFEE3', '\\uFEE7', '\\uFEEB', '\\uFEED', '\\uFEF3', '\\uFE87', '\\uFE83', '\\uFE81', '\\uFE93', '\\uFEEF', '\\uFBFE', '\\uFE8B', '\\uFE85', '\\uFE70', '\\uFE72', '\\uFE74', '\\uFE76', '\\uFE78', '\\uFE7A', '\\uFE7C', '\\uFE7E', '\\uFE80'];\r\n\r\n/**\r\n * Arabic characters that couldn't join to the next character\r\n */\r\nvar StandAlonForm = ['\\u0621', '\\u0627', '\\u062F', '\\u0630', '\\u0631', '\\u0632', '\\u0648', '\\u0622', '\\u0629', '\\u0626', '\\u0624', '\\u0625', '\\u0675', '\\u0623'];\r\n\r\nvar FETo06Table = ['\\u064B', '\\u064B', '\\u064C', '\\u061F', '\\u064D', '\\u061F', '\\u064E', '\\u064E', '\\u064F', '\\u064F', '\\u0650', '\\u0650', '\\u0651', '\\u0651', '\\u0652', '\\u0652', '\\u0621', '\\u0622', '\\u0622', '\\u0623', '\\u0623', '\\u0624', '\\u0624', '\\u0625', '\\u0625', '\\u0626', '\\u0626', '\\u0626', '\\u0626', '\\u0627', '\\u0627', '\\u0628', '\\u0628', '\\u0628', '\\u0628', '\\u0629', '\\u0629', '\\u062A', '\\u062A', '\\u062A', '\\u062A', '\\u062B', '\\u062B', '\\u062B', '\\u062B', '\\u062C', '\\u062C', '\\u062C', '\\u062c', '\\u062D', '\\u062D', '\\u062D', '\\u062D', '\\u062E', '\\u062E', '\\u062E', '\\u062E', '\\u062F', '\\u062F', '\\u0630', '\\u0630', '\\u0631', '\\u0631', '\\u0632', '\\u0632', '\\u0633', '\\u0633', '\\u0633', '\\u0633', '\\u0634', '\\u0634', '\\u0634', '\\u0634', '\\u0635', '\\u0635', '\\u0635', '\\u0635', '\\u0636', '\\u0636', '\\u0636', '\\u0636', '\\u0637', '\\u0637', '\\u0637', '\\u0637', '\\u0638', '\\u0638', '\\u0638', '\\u0638', '\\u0639', '\\u0639', '\\u0639', '\\u0639', '\\u063A', '\\u063A', '\\u063A', '\\u063A', '\\u0641', '\\u0641', '\\u0641', '\\u0641', '\\u0642', '\\u0642', '\\u0642', '\\u0642', '\\u0643', '\\u0643', '\\u0643', '\\u0643', '\\u0644', '\\u0644', '\\u0644', '\\u0644', '\\u0645', '\\u0645', '\\u0645', '\\u0645', '\\u0646', '\\u0646', '\\u0646', '\\u0646', '\\u0647', '\\u0647', '\\u0647', '\\u0647', '\\u0648', '\\u0648', '\\u0649', '\\u0649', '\\u064A', '\\u064A', '\\u064A', '\\u064A', '\\uFEF5', '\\uFEF6', '\\uFEF7', '\\uFEF8', '\\uFEF9', '\\uFEFA', '\\uFEFB', '\\uFEFC', '\\u061F', '\\u061F', '\\u061F'];\r\n\r\nvar ArabicAlefBetIntervalsBegine = ['\\u0621', '\\u0641'];\r\n\r\nvar ArabicAlefBetIntervalsEnd = ['\\u063A', '\\u064a'];\r\n\r\nvar Link06 = [\r\n\t1\t\t\t+ 32 + 256 * 0x11,\r\n\t1\t\t\t+ 32 + 256 * 0x13,\r\n\t1\t\t\t+ 256 * 0x15,\r\n\t1\t\t\t+ 32 + 256 * 0x17,\r\n\t1 + 2\t\t+ 256 * 0x19,\r\n\t1\t\t\t+ 32 + 256 * 0x1D,\r\n\t1 + 2\t\t+ 256 * 0x1F,\r\n\t1\t\t\t+ 256 * 0x23,\r\n\t1 + 2\t\t+ 256 * 0x25,\r\n\t1 + 2\t\t+ 256 * 0x29,\r\n\t1 + 2\t\t+ 256 * 0x2D,\r\n\t1 + 2\t\t+ 256 * 0x31,\r\n\t1 + 2\t\t+ 256 * 0x35,\r\n\t1\t\t\t+ 256 * 0x39,\r\n\t1\t\t\t+ 256 * 0x3B,\r\n\t1\t\t\t+ 256 * 0x3D,\r\n\t1\t\t\t+ 256 * 0x3F,\r\n\t1 + 2\t\t+ 256 * 0x41,\r\n\t1 + 2\t\t+ 256 * 0x45,\r\n\t1 + 2\t\t+ 256 * 0x49,\r\n\t1 + 2\t\t+ 256 * 0x4D,\r\n\t1 + 2\t\t+ 256 * 0x51,\r\n\t1 + 2\t\t+ 256 * 0x55,\r\n\t1 + 2\t\t+ 256 * 0x59,\r\n\t1 + 2\t\t+ 256 * 0x5D,\r\n\t0, 0, 0, 0, 0,\t/* 0x63B - 0x63F */\r\n\t1 + 2,\r\n\t1 + 2\t\t+ 256 * 0x61,\r\n\t1 + 2\t\t+ 256 * 0x65,\r\n\t1 + 2\t\t+ 256 * 0x69,\r\n\t1 + 2\t\t+ 16 + 256 * 0x6D,\r\n\t1 + 2\t\t+ 256 * 0x71,\r\n\t1 + 2\t\t+ 256 * 0x75,\r\n\t1 + 2\t\t+ 256 * 0x79,\r\n\t1\t\t\t+ 256 * 0x7D,\r\n\t1\t\t\t+ 256 * 0x7F,\r\n\t1 + 2\t\t+ 256 * 0x81,\r\n\t4, 4, 4, 4,\r\n\t4, 4, 4, 4, \t/* 0x64B - 0x652 */\r\n\t0, 0, 0, 0, 0,\r\n\t0, 0, 0, 0, \t/* 0x653 - 0x65B */\r\n\t1\t\t\t+ 256 * 0x85,\r\n\t1\t\t\t+ 256 * 0x87,\r\n\t1\t\t\t+ 256 * 0x89,\r\n\t1\t\t\t+ 256 * 0x8B,\r\n\t0, 0, 0, 0, 0,\r\n\t0, 0, 0, 0, 0,\r\n\t0, 0, 0, 0, 0, 0,/* 0x660 - 0x66F */\r\n\t4,\r\n\t0,\r\n\t1\t\t\t+ 32,\r\n\t1\t\t\t+ 32,\r\n\t0,\r\n\t1\t\t\t+ 32,\r\n\t1, 1,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1+2, 1+2, 1+2, 1+2,\r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\r\n\t1, 1, 1, 1, 1, 1, 1, 1,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2, 1+2,\r\n\t1,\r\n\t1+2,\r\n\t1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\r\n\t1+2,\r\n\t1,\r\n\t1+2, 1+2, 1+2, 1+2,\r\n\t1, 1\r\n];\r\n\r\nvar LinkFE = [\r\n\t1 + 2,\r\n\t1 + 2,\r\n\t1 + 2, 0, 1+ 2, 0, 1+ 2,\r\n\t1 + 2,\r\n\t1+ 2, 1 + 2, 1+2, 1 + 2,\r\n\t1+ 2, 1 + 2, 1+2, 1 + 2,\r\n\t0, 0 + 32, 1 + 32, 0 + 32,\r\n\t1 + 32, 0, 1, 0 + 32,\r\n\t1 + 32, 0, 2, 1 + 2,\r\n\t1, 0 + 32, 1 + 32, 0,\r\n\t2, 1 + 2, 1, 0,\r\n\t1, 0, 2, 1 + 2,\r\n\t1, 0, 2, 1 + 2,\r\n\t1, 0, 2, 1 + 2,\r\n\t1, 0, 2, 1 + 2,\r\n\t1, 0, 2, 1 + 2,\r\n\t1, 0, 1, 0,\r\n\t1, 0, 1, 0,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0 + 16, 2 + 16, 1 + 2 +16,\r\n\t1 + 16, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 1, 0,\r\n\t1, 0, 2, 1+2,\r\n\t1, 0, 1, 0,\r\n\t1, 0, 1, 0,\r\n\t1\r\n];\r\nvar\timpTab_LTR = [\r\n\t\t\t\t\t/*\t\tL,\t\tR,\t\tEN,\t\tAN,\t\tN,\t\tIL,\t\tCond */\r\n\t/* 0 LTR text\t*/\t[\t0,\t\t3,\t\t0,\t\t1,\t\t0,\t\t0,\t\t0\t],\r\n\t/* 1 LTR+AN\t\t*/\t[\t0,\t\t3,\t\t0,\t\t1,\t\t2,\t\t2,\t\t0\t],\r\n\t/* 2 LTR+AN+N\t*/\t[\t0,\t\t3,\t\t0,\t\t0x11,\t2,\t\t0,\t\t1\t],\r\n\t/* 3 RTL text\t*/\t[\t0,\t\t3,\t\t5,\t\t5,\t\t4,\t\t1,\t\t0\t],\r\n\t/* 4 RTL cont\t*/\t[\t0,\t\t3,\t\t0x15,\t0x15,\t4,\t\t0,\t\t1\t],\r\n\t/* 5 RTL+EN/AN\t*/\t[\t0,\t\t3,\t\t5,\t\t5,\t\t4,\t\t2,\t\t0\t]\r\n];\r\nvar impTab_RTL = [\r\n\t\t\t\t\t/*\t\tL,\t\tR,\t\tEN,\t\tAN,\t\tN,\t\tIL,\t\tCond */\r\n\t/* 0 RTL text\t*/\t[\t2,\t\t0,\t\t1,\t\t1,\t\t0,\t\t1,\t\t0\t],\r\n\t/* 1 RTL+EN/AN\t*/\t[\t2,\t\t0,\t\t1,\t\t1,\t\t0,\t\t2,\t\t0\t],\r\n\t/* 2 LTR text\t*/\t[\t2,\t\t0,\t\t2,\t\t1,\t\t3,\t\t2,\t\t0\t],\r\n\t/* 3 LTR+cont\t*/\t[\t2,\t\t0,\t\t2,\t\t0x21,\t3,\t\t1,\t\t1\t]\r\n];\r\n\r\nvar UBAT_L\t= 0; /* left to right\t\t\t\t*/\r\nvar UBAT_R\t= 1; /* right to left\t\t\t\t*/\r\nvar UBAT_EN = 2; /* European digit\t\t\t\t*/\r\nvar UBAT_AN = 3; /* Arabic-Indic digit\t\t\t*/\r\nvar UBAT_ON = 4; /* neutral\t\t\t\t\t\t*/\r\nvar UBAT_B\t= 5; /* block separator\t\t\t\t*/\r\nvar UBAT_S\t= 6; /* segment separator\t\t\t*/\r\nvar UBAT_AL = 7; /* Arabic Letter\t\t\t\t*/\r\nvar UBAT_WS = 8; /* white space\t\t\t\t\t*/\r\nvar UBAT_CS = 9; /* common digit separator\t\t*/\r\nvar UBAT_ES = 10; /* European digit separator\t*/\r\nvar UBAT_ET = 11; /* European digit terminator\t*/\r\nvar UBAT_NSM = 12; /* Non Spacing Mark\t\t\t*/\r\nvar UBAT_LRE = 13; /* LRE\t\t\t\t\t\t*/\r\nvar UBAT_RLE = 14; /* RLE\t\t\t\t\t\t*/\r\nvar UBAT_PDF = 15; /* PDF\t\t\t\t\t\t*/\r\nvar UBAT_LRO = 16; /* LRO\t\t\t\t\t\t*/\r\nvar UBAT_RLO = 17; /* RLO\t\t\t\t\t\t*/\r\nvar UBAT_BN\t= 18; /* Boundary Neutral\t\t\t*/\r\n\r\nvar TBBASE = 100;\r\n\r\nvar TB00 = TBBASE + 0;\r\nvar TB05 = TBBASE + 1;\r\nvar TB06 = TBBASE + 2;\r\nvar TB07 = TBBASE + 3;\r\nvar TB20 = TBBASE + 4;\r\nvar TBFB = TBBASE + 5;\r\nvar TBFE = TBBASE + 6;\r\nvar TBFF = TBBASE + 7;\r\n\r\nvar L\t= UBAT_L;\r\nvar R\t= UBAT_R;\r\nvar EN\t= UBAT_EN;\r\nvar AN\t= UBAT_AN;\r\nvar ON\t= UBAT_ON;\r\nvar B\t= UBAT_B;\r\nvar S\t= UBAT_S;\r\nvar AL\t= UBAT_AL;\r\nvar WS\t= UBAT_WS;\r\nvar CS\t= UBAT_CS;\r\nvar ES\t= UBAT_ES;\r\nvar ET\t= UBAT_ET;\r\nvar NSM\t= UBAT_NSM;\r\nvar LRE\t= UBAT_LRE;\r\nvar RLE\t= UBAT_RLE;\r\nvar PDF\t= UBAT_PDF;\r\nvar LRO\t= UBAT_LRO;\r\nvar RLO\t= UBAT_RLO;\r\nvar BN\t= UBAT_BN;\r\n\r\nvar MasterTable = [\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tTB00,\tL\t,\tL\t,\tL\t,\tL\t,\tTB05,\tTB06,\tTB07,\tR\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*1-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*2-*/\tTB20,\tON\t,\tON\t,\tON\t,\tL\t,\tON\t,\tL\t,\tON\t,\tL\t,\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tON\t,\tON\t,\r\n\t/*3-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*4-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tON\t,\r\n\t/*5-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*6-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*7-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*8-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*9-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\r\n\t/*A-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\r\n\t/*B-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*C-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*D-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tON\t,\tON\t,\tL\t,\tL\t,\tON\t,\tON\t,\tL\t,\r\n\t/*E-*/\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*F-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tTBFB,\tAL\t,\tAL\t,\tTBFE,\tTBFF\r\n];\r\n\r\ndelete TB00;\r\ndelete TB05;\r\ndelete TB06;\r\ndelete TB07;\r\ndelete TB20;\r\ndelete TBFB;\r\ndelete TBFE;\r\ndelete TBFF;\r\n\r\nvar UnicodeTable = [\r\n\t[ /*\tTable 00: Unicode 00xx */\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tS\t,\tB\t,\tS\t,\tWS\t,\tB\t,\tBN\t,\tBN\t,\r\n\t/*1-*/\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tB\t,\tB\t,\tB\t,\tS\t,\r\n\t/*2-*/\tWS\t,\tON\t,\tON\t,\tET\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tES\t,\tCS\t,\tES\t,\tCS\t,\tCS\t,\r\n\t/*3-*/\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tCS\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*4-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*5-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*6-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*7-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tBN\t,\r\n\t/*8-*/\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tB\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\r\n\t/*9-*/\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\r\n\t/*A-*/\tCS\t,\tON\t,\tET\t,\tET\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\tON\t,\tON\t,\tBN\t,\tON\t,\tON\t,\r\n\t/*B-*/\tET\t,\tET\t,\tEN\t,\tEN\t,\tON\t,\tL\t,\tON\t,\tON\t,\tON\t,\tEN\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*C-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*D-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*E-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*F-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\r\n\t],\r\n\t[ /*\tTable 01: Unicode 05xx */\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*1-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*2-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t , ON\t,\tON\t,\r\n\t/*3-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*4-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*5-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*6-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*7-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*8-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*9-*/\tON\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*A-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*B-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tR\t,\tNSM\t,\r\n\t/*C-*/\tR\t,\tNSM\t,\tNSM\t,\tR\t,\tNSM\t,\tNSM\t,\tR\t,\tNSM\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*D-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\r\n\t/*E-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*F-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\r\n\t],\r\n\t[ /*\tTable 02: Unicode 06xx */\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tON\t,\tON\t,\tON\t,\tON\t,\tAL\t,\tET\t,\tET\t,\tAL\t,\tCS\t,\tAL\t,\tON\t,\tON\t,\r\n\t/*1-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tAL\t,\tON\t,\tON\t,\tAL\t,\tAL\t,\r\n\t/*2-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*3-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*4-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*5-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*6-*/\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tAN\t,\tET\t,\tAN\t,\tAN\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*7-*/\tNSM\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*8-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*9-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*A-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*B-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*C-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*D-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tAN\t,\tON\t,\tNSM\t,\r\n\t/*E-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tAL\t,\tAL\t,\tNSM\t,\tNSM\t,\tON\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tAL\t,\tAL\t,\r\n\t/*F-*/\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\r\n\t],\r\n\t[\t/*\tTable\t03:\tUnicode\t07xx\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tON\t,\tAL\t,\r\n\t/*1-*/\tAL\t,\tNSM\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*2-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*3-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*4-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tON\t,\tON\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*5-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*6-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*7-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*8-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*9-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*A-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*B-*/\tNSM\t,\tAL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*C-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\r\n\t/*D-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\r\n\t/*E-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*F-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tR\t,\tR\t,\tON\t,\tON\t,\tON\t,\tON\t,\tR\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\r\n\t],\r\n\t[\t/*\tTable\t04:\tUnicode\t20xx\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tWS\t,\tBN\t,\tBN\t,\tBN\t,\tL\t,\tR\t,\r\n\t/*1-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*2-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tWS\t,\tB\t,\tLRE\t,\tRLE\t,\tPDF\t,\tLRO\t,\tRLO\t,\tCS\t,\r\n\t/*3-*/\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*4-*/\tON\t,\tON\t,\tON\t,\tON\t,\tCS\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*5-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tWS\t,\r\n\t/*6-*/\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\tBN\t,\r\n\t/*7-*/\tEN\t,\tL\t,\tON\t,\tON\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tES\t,\tES\t,\tON\t,\tON\t,\tON\t,\tL\t,\r\n\t/*8-*/\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tES\t,\tES\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*9-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\r\n\t/*A-*/\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\r\n\t/*B-*/\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*C-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*D-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*E-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*F-*/\tNSM\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\r\n\t],\r\n\t[\t/*\tTable\t05:\tUnicode\tFBxx\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*1-*/\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tR\t,\tNSM\t,\tR\t,\r\n\t/*2-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tES\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\r\n\t/*3-*/\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tON\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tON\t,\tR\t,\tON\t,\r\n\t/*4-*/\tR\t,\tR\t,\tON\t,\tR\t,\tR\t,\tON\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\tR\t,\r\n\t/*5-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*6-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*7-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*8-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*9-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*A-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*B-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*C-*/\tAL\t,\tAL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*D-*/\tON\t,\tON\t,\tON\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*E-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*F-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\r\n\t],\r\n\t[\t/*\tTable\t06:\tUnicode\tFExx\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\r\n\t/*1-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*2-*/\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tNSM\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*3-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*4-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*5-*/\tCS\t,\tON\t,\tCS\t,\tON\t,\tON\t,\tCS\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tET\t,\r\n\t/*6-*/\tON\t,\tON\t,\tES\t,\tES\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*7-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tON\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*8-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*9-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*A-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*B-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*C-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*D-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*E-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\r\n\t/*F-*/\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tAL\t,\tON\t,\tON\t,\tBN\r\n\t],\r\n\t[\t/*\tTable\t07:\tUnicode\tFFxx\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*\t\t0\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8\t\t9\t\tA\t\tB\t\tC\t\tD\t\tE\t\tF\t*/\r\n\t/************************************************************************************************************************************/\r\n\t/*0-*/\tON\t,\tON\t,\tON\t,\tET\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tES\t,\tCS\t,\tES\t,\tCS\t,\tCS\t,\r\n\t/*1-*/\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tEN\t,\tCS\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*2-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*3-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*4-*/\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*5-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*6-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*7-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*8-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*9-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*A-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*B-*/\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\r\n\t/*C-*/\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\r\n\t/*D-*/\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tL\t,\tL\t,\tL\t,\tON\t,\tON\t,\tON\t,\r\n\t/*E-*/\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tET\t,\tET\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\r\n\t/*F-*/\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\t,\tON\r\n\t]\r\n];\r\n\r\ndelete L;\r\ndelete R;\r\ndelete EN;\r\ndelete AN;\r\ndelete ON;\r\ndelete B;\r\ndelete S;\r\ndelete AL;\r\ndelete WS;\r\ndelete CS;\r\ndelete ES;\r\ndelete ET;\r\ndelete NSM;\r\ndelete LRE;\r\ndelete RLE;\r\ndelete PDF;\r\ndelete LRO;\r\ndelete RLO;\r\ndelete BN;\r\n\r\nreturn BidiEngine;\r\n});\r\n"]}