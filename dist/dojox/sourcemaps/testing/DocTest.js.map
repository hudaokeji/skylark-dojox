{"version":3,"sources":["testing/DocTest.js"],"names":["define","dojo","declare","errors","getTests","moduleName","path","moduleUrl","file","substring","length","data","xhrGet","url","handleAs","_getText","this","_getTestsFromString","getTestsFromString","insideComments","trim","hitch","string","lines","split","len","tests","test","commands","expectedResult","line","i","l","match","push","join","run","_run","oks","t","res","runTest","msg","viewCommands","substr","success","console","info","actual","actualResult","expected","error","ret","cmds","eval","String","toJson","charAt"],"mappings":"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","file":"../../testing/DocTest.js","sourcesContent":["define(\"dojox/testing/DocTest\", [\"dojo/string\"], function() {\r\n\r\nreturn dojo.declare(\r\n\t\"dojox.testing.DocTest\",\r\n\tnull,\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tThis class executes doctests.\r\n\t\t// description:\r\n\t\t//\t\tDocTests are tests that are defined inside the comment.\r\n\t\t//\t\tA doctest looks as if it was copied from the shell (which it mostly is).\r\n\t\t//\t\tA doctest is executed when the following conditions match:\r\n\t\t//\t\t1) all lines are comments\r\n\t\t//\t\t2) the line always starts with spaces/tabs followed by \"//\"\r\n\t\t//\t\t   and at least one space\r\n\t\t//\t\t3) the line(s) of the test to execute starts with \">>>\"\r\n\t\t//\t\t   preceded by what is described in 2)\r\n\t\t//\t\t4) the first line after 3) starting without \">>>\" is the exptected result.\r\n\t\t//\t\t   preceded by what is described in 2)\r\n\t\t//\t\t5) the test sequence is terminated by an empty line, or the next\r\n\t\t//\t\t   test in the following line, or a new line that does not start as described in 2)\r\n\t\t//\t\t   (simple said: is not a comment)\r\n\t\t//\t\t   preceded by what is described in 2)\r\n\t\t//\r\n\t\t//\t\tI.e. the following is a simple doctest, that will actually also be run\r\n\t\t//\t\tif you run this class against this file here:\r\n\t\t//\t\t>>> 1+1 // A simple test case. Terminated by an empty line\r\n\t\t//\t\t2\r\n\t\t//\r\n\t\t//\t\t>>> 1==2\r\n\t\t//\t\tfalse\r\n\t\t//\t\t>>> \"a\"+\"b\" // Also without the empty line before, this is a new test.\r\n\t\t//\t\t\"ab\"\r\n\t\t//\r\n\t\t//\t\t>>> var anything = \"anything\" // Multiple commands for one test.\r\n\t\t//\t\t>>> \"something\"==anything\r\n\t\t//\t\tfalse\r\n\t\t//\r\n\t\t//\t\tDocTests are great for inline documenting a class or method, they also\r\n\t\t//\t\tare very helpful in understanding what the class/method actually does.\r\n\t\t//\t\tThey don't make sense everywhere, but sometimes they are really handy.\r\n\r\n\r\n\t\t//\tTODO:\r\n\t\t//\t\t-\tusing console.log() in a test prints something on the\r\n\t\t//\t\t\tconsole (if you do it on the console) but its not accepted\r\n\t\t//\t\t\tyet to be the test result, may be override console.log!?\r\n\t\t//\t\t\ti.e. here i wanted to: dojo.forEach([\"one\", 2],\r\n\t\t//\t\t\tfunction(el, index) {console.log(el, index)}) that works on\r\n\t\t//\t\t\tthe console, but not as a docTest :-(\r\n\t\t//\t\t-\tsurround the eval for each test case singlely with a\r\n\t\t//\t\t\ttry-catch, to to catch syntax errors etc (though the\r\n\t\t//\t\t\tshouldn't happen if you copy the test from the shell :-))\r\n\t\r\n\t\t\r\n\t\terrors: [],\r\n\t\t\r\n\t\tgetTests:function(/*String*/moduleName){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tExtract the tests from the given module or string.\r\n\t\t\t// examples:\r\n\t\t\t//\t\t>>> dojo.isArray(new dojox.testing.DocTest().getTests(\"dojox.testing.DocTest\")) // Use the module name to extract the tests from.\r\n\t\t\t//\t\ttrue\r\n\t\t\tvar path = dojo.moduleUrl(moduleName).path;\r\n\t\t\t// TODO:\r\n\t\t\t//\t\tthis needs to be done better, this is pretty simple and\r\n\t\t\t//\t\tsurely not dummy proof\r\n\t\t\tvar file = path.substring(0, path.length-1)+\".js\";\r\n\t\t\tvar xhr = dojo.xhrGet({url:file, handleAs:\"text\"});\r\n\t\t\t// Make loading synchronously, mainly so we can use it in doh.\r\n\t\t\tvar data = dojo._getText(file);\r\n\t\t\treturn this._getTestsFromString(data, true);\r\n\t\t},\r\n\t\t\r\n\t\tgetTestsFromString:function(/*String*/data){\r\n\t\t\t// examples:\r\n\t\t\t//\t\t>>> (new dojox.testing.DocTest().getTestsFromString(\">>> 1+1\\n2\\n>>> 2+2\\n4\")).length // Do tests from strings get detected properly?\r\n\t\t\t//\t\t2\r\n\t\t\treturn this._getTestsFromString(data, false);\r\n\t\t},\r\n\t\t\r\n\t\t_getTestsFromString:function(/*String*/data, /*Boolean*/insideComments){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tParse the given string for tests.\r\n\t\t\t// insideComments: Boolean\r\n\t\t\t//\t\tif false \"data\" contains only the pure tests, comments already stripped.\r\n\t\t\tvar trim = dojo.hitch(dojo.string, \"trim\");\r\n\t\t\tvar lines = data.split(\"\\n\");\r\n\t\t\tvar len = lines.length;\r\n\t\t\tvar tests = [];\r\n\t\t\tvar test = {\r\n\t\t\t\tcommands: [],\r\n\t\t\t\texpectedResult: [],\r\n\t\t\t\tline: null\r\n\t\t\t};\r\n\t\t\tfor(var i=0; i<len+1; i++){\r\n\t\t\t\t// Trim the line, so we don't have to worry about leading\r\n\t\t\t\t// spaces or tabs, bla bla ...\r\n\t\t\t\tvar l = trim(lines[i] || \"\"); // The '|| \"\"' makes sure tests that have no preceding \\n are taken into account too.\r\n\t\t\t\t// TODO:\r\n\t\t\t\t//\t\tdetect tests that dont match the condition: commands,\r\n\t\t\t\t//\t\tresult, empty line. esp the empty line might be missing\r\n\t\t\t\t//\t\tor be tolerant and accept a new test starting on the\r\n\t\t\t\t//\t\tnext line, which would allow to omit the empty line!?\r\n\t\t\t\tif((insideComments && l.match(/^\\/\\/\\s+>>>\\s.*/)) || l.match(/^\\s*>>>\\s.*/)){\r\n\t\t\t\t\tif(!test.line){\r\n\t\t\t\t\t\ttest.line = i+1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Find the test commands.\r\n\t\t\t\t\tif(test.expectedResult.length>0){\r\n\t\t\t\t\t\t// Start a new test right after the expected result,\r\n\t\t\t\t\t\t// without an empty line.\r\n\t\t\t\t\t\ttests.push({\r\n\t\t\t\t\t\t\tcommands: test.commands,\r\n\t\t\t\t\t\t\texpectedResult: test.expectedResult.join(\"\\n\"),\r\n\t\t\t\t\t\t\tline: test.line\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\ttest = {commands:[], expectedResult:[], line:i+1};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tl = insideComments ? trim(l).substring(2, l.length) : l; // Remove the leading slashes.\r\n\t\t\t\t\tl = trim(l).substring(3, l.length); // Remove the \">>>\".\r\n\t\t\t\t\ttest.commands.push(trim(l));\r\n\t\t\t\t}else if((!insideComments || l.match(/^\\/\\/\\s+.*/)) && test.commands.length && test.expectedResult.length==0){\r\n\t\t\t\t\t// Detect the lines after the \">>>\"-lines, the exptected result.\r\n\t\t\t\t\tl = insideComments ? trim(l).substring(3, l.length) : l; // Remove the leading slashes.\r\n\t\t\t\t\ttest.expectedResult.push(trim(l));\r\n\t\t\t\t}else if(test.commands.length>0 && test.expectedResult.length){\r\n\t\t\t\t\tif(!insideComments || l.match(/^\\/\\/\\s*$/)){\r\n\t\t\t\t\t\t// Detect the empty line.\r\n\t\t\t\t\t\ttests.push({\r\n\t\t\t\t\t\t\tcommands: test.commands,\r\n\t\t\t\t\t\t\texpectedResult: test.expectedResult.join(\"\\n\"),\r\n\t\t\t\t\t\t\tline: test.line\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(insideComments && !l.match(/^\\/\\//)){\r\n\t\t\t\t\t\t// If the next line is not a comment at all (doesn't start with \"//\").\r\n\t\t\t\t\t\ttests.push({\r\n\t\t\t\t\t\t\tcommands: test.commands,\r\n\t\t\t\t\t\t\texpectedResult: test.expectedResult.join(\"\\n\"),\r\n\t\t\t\t\t\t\tline:test.line\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttest = {\r\n\t\t\t\t\t\tcommands: [],\r\n\t\t\t\t\t\texpectedResult: [],\r\n\t\t\t\t\t\tline:0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn tests;\r\n\t\t},\r\n\t\t\r\n\t\trun: function(moduleName){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRun the doctests in the module given.\r\n\t\t\t// example:\r\n\t\t\t//\t\tdoctest = new dojox.testing.DocTest();\r\n\t\t\t//\t\tdoctest.run(\"dojox.testing.DocTest\");\r\n\t\t\t//\t\tdoctest.errors should finally be an empty array.\r\n\t\t\t//\t\t// The above is not a doctest, because it just would\r\n\t\t\t//\t\t//\texecute itself in a never ending loop.\r\n\t\t\t//\r\n\t\t\t//\t\t>>> true==true // Test a new line terminating the test.\r\n\t\t\t//\t\ttrue\r\n\t\t\t//\r\n\t\t\t//\t\t>>> true==true // Test a new test terminating the test.\r\n\t\t\t//\t\ttrue\r\n\t\t\t//\t\t>>> true==true // Test a \"not a comment\"-line, especially an empty line terminating the test.\r\n\t\t\t//\t\ttrue\r\n\r\n\t\t\t//\t\tMake sure the result as printed on the console is the same as what\r\n\t\t\t//\t\tis returned by the test. An array is printed as follows on the console.\r\n\t\t\t//\t\t>>> [1,2,3,4]\r\n\t\t\t//\t\t[1,2,3,4]\r\n\t\t\t//\r\n\t\t\t//\t\tTest a \"not a comment\"-line, with some real code(!) terminating the test.\r\n\t\t\t//\t\tThis used to be a bug, so make sure the line below the test is real\r\n\t\t\t//\t\tfrom this method! Don't write a test after it, always above!\r\n\t\t\t//\t\t>>> true==true // Test code on new line terminating the test.\r\n\t\t\t//\t\ttrue\r\n\t\r\n\t\t\tthis.errors = [];\r\n\t\t\t\r\n\t\t\tvar tests = this.getTests(moduleName);\r\n\t\t\tif(tests){\r\n\t\t\t\tthis._run(tests);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t_run: function(/*Array*/tests){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEach element in the array contains the test in the first element,\r\n\t\t\t//\t\tand the expected result in the second element.\r\n\t\t\t// tests:\r\n\t\t\t//\t\tMake sure that the types are compared properly. There used to be\r\n\t\t\t//\t\tthe bug that a return value false was compared to \"false\" which\r\n\t\t\t//\t\tmade the test fail. This is fixed and should be verified by the\r\n\t\t\t//\t\tfollowing tests.\r\n\t\t\t//\t\t>>> false\r\n\t\t\t//\t\tfalse\r\n\t\t\t//\r\n\t\t\t//\t\t>>> \"false\"\r\n\t\t\t//\t\t\"false\"\r\n\t\t\t//\r\n\t\t\t//\t\t>>> true\r\n\t\t\t//\t\ttrue\r\n\t\t\t//\r\n\t\t\t//\t\t>>> 1\r\n\t\t\t//\t\t1\r\n\t\t\t//\r\n\t\t\t//\t\t>>> \"s\"\r\n\t\t\t//\t\t\"s\"\r\n\t\t\t//\r\n\t\t\t//\t\t>>> dojo.toJson({one:1})\r\n\t\t\t//\t\t\"{\"one\":1}\"\r\n\t\t\t//\r\n\t\t\tvar len = tests.length;\r\n\t\t\tthis.tests = len;\r\n\t\t\tvar oks = 0;\r\n\t\t\tfor(var i=0; i<len; i++){\r\n\t\t\t\tvar t = tests[i];\r\n\t\t\t\tvar res = this.runTest(t.commands, t.expectedResult);\r\n\t\t\t\tvar msg = \"Test \"+(i+1)+\": \";\r\n\t\t\t\tvar viewCommands = t.commands.join(\" \");\r\n\t\t\t\t// Show the first part of the test command.\r\n\t\t\t\tviewCommands = (viewCommands.length > 50 ?\r\n\t\t\t\t\t\t\t\tviewCommands.substr(0,50) + \"...\" :\r\n\t\t\t\t\t\t\t\tviewCommands\r\n\t\t\t\t);\r\n\t\t\t\tif(res.success){\r\n\t\t\t\t\t// the last if-condition, dojo.toJson() adds a quote sign \"\r\n\t\t\t\t\t// before and after the result, may be we remove it and\r\n\t\t\t\t\t// test the result again\r\n\t\t\t\t\tconsole.info(msg+\"OK: \"+viewCommands);\r\n\t\t\t\t\toks += 1;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.errors.push({\r\n\t\t\t\t\t\tcommands: t.commands,\r\n\t\t\t\t\t\tactual: res.actualResult,\r\n\t\t\t\t\t\texpected: t.expectedResult\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.error(msg+\"Failed: \"+viewCommands, {\r\n\t\t\t\t\t\tcommands: t.commands,\r\n\t\t\t\t\t\tactualResult: res.actualResult,\r\n\t\t\t\t\t\texpectedResult: t.expectedResult\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsole.info(len+\" tests ran.\", oks+\" Success,\", this.errors.length+\" Errors\");\r\n\t\t},\r\n\t\t\r\n\t\trunTest: function(commands, expected){\r\n\t\t\tvar ret = {\r\n\t\t\t\tsuccess: false,\r\n\t\t\t\tactualResult: null\r\n\t\t\t};\r\n\t\t\t// Concat multiple commands with new lines, so \"//\" comments at\r\n\t\t\t// the end of a line don't deactivate the next line (which it\r\n\t\t\t// would if we only concatenated with \";\").\r\n\t\t\tvar cmds = commands.join(\"\\n\");\r\n\t\t\tret.actualResult = eval(cmds);\r\n\t\t\tif( (String(ret.actualResult)==expected) ||\r\n\t\t\t\t(dojo.toJson(ret.actualResult)==expected) ||\r\n\t\t\t\t(\r\n\t\t\t\t\t(expected.charAt(0)=='\"')&&\r\n\t\t\t\t\t(expected.charAt(expected.length-1)=='\"')&&\r\n\t\t\t\t\t(String(ret.actualResult)==expected.substring(1, expected.length-1))\r\n\t\t\t\t)\r\n\t\t\t){\r\n\t\t\t\t// the last if-condition, dojo.toJson() adds a quote sign \"\r\n\t\t\t\t// before and after the result, may be we remove it and test\r\n\t\t\t\t// the result again\r\n\t\t\t\tret.success = true;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t}\r\n);\r\n\r\n});"]}