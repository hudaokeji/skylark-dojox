{"version":3,"sources":["layout/ContentPane.js"],"names":["define","lang","xhrUtil","ContentPane","htmlUtil","declare","adjustPaths","cleanContent","renderStyles","executeScripts","scriptHasHooks","ioMethod","get","ioArgs","onExecError","e","_setContent","cont","setter","this","_contentSetter","_ContentSetter","node","containerNode","_onError","hitch","onContentError","errMess","innerHTML","console","error","id","message","_contentSetterParams","Boolean","href","referencePath","scriptHookReplacement","inherited","arguments","destroy","tearDown"],"mappings":";;;;;;;AAAAA,QACC,kBACA,iBACA,2BACA,mBACA,sBACE,SAAUC,EAAMC,EAASC,EAAaC,EAAUC,GAEnD,OAAOA,EAAQ,2BAA4BF,GAc1CG,aAAa,EASbC,cAAc,EAIdC,cAAc,EAIdC,gBAAgB,EAKhBC,gBAAgB,EAEhBC,SAAUT,EAAQU,IAElBC,UAEAC,YAAa,SAAmBC,KAOhCC,YAAa,SAASC,GAGrB,IAAIC,EAASC,KAAKC,eA6BlB,OA5BMF,GAAUA,aAAkBd,EAASiB,iBAC1CH,EAASC,KAAKC,eAAiB,IAAIhB,EAASiB,gBAC3CC,KAAMH,KAAKI,cACXC,SAAUvB,EAAKwB,MAAMN,KAAMA,KAAKK,UAChCE,eAAgBzB,EAAKwB,MAAMN,KAAM,SAASJ,GAGzC,IAAIY,EAAUR,KAAKO,eAAeX,GAClC,IACCI,KAAKI,cAAcK,UAAYD,EAC/B,MAAMZ,GACNc,QAAQC,MAAM,SAASX,KAAKY,GAAG,oCAAoChB,EAAEiB,QAASjB,SAQlFI,KAAKc,sBACJ3B,YAAa4B,QAAQf,KAAKb,cAAgBa,KAAKgB,MAAMhB,KAAKiB,gBAC1DA,cAAejB,KAAKgB,MAAQhB,KAAKiB,cACjC5B,aAAcW,KAAKX,aACnBC,eAAgBU,KAAKV,eACrBC,eAAgBS,KAAKT,eACrB2B,sBAAuB,eAAelB,KAAKY,GAAG,MAGxCZ,KAAKmB,UAAU,cAAeC,YAItCC,QAAS,WACR,IAAItB,EAASC,KAAKC,eACdF,GACHA,EAAOuB,WAERtB,KAAKmB,UAAUC","file":"../../layout/ContentPane.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/_base/xhr\",\r\n\t\"dijit/layout/ContentPane\",\r\n\t\"dojox/html/_base\",\r\n\t\"dojo/_base/declare\"\r\n], function (lang, xhrUtil, ContentPane, htmlUtil, declare) {\r\n\r\nreturn declare(\"dojox.layout.ContentPane\", ContentPane, {\r\n\t// summary:\r\n\t//\t\tAn extended version of dijit.layout.ContentPane.\r\n\t//\t\tSupports infile scripts and external ones declared by `<script src=''...>`\r\n\t//\t\trelative path adjustments (content fetched from a different folder)\r\n\t//\t\t`<style>` and `<link rel='stylesheet' href='..'>` tags,\r\n\t//\t\tcss paths inside cssText is adjusted (if you set adjustPaths = true)\r\n\t//\r\n\t//\t\tNOTE that dojo.require in script in the fetched file isn't recommended\r\n\t//\t\tMany widgets need to be required at page load to work properly\r\n\r\n\t// adjustPaths: Boolean\r\n\t//\t\tAdjust relative paths in html string content to point to this page.\r\n\t//\t\tOnly useful if you grab content from a another folder then the current one\r\n\tadjustPaths: false,\r\n\r\n\t// cleanContent: Boolean\r\n\t//\t\tCleans content to make it less likely to generate DOM/JS errors.\r\n\t//\t\tUseful if you send ContentPane a complete page, instead of a html fragment\r\n\t//\t\tscans for:\r\n\t//\r\n\t//\t\t- title Node, remove\r\n\t//\t\t- DOCTYPE tag, remove\r\n\tcleanContent: false,\r\n\r\n\t// renderStyles: Boolean\r\n\t//\t\ttrigger/load styles in the content\r\n\trenderStyles: false,\r\n\r\n\t// executeScripts: Boolean\r\n\t//\t\tExecute (eval) scripts that is found in the content\r\n\texecuteScripts: true,\r\n\r\n\t// scriptHasHooks: Boolean\r\n\t//\t\treplace keyword '_container_' in scripts with 'dijit.byId(this.id)'\r\n\t//\t\tNOTE this name might change in the near future\r\n\tscriptHasHooks: false,\r\n\r\n\tioMethod: xhrUtil.get,\r\n\r\n\tioArgs: {},\r\n\r\n\tonExecError: function(/*Event*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tevent callback, called on script error or on java handler error\r\n\t\t//\t\toverride and return your own html string if you want a some text\r\n\t\t//\t\tdisplayed within the ContentPane\r\n\t},\r\n\r\n\t_setContent: function(cont){\r\n\t\t// override dijit.layout.ContentPane._setContent, to enable path adjustments\r\n\t\t\r\n\t\tvar setter = this._contentSetter;\r\n\t\tif(! (setter && setter instanceof htmlUtil._ContentSetter)) {\r\n\t\t\tsetter = this._contentSetter = new htmlUtil._ContentSetter({\r\n\t\t\t\tnode: this.containerNode,\r\n\t\t\t\t_onError: lang.hitch(this, this._onError),\r\n\t\t\t\tonContentError: lang.hitch(this, function(e){\r\n\t\t\t\t\t// fires if a domfault occurs when we are appending this.errorMessage\r\n\t\t\t\t\t// like for instance if domNode is a UL and we try append a DIV\r\n\t\t\t\t\tvar errMess = this.onContentError(e);\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tthis.containerNode.innerHTML = errMess;\r\n\t\t\t\t\t}catch(e){\r\n\t\t\t\t\t\tconsole.error('Fatal '+this.id+' could not change content due to '+e.message, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t})/*,\r\n\t\t\t\t_onError */\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// stash the params for the contentSetter to allow inheritance to work for _setContent\r\n\t\tthis._contentSetterParams = {\r\n\t\t\tadjustPaths: Boolean(this.adjustPaths && (this.href||this.referencePath)),\r\n\t\t\treferencePath: this.href || this.referencePath,\r\n\t\t\trenderStyles: this.renderStyles,\r\n\t\t\texecuteScripts: this.executeScripts,\r\n\t\t\tscriptHasHooks: this.scriptHasHooks,\r\n\t\t\tscriptHookReplacement: \"dijit.byId('\"+this.id+\"')\"\r\n\t\t};\r\n\r\n\t\treturn this.inherited(\"_setContent\", arguments);\r\n\t},\r\n\t// could put back _renderStyles by wrapping/aliasing dojox.html._ContentSetter.prototype._renderStyles\r\n\r\n\tdestroy: function () {\r\n\t\tvar setter = this._contentSetter;\r\n\t\tif (setter) {\r\n\t\t\tsetter.tearDown();\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t}\r\n});\r\n});\r\n"]}