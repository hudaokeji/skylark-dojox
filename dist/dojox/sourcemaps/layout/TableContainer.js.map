{"version":3,"sources":["layout/TableContainer.js"],"names":["define","kernel","lang","declare","domClass","domConstruct","arrayUtil","domProp","domStyle","_WidgetBase","_LayoutWidget","experimental","TableContainer","cols","labelWidth","showLabels","orientation","spacing","customClass","postCreate","this","inherited","arguments","_children","connect","name","value","layout","startup","_started","_initialized","children","getChildren","length","add","domNode","forEach","child","started","resize","childIds","_this","hitch","id","index","push","table","create","width","class","cellspacing","tbody","appendChild","addCustomClass","Math","floor","labelRow","childRow","maxCols","numCols","labelCell","childCell","colspan","min","spanLabel","set","labelProps","for","get","label","Number","String","indexOf","innerHTML","parentNode","removeChild","node","type","count","clazz","tagName","toLowerCase","destroyDescendants","preserveDom","destroyRecursive","_setSpacingAttr","ChildWidgetProperties","title","extend"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,kBAAmB,qBAAsB,iBAAkB,qBACtF,mBAAoB,gBAAiB,iBAAkB,oBAAqB,8BAC9E,SAASC,EAAQC,EAAMC,EAASC,EAAUC,EAAcC,EAAWC,EAASC,EAAUC,EAAaC,GAEnGT,EAAOU,aAAa,+BAEpB,IAAIC,EAAiBT,EAAQ,8BAA+BO,GAqB3DG,KAAM,EAMNC,WAAY,MAIZC,YAAY,EAIZC,YAAa,QAIbC,QAAS,EAOTC,YAAa,GAEbC,WAAY,WACXC,KAAKC,UAAUC,WACfF,KAAKG,aAILH,KAAKI,QAAQJ,KAAM,MAAO,SAASK,EAAMC,IACrCA,GAAkB,eAARD,GAAiC,eAARA,GAAiC,QAARA,GAC9DL,KAAKO,YAKRC,QAAS,WACR,IAAGR,KAAKS,WAGRT,KAAKC,UAAUC,YACZF,KAAKU,cAAR,CAGA,IAAIC,EAAWX,KAAKY,cACjBD,EAASE,OAAS,IAGrBb,KAAKU,cAAe,EAEpB1B,EAAS8B,IAAId,KAAKe,QAAS,oBAG3B7B,EAAU8B,QAAQL,EAAU,SAASM,GAChCA,EAAMC,SAAYD,EAAMR,UAC3BQ,EAAMT,YAGRR,KAAKO,SACLP,KAAKmB,YAGNA,OAAQ,WAKPjC,EAAU8B,QAAQhB,KAAKY,cAAe,SAASK,GACpB,mBAAhBA,EAAME,QACfF,EAAME,YAKTZ,OAAQ,WAGP,GAAIP,KAAKU,aAAT,CAIA,IAAIC,EAAWX,KAAKY,cAEhBQ,KACAC,EAAQrB,KAcZd,EAAU8B,QAAQhB,KAAKG,UAAWrB,EAAKwC,MAAMtB,KAAM,SAASiB,GAC3DG,EAASH,EAAMM,IAAMN,KAGtB/B,EAAU8B,QAAQL,EAAU7B,EAAKwC,MAAMtB,KAAM,SAASiB,EAAOO,GACxDJ,EAASH,EAAMM,KAElBvB,KAAKG,UAAUsB,KAAKR,MAKtB,IAAIS,EAAQzC,EAAa0C,OAAO,SAC/BC,MAAS,OACRC,MAAS,6CAA+C7B,KAAKJ,YAC7DkC,YAAgB9B,KAAKH,SAEtBG,KAAKe,SAEFgB,EAAQ9C,EAAa0C,OAAO,SAChCD,EAAMM,YAAYD,GAElBE,EAAeP,EAAO,QAAS1B,KAAKJ,aAExBsC,KAAKC,MAAM,IAAMnC,KAAKP,MAAlC,IAEI2C,EAAWnD,EAAa0C,OAAO,QAAUI,GACzCM,EAAarC,KAAKL,YAAkC,SAApBK,KAAKJ,YACxBX,EAAa0C,OAAO,QAAUI,GAAzCK,EACFE,EAAUtC,KAAKP,MAAQO,KAAKL,WAAa,EAAI,GAC7C4C,EAAU,EAGdrD,EAAU8B,QAAQhB,KAAKG,UAAWrB,EAAKwC,MAAMtB,KAAM,SAASiB,EAAOO,GAElE,IAaIgB,EA6BAC,EA1CAC,EAAUzB,EAAMyB,SAAW,EAgB/B,GAdGA,EAAU,IACZA,EAAU1C,KAAKL,WACduC,KAAKS,IAAIL,EAAU,EAAa,EAAVI,EAAa,GAAIR,KAAKS,IAAIL,EAASI,IAIxDH,EAAUG,EAAU,GAAK1C,KAAKL,WAAa,EAAI,IAAK2C,IACtDC,EAAU,EACVH,EAAWnD,EAAa0C,OAAO,QAAUI,GACzCM,EAA+B,SAApBrC,KAAKJ,YAAyBwC,EAAWnD,EAAa0C,OAAO,QAAUI,IAKhF/B,KAAKL,WAKP,GAJA6C,EAAYvD,EAAa0C,OAAO,MAAOE,MAAS,4BAA6BO,GAI1EnB,EAAM2B,UACRzD,EAAQ0D,IAAIL,EAA+B,QAApBxC,KAAKJ,YAAwB,UAAY,UAAW,OAEvE,CAEJqC,EAAeO,EAAW,aAC1B,IAAIM,GAAcC,IAAO9B,EAAM+B,IAAI,OAC/BC,EAAQhE,EAAa0C,OAAO,QAASmB,EAAYN,IAElDU,OAAOlD,KAAKN,aAAe,GAC7ByD,OAAOnD,KAAKN,YAAY0D,QAAQ,MAAQ,IAGxChE,EAASyD,IAAIL,EAAW,QACvBW,OAAOnD,KAAKN,YAAY0D,QAAQ,KAAO,EACpCpD,KAAKN,WAAa,KAAOM,KAAKN,YAGnCuD,EAAMI,UAAYpC,EAAM+B,IAAI,UAAY/B,EAAM+B,IAAI,SAMnDP,EADExB,EAAM2B,WAAaJ,EACTA,EAECvD,EAAa0C,OAAO,MAC/BE,MAAU,4BACTQ,GAEDK,EAAU,GACZvD,EAAQ0D,IAAIJ,EAAW,UAAWC,GAInCT,EAAeQ,EAAW,YAAajB,GAEvCiB,EAAUT,YAAYf,EAAMF,SAC5BwB,GAAWG,GAAW1C,KAAKL,WAAa,EAAI,MAG1CK,KAAK0B,OACP1B,KAAK0B,MAAM4B,WAAWC,YAAYvD,KAAK0B,OAIxCxC,EAAU8B,QAAQL,EAAU,SAASM,GACV,mBAAhBA,EAAMV,QACfU,EAAMV,WAGRP,KAAK0B,MAAQA,EACb1B,KAAKmB,SAxHL,SAASc,EAAeuB,EAAMC,EAAMC,GACnC,GAAwB,IAArBrC,EAAMvB,YAAmB,CAC3B,IAAI6D,EAAQtC,EAAMvB,YAAa,KAAO2D,GAAQD,EAAKI,QAAQC,eAC3D7E,EAAS8B,IAAI0C,EAAMG,GAEhBzD,UAAUW,OAAS,GACrB7B,EAAS8B,IAAI0C,EAAMG,EAAQ,IAAMD,MAqHrCI,mBAAoB,SAAqBC,GAIxC7E,EAAU8B,QAAQhB,KAAKG,UAAW,SAASc,GAAQA,EAAM+C,iBAAiBD,MAG3EE,gBAAiB,SAAS3D,GAGzBN,KAAKH,QAAUS,EACZN,KAAK0B,QACP1B,KAAK0B,MAAMI,YAAcoB,OAAO5C,OAgCnC,OA3BAd,EAAe0E,uBAMdjB,MAAO,GAMPkB,MAAO,GAKPvB,WAAW,EAIXF,QAAS,GAIV5D,EAAKsF,OAAO/E,EAAmCG,EAAe0E,uBAEvD1E","file":"../../layout/TableContainer.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/lang\", \"dojo/_base/declare\", \"dojo/dom-class\", \"dojo/dom-construct\", \r\n\t\t\"dojo/_base/array\", \"dojo/dom-prop\", \"dojo/dom-style\", \"dijit/_WidgetBase\", \"dijit/layout/_LayoutWidget\"],\r\nfunction(kernel, lang, declare, domClass, domConstruct, arrayUtil, domProp, domStyle, _WidgetBase, _LayoutWidget){\r\n\r\nkernel.experimental(\"dojox.layout.TableContainer\");\r\n\r\nvar TableContainer = declare(\"dojox.layout.TableContainer\", _LayoutWidget, {\r\n\t// summary:\r\n\t//\t\tA container that lays out its child widgets in a table layout.\r\n\t//\r\n\t// description:\r\n\t//\t\tThe TableContainer lays out child widgets in a Table layout.\r\n\t//\t\tEach widget can specify a \"label\" or a \"title\" parameter.\r\n\t//\t\tThis label is displayed either above or to the left of\r\n\t//\t\ta widget depending on whether the \"orientation\" attribute\r\n\t//\t\tis \"horiz\" or \"vert\", for horizontal and vertical respectively.\r\n\t//\t\tThe number of columns is configured using the \"cols\" attribute.\r\n\t//\t\tThe width of labels can be configured using the \"labelWidth\" parameter.\r\n\t//\r\n\t// example:\r\n\t// |\t<div dojoType=\"dojox.layout.TableContainer\" orientation=\"vert\" cols=\"3>\r\n\t// |\t\t<div dojoType=\"dijit.form.TextInput\" value=\"John\" label=\"First Name:\"></div>\r\n\t// |\t\t<div dojoType=\"dijit.form.CheckBox\" label=\"Is Student?:\"></div>\r\n\t// |\t\t<div dojoType=\"dojox.form.DateTextBox\" label=\"Date Of Birth:\"></div>\r\n\t// |\t</div>\r\n\t//\r\n\r\n\tcols: 1,\r\n\t\r\n\t// labelWidth: Number|String\r\n\t//\t\tDefines the width of a label.  If the value is a number, it is\r\n\t//\t\ttreated as a pixel value.  The other valid value is a percentage,\r\n\t//\t\te.g. \"50%\"\r\n\tlabelWidth: \"100\",\r\n\r\n\t// showLabels: Boolean\r\n\t//\t\tTrue if labels should be displayed, false otherwise.\r\n\tshowLabels: true,\r\n\r\n\t// orientation: String\r\n\t//\t\tEither \"horiz\" or \"vert\" for label orientation.\r\n\torientation: \"horiz\",\r\n\t\r\n\t// spacing: Number\r\n\t//\t\tThe cell spacing to apply to the table.\r\n\tspacing: 1,\r\n\r\n\t// customClass: String\r\n\t//\t\tA CSS class that will be applied to child elements.  For example, if\r\n\t//\t\tthe class is \"myClass\", the table will have \"myClass-table\" applied to it,\r\n\t//\t\teach label TD will have \"myClass-labelCell\" applied, and each\r\n\t//\t\twidget TD will have \"myClass-valueCell\" applied.\r\n\tcustomClass: \"\",\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis._children = [];\r\n\t\t\r\n\t\t// If the orientation, customClass or cols attributes are changed,\r\n\t\t// layout the widgets again.\r\n\t\tthis.connect(this, \"set\", function(name, value){\r\n\t\t\tif(value && (name == \"orientation\" || name == \"customClass\" || name == \"cols\")) {\r\n\t\t\t\tthis.layout();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tstartup: function() {\r\n\t\tif(this._started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.inherited(arguments);\r\n\t\tif(this._initialized) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar children = this.getChildren();\r\n\t\tif(children.length < 1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._initialized = true;\r\n\r\n\t\tdomClass.add(this.domNode, \"dijitTableLayout\");\r\n\r\n\t\t// Call startup on all child widgets\r\n\t\tarrayUtil.forEach(children, function(child){\r\n\t\t\tif(!child.started && !child._started) {\r\n\t\t\t\tchild.startup();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.layout();\r\n\t\tthis.resize();\r\n\t},\r\n\r\n\tresize: function(){\r\n\t\t// summary:\r\n\t\t//\t\tResizes all children.  This widget itself\r\n\t\t//\t\tdoes not resize, as it takes up 100% of the\r\n\t\t//\t\tavailable width.\r\n\t\tarrayUtil.forEach(this.getChildren(), function(child){\r\n\t\t\tif(typeof child.resize == \"function\") {\r\n\t\t\t\tchild.resize();\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\tlayout: function(){\r\n\t\t// summary:\r\n\t\t//\t\tLays out the child widgets.\r\n\t\tif(!this._initialized){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar children = this.getChildren();\r\n\r\n\t\tvar childIds = {};\r\n\t\tvar _this = this;\r\n\r\n\t\tfunction addCustomClass(node, type, count) {\r\n\t\t\tif(_this.customClass != \"\") {\r\n\t\t\t\tvar clazz = _this.customClass+ \"-\" + (type || node.tagName.toLowerCase());\r\n\t\t\t\tdomClass.add(node, clazz);\r\n\r\n\t\t\t\tif(arguments.length > 2) {\r\n\t\t\t\t\tdomClass.add(node, clazz + \"-\" + count);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Find any new children that have been added since the last layout() call\r\n\t\tarrayUtil.forEach(this._children, lang.hitch(this, function(child){\r\n\t\t\tchildIds[child.id] = child;\r\n\t\t}));\r\n\r\n\t\tarrayUtil.forEach(children, lang.hitch(this, function(child, index){\r\n\t\t\tif(!childIds[child.id]) {\r\n\t\t\t\t// Add pre-existing children to the start of the array\r\n\t\t\t\tthis._children.push(child);\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\t// Create the table.  It fills the width of it's container.\r\n\t\tvar table = domConstruct.create(\"table\", {\r\n\t\t\t\"width\": \"100%\",\r\n\t\t\t \"class\": \"tableContainer-table tableContainer-table-\" + this.orientation,\r\n\t\t\t \"cellspacing\" : this.spacing\r\n\t\t\t},\r\n\t\t\tthis.domNode);\r\n\r\n\t\tvar tbody = domConstruct.create(\"tbody\");\r\n\t\ttable.appendChild(tbody);\r\n\r\n\t\taddCustomClass(table, \"table\", this.orientation);\r\n\r\n\t\tvar width = Math.floor(100 / this.cols) + \"%\";\r\n\r\n\t\tvar labelRow = domConstruct.create(\"tr\", {}, tbody);\r\n\t\tvar childRow = (!this.showLabels || this.orientation == \"horiz\")\r\n\t\t\t\t\t\t? labelRow : domConstruct.create(\"tr\", {}, tbody);\r\n\t\tvar maxCols = this.cols * (this.showLabels ? 2 : 1);\r\n\t\tvar numCols = 0;\r\n\r\n\t\t// Iterate over the children, adding them to the table.\r\n\t\tarrayUtil.forEach(this._children, lang.hitch(this, function(child, index){\r\n\t\t\t\r\n\t\t\tvar colspan = child.colspan || 1;\r\n\t\t\t\r\n\t\t\tif(colspan > 1) {\r\n\t\t\t\tcolspan = this.showLabels ?\r\n\t\t\t\t\tMath.min(maxCols - 1, colspan * 2 -1): Math.min(maxCols, colspan);\r\n\t\t\t}\r\n\r\n\t\t\t// Create a new row if we need one\r\n\t\t\tif(numCols + colspan - 1 + (this.showLabels ? 1 : 0)>= maxCols) {\r\n\t\t\t\tnumCols = 0;\r\n\t\t\t\tlabelRow = domConstruct.create(\"tr\", {}, tbody);\r\n\t\t\t\tchildRow = this.orientation == \"horiz\" ? labelRow : domConstruct.create(\"tr\", {}, tbody);\r\n\t\t\t}\r\n\t\t\tvar labelCell;\r\n\t\t\t\r\n\t\t\t// If labels should be visible, add them\r\n\t\t\tif(this.showLabels) {\r\n\t\t\t\tlabelCell = domConstruct.create(\"td\", {\"class\": \"tableContainer-labelCell\"}, labelRow);\r\n\r\n\t\t\t\t// If the widget should take up both the label and value,\r\n\t\t\t\t// then just set the class on it.\r\n\t\t\t\tif(child.spanLabel) {\r\n\t\t\t\t\tdomProp.set(labelCell, this.orientation == \"vert\" ? \"rowspan\" : \"colspan\", 2);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Add the custom label class to the label cell\r\n\t\t\t\t\taddCustomClass(labelCell, \"labelCell\");\r\n\t\t\t\t\tvar labelProps = {\"for\": child.get(\"id\")};\r\n\t\t\t\t\tvar label = domConstruct.create(\"label\", labelProps, labelCell);\r\n\r\n\t\t\t\t\tif(Number(this.labelWidth) > -1 ||\r\n\t\t\t\t\t\tString(this.labelWidth).indexOf(\"%\") > -1) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Set the width of the label cell with either a pixel or percentage value\r\n\t\t\t\t\t\tdomStyle.set(labelCell, \"width\",\r\n\t\t\t\t\t\t\tString(this.labelWidth).indexOf(\"%\") < 0\r\n\t\t\t\t\t\t\t\t? this.labelWidth + \"px\" : this.labelWidth);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlabel.innerHTML = child.get(\"label\") || child.get(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar childCell;\r\n\r\n\t\t\tif(child.spanLabel && labelCell) {\r\n\t\t\t\tchildCell = labelCell;\r\n\t\t\t} else {\r\n\t\t\t\t childCell = domConstruct.create(\"td\", {\r\n\t\t\t\t \t\"class\" : \"tableContainer-valueCell\"\r\n\t\t\t\t}, childRow);\r\n\t\t\t}\r\n\t\t\tif(colspan > 1) {\r\n\t\t\t\tdomProp.set(childCell, \"colspan\", colspan);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Add the widget cell's custom class, if one exists.\r\n\t\t\taddCustomClass(childCell, \"valueCell\", index);\r\n\r\n\t\t\tchildCell.appendChild(child.domNode);\r\n\t\t\tnumCols += colspan + (this.showLabels ? 1 : 0);\r\n\t\t}));\r\n\r\n\t\tif(this.table)\t {\r\n\t\t\tthis.table.parentNode.removeChild(this.table);\r\n\t\t}\r\n\t\t// Refresh the layout of any child widgets, allowing them to resize\r\n\t\t// to their new parent.\r\n\t\tarrayUtil.forEach(children, function(child){\r\n\t\t\tif(typeof child.layout == \"function\") {\r\n\t\t\t\tchild.layout();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.table = table;\r\n\t\tthis.resize();\r\n\t},\r\n\t\r\n\tdestroyDescendants: function(/*Boolean*/ preserveDom){\r\n\t\t// summary:\r\n\t\t//\t\tDestroys all the widgets inside this.containerNode,\r\n\t\t//\t\tbut not this widget itself\r\n\t\tarrayUtil.forEach(this._children, function(child){ child.destroyRecursive(preserveDom); });\r\n\t},\r\n\t\r\n\t_setSpacingAttr: function(value) {\r\n\t\t// summary:\r\n\t\t//\t\tSets the spacing attribute.\r\n\t\tthis.spacing = value;\r\n\t\tif(this.table) {\r\n\t\t\tthis.table.cellspacing = Number(value);\r\n\t\t}\r\n\t}\r\n});\r\n\r\nTableContainer.ChildWidgetProperties = {\r\n\t// summary:\r\n\t//\t\tProperties to be set on children of TableContainer\r\n\r\n\t// label: String\r\n\t//\t\tThe label to display for a given widget\r\n\tlabel: \"\",\r\n\t\r\n\t// title: String\r\n\t//\t\tThe label to display for a given widget.  This is interchangeable\r\n\t//\t\twith the 'label' parameter, as some widgets already have a use\r\n\t//\t\tfor the 'label', and this can be used instead to avoid conflicts.\r\n\ttitle: \"\",\r\n\t\r\n\t// spanLabel: Boolean\r\n\t//\t\tSetting spanLabel to true makes the widget take up both the\r\n\t//\t\tlabel and value cells. Defaults to false.\r\n\tspanLabel: false,\r\n\t\r\n\t// colspan: Number\r\n\t//\t\tThe number of columns this widget should span.\r\n\tcolspan: 1\r\n};\r\n\r\n// Add to widget base for benefit of parser.   Remove for 2.0.   Also, hide from doc viewer.\r\nlang.extend(_WidgetBase, /*===== {} || =====*/ TableContainer.ChildWidgetProperties);\r\n\r\nreturn TableContainer;\r\n});\r\n"]}