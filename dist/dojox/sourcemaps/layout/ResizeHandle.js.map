{"version":3,"sources":["layout/ResizeHandle.js"],"names":["define","kernel","lang","connect","arrayUtil","eventUtil","fxBase","windowBase","fxUtil","domUtil","domClass","domGeometry","domStyle","declare","touch","manager","Widget","TemplatedMixin","experimental","_ResizeHelper","show","set","this","domNode","hide","resize","dim","setMarginBox","targetId","targetContainer","resizeAxis","activeResize","activeResizeClass","animateSizing","animateMethod","animateDuration","minHeight","minWidth","constrainMax","maxHeight","maxWidth","fixedAspect","intermediateChanges","startTopic","endTopic","templateString","postCreate","resizeHandle","press","_resizeHelper","byId","id","placeAt","body","add","minSize","w","h","maxSize","_resizeX","_resizeY","addClass","partial","toLowerCase","_beginSizing","e","_isSizing","publish","targetWidget","targetDomNode","c","position","l","x","t","y","isLeftToRight","startPosition","startPoint","clientX","clientY","style","getComputedStyle","padborder","boxModel","getPadBorderExtents","margin","getMarginExtents","startSize","get","pbw","pbh","mw","mh","p","_pconnects","doc","move","release","stop","_updateSizing","_changeSizing","tmp","_getNewCoords","preventDefault","box","err","_activeResizeLastEvent","dx","dy","newW","newH","r","_checkConstraints","tm","ms","delta","isWidget","isFunction","animateProperty","node","properties","width","start","end","duration","height","play","onResize","_endSizing","forEach","disconnect","pub","setTimeout"],"mappings":"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","file":"../../layout/ResizeHandle.js","sourcesContent":["define([\"dojo/_base/kernel\",\"dojo/_base/lang\",\"dojo/_base/connect\",\"dojo/_base/array\",\"dojo/_base/event\",\r\n\t\"dojo/_base/fx\",\"dojo/_base/window\",\"dojo/fx\",\"dojo/dom\",\"dojo/dom-class\",\r\n\t\"dojo/dom-geometry\",\"dojo/dom-style\",\"dojo/_base/declare\", \"dojo/touch\",\r\n\t\"dijit/_base/manager\",\"dijit/_Widget\",\"dijit/_TemplatedMixin\"\r\n\t], function (\r\n\tkernel, lang, connect, arrayUtil, eventUtil, fxBase, windowBase, fxUtil, \r\n\tdomUtil, domClass, domGeometry, domStyle, declare, touch, manager, Widget, TemplatedMixin) {\r\n\r\nkernel.experimental(\"dojox.layout.ResizeHandle\");\r\n\r\nvar _ResizeHelper = declare(\"dojox.layout._ResizeHelper\", Widget, {\r\n\t// summary:\r\n\t//\t\tA global private resize helper shared between any\r\n\t//\t\t`dojox.layout.ResizeHandle` with activeSizing off.\r\n\t\r\n\tshow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tshow helper to start resizing\r\n\t\tdomStyle.set(this.domNode, \"display\", \"\");\r\n\t},\r\n\t\r\n\thide: function(){\r\n\t\t// summary:\r\n\t\t//\t\thide helper after resizing is complete\r\n\t\tdomStyle.set(this.domNode, \"display\", \"none\");\r\n\t},\r\n\t\r\n\tresize: function(/* Object */dim){\r\n\t\t// summary:\r\n\t\t//\t\tsize the widget and place accordingly\r\n\t\tdomGeometry.setMarginBox(this.domNode, dim);\r\n\t}\r\n\t\r\n});\r\n\r\nvar ResizeHandle = declare(\"dojox.layout.ResizeHandle\",[Widget, TemplatedMixin],\r\n\t{\r\n\t// summary:\r\n\t//\t\tA draggable handle used to resize an attached node.\r\n\t//\r\n\t// description:\r\n\t//\t\tThe handle on the bottom-right corner of FloatingPane or other widgets that allows\r\n\t//\t\tthe widget to be resized.\r\n\t//\t\tTypically not used directly.\r\n\r\n\t// targetId: String\r\n\t//\t\tid of the Widget OR DomNode that I will size\r\n\ttargetId: \"\",\r\n\t\r\n\t// targetContainer: DomNode\r\n\t//\t\tover-ride targetId and attch this handle directly to a reference of a DomNode\r\n\ttargetContainer: null,\r\n\t\r\n\t// resizeAxis: String\r\n\t//\t\tone of: x|y|xy limit resizing to a single axis, default to xy ...\r\n\tresizeAxis: \"xy\",\r\n\t\r\n\t// activeResize: Boolean\r\n\t//\t\tif true, node will size realtime with mouse movement,\r\n\t//\t\tif false, node will create virtual node, and only resize target on mouseUp\r\n\tactiveResize: false,\r\n\t\r\n\t// activeResizeClass: String\r\n\t//\t\tcss class applied to virtual resize node.\r\n\tactiveResizeClass: \"dojoxResizeHandleClone\",\r\n\t\r\n\t// animateSizing: Boolean\r\n\t//\t\tonly applicable if activeResize = false. onMouseup, animate the node to the\r\n\t//\t\tnew size                \r\n\tanimateSizing: true,\r\n\t\r\n\t// animateMethod: String\r\n\t//\t\tone of \"chain\" or \"combine\" ... visual effect only. combine will \"scale\"\r\n\t//\t\tnode to size, \"chain\" will alter width, then height\r\n\tanimateMethod: \"chain\",\r\n\r\n\t// animateDuration: Integer\r\n\t//\t\ttime in MS to run sizing animation. if animateMethod=\"chain\", total animation\r\n\t//\t\tplaytime is 2*animateDuration\r\n\tanimateDuration: 225,\r\n\r\n\t// minHeight: Integer\r\n\t//\t\tsmallest height in px resized node can be\r\n\tminHeight: 100,\r\n\r\n\t// minWidth: Integer\r\n\t//\t\tsmallest width in px resize node can be\r\n\tminWidth: 100,\r\n\r\n\t// constrainMax: Boolean\r\n\t//\t\tToggle if this widget cares about the maxHeight and maxWidth\r\n\t//\t\tparameters.\r\n\tconstrainMax: false,\r\n\r\n\t// maxHeight: Integer\r\n\t//\t\tLargest height size in px the resize node can become.\r\n\tmaxHeight:0,\r\n\t\r\n\t// maxWidth: Integer\r\n\t//\t\tLargest width size in px the resize node can become.\r\n\tmaxWidth:0,\r\n\r\n\t// fixedAspect: Boolean\r\n\t//\t\tToggle to enable this widget to maintain the aspect\r\n\t//\t\tratio of the attached node.\r\n\tfixedAspect: false,\r\n\r\n\t// intermediateChanges: Boolean\r\n\t//\t\tToggle to enable/disable this widget from firing onResize\r\n\t//\t\tevents at every step of a resize. If `activeResize` is true,\r\n\t//\t\tand this is false, onResize only fires _after_ the drop\r\n\t//\t\toperation. Animated resizing is not affected by this setting.\r\n\tintermediateChanges: false,\r\n\r\n\t// startTopic: String\r\n\t//\t\tThe name of the topic this resizehandle publishes when resize is starting\r\n\tstartTopic: \"/dojo/resize/start\",\r\n\t\r\n\t// endTopic: String\r\n\t//\t\tThe name of the topic this resizehandle publishes when resize is complete\r\n\tendTopic:\"/dojo/resize/stop\",\r\n\r\n\ttemplateString: '<div dojoAttachPoint=\"resizeHandle\" class=\"dojoxResizeHandle\"><div></div></div>',\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tsetup our one major listener upon creation\r\n\t\tthis.connect(this.resizeHandle, touch.press, \"_beginSizing\");\r\n\t\tif(!this.activeResize){\r\n\t\t\t// there shall be only a single resize rubberbox that at the top\r\n\t\t\t// level so that we can overlay it on anything whenever the user\r\n\t\t\t// resizes something. Since there is only one mouse pointer he\r\n\t\t\t// can't at once resize multiple things interactively.\r\n\t\t\tthis._resizeHelper = manager.byId('dojoxGlobalResizeHelper');\r\n\t\t\tif(!this._resizeHelper){\r\n\t\t\t\tthis._resizeHelper = new _ResizeHelper({\r\n\t\t\t\t\t\tid: 'dojoxGlobalResizeHelper'\r\n\t\t\t\t}).placeAt(windowBase.body());\r\n\t\t\t\tdomClass.add(this._resizeHelper.domNode, this.activeResizeClass);\r\n\t\t\t}\r\n\t\t}else{ this.animateSizing = false; }\r\n\r\n\t\tif(!this.minSize){\r\n\t\t\tthis.minSize = { w: this.minWidth, h: this.minHeight };\r\n\t\t}\r\n\t\t\r\n\t\tif(this.constrainMax){\r\n\t\t\tthis.maxSize = { w: this.maxWidth, h: this.maxHeight };\r\n\t\t}\r\n\t\t\r\n\t\t// should we modify the css for the cursor hover to n-resize nw-resize and w-resize?\r\n\t\tthis._resizeX = this._resizeY = false;\r\n\t\tvar addClass = lang.partial(domClass.add, this.resizeHandle);\r\n\t\tswitch(this.resizeAxis.toLowerCase()){\r\n\t\t\tcase \"xy\" :\r\n\t\t\t\tthis._resizeX = this._resizeY = true;\r\n\t\t\t\t// FIXME: need logic to determine NW or NE class to see\r\n\t\t\t\t// based on which [todo] corner is clicked\r\n\t\t\t\taddClass(\"dojoxResizeNW\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"x\" :\r\n\t\t\t\tthis._resizeX = true;\r\n\t\t\t\taddClass(\"dojoxResizeW\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"y\" :\r\n\t\t\t\tthis._resizeY = true;\r\n\t\t\t\taddClass(\"dojoxResizeN\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t},\r\n\r\n\t_beginSizing: function(/*Event*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tsetup movement listeners and calculate initial size\r\n\r\n\t\tif(this._isSizing){ return; }\r\n\r\n\t\tconnect.publish(this.startTopic, [ this ]);\r\n\t\tthis.targetWidget = manager.byId(this.targetId);\r\n\r\n\t\tthis.targetDomNode = this.targetWidget ? this.targetWidget.domNode : domUtil.byId(this.targetId);\r\n\t\tif(this.targetContainer){ this.targetDomNode = this.targetContainer; }\r\n\t\tif(!this.targetDomNode){ return; }\r\n\r\n\t\tif(!this.activeResize){\r\n\t\t\tvar c = domGeometry.position(this.targetDomNode, true);\r\n\t\t\tthis._resizeHelper.resize({l: c.x, t: c.y, w: c.w, h: c.h});\r\n\t\t\tthis._resizeHelper.show();\r\n\t\t\tif(!this.isLeftToRight()){\r\n\t\t\t\tthis._resizeHelper.startPosition = {l: c.x, t: c.y};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._isSizing = true;\r\n\t\tthis.startPoint  = { x:e.clientX, y:e.clientY };\r\n\r\n\t\t// widget.resize() or setting style.width/height expects native box model dimension \r\n\t\t// (in most cases content-box, but it may be border-box if in backcompact mode)\r\n\t\tvar style = domStyle.getComputedStyle(this.targetDomNode), \r\n\t\t\tborderModel = domGeometry.boxModel==='border-model',\r\n\t\t\tpadborder = borderModel?{w:0,h:0}:domGeometry.getPadBorderExtents(this.targetDomNode, style),\r\n\t\t\tmargin = domGeometry.getMarginExtents(this.targetDomNode, style);\r\n\t\tthis.startSize = { \r\n\t\t\t\tw: domStyle.get(this.targetDomNode, 'width', style), \r\n\t\t\t\th: domStyle.get(this.targetDomNode, 'height', style),\r\n\t\t\t\t//ResizeHelper.resize expects a bounding box of the\r\n\t\t\t\t//border box, so let's keep track of padding/border\r\n\t\t\t\t//width/height as well\r\n\t\t\t\tpbw: padborder.w, pbh: padborder.h,\r\n\t\t\t\tmw: margin.w, mh: margin.h};\r\n\t\tif(!this.isLeftToRight() && domStyle.get(this.targetDomNode, \"position\") == \"absolute\"){\r\n\t\t\tvar p = domGeometry.position(this.targetDomNode, true);\r\n\t\t\tthis.startPosition = {l: p.x, t: p.y};\r\n\t\t}\r\n\t\t\r\n\t\tthis._pconnects = [\r\n\t\t\tconnect.connect(windowBase.doc, touch.move, this,\"_updateSizing\"),\r\n\t\t\tconnect.connect(windowBase.doc, touch.release, this, \"_endSizing\")\r\n\t\t];\r\n\t\t\r\n\t\teventUtil.stop(e);\r\n\t},\r\n\r\n\t_updateSizing: function(/*Event*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tcalled when moving the ResizeHandle ... determines\r\n\t\t//\t\tnew size based on settings/position and sets styles.\r\n\r\n\t\tif(this.activeResize){\r\n\t\t\tthis._changeSizing(e);\r\n\t\t}else{\r\n\t\t\tvar tmp = this._getNewCoords(e, 'border', this._resizeHelper.startPosition);\r\n\t\t\tif(tmp === false){ return; }\r\n\t\t\tthis._resizeHelper.resize(tmp);\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t},\r\n\r\n\t_getNewCoords: function(/* Event */ e, /* String */ box, /* Object */startPosition){\r\n\t\t\r\n\t\t// On IE, if you move the mouse above/to the left of the object being resized,\r\n\t\t// sometimes clientX/Y aren't set, apparently.  Just ignore the event.\r\n\t\ttry{\r\n\t\t\tif(!e.clientX  || !e.clientY){ return false; }\r\n\t\t}catch(err){\r\n\t\t\t// sometimes you get an exception accessing above fields...\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis._activeResizeLastEvent = e;\r\n\r\n\t\tvar dx = (this.isLeftToRight()?1:-1) * (this.startPoint.x - e.clientX),\r\n\t\t\tdy = this.startPoint.y - e.clientY,\r\n\t\t\tnewW = this.startSize.w - (this._resizeX ? dx : 0),\r\n\t\t\tnewH = this.startSize.h - (this._resizeY ? dy : 0),\r\n\t\t\tr = this._checkConstraints(newW, newH)\r\n\t\t;\r\n\t\t\r\n\t\tstartPosition = (startPosition || this.startPosition);\r\n\t\tif(startPosition && this._resizeX){\r\n\t\t\t// adjust x position for RtoL\r\n\t\t\tr.l = startPosition.l + dx;\r\n\t\t\tif(r.w != newW){\r\n\t\t\t\tr.l += (newW - r.w);\r\n\t\t\t}\r\n\t\t\tr.t = startPosition.t;\r\n\t\t}\r\n\r\n\t\tswitch(box){\r\n\t\t\tcase 'margin':\r\n\t\t\t\tr.w += this.startSize.mw;\r\n\t\t\t\tr.h += this.startSize.mh;\r\n\t\t\t\t//pass through\r\n\t\t\tcase \"border\":\r\n\t\t\t\tr.w += this.startSize.pbw;\r\n\t\t\t\tr.h += this.startSize.pbh;\r\n\t\t\t\tbreak;\r\n\t\t\t//default: //native, do nothing\r\n\t\t}\r\n\r\n\t\treturn r; // Object\r\n\t},\r\n\t\r\n\t_checkConstraints: function(newW, newH){\r\n\t\t// summary:\r\n\t\t//\t\tfilter through the various possible constaint possibilities.\r\n\t\t\t\t\r\n\t\t// minimum size check\r\n\t\tif(this.minSize){\r\n\t\t\tvar tm = this.minSize;\r\n\t\t\tif(newW < tm.w){\r\n\t\t\t\tnewW = tm.w;\r\n\t\t\t}\r\n\t\t\tif(newH < tm.h){\r\n\t\t\t\tnewH = tm.h;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// maximum size check:\r\n\t\tif(this.constrainMax && this.maxSize){\r\n\t\t\tvar ms = this.maxSize;\r\n\t\t\tif(newW > ms.w){\r\n\t\t\t\tnewW = ms.w;\r\n\t\t\t}\r\n\t\t\tif(newH > ms.h){\r\n\t\t\t\tnewH = ms.h;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(this.fixedAspect){\r\n\t\t\tvar w = this.startSize.w, h = this.startSize.h,\r\n\t\t\t\tdelta = w * newH - h * newW;\r\n\t\t\tif(delta<0){\r\n\t\t\t\tnewW = newH * w / h;\r\n\t\t\t}else if(delta>0){\r\n\t\t\t\tnewH = newW * h / w;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn { w: newW, h: newH }; // Object\r\n\t},\r\n\t\t\r\n\t_changeSizing: function(/*Event*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tapply sizing information based on information in (e) to attached node\r\n\t\t\r\n\t\tvar isWidget = this.targetWidget && lang.isFunction(this.targetWidget.resize),\r\n\t\t\ttmp = this._getNewCoords(e, isWidget && 'margin');\r\n\t\tif(tmp === false){ return; }\r\n\r\n\t\tif(isWidget){\r\n\t\t\tthis.targetWidget.resize(tmp);\r\n\t\t}else{\r\n\t\t\tif(this.animateSizing){\r\n\t\t\t\tvar anim = fxUtil[this.animateMethod]([\r\n\t\t\t\t\tfxBase.animateProperty({\r\n\t\t\t\t\t\tnode: this.targetDomNode,\r\n\t\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\t\twidth: { start: this.startSize.w, end: tmp.w }\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tduration: this.animateDuration\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tfxBase.animateProperty({\r\n\t\t\t\t\t\tnode: this.targetDomNode,\r\n\t\t\t\t\t\tproperties: {\r\n\t\t\t\t\t\t\theight: { start: this.startSize.h, end: tmp.h }\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tduration: this.animateDuration\r\n\t\t\t\t\t})\r\n\t\t\t\t]);\r\n\t\t\t\tanim.play();\r\n\t\t\t}else{\r\n\t\t\t\tdomStyle.set(this.targetDomNode,{\r\n\t\t\t\t\twidth: tmp.w + \"px\",\r\n\t\t\t\t\theight: tmp.h + \"px\"\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.intermediateChanges){\r\n\t\t\tthis.onResize(e);\r\n\t\t}\r\n\t},\r\n\r\n\t_endSizing: function(/*Event*/ e){\r\n\t\t// summary:\r\n\t\t//\t\tdisconnect listenrs and cleanup sizing\r\n\t\tarrayUtil.forEach(this._pconnects, connect.disconnect);\r\n\t\tvar pub = lang.partial(connect.publish, this.endTopic, [ this ]);\r\n\t\tif(!this.activeResize){\r\n\t\t\tthis._resizeHelper.hide();\r\n\t\t\tthis._changeSizing(e);\r\n\t\t\tsetTimeout(pub, this.animateDuration + 15);\r\n\t\t}else{\r\n\t\t\tpub();\r\n\t\t}\r\n\t\tthis._isSizing = false;\r\n\t\tthis.onResize(e);\r\n\t},\r\n\t\r\n\tonResize: function(e){\r\n\t\t// summary:\r\n\t\t//\t\tStub fired when sizing is done. Fired once\r\n\t\t//\t\tafter resize, or often when `intermediateChanges` is\r\n\t\t//\t\tset to true.\r\n\t}\r\n\t\r\n});\r\n\r\nreturn ResizeHandle;\r\n});\r\n"]}