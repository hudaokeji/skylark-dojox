{"version":3,"sources":["layout/ToggleSplitter.js"],"names":["define","dojo","dijit","experimental","ToggleSplitter","declare","layout","_Splitter","container","child","region","state","_closedSize","baseClass","templateString","postCreate","this","inherited","arguments","addClass","domNode","charAt","toUpperCase","substring","startup","paneNode","intPaneSize","style","horizontal","setAttribute","id","forEach","name","pname","length","toLowerCase","fullSize","_openStyleProps","_getStyleProps","_started","set","_onKeyPress","evt","charCode","keys","SPACE","keyCode","ENTER","_toggle","stopEvent","_onToggleNodeMouseDown","toggleNode","focus","_startDrag","e","_stopDrag","blur","collapsedSize","_onToggleNodeMouseMove","on","leave","type","toggleClass","_handleOnChange","preState","openProps","paneStyle","dim","styleProps","mixin","display","overflow","visibility","getComputedStyle","closedProps","_setStateClass","_layoutChildren","edgeNames","i","fullName","undefined","arrow","focused","a11yText","innerHTML","_setStateAttr","evtName","onOpen","pane","onCollapsed","onClosed","extend","_Widget","toggleSplitterState","toggleSplitterFullSize","toggleSplitterCollapsedSize"],"mappings":"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","file":"../../layout/ToggleSplitter.js","sourcesContent":["define(\"dojox/layout/ToggleSplitter\", [\"dojo\", \"dijit\", \"dijit/layout/BorderContainer\"], function(dojo, dijit) {\r\n\r\ndojo.experimental(\"dojox.layout.ToggleSplitter\");\r\n\r\nvar ToggleSplitter = dojo.declare(\"dojox.layout.ToggleSplitter\", dijit.layout._Splitter, {\r\n\t// summary:\r\n\t//\t\tA draggable and clickable spacer between two items in a `dijit.layout.BorderContainer`.\r\n\t// description:\r\n\t//\t\tThis is instantiated by `dijit.layout.BorderContainer`. Users should not\r\n\t//\t\tcreate it directly.\r\n\t// tags:\r\n\t//\t\tprivate\r\n\r\n\r\n\t// container: [const] dijit/layout/BorderContainer\r\n\t//\t\tPointer to the parent BorderContainer\r\n\tcontainer: null,\r\n\r\n\t// child: [const] dijit/layout/_LayoutWidget\r\n\t//\t\tPointer to the pane associated with this splitter\r\n\tchild: null,\r\n\r\n\t// region: [const] String\r\n\t//\t\tRegion of pane associated with this splitter.\r\n\t//\t\t\"top\", \"bottom\", \"left\", \"right\".\r\n\tregion: null,\r\n\r\n\t// state: String\r\n\t//\t\tthe initial and current state of the splitter (and its attached pane)\r\n\t//\t\tIt has three values: full, collapsed (optional), closed\r\n\tstate: \"full\",\r\n\r\n\t// _closedSize: String\r\n\t//\tthe css height/width value to apply by default when the attached pane is closed\r\n\t_closedSize: \"0\",\r\n\r\n\tbaseClass: \"dojoxToggleSplitter\",\r\n\r\n\ttemplateString: '<div class=\"dijitSplitter dojoxToggleSplitter\" dojoAttachEvent=\"onkeypress:_onKeyPress,onmousedown:_startDrag,onmouseenter:_onMouse,onmouseleave:_onMouse\">' +\r\n\t\t\t\t\t\t'<div dojoAttachPoint=\"toggleNode\" class=\"dijitSplitterThumb dojoxToggleSplitterIcon\" tabIndex=\"0\" role=\"separator\" ' +\r\n\t\t\t\t\t\t\t'dojoAttachEvent=\"onmousedown:_onToggleNodeMouseDown,onclick:_toggle,onmouseenter:_onToggleNodeMouseMove,onmouseleave:_onToggleNodeMouseMove,onfocus:_onToggleNodeMouseMove,onblur:_onToggleNodeMouseMove\">' +\r\n\t\t\t\t\t\t\t'<span class=\"dojoxToggleSplitterA11y\" dojoAttachPoint=\"a11yText\"></span></div>' +\r\n\t\t\t\t\t'</div>',\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\t// add a region css hook so that it can figure out the region correctly\r\n\t\tvar region = this.region;\r\n\t\tdojo.addClass(this.domNode, this.baseClass + region.charAt(0).toUpperCase() + region.substring(1));\r\n\t},\r\n\r\n\tstartup: function(){\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\t// we have to wait until startup to be sure the child exists in the dom\r\n\t\t// and has non-zero size (if its supposed to be showing)\r\n\t\tvar parentPane = this.child,\r\n\t\t\tpaneNode = this.child.domNode,\r\n\t\t\tintPaneSize = dojo.style(paneNode, (this.horizontal ? \"height\" : \"width\"));\r\n\r\n\t\tthis.domNode.setAttribute(\"aria-controls\", paneNode.id);\r\n\r\n\t\t// creation of splitters is an opaque process in BorderContainer,\r\n\t\t// so if we want to get init params, we have to retrieve them from the attached BC child\r\n\t\t// NOTE: for this to work we have to extend the prototype of dijit._Widget (some more)\r\n\t\tdojo.forEach([\"toggleSplitterState\", \"toggleSplitterFullSize\", \"toggleSplitterCollapsedSize\"], function(name){\r\n\t\t\tvar pname = name.substring(\"toggleSplitter\".length);\r\n\t\t\tpname = pname.charAt(0).toLowerCase() + pname.substring(1);\r\n\t\t\tif(name in this.child){\r\n\t\t\t\tthis[pname] = this.child[name];\r\n\t\t\t}\r\n\t\t}, this);\r\n\r\n\t\tif(!this.fullSize){\r\n\t\t\t// Store the current size as the fullSize if none was provided\r\n\t\t\t// dojo.style always returns a integer (pixel) value for height/width\r\n\t\t\t// use an arbitrary default if a pane was initialized closed and no fullSize provided\r\n\t\t\t// If collapsedSize is not specified, collapsed state does not exist.\r\n\t\t\tthis.fullSize = this.state == \"full\" ? intPaneSize + \"px\" : \"75px\";\r\n\t\t}\r\n\r\n\t\tthis._openStyleProps = this._getStyleProps(paneNode, \"full\");\r\n\r\n\t\t// update state\r\n\t\tthis._started = true;\r\n\t\tthis.set(\"state\", this.state);\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\t_onKeyPress: function(evt){\r\n\t\tif(this.state == \"full\"){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t\tif(evt.charCode == dojo.keys.SPACE || evt.keyCode == dojo.keys.ENTER){\r\n\t\t\tthis._toggle(evt);\r\n\t\t\tdojo.stopEvent(evt);\r\n\t\t}\r\n\t},\r\n\r\n\t_onToggleNodeMouseDown: function(evt){\r\n\t\tdojo.stopEvent(evt);\r\n\t\tthis.toggleNode.focus();\r\n\t},\r\n\r\n\t_startDrag: function(e){\r\n\t\tif(this.state == \"full\"){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t},\r\n\r\n\t_stopDrag: function(e){\r\n\t\tthis.inherited(arguments);\r\n\t\tthis.toggleNode.blur();\r\n\t},\r\n\r\n\t_toggle: function(evt){\r\n\t\tvar state;\r\n\t\tswitch(this.state){\r\n\t\t\tcase \"full\":\r\n\t\t\t\tstate = this.collapsedSize ? \"collapsed\" : \"closed\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"collapsed\":\r\n\t\t\t\tstate = \"closed\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tstate = \"full\";\r\n\t\t}\r\n\t\tthis.set(\"state\", state);\r\n\t},\r\n\r\n\t_onToggleNodeMouseMove: function(evt){\r\n\t\tvar baseClass = this.baseClass,\r\n\t\t\ttoggleNode = this.toggleNode,\r\n\t\t\ton = this.state == \"full\" || this.state == \"collapsed\",\r\n\t\t\tleave = evt.type == \"mouseout\" || evt.type == \"blur\";\r\n\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconOpen\", leave && on);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconOpenHover\", !leave && on);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconClosed\", leave && !on);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconClosedHover\", !leave && !on);\r\n\t},\r\n\r\n\t_handleOnChange: function(preState){\r\n\t\t// summary:\r\n\t\t//\t\tEffect the state change with the new value of this.state\r\n\t\tvar paneNode = this.child.domNode,\r\n\t\t\topenProps, paneStyle,\r\n\t\t\tdim = this.horizontal ? \"height\" : \"width\";\r\n\r\n\t\tif(this.state == \"full\"){\r\n\t\t\t// change to full open state\r\n\t\t\tvar styleProps = dojo.mixin({\r\n\t\t\t\tdisplay: \"block\",\r\n\t\t\t\toverflow: \"auto\",\r\n\t\t\t\tvisibility: \"visible\"\r\n\t\t\t}, this._openStyleProps);\r\n\t\t\tstyleProps[dim] = (this._openStyleProps && this._openStyleProps[dim]) ? this._openStyleProps[dim] : this.fullSize;\r\n\r\n\t\t\tdojo.style(this.domNode, \"cursor\", \"\");\r\n\t\t\tdojo.style(paneNode, styleProps);\r\n\t\t}else if(this.state == \"collapsed\"){\r\n\t\t\tpaneStyle  = dojo.getComputedStyle(paneNode);\r\n\t\t\topenProps = this._getStyleProps(paneNode, \"full\", paneStyle);\r\n\t\t\tthis._openStyleProps = openProps;\r\n\r\n\t\t\tdojo.style(this.domNode, \"cursor\", \"auto\");\r\n\t\t\tdojo.style(paneNode, dim, this.collapsedSize);\r\n\t\t}else{\r\n\t\t\t// change to closed state\r\n\t\t\tif(!this.collapsedSize){\r\n\t\t\t\tpaneStyle  = dojo.getComputedStyle(paneNode);\r\n\t\t\t\topenProps = this._getStyleProps(paneNode, \"full\", paneStyle);\r\n\t\t\t\tthis._openStyleProps = openProps;\r\n\t\t\t}\r\n\t\t\tvar closedProps = this._getStyleProps(paneNode, \"closed\", paneStyle);\r\n\r\n\t\t\tdojo.style(this.domNode, \"cursor\", \"auto\");\r\n\t\t\tdojo.style(paneNode, closedProps);\r\n\t\t}\r\n\t\tthis._setStateClass();\r\n\t\tif(this.container._started){\r\n\t\t\tthis.container._layoutChildren(this.region);\r\n\t\t}\r\n\t},\r\n\r\n\t_getStyleProps: function(paneNode, state, paneStyle){\r\n\t\t// summary:\r\n\t\t//\t\tCreate an object with the style property name: values\r\n\t\t//\t\tthat will need to be applied to the child pane render the given state\r\n\t\tif(!paneStyle){\r\n\t\t\tpaneStyle  = dojo.getComputedStyle(paneNode);\r\n\t\t}\r\n\t\tvar styleProps = {},\r\n\t\t\tdim = this.horizontal ? \"height\" : \"width\";\r\n\r\n\t\tstyleProps[\"overflow\"] = (state != \"closed\") ? paneStyle[\"overflow\"] : \"hidden\";\r\n\t\tstyleProps[\"visibility\"] = (state != \"closed\") ? paneStyle[\"visibility\"] : \"hidden\";\r\n\r\n\t\t// Use the inline width/height style value, in preference to the computedStyle\r\n\t\t// for the open width/height\r\n\t\tstyleProps[dim] = (state != \"closed\") ? paneNode.style[dim] || paneStyle[dim] : this._closedSize;\r\n\r\n\t\t// We include the padding, border, margin width values for restoring on state full open\r\n\t\tvar edgeNames = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\r\n\t\tdojo.forEach([\"padding\", \"margin\", \"border\"], function(pname){\r\n\t\t\tfor(var i = 0; i < edgeNames.length; i++){\r\n\t\t\t\tvar fullName = pname + edgeNames[i];\r\n\t\t\t\tif(pname == \"border\"){\r\n\t\t\t\t\tfullName += \"Width\";\r\n\t\t\t\t}\r\n\t\t\t\tif(undefined !== paneStyle[fullName]){\r\n\t\t\t\t\tstyleProps[fullName] = (state != \"closed\") ? paneStyle[fullName] : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn styleProps;\r\n\t},\r\n\r\n\t_setStateClass: function(){\r\n\t\t// summary:\r\n\t\t//\t\tApply the appropriate classes for the current open state\r\n\t\tvar arrow = \"&#9652\", region = this.region.toLowerCase(),\r\n\t\t\tbaseClass = this.baseClass,\r\n\t\t\ttoggleNode = this.toggleNode,\r\n\t\t\ton = this.state == \"full\" || this.state == \"collapsed\",\r\n\t\t\tfocused = this.focused;\r\n\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconOpen\", on && !focused);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconClosed\", !on && !focused);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconOpenHover\", on && focused);\r\n\t\tdojo.toggleClass(toggleNode, baseClass + \"IconClosedHover\", !on && focused);\r\n\r\n\t\t// For a11y\r\n\t\tif(region == \"top\" && on || region == \"bottom\" && !on){\r\n\t\t\tarrow = \"&#9650\";\r\n\t\t}else if(region == \"top\" && !on || region == \"bottom\" && on){\r\n\t\t\tarrow = \"&#9660\";\r\n\t\t}else if(region == \"right\" && on || region == \"left\" && !on){\r\n\t\t\tarrow = \"&#9654\";\r\n\t\t}else if(region == \"right\" && !on || region == \"left\" && on){\r\n\t\t\tarrow = \"&#9664\";\r\n\t\t}\r\n\r\n\t\tthis.a11yText.innerHTML = arrow;\r\n\t},\r\n\r\n\t_setStateAttr: function(/*String*/ state){\r\n\t\t// summary:\r\n\t\t//\t\tsetter for the state property\r\n\t\tif(!this._started) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar preState = this.state;\r\n\t\tthis.state = state;\r\n\r\n\t\tthis._handleOnChange(preState);\r\n\t\tvar evtName;\r\n\t\tswitch(state){\r\n\t\t\tcase \"full\":\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-expanded\", true);\r\n\t\t\t\tevtName = \"onOpen\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"collapsed\":\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-expanded\", true);\r\n\t\t\t\tevtName = \"onCollapsed\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-expanded\", false);\r\n\t\t\t\tevtName = \"onClosed\";\r\n\t\t}\r\n\t\tthis[evtName](this.child);\r\n\t},\r\n\r\n\tonOpen: function(pane){ /*Stub*/ },\r\n\tonCollapsed: function(pane){ /*Stub*/ },\r\n\tonClosed: function(pane){ /*Stub*/ }\r\n});\r\n\r\n// As BC places no constraints on what kind of widgets can be children\r\n// we have to extend the base class to ensure the properties we need can be set (both in markup and programatically)\r\ndojo.extend(dijit._Widget, {\r\n\t// toggleSplitterOpen: Boolean\r\n\ttoggleSplitterState: \"full\",\r\n\r\n\t// toggleSplitterClosedThreshold: String\r\n\t//\t\tA css size value (e.g. \"100px\")\r\n\ttoggleSplitterFullSize: \"\",\r\n\r\n\ttoggleSplitterCollapsedSize: \"\"\r\n});\r\n\r\nreturn ToggleSplitter;\r\n\r\n});\r\n"]}