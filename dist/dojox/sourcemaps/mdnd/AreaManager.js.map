{"version":3,"sources":["mdnd/AreaManager.js"],"names":["define","dojo","declare","connect","win","array","sniff","lang","query","topic","domClass","geom","domConstruct","registry","_Widget","Moveable","am","autoRefresh","areaClass","dragHandleClass","constructor","this","_areaList","resizeHandler","global","_dropMode","updateAreas","_oldIndexArea","_currentIndexArea","_oldDropIndex","_currentDropIndex","_sourceIndexArea","_sourceDropIndex","init","registerByClass","registerByNode","area","notInitAreas","index","_getIndexArea","acceptType","getAttribute","obj","node","items","coords","margin","accept","split","initItems","forEach","_getChildren","item","_setMarginArea","push","_addMoveableItem","addArea","publish","unregister","_deleteMoveableItem","splice","setAttribute","handle","_searchDragHandle","moveable","skip","add","type","handlers","byNode","widget","dndType","removeDragItem","parentNode","objItem","handler","disconnect","remove","destroy","i","length","cssArray","queryCss","css","addDragItem","notCheckParent","nodeType","indexArea","firstListChild","slice","lastListChild","concat","insertBefore","appendChild","j","removeChild","children","childNodes","child","dragRestriction","getMarginExtents","findCurrentIndexArea","size","getTargetArea","onDragExit","onDragEnter","_isAccepted","_accept","onDragStart","_html","body","_cover","create","class","_cover2","clone","h","scrollHeight","style","height","_dragStartHandler","ownerDocument","_lastValidIndexArea","sourceArea","_dragItem","nodeRef","_eventsIE7","s","left","x","top","y","position","_dropIndicator","place","onDrag","mousePosition","coordinates","getDragPoint","placeDropIndicator","getDropIndex","_placeDropIndicator","oldArea","currentArea","refreshItems","onDropCancel","onDrop","targetArea","width","indexChild","firstListArea","lastListArea","pop","_resetAfterDrop","Error","dojox","mdnd","autoScroll","refreshListener","unsubscribe","extend","_areaManager","areaManager","AreaManager"],"mappings":"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","file":"../../mdnd/AreaManager.js","sourcesContent":["define([\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/sniff\",\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/query\",\r\n\t\"dojo/topic\", // topic.publish()\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"dojo/dom-construct\",\r\n\t\"dijit/registry\",\r\n\t\"dijit/_Widget\",\r\n\t\"./Moveable\"\r\n],function(dojo, declare, connect, win, array, sniff, lang, query, topic, domClass, geom, domConstruct, registry, _Widget, Moveable){\r\n\tvar am = declare(\r\n\t\t\"dojox.mdnd.AreaManager\",\r\n\t\tnull,\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tDrag And Drop manager\r\n\t\r\n\t\t// autoRefresh: Boolean\r\n\t\t//\t\tEnable the refresh of registered areas on drag start.\r\n\t\tautoRefresh: true,\r\n\t\r\n\t\r\n\t\t// areaClass: String\r\n\t\t//\t\tCSS class enabled an area if areaClass is defined\r\n\t\tareaClass: \"dojoxDndArea\",\r\n\t\r\n\t\t// dragHandleClass: String\r\n\t\t//\t\tCSS class enabled a drag handle.\r\n\t\tdragHandleClass: \"dojoxDragHandle\",\r\n\t\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstructor of AreaManager class.\r\n\t\t\t//\t\tInitialize arrays, connects and subscribes.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: constructor\");\r\n\t\t\tthis._areaList = [];\r\n\t\t\tthis.resizeHandler = connect.connect(dojo.global,\"onresize\", this, function(){\r\n\t\t\t\tthis._dropMode.updateAreas(this._areaList);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis._oldIndexArea = this._currentIndexArea = this._oldDropIndex = this._currentDropIndex = this._sourceIndexArea = this._sourceDropIndex = -1;\r\n\t\t},\r\n\t\r\n\t\tinit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitialize the manager by calling the registerByClass method\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: init\");\r\n\t\t\tthis.registerByClass();\r\n\t\t},\r\n\t\r\n\t\tregisterByNode: function(/*DOMNode*/area, /*Boolean*/notInitAreas){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTo register Dnd Area : insert the DndArea using the specific sort of dropMode.\r\n\t\t\t// area:\r\n\t\t\t//\t\ta DOM node corresponding to the Dnd Area\r\n\t\t\t// notInitAreas:\r\n\t\t\t//\t\tif false or undefined, init the areas.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: registerByNode\", area);\r\n\t\t\tvar index = this._getIndexArea(area);\r\n\t\t\tif(area && index == -1){\r\n\t\t\t\tvar acceptType = area.getAttribute(\"accept\");\r\n\t\t\t\tvar accept = (acceptType) ? acceptType.split(/\\s*,\\s*/) : [\"text\"];\r\n\t\t\t\tvar obj = {\r\n\t\t\t\t\t'node': area,\r\n\t\t\t\t\t'items': [],\r\n\t\t\t\t\t'coords': {},\r\n\t\t\t\t\t'margin': null,\r\n\t\t\t\t\t'accept': accept,\r\n\t\t\t\t\t'initItems': false\r\n\t\t\t\t};\r\n\t\t\t\tarray.forEach(this._getChildren(area), function(item){\r\n\t\t\t\t\tthis._setMarginArea(obj, item);\r\n\t\t\t\t\tobj.items.push(this._addMoveableItem(item));\r\n\t\t\t\t}, this);\r\n\t\t\t\tthis._areaList = this._dropMode.addArea(this._areaList, obj);\r\n\t\t\t\tif(!notInitAreas){\r\n\t\t\t\t\tthis._dropMode.updateAreas(this._areaList);\r\n\t\t\t\t}\r\n\t\t\t\tconnect.publish(\"/dojox/mdnd/manager/register\",[area]);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tregisterByClass: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegister all Dnd Areas identified by the attribute areaClass :\r\n\t\t\t//\t\tinsert Dnd Areas using the specific sort of dropMode.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: registerByClass\");\r\n\t\t\tquery('.'+this.areaClass).forEach(function(area){\r\n\t\t\t\tthis.registerByNode(area, true);\r\n\t\t\t}, this);\r\n\t\t\tthis._dropMode.updateAreas(this._areaList);\r\n\t\t},\r\n\t\r\n\t\tunregister: function(/*DOMNode*/area){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnregister a D&D Area and its children into the AreaManager.\r\n\t\t\t// area:\r\n\t\t\t//\t\tA node corresponding to the D&D Area.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tTrue if the area is found and unregistered.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: unregister\");\r\n\t\t\tvar index = this._getIndexArea(area);\r\n\t\t\tif(index != -1){\r\n\t\t\t\tarray.forEach(this._areaList[index].items, function(item){\r\n\t\t\t\t\tthis._deleteMoveableItem(item);\r\n\t\t\t\t}, this);\r\n\t\t\t\tthis._areaList.splice(index,1);\r\n\t\t\t\t// refresh target area\r\n\t\t\t\tthis._dropMode.updateAreas(this._areaList);\r\n\t\t\t\treturn true; // Boolean\r\n\t\t\t}\r\n\t\t\treturn false; // Boolean\r\n\t\t},\r\n\t\r\n\t\t_addMoveableItem: function(/*DOMNode*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a draggable item with a DOM node.\r\n\t\t\t// node:\r\n\t\t\t//\t\tA child of the D&D Area.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe draggable item.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _addMoveableItem\");\r\n\t\t\tnode.setAttribute(\"tabIndex\", \"0\");\r\n\t\t\tvar handle = this._searchDragHandle(node);\r\n\t\t\tvar moveable = new Moveable({ 'handle': handle, 'skip': true }, node);\r\n\t\t\t// add a css style :\r\n\t\t\tdomClass.add(handle || node, \"dragHandle\");\r\n\t\t\tvar type = node.getAttribute(\"dndType\");\r\n\t\t\tvar item = {\r\n\t\t\t\t'item': moveable,\r\n\t\t\t\t'type': type ? type.split(/\\s*,\\s*/) : [\"text\"],\r\n\t\t\t\t'handlers': [connect.connect(moveable, \"onDragStart\", this, \"onDragStart\")]\r\n\t\t\t}\r\n\t\t\t// connect to the uninitialize method of dijit._Widget to delete a moveable before a destruct\r\n\t\t\tif(registry && registry.byNode){\r\n\t\t\t\tvar widget = registry.byNode(node);\r\n\t\t\t\tif(widget){\r\n\t\t\t\t\titem.type = widget.dndType ? widget.dndType.split(/\\s*,\\s*/) : [\"text\"];\r\n\t\t\t\t\titem.handlers.push(\r\n\t\t\t\t\t\tconnect.connect(widget, \"uninitialize\", this, function(){\r\n\t\t\t\t\t\t\tthis.removeDragItem(node.parentNode, moveable.node);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn item; // Object\r\n\t\t},\r\n\t\r\n\t\t_deleteMoveableItem: function(/*Object*/ objItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDelete the Moveable object associated with a node.\r\n\t\t\t// item:\r\n\t\t\t//\t\tA moveable Object.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _deleteMoveableItem\", objItem);\r\n\t\t\t// disconnect the handle\r\n\t\t\tarray.forEach(objItem.handlers, function(handler){\r\n\t\t\t\tconnect.disconnect(handler);\r\n\t\t\t});\r\n\t\t\t// delete css style :\r\n\t\t\tvar node = objItem.item.node,\r\n\t\t\t\thandle = this._searchDragHandle(node);\r\n\t\t\tdomClass.remove(handle || node, \"dragHandle\");\r\n\t\t\t// call destroy of Moveable class\r\n\t\t\tobjItem.item.destroy();\r\n\t\t},\r\n\t\r\n\t\t_getIndexArea: function(/*DOMNode*/area){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the index of an area.\r\n\t\t\t// area:\r\n\t\t\t//\t\tA moveable Object.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tarea index or -1\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _getIndexArea\");\r\n\t\t\tif(area){\r\n\t\t\t\tfor(var i = 0; i < this._areaList.length; i++){\r\n\t\t\t\t\tif(this._areaList[i].node === area){\r\n\t\t\t\t\t\treturn i;\t// Integer\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\t// Integer\r\n\t\t},\r\n\t\r\n\t\t_searchDragHandle: function(/*DOMNode*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the node which contains the first specific CSS class handle.\r\n\t\t\t// node:\r\n\t\t\t//\t\tA child of the D&D Area.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe drag handle node.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _searchDragHandle\");\r\n\t\t\tif(node){\r\n\t\t\t\tvar cssArray = this.dragHandleClass.split(' '),\r\n\t\t\t\t\tlength = cssArray.length,\r\n\t\t\t\t\tqueryCss = \"\";\r\n\t\t\t\tarray.forEach(cssArray, function(css, i){\r\n\t\t\t\t\tqueryCss += \".\" + css;\r\n\t\t\t\t\tif(i != length - 1){\r\n\t\t\t\t\t\tqueryCss += \", \";\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn query(queryCss, node)[0]; // DomNode\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\taddDragItem: function(/*DOMNode*/area, /*DOMNode*/node, /*Integer*/index, /*Boolean*/notCheckParent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTo add an item programmatically.\r\n\t\t\t// area:\r\n\t\t\t//\t\ta node corresponding to the D&D Area\r\n\t\t\t// node:\r\n\t\t\t//\t\tthe node which has to be treated.\r\n\t\t\t// index:\r\n\t\t\t//\t\tthe place in the area\r\n\t\t\t// noCheckParent:\r\n\t\t\t//\t\tif true, doesn't check if node has a parent.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tTrue if the node has been inserted else false.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: addDragItem\");\r\n\t\t\tvar add = true;\r\n\t\t\tif(!notCheckParent){\r\n\t\t\t\tadd = area && node && (node.parentNode === null || (node.parentNode && node.parentNode.nodeType !== 1));\r\n\t\t\t}\r\n\t\t\tif(add){\r\n\t\t\t\tvar indexArea = this._getIndexArea(area);\r\n\t\t\t\tif(indexArea !== -1){\r\n\t\t\t\t\tvar item = this._addMoveableItem(node),\r\n\t\t\t\t\t\titems = this._areaList[indexArea].items;\r\n\t\t\t\t\tif(0 <= index && index < items.length){\r\n\t\t\t\t\t\tvar firstListChild = items.slice(0, index),\r\n\t\t\t\t\t\t\tlastListChild = items.slice(index, items.length);\r\n\t\t\t\t\t\tfirstListChild[firstListChild.length] = item;\r\n\t\t\t\t\t\tthis._areaList[indexArea].items = firstListChild.concat(lastListChild);\r\n\t\t\t\t\t\tarea.insertBefore(node, items[index].item.node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tthis._areaList[indexArea].items.push(item);\r\n\t\t\t\t\t\tarea.appendChild(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._setMarginArea(this._areaList[indexArea], node);\r\n\t\t\t\t\tthis._areaList[indexArea].initItems = false;\r\n\t\t\t\t\treturn true;\t// Boolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\t// Boolean\r\n\t\t},\r\n\t\r\n\t\tremoveDragItem: function(/*DOMNode*/area, /*DOMNode*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDelete a moveable item programmatically. The node is removed from the area.\r\n\t\t\t// area:\r\n\t\t\t//\t\tA node corresponding to the DndArea.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node which has to be treated.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe removed node\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: removeDragItem\");\r\n\t\t\tvar index = this._getIndexArea(area);\r\n\t\t\tif(area && index !== -1){\r\n\t\t\t\tvar items = this._areaList[index].items;\r\n\t\t\t\tfor(var j = 0; j < items.length; j++){\r\n\t\t\t\t\tif(items[j].item.node === node){\r\n\t\t\t\t\t\tthis._deleteMoveableItem(items[j]);\r\n\t\t\t\t\t\t// delete item of the array\r\n\t\t\t\t\t\titems.splice(j, 1);\r\n\t\t\t\t\t\treturn area.removeChild(node); // Object\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\r\n\t\t_getChildren: function(/*DOMNode*/area){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the children of a D&D area.\r\n\t\t\t// area:\r\n\t\t\t//\t\tA DnD area.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe children of a DnD area\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _getChildren\");\r\n\t\t\tvar children = [];\r\n\t\t\tarray.forEach(area.childNodes, function(child){\r\n\t\t\t\t// delete \\n\r\n\t\t\t\tif(child.nodeType == 1){\r\n\t\t\t\t\tif(registry && registry.byNode){\r\n\t\t\t\t\t\tvar widget = registry.byNode(child);\r\n\t\t\t\t\t\tif(widget){\r\n\t\t\t\t\t\t\tif(!widget.dragRestriction){\r\n\t\t\t\t\t\t\t\tchildren.push(child);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tchildren.push(child);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tchildren.push(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn children;\t//Array\r\n\t\t},\r\n\t\r\n\t\t_setMarginArea: function(/*Object*/area,/*DOMNode*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the value of margin in the data type of areaManager\r\n\t\t\t//\t\tonly when the margin has never been computed.\r\n\t\t\t// area:\r\n\t\t\t//\t\tThe object of a D&D Area.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node which contains margins\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: _setMarginArea\");\r\n\t\t\tif(area && area.margin === null && node){\r\n\t\t\t\tarea.margin = geom.getMarginExtents(node);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tfindCurrentIndexArea: function(/*Object*/coords, /*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfind the nearest target area according to coordinates.\r\n\t\t\t//\t\tCoordinates are representing by an object : for example, {'x':10,'y':10}\r\n\t\t\t// coords:\r\n\t\t\t//\t\tan object encapsulating X and Y position\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating the area size\r\n\t\t\t// returns:\r\n\t\t\t//\t\tan index of area\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: findCurrentIndexArea\");\r\n\t\t\tthis._oldIndexArea = this._currentIndexArea;\r\n\t\t\tthis._currentIndexArea = this._dropMode.getTargetArea(this._areaList, coords, this._currentIndexArea);\r\n\t\t\tif(this._currentIndexArea != this._oldIndexArea){\r\n\t\t\t\tif(this._oldIndexArea != -1){\r\n\t\t\t\t\tthis.onDragExit(coords, size);\r\n\t\t\t\t}\r\n\t\t\t\tif(this._currentIndexArea != -1){\r\n\t\t\t\t\tthis.onDragEnter(coords, size);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._currentIndexArea;\t//Integer\r\n\t\t},\r\n\t\r\n\t\t_isAccepted: function(/*Array*/ type, /*Array*/ accept){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTrue if user can drop widget on this node.\r\n\t\t\t// type:\r\n\t\t\t//\t\tArray containing item type\r\n\t\t\t// accept:\r\n\t\t\t//\t\tArray containing types\r\n\t\t\tthis._accept = false;\r\n\t\t\tfor(var i = 0; i < accept.length; ++i){\r\n\t\t\t\tfor(var j = 0; j < type.length;++j){\r\n\t\t\t\t\tif(type[j] == accept[i]){\r\n\t\t\t\t\t\tthis._accept = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDragStart: function(/*DOMNode*/node, /*Object*/coords, /*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitialize the drag (see dojox.mdnd.Moveable.initOffsetDrag())\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node which is about to be dragged\r\n\t\t\t// coords:\r\n\t\t\t//\t\tan object encapsulating X and Y position\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating width and height values\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDragStart\");\r\n\t\t\tif(this.autoRefresh){\r\n\t\t\t\tthis._dropMode.updateAreas(this._areaList);\r\n\t\t\t}\r\n\t\r\n\t\t\t// Create the cover :\r\n\t\t\tvar _html = (sniff(\"webkit\")) ? dojo.body() : dojo.body().parentNode;\r\n\t\t\tif(!this._cover){\r\n\t\t\t\tthis._cover = domConstruct.create('div', {\r\n\t\t\t\t\t'class': \"dndCover\"\r\n\t\t\t\t});\r\n\t\t\t\tthis._cover2 = lang.clone(this._cover);\r\n\t\t\t\tdomClass.add(this._cover2, \"dndCover2\");\r\n\t\t\t}\r\n\t\t\tvar h = _html.scrollHeight+\"px\";\r\n\t\t\tthis._cover.style.height = this._cover2.style.height = h;\r\n\t\t\tdojo.body().appendChild(this._cover);\r\n\t\t\tdojo.body().appendChild(this._cover2);\r\n\t\r\n\t\t\tthis._dragStartHandler = connect.connect(node.ownerDocument, \"ondragstart\", dojo, \"stopEvent\");\r\n\t\t\t// to know the source\r\n\t\t\tthis._sourceIndexArea = this._lastValidIndexArea = this._currentIndexArea = this._getIndexArea(node.parentNode);\r\n\t\t\t// delete the dragItem into the source area\r\n\t\t\tvar sourceArea = this._areaList[this._sourceIndexArea];\r\n\t\t\tvar children = sourceArea.items;\r\n\t\t\tfor(var i = 0; i < children.length; i++){\r\n\t\t\t\tif(children[i].item.node == node){\r\n\t\t\t\t\tthis._dragItem = children[i];\r\n\t\t\t\t\tthis._dragItem.handlers.push(connect.connect(this._dragItem.item, \"onDrag\", this, \"onDrag\"));\r\n\t\t\t\t\tthis._dragItem.handlers.push(connect.connect(this._dragItem.item, \"onDragEnd\", this, \"onDrop\"));\r\n\t\t\t\t\tchildren.splice(i,1);\r\n\t\t\t\t\tthis._currentDropIndex = this._sourceDropIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar nodeRef = null;\r\n\t\t\tif(this._sourceDropIndex !== sourceArea.items.length){\r\n\t\t\t\tnodeRef = sourceArea.items[this._sourceDropIndex].item.node;\r\n\t\t\t}\r\n\t\t\t// IE7 OPTIMIZATION\r\n\t\t\tif(sniff(\"ie\")> 7){\r\n\t\t\t\t// connect these events on the cover\r\n\t\t\t\tthis._eventsIE7 = [\r\n\t\t\t\t\tconnect.connect(this._cover, \"onmouseover\", dojo, \"stopEvent\"),\r\n\t\t\t\t\tconnect.connect(this._cover, \"onmouseout\", dojo, \"stopEvent\"),\r\n\t\t\t\t\tconnect.connect(this._cover, \"onmouseenter\", dojo, \"stopEvent\"),\r\n\t\t\t\t\tconnect.connect(this._cover, \"onmouseleave\", dojo, \"stopEvent\")\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\r\n\t\t\tvar s = node.style;\r\n\t\t\ts.left = coords.x+\"px\";\r\n\t\t\ts.top = coords.y+\"px\";\r\n\t\t\t// attach the node to the cover\r\n\t\t\tif(s.position == \"relative\" || s.position == \"\"){\r\n\t\t\t\ts.position = \"absolute\"; // enforcing the absolute mode\r\n\t\t\t}\r\n\t\t\tthis._cover.appendChild(node);\r\n\t\r\n\t\t\tthis._dropIndicator.place(sourceArea.node, nodeRef, size);\r\n\t\t\t// add a style to place the _dragNode in foreground\r\n\t\t\tdomClass.add(node, \"dragNode\");\r\n\t\t\t// A dragged node is always draggable in this source area.\r\n\t\t\tthis._accept = true;\r\n\t\t\tconnect.publish(\"/dojox/mdnd/drag/start\",[node, sourceArea, this._sourceDropIndex]);\r\n\t\t},\r\n\t\r\n\t\tonDragEnter: function(/*Object*/coords, /*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOptionally called by the getTargetArea method of TargetFinder class.\r\n\t\t\t// coords:\r\n\t\t\t//\t\tcoordinates of the dragged Node.\r\n\t\t\t// size:\r\n\t\t\t//\t\tsize of the dragged Node.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDragEnter\", coords, size);\r\n\t\t\tif(this._currentIndexArea === this._sourceIndexArea){\r\n\t\t\t\tthis._accept = true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._isAccepted(this._dragItem.type, this._areaList[this._currentIndexArea].accept);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDragExit: function(/*Object*/coords, /*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOptionally called by the getTargetArea method of TargetFinder class.\r\n\t\t\t// coords:\r\n\t\t\t//\t\tcoordinates of the dragged Node.\r\n\t\t\t// size:\r\n\t\t\t//\t\tsize of the dragged Node.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDragExit\");\r\n\t\t\tthis._accept = false;\r\n\t\t},\r\n\t\r\n\t\tonDrag: function(/*DOMNode*/node, /*Object*/coords, /*Object*/size, /*Object*/mousePosition){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the dojo.dnd.Moveable.onDrag is fired.\r\n\t\t\t//\t\tSearch the nearest target area and called the placeDropIndicator\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node which is dragged\r\n\t\t\t// coords:\r\n\t\t\t//\t\tan object encapsulating X and Y position\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating width and height values\r\n\t\t\t// mousePosition:\r\n\t\t\t//\t\tcoordinates of mouse\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDrag\", node, \",\", coords,size);\r\n\t\t\tvar coordinates = this._dropMode.getDragPoint(coords, size, mousePosition);\r\n\t\t\tthis.findCurrentIndexArea(coordinates, size);\r\n\t\t\tif(this._currentIndexArea !== -1 && this._accept){\r\n\t\t\t\tthis.placeDropIndicator(coordinates, size);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tplaceDropIndicator: function(/*Object*/coords, /*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSearch the right place to insert the dropIndicator and display the dropIndicator.\r\n\t\t\t// coords:\r\n\t\t\t//\t\tan object encapsulating X and Y position\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating width and height values\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe current drop index\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: placeDropIndicator\");\r\n\t\t\t//keep old drop Index\r\n\t\t\tthis._oldDropIndex = this._currentDropIndex;\r\n\t\t\t// calculate all children marker (see VerticalDropMode.initItems())\r\n\t\t\tvar area = this._areaList[this._currentIndexArea];\r\n\t\t\tif(!area.initItems){\r\n\t\t\t\tthis._dropMode.initItems(area);\r\n\t\t\t}\r\n\t\t\t//get the index where the drop has to be placed.\r\n\t\t\tthis._currentDropIndex = this._dropMode.getDropIndex(area, coords);\r\n\t\t\tif(!(this._currentIndexArea === this._oldIndexArea && this._oldDropIndex === this._currentDropIndex)){\r\n\t\t\t\tthis._placeDropIndicator(size);\r\n\t\t\t}\r\n\t\t\treturn this._currentDropIndex;\t//Integer\r\n\t\t},\r\n\t\r\n\t\t_placeDropIndicator: function(/*Object*/size){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tplace the dropIndicator\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating width and height values\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\tvar oldArea = this._areaList[this._lastValidIndexArea];\r\n\t\t\tvar currentArea = this._areaList[this._currentIndexArea];\r\n\t\t\t//refresh the previous area after moving out the drop indicator\r\n\t\t\tthis._dropMode.refreshItems(oldArea, this._oldDropIndex, size, false);\r\n\t\t\t// place dropIndicator\r\n\t\t\tvar node = null;\r\n\t\t\tif(this._currentDropIndex != -1){\r\n\t\t\t\tnode = currentArea.items[this._currentDropIndex].item.node;\r\n\t\t\t}\r\n\t\t\tthis._dropIndicator.place(currentArea.node, node);\r\n\t\t\tthis._lastValidIndexArea = this._currentIndexArea;\r\n\t\t\t//refresh the current area after placing the drop indicator\r\n\t\t\tthis._dropMode.refreshItems(currentArea, this._currentDropIndex, size, true);\r\n\t\t},\r\n\t\r\n\t\tonDropCancel: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCancel the drop.\r\n\t\t\t//\t\tThe dragNode returns into the source.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDropCancel\");\r\n\t\t\tif(!this._accept){\r\n\t\t\t\tvar index = this._getIndexArea(this._dropIndicator.node.parentNode);\r\n\t\t\t\tif(index != -1){\r\n\t\t\t\t\tthis._currentIndexArea = index;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// case if the dropIndicator is in the area which has been unregistered during the drag.\r\n\t\t\t\t\t// chose by default the first area.\r\n\t\t\t\t\tthis._currentIndexArea = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDrop: function(/*DOMNode*/node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDrop the dragged item where the dropIndicator is displayed.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node which is about to be dropped\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: onDrop\");\r\n\t\t\t//dropCancel\r\n\t\t\tthis.onDropCancel();\r\n\t\t\tvar targetArea = this._areaList[this._currentIndexArea];\r\n\t\t\tdomClass.remove(node, \"dragNode\");\r\n\t\t\tvar style = node.style;\r\n\t\t\tstyle.position = \"relative\";\r\n\t\t\tstyle.left = \"0\";\r\n\t\t\tstyle.top = \"0\";\r\n\t\t\tstyle.width = \"auto\";\r\n\t\t\tif(targetArea.node == this._dropIndicator.node.parentNode){\r\n\t\t\t\ttargetArea.node.insertBefore(node, this._dropIndicator.node);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// case if the dropIndicator is in the area which has been unregistered during the drag.\r\n\t\t\t\ttargetArea.node.appendChild(node);\r\n\t\t\t\tthis._currentDropIndex = targetArea.items.length;\r\n\t\t\t}\r\n\t\t\t// add child into the new target area.\r\n\t\t\tvar indexChild = this._currentDropIndex;\r\n\t\t\tif(indexChild == -1){\r\n\t\t\t\tindexChild = targetArea.items.length;\r\n\t\t\t}\r\n\t\t\tvar children = targetArea.items;\r\n\t\t\tvar firstListArea = children.slice(0, indexChild);\r\n\t\t\tvar lastListArea = children.slice(indexChild, children.length);\r\n\t\t\tfirstListArea[firstListArea.length] = this._dragItem;\r\n\t\t\ttargetArea.items = firstListArea.concat(lastListArea);\r\n\t\r\n\t\t\tthis._setMarginArea(targetArea, node);\r\n\t\t\tarray.forEach(this._areaList, function(obj){\r\n\t\t\t\tobj.initItems = false;\r\n\t\t\t});\r\n\t\t\t// disconnect onDrop handler\r\n\t\t\tconnect.disconnect(this._dragItem.handlers.pop());\r\n\t\t\tconnect.disconnect(this._dragItem.handlers.pop());\r\n\t\t\tthis._resetAfterDrop();\r\n\t\t\t// remove the cover\r\n\t\t\tif(this._cover){\r\n\t\t\t\tdojo.body().removeChild(this._cover);\r\n\t\t\t\tdojo.body().removeChild(this._cover2);\r\n\t\t\t}\r\n\t\t\tconnect.publish(\"/dojox/mdnd/drop\",[node, targetArea, indexChild]);\r\n\t\t},\r\n\t\r\n\t\t_resetAfterDrop: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treset manager properties after dropping an item\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\tthis._accept = false;\r\n\t\t\tthis._dragItem = null;\r\n\t\t\tthis._currentDropIndex = -1;\r\n\t\t\tthis._currentIndexArea = -1;\r\n\t\t\tthis._oldDropIndex = -1;\r\n\t\t\tthis._sourceIndexArea = -1;\r\n\t\t\tthis._sourceDropIndex = -1;\r\n\t\t\tthis._dropIndicator.remove();\r\n\t\t\tif(this._dragStartHandler){\r\n\t\t\t\tconnect.disconnect(this._dragStartHandler);\r\n\t\t\t}\r\n\t\t\tif(sniff(\"ie\") > 7){\r\n\t\t\t\tarray.forEach(this._eventsIE7, connect.disconnect);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroy the component.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.AreaManager ::: destroy\");\r\n\t\t\t//see implementation of unregister()\r\n\t\t\twhile(this._areaList.length > 0){\r\n\t\t\t\tif(!this.unregister(this._areaList[0].node)){\r\n\t\t\t\t\tthrow new Error(\"Error while destroying AreaManager\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconnect.disconnect(this.resizeHandler);\r\n\t\t\tthis._dropIndicator.destroy();\r\n\t\t\tthis._dropMode.destroy();\r\n\t\t\tif(dojox.mdnd.autoScroll){\r\n\t\t\t\tdojox.mdnd.autoScroll.destroy();\r\n\t\t\t}\r\n\t\t\tif(this.refreshListener){\r\n\t\t\t\tconnect.unsubscribe(this.refreshListener);\r\n\t\t\t}\r\n\t\t\t// destroy the cover\r\n\t\t\tif(this._cover){\r\n\t\t\t\tdomConstruct.destroy(this._cover);\r\n\t\t\t\tdomConstruct.destroy(this._cover2);\r\n\t\t\t\tdelete this._cover;\r\n\t\t\t\tdelete this._cover2;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t\r\n\tif(_Widget){\r\n\t\t//\tAdd a new property to widget\r\n\t\tlang.extend(_Widget, {\r\n\t\t\t// dndType: String\r\n\t\t\t//\t\tDefines a type of widget.\r\n\t\t\tdndType : \"text\"\r\n\t\t});\r\n\t}\r\n\r\n\t// TODO for 2.0 (or earlier): these values should be set on \"am\", the export of this module, not in dojox.mdnd\r\n\tdojox.mdnd._areaManager = null;\r\n\tdojox.mdnd.areaManager = function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the current areaManager, creates one if it is not created yet.\r\n\t\tif(!dojox.mdnd._areaManager){\r\n\t\t\tdojox.mdnd._areaManager = new dojox.mdnd.AreaManager();\r\n\t\t}\r\n\t\treturn dojox.mdnd._areaManager;\t// Object\r\n\t};\r\n\treturn am;\r\n});"]}