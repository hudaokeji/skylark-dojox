{"version":3,"sources":["mdnd/adapter/DndFromDojo.js"],"names":["define","dojo","declare","connect","array","domClass","win","AreaManager","Manager","dfd","dropIndicatorSize","w","h","_areaManager","_dojoManager","_currentArea","_oldArea","_moveHandler","_subscribeHandler","constructor","this","dojox","mdnd","areaManager","manager","subscribeDnd","subscribe","unsubscribeDnd","forEach","unsubscribe","_getHoverArea","coords","x","y","areas","_areaList","i","length","area","startX","endX","node","offsetWidth","startY","endY","offsetHeight","_oldIndexArea","_currentIndexArea","onDragExit","onDragEnter","onDragStart","source","nodes","copy","_dragNode","_copy","_source","_outSourceHandler","doc","onMouseMove","e","pageX","pageY","_accept","_dropIndicator","style","visibility","add","avatar","placeDropIndicator","_dndType","getAttribute","type","split","_isAccepted","accept","remove","_dropMode","refreshItems","_oldDropIndex","_resetAfterDrop","isAccepted","onDndSource","target","disconnect","dropIndicator","parentNode","nodeType","_resetAvatar","onDropCancel","onDrop","dropIndex","_currentDropIndex","publish","adapter","_dndFromDojo","DndFromDojo"],"mappings":"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","file":"../../../mdnd/adapter/DndFromDojo.js","sourcesContent":["define([\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/connect\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/_base/window\",\r\n\t\"dojox/mdnd/AreaManager\",\r\n\t\"dojo/dnd/Manager\"\r\n],function(dojo, declare, connect, array, domClass, win, AreaManager, Manager){\r\n\tvar dfd = declare(\r\n\t\t\"dojox.mdnd.adapter.DndFromDojo\",\r\n\t\tnull,\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tAllow communication between Dojo dnd items and DojoX D&D areas\r\n\t\r\n\t\t// dropIndicatorSize: Object\r\n\t\t//\t\tsize by default of dropIndicator (display only into a D&D Area)\r\n\t\tdropIndicatorSize : {'w':0,'h':50},\r\n\t\r\n\t\t// dropIndicatorSize: Object\r\n\t\t//\t\tsize by default of dropIndicator (display only into a D&D Area)\r\n\t\tdropIndicatorSize: {'w':0,'h':50},\r\n\t\r\n\t\t// _areaManager: Object\r\n\t\t//\t\tReference to the current DojoX Dnd Manager\r\n\t\t_areaManager: null,\r\n\t\r\n\t\t// _dojoManager\r\n\t\t//\t\tReference to the current Dojo Manager\r\n\t\t_dojoManager: null,\r\n\t\r\n\t\t// _currentArea: Object\r\n\t\t//\t\tThe current Area on mouse over\r\n\t\t_currentArea: null,\r\n\t\r\n\t\t// _oldArea: Object\r\n\t\t//\t\tThe old area the mouse has passed over\r\n\t\t_oldArea: null,\r\n\t\r\n\t\t// _moveHandler: Object\r\n\t\t//\t\tThe handler of mouse connection\r\n\t\t_moveHandler: null,\r\n\t\r\n\t\t// _subscribeHandler: Array\r\n\t\t//\t\tThe list of dojo dnd topics\r\n\t\t_subscribeHandler: null,\r\n\t\r\n\t\tconstructor: function(){\r\n\t\t\tthis._areaManager = dojox.mdnd.areaManager();\r\n\t\t\tthis._dojoManager = Manager.manager();\r\n\t\t\tthis._currentArea = null;\r\n\t\t\tthis._moveHandler = null;\r\n\t\t\tthis.subscribeDnd();\r\n\t\t},\r\n\t\r\n\t\tsubscribeDnd: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSubscribe to somes topics of dojo drag and drop.\r\n\t\r\n\t\t\t//console.log((\"dojox.mdnd.adapter.DndFromDojo ::: subscribeDnd\");\r\n\t\t\tthis._subscribeHandler = [\r\n\t\t\t\tconnect.subscribe(\"/dnd/start\",this,\"onDragStart\"),\r\n\t\t\t\tconnect.subscribe(\"/dnd/drop/before\", this, \"onDrop\"),\r\n\t\t\t\tconnect.subscribe(\"/dnd/cancel\",this,\"onDropCancel\"),\r\n\t\t\t\tconnect.subscribe(\"/dnd/source/over\",this,\"onDndSource\")\r\n\t\t\t]\r\n\t\t},\r\n\t\r\n\t\tunsubscribeDnd: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnsubscribe to some topics of dojo drag and drop.\r\n\t\r\n\t\t\t//console.log((\"dojox.mdnd.adapter.DndFromDojo ::: unsubscribeDnd\");\r\n\t\t\tarray.forEach(this._subscribeHandler, connect.unsubscribe);\r\n\t\t},\r\n\t\r\n\t\t_getHoverArea: function(/*Object*/ coords){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet a D&D dojoX area as a DOM node positioned under a specific point.\r\n\t\t\t// coords:\r\n\t\t\t//\t\tObject containing the coordinates x and y (mouse position)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: _getHoverArea\");\r\n\t\t\tvar x = coords.x;\r\n\t\t\tvar y = coords.y;\r\n\t\t\tthis._oldArea = this._currentArea;\r\n\t\t\tthis._currentArea = null;\r\n\t\t\tvar areas = this._areaManager._areaList;\r\n\t\t\tfor(var i = 0; i < areas.length; i++){\r\n\t\t\t\tvar area = areas[i];\r\n\t\t\t\tvar startX = area.coords.x;\r\n\t\t\t\tvar endX = startX + area.node.offsetWidth;\r\n\t\t\t\tvar startY = area.coords.y;\r\n\t\t\t\tvar endY = startY + area.node.offsetHeight;\r\n\t\t\t\t// check if the coordinates mouse is in a D&D Area\r\n\t\t\t\tif(startX <= x && x <= endX && startY <= y && y <= endY){\r\n\t\t\t\t\tthis._areaManager._oldIndexArea = this._areaManager._currentIndexArea;\r\n\t\t\t\t\tthis._areaManager._currentIndexArea = i;\r\n\t\t\t\t\tthis._currentArea = area.node;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this._currentArea != this._oldArea){\r\n\t\t\t\tif(this._currentArea == null){\r\n\t\t\t\t\t// case when the dragNode was in a D&D area but it's out now.\r\n\t\t\t\t\tthis.onDragExit();\r\n\t\t\t\t}\r\n\t\t\t\telse if(this._oldArea == null){\r\n\t\t\t\t\t// case when the dragNode was out a D&D area but it's in now.\r\n\t\t\t\t\tthis.onDragEnter();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// case when the dragNode was in a D&D area and enter in an other D&D area directly.\r\n\t\t\t\t\tthis.onDragExit();\r\n\t\t\t\t\tthis.onDragEnter();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: _getHoverArea\",this._dojoManager.avatar.node,this._currentArea,this._oldArea);\r\n\t\t},\r\n\t\r\n\t\tonDragStart: function(/*Object*/source, /*Array*/nodes, /*Boolean*/copy){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the \"/dnd/start\" topic is published.\r\n\t\t\t// source:\r\n\t\t\t//\t\tthe source which provides items\r\n\t\t\t// nodes:\r\n\t\t\t//\t\tthe list of transferred items\r\n\t\t\t// copy:\r\n\t\t\t//\t\tcopy items, if true, move items otherwise\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDragStart\");\r\n\t\t\t// catch the dragNode to get the type when it's necessary.\r\n\t\t\tthis._dragNode = nodes[0];\r\n\t\t\tthis._copy = copy; this._source = source;\r\n\t\t\t// Connect the onMouseMove :\r\n\t\t\t// It's useful to activate the detection of a D&D area and the dropIndicator place only if\r\n\t\t\t// the dragNode is out of a the source dojo. The classic behaviour of the dojo source is kept.\r\n\t\t\tthis._outSourceHandler = connect.connect(this._dojoManager, \"outSource\", this, function(){\r\n\t\t\t\t//dojo.disconnect(this._outSourceHandler);\r\n\t\t\t\tif(this._moveHandler == null){\r\n\t\t\t\t\tthis._moveHandler = connect.connect(dojo.doc, \"mousemove\", this, \"onMouseMove\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\r\n\t\tonMouseMove: function(/*DOMEvent*/e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the user moves the mouse.\r\n\t\t\t// e:\r\n\t\t\t//\t\tthe DOM event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onMouseMove\");\r\n\t\t\t// calculate the coordonates of the mouse.\r\n\t\t\tvar coords = {\r\n\t\t\t\t'x': e.pageX,\r\n\t\t\t\t'y': e.pageY\r\n\t\t\t};\r\n\t\t\tthis._getHoverArea(coords);\r\n\t\t\t// if a D&D area has been found and if it's accepted to drop this type of dragged node\r\n\t\t\tif(this._currentArea && this._areaManager._accept){\r\n\t\t\t\t// specific case : a dropIndicator can be hidden (see onDndSource method)\r\n\t\t\t\tif(this._areaManager._dropIndicator.node.style.visibility == \"hidden\"){\r\n\t\t\t\t\tthis._areaManager._dropIndicator.node.style.visibility = \"\";\r\n\t\t\t\t\tdomClass.add(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t\t}\r\n\t\t\t\t// place the dropIndicator in D&D Area with a default size.\r\n\t\t\t\tthis._areaManager.placeDropIndicator(coords, this.dropIndicatorSize);\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDragEnter: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the user drages an DOJO dnd item inside a D&D dojoX area.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDragEnter\");\r\n\t\t\t// Check if the type of dragged node is accepted in the selected D&D dojoX Area.\r\n\t\t\tvar _dndType = this._dragNode.getAttribute(\"dndType\");\r\n\t\t\t// need to have an array as type\r\n\t\t\tvar type = (_dndType) ? _dndType.split(/\\s*,\\s*/) : [\"text\"];\r\n\t\t\tthis._areaManager._isAccepted(type, this._areaManager._areaList[this._areaManager._currentIndexArea].accept);\r\n\t\t\t// if the D&D dojoX Area accepts the drop, change the color of Avatar.\r\n\t\t\tif(this._dojoManager.avatar){\r\n\t\t\t\tif(this._areaManager._accept){\r\n\t\t\t\t\tdomClass.add(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tdomClass.remove(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDragExit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the user leaves a D&D dojoX area after dragging an DOJO dnd item over it.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDragExit\");\r\n\t\t\t// if the dragged node exits of a D&D dojoX Area :\r\n\t\t\tthis._areaManager._accept = false;\r\n\t\t\t// change color of avatar\r\n\t\t\tif(this._dojoManager.avatar){\r\n\t\t\t\tdomClass.remove(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t}\r\n\t\t\t// reset all variables and remove the dropIndicator.\r\n\t\t\tif(this._currentArea == null){\r\n\t\t\t\tthis._areaManager._dropMode.refreshItems(this._areaManager._areaList[this._areaManager._oldIndexArea], this._areaManager._oldDropIndex, this.dropIndicatorSize, false);\r\n\t\t\t\tthis._areaManager._resetAfterDrop();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis._areaManager._dropIndicator.remove();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tisAccepted: function(/*Node*/node, /*Object*/accept){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCheck if a dragNode is accepted into a dojo target.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe dragged node.\r\n\t\t\t// accept:\r\n\t\t\t//\t\tObject containing the type accepted for a target dojo.\r\n\t\t\t// returns:\r\n\t\t\t//\t\ttrue if the dragged node is accepted in the target dojo.\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: isAccepted\");\r\n\t\t\tvar type = (node.getAttribute(\"dndType\")) ? node.getAttribute(\"dndType\") : \"text\";\r\n\t\t\tif(type && type in accept)\r\n\t\t\t\treturn true;\t// Boolean\r\n\t\t\telse\r\n\t\t\t\treturn false;\t// Boolean\r\n\t\t},\r\n\t\r\n\t\tonDndSource: function(/*Object*/ source){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the mouse enters or exits of a source dojo.\r\n\t\t\t// source:\r\n\t\t\t//\t\tthe dojo source/target\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDndSource\",source);\r\n\t\t\t// Only the case : \"source dojo into a D&D dojoX Area\" is treated.\r\n\t\t\tif(this._currentArea == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(source){\r\n\t\t\t\t// Enter in a source/target dojo.\r\n\t\t\t\t// test if the type of draggedNode is accepted :\r\n\t\t\t\tvar accept = false;\r\n\t\t\t\tif(this._dojoManager.target == source){\r\n\t\t\t\t\taccept = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\taccept = this.isAccepted(this._dragNode, source.accept);\r\n\t\t\t\t}\r\n\t\t\t\tif(accept){\r\n\t\t\t\t\t// disconnect the onMouseMove to disabled the search of a drop zone in the D&D dojoX Area.\r\n\t\t\t\t\tconnect.disconnect(this._moveHandler);\r\n\t\t\t\t\tthis._currentArea = this._moveHandler = null;\r\n\t\t\t\t\t// hidden the visibility of dojoX dropIndicator to prevent an offset when the dropIndicator disappears.\r\n\t\t\t\t\t// test if drop indicator is visible before applaying hidden style.\r\n\t\t\t\t\tvar dropIndicator = this._areaManager._dropIndicator.node;\r\n\t\t\t\t\tif(dropIndicator && dropIndicator.parentNode !== null && dropIndicator.parentNode.nodeType == 1)\r\n\t\t\t\t\t\tdropIndicator.style.visibility = \"hidden\";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// if the type of dragged node is not accepted in the target dojo, the color of avatar\r\n\t\t\t\t\t// have to be the same that the color of D&D dojoX Area acceptance.\r\n\t\t\t\t\tthis._resetAvatar();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Exit of a source/target dojo.\r\n\t\t\t\t// reconnect the onMouseMove to enabled the search of a drop zone in the D&D dojox Area.\r\n\t\t\t\tif(!this._moveHandler)\r\n\t\t\t\t\tthis._moveHandler = connect.connect(dojo.doc, \"mousemove\", this, \"onMouseMove\");\r\n\t\r\n\t\t\t\tthis._resetAvatar();\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t_resetAvatar: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction executed in onDndSource function to set the avatar\r\n\t\t\t//\t\tacceptance according to the dojox DnD AreaManager Acceptance.\r\n\t\t\t//\t\tIt is used when The mouse exit a source/target dojo or if the\r\n\t\t\t//\t\tdragged node is not accepted in dojo source / target.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: _resetAvatar\");\r\n\t\t\tif(this._dojoManager.avatar){\r\n\t\t\t\tif(this._areaManager._accept){\r\n\t\t\t\t\tdomClass.add(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tdomClass.remove(this._dojoManager.avatar.node, \"dojoDndAvatarCanDrop\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDropCancel: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the \"/dnd/cancel\" topic is published.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDropCancel\");\r\n\t\t\tif(this._currentArea == null){\r\n\t\t\t\t// the dragged node is not in the D&D dojox Area => Cancel\r\n\t\t\t\tthis._areaManager._resetAfterDrop();\r\n\t\t\t\tconnect.disconnect(this._moveHandler);\r\n\t\t\t\tconnect.disconnect(this._outSourceHandler);\r\n\t\t\t\tthis._currentArea = this._moveHandler = this._outSourceHandler = null;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// the dragged node is in the D&D dojox Area\r\n\t\t\t\t//\t\t(catch when dragged node exits of a source/target dojo and stays in the same D&D dojox Area)\r\n\t\t\t\t// dojo cancel the drop but it's authorized in the D&D Area\r\n\t\t\t\tif(this._areaManager._accept){\r\n\t\t\t\t\tthis.onDrop(this._source, [this._dragNode], this._copy, this._currentArea);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis._currentArea = null;\r\n\t\t\t\t\tconnect.disconnect(this._outSourceHandler);\r\n\t\t\t\t\tconnect.disconnect(this._moveHandler);\r\n\t\t\t\t\tthis._moveHandler = this._outSourceHandler = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tonDrop: function(/*Object*/source, /*Array*/nodes, /*Boolean*/copy){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOccurs when the user leaves a D&D dojox area after dragging an DOJO dnd item over it.\r\n\t\t\t// source:\r\n\t\t\t//\t\tthe source which provides items\r\n\t\t\t// nodes:\r\n\t\t\t//\t\tthe list of transferred items\r\n\t\t\t// copy:\r\n\t\t\t//\t\tcopy items, if true, move items otherwise\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.adapter.DndFromDojo ::: onDrop\", this._currentArea);\r\n\t\t\tconnect.disconnect(this._moveHandler);\r\n\t\t\tconnect.disconnect(this._outSourceHandler);\r\n\t\t\tthis._moveHandler = this._outSourceHandler = null;\r\n\t\t\tif(this._currentArea){\r\n\t\t\t\tvar dropIndex = this._areaManager._currentDropIndex;\r\n\t\t\t\tconnect.publish(\"/dnd/drop/after\", [source, nodes, copy, this._currentArea, dropIndex]);\r\n\t\t\t\tthis._currentArea = null;\r\n\t\t\t}\r\n\t\t\tif(this._areaManager._dropIndicator.node.style.visibility == \"hidden\"){\r\n\t\t\t\tthis._areaManager._dropIndicator.node.style.visibility = \"\";\r\n\t\t\t}\r\n\t\t\tthis._areaManager._resetAfterDrop();\r\n\t\t}\r\n\t});\r\n\t\r\n\tdojox.mdnd.adapter._dndFromDojo = null;\r\n\tdojox.mdnd.adapter._dndFromDojo = new dojox.mdnd.adapter.DndFromDojo();\r\n\treturn dfd; \r\n});\r\n"]}