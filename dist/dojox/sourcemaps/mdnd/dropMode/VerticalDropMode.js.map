{"version":3,"sources":["mdnd/dropMode/VerticalDropMode.js"],"names":["define","dojo","declare","array","geom","vdm","_oldXPoint","_oldYPoint","_oldBehaviour","addArea","areas","object","length","position","node","coords","x","y","push","i","j","updateAreas","areaList","currentRight","nextLeft","nextArea","area","x1","x2","this","_updateArea","offsetWidth","initItems","forEach","items","obj","item","h","refreshItems","indexItem","size","added","height","margin","t","getDragPoint","mousePosition","w","getTargetArea","currentIndexArea","index","end","start","direction","compute","arguments","_checkInterval","getDropIndex","targetArea","destroy","dojox","mdnd","areaManager","_dropMode","dropMode","VerticalDropMode"],"mappings":"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","file":"../../../mdnd/dropMode/VerticalDropMode.js","sourcesContent":["define([\r\n\t\"dojo/_base/kernel\",\r\n\t\"dojo/_base/declare\",\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/dom-geometry\",\r\n\t\"dojox/mdnd/AreaManager\"\r\n],function(dojo, declare, array, geom){\r\n\tvar vdm = declare(\r\n\t\t\"dojox.mdnd.dropMode.VerticalDropMode\",\r\n\t\tnull,\r\n\t{\r\n\t\t// summary:\r\n\t\t//\t\tEnabled a type of calcul for Dnd.\r\n\t\t//\t\tDefault class to find the nearest target.\r\n\t\r\n\t\t// _oldXPoint: Integer\r\n\t\t//\t\tused to save a X position\r\n\t\t_oldXPoint: null,\r\n\t\r\n\t\t// _oldYPoint: Integer\r\n\t\t//\t\tused to save a Y position\r\n\t\t_oldYPoint: null,\r\n\t\r\n\t\t// _oldBehaviour: String\r\n\t\t//\t\tsee `getDragPoint`\r\n\t\t_oldBehaviour: \"up\",\r\n\t\r\n\t\taddArea: function(/*Array*/areas, /*Object*/object){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a DnD Area into an array sorting by the x position.\r\n\t\t\t// areas:\r\n\t\t\t//\t\tarray of areas\r\n\t\t\t// object:\r\n\t\t\t//\t\tdata type of a DndArea\r\n\t\t\t// returns:\r\n\t\t\t//\t\ta sorted area\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: addArea\");\r\n\t\t\tvar length = areas.length;\r\n\t\t\tvar position = geom.position(object.node, true);\r\n\t\t\tobject.coords = {'x':position.x, 'y':position.y};\r\n\t\t\tif(length == 0){\r\n\t\t\t\tareas.push(object);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar x = object.coords.x;\r\n\t\t\t\tfor(var i = 0; i < length; i++){\r\n\t\t\t\t\tif(x < areas[i].coords.x){\r\n\t\t\t\t\t\tfor(var j = length-1; j >= i; j--)\r\n\t\t\t\t\t\t\tareas[j + 1] = areas[j];\r\n\t\t\t\t\t\tareas[i] = object;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(i == length){\r\n\t\t\t\t\tareas.push(object);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn areas;\t// Array\r\n\t\t},\r\n\t\r\n\t\tupdateAreas: function(/*Array*/areaList){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRefresh intervals between areas to determinate the nearest area to drop an item.\r\n\t\t\t//\t\tAlgorithm :\r\n\t\t\t//\t\tthe marker should be the vertical line passing by the\r\n\t\t\t//\t\tcentral point between two contiguous areas.\r\n\t\t\t//\t\tNote:\r\n\t\t\t//\t\tIf the page has only one targetArea, it's not necessary to calculate coords.\r\n\t\t\t// areaList:\r\n\t\t\t//\t\tarray of areas\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: initAreas\");\r\n\t\t\tvar length = areaList.length;\r\n\t\t\tif(length > 1){\r\n\t\t\t\tvar currentRight, nextLeft;\r\n\t\t\t\tfor(var i = 0; i < length; i++){\r\n\t\t\t\t\tvar area = areaList[i];\r\n\t\t\t\t\tvar nextArea;\r\n\t\t\t\t\tarea.coords.x1 = -1;\r\n\t\t\t\t\tarea.coords.x2 = -1;\r\n\t\t\t\t\tif(i == 0){\r\n\t\t\t\t\t\tnextArea = areaList[i+1];\r\n\t\t\t\t\t\tthis._updateArea(area);\r\n\t\t\t\t\t\tthis._updateArea(nextArea);\r\n\t\t\t\t\t\tcurrentRight = area.coords.x + area.node.offsetWidth;\r\n\t\t\t\t\t\tnextLeft = nextArea.coords.x;\r\n\t\t\t\t\t\tarea.coords.x2 = currentRight + (nextLeft-currentRight)/2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(i == length-1){\r\n\t\t\t\t\t\tarea.coords.x1 = areaList[i-1].coords.x2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tnextArea = areaList[i+1];\r\n\t\t\t\t\t\tthis._updateArea(nextArea);\r\n\t\t\t\t\t\tcurrentRight = area.coords.x + area.node.offsetWidth;\r\n\t\t\t\t\t\tnextLeft = nextArea.coords.x;\r\n\t\t\t\t\t\tarea.coords.x1 = areaList[i-1].coords.x2;\r\n\t\t\t\t\t\tarea.coords.x2 = currentRight + (nextLeft-currentRight)/2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\t_updateArea : function(/*Object*/area){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tupdate the DnD area object (i.e. update coordinates of its DOM node)\r\n\t\t\t// area:\r\n\t\t\t//\t\tthe DnD area\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode  ::: _updateArea\");\r\n\t\t\tvar position = geom.position(area.node, true);\r\n\t\t\tarea.coords.x = position.x;\r\n\t\t\tarea.coords.y = position.y;\r\n\t\t},\r\n\t\r\n\t\tinitItems: function(/*Object*/area){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tinitialize the horizontal line in order to determinate the drop zone.\r\n\t\t\t// area:\r\n\t\t\t//\t\tthe DnD area\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: initItems\");\r\n\t\t\tarray.forEach(area.items, function(obj){\r\n\t\t\t\t//get the vertical middle of the item\r\n\t\t\t\tvar node = obj.item.node;\r\n\t\t\t\tvar position = geom.position(node, true);\r\n\t\t\t\tvar y = position.y + position.h/2;\r\n\t\t\t\tobj.y = y;\r\n\t\t\t});\r\n\t\t\tarea.initItems = true;\r\n\t\t},\r\n\t\r\n\t\trefreshItems: function(/*Object*/area, /*Integer*/indexItem, /*Object*/size, /*Boolean*/added){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ttake into account the drop indicator DOM element in order to compute horizontal lines\r\n\t\t\t// area:\r\n\t\t\t//\t\ta DnD area object\r\n\t\t\t// indexItem:\r\n\t\t\t//\t\tindex of a draggable item\r\n\t\t\t// size:\r\n\t\t\t//\t\tdropIndicator size\r\n\t\t\t// added:\r\n\t\t\t//\t\tboolean to know if a dropIndicator has been added or deleted\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: refreshItems\");\r\n\t\t\tif(indexItem == -1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse if(area && size && size.h){\r\n\t\t\t\tvar height = size.h;\r\n\t\t\t\tif(area.margin){\r\n\t\t\t\t\theight += area.margin.t;\r\n\t\t\t\t}\r\n\t\t\t\tvar length = area.items.length;\r\n\t\t\t\tfor(var i = indexItem; i < length; i++){\r\n\t\t\t\t\tvar item = area.items[i];\r\n\t\t\t\t\tif(added){\r\n\t\t\t\t\t\titem.y += height;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\titem.y -= height;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\r\n\t\tgetDragPoint: function(/*Object*/coords, /*Object*/size, /*Object*/mousePosition){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn coordinates of the draggable item\r\n\t\t\t// description:\r\n\t\t\t//\t\treturn for:\r\n\t\t\t//\r\n\t\t\t//\t\t- X point : the middle\r\n\t\t\t//\t  \t- Y point : search if the user goes up or goes down with his mouse.\r\n\t\t\t//\t  \t- Up : top of the draggable item\r\n\t\t\t//\t  \t- Down : bottom of the draggable item\r\n\t\t\t// coords:\r\n\t\t\t//\t\tan object encapsulating X and Y position\r\n\t\t\t// size:\r\n\t\t\t//\t\tan object encapsulating width and height values\r\n\t\t\t// mousePosition:\r\n\t\t\t//\t\tcoordinates of mouse\r\n\t\t\t// returns:\r\n\t\t\t//\t\tan object of coordinates\r\n\t\t\t//\t\texample : {'x':10,'y':10}\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: getDragPoint\");\r\n\t\t\tvar y = coords.y;\r\n\t\t\tif(this._oldYPoint){\r\n\t\t\t\tif(y > this._oldYPoint){\r\n\t\t\t\t\tthis._oldBehaviour = \"down\";\r\n\t\t\t\t\ty += size.h;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tif(y <= this._oldYPoint){\r\n\t\t\t\t\t\tthis._oldBehaviour = \"up\";\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._oldYPoint = y;\r\n\t\t\treturn {\r\n\t\t\t\t'x': coords.x + (size.w / 2),\r\n\t\t\t\t'y': y\r\n\t\t\t\t};\t// Object\r\n\t\t},\r\n\t\r\n\t\tgetTargetArea: function(/*Array*/areaList, /*Object*/ coords, /*integer*/currentIndexArea ){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tget the nearest DnD area.\r\n\t\t\t//\t\tCoordinates are basically provided by the ``getDragPoint`` method.\r\n\t\t\t// areaList:\r\n\t\t\t//\t\ta list of DnD areas objects\r\n\t\t\t// coords:\r\n\t\t\t//\t\tcoordinates [x,y] of the dragItem\r\n\t\t\t// currentIndexArea:\r\n\t\t\t//\t\tan index representing the active DnD area\r\n\t\t\t// returns:\r\n\t\t\t//\t\tthe index of the DnD area\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: getTargetArea\");\r\n\t\t\tvar index = 0;\r\n\t\t\tvar x = coords.x;\r\n\t\t\tvar end = areaList.length;\r\n\t\t\tif(end > 1){\r\n\t\t\t\tvar start = 0, direction = \"right\", compute = false;\r\n\t\t\t\tif(currentIndexArea == -1 || arguments.length < 3){\r\n\t\t\t\t\t// first time : Need to search the nearest area in all areas.\r\n\t\t\t\t\tcompute = true;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// check if it's always the same area\r\n\t\t\t\t\tif(this._checkInterval(areaList, currentIndexArea, x)){\r\n\t\t\t\t\t\tindex = currentIndexArea;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif(this._oldXPoint < x){\r\n\t\t\t\t\t\t\tstart = currentIndexArea + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tstart = currentIndexArea - 1;\r\n\t\t\t\t\t\t\tend = 0;\r\n\t\t\t\t\t\t\tdirection = \"left\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcompute = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(compute){\r\n\t\t\t\t\tif(direction === \"right\"){\r\n\t\t\t\t\t\tfor(var i = start; i < end; i++){\r\n\t\t\t\t\t\t\tif(this._checkInterval(areaList, i, x)){\r\n\t\t\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tfor(var i = start; i >= end; i--){\r\n\t\t\t\t\t\t\tif(this._checkInterval(areaList, i, x)){\r\n\t\t\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._oldXPoint = x;\r\n\t\t\treturn index;\t// Integer\r\n\t\t},\r\n\t\r\n\t\t_checkInterval: function(/*Array*/areaList, /*Integer*/index, /*Coord*/x){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcheck if the dragNode is in the interval.\r\n\t\t\t//\t\tThe x coordinate is basically provided by the ``getDragPoint`` method.\r\n\t\t\t// areaList:\r\n\t\t\t//\t\ta list of DnD areas objects\r\n\t\t\t// index:\r\n\t\t\t//\t\tindex of a DnD area (to get the interval)\r\n\t\t\t// x:\r\n\t\t\t//\t\tcoordinate x, of the dragNode\r\n\t\t\t// returns:\r\n\t\t\t//\t\ttrue if the dragNode is in intervall\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar coords = areaList[index].coords;\r\n\t\t\tif(coords.x1 == -1){\r\n\t\t\t\tif(x <= coords.x2){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tif(coords.x2 == -1){\r\n\t\t\t\t\tif(x > coords.x1){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(coords.x1 < x && x <= coords.x2){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\treturn false;\t// Boolean\r\n\t\t},\r\n\t\r\n\t\tgetDropIndex: function(/*Object*/ targetArea, /*Object*/ coords){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the index where the drop has to be placed.\r\n\t\t\t// targetArea:\r\n\t\t\t//\t\ta DnD area object\r\n\t\t\t// coords:\r\n\t\t\t//\t\tcoordinates [x,y] of the draggable item\r\n\t\t\t// returns:\r\n\t\t\t//\t\ta number\r\n\t\t\t//\t\tor -1 if the area has no children or the drop index represents the last position in to the area\r\n\t\r\n\t\t\t//console.log(\"dojox.mdnd.dropMode.VerticalDropMode ::: getDropIndex\");\r\n\t\t\tvar length = targetArea.items.length;\r\n\t\t\tvar coordinates = targetArea.coords;\r\n\t\t\tvar y = coords.y;\r\n\t\t\tif(length > 0){\r\n\t\t\t\t// course all children in the target area.\r\n\t\t\t\tfor(var i = 0; i < length; i++){\r\n\t\t\t\t\t// compare y value with y value of children\r\n\t\t\t\t\tif(y < targetArea.items[i].y){\r\n\t\t\t\t\t\treturn i;\t// Integer\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif(i == length-1){\r\n\t\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t},\r\n\t\r\n\t\tdestroy: function(){\r\n\t\t\t//\tcan be overwritten.\r\n\t\t}\r\n\t});\r\n\t\r\n\t//------------\r\n\t//Singleton\r\n\t//------------\r\n\tdojox.mdnd.areaManager()._dropMode = new dojox.mdnd.dropMode.VerticalDropMode();\r\n\treturn vdm;\r\n});\r\n"]}