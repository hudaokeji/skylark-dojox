{"version":3,"sources":["image/Gallery.js"],"names":["dojo","provide","experimental","require","declare","dijit","_Widget","_Templated","imageHeight","imageWidth","pageSize","dojox","image","SlideShow","prototype","autoLoad","linkAttr","imageThumbAttr","imageLargeAttr","titleAttr","slideshowInterval","templateString","cache","postCreate","this","widgetid","id","inherited","arguments","thumbPicker","ThumbnailPicker","useLoadNotifier","size","thumbPickerNode","slideShow","slideShowNode","_this","subscribe","getShowTopicName","packet","_showThumbs","index","getClickTopicName","evt","showImage","moveImageLoadingPointer","getLoadTopicName","markImageLoaded","_centerChildren","setDataStore","dataStore","request","paramNames","reset","showNextImage","inTimer","toggleSlideshow","deprecated","toggleSlideShow","callback","resize","dim","thumbSize","marginBox","outerNode","slideSize","diff","w","style"],"mappings":";;;;;;;AAAAA,KAAKC,QAAQ,uBACbD,KAAKE,aAAa,uBASlBF,KAAKG,QAAQ,WACbH,KAAKG,QAAQ,iBACbH,KAAKG,QAAQ,oBACbH,KAAKG,QAAQ,+BACbH,KAAKG,QAAQ,yBAEbH,KAAKI,QAAQ,uBACXC,MAAMC,QAASD,MAAME,aAOtBC,YAAa,IAIbC,WAAY,IAIZC,SAAUC,MAAMC,MAAMC,UAAUC,UAAUJ,SAK1CK,UAAU,EAKVC,SAAU,OAKVC,eAAgB,gBAKhBC,eAAgB,WAKhBC,UAAW,QAIXC,kBAAmB,EAEnBC,eAAgBrB,KAAKsB,MAAM,cAAe,0BAE1CC,WAAY,WAGXC,KAAKC,SAAWD,KAAKE,GACrBF,KAAKG,UAAUC,WAEfJ,KAAKK,YAAc,IAAIlB,MAAMC,MAAMkB,iBAClCd,SAAUQ,KAAKR,SACfE,eAAgBM,KAAKN,eACrBD,eAAgBO,KAAKP,eACrBE,UAAWK,KAAKL,UAChBY,iBAAiB,EACjBC,KAAMR,KAAKf,YACTe,KAAKS,iBAGRT,KAAKU,UAAY,IAAIvB,MAAMC,MAAMC,WAChCL,YAAagB,KAAKhB,YAClBC,WAAYe,KAAKf,WACjBM,SAAUS,KAAKT,SACfC,SAAUQ,KAAKR,SACfE,eAAgBM,KAAKN,eACrBC,UAAWK,KAAKL,UAChBC,kBAAmBI,KAAKJ,kBACxBV,SAAUc,KAAKd,UACbc,KAAKW,eAER,IAAIC,EAAQZ,KAGZxB,KAAKqC,UAAUb,KAAKU,UAAUI,mBAAoB,SAASC,GAC1DH,EAAMP,YAAYW,YAAYD,EAAOE,SAGtCzC,KAAKqC,UAAUb,KAAKK,YAAYa,oBAAqB,SAASC,GAC7DP,EAAMF,UAAUU,UAAUD,EAAIF,SAI/BzC,KAAKqC,UAAUb,KAAKK,YAAYS,mBAAoB,SAASK,GAC5DP,EAAMF,UAAUW,wBAAwBF,EAAIF,SAI7CzC,KAAKqC,UAAUb,KAAKU,UAAUY,mBAAoB,SAASL,GAC1DL,EAAMP,YAAYkB,gBAAgBN,KAEnCjB,KAAKwB,mBAGJC,aAAc,SAASC,EAAWC,EAAqBC,GAaxD5B,KAAKK,YAAYoB,aAAaC,EAAWC,EAASC,GAClD5B,KAAKU,UAAUe,aAAaC,EAAWC,EAASC,IAG/CC,MAAO,WAGR7B,KAAKU,UAAUmB,QACf7B,KAAKK,YAAYwB,SAGlBC,cAAe,SAASC,GAMvB/B,KAAKU,UAAUoB,iBAGhBE,gBAAiB,WAChBxD,KAAKyD,WAAW,oFAAqF,GAAI,OACzGjC,KAAKkC,mBAGNA,gBAAiB,WAGhBlC,KAAKU,UAAUwB,mBAGhBd,UAAW,SAASH,EAAmBkB,GAOtCnC,KAAKU,UAAUU,UAAUH,EAAOkB,IAGjCC,OAAQ,SAASC,GAChBrC,KAAKK,YAAY+B,OAAOC,IAGzBb,gBAAiB,WAIhB,IAAIc,EAAY9D,KAAK+D,UAAUvC,KAAKK,YAAYmC,WAC5CC,EAAYjE,KAAK+D,UAAUvC,KAAKU,UAAU8B,WAE1CE,GAAQJ,EAAUK,EAAIF,EAAUE,GAAK,EAEtCD,EAAO,EACTlE,KAAKoE,MAAM5C,KAAKU,UAAU8B,UAAW,aAAcE,EAAO,MACjDA,EAAO,GAChBlE,KAAKoE,MAAM5C,KAAKK,YAAYmC,UAAW,cAAuB,EAARE,EAAa","file":"../../image/Gallery.js","sourcesContent":["dojo.provide(\"dojox.image.Gallery\");\r\ndojo.experimental(\"dojox.image.Gallery\");\r\n//\r\n// dojox.image.Gallery courtesy Shane O Sullivan, licensed under a Dojo CLA\r\n//\r\n// For a sample usage, see http://www.skynet.ie/~sos/photos.php\r\n//\r\n//\tTODO: Make public, document params and privitize non-API conformant methods.\r\n//\tdocument topics.\r\n\r\ndojo.require(\"dojo.fx\");\r\ndojo.require(\"dijit._Widget\");\r\ndojo.require(\"dijit._Templated\");\r\ndojo.require(\"dojox.image.ThumbnailPicker\");\r\ndojo.require(\"dojox.image.SlideShow\");\r\n\r\ndojo.declare(\"dojox.image.Gallery\",\r\n\t[dijit._Widget, dijit._Templated],\r\n\t{\r\n\t// summary:\r\n\t//\t\tGallery widget that wraps a dojox.image.ThumbnailPicker and dojox.image.SlideShow widget\r\n\t//\r\n\t// imageHeight: Number\r\n\t//\t\tMaximum height of an image in the SlideShow widget\r\n\timageHeight: 375,\r\n\t\r\n\t// imageWidth: Number\r\n\t//\t\tMaximum width of an image in the SlideShow widget\r\n\timageWidth: 500,\r\n\t\t\r\n\t// pageSize: Number\r\n\t//\t\tThe number of records to retrieve from the data store per request.\r\n\tpageSize: dojox.image.SlideShow.prototype.pageSize,\r\n\t\r\n\t// autoLoad: Boolean\r\n\t//\t\tIf true, images are loaded before the user views them. If false, an\r\n\t//\t\timage is loaded when the user displays it.\r\n\tautoLoad: true,\r\n\t\r\n\t// linkAttr: String\r\n\t//\t\tDefines the name of the attribute to request from the store to retrieve the\r\n\t//\t\tURL to link to from an image, if any.\r\n\tlinkAttr: \"link\",\r\n\t\r\n\t// imageThumbAttr: String\r\n\t//\t\tDefines the name of the attribute to request from the store to retrieve the\r\n\t//\t\tURL to the thumbnail image.\r\n\timageThumbAttr: \"imageUrlThumb\",\r\n\t\r\n\t// imageLargeAttr: String\r\n\t//\t\tDefines the name of the attribute to request from the store to retrieve the\r\n\t//\t\tURL to the image.\r\n\timageLargeAttr: \"imageUrl\",\r\n\t\r\n\t// titleAttr: String\r\n\t//\t\tDefines the name of the attribute to request from the store to retrieve the\r\n\t//\t\ttitle of the picture, if any.\r\n\ttitleAttr: \"title\",\r\n \r\n\t// slideshowInterval: Integer\r\n\t//\t\tTime, in seconds, between image changes in the slide show.\r\n\tslideshowInterval: 3,\r\n\t\r\n\ttemplateString: dojo.cache(\"dojox.image\", \"resources/Gallery.html\"),\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInitializes the widget, creates the ThumbnailPicker and SlideShow widgets\r\n\t\tthis.widgetid = this.id;\r\n\t\tthis.inherited(arguments)\r\n\t\t\r\n\t\tthis.thumbPicker = new dojox.image.ThumbnailPicker({\r\n\t\t\tlinkAttr: this.linkAttr,\r\n\t\t\timageLargeAttr: this.imageLargeAttr,\r\n\t\t\timageThumbAttr: this.imageThumbAttr,\r\n\t\t\ttitleAttr: this.titleAttr,\r\n\t\t\tuseLoadNotifier: true,\r\n\t\t\tsize: this.imageWidth\r\n\t\t}, this.thumbPickerNode);\r\n\t\t\r\n\t\t\r\n\t\tthis.slideShow = new dojox.image.SlideShow({\r\n\t\t\timageHeight: this.imageHeight,\r\n\t\t\timageWidth: this.imageWidth,\r\n\t\t\tautoLoad: this.autoLoad,\r\n\t\t\tlinkAttr: this.linkAttr,\r\n\t\t\timageLargeAttr: this.imageLargeAttr,\r\n\t\t\ttitleAttr: this.titleAttr,\r\n\t\t\tslideshowInterval: this.slideshowInterval,\r\n\t\t\tpageSize: this.pageSize\r\n\t\t}, this.slideShowNode);\r\n\t\t\r\n\t\tvar _this = this;\r\n\t\t//When an image is shown in the Slideshow, make sure it is visible\r\n\t\t//in the ThumbnailPicker\r\n\t\tdojo.subscribe(this.slideShow.getShowTopicName(), function(packet){\r\n\t\t\t_this.thumbPicker._showThumbs(packet.index);\r\n\t\t});\r\n\t\t//When the user clicks a thumbnail, show that image\r\n\t\tdojo.subscribe(this.thumbPicker.getClickTopicName(), function(evt){\r\n\t\t\t_this.slideShow.showImage(evt.index);\r\n\t\t});\r\n\t\t//When the ThumbnailPicker moves to show a new set of pictures,\r\n\t\t//make the Slideshow start loading those pictures first.\r\n\t\tdojo.subscribe(this.thumbPicker.getShowTopicName(), function(evt){\r\n\t\t\t_this.slideShow.moveImageLoadingPointer(evt.index);\r\n\t\t});\r\n\t\t//When an image finished loading in the slideshow, update the loading\r\n\t\t//notification in the ThumbnailPicker\r\n\t\tdojo.subscribe(this.slideShow.getLoadTopicName(), function(index){\r\n\t\t\t_this.thumbPicker.markImageLoaded(index);\r\n\t\t});\r\n\t\tthis._centerChildren();\r\n\t},\r\n\t  \r\n  \tsetDataStore: function(dataStore, request, /*optional*/paramNames){\r\n\t\t// summary:\r\n\t\t//\t\tSets the data store and request objects to read data from.\r\n\t\t// dataStore:\r\n\t\t//\t\tAn implementation of the dojo/data/api/Read API. This accesses the image\r\n\t\t//\t\tdata.\r\n\t\t// request:\r\n\t\t//\t\tAn implementation of the dojo/data/api/Request API. This specifies the\r\n\t\t//\t\tquery and paging information to be used by the data store\r\n\t\t// paramNames:\r\n\t\t//\t\tAn object defining the names of the item attributes to fetch from the\r\n\t\t//\t\tdata store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr',\r\n\t\t//\t\t'imageThumbAttr' and 'titleAttr'\r\n\t\tthis.thumbPicker.setDataStore(dataStore, request, paramNames);\r\n\t\tthis.slideShow.setDataStore(dataStore, request, paramNames);\r\n  \t},\r\n  \r\n  \treset: function(){\r\n\t\t// summary:\r\n\t\t//\t\tResets the widget to its initial state\r\n\t\tthis.slideShow.reset();\r\n\t\tthis.thumbPicker.reset();\r\n  \t},\r\n  \r\n\tshowNextImage: function(inTimer){\r\n\t\t// summary:\r\n\t\t//\t\tChanges the image being displayed in the SlideShow to the next\r\n\t\t//\t\timage in the data store\r\n\t\t// inTimer: Boolean\r\n\t\t//\t\tIf true, a slideshow is active, otherwise the slideshow is inactive.\r\n\t\tthis.slideShow.showNextImage();\r\n\t},\r\n\r\n\ttoggleSlideshow: function(){\r\n\t\tdojo.deprecated(\"dojox.widget.Gallery.toggleSlideshow is deprecated.  Use toggleSlideShow instead.\", \"\", \"2.0\");\r\n\t\tthis.toggleSlideShow();\r\n\t},\r\n\r\n\ttoggleSlideShow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tSwitches the slideshow mode on and off.\r\n\t\tthis.slideShow.toggleSlideShow();\r\n\t},\r\n\r\n\tshowImage: function(index, /*optional*/callback){\r\n\t\t// summary:\r\n\t\t//\t\tShows the image at index 'idx'.\r\n\t\t// idx: Number\r\n\t\t//\t\tThe position of the image in the data store to display\r\n\t\t// callback: Function\r\n\t\t//\t\tOptional callback function to call when the image has finished displaying.\r\n\t\tthis.slideShow.showImage(index, callback);\r\n\t},\r\n\t\r\n\tresize: function(dim){\r\n\t\tthis.thumbPicker.resize(dim);\r\n\t},\r\n\t\r\n\t_centerChildren: function() {\r\n\t\t// summary:\r\n\t\t//\t\tEnsures that the ThumbnailPicker and the SlideShow widgets\r\n\t\t//\t\tare centered.\r\n\t\tvar thumbSize = dojo.marginBox(this.thumbPicker.outerNode);\r\n\t\tvar slideSize = dojo.marginBox(this.slideShow.outerNode);\r\n\t\t\r\n\t\tvar diff = (thumbSize.w - slideSize.w) / 2;\r\n\t\t\r\n\t\tif(diff > 0) {\r\n\t\t\tdojo.style(this.slideShow.outerNode, \"marginLeft\", diff + \"px\");\r\n\t\t} else if(diff < 0) {\r\n\t\t\tdojo.style(this.thumbPicker.outerNode, \"marginLeft\", (diff * -1) + \"px\");\r\n\t\t}\r\n\t}\r\n});\r\n"]}