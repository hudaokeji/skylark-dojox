{"version":3,"sources":["image/MagnifierLite.js"],"names":["define","kernel","declare","_Widget","construct","style","geometry","window","lang","experimental","glassSize","scale","postCreate","this","inherited","arguments","_adjustScale","_createGlass","connect","domNode","glassNode","img","node","create","height","width","className","body","surfaceNode","appendChild","place","clone","set","position","top","left","_zoomSize","w","h","offset","console","dir","_imageSize","_showGlass","e","_placeGlass","visibility","display","_hideGlass","_setImage","sub","Math","floor","pageY","pageX","xOff","x","yOff","y","destroy","finalize"],"mappings":";;;;;;;AAAAA,QAAQ,oBAAqB,qBAAsB,gBAAiB,qBAAsB,iBAAkB,oBAAqB,oBAAqB,mBAAoB,SAASC,EAAQC,EAASC,EAASC,EAAWC,EAAOC,EAAUC,EAAQC,GAIhP,OAFAP,EAAOQ,aAAa,6BAEbP,EAAQ,4BAA6BC,GAe3CO,UAAW,IAIXC,MAAO,EAEPC,WAAY,WACXC,KAAKC,UAAUC,WAIfF,KAAKG,eACLH,KAAKI,eAELJ,KAAKK,QAAQL,KAAKM,QAAQ,eAAe,cACzCN,KAAKK,QAAQL,KAAKO,UAAU,cAAc,eAC1CP,KAAKK,QAAQL,KAAKQ,IAAI,aAAa,cAInCR,KAAKK,QAAQX,EAAO,WAAW,iBAGhCU,aAAc,WAIb,IAAIK,EAAOT,KAAKO,UAAYhB,EAAUmB,OAAO,OAC5ClB,OACCmB,OAAQX,KAAKH,UAAY,KACzBe,MAAOZ,KAAKH,UAAY,MAEzBgB,UAAW,aACTnB,EAAOoB,QAEVd,KAAKe,YAAcN,EAAKO,YAAYzB,EAAUmB,OAAO,QAErDV,KAAKQ,IAAMjB,EAAU0B,MAAMtB,EAAKuB,MAAMlB,KAAKM,SAAUG,GAErDjB,EAAM2B,IAAInB,KAAKQ,KACdY,SAAU,WACVC,IAAK,EAAGC,KAAM,EACdV,MAAOZ,KAAKuB,UAAUC,EAAI,KAC1Bb,OAAQX,KAAKuB,UAAUE,EAAI,QAI7BtB,aAAc,WAIbH,KAAK0B,OAASjC,EAAS2B,SAASpB,KAAKM,SAAS,GAC9CqB,QAAQC,IAAI5B,KAAK0B,QACjB1B,KAAK6B,YAAeL,EAAGxB,KAAK0B,OAAOF,EAAGC,EAAEzB,KAAK0B,OAAOD,GACpDzB,KAAKuB,WACJC,EAAGxB,KAAK6B,WAAWL,EAAIxB,KAAKF,MAC5B2B,EAAGzB,KAAK6B,WAAWJ,EAAIzB,KAAKF,QAI9BgC,WAAY,SAASC,GAGpB/B,KAAKgC,YAAYD,GACjBvC,EAAM2B,IAAInB,KAAKO,WACd0B,WAAY,UACZC,QAAQ,MAIVC,WAAY,SAASJ,GAGpBvC,EAAM2B,IAAInB,KAAKO,WACd0B,WAAY,SACZC,QAAQ,UAIVF,YAAa,SAASD,GAIrB/B,KAAKoC,UAAUL,GACf,IAAIM,EAAMC,KAAKC,MAAMvC,KAAKH,UAAY,GACtCL,EAAM2B,IAAInB,KAAKO,WACdc,IAAKiB,KAAKC,MAAMR,EAAES,MAAQH,GAAO,KACjCf,KAAKgB,KAAKC,MAAMR,EAAEU,MAAQJ,GAAO,QAInCD,UAAW,SAASL,GAInB,IAAIW,GAAQX,EAAEU,MAAQzC,KAAK0B,OAAOiB,GAAK3C,KAAK0B,OAAOF,EAClDoB,GAAQb,EAAES,MAAQxC,KAAK0B,OAAOmB,GAAK7C,KAAK0B,OAAOD,EAC/CkB,EAAK3C,KAAKuB,UAAUC,EAAIkB,GAAQ,EAAM1C,KAAKH,UAAY6C,EACvDG,EAAK7C,KAAKuB,UAAUE,EAAImB,GAAQ,EAAM5C,KAAKH,UAAY+C,EAExDpD,EAAM2B,IAAInB,KAAKQ,KACda,IAAKwB,EAAI,KACTvB,KAAMqB,EAAI,QAIZG,QAAS,SAASC,GACjBxD,EAAUuD,QAAQ9C,KAAKO,WACvBP,KAAKC,UAAUC","file":"../../image/MagnifierLite.js","sourcesContent":["define([\"dojo/_base/kernel\", \"dojo/_base/declare\", \"dijit/_Widget\", \"dojo/dom-construct\", \"dojo/dom-style\", \"dojo/dom-geometry\", \"dojo/_base/window\", \"dojo/_base/lang\"], function(kernel, declare, _Widget, construct, style, geometry, window, lang){\r\n\r\n\tkernel.experimental(\"dojox.image.MagnifierLite\");\r\n\t\r\n\treturn declare(\"dojox.image.MagnifierLite\", _Widget, {\r\n\t\t// summary:\r\n\t\t//\t\tAdds magnification on a portion of an image element\r\n\t\t// description:\r\n\t\t//\t\tAn unobtrusive way to add an unstyled overlay\r\n\t\t//\t\tabove the srcNode image element. The overlay/glass is a\r\n\t\t//\t\tscaled version of the src image (so larger images sized down\r\n\t\t//\t\tare clearer).\r\n\t\t//\r\n\t\t//\t\tThe logic behind requiring the src image to be large is\r\n\t\t//\t\t\"it's going to be downloaded, anyway\" so this method avoids\r\n\t\t//\t\thaving to make thumbnails and 2 http requests among other things.\r\n\r\n\t\t// glassSize: Int\r\n\t\t//\t\tthe width and height of the bounding box\r\n\t\tglassSize: 125,\r\n\r\n\t\t// scale: Decimal\r\n\t\t//\t\tthe multiplier of the Mangification.\r\n\t\tscale: 6,\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// images are hard to make into workable templates, so just add outer overlay\r\n\t\t\t// and skip using dijit._Templated\r\n\t\t\tthis._adjustScale();\r\n\t\t\tthis._createGlass();\r\n\r\n\t\t\tthis.connect(this.domNode,\"onmouseenter\",\"_showGlass\");\r\n\t\t\tthis.connect(this.glassNode,\"onmousemove\",\"_placeGlass\");\r\n\t\t\tthis.connect(this.img,\"onmouseout\",\"_hideGlass\");\r\n\r\n\t\t\t// when position of domNode changes, _adjustScale needs to run.\r\n\t\t\t// window.resize isn't it always, FIXME:\r\n\t\t\tthis.connect(window,\"onresize\",\"_adjustScale\");\r\n\t\t},\r\n\r\n\t\t_createGlass: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tmake img and glassNode elements as children of the body\r\n\r\n\t\t\tvar node = this.glassNode = construct.create('div', {\r\n\t\t\t\tstyle: {\r\n\t\t\t\t\theight: this.glassSize + \"px\",\r\n\t\t\t\t\twidth: this.glassSize + \"px\"\r\n\t\t\t\t},\r\n\t\t\t\tclassName: \"glassNode\"\r\n\t\t\t}, window.body());\r\n\r\n\t\t\tthis.surfaceNode = node.appendChild(construct.create('div'));\r\n\r\n\t\t\tthis.img = construct.place(lang.clone(this.domNode), node);\r\n\t\t\t// float the image around inside the .glassNode\r\n\t\t\tstyle.set(this.img, {\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t\ttop: 0, left: 0,\r\n\t\t\t\twidth: this._zoomSize.w + \"px\",\r\n\t\t\t\theight: this._zoomSize.h + \"px\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_adjustScale: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tupdate the calculations should this.scale change\r\n\r\n\t\t\tthis.offset = geometry.position(this.domNode, true);\r\n\t\t\tconsole.dir(this.offset);\r\n\t\t\tthis._imageSize = { w: this.offset.w, h:this.offset.h };\r\n\t\t\tthis._zoomSize = {\r\n\t\t\t\tw: this._imageSize.w * this.scale,\r\n\t\t\t\th: this._imageSize.h * this.scale\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t_showGlass: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tshow the overlay\r\n\t\t\tthis._placeGlass(e);\r\n\t\t\tstyle.set(this.glassNode, {\r\n\t\t\t\tvisibility: \"visible\",\r\n\t\t\t\tdisplay:\"\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_hideGlass: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\thide the overlay\r\n\t\t\tstyle.set(this.glassNode, {\r\n\t\t\t\tvisibility: \"hidden\",\r\n\t\t\t\tdisplay:\"none\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_placeGlass: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tposition the overlay centered under the cursor\r\n\r\n\t\t\tthis._setImage(e);\r\n\t\t\tvar sub = Math.floor(this.glassSize / 2);\r\n\t\t\tstyle.set(this.glassNode,{\r\n\t\t\t\ttop: Math.floor(e.pageY - sub) + \"px\",\r\n\t\t\t\tleft:Math.floor(e.pageX - sub) + \"px\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_setImage: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tset the image's offset in the clipping window relative to the mouse position\r\n\r\n\t\t\tvar xOff = (e.pageX - this.offset.x) / this.offset.w,\r\n\t\t\t\tyOff = (e.pageY - this.offset.y) / this.offset.h,\r\n\t\t\t\tx = (this._zoomSize.w * xOff * -1) + (this.glassSize * xOff),\r\n\t\t\t\ty = (this._zoomSize.h * yOff * -1) + (this.glassSize * yOff);\r\n\r\n\t\t\tstyle.set(this.img, {\r\n\t\t\t\ttop: y + \"px\",\r\n\t\t\t\tleft: x + \"px\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tdestroy: function(finalize){\r\n\t\t\tconstruct.destroy(this.glassNode);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\r\n\t});\r\n});\r\n"]}