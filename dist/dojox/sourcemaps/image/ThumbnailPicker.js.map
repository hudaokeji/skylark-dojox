{"version":3,"sources":["image/ThumbnailPicker.js"],"names":["dojo","provide","experimental","require","declare","dijit","_Widget","_Templated","imageStore","request","size","thumbHeight","thumbWidth","useLoadNotifier","useHyperlink","hyperlinkTarget","isClickable","isScrollable","isHorizontal","autoLoad","linkAttr","imageThumbAttr","imageLargeAttr","pageSize","titleAttr","templateString","cache","_thumbs","_thumbIndex","_maxPhotos","_loadedImages","baseClass","cellClass","postCreate","this","inherited","arguments","Number","_scrollerSize","sizeProp","_sizeProperty","style","outerNode","thumbScroller","subscribe","getClickTopicName","packet","index","url","getValue","data","window","open","location","addClass","thumbsNode","_totalSize","classExt","navPrev","navNext","attr","navNextImg","_blankGif","navPrevImg","connect","_sizeAttr","_scrollAttr","_updateNavControls","init","isInitialized","_loadNextPage","id","getShowTopicName","setDataStore","dataStore","paramNames","reset","query","start","count","onBegin","hitch","total","mixin","forEach","attrName","_loadInProgress","img","parentNode","destroy","_noImages","isVisible","pos","scrollAttr","offset","resize","dim","sizeParam","length","marginBox","w","imgContainer","mb","firstChild","lastChild","_next","baseOffset","origOffset","i","_showThumbs","_prev","_checkLoad","publish","_loadingImages","offsetWidth","offsetLeft","Math","min","max","left","top","offsetTop","target","x","y","dojox","fx","smoothScroll","win","duration","easing","easeOut","onEnd","play","scrollLeft","scrollTop","markImageLoaded","thumbNotifier","byId","_setThumbClass","thumb","className","store","onComplete","items","itemCounter","loadNext","counter","_loadImage","onError","console","log","fetch","callback","loadingDiv","create","class","_index","_data","defaultSize","sl","st","appendChild","setTimeout","evt","getAttribute","largeUrl","title","link","removeClass","setAttribute","change","node","add","fn"],"mappings":"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","file":"../../image/ThumbnailPicker.js","sourcesContent":["dojo.provide(\"dojox.image.ThumbnailPicker\");\r\ndojo.experimental(\"dojox.image.ThumbnailPicker\");\r\n//\r\n// dojox.image.ThumbnailPicker courtesy Shane O Sullivan, licensed under a Dojo CLA\r\n//\r\n// For a sample usage, see http://www.skynet.ie/~sos/photos.php\r\n//\r\n//\tdocument topics.\r\n\r\ndojo.require(\"dojox.fx.scroll\"); // is optional, but don't want to dojo[require] it\r\ndojo.require(\"dojo.fx.easing\");\r\n\r\ndojo.require(\"dojo.fx\");\r\ndojo.require(\"dijit._Widget\");\r\ndojo.require(\"dijit._Templated\");\r\n\r\n// FIXME: use CSS for size, thumbHeight, and thumbWidth\r\n\r\ndojo.declare(\"dojox.image.ThumbnailPicker\",\r\n\t[dijit._Widget, dijit._Templated],\r\n\t{\r\n\t// summary:\r\n\t//\t\tA scrolling Thumbnail Picker widget\r\n\r\n\t// imageStore: Object\r\n\t//\t\tA data store that implements the dojo.data Read API.\r\n\timageStore: null,\r\n\r\n\t// request: Object\r\n\t//\t\tA dojo.data Read API Request object.\r\n\trequest: null,\r\n\r\n\t// size: Number\r\n\t//\t\tWidth or height in pixels, depending if horizontal or vertical.\r\n\tsize: 500, \r\n\r\n\t// thumbHeight: Number\r\n\t//\t\tDefault height of a thumbnail image\r\n\tthumbHeight: 75, \r\n\r\n\t// thumbWidth: Number\r\n\t//\t\tDefault width of an image\r\n\tthumbWidth: 100, \r\n\r\n\t// useLoadNotifier: Boolean\r\n\t//\t\tSetting useLoadNotifier to true makes a colored DIV appear under each\r\n\t//\t\tthumbnail image, which is used to display the loading status of each\r\n\t//\t\timage in the data store.\r\n\tuseLoadNotifier: false,\r\n\r\n\t// useHyperlink: boolean\r\n\t//\t\tSetting useHyperlink to true causes a click on a thumbnail to open a link.\r\n\tuseHyperlink: false,\r\n\r\n\t// hyperlinkTarget: String\r\n\t//\t\tIf hyperlinkTarget is set to \"new\", clicking on a thumb will open a new window\r\n\t//\t\tIf it is set to anything else, clicking a thumbnail will open the url in the\r\n\t//\t\tcurrent window.\r\n\thyperlinkTarget: \"new\",\r\n\r\n\t// isClickable: Boolean\r\n\t//\t\tWhen set to true, the cursor over a thumbnail changes.\r\n\tisClickable: true,\r\n\r\n\t// isScrollable: Boolean\r\n\t//\t\tWhen true, uses smoothScroll to move between pages\r\n\tisScrollable: true,\r\n\r\n\t// isHorizontal: Boolean\r\n\t//\t\tIf true, the thumbnails are displayed horizontally. Otherwise they are displayed\r\n\t//\t\tvertically\r\n\tisHorizontal: true,\r\n\r\n\t// autoLoad: Boolean\r\n\tautoLoad: true,\r\n\r\n\t// linkAttr: String\r\n\t//\t\tThe attribute name for accessing the url from the data store\r\n\tlinkAttr: \"link\",\r\n\t\r\n\t// imageThumbAttr: String\r\n\t//\t\tThe attribute name for accessing the thumbnail image url from the data store\r\n\timageThumbAttr: \"imageUrlThumb\",\r\n\t\r\n\t// imageLargeAttr: String\r\n\t//\t\tThe attribute name for accessing the large image url from the data store\r\n\timageLargeAttr: \"imageUrl\",\r\n\t\r\n\t// pageSize: Number\r\n\t//\t\tThe number of images to request each time.\r\n\tpageSize: 20,\r\n\t\r\n\t// titleAttr: String\r\n\t//\t\tThe attribute name for accessing the title from the data store\r\n\ttitleAttr: \"title\",\r\n\t\r\n\ttemplateString: dojo.cache(\"dojox.image\", \"resources/ThumbnailPicker.html\"),\r\n\t\r\n\t// thumbs: Array\r\n\t//\t\tStores the image nodes for the thumbnails.\r\n\t_thumbs: [],\r\n\t\r\n\t// _thumbIndex: Number\r\n\t//\t\tThe index of the first thumbnail shown\r\n\t_thumbIndex: 0,\r\n\t\r\n\t// _maxPhotos: Number\r\n\t//\t\tThe total number of photos in the image store\r\n\t_maxPhotos: 0,\r\n\t\r\n\t// _loadedImages: Object\r\n\t//\t\tStores the indices of images that have been marked as loaded using the\r\n\t//\t\tmarkImageLoaded function.\r\n\t_loadedImages: {},\r\n\r\n\tbaseClass: \"ThumbnailPicker\",\r\n\r\n\tcellClass: \"Thumbnail\",\r\n\r\n\tpostCreate: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInitializes styles and listeners\r\n\r\n\t\tthis.inherited(arguments);\r\n\t\t\r\n\t\tthis.pageSize = Number(this.pageSize);\r\n\r\n\t\tthis._scrollerSize = this.size - (51 * 2);\r\n\t\t\r\n\t\tvar sizeProp = this._sizeProperty = this.isHorizontal ? \"width\" : \"height\";\r\n\t\r\n\t\t// FIXME: do this via css? calculate the correct width for the widget\r\n\t\tdojo.style(this.outerNode, \"textAlign\",\"center\");\r\n\t\tdojo.style(this.outerNode, sizeProp, this.size+\"px\");\r\n\t\r\n\t\tdojo.style(this.thumbScroller, sizeProp, this._scrollerSize + \"px\");\r\n\t\r\n\t\t//If useHyperlink is true, then listen for a click on a thumbnail, and\r\n\t\t//open the link\r\n\t\tif(this.useHyperlink){\r\n\t\t\tdojo.subscribe(this.getClickTopicName(), this, function(packet){\r\n\t\t\t\tvar index = packet.index;\r\n\t\t\t\tvar url = this.imageStore.getValue(packet.data,this.linkAttr);\r\n\t\t\t\t\r\n\t\t\t\t//If the data item doesn't contain a URL, do nothing\r\n\t\t\t\tif(!url){return;}\r\n\t\t\t\t\r\n\t\t\t\tif(this.hyperlinkTarget == \"new\"){\r\n\t\t\t\t\twindow.open(url);\r\n\t\t\t\t}else{\r\n\t\t\t\t\twindow.location = url;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\r\n\t\tif(this.isClickable){\r\n\t\t\tdojo.addClass(this.thumbsNode, \"thumbClickable\");\r\n\t\t}\r\n\t\tthis._totalSize = 0;\r\n\r\n\t\tvar classExt = this.isHorizontal ? \"Horiz\" : \"Vert\";\r\n\t\r\n\t\t// FIXME: can we setup a listener around the whole element and determine based on e.target?\r\n\t\tdojo.addClass(this.navPrev, \"prev\" + classExt);\r\n\t\tdojo.addClass(this.navNext, \"next\" + classExt);\r\n\t\tdojo.addClass(this.thumbsNode, \"thumb\"+classExt);\r\n\t\tdojo.addClass(this.outerNode, \"thumb\"+classExt);\r\n\r\n\t\tdojo.attr(this.navNextImg, \"src\", this._blankGif);\r\n\t\tdojo.attr(this.navPrevImg, \"src\", this._blankGif);\r\n\r\n\t\tthis.connect(this.navPrev, \"onclick\", \"_prev\");\r\n\t\tthis.connect(this.navNext, \"onclick\", \"_next\");\r\n\r\n\t\tif(this.isHorizontal){\r\n\t\t\tthis._sizeAttr = \"offsetWidth\";\r\n\t\t\tthis._scrollAttr = \"scrollLeft\";\r\n\t\t}else{\r\n\t\t\tthis._sizeAttr = \"offsetHeight\";\r\n\t\t\tthis._scrollAttr = \"scrollTop\";\r\n\t\t}\r\n\t\r\n\t\tthis._updateNavControls();\r\n\t\t\r\n\t\tthis.init();\r\n\t},\r\n\t\r\n\tinit: function(){\r\n\t\t// summary\r\n\t\t//\t\tLoads first image\r\n\t\tif(this.isInitialized){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.isInitialized = true;\r\n\r\n\t\tif(this.imageStore && this.request){\r\n\t\t\tthis._loadNextPage();\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\tgetClickTopicName: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the name of the dojo topic that can be\r\n\t\t//\t\tsubscribed to in order to receive notifications on\r\n\t\t//\t\twhich thumbnail was selected.\r\n\t\treturn this.id + \"/select\"; // String\r\n\t},\r\n\r\n\tgetShowTopicName: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns the name of the dojo topic that can be\r\n\t\t//\t\tsubscribed to in order to receive notifications on\r\n\t\t//\t\twhich thumbnail is now visible\r\n\t\treturn this.id + \"/show\"; // String\r\n\t},\r\n\r\n\tsetDataStore: function(dataStore, request, /*optional*/paramNames){\r\n\t\t// summary:\r\n\t\t//\t\tSets the data store and request objects to read data from.\r\n\t\t// dataStore:\r\n\t\t//\t\tAn implementation of the dojo/data/api/Read API. This accesses the image\r\n\t\t//\t\tdata.\r\n\t\t// request:\r\n\t\t//\t\tAn implementation of the dojo/data/api/Request API. This specifies the\r\n\t\t//\t\tquery and paging information to be used by the data store\r\n\t\t// paramNames:\r\n\t\t//\t\tAn object defining the names of the item attributes to fetch from the\r\n\t\t//\t\tdata store.  The four attributes allowed are 'linkAttr', 'imageLargeAttr',\r\n\t\t//\t\t'imageThumbAttr' and 'titleAttr'\r\n\t\tthis.reset();\r\n\t\r\n\t\tthis.request = {\r\n\t\t\tquery: {},\r\n\t\t\tstart: request.start || 0,\r\n\t\t\tcount: request.count || 10,\r\n\t\t\tonBegin: dojo.hitch(this, function(total){\r\n\t\t\t\tthis._maxPhotos = total;\r\n\t\t\t})\r\n\t\t};\r\n\t\r\n\t\tif(request.query){ dojo.mixin(this.request.query, request.query);}\r\n\t\r\n\t\tif(paramNames){\r\n\t\t\tdojo.forEach([\"imageThumbAttr\", \"imageLargeAttr\", \"linkAttr\", \"titleAttr\"], function(attrName){\r\n\t\t\t\tif(paramNames[attrName]){ this[attrName] = paramNames[attrName]; }\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\t\r\n\t\tthis.request.start = 0;\r\n\t\tthis.request.count = this.pageSize;\r\n\t\tthis.imageStore = dataStore;\r\n\t\tthis._loadInProgress = false;\r\n\t\tif(!this.init()){this._loadNextPage();}\r\n\t},\r\n\r\n\treset: function(){\r\n\t\t// summary:\r\n\t\t//\t\tResets the widget back to its original state.\r\n\t\tthis._loadedImages = {};\r\n\t\tdojo.forEach(this._thumbs, function(img){\r\n\t\t\tif(img && img.parentNode){\r\n\t\t\t\tdojo.destroy(img);\r\n\t\t\t}\r\n\t\t});\r\n\t\r\n\t\tthis._thumbs = [];\r\n\t\tthis.isInitialized = false;\r\n\t\tthis._noImages = true;\r\n\t},\r\n\t\r\n\tisVisible: function(index) {\r\n\t\t// summary:\r\n\t\t//\t\tReturns true if the image at the specified index is currently visible. False otherwise.\r\n\t\tvar img = this._thumbs[index];\r\n\t\tif(!img){return false;}\r\n\t\tvar pos = this.isHorizontal ? \"offsetLeft\" : \"offsetTop\";\r\n\t\tvar size = this.isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\r\n\t\tvar scrollAttr = this.isHorizontal ? \"scrollLeft\" : \"scrollTop\";\r\n\t\tvar offset = img[pos] - this.thumbsNode[pos];\r\n\t\treturn (offset >= this.thumbScroller[scrollAttr]\r\n\t\t\t&& offset + img[size] <= this.thumbScroller[scrollAttr] + this._scrollerSize);\r\n\t},\r\n\t\r\n\tresize: function(dim){\r\n\t\tvar sizeParam = this.isHorizontal ? \"w\": \"h\";\r\n\r\n\t\tvar total = 0;\r\n\r\n\t\tif(this._thumbs.length > 0 && dojo.marginBox(this._thumbs[0]).w == 0){\r\n\t\t\t// Skip the resize if the widget is not visible\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Calculate the complete size of the thumbnails\r\n\t\tdojo.forEach(this._thumbs, dojo.hitch(this, function(imgContainer){\r\n\t\t\tvar mb = dojo.marginBox(imgContainer.firstChild);\r\n\t\t\tvar size = mb[sizeParam];\r\n\t\t\ttotal += (Number(size) + 10);\r\n\t\t\t\r\n\t\t\tif(this.useLoadNotifier && mb.w > 0){\r\n\t\t\t\tdojo.style(imgContainer.lastChild, \"width\", (mb.w - 4) + \"px\");\r\n\t\t\t}\r\n\t\t\tdojo.style(imgContainer, \"width\", mb.w + \"px\");\r\n\t\t}));\r\n\r\n\t\tdojo.style(this.thumbsNode, this._sizeProperty, total + \"px\");\r\n\t\tthis._updateNavControls();\r\n\t},\r\n\t\r\n\t_next: function() {\r\n\t\t// summary:\r\n\t\t//\t\tDisplays the next page of images\r\n\t\tvar pos = this.isHorizontal ? \"offsetLeft\" : \"offsetTop\";\r\n\t\tvar size = this.isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\r\n\t\tvar baseOffset = this.thumbsNode[pos];\r\n\t\tvar firstThumb = this._thumbs[this._thumbIndex];\r\n\t\tvar origOffset = firstThumb[pos] - baseOffset;\r\n\t\r\n\t\tvar index = -1, img;\r\n\t\r\n\t\tfor(var i = this._thumbIndex + 1; i < this._thumbs.length; i++){\r\n\t\t\timg = this._thumbs[i];\r\n\t\t\tif(img[pos] - baseOffset + img[size] - origOffset > this._scrollerSize){\r\n\t\t\t\tthis._showThumbs(i);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t_prev: function(){\r\n\t\t// summary:\r\n\t\t//\t\tDisplays the next page of images\r\n\t\tif(this.thumbScroller[this.isHorizontal ? \"scrollLeft\" : \"scrollTop\"] == 0){return;}\r\n\t\tvar pos = this.isHorizontal ? \"offsetLeft\" : \"offsetTop\";\r\n\t\tvar size = this.isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\r\n\t\r\n\t\tvar firstThumb = this._thumbs[this._thumbIndex];\r\n\t\tvar origOffset = firstThumb[pos] - this.thumbsNode[pos];\r\n\t\r\n\t\tvar index = -1, img;\r\n\t\r\n\t\tfor(var i = this._thumbIndex - 1; i > -1; i--) {\r\n\t\t\timg = this._thumbs[i];\r\n\t\t\tif(origOffset - img[pos] > this._scrollerSize){\r\n\t\t\t\tthis._showThumbs(i + 1);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._showThumbs(0);\r\n\t},\r\n\r\n\t_checkLoad: function(img, index){\r\n\t\t// summary:\r\n\t\t//\t\tChecks if an image is loaded.\r\n\t\tdojo.publish(this.getShowTopicName(), [{index:index}]);\r\n\t\tthis._updateNavControls();\r\n\t\tthis._loadingImages = {};\r\n\t\r\n\t\tthis._thumbIndex = index;\r\n\t\r\n\t\t//If we have not already requested the data from the store, do so.\r\n\t\tif(this.thumbsNode.offsetWidth - img.offsetLeft < (this._scrollerSize * 2)){\r\n\t\t\tthis._loadNextPage();\r\n\t\t}\r\n\t},\r\n\r\n\t_showThumbs: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tDisplays thumbnail images, starting at position 'index'\r\n\t\t// index: Number\r\n\t\t//\t\tThe index of the first thumbnail\r\n\r\n//FIXME: When is this be called with an invalid index?  Do we need this check at all?\r\n//\t\tif(typeof index != \"number\"){ index = this._thumbIndex; }\r\n\t\tindex = Math.min(Math.max(index, 0), this._maxPhotos);\r\n\t\t\r\n\t\tif(index >= this._maxPhotos){ return; }\r\n\t\t\r\n\t\tvar img = this._thumbs[index];\r\n\t\tif(!img){ return; }\r\n\t\t\r\n\t\tvar left = img.offsetLeft - this.thumbsNode.offsetLeft;\r\n\t\tvar top = img.offsetTop - this.thumbsNode.offsetTop;\r\n\t\tvar offset = this.isHorizontal ? left : top;\r\n\t\t\t\t\r\n\t\tif(\t(offset >= this.thumbScroller[this._scrollAttr]) &&\r\n\t\t\t(offset + img[this._sizeAttr] <= this.thumbScroller[this._scrollAttr] + this._scrollerSize)\r\n\t\t){\r\n\t\t\t// FIXME: WTF is this checking for?\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(this.isScrollable){\r\n\t\t\tvar target = this.isHorizontal ? {x: left, y: 0} : { x:0, y:top};\r\n\t\t\tdojox.fx.smoothScroll({\r\n\t\t\t\ttarget: target,\r\n\t\t\t\twin: this.thumbScroller,\r\n\t\t\t\tduration:300,\r\n\t\t\t\teasing:dojo.fx.easing.easeOut,\r\n\t\t\t\tonEnd: dojo.hitch(this, \"_checkLoad\", img, index)\r\n\t\t\t}).play(10);\r\n\t\t}else{\r\n\t\t\tif(this.isHorizontal){\r\n\t\t\t\tthis.thumbScroller.scrollLeft = left;\r\n\t\t\t}else{\r\n\t\t\t\tthis.thumbScroller.scrollTop = top;\r\n\t\t\t}\r\n\t\t\tthis._checkLoad(img, index);\r\n\t\t}\r\n\t},\r\n\t\r\n\tmarkImageLoaded: function(index){\r\n\t\t// summary:\r\n\t\t//\t\tChanges a visual cue to show the image is loaded\r\n\t\t// description:\r\n\t\t//\t\tIf 'useLoadNotifier' is set to true, then a visual cue is\r\n\t\t//\t\tgiven to state whether the image is loaded or not.\tCalling this function\r\n\t\t//\t\tmarks an image as loaded.\r\n\t\tvar thumbNotifier = dojo.byId(\"loadingDiv_\"+this.id+\"_\"+index);\r\n\t\tif(thumbNotifier){this._setThumbClass(thumbNotifier, \"thumbLoaded\");}\r\n\t\tthis._loadedImages[index] = true;\r\n\t},\r\n\r\n\t_setThumbClass: function(thumb, className){\r\n\t\t// summary:\r\n\t\t//\t\tAdds a CSS class to a thumbnail, only if 'autoLoad' is true\r\n\t\t// thumb: DomNode\r\n\t\t//\t\tThe thumbnail DOM node to set the class on\r\n\t\t// className: String\r\n\t\t//\t\tThe CSS class to add to the DOM node.\r\n\t\tif(!this.autoLoad){ return; }\r\n\t\tdojo.addClass(thumb, className);\r\n\t},\r\n                                                 \r\n\t_loadNextPage: function(){\r\n\t\t// summary:\r\n\t\t//\t\tLoads the next page of thumbnail images\r\n\t\tif(this._loadInProgress){return;}\r\n\t\tthis._loadInProgress = true;\r\n\t\tvar start = this.request.start + (this._noImages ? 0 : this.pageSize);\r\n\t\t\r\n\t\tvar pos = start;\r\n\t\twhile(pos < this._thumbs.length && this._thumbs[pos]){pos ++;}\r\n\t\t\r\n\t\tvar store = this.imageStore;\r\n\t\t\r\n\t\t//Define the function to call when the items have been\r\n\t\t//returned from the data store.\r\n\t\tvar complete = function(items, request){\r\n\t\t\tif(store != this.imageStore){\r\n\t\t\t\t// If the store has been changed, ignore this callback.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(items && items.length){\r\n\t\t\t\tvar itemCounter = 0;\r\n\t\t\t\tvar loadNext = dojo.hitch(this, function(){\r\n\t\t\t\t\tif(itemCounter >= items.length){\r\n\t\t\t\t\t\tthis._loadInProgress = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar counter = itemCounter++;\r\n\r\n\t\t\t\t\tthis._loadImage(items[counter], pos + counter, loadNext);\r\n\t\t\t\t});\r\n\t\t\t\tloadNext();\r\n\r\n\t\t\t\t//Show or hide the navigation arrows on the thumbnails,\r\n\t\t\t\t//depending on whether or not the widget is at the start,\r\n\t\t\t\t//end, or middle of the list of images.\r\n\t\t\t\tthis._updateNavControls();\r\n\t\t\t}else{\r\n\t\t\t\tthis._loadInProgress = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\t//Define the function to call if the store reports an error.\r\n\t\tvar error = function(){\r\n\t\t\tthis._loadInProgress = false;\r\n\t\t\tconsole.log(\"Error getting items\");\r\n\t\t};\r\n\r\n\t\tthis.request.onComplete = dojo.hitch(this, complete);\r\n\t\tthis.request.onError = dojo.hitch(this, error);\r\n\t\r\n\t\t//Increment the start parameter. This is the dojo.data API's\r\n\t\t//version of paging.\r\n\t\tthis.request.start = start;\r\n\t\tthis._noImages = false;\r\n\t\t\r\n\t\t//Execute the request for data.\r\n\t\tthis.imageStore.fetch(this.request);\r\n\t},\r\n\r\n\t_loadImage: function(data, index, callback){\r\n\t\t// summary:\r\n\t\t//\t\tLoads an image.\r\n\r\n\t\tvar store = this.imageStore;\r\n\t\tvar url = store.getValue(data,this.imageThumbAttr);\r\n\t\t\r\n\t\tvar imgContainer = dojo.create(\"div\", {\r\n\t\t\tid: \"img_\" + this.id + \"_\" + index,\r\n\t\t\t\"class\": this.cellClass\r\n\t\t});\r\n\t\t\r\n\t\tvar img = dojo.create(\"img\", {}, imgContainer);\r\n\t\timg._index = index;\r\n\t\timg._data = data;\r\n\t\r\n\t\tthis._thumbs[index] = imgContainer;\r\n\t\tvar loadingDiv;\r\n\t\tif(this.useLoadNotifier){\r\n\t\t\tloadingDiv = dojo.create(\"div\", {\r\n\t\t\t\tid: \"loadingDiv_\" + this.id+\"_\" + index\r\n\t\t\t}, imgContainer);\r\n\t\r\n\t\t\t//If this widget was previously told that the main image for this\r\n\t\t\t//thumb has been loaded, make the loading indicator transparent.\r\n\t\t\tthis._setThumbClass(loadingDiv,\r\n\t\t\t\tthis._loadedImages[index] ? \"thumbLoaded\":\"thumbNotifier\");\r\n\t\t}\r\n\t\tvar size = dojo.marginBox(this.thumbsNode);\r\n\t\tvar defaultSize;\r\n\t\tvar sizeParam;\r\n\t\tif(this.isHorizontal){\r\n\t\t\tdefaultSize = this.thumbWidth;\r\n\t\t\tsizeParam = 'w';\r\n\t\t} else{\r\n\t\t\tdefaultSize = this.thumbHeight;\r\n\t\t\tsizeParam = 'h';\r\n\t\t}\r\n\t\tsize = size[sizeParam];\r\n\t\tvar sl = this.thumbScroller.scrollLeft, st = this.thumbScroller.scrollTop;\r\n\r\n\t\tdojo.style(this.thumbsNode, this._sizeProperty, (size + defaultSize + 20) + \"px\");\r\n\r\n\t\t//Remember the scroll values, as changing the size can alter them\r\n\t\tthis.thumbScroller.scrollLeft = sl;\r\n\t\tthis.thumbScroller.scrollTop = st;\r\n\t\tthis.thumbsNode.appendChild(imgContainer);\r\n\t\r\n\t\tdojo.connect(img, \"onload\", this, dojo.hitch(this, function(){\r\n\t\t\tif(store != this.imageStore){\r\n\t\t\t\t// If the store has changed, ignore this load event\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.resize();\r\n\t\t\t\t\t\t\r\n\t\t\t// Have to use a timeout here to prevent a call stack that gets\r\n\t\t\t// so deep that IE throws stack overflow errors\r\n\t\t\tsetTimeout(callback, 0);\r\n\t\t\treturn false;\r\n\t\t}));\r\n\t\r\n\t\tdojo.connect(img, \"onclick\", this, function(evt){\r\n\t\t\tdojo.publish(this.getClickTopicName(),\t[{\r\n\t\t\t\tindex: evt.target._index,\r\n\t\t\t\tdata: evt.target._data,\r\n\t\t\t\turl: img.getAttribute(\"src\"),\r\n\t\t\t\tlargeUrl: this.imageStore.getValue(data,this.imageLargeAttr),\r\n\t\t\t\ttitle: this.imageStore.getValue(data,this.titleAttr),\r\n\t\t\t\tlink: this.imageStore.getValue(data,this.linkAttr)\r\n\t\t\t}]);\r\n\t\t\t//\r\n\t\t\tdojo.query(\".\" + this.cellClass, this.thumbsNode).removeClass(this.cellClass + \"Selected\");\r\n\t\t\tdojo.addClass(evt.target.parentNode, this.cellClass + \"Selected\");\r\n\t\t\treturn false;\r\n\t\t});\r\n\t\tdojo.addClass(img, \"imageGalleryThumb\");\r\n\t\timg.setAttribute(\"src\", url);\r\n\t\tvar title = this.imageStore.getValue(data, this.titleAttr);\r\n\t\tif(title){ img.setAttribute(\"title\",title); }\r\n\t\tthis._updateNavControls();\r\n\t\r\n\t},\r\n\r\n\t_updateNavControls: function(){\r\n\t\t// summary:\r\n\t\t//\t\tUpdates the navigation controls to hide/show them when at\r\n\t\t//\t\tthe first or last images.\r\n\t\tvar change = function(node, add){\r\n\t\t\tvar fn = add ? \"addClass\" : \"removeClass\";\r\n\t\t\tdojo[fn](node,\"enabled\");\r\n\t\t\tdojo[fn](node,\"thumbClickable\");\r\n\t\t};\r\n\t\t\r\n\t\tvar pos = this.isHorizontal ? \"scrollLeft\" : \"scrollTop\";\r\n\t\tvar size = this.isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\r\n\t\tchange(this.navPrev, (this.thumbScroller[pos] > 0));\r\n\t\t\r\n\t\tvar addClass = (this.thumbScroller[pos] + this._scrollerSize < this.thumbsNode[size]);\r\n\t\tchange(this.navNext, addClass);\r\n\t}\r\n});\r\n"]}