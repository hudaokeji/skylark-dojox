{"version":3,"sources":["image/Badge.js"],"names":["define","dojo","dijit","dojox","_Widget","_TemplatedMixin","experimental","getObject","declare","baseClass","templateString","children","rows","cols","cellSize","cellMargin","delay","threads","easing","startup","this","_started","isString","inherited","arguments","_init","_row","_w","style","domNode","width","height","_nl","query","containerNode","forEach","n","_idx","_col","t","l","m","top","left","addClass","length","s","Math","floor","random","setTimeout","hitch","target","_getCell","_pos","indexOf","x","y","io","_getImage","_enbiggen","e","_cc","props","_tehDecider","round","bc","animateProperty","node","properties","onEnd","play","_loadUnder","info","idx","isLeft","isUp","c","f","g","hasClass","removeClass","_disenbiggen","mixin","_cycle","ns","filter"],"mappings":"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","file":"../../image/Badge.js","sourcesContent":["define([\"dojo\", \"dijit\", \"dojox/main\", \"dijit/_Widget\", \"dijit/_TemplatedMixin\", \"dojo/fx/easing\"],\r\nfunction(dojo, dijit, dojox, _Widget, _TemplatedMixin){\r\n\r\n\tdojo.experimental(\"dojox.image.Badge\");\r\n\tdojo.getObject(\"image\", true, dojox);\r\n\t\r\n\treturn dojo.declare(\"dojox.image.Badge\", [_Widget, _TemplatedMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA simple grid of Images that loops through thumbnails\r\n\r\n\t\tbaseClass: \"dojoxBadge\",\r\n\r\n\t\ttemplateString:'<div class=\"dojoxBadge\" dojoAttachPoint=\"containerNode\"></div>',\r\n\r\n\t\t// children: String\r\n\t\t//\t\tA CSS3 Selector that determines the node to become a child\r\n\t\tchildren: \"div.dojoxBadgeImage\",\r\n\r\n\t\t// rows: Integer\r\n\t\t//\t\tNumber of Rows to display\r\n\t\trows: 4,\r\n\r\n\t\t// cols: Integer\r\n\t\t//\t\tNumber of Columns to display\r\n\t\tcols: 5,\r\n\r\n\t\t// cellSize: Integer\r\n\t\t//\t\tSize in PX of each thumbnail\r\n\t\tcellSize: 50,\r\n\r\n\t\t// cellMargin: Integer\r\n\t\t//\t\tSize in PX to adjust for cell margins\r\n\t\tcellMargin: 1,\r\n\r\n\t\t// delay: Integer\r\n\t\t//\t\tTime (in ms) to show the image before sizing down again\r\n\t\tdelay: 2000,\r\n\r\n\t\t// threads: Integer\r\n\t\t//\t\thow many cycles will be going \"simultaneously\" (>2 not reccommended)\r\n\t\tthreads: 1,\r\n\r\n\t\t// easing: Function|String\r\n\t\t//\t\tAn easing function to use when showing the node (does not apply to shrinking)\r\n\t\teasing: \"dojo.fx.easing.backOut\",\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){ return; }\r\n\t\t\tif(dojo.isString(this.easing)){\r\n\t\t\t\tthis.easing = dojo.getObject(this.easing);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._init();\r\n\t\t},\r\n\r\n\t\t_init: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetup and layout the images\r\n\r\n\t\t\tvar _row = 0,\r\n\t\t\t\t_w = this.cellSize;\r\n\r\n\t\t\tdojo.style(this.domNode, {\r\n\t\t\t\twidth: _w * this.cols + \"px\",\r\n\t\t\t\theight: _w * this.rows + \"px\"\r\n\t\t\t});\r\n\r\n\t\t\tthis._nl = dojo.query(this.children, this.containerNode)\r\n\t\t\t\t.forEach(function(n, _idx){\r\n\r\n\t\t\t\t\tvar _col = _idx % this.cols,\r\n\t\t\t\t\t\tt = _row * _w,\r\n\t\t\t\t\t\tl = _col * _w,\r\n\t\t\t\t\t\tm = this.cellMargin * 2;\r\n\r\n\t\t\t\t\tdojo.style(n, {\r\n\t\t\t \t\t\ttop: t + \"px\",\r\n\t\t\t \t\t\tleft: l + \"px\",\r\n\t\t\t\t\t\twidth: _w - m + \"px\",\r\n\t\t\t\t\t\theight: _w - m + \"px\"\r\n\t\t\t \t\t});\r\n\r\n\t\t\t\t\tif(_col == this.cols - 1){ _row++; }\r\n\t\t\t\t\tdojo.addClass(n, this.baseClass + \"Image\");\r\n\r\n\t\t\t\t}, this)\r\n\t\t\t;\r\n\r\n\t\t\tvar l = this._nl.length;\r\n\t\t\twhile(this.threads--){\r\n\t\t\t\tvar s = Math.floor(Math.random() * l);\r\n\t\t\t\tsetTimeout(dojo.hitch(this, \"_enbiggen\", {\r\n\t\t\t\t\ttarget: this._nl[s]\r\n\t\t\t\t}), this.delay * this.threads);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_getCell: function(/* DomNode */ n){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn information about the position for a given node\r\n\t\t\tvar _pos = this._nl.indexOf(n);\r\n\t\t\tif(_pos >= 0){\r\n\t\t\t\tvar _col = _pos % this.cols;\r\n\t\t\t\tvar _row = Math.floor(_pos / this.cols);\r\n\t\t\t\treturn { x: _col, y: _row, n: this._nl[_pos], io: _pos };\r\n\t\t\t}else{\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getImage: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the next image in the list, or the first one if not available\r\n\t\t\treturn \"url('')\";\r\n\t\t},\r\n\r\n\t\t_enbiggen: function(/* Event|DomNode */ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tShow the passed node in the picker\r\n\t\t\tvar _pos = this._getCell(e.target || e);\r\n\r\n\t\t\tif (_pos){\r\n\t\t\t\t// we have a node, and know where it is\r\n\r\n\t\t\t\tvar m = this.cellMargin,\r\n\t\t\t\t\t_cc = (this.cellSize * 2) - (m * 2),\r\n\t\t\t\t\tprops = {\r\n\t\t\t\t\t\theight: _cc,\r\n\t\t\t\t\t\twidth: _cc\r\n\t\t\t\t\t}\r\n\t\t\t\t;\r\n\r\n\t\t\t\tvar _tehDecider = function(){\r\n\t\t\t\t\t// if we have room, we'll want to decide which direction to go\r\n\t\t\t\t\t// let \"teh decider\" decide.\r\n\t\t\t\t\treturn Math.round(Math.random());\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif(_pos.x == this.cols - 1 || (_pos.x > 0 && _tehDecider() )){\r\n\t\t\t\t\t// we have to go left, at right edge (or we want to and not on left edge)\r\n\t\t\t\t\tprops.left = this.cellSize * (_pos.x - m);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(_pos.y == this.rows - 1 || (_pos.y > 0 && _tehDecider() )){\r\n\t\t\t\t\t// we have to go up, at bottom edge (or we want to and not at top)\r\n\t\t\t\t\tprops.top = this.cellSize * (_pos.y - m);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar bc = this.baseClass;\r\n\t\t\t\tdojo.addClass(_pos.n, bc + \"Top\");\r\n\t\t\t\tdojo.addClass(_pos.n, bc + \"Seen\");\r\n\r\n\t\t\t\tdojo.animateProperty({ node: _pos.n, properties: props,\r\n\t\t\t\t\tonEnd: dojo.hitch(this, \"_loadUnder\", _pos, props),\r\n\t\t\t\t\teasing: this.easing\r\n\t\t\t\t}).play();\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_loadUnder: function(info, props){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfigure out which three images are being covered, and\r\n\t\t\t//\t\tdetermine if they need loaded or not\r\n\r\n\t\t\tvar idx = info.io;\r\n\t\t\tvar nodes = [];\r\n\r\n\t\t\tvar isLeft = (props.left >= 0);\r\n\t\t\tvar isUp = (props.top >= 0);\r\n\r\n\t\t\tvar c = this.cols,\r\n\t\t\t\t// the three node index's we're allegedly over:\r\n\t\t\t\te = idx + (isLeft ? -1 : 1),\r\n\t\t\t\tf = idx + (isUp ? -c : c),\r\n\t\t\t\t// don't ask:\r\n\t\t\t\tg = (isUp ? (isLeft ? e - c : f + 1) : (isLeft ? f - 1 : e + c)),\r\n\r\n\t\t\t\tbc = this.baseClass;\r\n\r\n\t\t\tdojo.forEach([e, f, g], function(x){\r\n\t\t\t\tvar n = this._nl[x];\r\n\t\t\t\tif(n){\r\n\t\t\t\t\tif(dojo.hasClass(n, bc + \"Seen\")){\r\n\t\t\t\t\t\t// change the background image out?\r\n\t\t\t\t\t\tdojo.removeClass(n, bc + \"Seen\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},this);\r\n\r\n\t\t\tsetTimeout(dojo.hitch(this, \"_disenbiggen\", info, props), this.delay * 1.25);\r\n\r\n\t\t},\r\n\r\n\t\t_disenbiggen: function(info, props){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHide the passed node (info.n), passing along properties\r\n\t\t\t//\t\treceived.\r\n\r\n\t\t\tif(props.top >= 0){\r\n\t\t\t\tprops.top += this.cellSize;\r\n\t\t\t}\r\n\t\t\tif(props.left >= 0){\r\n\t\t\t\tprops.left += this.cellSize;\r\n\t\t\t}\r\n\t\t\tvar _cc = this.cellSize - (this.cellMargin * 2);\r\n\t\t\tdojo.animateProperty({\r\n\t\t\t\tnode: info.n,\r\n\t\t\t\tproperties: dojo.mixin(props, {\r\n\t\t\t\t\twidth:_cc,\r\n\t\t\t\t\theight:_cc\r\n\t\t\t\t}),\r\n\t\t\t\tonEnd: dojo.hitch(this, \"_cycle\", info, props)\r\n\t\t\t}).play(5);\r\n\t\t},\r\n\r\n\t\t_cycle: function(info, props){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelect an un-viewed image from the list, and show it\r\n\r\n\t\t\tvar bc = this.baseClass;\r\n\t\t\tdojo.removeClass(info.n, bc + \"Top\");\r\n\t\t\tvar ns = this._nl.filter(function(n){\r\n\t\t\t\treturn !dojo.hasClass(n, bc + \"Seen\")\r\n\t\t\t});\r\n\t\t\tvar c = ns[Math.floor(Math.random() * ns.length)];\r\n\t\t\tsetTimeout(dojo.hitch(this,\"_enbiggen\", { target: c }), this.delay / 2)\r\n\r\n\t\t}\r\n\r\n\t});\r\n});\r\n\r\n"]}